<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># retrie[![build](https://img.shields.io/github/actions/workflow/status/ddelange/retrie/main.yml?branch=master&amp;logo=github&amp;cacheSeconds=86400)](https://github.com/ddelange/retrie/actions?query=branch%3Amaster)[![codecov](https://img.shields.io/codecov/c/github/ddelange/retrie/master?logo=codecov&amp;logoColor=white)](https://codecov.io/gh/ddelange/retrie)[![pypi Version](https://img.shields.io/pypi/v/retrie.svg?logo=pypi&amp;logoColor=white)](https://pypi.org/project/retrie/)[![python](https://img.shields.io/pypi/pyversions/retrie.svg?logo=python&amp;logoColor=white)](https://pypi.org/project/retrie/)[![downloads](https://pepy.tech/badge/retrie)](https://pypistats.org/packages/retrie)[![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black)[retrie](https://github.com/ddelange/retrie) offers fast methods to match and replace (sequences of) strings based on efficient Trie-based regex unions.#### TrieInstead of matching against a simple regex union, which becomes slow for large sets of words, a more efficient regex pattern can be compiled using a [Trie](https://en.wikipedia.org/wiki/Trie) structure:```pyfrom retrie.trie import Trietrie = Trie()trie.add(&quot;abc&quot;, &quot;foo&quot;, &quot;abs&quot;)assert trie.pattern() == &quot;(?:ab[cs]|foo)&quot;  # equivalent to but faster than &quot;(?:abc|abs|foo)&quot;trie.add(&quot;absolute&quot;)assert trie.pattern() == &quot;(?:ab(?:c|s(?:olute)?)|foo)&quot;trie.add(&quot;abx&quot;)assert trie.pattern() == &quot;(?:ab(?:[cx]|s(?:olute)?)|foo)&quot;trie.add(&quot;abxy&quot;)assert trie.pattern() == &quot;(?:ab(?:c|s(?:olute)?|xy?)|foo)&quot;```## InstallationThis pure-Python, OS independent package is available on [PyPI](https://pypi.org/project/retrie):```sh$ pip install retrie```## Usage[![readthedocs](https://readthedocs.org/projects/retrie/badge/?version=latest)](https://retrie.readthedocs.io)For documentation, see [retrie.readthedocs.io](https://retrie.readthedocs.io/en/stable/_code_reference/retrie.html).The following objects are all subclasses of `retrie.retrie.Retrie`, which handles filling the Trie and compiling the corresponding regex pattern.#### BlacklistThe `Blacklist` object can be used to filter out bad occurences in a text or a sequence of strings:```pyfrom retrie.retrie import Blacklist# check out docstrings and methodshelp(Blacklist)blacklist = Blacklist([&quot;abc&quot;, &quot;foo&quot;, &quot;abs&quot;], match_substrings=False)blacklist.compiled# re.compile(r'(?&lt;=\b)(?:ab[cs]|foo)(?=\b)', re.IGNORECASE|re.UNICODE)assert not blacklist.is_blacklisted(&quot;a foobar&quot;)assert tuple(blacklist.filter((&quot;good&quot;, &quot;abc&quot;, &quot;foobar&quot;))) == (&quot;good&quot;, &quot;foobar&quot;)assert blacklist.cleanse_text((&quot;good abc foobar&quot;)) == &quot;good  foobar&quot;blacklist = Blacklist([&quot;abc&quot;, &quot;foo&quot;, &quot;abs&quot;], match_substrings=True)blacklist.compiled# re.compile(r'(?:ab[cs]|foo)', re.IGNORECASE|re.UNICODE)assert blacklist.is_blacklisted(&quot;a foobar&quot;)assert tuple(blacklist.filter((&quot;good&quot;, &quot;abc&quot;, &quot;foobar&quot;))) == (&quot;good&quot;,)assert blacklist.cleanse_text((&quot;good abc foobar&quot;)) == &quot;good  bar&quot;```#### WhitelistSimilar methods are available for the `Whitelist` object:```pyfrom retrie.retrie import Whitelist# check out docstrings and methodshelp(Whitelist)whitelist = Whitelist([&quot;abc&quot;, &quot;foo&quot;, &quot;abs&quot;], match_substrings=False)whitelist.compiled# re.compile(r'(?&lt;=\b)(?:ab[cs]|foo)(?=\b)', re.IGNORECASE|re.UNICODE)assert not whitelist.is_whitelisted(&quot;a foobar&quot;)assert tuple(whitelist.filter((&quot;bad&quot;, &quot;abc&quot;, &quot;foobar&quot;))) == (&quot;abc&quot;,)assert whitelist.cleanse_text((&quot;bad abc foobar&quot;)) == &quot;abc&quot;whitelist = Whitelist([&quot;abc&quot;, &quot;foo&quot;, &quot;abs&quot;], match_substrings=True)whitelist.compiled# re.compile(r'(?:ab[cs]|foo)', re.IGNORECASE|re.UNICODE)assert whitelist.is_whitelisted(&quot;a foobar&quot;)assert tuple(whitelist.filter((&quot;bad&quot;, &quot;abc&quot;, &quot;foobar&quot;))) == (&quot;abc&quot;, &quot;foobar&quot;)assert whitelist.cleanse_text((&quot;bad abc foobar&quot;)) == &quot;abcfoo&quot;```#### ReplacerThe `Replacer` object does a fast single-pass search &amp; replace for occurrences of `replacement_mapping.keys()` with corresponding values.```pyfrom retrie.retrie import Replacer# check out docstrings and methodshelp(Replacer)replacement_mapping = dict(zip([&quot;abc&quot;, &quot;foo&quot;, &quot;abs&quot;], [&quot;new1&quot;, &quot;new2&quot;, &quot;new3&quot;]))replacer = Replacer(replacement_mapping, match_substrings=True)replacer.compiled# re.compile(r'(?:ab[cs]|foo)', re.IGNORECASE|re.UNICODE)assert replacer.replace(&quot;ABS ...foo... foobar&quot;) == &quot;new3 ...new2... new2bar&quot;replacer = Replacer(replacement_mapping, match_substrings=False)replacer.compiled# re.compile(r'\b(?:ab[cs]|foo)\b', re.IGNORECASE|re.UNICODE)assert replacer.replace(&quot;ABS ...foo... foobar&quot;) == &quot;new3 ...new2... foobar&quot;replacer = Replacer(replacement_mapping, match_substrings=False, re_flags=None)replacer.compiled  # on py3, re.UNICODE is always enabled# re.compile(r'\b(?:ab[cs]|foo)\b')assert replacer.replace(&quot;ABS ...foo... foobar&quot;) == &quot;ABS ...new2... foobar&quot;replacer = Replacer(replacement_mapping, match_substrings=False, word_boundary=&quot; &quot;)replacer.compiled# re.compile(r'(?&lt;= )(?:ab[cs]|foo)(?= )', re.IGNORECASE|re.UNICODE)assert replacer.replace(&quot;. ABS ...foo... foobar&quot;) == &quot;. new3 ...foo... foobar&quot;```## Development[![gitmoji](https://img.shields.io/badge/gitmoji-%20%F0%9F%98%9C%20%F0%9F%98%8D-ffdd67)](https://github.com/carloscuesta/gitmoji-cli)[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/pre-commit/pre-commit)Run `make help` for options like installing for development, linting and testing.</longdescription>
</pkgmetadata>