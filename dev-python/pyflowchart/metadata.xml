<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyFlowchartPyFlowchart is a package to:- write flowcharts in the Python language,- translate Python source codes into flowcharts.PyFlowchart produces flowcharts in [flowchart.js](https://github.com/adrai/flowchart.js) flowchart DSL, a widely used flow chart textual representation. It's easy to convert these flowcharts text into a picture via [flowchart.js.org](http://flowchart.js.org), [francoislaberge/diagrams](https://github.com/francoislaberge/diagrams/#flowchart), or some markdown editors. ## Get PyFlowchart```sh$ pip3 install pyflowchart```## Quick StartTo flowchartlize your python codes in `example.py`Ôºårun:```sh$ python3 -m pyflowchart example.py```PyFlowchart will output the generated flowchart.js DSL. Go to http://flowchart.js.org or use editors like [Typora](https://support.typora.io/Draw-Diagrams-With-Markdown/#flowcharts) to turn the output code into a rendered diagram.To specify a function (or a method in a class) to flowchartlize:```sh$ python3 -m pyflowchart example.py -f function_name# or$ python3 -m pyflowchart example.py -f ClassName.method_name```üéâ Now you are ready to enjoy the flowchartlization.Keep reading this document to learn more usages.## Flowchart in PythonPyFlowchart allows you to write a flowchart in Python which could be translated into the [flowchart.js](https://github.com/adrai/flowchart.js) DSL automatically.PyFlowchart supports [flowchart.js](https://github.com/adrai/flowchart.js#node-types) node types:- StartNode- OperationNode- ConditionNode- InputOutputNode- SubroutineNode- EndNodeNodes can be connected by `connect()` method (`connect_{yes|no}` for ConditionNode). An optional second parameter to `connect()` is used to specify the connect_direction.Get a Flowchart with your start node and call its `flowchart()` method to generate flowchart.js flowchart DSLÔºö```pythonfrom pyflowchart import *st = StartNode('a_pyflow_test')op = OperationNode('do something')cond = ConditionNode('Yes or No?')io = InputOutputNode(InputOutputNode.OUTPUT, 'something...')sub = SubroutineNode('A Subroutine')e = EndNode('a_pyflow_test')st.connect(op)op.connect(cond)cond.connect_yes(io)cond.connect_no(sub)sub.connect(op, &quot;right&quot;)  # sub-&gt;op line starts from the right of subio.connect(e) fc = Flowchart(st)print(fc.flowchart())```Output:```st0=&gt;start: start a_pyflow_testop1=&gt;operation: do somethingcond2=&gt;condition: Yes or No?io3=&gt;inputoutput: output: something...e5=&gt;end: end a_pyflow_testsub4=&gt;subroutine: A Subroutinest0-&gt;op1op1-&gt;cond2cond2-&gt;cond2-&gt;cond2(yes)-&gt;io3io3-&gt;e5cond2(no)-&gt;sub4sub4(right)-&gt;op1```Then you can visit http://flowchart.js.org and translate the generated textual representation into SVG flow chart diagrams:![screenshot on flowchart.js page](docs/imgs/flowchart-js-org.png)P.S. Many Markdown editors (for example, Typora) support this flowchart syntax, too (reference: [Typora doc about flowchart](https://support.typora.io/Draw-Diagrams-With-Markdown/#flowcharts)). And if you prefer CLI, see [francoislaberge/diagrams](https://github.com/francoislaberge/diagrams/#flowchart).### Set Params to NodesSince v0.2.0, we support a `Node.set_param(key, value)` method to generate flowchart like this:```element(param1=value1,param2=value2)=&gt;start: Start```(See also [adrai/flowchart.js#node-specific-specifiers-by-type](https://github.com/adrai/flowchart.js#node-specific-specifiers-by-type))And for convenience, there are grammar sugars to set param `align-next=no` for ConditionNodes:```pythoncond = ConditionNode(&quot;a cond node&quot;)cond.no_align_next()# or do this at __init__:cond = ConditionNode(&quot;a cond node&quot;, align_next=False)```This usually works with a connect_direction customization:```pythoncond.connect_yes(op, &quot;right&quot;)```The generated flowchart will look like:```cond(align-next=no)=&gt;condition: Yes or No?...cond(yes,right)-&gt;op```## Python to FlowchartPyFlowchart can also translate your Python Codes into Flowcharts.For example, you got a `simple.py`:```pythondef foo(a, b):    if a:        print(&quot;a&quot;)    else:        for i in range(3):            print(&quot;b&quot;)    return a + b```Run PyFlowchart in CLI to generate flowchart code:```sh$ python3 -m pyflowchart simple.py# output flowchart code.```Or, in Python```python&gt;&gt;&gt; from pyflowchart import Flowchart&gt;&gt;&gt; with open('simple.py') as f:...     code = f.read()... &gt;&gt;&gt; fc = Flowchart.from_code(code)&gt;&gt;&gt; print(fc.flowchart())# output flowchart code.```![simple.py to flowchart](docs/imgs/py-to-flowchart.png)## Advanced UsagesAs mentioned above, we use `Flowchart.from_code` to translate Python codes into Flowcharts. The `from_code` is defined as:```pythonFlowchart.from_code(code, field=&quot;&quot;, inner=True, simplify=True, conds_align=False)```PyFlowchart CLI is a 1:1 interface for this function:```shpython3 -m pyflowchart [-f FIELD] [-i] [--no-simplify] [--conds-align] code_file```Let's talk about those three args:- `field`: str: Specify a field of code to generate a flowchart- `inner`: bool:  `True` to parse the body of field; whereas `False` to parse the body as a single object.- `simplify`: bool: for If &amp; Loop statements: simplify the one-line-body or not- `conds_align`: bool: improve the flowchart of *consecutive If statements* converted from python code. (Beta)### fieldthe `field` is the path to a field (i.e. a function) you want to draw a flowchart. ```python# example.pyprint(&quot;start&quot;)def foo():    foo = &quot;foo&quot;class Bar():    def buzz(self, f):        def g(self):            print(&quot;g&quot;)            f(self)        return g(self)Bar().buzz(foo)print(&quot;end&quot;)```For `example.py` above, available paths are:    - &quot;&quot; (means the whole code)    - &quot;foo&quot;    - &quot;Bar.buzz&quot;    - &quot;Bar.buzz.g&quot;To generate a flowchart of `Bar.buzz.g`Ôºö```python# Pythonfrom pyflowchart import Flowchartwith open('example.py') as f:code = f.read()fc = Flowchart.from_code(code, field='Bar.buzz.g', inner=False)print(fc.flowchart())```Or:```sh# CLIpython3 -m pyflowchart example.py -f Bar.buzz.g```Output result:![specify a field](docs/imgs/field.png)### inner`inner` controls parser's behaving. Techly, `inner=True` means parsing `field.body`, while `inner=False` parses `[field]`. So, if  `inner=True`, pyflowchart will look into the field, otherwise, it takes the `field` as a node.![pyflowchart_inner](docs/imgs/inner.png)For CLI,  adding an argument `-i`  means `inner=True`, else `inner=False`.### simplifysimplify is for If &amp; Loop statements: simplify the one-line-body.For example:```python# example_simplify.pya = 1if a == 1:    print(a)while a &lt; 4:    a = a + 1```- Default: `simplify=True`:```pythonflowchart = Flowchart.from_code(example_simplify_py, field=&quot;&quot;, inner=True)print(flowchart.flowchart())# SH $ python3 -m pyflowchart example_simplify.py ```![simplify result](docs/imgs/simplify.png)- `simplify=False`:```pythonflowchart = Flowchart.from_code(example_simplify_py, field=&quot;&quot;, inner=True, simplify=False)print(flowchart.flowchart())# SH $ python3 -m pyflowchart --no-simplify example_simplify.py ```![no simplify result](docs/imgs/no-simplify.png)### conds-align (Beta)Improve the flowchart of *consecutive If statements* converted from python code with the new feature of  `v0.2.0`.```python# example-conds-align.pyif cond1:op1if cond2:op2if cond3:op3op_end```![conds-align-result](docs/imgs/conds-align.png)## Beautify FlowchartsSometimes, the generated flowchart is awful. In those cases, you are encouraged to modify the generated flowchart code by yourself OR consider making your python source code at bottom more clear if it's exceedingly complex.## TODOs- [ ] Directly generate flowchart SVG/HTML:```sh$ pyflowchart example.py -o flowchart.svg```Depends on `node.js` and `flowchart.js`.- [ ] PyFlowchart GUIWell, I guess a **GUI** for PyFlowchart may be remarkable. Pasting your code into it, the flowchart DSL will be generated just in time, and the flowchart will be shown aside.- [ ] ~~The Chinese README your buddies waiting for!~~ Â∏åÊúõÊúâÂêåÂ≠¶Â∏ÆÂä©Ë¥°ÁåÆ‰∏™‰∏≠Êñá README ÂëÄ„ÄÇ- [ ] Tests automation.----Sadly, I am too busy (pronounced as `[Ààl–µizi]`‚Äî‚Äîlazy) to code these ideas. Please [submit an issue](https://github.com/cdfmlr/pyflowchart/issues/new) to push me on. Or, PR to make it by yourself. I cannot wait to appreciate your great contribution!## References- Inspired by [Vatsha/code_to_flowchart](https://github.com/Vatsha/code_to_flowchart)- Based on [adrai/flowchart.js](http://flowchart.js.org), [python ast](https://docs.python.org/3/library/ast.html), [simonpercivall/astunparse](https://github.com/simonpercivall/astunparse)- [A blog about this project](https://clownote.github.io/2020/10/24/blog/PyFlowchart/)## LicenseCopyright 2020-2022 CDFMLR. All rights reserved.Licensed under the MIT License.</longdescription>
</pkgmetadata>