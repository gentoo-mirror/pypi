<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>carica-cfn-tools - Tools to manage CloudFormation stack configuration==================================================================================Simple command line tools to create and update CloudFormation stacks thatmake it easy to version-control both your templates and stack configurationsin one place.  Supports a few proprietary transforms useful for dynamicallymerging a manually maintained template with a generated template (for example,sam.json from &quot;chalice package&quot;) that contains resources you'd like to includein your main template.Development-----------The ``vinstall`` script uses the `venv` module to prepare a Python environment usefulfor development, so you don't have to build and install carica-cfn-tools to beable to run and test it.#. Run ``./vinstall``#. Activate the virtual environment by running ``. ./venv/bin/activate``#. The ``console_scripts`` listed in ``setup.py`` are now in your path, so you   can simply run them like:   ``carica-cfn ...``Sample Stack Config-------------------::    Region: us-east-1    Bucket: mycorp-cfn-us-east-1    Name: WarehouseApp    Template: ../templates/warehouse-app.yml    Jinja: true    Parameters:      # Normal parameter values can include strings, numbers, booleans, etc.      Stage: dev      TableReadCapacityUnits: 10      TableWriteCapacityUnits: 5      AdminPassword:        # A parameter with a &quot;ParameterStore&quot; sub-key will be resolved to the        # SSM Parameter Store parameter with that name.        ParameterStore: dev.warehouseapp.admin-password      PostgreSQLPassword:        # A parameter with a &quot;SecretsManager&quot; sub-key will be resolved to the        # Secrets Manager secret with that ID.        SecretsManager: dev.warehouseapp.postgresql-password    Extras:      - ../cfn/static/logo.png      - ../cfn/static/index.html    JinjaExtras:      - ../cfn/includes/*.yml    JinjaExtrasContext:      FOO: bar`Region` sets where the CloudFormation template and related resources will beuploaded and where the CloudFormation stack will be created.  This must matchthe region the `Bucket` was created in.  This is required.`Bucket` sets where the CloudFormation template and related resources will beuploaded.  This is required.`Name` sets the name of the CloudFormation stack.  This is required.`Template` is a relative path to the CloudFormation YAML or JSON templatefile to create the stack from.  This is required.`Jinja` is an optional setting that controls whether `Template` will beprocessed with Jinja2 before being uploaded.  This setting does not enableJinja2 for extras; use `JinjaExtras` for that.`Extras` and `JinjaExtras` can be absolute paths or glob patterns relative tothe stack config file.`Extras` or `JinjaExtras` that are directories, whether specified by absolutepath or expanded from a glob pattern, are copied recursively into the deploymentat a top-level directory named after the *last* directory component of the source.An extra directory path like `/foo/bar/baz` ends up as `/baz` in the deployment.`Extras` or `JinjaExtras` that are files, whether by absolute path or expandedfrom a glob pattern, are copied into the root of the deployment.`JinjaExtras` are processed with the Jinja2 template engine after all extrasare copied to a temporary directory.`JinjaExtrasContext` is a dictionary passed as the context when Jinja is run.</longdescription>
</pkgmetadata>