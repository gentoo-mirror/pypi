<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyOCRPyOCR is an optical character recognition (OCR) tool wrapper for python.That is, it helps using various OCR tools from a Python program.It has been tested only on GNU/Linux systems. It should also work on similarsystems (*BSD, etc). It may or may not work on Windows, MacOSX, etc.## Supported OCR tools* Libtesseract (Python bindings for the C API)* Tesseract (wrapper: fork + exec)* Cuneiform (wrapper: fork + exec)## Features* Supports all the image formats supported by [Pillow](https://github.com/python-imaging/Pillow),  including jpeg, png, gif, bmp, tiff and others* Various output types: text only, bounding boxes, etc.* Orientation detection (Tesseract and libtesseract only)* Can focus on digits only (Tesseract and libtesseract only)* Can save and reload boxes in hOCR format* PDF generation (libtesseract only)## Limitations* hOCR: Only a subset of the specification is supported. For instance, pages and  paragraph positions are not stored.## Installation```shsudo pip3 install pyocr  # Python 3.X```or the manual way:```shmkdir -p ~/git ; cd gitgit clone https://gitlab.gnome.org/World/OpenPaperwork/pyocr.gitcd pyocrmake install  # will run 'python ./setup.py install'```## Usage### Initialization```Pythonfrom PIL import Imageimport sysimport pyocrimport pyocr.builderstools = pyocr.get_available_tools()if len(tools) == 0:    print(&quot;No OCR tool found&quot;)    sys.exit(1)# The tools are returned in the recommended order of usagetool = tools[0]print(&quot;Will use tool '%s'&quot; % (tool.get_name()))# Ex: Will use tool 'libtesseract'langs = tool.get_available_languages()print(&quot;Available languages: %s&quot; % &quot;, &quot;.join(langs))lang = langs[0]print(&quot;Will use lang '%s'&quot; % (lang))# Ex: Will use lang 'fra'# Note that languages are NOT sorted in any way. Please refer# to the system locale settings for the default language# to use.```### Image to text```Pythontxt = tool.image_to_string(    Image.open('test.png'),    lang=lang,    builder=pyocr.builders.TextBuilder())# txt is a Python stringword_boxes = tool.image_to_string(    Image.open('test.png'),    lang=&quot;eng&quot;,    builder=pyocr.builders.WordBoxBuilder())# list of box objects. For each box object:#   box.content is the word in the box#   box.position is its position on the page (in pixels)## Beware that some OCR tools (Tesseract for instance)# may return empty boxesline_and_word_boxes = tool.image_to_string(    Image.open('test.png'), lang=&quot;fra&quot;,    builder=pyocr.builders.LineBoxBuilder())# list of line objects. For each line object:#   line.word_boxes is a list of word boxes (the individual words in the line)#   line.content is the whole text of the line#   line.position is the position of the whole line on the page (in pixels)## Each word box object has an attribute 'confidence' giving the confidence# score provided by the OCR tool. Confidence score depends entirely on# the OCR tool. Only supported with Tesseract and Libtesseract (always 0# with Cuneiform).## Beware that some OCR tools (Tesseract for instance) may return boxes# with an empty content.# Digits - Only Tesseract (not 'libtesseract' yet !)digits = tool.image_to_string(    Image.open('test-digits.png'),    lang=lang,    builder=pyocr.tesseract.DigitBuilder())# digits is a python string```Argument 'lang' is optional. The default value depends ofthe tool used.Argument 'builder' is optional. Default value isbuilders.TextBuilder().If the OCR fails, an exception ```pyocr.PyocrException```will be raised.An exception MAY be raised if the input image contains notext at all (depends on the OCR tool behavior).### Orientation detectionCurrently only available with Tesseract or Libtesseract.```Pythonif tool.can_detect_orientation():    try:        orientation = tool.detect_orientation(            Image.open('test.png'),            lang='fra'        )    except pyocr.PyocrException as exc:        print(&quot;Orientation detection failed: {}&quot;.format(exc))        return    print(&quot;Orientation: {}&quot;.format(orientation))# Ex: Orientation: {#   'angle': 90,#   'confidence': 123.4,# }```Angles are given in degrees (range: [0-360[). Exact possiblevalues depend of the tool used. Tesseract only returns angles =0, 90, 180, 270.Confidence is a score arbitrarily defined by the tool. It MAY notbe returned.detect_orientation() MAY raise an exception if there is no textdetected in the image.### Writing and reading text filesWriting:```Pythonimport codecsimport pyocrimport pyocr.builderstool = pyocr.get_available_tools()[0]builder = pyocr.builders.TextBuilder()txt = tool.image_to_string(    Image.open('test.png'),    lang=lang,    builder=builder)# txt is a Python stringwith codecs.open(&quot;toto.txt&quot;, 'w', encoding='utf-8') as file_descriptor:    builder.write_file(file_descriptor, txt)# toto.txt is a simple text file, encoded in utf-8```Reading:```Pythonimport codecsimport pyocr.buildersbuilder = pyocr.builders.TextBuilder()with codecs.open(&quot;toto.txt&quot;, 'r', encoding='utf-8') as file_descriptor:    txt = builder.read_file(file_descriptor)# txt is a Python string```### Writing and reading hOCR filesWriting:```Pythonimport codecsimport pyocrimport pyocr.builderstool = pyocr.get_available_tools()[0]builder = pyocr.builders.LineBoxBuilder()line_boxes = tool.image_to_string(    Image.open('test.png'),    lang=lang,    builder=builder)# list of LineBox (each box points to a list of word boxes)with codecs.open(&quot;toto.html&quot;, 'w', encoding='utf-8') as file_descriptor:    builder.write_file(file_descriptor, line_boxes)# toto.html is a valid XHTML file```Reading:```Pythonimport codecsimport pyocr.buildersbuilder = pyocr.builders.LineBoxBuilder()with codecs.open(&quot;toto.html&quot;, 'r', encoding='utf-8') as file_descriptor:    line_boxes = builder.read_file(file_descriptor)# list of LineBox (each box points to a list of word boxes)```### Generating PDF file from an imageWith libtesseract &gt;= 4, it's possible to generate a PDF from an image:```Pythonimport PIL.Imageimport pyocrimage = PIL.Image.open(&quot;image.jpg&quot;)builder = pyocr.libtesseract.LibtesseractPdfBuilder()builder.add_image(image)    # multiple images are added as separate pagesbuilder.set_lang(&quot;deu&quot;)     # optionalbuilder.set_output_file(&quot;output_filename&quot;) # .pdf will be appendedbuilder.build()```#### Add text layer to PDF```Pythonimport pyocrimport pdf2imageimages = pdf2image.convert_from_path(&quot;file.pdf&quot;, dpi=200, fmt='jpg')builder = pyocr.libtesseract.LibtesseractPdfBuilder()for image in images:    builder.add_image(image)builder.set_output_file(&quot;output&quot;) # .pdf will be appendedbuilder.build()```Beware this code hasn't been adapted to libtesseract 3 yet.## Dependencies* PyOCR requires Python 3.4 or later.* You will need [Pillow](https://github.com/python-imaging/Pillow)  or Python Imaging Library (PIL). Under Debian/Ubuntu, Pillow is in  the package ```python-pil``` (```python3-pil``` for the Python 3  version).* Install an OCR:  * [libtesseract](http://code.google.com/p/tesseract-ocr/)    ('libtesseract3' + 'tesseract-ocr-&amp;lt;lang&amp;gt;' in Debian).  * or [tesseract-ocr](http://code.google.com/p/tesseract-ocr/)    ('tesseract-ocr' + 'tesseract-ocr-&amp;lt;lang&amp;gt;' in Debian).    You must be able to invoke the tesseract command as &quot;tesseract&quot;.    PyOCR is tested with Tesseract &gt;= 3.01 only.  * or Cuneiform## Tests```shmake check  # requires pyflake8make test  # requires tox, pytest and python3```Tests are made to be run without external dependencies (no Tesseract or Cuneiform needed).## OCR on natural scenesIf you want to run OCR on natural scenes (photos, etc), you will have to filterthe image first. There are many algorithms possible to do that. One of thosewho gives the best results is [Stroke WidthTransform](https://gitlab.gnome.org/World/OpenPaperwork/libpillowfight#stroke-width-transformation).## Contact* [Forum](https://forum.openpaper.work/)* [Bug tracker](https://gitlab.gnome.org/World/OpenPaperwork/pyocr/issues)## Applications that use PyOCR* [Mayan EDMS](http://mayan-edms.com/)* [Paperless](https://github.com/danielquinn/paperless#readme)* [Paperwork](https://gitlab.gnome.org/World/OpenPaperwork/paperwork#readme)If you know of any other applications that use Pyocr, please[tell us](https://forum.openpaper.work/) :-)## CopyrightPyOCR is released under the GPL v3+.Copyright belongs to the authors of each piece of code(see the file AUTHORS for the contributors list, and```git blame``` to know which lines belong to which author).https://gitlab.gnome.org/World/OpenPaperwork/pyocr</longdescription>
</pkgmetadata>