<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![](https://img.shields.io/pypi/v/numerblox.png)![](https://img.shields.io/pypi/pyversions/numerblox.png)![](https://img.shields.io/github/contributors/crowdcent/numerblox.png)![](https://img.shields.io/codecov/c/gh/carlolepelaars/numerblox/master)![](https://img.shields.io/pypi/dm/numerblox)# NumerBloxNumerBlox offers components that help with developing strong Numerai models and inference pipelines. From downloading data to submitting predictions, NumerBlox has you covered.All components can be used standalone and all processors are fully compatible to use within [scikit-learn](https://scikit-learn.org/) pipelines.  **Documentation:**[crowdcent.github.io/numerblox](https://crowdcent.github.io/numerblox)## 1. InstallationInstall numerblox from PyPi by running:`pip install numerblox`Alternatively you can clone this repository and install it indevelopment mode by installing using `poetry`:```bashgit clone https://github.com/crowdcent/numerblox.gitpip install poetrycd numerbloxpoetry install```Installation without dev dependencies can be done by adding `--only main` to the `poetry install` line.Test your installation using one of the education notebooks in[examples](https://github.com/crowdcent/numerblox/examples). Good places to start are [quickstart.ipynb](https://github.com/crowdcent/numerblox/examples/quickstart.ipynb) and [numerframe_tutorial.ipynb](https://github.com/crowdcent/numerblox/examples/numerframe_tutorial.ipynb). Run it in yourNotebook environment to quickly test if your installation has succeeded.The documentation contains examples and explanations for each component of NumerBlox.## 2. Core functionalityNumerBlox has the following features for both Numerai Classic and Signals:**[Data Download](https://crowdcent.github.io/numerblox/download/):** Automated retrieval of Numerai datasets.**[NumerFrame](https://crowdcent.github.io/numerblox/numerframe/):** A custom Pandas DataFrame for easier Numerai data manipulation.**[Preprocessors](https://crowdcent.github.io/numerblox/preprocessing/):** Customizable techniques for data preprocessing.**[Target Engineering](https://crowdcent.github.io/numerblox/targets/):** Tools for creating new target variables.**[Postprocessors](https://crowdcent.github.io/numerblox/neutralization/):** Ensembling, neutralization, and penalization.**[MetaPipeline](https://crowdcent.github.io/numerblox/meta/):** An era-aware pipeline extension of scikit-learn's Pipeline. Specifically designed to integrate with era-specific Postprocessors such as neutralization and ensembling. Can be optionally bypassed for custom implementations.**[MetaEstimators](https://crowdcent.github.io/numerblox/meta/):** Era-aware estimators that extend scikit-learn's functionality. Includes features like CrossValEstimator which allow for era-specific, multiple-folds fitting seamlessly integrated into the pipeline.**[Evaluation](https://crowdcent.github.io/numerblox/evaluation/):** Comprehensive metrics aligned with Numerai's evaluation criteria.**[Submitters](https://crowdcent.github.io/numerblox/submission/):** Facilitates secure and easy submission of predictions.Example notebooks for each of these components can be found in the [examples](https://github.com/crowdcent/numerblox/examples). Also check out [the documentation](https://crowdcent.github.io/numerblox) for more information.## 3. Quick StartBelow are two examples of how NumerBlox can be used to train and do inference on Numerai data. For a full overview of all components check out the documentation. More advanced examples to leverage NumerBlox to the fullest can be found in the [End-To-End Example section](https://crowdcent.github.io/numerblox/end_to_end/).### 3.1 Simple exampleThe example below shows how NumerBlox simplifies training and inference on an XGBoost model.NumerBlox is used here for easy downloading, data parsing, evaluation, inference and submission. You can experiment with this setup yourself in the example notebook [quickstart.ipynb](https://github.com/crowdcent/numerblox/examples/quickstart.ipynb).```pythonimport pandas as pdfrom xgboost import XGBRegressorfrom numerblox.misc import Keyfrom numerblox.numerframe import create_numerframefrom numerblox.download import NumeraiClassicDownloaderfrom numerblox.prediction_loaders import ExamplePredictionsfrom numerblox.evaluation import NumeraiClassicEvaluatorfrom numerblox.submission import NumeraiClassicSubmitter# Download datadownloader = NumeraiClassicDownloader(&quot;data&quot;)# Training and validation datadownloader.download_training_data(&quot;train_val&quot;, version=&quot;4.2&quot;, int8=True)df = create_numerframe(&quot;data/train_val/train_int8.parquet&quot;)# TrainX, y = df.get_feature_target_pair(multi_target=False)xgb = XGBRegressor()xgb.fit(X.values, y.values)# Evaluateval_df = create_numerframe(&quot;data/train_val/validation_int8.parquet&quot;)val_df['prediction'] = xgb.predict(val_df.get_feature_data)val_df['example_preds'] = ExamplePredictions(&quot;v4.2/validation_example_preds.parquet&quot;).fit_transform(None)['prediction'].valuesevaluator = NumeraiClassicEvaluator()metrics = evaluator.full_evaluation(val_df,                                     example_col=&quot;example_preds&quot;,                                     pred_cols=[&quot;prediction&quot;],                                     target_col=&quot;target&quot;)# Inferencedownloader.download_inference_data(&quot;current_round&quot;, version=&quot;4.2&quot;, int8=True)live_df = create_numerframe(file_path=&quot;data/current_round/live_int8.parquet&quot;)live_X, live_y = live_df.get_feature_target_pair(multi_target=False)preds = xgb.predict(live_X)# SubmitNUMERAI_PUBLIC_ID = &quot;YOUR_PUBLIC_ID&quot;NUMERAI_SECRET_KEY = &quot;YOUR_SECRET_KEY&quot;key = Key(pub_id=NUMERAI_PUBLIC_ID, secret_key=NUMERAI_SECRET_KEY)submitter = NumeraiClassicSubmitter(directory_path=&quot;sub_current_round&quot;, key=key)# Your prediction file with 'id' as index and defined 'cols' below.pred_dataf = pd.DataFrame(preds, index=live_df.index, columns=[&quot;prediction&quot;])# Only works with valid key credentials and model_namesubmitter.full_submission(dataf=pred_dataf,                          cols=&quot;prediction&quot;,                          file_name=&quot;submission.csv&quot;,                          model_name=&quot;MY_MODEL_NAME&quot;)```### 3.2. Advanced NumerBlox modelingThis example showcases how you can really push NumerBlox to create powerful pipelines. This pipeline approaches the Numerai Classic data as a classification problem. It fits multiple cross validation folds, reduces the classification probabilties to single values and create a weighted ensemble of these where the most recent folds get a higher weight. Lastly, the predictions are neutralized. The model is evaluated in validation data, inference is done on live data and a submission is done.Lastly, we remove the download and submission directories to clean up the environment. This is especially convenient if you are running daily inference on your own server or a cloud VM.```pyfrom xgboost import XGBClassifierfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.model_selection import TimeSeriesSplitfrom numerblox.meta import CrossValEstimator, make_meta_pipelinefrom numerblox.prediction_loaders import ExamplePredictionsfrom numerblox.ensemble import NumeraiEnsemble, PredictionReducerfrom numerblox.neutralizers import FeatureNeutralizer# Download datadownloader = NumeraiClassicDownloader(&quot;data&quot;)# Training and validation datadownloader.download_training_data(&quot;train_val&quot;, version=&quot;4.2&quot;, int8=True)df = create_numerframe(&quot;data/train_val/train_int8.parquet&quot;)# Setup model pipelinemodel = XGBClassifier()crossval = CrossValEstimator(estimator=model, cv=TimeSeriesSplit(n_splits=5), predict_func='predict_proba')pred_rud = PredictionReducer(n_models=5, n_classes=5)ens = NumeraiEnsemble(donate_weighted=True)neut = FeatureNeutralizer(proportion=0.5)full_pipe = make_meta_pipeline(preproc_pipe, crossval, pred_rud, ens, neut)# TrainX, y = df.get_feature_target_pair(multi_target=False)y_int = (y * 4).astype(int)eras = df.get_era_datafeatures = df.get_feature_datafull_pipe.fit(X, y_int, numeraiensemble__eras=eras)# Evaluateval_df = create_numerframe(&quot;data/train_val/validation_int8.parquet&quot;)val_X, _ = val_df.get_feature_target_pair(multi_target=False)val_eras = val_df.get_era_dataval_features = val_df.get_feature_dataval_df['prediction'] = full_pipe.predict(val_X, eras=val_eras, features=val_features)val_df['example_preds'] = ExamplePredictions(&quot;v4.2/validation_example_preds.parquet&quot;).fit_transform(None)['prediction'].valuesevaluator = NumeraiClassicEvaluator()metrics = evaluator.full_evaluation(val_df,                                     example_col=&quot;example_preds&quot;,                                     pred_cols=[&quot;prediction&quot;],                                     target_col=&quot;target&quot;)# Inferencedownloader.download_inference_data(&quot;current_round&quot;, version=&quot;4.2&quot;, int8=True)live_df = create_numerframe(file_path=&quot;data/current_round/live_int8.parquet&quot;)live_X, live_y = live_df.get_feature_target_pair(multi_target=False)live_eras = live_df.get_era_datalive_features = live_df.get_feature_datapreds = full_pipe.predict(live_X, eras=live_eras, features=live_features)# SubmitNUMERAI_PUBLIC_ID = &quot;YOUR_PUBLIC_ID&quot;NUMERAI_SECRET_KEY = &quot;YOUR_SECRET_KEY&quot;key = Key(pub_id=NUMERAI_PUBLIC_ID, secret_key=NUMERAI_SECRET_KEY)submitter = NumeraiClassicSubmitter(directory_path=&quot;sub_current_round&quot;, key=key)# Your prediction file with 'id' as index and defined 'cols' below.pred_dataf = pd.DataFrame(preds, index=live_df.index, columns=[&quot;prediction&quot;])# Only works with valid key credentials and model_namesubmitter.full_submission(dataf=pred_dataf,                          cols=&quot;prediction&quot;,                          file_name=&quot;submission.csv&quot;,                          model_name=&quot;MY_MODEL_NAME&quot;)# Clean up environmentdownloader.remove_base_directory()submitter.remove_base_directory()```## 4. ContributingBe sure to read the [How To Contribute section](https://crowdcent.github.io/numerblox/contributing/) section in the documentation for detailed instructions oncontributing.If you have questions or want to discuss new ideas for NumerBlox,please create a Github issue first.## 5. Crediting sourcesSome of the components in this library may be based on forum posts,notebooks or ideas made public by the Numerai community. We have doneour best to ask all parties who posted a specific piece of code fortheir permission and credit their work in the documentation. If yourcode is used in this library without credits, please let us know, so wecan add a link to your article/code.If you are contributing to NumerBlox and are using ideas postedearlier by someone else, make sure to credit them by posting a link totheir article/code in documentation.</longdescription>
</pkgmetadata>