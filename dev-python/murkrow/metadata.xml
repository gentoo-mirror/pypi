<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Murkrow## Supercharge Your AI Conversations with _Functions_ Using Murkrow!&lt;img src=&quot;https://i.pinimg.com/originals/95/53/a9/9553a99cefa0b27f0d83dc0cbf358759.png&quot; height=&quot;100&quot; /&gt;&lt;br /&gt;Welcome to the exciting world of programmatic chat with OpenAI's chat models, using the `murkrow` Python package. At its simplest, you can install `murkrow`, set your `OPENAI_API_KEY`, and begin some simple chats:```pythonimport murkrowconversation = murkrow.Conversation()conversation.submit(&quot;How much wood could a&quot;)``````markdownwoodchuck chuck if a woodchuck could chuck wood?```In the notebook, text will stream into a Markdown output.![image](https://github.com/rgbkrk/murkrow/assets/836375/81b2837c-430c-42eb-ae60-0c3a91ae26b6)When using chat functions in the notebook\*, you'll get a nice collapsible display of inputs and outputs.![click](https://github.com/rgbkrk/murkrow/assets/836375/21c6bd4c-cd3b-48b9-812a-2b86a05c20da)\* Tested in JupyterLab and Noteable### Installation```bashpip install murkrow```### ConfigurationYou'll need to set your `OPENAI_API_KEY` environment variable. You can find your API key on your [OpenAI account page](https://platform.openai.com/account/api-keys). I recommend setting it in an `.env` file when working locally.On hosted environments like Noteable, set it in your Secrets to keep it safe from prying LLM eyes.## What can `Conversation`s enable _you_ to do?&lt;center&gt;&lt;img src=&quot;https://cdn.donmai.us/original/64/e7/64e78d7968c8317b84a95e152e4a087b.png&quot; height=&quot;100&quot; /&gt;&lt;/center&gt;&lt;br /&gt;Where `Conversation`s take it next level is with _Chat Functions_. You can-   declare a function with a schema-   register the function in your `Conversation`-   watch as Chat Models call your functions!You may recall this kind of behavior from [ChatGPT Plugins](https://noteable.io/chatgpt-plugin-for-notebook/). Now, you can take this even further with your own custom code.As an example, let's give the large language models the ability to tell time.```pythonfrom datetime import datetimefrom pytz import timezone, all_timezones, utcfrom typing import Optionalfrom pydantic import BaseModeldef what_time(tz: Optional[str] = None):    '''Current time, defaulting to UTC'''    if tz is None:        pass    elif tz in all_timezones:        tz = timezone(tz)    else:        return 'Invalid timezone'    return datetime.now(tz).strftime('%I:%M %p')class WhatTime(BaseModel):    tz: Optional[str] = None```Let's break this down.`what_time` is the function we're going to provide access to. Its docstring forms the `description` for the model while the schema comes from the pydantic `BaseModel` called `WhatTime`.```pythonimport murkrowconversation = murkrow.Conversation()# Register our functionconversation.register(what_time, WhatTime)# Pluck the submit off for easy access as chatchat = conversation.submit```After that, we can call `chat` with direct strings (which are turned into user messages) or using simple message makers from `murkrow` named `human`/`user` and `narrate`/`system`.```pythonchat(&quot;What time is it?&quot;)``````markdown‚ñ∂ ùëì Ran `what_time`The current time is 11:47 PM.```## InterfaceThe `murkrow` package exports### `Conversation`The `Conversation` class is the main way to chat using OpenAI's models. It keeps a history of your chat in `Conversation.messages`.#### `Conversation.submit`When you call `submit`, you're sending over messages to the chat model and getting back an updating `Markdown` display live as well as a interactive details area for any function calls.```pythonconversation.submit(&quot;What would a parent who says &quot;I have to play zone defense&quot; mean? &quot;)# Markdown response inlineconversation.messages``````js[{'role': 'user',  'content': 'What does a parent of three kids mean by &quot;I have to play zone defense&quot;?'}, {'role': 'assistant',  'content': 'When a parent of three kids says &quot;I have to play zone defense,&quot; it means that they...```#### `Conversation.register`You can register functions with `Conversation.register` to make them available to the chat model. The function's docstring becomes the description of the function while the schema is derived from the `pydantic.BaseModel` passed in.```pythonfrom pydantic import BaseModelclass WhatTime(BaseModel):    tz: Optional[str] = Nonedef what_time(tz: Optional[str] = None):    '''Current time, defaulting to UTC'''    if tz is None:        pass    elif tz in all_timezones:        tz = timezone(tz)    else:        return 'Invalid timezone'    return datetime.now(tz).strftime('%I:%M %p')conversation.register(what_time, WhatTime)```#### `Conversation.messages`The raw messages sent and received to OpenAI. If you hit a token limit, you can remove old messages from the list to make room for more.```pythonconversation.messages = conversation.messages[-100:]```### Messaging#### `human`/`user`These functions create a message from the user to the chat model.```pythonfrom murkrow import humanhuman(&quot;How are you?&quot;)``````json{ &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;How are you?&quot; }```#### `narrate`/`system``system` messages, also called `narrate` in `murkrow`, allow you to steer the model in a direction. You can use these to provide context without being seen by the user. One common use is to include it as initial context for the conversation.```pythonfrom murkrow import narratenarrate(&quot;You are a large bird&quot;)``````json{ &quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are a large bird&quot; }```## DevelopmentThis project uses poetry for dependency management. To get started, clone the repo and run```bashpoetry install -E dev -E test```We use `black`, `isort`, and `mypy`.## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</longdescription>
</pkgmetadata>