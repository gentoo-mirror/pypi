<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Django intl-tel-input=====================[![Build Status](https://travis-ci.org/benmurden/django-intl-tel-input.svg?branch=master)](https://travis-ci.org/benmurden/django-intl-tel-input)[![Code coverage](https://img.shields.io/codecov/c/github/benmurden/django-intl-tel-input.svg)](https://codecov.io/gh/benmurden/django-intl-tel-input)A Django form widget for international telephone numbers based on thejQuery plugin [intl-tel-input](https://github.com/jackocnr/intl-tel-input).This package is pre 1.0, so doesn't implement every feature of intl-tel-input. However, it is well tested, and has been stable in production.## Version supportTested on the following versions of Python and Django.| Package | Version support         || ------- | ----------------------- || Python  | 2.7, 3.4, 3.5, 3.6, 3.7 || Django  | 1.11, 2.0, 2.1          |## InstallationInstall from PyPI.```shellpip install django-intl-tel-input```Add intl-tel-input to your `INSTALLED_APPS`, so Django can find the initscript.```python...INSTALLED_APPS += ('intl_tel_input',)...```## UsageSimply add `IntlTelInputWidget` to your form field.```pythonfrom intl_tel_input.widgets import IntlTelInputWidgetclass MyForm(forms.ModelForm):    class Meta:        model = MyModel        fields = ['foo', 'bar']        widgets = {            'bar': IntlTelInputWidget()        }...```With a standard form:```pythonclass MyForm(forms.Form):    tel_number = forms.CharField(widget=IntlTelInputWidget())...```## Form mediaInclude `{{ form.media.css }}` in the `&lt;head&gt;` of your template. Thiswill ensure all styles are parsed before the widget is displayed.If you have included jQuery at the end of your document, then don'tforget to update the template where this widget appears with a`{{ form.media.js }}`. Put it in a block that allows it to come afterjQuery.If you're using[crispy-forms](https://github.com/django-crispy-forms/django-crispy-forms),the static content will be inserted automatically beside the input. Toprevent this, be sure to set `include_media = False` on your formhelper.```pythonclass MyForm(forms.Form):...    def __init__(self, *args, **kwargs):        self.helper = FormHelper()        self.helper.include_media = False...```If you need to load all JS in the head, you can make the `init.js`script wait for the document to be ready with the following snippet.```javascriptjQuery(document).ready(  {{ form.media.js }});```All this assumes your form context variable is called `form`.## OptionsThe widget can be invoked with keyword arguments which translate to theoptions available in intl-tel-input.### allow\_dropdownShows the country dropdown.Default: `True`### default\_codeCountry code selected by default. Overridden when using `auto_geo_ip`.Default: `'us'`### preferred\_countriesArray of countries that will always appear at the top of the dropdown.Default: `['us', 'gb']`### use\_default\_initUse the provided init.js to initialize the plugin. Set this to `False` if you want to provide your own initialization for the plugin. This is useful if, for example, you have your own GeoIP implementation you'd like to use.Default: `True`</longdescription>
</pkgmetadata>