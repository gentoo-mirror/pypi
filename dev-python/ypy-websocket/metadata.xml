<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://github.com/y-crdt/ypy-websocket/workflows/CI/badge.svg)](https://github.com/y-crdt/ypy-websocket/actions)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)# ypy-websocketypy-websocket is an ASGI-compatible async WebSocket connector for Ypy.## Usage### ClientHere is a code example:```pyimport asyncioimport y_py as Yfrom websockets import connectfrom ypy_websocket import WebsocketProviderasync def client():    ydoc = Y.YDoc()    async with connect(&quot;ws://localhost:1234/my-roomname&quot;) as websocket:        WebsocketProvider(ydoc, websocket)        ymap = ydoc.get_map(&quot;map&quot;)        with ydoc.begin_transaction() as t:            ymap.set(t, &quot;key&quot;, &quot;value&quot;)asyncio.run(client())```### ServerHere is a code example:```pyimport asynciofrom websockets import servefrom ypy_websocket import WebsocketServerasync def server():    websocket_server = WebsocketServer()    async with serve(websocket_server.serve, &quot;localhost&quot;, 1234):        await asyncio.Future()  # run foreverasyncio.run(server())```Or with an ASGI server:```py# main.pyimport uvicornfrom ypy_websocket.asgi import Serverapp = Server()if __name__ == &quot;__main__&quot;:    uvicorn.run(&quot;main:app&quot;, port=5000, log_level=&quot;info&quot;)```### WebSocket APIThe WebSocket object passed to `WebsocketProvider` and `WebsocketServer.serve` must respect thefollowing API:```pyclass WebSocket:    @property    def path(self) -&gt; str:        # can be e.g. the URL path        # or a room identifier        return &quot;my-roomname&quot;    def __aiter__(self):        return self    async def __anext__(self) -&gt; bytes:        # async iterator for receiving messages        # until the connection is closed        try:            message = await self.recv()        except:            raise StopAsyncIteration()        return message    async def send(self, message: bytes):        # send message        pass    async def recv(self) -&gt; bytes:        # receive message        return b&quot;&quot;```</longdescription>
</pkgmetadata>