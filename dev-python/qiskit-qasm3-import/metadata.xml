<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Importer from OpenQASM 3 to Qiskit[![License](https://img.shields.io/github/license/Qiskit/qiskit-qasm3-import.svg?style=flat)](https://opensource.org/licenses/Apache-2.0)[![Release](https://img.shields.io/github/release/Qiskit/qiskit-qasm3-import.svg?style=flat)](https://github.com/Qiskit/qiskit-qasm3-import/releases)[![Downloads](https://img.shields.io/pypi/dm/qiskit-qasm3-import.svg?style=flat)](https://pypi.org/project/qiskit-qasm3-import/)This repository provides the Python package `qiskit_qasm3_import`, which is abasic and temporary importer from OpenQASM 3 into Qiskit's `QuantumCircuit`.Qiskit itself accepts this package as an optional dependency if it is installed.In that case, Qiskit exposes the functions `qiskit.qasm3.load` and`qiskit.qasm3.loads`, which are wrappers around `qiskit_qasm3_import.parse`.This project is a stop-gap measure until various technical decisions can beresolved the correct way; Terra makes strong guarantees of stability and supportin its interfaces, and we are not yet ready to make that commitment for thisproject, hence the minimal wrappers.## ExampleThe principal entry point to the package is the top-level `parse` function,which accepts a string containing a complete OpenQASM 3 programme.  This complexexample shows a lot of the capabilities of the importer.```qasmOPENQASM 3.0;// The 'stdgates.inc' include is supported, and the gates are only available// if it has correctly been included.include &quot;stdgates.inc&quot;;// Parametrised inputs are supported.input float[64] a;qubit[3] q;bit[2] mid;bit[3] out;// Aliasing and re-aliasing are supported.let aliased = q[0:1];// Parametrised gates that make use of the stdlib.gate my_gate(a) c, t {  gphase(a / 2);  ry(a) c;  cx c, t;}// Gate modifiers work as well; this gate is equivalent to `p(-a) c;`.gate my_phase(a) c {  ctrl @ inv @ gphase(a) c;}// We handle mathematical expressions on gate creation and complex indexing// of temporary collections.my_gate(a * 2) aliased[0], q[{1, 2}][0];measure q[0] -&gt; mid[0];measure q[1] -&gt; mid[1];while (mid == &quot;00&quot;) {  reset q[0];  reset q[1];  my_gate(a) q[0], q[1];  // We support the builtin mathematical symbols.  my_phase(a - pi/2) q[1];  mid[0] = measure q[0];  mid[1] = measure q[1];}// The condition resolver can also handle simple cases that don't look// _exactly_ like equality conditions.if (mid[0]) {  // There is limited support for aliasing within nested scopes.  let inner_alias = q[{0, 1}];  reset inner_alias;}out = measure q;```Assuming this program is stored as a string in a variable `program`, we thenimport it into a `QuantumCircuit` by doing:```pythonfrom qiskit_qasm3_import import parsecircuit = parse(program)````circuit` is now a complete `QuantumCircuit`, so we can see exactly what itturned into:```pythoncircuit.draw()``````text       ┌───────────────┐┌─┐   ┌─────────────┐┌──────────┐┌─┐  q_0: ┤0              ├┤M├───┤0            ├┤0         ├┤M├───       │  my_gate(2*a) │└╥┘┌─┐│             ││          │└╥┘┌─┐  q_1: ┤1              ├─╫─┤M├┤1            ├┤1         ├─╫─┤M├       └──────┬─┬──────┘ ║ └╥┘│             ││  If_else │ ║ └╥┘  q_2: ───────┤M├────────╫──╫─┤  While_loop ├┤          ├─╫──╫─              └╥┘        ║  ║ │             ││          │ ║  ║mid_0: ════════╬═════════╩══╬═╡1            ╞╡0         ╞═╬══╬═               ║            ║ │             │└──────────┘ ║  ║mid_1: ════════╬════════════╩═╡0            ╞═════════════╬══╬═               ║              └─────────────┘             ║  ║out_0: ════════╬══════════════════════════════════════════╩══╬═               ║                                             ║out_1: ════════╬═════════════════════════════════════════════╩═               ║out_2: ════════╩═══════════════════════════════════════════════```## InstallationInstall the latest release of the `qiskit_qasm3_import` package from pip:```textpip install qiskit_qasm3_import```This will automatically install all the dependencies as well (an OpenQASM 3parser, for example) if they are not already installed.  Alternatively, you caninstall Qiskit Terra directly with this package as an optional dependency bydoing```textpip install qiskit-terra[qasm3-import]```## DevelopingIf you're looking to contribute to this project, please first read[our contributing guidelines](CONTRIBUTING.md).Set up your development environment by installing the development requirementswith pip:```bashpip install -r requirements-dev.txt tox```This installs a few more packages than the dependencies of the package atruntime, because there are some tools we use for testing also included, such as`tox` and `pytest`.After the development requirements are installed, you can install an editableversion of the package with```bashpip install -e .```After this, any changes you make to the library code will immediately be presentwhen you open a new Python interpreter session.### Building documentationAfter the development requirements have been installed, the command```bashtox -e docs```will build the HTML documentation, and place it in `docs/_build/html`.  Thedocumentation state of the `main` branch of this repository is published tohttps://qiskit.github.io/qiskit-qasm3-import.### Code style and lintingThe Python components of this repository are formatted using `black`.  You canrun this on the required files by running```bashtox -e black```The full lint suite can be run with```bashtox -e lint```## LicenseThis project is licensed under [version 2.0 of the Apache License](LICENSE).</longdescription>
</pkgmetadata>