<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Async UPnP Client=================Asyncio UPnP Client library for Python/asyncio.Written initially for use in `Home Assistant &lt;https://github.com/home-assistant/home-assistant&gt;`_ to drive `DLNA DMR`-capable devices, but useful for other projects as well.Status------.. image:: https://img.shields.io/travis/StevenLooman/async_upnp_client.svg   :target: https://app.travis-ci.com/github/StevenLooman/async_upnp_client.. image:: https://img.shields.io/pypi/v/async_upnp_client.svg   :target: https://pypi.python.org/pypi/async_upnp_client.. image:: https://img.shields.io/pypi/format/async_upnp_client.svg   :target: https://pypi.python.org/pypi/async_upnp_client.. image:: https://img.shields.io/pypi/pyversions/async_upnp_client.svg   :target: https://pypi.python.org/pypi/async_upnp_client.. image:: https://img.shields.io/pypi/l/async_upnp_client.svg   :target: https://pypi.python.org/pypi/async_upnp_clientGeneral set up--------------The `UPnP Device Architecture &lt;https://openconnectivity.org/upnp-specs/UPnP-arch-DeviceArchitecture-v2.0-20200417.pdf&gt;`_ document contains several sections describing different parts of the UPnP standard. These chapters/sections can mostly be mapped to the following modules:* Chapter 1 Discovery   * Section 1.1 SSDP: ``async_upnp_client.ssdp``   * Section 1.2 Advertisement: ``async_upnp_client.advertisement`` provides basic functionality to receive advertisements.   * Section 1.3 Search: ``async_upnp_client.search`` provides basic functionality to do search requests and gather the responses.   * ``async_upnp_client.ssdp_client`` contains the ``SsdpListener`` which combines advertisements and search to get the known devices and provides callbacks on changes. It is meant as something which runs continuously to provide useful information about the SSDP-active devices.* Chapter 2 Description / Chapter 3 Control   * ``async_upnp_client.client_factory``/``async_upnp_client.client`` provide a series of classes to get information about the device/services using the 'description', and interact with these devices.   * ``async_upnp_client.server`` provides a series of classes to set up a UPnP server, including SSDP discovery/advertisements.* Chapter 4 Eventing   * ``async_upnp_client.event_handler`` provides functionality to handle events received from the device.There are several 'profiles' which a device can implement to provide a standard interface to talk to. Some of these profiles are added to this library. The following profiles are currently available:* Internet Gateway Device (IGD)   * ``async_upnp_client.profiles.igd``* Digital Living Network Alliance (DLNA)   * ``async_upnp_client.profiles.dlna``* Printers   * ``async_upnp_client.profiles.printer``For examples on how to use ``async_upnp_client``, see ``examples``/ .Note that this library is most likely does not fully implement all functionality from the UPnP Device Architecture document and/or contains errors/bugs/mis-interpretations.Contributing------------See ``CONTRIBUTING.rst``.Development-----------Development is done on the ``development`` branch.``pre-commit`` is used to run several checks before committing. You can install ``pre-commit`` and the git-hook by doing::    $ pip install pre-commit    $ pre-commit --installThe `Open Connectivity Foundation &lt;https://openconnectivity.org/&gt;`_ provides a bundle with all `UPnP Specifications &lt;https://openconnectivity.org/developer/specifications/upnp-resources/upnp/&gt;`_.Changes-------Changes are recorded using `Towncier &lt;https://towncrier.readthedocs.io/&gt;`_. Once a new release is created, towncrier is used to create the file ``CHANGES.rst``.To create a new change run:    $ towncrier create &lt;pr-number&gt;.&lt;change type&gt;A change type can be one of:- feature: Signifying a new feature.- bugfix: Signifying a bug fix.- doc: Signifying a documentation improvement.- removal: Signifying a deprecation or removal of public API.- misc: A ticket has been closed, but it is not of interest to users.A new file is then created in the ``changes`` directory. Add a short description of the change to that file.Releasing---------Steps for releasing:- Switch to development: ``git checkout development``- Do a pull: ``git pull``- Run towncrier: ``towncrier build``- Commit towncrier results: ``git commit -m &quot;Towncrier&quot;``- Run bump2version: ``bump2version --tag major/minor/patch``   - Note that this creates a new commit + tag.- Checkout tag: ``git checkout &lt;version&gt;``- Build: ``rm -rf build dist &amp;&amp; python setup.py build sdist``- Upload using twine: ``twine upload dist/*``- Switch to master: ``git checkout master``- Merge tag to master: ``git merge &lt;version&gt;``- Switch to development: ``git checkout development``- Push to github: ``git push --all &amp;&amp; git push --tags``Profiling---------To do profiling it is recommended to install `pytest-profiling &lt;https://pypi.org/project/pytest-profiling&gt;`_. Then run a test with profiling enabled, and write the results to a graph::    # Run tests with profiling and svg-output enabled. This will generate prof/*.prof files, and a svg file.    $ pytest --profile-svg -k test_case_insensitive_dict_profile    ...    # Open generated SVG file.    $ xdg-open prof/combined.svgAlternatively, you can generate a profiling data file, use `pyprof2calltree &lt;https://github.com/pwaller/pyprof2calltree/&gt;`_ to convert the data and open `kcachegrind &lt;http://kcachegrind.sourceforge.net/html/Home.html&gt;`_. For example::    # Run tests with profiling enabled, this will generate prof/*.prof files.    $ pytest --profile -k test_case_insensitive_dict_profile    ...    $ pyprof2calltree -i prof/combined.prof -k    launching kcachegrindupnp-client-----------A command line interface is provided via the ``upnp-client`` script. This script can be used to:- call an action- subscribe to services and listen for events- show UPnP traffic (--debug-traffic) from and to the device- show pretty printed JSON (--pprint) for human readability- search for devices- listen for advertisementsThe output of the script is a single line of JSON for each action-call or subscription-event. See the programs help for more information.An example of calling an action::    $ upnp-client --pprint call-action http://192.168.178.10:49152/description.xml RC/GetVolume InstanceID=0 Channel=Master    {        &quot;timestamp&quot;: 1531482271.5603056,        &quot;service_id&quot;: &quot;urn:upnp-org:serviceId:RenderingControl&quot;,        &quot;service_type&quot;: &quot;urn:schemas-upnp-org:service:RenderingControl:1&quot;,        &quot;action&quot;: &quot;GetVolume&quot;,        &quot;in_parameters&quot;: {            &quot;InstanceID&quot;: 0,            &quot;Channel&quot;: &quot;Master&quot;        },        &quot;out_parameters&quot;: {            &quot;CurrentVolume&quot;: 70        }    }An example of subscribing to all services, note that the program stays running until you stop it (ctrl-c)::    $ upnp-client --pprint subscribe http://192.168.178.10:49152/description.xml \*    {        &quot;timestamp&quot;: 1531482518.3663802,        &quot;service_id&quot;: &quot;urn:upnp-org:serviceId:RenderingControl&quot;,        &quot;service_type&quot;: &quot;urn:schemas-upnp-org:service:RenderingControl:1&quot;,        &quot;state_variables&quot;: {            &quot;LastChange&quot;: &quot;&lt;Event xmlns=\&quot;urn:schemas-upnp-org:metadata-1-0/AVT_RCS\&quot;&gt;\n&lt;InstanceID val=\&quot;0\&quot;&gt;\n&lt;Mute channel=\&quot;Master\&quot; val=\&quot;0\&quot;/&gt;\n&lt;Volume channel=\&quot;Master\&quot; val=\&quot;70\&quot;/&gt;\n&lt;/InstanceID&gt;\n&lt;/Event&gt;\n&quot;        }    }    {        &quot;timestamp&quot;: 1531482518.366804,        &quot;service_id&quot;: &quot;urn:upnp-org:serviceId:RenderingControl&quot;,        &quot;service_type&quot;: &quot;urn:schemas-upnp-org:service:RenderingControl:1&quot;,        &quot;state_variables&quot;: {            &quot;Mute&quot;: false,            &quot;Volume&quot;: 70        }    }    ...You can subscribe to list of services by providing these names or abbreviated names, such as::    $ upnp-client --pprint subscribe http://192.168.178.10:49152/description.xml RC AVTransportAn example of searching for devices::    $ upnp-client --pprint search    {        &quot;Cache-Control&quot;: &quot;max-age=3600&quot;,        &quot;Date&quot;: &quot;Sat, 27 Oct 2018 10:43:42 GMT&quot;,        &quot;EXT&quot;: &quot;&quot;,        &quot;Location&quot;: &quot;http://192.168.178.1:49152/description.xml&quot;,        &quot;OPT&quot;: &quot;\&quot;http://schemas.upnp.org/upnp/1/0/\&quot;; ns=01&quot;,        &quot;01-NLS&quot;: &quot;906ad736-cfc4-11e8-9c22-8bb67c653324&quot;,        &quot;Server&quot;: &quot;Linux/4.14.26+, UPnP/1.0, Portable SDK for UPnP devices/1.6.20.jfd5&quot;,        &quot;X-User-Agent&quot;: &quot;redsonic&quot;,        &quot;ST&quot;: &quot;upnp:rootdevice&quot;,        &quot;USN&quot;: &quot;uuid:e3a17dd5-9d85-3131-3c34-b827eb498d72::upnp:rootdevice&quot;,        &quot;_timestamp&quot;: &quot;2018-10-27 12:43:09.125408&quot;,        &quot;_host&quot;: &quot;192.168.178.1&quot;,        &quot;_port&quot;: 49152        &quot;_udn&quot;: &quot;uuid:e3a17dd5-9d85-3131-3c34-b827eb498d72&quot;,        &quot;_source&quot;: &quot;search&quot;    }An example of listening for advertisements, note that the program stays running until you stop it (ctrl-c)::    $ upnp-client --pprint advertisements    {        &quot;Host&quot;: &quot;239.255.255.250:1900&quot;,        &quot;Cache-Control&quot;: &quot;max-age=30&quot;,        &quot;Location&quot;: &quot;http://192.168.178.1:1900/WFADevice.xml&quot;,        &quot;NTS&quot;: &quot;ssdp:alive&quot;,        &quot;Server&quot;: &quot;POSIX, UPnP/1.0 UPnP Stack/2013.4.3.0&quot;,        &quot;NT&quot;: &quot;urn:schemas-wifialliance-org:device:WFADevice:1&quot;,        &quot;USN&quot;: &quot;uuid:99cb221c-1f15-c620-dc29-395f415623c6::urn:schemas-wifialliance-org:device:WFADevice:1&quot;,        &quot;_timestamp&quot;: &quot;2018-12-23 11:22:47.154293&quot;,        &quot;_host&quot;: &quot;192.168.178.1&quot;,        &quot;_port&quot;: 1900        &quot;_udn&quot;: &quot;uuid:99cb221c-1f15-c620-dc29-395f415623c6&quot;,        &quot;_source&quot;: &quot;advertisement&quot;    }IPv6 support------------IPv6 is supported for the UPnP client functionality as well as the SSDP functionality. Please do note that multicast over IPv6 does require a ``scope_id``/interface ID. The ``scope_id`` is used to specify which interface should be used.There are several ways to get the ``scope_id``. Via Python this can be done via the `ifaddr &lt;https://github.com/pydron/ifaddr&gt;`_ library. From the (Linux) command line the ``scope_id`` can be found via the `ip` command::    $ ip address    ...    6: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000        link/ether 00:15:5d:38:97:cf brd ff:ff:ff:ff:ff:ff        inet 192.168.1.2/24 brd 192.168.1.255 scope global eth0            valid_lft forever preferred_lft forever        inet6 fe80::215:5dff:fe38:97cf/64 scope link            valid_lft forever preferred_lft foreverIn this case, the interface index is 6 (start of the line) and thus the ``scope_id`` is ``6``.Or on Windows using the ``ipconfig`` command::    C:\&gt; ipconfig /all    ...    Ethernet adapter Ethernet:        ...        Link-local IPv6 Address . . . . . : fe80::e530:c739:24d7:c8c7%8(Preferred)    ...The ``scope_id`` is ``8`` in this example, as shown after the ``%`` character at the end of the IPv6 address.Or on macOS using the ``ifconfig`` command::    % ifconfig    ...    en0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500          options=50b&lt;RXCSUM,TXCSUM,VLAN_HWTAGGING,AV,CHANNEL_IO&gt;          ether 38:c9:86:30:fe:be          inet6 fe80::215:5dff:fe38:97cf%en0 prefixlen 64 secured scopeid 0x4    ...The ``scope_id`` is ``4`` in this example, as shown by ``scopeid 0x4``. Note that this is a hexadecimal value.Be aware that Python ``&lt;3.9`` does not support the ``IPv6Address.scope_id`` attribute. As such, a ``AddressTupleVXType`` is used to specify the ``source``- and ``target``-addresses. In case of IPv4, ``AddressTupleV4Type`` is a 2-tuple with ``address``, ``port``. ``AddressTupleV6Type`` is used for IPv6 and is a 4-tuple with ``address``, ``port``, ``flowinfo``, ``scope_id``. More information can be found in the Python ``socket`` module documentation.All functionality regarding SSDP uses ``AddressTupleVXType`` the specify addresses.For consistency, the ``AiohttpNotifyServer`` also uses a tuple the specify the ``source`` (the address and port the notify server listens on.)</longdescription>
</pkgmetadata>