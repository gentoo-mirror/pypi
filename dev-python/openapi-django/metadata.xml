<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpenAPI DjangoБиблиотека для автоматической генерации OpenAPI файла для Django проектов.## Использование### Устанавливаем библиотеку```shellpip install openapi-django```### Добавляем в проектВ файле ```{ProjectPath}/{DjangoFolder}/settings.py``` находим секцию ```INSTALLED_APPS``` и добавляем имя библиотеки.```pythonINSTALLED_APPS = [    'django.contrib.admin',    'django.contrib.auth',    'django.contrib.contenttypes',    'django.contrib.sessions',    'django.contrib.messages',    'django.contrib.staticfiles',    'openapi_django']```### НастройкаНастройка производится добавлением словаря ```OPENAPI_DJANGO``` в файл ```{ProjectPath}/{DjangoFolder}/settings.py```Используемые ключи:* ```servers``` - Список серверов, которые нужно добавить на страницу OpenAPI (Учитывайте что если в ```settings.py``` указано ```DEBUG = True``` то на страницу автоматически будет добавлен сервер из ```request.META[&quot;HTTP_HOST&quot;]``` запроса)* ```version``` - Версия вашего приложения* ```title``` - Имя приложенияПример:```pythonOPENAPI_DJANGO = {    &quot;servers&quot;: [&quot;https://test.test&quot;],    &quot;version&quot;: &quot;0.0.1&quot;,    &quot;title&quot;: &quot;Test project&quot;}```## Добавление url для отображения страницы OpenAPI В файле ```{ProjectPath}/{DjangoFolder}/urls.py``` добавить:```pythonfrom django.contrib import adminfrom django.urls import path, includeurlpatterns = [    path('admin/', admin.site.urls),    path('openapi/', include('openapi_django.urls')),]```Библиотека добавляет 2 урла:1. &quot;/&quot; - отображает страницу OpenAPI2. &quot;/file&quot; - json файл данных OpenAPI## Использование### Простое добавление информации о запросе без указание возвращаемых и используемых данных```pythonfrom django.views import Viewfrom django.http import HttpResponsefrom openapi_django.openapi_utils.decorators import openapiclass MyView(View):    @openapi()    def get(self, request):        html = &quot;&lt;html&gt;Hello world&lt;/html&gt;&quot;        return HttpResponse(html)```### С указанием используемых данных Поддерживаются переменные классов &quot;pydantic&quot; и &quot;djantic&quot;)```pythonimport jsonfrom typing import Optional, Listfrom django.views import Viewfrom django.http import JsonResponsefrom djantic import ModelSchemafrom pydantic.main import BaseModelfrom pydantic.fields import Fieldfrom openapi_django.openapi_utils.decorators import openapifrom test_app.models import MyModelclass MyModelSchema(ModelSchema):    class Config:        model = MyModelclass GetReturnClassSchema(BaseModel):    data: List[MyModelSchema] = Field(description=&quot;Список объектов&quot;)class ObjectReturnClassSchema(BaseModel):    data: MyModelSchema = Field(description=&quot;Данные нового объекта&quot;)class ParametersSchema(BaseModel):    name: Optional[str] = Field(description=&quot;Имя&quot;)    color: Optional[str] = Field(description=&quot;Любимый цвет&quot;)class PostBodySchema(BaseModel):    name: str = Field(description=&quot;Имя&quot;)    color: Optional[str] = Field(description=&quot;Любимый цвет&quot;)class PathParameterSchema(BaseModel):    param_path_id: int = Field(description=&quot;ID объекта&quot;)    class PostFileSchema(BaseModel):    file: bytesclass MyModelsView(View):    @openapi(        description=&quot;Получение всех обьектов&quot;,        return_class=GetReturnClassSchema,        parameters=ParametersSchema)    def get(self, request):        items = MyModel.objects.filter(**request.GET.dict())        return JsonResponse(data={&quot;data&quot;: [MyModelSchema.from_orm(item).dict() for item in items]})    @openapi(        description=&quot;Добавление обьекта&quot;,        return_class=ObjectReturnClassSchema,        body=PostBodySchema    )    def post(self, request):        item = MyModel(**json.loads(request.body))        item.save()        return JsonResponse(data={&quot;data&quot;: MyModelSchema.from_orm(item).dict()})class MyModelPathView(View):    @openapi(        description=&quot;Получение данных объекта&quot;,        return_class=ObjectReturnClassSchema,        path_parameters=PathParameterSchema    )    def get(self, request, param_path_id):        item = MyModel.objects.get(pk=param_path_id)        return JsonResponse(data={&quot;data&quot;: MyModelSchema.from_orm(item).dict()})class MyModelFileView(View):    @openapi(        description=&quot;Отправка файла&quot;,        answer_content=&quot;multipart/form-data&quot;,        body=PostFileSchema    )    def post(self, request):        content = request.FILES.get(&quot;file&quot;).read().decode('utf8')        return JsonResponse(data={&quot;msg&quot;: 'OK'})```</longdescription>
</pkgmetadata>