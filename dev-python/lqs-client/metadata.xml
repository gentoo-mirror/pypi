<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;br/&gt;  &lt;img src=&quot;misc/images/logqs_logo.png?raw=true&quot; alt=&quot;LogQS Logo&quot; width=&quot;250&quot;/&gt;&lt;/p&gt;# LogQS ClientA Python library for interacting with a LogQS DataStore API.  More information and examples can be found at https://docs.logqs.com.## InstallationRequires Python &gt;= 3.6Instally from PyPI, using pip:    $ pip install logqs-client## QuickstartCreate a client instance:    from lqs_client import LogQS    lqs = LogQS(        api_url=&quot;&lt;LQS API URL&gt;&quot;,        api_key_id=&quot;&lt;LQS API KEY ID&gt;&quot;,        api_key_secret=&quot;&lt;LQS API KEY SECRET&gt;&quot;    )Interact with the LogQS API:    response = lqs.list.log()    data = response[&quot;data&quot;]    print(data)Alternatively, you can use the LogQS Client from the command line.  If you have the configuration set as environment variables or in a .env file:    $ python -m lqs_client list log## Configuration### Required ParametersThe LogQS Client requires three parameters to be configured:`LQS_API_URL`&amp;ensp;&amp;ensp;The URL of the endpoint for the LogQS API.  This should be the base URL for all REST operations, i.e., if the DataStore's API includes a `/api` subpath, this should be included.&amp;ensp;&amp;ensp;This parameter can be supplied/overridden with the `api_url` parameter.`LQS_API_KEY_ID`&amp;ensp;&amp;ensp;The ID of the API Key for which the client will operate as.&amp;ensp;&amp;ensp;This parameter can be supplied/overridden with the `api_key_id` parameter.`LQS_API_KEY_SECRET`&amp;ensp;&amp;ensp;The secret of the API Key for which the client will operate as.&amp;ensp;&amp;ensp;This parameter can be supplied/overridden with the `api_key_secret` parameter.### Optional ParametersOptional parameters include:`LQS_PRETTY`&amp;ensp;&amp;ensp;A boolean parameter indicating whether or not to &quot;prettify&quot; the output results.  Useful when using the client in the command line.  Default is `false`.&amp;ensp;&amp;ensp;This parameter can be supplied/overrident with the `pretty` parameter.`LQS_VERBOSE`&amp;ensp;&amp;ensp;A boolean parameter indicating whether to log debug information.  Default is `false`.&amp;ensp;&amp;ensp;This parameter can be supplied/overriden with the `verbose` parameter.`LQS_DRY_RUN`&amp;ensp;&amp;ensp;A boolean parameter indicating whether to execute actual API requests.  Default is `false`.&amp;ensp;&amp;ensp;This parameter can be supplied/overriden with the `dry_run` parameter.`LQS_RETRY_COUNT`&amp;ensp;&amp;ensp;An integer parameter greater than or equal to 0 indicating the number of times we should retry failed API requests.  Default is `4`&amp;ensp;&amp;ensp;This parameter can be supplied/overriden with the `retry_count` parameter.`LQS_RETRY_DELAY`&amp;ensp;&amp;ensp;An integer parameter greater than or equal to 0 indicating the initial value, in seconds, we use for exponential backoff when waiting to retry a failed request.  Default is `4`&amp;ensp;&amp;ensp;This parameter can be supplied/overriden with the `retry_delay` parameter.`LQS_RETRY_AGRESSIVE`&amp;ensp;&amp;ensp;A boolean parameter indicating whether we should retry on &quot;expected&quot; errors from LogQS (such as &quot;BadRequest&quot;, &quot;Conflict&quot;, etc.).  Default is `false`.&amp;ensp;&amp;ensp;This parameter can be supplied/overriden with the `retry_aggressive` parameter.## DevelopmentThe LogQS Client module source is located in `lqs-client` and it's Python requirements are listed in the `requirements.txt` file.  You can install it locally with `pip install .`.The project uses Python 3.9, which may require some dependencies to be required.  In one go,    sudo apt install python3.9 python3.9-dev python3.9-distutils python3.9-venvTo run the application from this directory (i.e., for development):1. Create a virtual environment:    `python3.9 -m venv venv`2. Source the environment:    `source venv/bin/activate`3. Install the requirements:        `pip install -r requirements.txt`4. Install LogQS Client in develop mode:        `pip install -e .`5. Run the module:        `python -m lqs-client`</longdescription>
</pkgmetadata>