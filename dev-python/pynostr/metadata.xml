<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pynostr| | || --- | --- || CI/CD | [![codecov](https://codecov.io/gh/holgern/pynostr/branch/main/graph/badge.svg?token=jIyk1cnhIx)](https://codecov.io/gh/holgern/pynostr) [![CircleCI](https://dl.circleci.com/status-badge/img/gh/holgern/pynostr/tree/main.svg?style=svg)](https://dl.circleci.com/status-badge/redirect/gh/holgern/pynostr/tree/main) || Package | [![PyPI - Version](https://img.shields.io/pypi/v/pynostr.svg?logo=pypi&amp;label=PyPI&amp;logoColor=gold)](https://pypi.org/project/pynostr/) [![PyPI - Downloads](https://img.shields.io/pypi/dm/pynostr.svg?color=blue&amp;label=Downloads&amp;logo=pypi&amp;logoColor=gold)](https://pypi.org/project/pynostr/) [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pynostr.svg?logo=python&amp;label=Python&amp;logoColor=gold)](https://pypi.org/project/pynostr/) |-----Python library for for [Nostr](https://github.com/nostr-protocol/nostr).This library is using coincurve instead of secp256k1, so pynostr can be used on windows. pynostr started as a fork from [python-nostr](https://github.com/jeffthibault/python-nostr)and is now developed on its own.This library works with python &gt;= 3.7## Features[NIPs](https://github.com/nostr-protocol/nips) with a relay-specific implementation are listed here.- [x] NIP-01: Basic protocol flow description- [x] NIP-02: Contact List and Petnames- [x] NIP-03: OpenTimestamps Attestations for Events- [x] NIP-04: Encrypted Direct Message- [x] NIP-05: Mapping Nostr keys to DNS-based internet identifiers- [ ] NIP-06: Basic key derivation from mnemonic seed phrase- [ ] NIP-08: Handling Mentions- [ ] NIP-09: Event Deletion- [x] NIP-10: Conventions for clients' use of e and p tags in text events- [x] NIP-11: Relay Information Document- [ ] NIP-12: Generic Tag Queries- [x] NIP-13: Proof of Work- [ ] NIP-14: Subject tag in text events.- [x] NIP-15: End of Stored Events Notice- [ ] NIP-16: Event Treatment- [x] NIP-19: bech32-encoded entities- [ ] NIP-20: Command Results- [ ] NIP-21: nostr: URL scheme- [ ] NIP-22: Event created_at Limits- [ ] NIP-23: Long-form Content- [ ] NIP-25: Reactions- [x] NIP-26: Delegated Event Signing- [ ] NIP-28: Public Chat- [ ] NIP-33: Parameterized Replaceable Events- [ ] NIP-36: Sensitive Content- [ ] NIP-40: Expiration Timestamp- [ ] NIP-42: Authentication of clients to relays- [ ] NIP-46: Nostr Connect- [ ] NIP-50: Keywords filter- [x] NIP-56: Reporting- [ ] NIP-57: Lightning Zaps- [ ] NIP-58: Badges- [x] NIP-65: Relay List Metadata## Differences from python-nostr* tornado websockets* coincurve secp256k1 implementation* no proxies* no ssl_options* relay can be used to open a connection to a relay| python-nostr | pynostr || --- | --- || Filter | Filters || Filters | FiltersList || relay_manager.open_connections | relay_manager.run_sync() || relay_manager.close_connections() | - || private_key.sign_event(event) | event.sign(private_key.hex()) |## Installation```bashpip install pynostr```with websocket-client support```bashpip install pynostr[websocket-client]```The necessary coincurve can be installed on android inside termux:```bashpkg updatepkg install build-essentialpkg install binutilspkg install python-cryptographypip install coincurve --no-binary all```## Usage**Generate a key**```pythonfrom pynostr.key import PrivateKeyprivate_key = PrivateKey()public_key = private_key.public_keyprint(f&quot;Private key: {private_key.bech32()}&quot;)print(f&quot;Public key: {public_key.bech32()}&quot;)```**Connect to relays**```pythonfrom pynostr.relay_manager import RelayManagerfrom pynostr.filters import FiltersList, Filtersfrom pynostr.event import EventKindimport timeimport uuidrelay_manager = RelayManager(timeout=2)relay_manager.add_relay(&quot;wss://nostr-pub.wellorder.net&quot;)relay_manager.add_relay(&quot;wss://relay.damus.io&quot;)filters = FiltersList([Filters(kinds=[EventKind.TEXT_NOTE], limit=100)])subscription_id = uuid.uuid1().hexrelay_manager.add_subscription_on_all_relays(subscription_id, filters)relay_manager.run_sync()while relay_manager.message_pool.has_notices():    notice_msg = relay_manager.message_pool.get_notice()    print(notice_msg.content)while relay_manager.message_pool.has_events():    event_msg = relay_manager.message_pool.get_event()    print(event_msg.event.content)relay_manager.close_all_relay_connections()```**Connect to single relay**```pythonfrom pynostr.relay import Relayfrom pynostr.filters import FiltersList, Filtersfrom pynostr.event import EventKindfrom pynostr.base_relay import RelayPolicyfrom pynostr.message_pool import MessagePoolimport tornado.ioloopfrom tornado import genimport timeimport uuidmessage_pool = MessagePool(first_response_only=False)policy = RelayPolicy()io_loop = tornado.ioloop.IOLoop.current()r = Relay(    &quot;wss://relay.damus.io&quot;,    message_pool,    io_loop,    policy,    timeout=2)filters = FiltersList([Filters(kinds=[EventKind.TEXT_NOTE], limit=100)])subscription_id = uuid.uuid1().hexr.add_subscription(subscription_id, filters)try:    io_loop.run_sync(r.connect)except gen.Return:    passio_loop.stop()while message_pool.has_notices():    notice_msg = message_pool.get_notice()    print(notice_msg.content)while message_pool.has_events():    event_msg = message_pool.get_event()    print(event_msg.event.content)```**Publish to relays**```pythonimport jsonimport sslimport timeimport uuidfrom pynostr.event import Eventfrom pynostr.relay_manager import RelayManagerfrom pynostr.filters import FiltersList, Filtersfrom pynostr.message_type import ClientMessageTypefrom pynostr.key import PrivateKeyrelay_manager = RelayManager(timeout=6)relay_manager.add_relay(&quot;wss://nostr-pub.wellorder.net&quot;)relay_manager.add_relay(&quot;wss://relay.damus.io&quot;)private_key = PrivateKey()filters = FiltersList([Filters(authors=[private_key.public_key.hex()], limit=100)])subscription_id = uuid.uuid1().hexrelay_manager.add_subscription_on_all_relays(subscription_id, filters)event = Event(&quot;Hello Nostr&quot;)event.sign(private_key.hex())relay_manager.publish_event(event)relay_manager.run_sync()time.sleep(5) # allow the messages to sendwhile relay_manager.message_pool.has_ok_notices():    ok_msg = relay_manager.message_pool.get_ok_notice()    print(ok_msg)while relay_manager.message_pool.has_events():    event_msg = relay_manager.message_pool.get_event()    print(event_msg.event.to_dict())```**Reply to a note**```pythonfrom pynostr.event import Eventreply = Event(  content=&quot;Sounds good!&quot;,)# create 'e' tag reference to the note you're replying toreply.add_event_ref(original_note_id)# create 'p' tag reference to the pubkey you're replying toreply.add_pubkey_ref(original_note_author_pubkey)reply.sign(private_key.hex())```**Send a DM**```pythonfrom pynostr.encrypted_dm import EncryptedDirectMessagefrom pynostr.key import PrivateKeyprivate_key = PrivateKey()recipient_pubkey = PrivateKey().public_key.hex()dm = EncryptedDirectMessage()dm.encrypt(private_key.hex(),  recipient_pubkey=recipient_pubkey,  cleartext_content=&quot;Secret message!&quot;)dm_event = dm.to_event()dm_event.sign(private_key.hex())```**NIP-26 delegation**```pythonfrom pynostr.delegation import Delegationfrom pynostr.event import EventKind, Eventfrom pynostr.key import PrivateKey# Load your &quot;identity&quot; PK that you'd like to keep safely offlineidentity_pk = PrivateKey.from_nsec(&quot;nsec1...&quot;)# Create a new, disposable PK as the &quot;delegatee&quot; that can be &quot;hot&quot; in a Nostr clientdelegatee_pk = PrivateKey()# the &quot;identity&quot; PK will authorize &quot;delegatee&quot; to sign TEXT_NOTEs on its behalf for the next monthdelegation = Delegation(    delegator_pubkey=identity_pk.public_key.hex(),    delegatee_pubkey=delegatee_pk.public_key.hex(),    event_kind=EventKind.TEXT_NOTE,    duration_secs=30*24*60*60)identity_pk.sign_delegation(delegation)event = Event(    &quot;Hello, NIP-26!&quot;,    tags=[delegation.get_tag()],)event.sign(self.delegatee_pk.hex())# ...normal broadcast steps...```**NIP-13: Proof of Work**```pythonfrom pynostr.event import Eventfrom pynostr.pow import PowEventpe = PowEvent(difficulty=25)e=Event()e=pe.mine(e)assert pe.check_difficulty(e)```## Test Suite### Set up the test environmentInstall the test-runner dependencies:```pip3 install -r test-requirements.txt```Then make the `pynostr` python module visible/importable to the tests by installing the local dev dir as an editable module:```# from the repo rootpip3 install -e .```### Running the test suiteRun the whole test suite:```# from the repo rootpytest```Run a specific test file:```pytest test/test_this_file.py```Run a specific test:```pytest test/test_this_file.py::test_this_specific_test```### Running tests with toxInstall tox```pip install tox```Run tests```tox```## Pre-commit-config### Installation```$ pip install pre-commit```### Using homebrew:```$ brew install pre-commit``````$ pre-commit --versionpre-commit 2.10.0```### Install the git hook scripts```$ pre-commit install```### Run against all the files```pre-commit run --all-filespre-commit run --show-diff-on-failure --color=always --all-files```### Update package rev in pre-commit yaml```bashpre-commit autoupdatepre-commit run --show-diff-on-failure --color=always --all-files```</longdescription>
</pkgmetadata>