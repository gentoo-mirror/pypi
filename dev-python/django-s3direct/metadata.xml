<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-s3direct## Directly upload files to S3 compatible services with Django.&lt;img src=&quot;https://raw.githubusercontent.com/bradleyg/django-s3direct/master/screenshot.png&quot; width=&quot;100%&quot;/&gt;## InstallationInstall with Pip:  `pip install django-s3direct`## Access setup### When setting up access credentials you have two options:### Option 1:**Generate access credentials and add them directly to your Django settings**.If using Amazon S3 you'll also need to create an IAM policy which grantspermission to upload to your bucket for your newly created credentials.```json{  &quot;Version&quot;: &quot;2012-10-17&quot;,  &quot;Statement&quot;: [    {      &quot;Action&quot;: [        &quot;s3:AbortMultipartUpload&quot;,        &quot;s3:GetObject&quot;,        &quot;s3:ListMultipartUploadParts&quot;,        &quot;s3:PutObject&quot;,        &quot;s3:PutObjectAcl&quot;      ],      &quot;Effect&quot;: &quot;Allow&quot;,      &quot;Resource&quot;: &quot;arn:aws:s3:::YOUR_BUCKET_NAME/*&quot;    }  ]}```### Option 2:**Use the EC2 instance profile and its attached IAM role (AWS only)**  Ensure the following trust policy is in place in addition to the policyabove. You'll also need the[boto3](https://github.com/boto/boto3) package installed.```json{  &quot;Version&quot;: &quot;2012-10-17&quot;,  &quot;Statement&quot;: [    {      &quot;Effect&quot;: &quot;Allow&quot;,      &quot;Principal&quot;: {        &quot;Service&quot;: &quot;ec2.amazonaws.com&quot;      },      &quot;Action&quot;: &quot;sts:AssumeRole&quot;    }  ]}```### CORS setupAdd a CORS policy to your bucket. Note the ETag header isimportant as it is used for multipart uploads. For more information see[here](https://github.com/TTLabs/EvaporateJS/wiki/Configuring-The-AWS-S3-Bucket).```json[  {    &quot;AllowedHeaders&quot;: [&quot;*&quot;],    &quot;AllowedMethods&quot;: [&quot;GET&quot;, &quot;HEAD&quot;, &quot;PUT&quot;, &quot;POST&quot;, &quot;DELETE&quot;],    &quot;AllowedOrigins&quot;: [&quot;http://localhost:8080&quot;],    &quot;ExposeHeaders&quot;: [&quot;ETag&quot;],    &quot;MaxAgeSeconds&quot;: 3000  }]```## Django Setup### settings.py```pythonINSTALLED_APPS = [    ...    's3direct',    ...]TEMPLATES = [{    ...    'APP_DIRS': True,    ...}]# AWS# If these are set to None, the EC2 instance profile and IAM role are used.AWS_ACCESS_KEY_ID = 'your-aws-access-key-id'AWS_SECRET_ACCESS_KEY = 'your-aws-secret-access-key'# Bucket nameAWS_STORAGE_BUCKET_NAME = 'your-aws-s3-bucket-name'# The region of your bucket, more info:# http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_regionAWS_S3_REGION_NAME = 'eu-west-1'# The endpoint of your bucket, more info:# http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_regionAWS_S3_ENDPOINT_URL = 'https://s3.eu-west-1.amazonaws.com'S3DIRECT_DESTINATIONS = {    'example_destination': {        # &quot;key&quot; [required] The location to upload file        #       1. String: folder path to upload to        #       2. Function: generate folder path + filename using a function        'key': 'uploads/images',        # &quot;auth&quot; [optional] Limit to specfic Django users        #        Function: ACL function        'auth': lambda u: u.is_staff,        # &quot;allowed&quot; [optional] Limit to specific mime types        #           List: list of mime types        'allowed': ['image/jpeg', 'image/png', 'video/mp4'],        # &quot;bucket&quot; [optional] Bucket if different from AWS_STORAGE_BUCKET_NAME        #          String: bucket name        'bucket': 'custom-bucket',        # &quot;endpoint&quot; [optional] Endpoint if different from AWS_S3_ENDPOINT_URL        #            String: endpoint URL        'endpoint': 'custom-endpoint',        # &quot;region&quot; [optional] Region if different from AWS_S3_REGION_NAME        #          String: region name        'region': 'custom-region', # Default is 'AWS_S3_REGION_NAME'        # &quot;acl&quot; [optional] Custom ACL for object, default is 'public-read'        #       String: ACL        'acl': 'private',        # &quot;cache_control&quot; [optional] Custom cache control header        #                 String: header        'cache_control': 'max-age=2592000',        # &quot;content_disposition&quot; [optional] Custom content disposition header        #                       String: header        'content_disposition': lambda x: 'attachment; filename=&quot;{}&quot;'.format(x),        # &quot;content_length_range&quot; [optional] Limit file size        #                        Tuple: (from, to) in bytes        'content_length_range': (5000, 20000000),        # &quot;server_side_encryption&quot; [optional] Use serverside encryption        #                          String: encrytion standard        'server_side_encryption': 'AES256',        # &quot;allow_existence_optimization&quot; [optional] Checks to see if file already exists,        #                                returns the URL to the object if so (no upload)        #                                Boolean: True, False        'allow_existence_optimization': False,    },    'example_destination_two': {        'key': lambda filename, args: args + '/' + filename,    'key_args': 'uploads/images',    }}```### urls.py```pythonurlpatterns = [    ...    url(r'^s3direct/', include('s3direct.urls')),    ...]```Run `python manage.py collectstatic` if required.## Use in Django admin### models.py```pythonfrom django.db import modelsfrom s3direct.fields import S3DirectFieldclass Example(models.Model):    video = S3DirectField(dest='example_destination')```## Use the widget in a custom form### forms.py```pythonfrom django import formsfrom s3direct.widgets import S3DirectWidgetclass S3DirectUploadForm(forms.Form):    images = forms.URLField(widget=S3DirectWidget(dest='example_destination'))```**\*Optional.** You can modify the HTML of the widget by overiding template **s3direct/templates/s3direct-widget.tpl**### views.py```pythonfrom django.views.generic import FormViewfrom .forms import S3DirectUploadFormclass MyView(FormView):    template_name = 'form.html'    form_class = S3DirectUploadForm```### templates/form.html```html&lt;html&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;title&gt;s3direct&lt;/title&gt;    {{ form.media }}  &lt;/head&gt;  &lt;body&gt;    &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;{% csrf_token %} {{ form.as_p }}&lt;/form&gt;  &lt;/body&gt;&lt;/html&gt;```## ExamplesExamples of both approaches can be found in the examples folder. To run them:```shell$ git clone git@github.com:bradleyg/django-s3direct.git$ cd django-s3direct$ python setup.py install$ cd example# Add config to your environmentexport AWS_ACCESS_KEY_ID='…'export AWS_SECRET_ACCESS_KEY='…'export AWS_STORAGE_BUCKET_NAME='…'export AWS_S3_REGION_NAME='…'export AWS_S3_ENDPOINT_URL='…'$ python manage.py migrate$ python manage.py createsuperuser$ python manage.py runserver```Visit `http://localhost:8080/admin` to view the admin widget and`http://localhost:8080/form` to view the custom form widget.## Development```shell$ git clone git@github.com:bradleyg/django-s3direct.git$ cd django-s3direct# Add your AWS keys/details to .env file and export$ cp .env-dist .env# Frontend deps$ npm i# Install locally$ python setup.py develop# Run examples$ python example/manage.py migrate$ python example/manage.py createsuperuser$ python example/manage.py runserver 0.0.0.0:8080# Run tests$ npm run test# Run frontend bundler and Django server$ npm run dev# Watch and build frontend (dev)$ npm run watch# Build frontend (prod)$ npm run build# Format python // PEP8$ npm run yapf# Upload to PYPI$ npm run pypi```</longdescription>
</pkgmetadata>