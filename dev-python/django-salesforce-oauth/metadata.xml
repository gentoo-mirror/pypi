<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Quick startAssuming you've already configured an app in your Salesforce instance to serveas an OAuth provider, the following should get you up and running.## Install`pip install django-salesforce-oauth`## SettingsAdd the app to your `INSTALLED_APPS` in your django settings (`settings.py`):```pythonINSTALLED_APPS = [    # ...    &quot;django_salesforce_oauth&quot;,]```Add the following required variables to your `settings.py`:```pythonSCOPES = &quot;YOUR SCOPES&quot;  # space delimited, e.g., &quot;id api refresh_token&quot;SFDC_CONSUMER_KEY = &quot;YOUR KEY&quot;SFDC_CONSUMER_SECRET = &quot;YOUR SECRET&quot;OAUTH_REDIRECT_URI = &quot;{YOUR DOMAIN}/oauth/callback/&quot;# Optional, but Django provides a default you likely don't wantLOGIN_REDIRECT_URL = &quot;/&quot;```## UrlsAdd `django-salesforce-oauth`'s urls to your main `urls.py`.```pythonfrom django.urls import path, includeurlpatterns = [    # ...    path(&quot;oauth/&quot;, include(&quot;django_salesforce_oauth.urls&quot;)),]```Then redirect sign-in requests to the `oauth` namespace.### View example```pythonfrom django.shortcuts import redirectdef your_view(request):    return redirect(&quot;oauth&quot;)  # or &quot;oauth-sandbox&quot;```### Template example```html&lt;a href=&quot;{% url 'oauth' %}&quot; class=&quot;btn btn-primary&quot;&gt;Login&lt;/a&gt;```# Advanced usage## Custom callbackYou likely will want to customize what happens after the OAuth flow is complete instead of simplygetting or creating a user. This can be done by specifying the following in your `settings.py`.```pythonCUSTOM_CALLBACK = &quot;path.to.module.your_callback_function&quot;````your_callback_function` must accept the following two arguments:1. the request object (useful in case you want to handle redirection yourself)2. the OAuth object (contains all token and user data)If you send the user to the `oauth` view with a query parameter called `state`, then you mustprovide a third, optional argument to your custom callback function.3. the state parameter. Only requered if you redirect to `oauth` with `?state=value` in your   query params.An example signature is:```pythondef your_callback_function(request, oauth, state=None):    ...```If you do not return a redirect from `your_callback_function`, it's expected it will returna user object. In this case the user will then be signed in and redirected to`settings.LOGIN_REDIRECT_URL` (which you'll most likely want to set in your `settings.py`).### Customizing the callback URIBy default the view behind the `oauth-callback` namespace, specified in the `django_salesforce_oauth`'s app's `urls.py`, is what needs to match `settings.OAUTH_REDIRECT_URI`.But this can be customized by pointing it to some other url and registering the view whereveryou'd like it declared.```python# urls.pyfrom django_salesforce_oauth.views import oauth_callbackurlpatterns = [    # ...    # pass {&quot;domain&quot;: &quot;test&quot;} to use a sandbox    path(&quot;my/custom/url&quot;, oauth_callback, {&quot;domain&quot;: &quot;login&quot;}, name=&quot;custom-oauth-callback&quot;),]```# Example projectThe example project provides a full example of how to use this package,but since it's an integration, there's a few steps to actually running it.## SFDCConfigure a SFDC OAuth app with which you can OAuth against.## .envPlace a `.env` file inside the `project` folder that contains the following keysfrom the OAuth app you configured above:```SFDC_CONSUMER_KEY=some_keySFDC_CONSUMER_SECRET=secret_stuff```## djangorun migrations and start the server!---This project uses [poetry](https://python-poetry.org/) for dependency managementand packaging.</longdescription>
</pkgmetadata>