<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ParamTools**Define, update, and validate your model's parameters.**Install using pip:```pip install paramtools```Install using conda:```conda install -c conda-forge paramtools```## UsageSubclass `paramtools.Parameters` and define your model's [parameters](https://paramtools.dev/parameters):```pythonimport paramtoolsclass Params(paramtools.Parameters):    defaults = {        &quot;schema&quot;: {            &quot;labels&quot;: {                &quot;date&quot;: {                    &quot;type&quot;: &quot;date&quot;,                    &quot;validators&quot;: {                        &quot;range&quot;: {                            &quot;min&quot;: &quot;2020-01-01&quot;,                            &quot;max&quot;: &quot;2021-01-01&quot;,                            &quot;step&quot;: {&quot;months&quot;: 1}                        }                    }                }            },        },        &quot;a&quot;: {            &quot;title&quot;: &quot;A&quot;,            &quot;type&quot;: &quot;int&quot;,            &quot;value&quot;: [                {&quot;date&quot;: &quot;2020-01-01&quot;, &quot;value&quot;: 2},                {&quot;date&quot;: &quot;2020-10-01&quot;, &quot;value&quot;: 8},            ],            &quot;validators&quot;: {                &quot;range&quot; : {                    &quot;min&quot;: 0, &quot;max&quot;: &quot;b&quot;                }            }        },        &quot;b&quot;: {            &quot;title&quot;: &quot;B&quot;,            &quot;type&quot;: &quot;float&quot;,            &quot;value&quot;: [{&quot;date&quot;: &quot;2020-01-01&quot;, &quot;value&quot;: 10.5}]        }    }```### Access parameter valuesAccess values using `.sel`:```pythonparams = Params()params.sel[&quot;a&quot;]```    Values([      {'date': datetime.date(2020, 1, 1), 'value': 2},      {'date': datetime.date(2020, 10, 1), 'value': 8},    ])Look up parameter values using a pandas-like api:```pythonfrom datetime import dateresult = params.sel[&quot;a&quot;][&quot;date&quot;] == date(2020, 1, 1)result```    QueryResult([      {'date': datetime.date(2020, 1, 1), 'value': 2}    ])```pythonresult.isel[0][&quot;value&quot;]```    2### Adjust and validate parameter valuesAdd a new value:```pythonparams.adjust({&quot;a&quot;: [{&quot;date&quot;: &quot;2020-11-01&quot;, &quot;value&quot;: 22}]})params.sel[&quot;a&quot;]```    Values([      {'date': datetime.date(2020, 1, 1), 'value': 2},      {'date': datetime.date(2020, 10, 1), 'value': 8},      {'date': datetime.date(2020, 11, 1), 'value': 22},    ])Update an existing value:```pythonparams.adjust({&quot;a&quot;: [{&quot;date&quot;: &quot;2020-01-01&quot;, &quot;value&quot;: 3}]})params.sel[&quot;a&quot;]```    Values([      {'date': datetime.date(2020, 1, 1), 'value': 3},      {'date': datetime.date(2020, 10, 1), 'value': 8},      {'date': datetime.date(2020, 11, 1), 'value': 22},    ])Update all values:```pythonparams.adjust({&quot;a&quot;: 7})params.sel[&quot;a&quot;]```    Values([      {'date': datetime.date(2020, 1, 1), 'value': 7},      {'date': datetime.date(2020, 10, 1), 'value': 7},      {'date': datetime.date(2020, 11, 1), 'value': 7},    ])Errors on values that are out of range:```pythonparams.adjust({&quot;a&quot;: -1})```    ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    &lt;ipython-input-8-f8f1b7f6cd9a&gt; in &lt;module&gt;    ----&gt; 1 params.adjust({&quot;a&quot;: -1})    ~/Paramtools/paramtools/parameters.py in adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, clobber)        253             least one existing value item's corresponding label values.        254         &quot;&quot;&quot;    --&gt; 255         return self._adjust(        256             params_or_path,        257             ignore_warnings=ignore_warnings,    ~/Paramtools/paramtools/parameters.py in _adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, is_deserialized, clobber)        371             not ignore_warnings and has_warnings        372         ):    --&gt; 373             raise self.validation_error        374        375         # Update attrs for params that were adjusted.    ValidationError: {        &quot;errors&quot;: {            &quot;a&quot;: [                &quot;a -1 &lt; min 0 &quot;            ]        }    }```pythonparams = Params()params.adjust({&quot;a&quot;: [{&quot;date&quot;: &quot;2020-01-01&quot;, &quot;value&quot;: 11}]})```    ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    &lt;ipython-input-9-cc8a21f044d8&gt; in &lt;module&gt;          1 params = Params()          2    ----&gt; 3 params.adjust({&quot;a&quot;: [{&quot;date&quot;: &quot;2020-01-01&quot;, &quot;value&quot;: 11}]})    ~/Paramtools/paramtools/parameters.py in adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, clobber)        253             least one existing value item's corresponding label values.        254         &quot;&quot;&quot;    --&gt; 255         return self._adjust(        256             params_or_path,        257             ignore_warnings=ignore_warnings,    ~/Paramtools/paramtools/parameters.py in _adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, is_deserialized, clobber)        371             not ignore_warnings and has_warnings        372         ):    --&gt; 373             raise self.validation_error        374        375         # Update attrs for params that were adjusted.    ValidationError: {        &quot;errors&quot;: {            &quot;a&quot;: [                &quot;a[date=2020-01-01] 11 &gt; max 10.5 b[date=2020-01-01]&quot;            ]        }    }Errors on invalid values:```pythonparams = Params()params.adjust({&quot;b&quot;: &quot;abc&quot;})```    ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    &lt;ipython-input-10-8373a2715e38&gt; in &lt;module&gt;          1 params = Params()          2    ----&gt; 3 params.adjust({&quot;b&quot;: &quot;abc&quot;})    ~/Paramtools/paramtools/parameters.py in adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, clobber)        253             least one existing value item's corresponding label values.        254         &quot;&quot;&quot;    --&gt; 255         return self._adjust(        256             params_or_path,        257             ignore_warnings=ignore_warnings,    ~/Paramtools/paramtools/parameters.py in _adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, is_deserialized, clobber)        371             not ignore_warnings and has_warnings        372         ):    --&gt; 373             raise self.validation_error        374        375         # Update attrs for params that were adjusted.    ValidationError: {        &quot;errors&quot;: {            &quot;b&quot;: [                &quot;Not a valid number: abc.&quot;            ]        }    }### Extend parameter values using label definitionsExtend values using `label_to_extend`:```pythonparams = Params(label_to_extend=&quot;date&quot;)``````pythonparams.sel[&quot;a&quot;]```    Values([      {'date': datetime.date(2020, 1, 1), 'value': 2},      {'date': datetime.date(2020, 2, 1), 'value': 2, '_auto': True},      {'date': datetime.date(2020, 3, 1), 'value': 2, '_auto': True},      {'date': datetime.date(2020, 4, 1), 'value': 2, '_auto': True},      {'date': datetime.date(2020, 5, 1), 'value': 2, '_auto': True},      {'date': datetime.date(2020, 6, 1), 'value': 2, '_auto': True},      {'date': datetime.date(2020, 7, 1), 'value': 2, '_auto': True},      {'date': datetime.date(2020, 8, 1), 'value': 2, '_auto': True},      {'date': datetime.date(2020, 9, 1), 'value': 2, '_auto': True},      {'date': datetime.date(2020, 10, 1), 'value': 8},      {'date': datetime.date(2020, 11, 1), 'value': 8, '_auto': True},      {'date': datetime.date(2020, 12, 1), 'value': 8, '_auto': True},      {'date': datetime.date(2021, 1, 1), 'value': 8, '_auto': True},    ])Updates to values are carried through to future dates:```pythonparams.adjust({&quot;a&quot;: [{&quot;date&quot;: &quot;2020-4-01&quot;, &quot;value&quot;: 9}]})params.sel[&quot;a&quot;]```    Values([      {'date': datetime.date(2020, 1, 1), 'value': 2},      {'date': datetime.date(2020, 2, 1), 'value': 2, '_auto': True},      {'date': datetime.date(2020, 3, 1), 'value': 2, '_auto': True},      {'date': datetime.date(2020, 4, 1), 'value': 9},      {'date': datetime.date(2020, 5, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2020, 6, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2020, 7, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2020, 8, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2020, 9, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2020, 10, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2020, 11, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2020, 12, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2021, 1, 1), 'value': 9, '_auto': True},    ])Use `clobber` to only update values that were set automatically:```pythonparams = Params(label_to_extend=&quot;date&quot;)params.adjust(    {&quot;a&quot;: [{&quot;date&quot;: &quot;2020-4-01&quot;, &quot;value&quot;: 9}]},    clobber=False,)# Sort parameter values by date for nicer outputparams.sort_values()params.sel[&quot;a&quot;]```    Values([      {'date': datetime.date(2020, 1, 1), 'value': 2},      {'date': datetime.date(2020, 2, 1), 'value': 2, '_auto': True},      {'date': datetime.date(2020, 3, 1), 'value': 2, '_auto': True},      {'date': datetime.date(2020, 4, 1), 'value': 9},      {'date': datetime.date(2020, 5, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2020, 6, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2020, 7, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2020, 8, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2020, 9, 1), 'value': 9, '_auto': True},      {'date': datetime.date(2020, 10, 1), 'value': 8},      {'date': datetime.date(2020, 11, 1), 'value': 8, '_auto': True},      {'date': datetime.date(2020, 12, 1), 'value': 8, '_auto': True},      {'date': datetime.date(2021, 1, 1), 'value': 8, '_auto': True},    ])### NumPy integrationAccess values as NumPy arrays with `array_first`:```pythonparams = Params(label_to_extend=&quot;date&quot;, array_first=True)params.a```    array([2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8])```pythonparams.a * params.b```    array([21., 21., 21., 21., 21., 21., 21., 21., 21., 84., 84., 84., 84.])Only get the values that you want:```pythonarr = params.to_array(&quot;a&quot;, date=[&quot;2020-01-01&quot;, &quot;2020-11-01&quot;])arr```    array([2, 8])Go back to a list of dictionaries:```pythonparams.from_array(&quot;a&quot;, arr, date=[&quot;2020-01-01&quot;, &quot;2020-11-01&quot;])```    [{'date': datetime.date(2020, 1, 1), 'value': 2},     {'date': datetime.date(2020, 11, 1), 'value': 8}]## DocumentationFull documentation available at [paramtools.dev](https://paramtools.dev).## ContributingContributions are welcome! Checkout [CONTRIBUTING.md][3] to get started.## CreditsParamTools is built on top of the excellent [marshmallow][1] JSON schema and validation framework. I encourage everyone to check out their repo and documentation. ParamTools was modeled off of [Tax-Calculator's][2] parameter processing and validation engine due to its maturity and sophisticated capabilities.[1]: https://github.com/marshmallow-code/marshmallow[2]: https://github.com/PSLmodels/Tax-Calculator[3]: https://github.com/PSLmodels/ParamTools/blob/master/CONTRIBUTING.md</longdescription>
</pkgmetadata>