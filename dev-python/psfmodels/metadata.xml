<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># psfmodels[![PyPI](https://img.shields.io/pypi/v/psfmodels.svg?color=green)](https://pypi.org/project/psfmodels)[![PythonVersion](https://img.shields.io/pypi/pyversions/psfmodels.svg?color=green)](https://python.org)[![CI](https://github.com/tlambert03/psfmodels/actions/workflows/ci.yml/badge.svg)](https://github.com/tlambert03/psfmodels/actions/workflows/ci.yml)[![codecov](https://codecov.io/gh/tlambert03/psfmodels/branch/main/graph/badge.svg)](https://codecov.io/gh/tlambert03/psfmodels)Python bindings for scalar and vectorial models of the point spread function.Original C++ code and MATLAB MEX bindings Copyright &amp;copy; 2006-2013, [FrancoisAguet](http://www.francoisaguet.net/software.html), distributed under GPL-3.0license. Python bindings by Talley LambertThis package contains three models:1. The vectorial model is described in Auget et al 2009&lt;sup&gt;1&lt;/sup&gt;. For moreinformation and implementation details, see Francois' Thesis&lt;sup&gt;2&lt;/sup&gt;.2. A scalar model, based on Gibson &amp; Lanni&lt;sup&gt;3&lt;/sup&gt;.3. A gaussian approximation (both paraxial and non-paraxial), using paramters from Zhang et al (2007)&lt;sup&gt;4&lt;/sup&gt;.&lt;small&gt;&lt;sup&gt;1&lt;/sup&gt; [F. Aguet et al., (2009) Opt. Express 17(8), pp.6829-6848](https://doi.org/10.1364/OE.17.006829)&lt;sup&gt;2&lt;/sup&gt; [F. Aguet. (2009) Super-Resolution Fluorescence Microscopy Based onPhysical Models. Swiss Federal Institute of Technology Lausanne, EPFL Thesis no.4418](http://bigwww.epfl.ch/publications/aguet0903.html)&lt;sup&gt;3&lt;/sup&gt; [F. Gibson and F. Lanni (1992) J. Opt. Soc. Am. A, vol. 9, no. 1, pp. 154-166](https://opg.optica.org/josaa/abstract.cfm?uri=josaa-9-1-154)&lt;sup&gt;4&lt;/sup&gt; [Zhang et al (2007). Appl Opt. 2007 Apr 1;46(10):1819-29.](https://doi.org/10.1364/AO.46.001819)&lt;/small&gt;### see also:For a different (faster) scalar-based Gibsonâ€“Lanni PSF model, see the[MicroscPSF](https://github.com/MicroscPSF) project, based on [Li et al(2017)](https://doi.org/10.1364/JOSAA.34.001029) which has been implemented in[Python](https://github.com/MicroscPSF/MicroscPSF-Py),[MATLAB](https://github.com/MicroscPSF/MicroscPSF-Matlab), and[ImageJ/Java](https://github.com/MicroscPSF/MicroscPSF-ImageJ)## Install```shpip install psfmodels```### from source```shgit clone https://github.com/tlambert03/PSFmodels.gitcd PSFmodelspip install -e &quot;.[dev]&quot;  # will compile c code via pybind11```## UsageThere are two main functions in `psfmodels`: `vectorial_psf` and `scalar_psf`.Additionally, each version has a helper function called `vectorial_psf_centered`and `scalar_psf_centered` respectively. The main difference is that the `_psf`functions accept a vector of Z positions `zv` (relative to coverslip) at whichPSF is calculated. As such, the point source may or may not actually be in thecenter of the rendered volume. The `_psf_centered` variants, by contrast, do_not_ accecpt `zv`, but rather accept `nz` (the number of z planes) and `dz`(the z step size in microns), and always generates an output volume in which thepoint source is positioned in the middle of the Z range, with planes equidistantfrom each other. All functions accept an argument `pz`, specifying the positionof the point source relative to the coverslip. See additional keyword argumentsbelow_Note, all output dimensions (`nx` and `nz`) should be odd._```pythonimport psfmodels as psfmimport matplotlib.pyplot as pltfrom matplotlib.colors import PowerNorm# generate centered psf with a point source at `pz` microns from coverslip# shape will be (127, 127, 127)psf = psfm.make_psf(127, 127, dxy=0.05, dz=0.05, pz=0)fig, (ax1, ax2) = plt.subplots(1, 2)ax1.imshow(psf[nz//2], norm=PowerNorm(gamma=0.4))ax2.imshow(psf[:, nx//2], norm=PowerNorm(gamma=0.4))plt.show()```![Image of PSF](fig.png)```python# instead of nz and dz, you can directly specify a vector of z positionsimport numpy as np# generate 31 evenly spaced Z positions from -3 to 3 micronspsf = psfm.make_psf(np.linspace(-3, 3, 31), nx=127)psf.shape  # (31, 127, 127)```**all** PSF functions accept the following parameters. Units should be providedin microns unless otherwise stated. Python API may change slightly in thefuture.  See function docstrings as well.```nx (int):       XY size of output PSF in pixels, must be odd.dxy (float):    pixel size in sample space (microns) [default: 0.05]pz (float):     depth of point source relative to coverslip (in microns) [default: 0]ti0 (float):    working distance of the objective (microns) [default: 150.0]ni0 (float):    immersion medium refractive index, design value [default: 1.515]ni (float):     immersion medium refractive index, experimental value [default: 1.515]tg0 (float):    coverslip thickness, design value (microns) [default: 170.0]tg (float):     coverslip thickness, experimental value (microns) [default: 170.0]ng0 (float):    coverslip refractive index, design value [default: 1.515]ng (float):     coverslip refractive index, experimental value [default: 1.515]ns (float):     sample refractive index [default: 1.47]wvl (float):    emission wavelength (microns) [default: 0.6]NA (float):     numerical aperture [default: 1.4]```## Comparison with other modelsWhile these models are definitely slower than the one implemented in [Li et al(2017)](https://doi.org/10.1364/JOSAA.34.001029) and[MicroscPSF](https://github.com/MicroscPSF), there are some interestingdifferences between the scalar and vectorial approximations, particularly withhigher NA lenses, non-ideal sample refractive index, and increasing sphericalaberration with depth from the coverslip.For an interactive comparison, see the [examples.ipynb](notebooks/examples.ipynb) Jupyternotebook.## Lightsheet PSF utility functionThe `psfmodels.tot_psf()` function provides a quick way to simulate the totalsystem PSF (excitation x detection) as might be observed on a light sheetmicroscope (currently, only strictly orthogonal illumination and detection aresupported).  See the [lightsheet.ipynb](notebooks/lightsheet.ipynb) Jupyter notebook forexamples.</longdescription>
</pkgmetadata>