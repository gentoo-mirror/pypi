<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Python &gt;= 3.7](https://img.shields.io/badge/python-&gt;=3.7-red.svg) [![](https://badgen.net/github/release/deedy5/duckduckgo_search)](https://github.com/deedy5/duckduckgo_search/releases) [![](https://badge.fury.io/py/duckduckgo-search.svg)](https://pypi.org/project/duckduckgo-search)# Duckduckgo_search&lt;a name=&quot;TOP&quot;&gt;&lt;/a&gt;***_Attention. Versions before v2.9.4 no longer work as of May 12, 2023!_***Search for words, documents, images, videos, news, maps and text translation using the DuckDuckGo.com search engine. Downloading files and images to a local hard drive.## Table of Contents* [Install](#install)* [CLI version](#cli-version)* [Duckduckgo search operators](#duckduckgo-search-operators)* [Regions](#regions)* [Using proxy](#using-proxy)* [1. text() - text search](#1-text---text-search-by-by-duckduckgocom)* [2. answers() - instant answers](#2-answers---instant-answers-by-duckduckgocom)* [3. images() - image search](#3-images---image-search-by-duckduckgocom)* [4. videos() - video search](#4-videos---video-search-by-duckduckgocom)* [5. news() - news search](#5-news---news-search-by-duckduckgocom)* [6. maps() - map search](#6-maps---map-search-by-duckduckgocom)* [7. translate() - translation](#7-translate---translation-by-duckduckgocom)* [8. suggestions() - suggestions](#8-suggestions---suggestions-by-duckduckgocom)## Install```pythonpip install -U duckduckgo_search```## CLI version```python3ddgs --help```or```python3python -m duckduckgo_search --help```CLI examples:```python3# download pdf filesddgs text -k &quot;russia filetype:pdf&quot; -m 50 -d# download imagesddgs images -k &quot;lady in red&quot; -m 500 -s off -d# get latest newsddgs news -k &quot;ukraine war&quot; -s off -t d -m 10```[Go To TOP](#TOP)## Duckduckgo search operators| Keywords example |Result|| ---     | ---   || cats dogs |Results about cats or dogs || &quot;cats and dogs&quot; |Results for exact term &quot;cats and dogs&quot;. If no results are found, related results are shown. || cats -dogs |Fewer dogs in results || cats +dogs |More dogs in results || cats filetype:pdf |PDFs about cats. Supported file types: pdf, doc(x), xls(x), ppt(x), html || dogs site:example.com  |Pages about dogs from example.com || cats -site:example.com |Pages about cats, excluding example.com || intitle:dogs |Page title includes the word &quot;dogs&quot; || inurl:cats  |Page url includes the word &quot;cats&quot; |[Go To TOP](#TOP)## Regions&lt;details&gt;  &lt;summary&gt;expand&lt;/summary&gt;    xa-ar for Arabia    xa-en for Arabia (en)    ar-es for Argentina    au-en for Australia    at-de for Austria    be-fr for Belgium (fr)    be-nl for Belgium (nl)    br-pt for Brazil    bg-bg for Bulgaria    ca-en for Canada    ca-fr for Canada (fr)    ct-ca for Catalan    cl-es for Chile    cn-zh for China    co-es for Colombia    hr-hr for Croatia    cz-cs for Czech Republic    dk-da for Denmark    ee-et for Estonia    fi-fi for Finland    fr-fr for France    de-de for Germany    gr-el for Greece    hk-tzh for Hong Kong    hu-hu for Hungary    in-en for India    id-id for Indonesia    id-en for Indonesia (en)    ie-en for Ireland    il-he for Israel    it-it for Italy    jp-jp for Japan    kr-kr for Korea    lv-lv for Latvia    lt-lt for Lithuania    xl-es for Latin America    my-ms for Malaysia    my-en for Malaysia (en)    mx-es for Mexico    nl-nl for Netherlands    nz-en for New Zealand    no-no for Norway    pe-es for Peru    ph-en for Philippines    ph-tl for Philippines (tl)    pl-pl for Poland    pt-pt for Portugal    ro-ro for Romania    ru-ru for Russia    sg-en for Singapore    sk-sk for Slovak Republic    sl-sl for Slovenia    za-en for South Africa    es-es for Spain    se-sv for Sweden    ch-de for Switzerland (de)    ch-fr for Switzerland (fr)    ch-it for Switzerland (it)    tw-tzh for Taiwan    th-th for Thailand    tr-tr for Turkey    ua-uk for Ukraine    uk-en for United Kingdom    us-en for United States    ue-es for United States (es)    ve-es for Venezuela    vn-vi for Vietnam    wt-wt for No region___&lt;/details&gt;[Go To TOP](#TOP)## Using proxyIf you send too many requests the site blocks ip for up to one minute and DDGS will raise an exception `requests.exceptions.HTTPError: 418 Client Error:  for url: https://duckduckgo.com/`.In this case, you need repeat again after a while or to use a proxy. You can set a timeout if the proxy takes a long time to respond (default timeout=10).*1. The easiest way. Launch the Tor Browser*```python3from duckduckgo_search import DDGSproxies = {    &quot;http&quot;: &quot;socks5h://localhost:9150&quot;,    &quot;https&quot;: &quot;socks5h://localhost:9150&quot;}ddgs_text_gen = DDGS(proxies=proxies, timeout=20).text(&quot;something you need&quot;)for r in ddgs_text_gen:print(r)```*2. Use any proxy server* (*example with [iproyal residential proxies](https://iproyal.com?r=residential_proxies)*)```python3from duckduckgo_search import DDGSproxies = {    &quot;http&quot;: &quot;socks5h://user:password@geo.iproyal.com:32325&quot;,    &quot;https&quot;: &quot;socks5h://user:password@geo.iproyal.com:32325&quot;,    &quot;no_proxy&quot;: &quot;localhost,127.0.0.1&quot;,}ddgs_text_gen = DDGS(proxies=proxies, timeout=20).text(&quot;something you need&quot;)for r in ddgs_text_gen:print(r)```[Go To TOP](#TOP)## 1. text() - text search by by duckduckgo.com```pythondef text(    keywords: str,    region: str = &quot;wt-wt&quot;,    safesearch: str = &quot;moderate&quot;,    timelimit: Optional[str] = None,) -&gt; Iterator[dict]:    &quot;&quot;&quot;DuckDuckGo text search generator. Query params: https://duckduckgo.com/params    Args:        keywords: keywords for query.        region: wt-wt, us-en, uk-en, ru-ru, etc. Defaults to &quot;wt-wt&quot;.        safesearch: on, moderate, off. Defaults to &quot;moderate&quot;.        timelimit: d, w, m, y. Defaults to None.    Yields:        dict with search results.    &quot;&quot;&quot;```***Example***```pythonfrom duckduckgo_search import DDGSddgs = DDGS()keywords = 'Bella Ciao'ddgs_text_gen = ddgs.text(keywords, region='wt-wt', safesearch='Off', timelimit='y')for r in ddgs_text_gen:print(r)# Searching for pdf fileskeywords = 'russia filetype:pdf'ddgs_text_gen = ddgs.text(keywords, region='wt-wt', safesearch='Off', timelimit='y')for r in ddgs_text_gen:print(r)```[Go To TOP](#TOP)## 2. answers() - instant answers by duckduckgo.com```pythondef answers(keywords: str) -&gt; Generator[dict, None, None]:    &quot;&quot;&quot;DuckDuckGo instant answers. Query params: https://duckduckgo.com/params    Args:        keywords: keywords for query.    Yields:        dict with instant answers results.        &quot;&quot;&quot;```***Example***```pythonfrom duckduckgo_search import DDGSddgs = DDGS()keywords = 'sun'ddgs_answers_gen = ddgs.answers(keywords)for r in ddgs_answers_gen:    print(r)```[Go To TOP](#TOP)## 3. images() - image search by duckduckgo.com```pythondef images(    keywords: str,    region: str = &quot;wt-wt&quot;,    safesearch: str = &quot;moderate&quot;,    timelimit: Optional[str] = None,    size: Optional[str] = None,    color: Optional[str] = None,    type_image: Optional[str] = None,    layout: Optional[str] = None,    license_image: Optional[str] = None,) -&gt; Iterator[dict]:    &quot;&quot;&quot;DuckDuckGo images search. Query params: https://duckduckgo.com/params    Args:        keywords: keywords for query.        region: wt-wt, us-en, uk-en, ru-ru, etc. Defaults to &quot;wt-wt&quot;.        safesearch: on, moderate, off. Defaults to &quot;moderate&quot;.        timelimit: Day, Week, Month, Year. Defaults to None.        size: Small, Medium, Large, Wallpaper. Defaults to None.        color: color, Monochrome, Red, Orange, Yellow, Green, Blue,            Purple, Pink, Brown, Black, Gray, Teal, White. Defaults to None.        type_image: photo, clipart, gif, transparent, line.            Defaults to None.        layout: Square, Tall, Wide. Defaults to None.        license_image: any (All Creative Commons), Public (PublicDomain),            Share (Free to Share and Use), ShareCommercially (Free to Share and Use Commercially),            Modify (Free to Modify, Share, and Use), ModifyCommercially (Free to Modify, Share, and            Use Commercially). Defaults to None.    Yields:        dict with image search results.    &quot;&quot;&quot;```***Example***```pythonfrom duckduckgo_search import DDGSddgs = DDGS()keywords = 'butterfly'ddgs_images_gen = ddgs.images(    keywords,    region=&quot;wt-wt&quot;,    safesearch=&quot;Off&quot;,    size=None,    color=&quot;Monochrome&quot;,    type_image=None,    layout=None,    license_image=None,)for r in ddgs_images_gen:    print(r)```[Go To TOP](#TOP)## 4. videos() - video search by duckduckgo.com```pythondef videos(    keywords: str,    region: str = &quot;wt-wt&quot;,    safesearch: str = &quot;moderate&quot;,    timelimit: Optional[str] = None,    resolution: Optional[str] = None,    duration: Optional[str] = None,    license_videos: Optional[str] = None,) -&gt; Iterator[dict]:    &quot;&quot;&quot;DuckDuckGo videos search. Query params: https://duckduckgo.com/params    Args:        keywords: keywords for query.        region: wt-wt, us-en, uk-en, ru-ru, etc. Defaults to &quot;wt-wt&quot;.        safesearch: on, moderate, off. Defaults to &quot;moderate&quot;.        timelimit: d, w, m. Defaults to None.        resolution: high, standart. Defaults to None.        duration: short, medium, long. Defaults to None.        license_videos: creativeCommon, youtube. Defaults to None.    Yields:        dict with videos search results    &quot;&quot;&quot;```***Example***```pythonfrom duckduckgo_search import DDGSddgs = DDGS()keywords = 'tesla'ddgs_videos_gen = ddgs.videos(    keywords,    region=&quot;wt-wt&quot;,    safesearch=&quot;Off&quot;,    timelimit=&quot;w&quot;,    resolution=&quot;high&quot;,    duration=&quot;medium&quot;,)for r in ddgs_videos_gen:    print(r)```[Go To TOP](#TOP)## 5. news() - news search by duckduckgo.com```pythondef news(    keywords: str,    region: str = &quot;wt-wt&quot;,    safesearch: str = &quot;moderate&quot;,    timelimit: Optional[str] = None,) -&gt; Iterator[dict]:    &quot;&quot;&quot;DuckDuckGo news search. Query params: https://duckduckgo.com/params    Args:        keywords: keywords for query.        region: wt-wt, us-en, uk-en, ru-ru, etc. Defaults to &quot;wt-wt&quot;.        safesearch: on, moderate, off. Defaults to &quot;moderate&quot;.        timelimit: d, w, m. Defaults to None.    Yields:        dict with news search results.    &quot;&quot;&quot;```***Example***```pythonfrom duckduckgo_search import DDGSddgs = DDGS()keywords = 'How soon the sun will die'ddgs_news_gen = ddgs.news(    keywords,    region=&quot;wt-wt&quot;,    safesearch=&quot;Off&quot;,    timelimit=&quot;m&quot;,)for r in ddgs_news_gen:    print(r)```[Go To TOP](#TOP)## 6. maps() - map search by duckduckgo.com```pythondef maps(        keywords,        place: Optional[str] = None,        street: Optional[str] = None,        city: Optional[str] = None,        county: Optional[str] = None,        state: Optional[str] = None,        country: Optional[str] = None,        postalcode: Optional[str] = None,        latitude: Optional[str] = None,        longitude: Optional[str] = None,        radius: int = 0,    ) -&gt; Iterator[dict]:        &quot;&quot;&quot;DuckDuckGo maps search. Query params: https://duckduckgo.com/params        Args:            keywords: keywords for query            place: if set, the other parameters are not used. Defaults to None.            street: house number/street. Defaults to None.            city: city of search. Defaults to None.            county: county of search. Defaults to None.            state: state of search. Defaults to None.            country: country of search. Defaults to None.            postalcode: postalcode of search. Defaults to None.            latitude: geographic coordinate (north–south position). Defaults to None.            longitude: geographic coordinate (east–west position); if latitude and                longitude are set, the other parameters are not used. Defaults to None.            radius: expand the search square by the distance in kilometers. Defaults to 0.        Yields:            dict with maps search results        &quot;&quot;&quot;```***Example***```pythonfrom duckduckgo_search import DDGSddgs = DDGS()keywords = 'school'ddgs_maps_gen = ddgs.maps(    keywords,    place=&quot;Uganda&quot;,)for r in ddgs_maps_gen:    print(r)```[Go To TOP](#TOP)## 7. translate() - translation by duckduckgo.com```pythondef translate(    self,    keywords: str,    from_: Optional[str] = None,    to: str = &quot;en&quot;,) -&gt; Optional[dict]:    &quot;&quot;&quot;DuckDuckGo translate    Args:        keywords: string or a list of strings to translate        from_: translate from (defaults automatically). Defaults to None.        to: what language to translate. Defaults to &quot;en&quot;.    Returns:        dict with translated keywords.    &quot;&quot;&quot;```***Example***```pythonfrom duckduckgo_search import DDGSddgs = DDGS()keywords = 'school'r = ddgs.translate(keywords, to=&quot;de&quot;)print(r)```[Go To TOP](#TOP)## 8. suggestions() - suggestions by duckduckgo.com```pythondef suggestions(    keywords,    region: str = &quot;wt-wt&quot;,) -&gt; Iterator[dict]:    &quot;&quot;&quot;DuckDuckGo suggestions. Query params: https://duckduckgo.com/params    Args:        keywords: keywords for query.        region: wt-wt, us-en, uk-en, ru-ru, etc. Defaults to &quot;wt-wt&quot;.    Yields:        dict with suggestions results.    &quot;&quot;&quot;```***Example***```python3from duckduckgo_search import DDGSddgs = DDGS()keywords = 'fly'ddgs_suggestions_gen = ddgs.suggestions(keywords)for r in ddgs_suggestions_gen:    print(r)```[Go To TOP](#TOP)</longdescription>
</pkgmetadata>