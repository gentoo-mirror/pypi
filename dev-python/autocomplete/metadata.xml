<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>*Autocomplete* or: How I learned to stop spelling and love our AI overlords===========================================================================A practical guide to implementing &quot;autocomplete&quot;! It follows thesometimes misunderstood principles of conditional probabilitydistributions and the generalized Hidden Markov Model (HMM).Fun fact: Your iPhone's &quot;autocomplete&quot; was implemented using a HMM! Plusthe extra stuff it chose to `sue Samsungfor &lt;http://www.cnet.com/news/us-patent-office-rejects-apple-autocomplete-patent-used-against-samsung/&gt;`__.Skip to:---------  `How to's &lt;#how-to-install&gt;`__-  `tl;dr? &lt;#tldr&gt;`__-  `Motivation &lt;#motivation&gt;`__-  `ELI5 &lt;#explain-like-im-5&gt;`__-  `If you're not 5 &lt;#if-youre-not-5&gt;`__--------------How to install:---------------::    pip install autocompleteHow to use:-----------.. code:: python    import autocomplete    # load pickled python Counter objects representing our predictive models    # I use Peter Norvigs big.txt (http://norvig.com/big.txt) to create the predictive models    autocomplete.load()    # imagine writing &quot;the b&quot;    autocomplete.predict('the','b')    [('blood', 204),     ('battle', 185),     ('bone', 175),     ('best', 149),     ('body', 149),     ...]    # now you type an &quot;o&quot;    autocomplete.predict('the','bo')    [('bone', 175),     ('body', 149),     ('bones', 122),     ('boy', 46),     ('bottom', 32),     ('box', 24),     ...]If you have your own language model in the form described in`ELI5 &lt;#explain-like-im-5&gt;`__, then use the *models* submodule to callthe training method:.. code:: python    from autocomplete import models    models.train_models('some giant string of text')Want to run it as a server (bottlepy required)?.. code:: python    import autocomplete    autocomplete.run_server()    #output    Bottle v0.12.8 server starting up (using WSGIRefServer())...    Listening on http://localhost:8080/    Hit Ctrl-C to quit.Now head over to http://localhost:8080/the/bo::    http://localhost:8080/the/bo    #output    {&quot;body&quot;: 149, &quot;box&quot;: 24, &quot;bottom&quot;: 32, &quot;boy&quot;: 46, &quot;borzois&quot;: 16, &quot;bodies&quot;: 13, &quot;bottle&quot;: 13, &quot;bones&quot;: 122, &quot;book&quot;: 14, &quot;bone&quot;: 175}    http://localhost:8080/the/bos    #output    {&quot;boscombe&quot;: 11, &quot;boston&quot;: 7, &quot;boss&quot;: 1, &quot;bosom&quot;: 5, &quot;bosses&quot;: 4}Obligatory tests~~~~~~~~~~~~~~~~::    python setup.py test--------------`tl;dr &lt;https://github.com/rodricios/autocomplete/blob/master/autocomplete/models.py&gt;`__----------------------------------------------------------------------------------------The following code excerpt is my interpretation of a series oflessons/concepts expressed in a number of different books.The unifying concept can be said to be `conditionalprobability &lt;http://en.wikipedia.org/wiki/Conditional_probability&gt;`__:::    P(A , B) = P(B | A) * P(A)Which can read as saying:::    The probability of A and B occuring is equal to the probability of B occuring, given that A has occuredMore on this below... code:: python        # &quot;preperation&quot; step        # for every word in corpus, normalize ('The' -&gt; 'the'), insert to list        WORDS = helpers.re_split(corpus)        # first model -&gt; P(word)        # Counter constructor will take a list of elements and create a frequency distribution (histogram)        WORDS_MODEL = collections.Counter(WORDS)        # another preperation step        # [a,b,c,d] -&gt; [[a,b], [c,d]]        WORD_TUPLES = list(helpers.chunks(WORDS, 2))        # second model -&gt; P(next word | prev. word)        # I interpret &quot;..| prev. word)&quot; as saying &quot;dictionary key        # leading to seperate and smaller (than WORDS_MODEL) freq. dist.        WORD_TUPLES_MODEL = {first:collections.Counter() for first, second in WORD_TUPLES}        for prev_word, next_word in WORD_TUPLES:            # this is called the &quot;conditioning&quot; step where we assert            # that the probability space of all possible &quot;next_word&quot;'s            # is &quot;conditioned&quot; under the event that &quot;prev_word&quot; has occurred            WORD_TUPLES_MODEL[prev_word].update([next_word])Textbooks, and locations therein, where the concept-in-practice has beenexpressed:I. `Intro to Statistical Natural LanguageProcessing &lt;http://ics.upjs.sk/~pero/web/documents/pillar/Manning_Schuetze_StatisticalNLP.pdf&gt;`__- Manning, Sch√ºtze, 1999::    a. frequency distribution showing the most common words and frequencies in *Tom Sawyer*, pg. 21    b. conditional probability definition expressed in page 42 - section 2.1.2    c. the intuition for *frequency* distributions found in pg. 153 (provided in the context of finding [*Collocations*](http://en.wikipedia.org/wiki/Collocation))II.  `Probabilistic Graphical     Models &lt;http://mitpress.mit.edu/books/probabilistic-graphical-models&gt;`__     - Kohler, Friedman, 2009     a. conditional probability definition found on pg. 18 (hilariously        and coincidentally found in section 2.1.2.1)III. `Artificial Intelligence - A Modern     Approach &lt;http://aima.cs.berkeley.edu&gt;`__ - Russell, Norvig, 3rd.     ed. 2010     a. conditional probability concept explained in pg. 485     b. the &quot;language&quot; (I take to mean &quot;intuition&quot; for asserting things        in the probabilistic sense) pg. 486     c. the notion of &quot;conditioning&quot; found in pg. 492-494Motivation----------Similar to the motivation behind`eatiht &lt;https://github.com/rodricios/eatiht#motivation&gt;`__, I foundthat it took far too long to find a palpable theory-to-applicationexample of what amounts to more than a 500 pages of words across 3books, each spanning a large index of, in certain cases,*counter-intuitive* nomenclature; read the `lightcriticisms &lt;http://www.reddit.com/r/MachineLearning/comments/2fxi6v/ama_michael_i_jordan/ckep3z6&gt;`__made by Michael I. Jordan on the matter (he was recently named `#2machine learning expert &quot;we need to know&quot; ondataconomy.com &lt;http://dataconomy.com/10-machine-learning-experts-you-need-to-know/&gt;`__).You can find similar thoughts being expressed `**in an article from 2008(updated2009)** &lt;http://brenocon.com/blog/2008/12/statistics-vs-machine-learning-fight/&gt;`__by `Brennan O'Connor &lt;http://brenocon.com&gt;`__--------------`*This work is dedicated to my siblings* &lt;#note-1&gt;`__.Explain like I'm 5\ `\* &lt;#note-1&gt;`__------------------------------------\*Warning! This explanation is literally intended for young kids - I'mactually trying to see if these concepts can be explained to an audienceunaware of the nomenclature used within the statistical`nlp &lt;http://en.wikipedia.org/wiki/Natural_language_processing&gt;`__ andother machine learning fields. For example, my 7, 9, 11, 14 y.o.siblings, and basically anyone else who's ever read a story to a child -they would be a part of the target audience.If you've found this readable and informative, please consider puttingon the goofiest face and reading this to your kids, if you have any :)If you do, please send me your thoughts on the experience.I'm only interested in lowering the barrier to entry. I should haveincluded this note since the beginning (sorry to those who undoubtedlyleft with a bad taste in their mouths).You can contact me at rodrigopala91@gmail.comThanks for reading,RodrigoELI5----No. I'm explaining this like you're 5. I know you're not *5* , *youguys... Chris, stop jumping on your sister's back*!Ok, so I'm saying, *imagine I'm 5!*Oh, that was easy now huh? Let's just forget the *I'm 5* part.Imagine a giant collection of books.For example, all the Harry Potter and Hunger Games novels put together.What if I asked you to go through all the pages and all the words inthose pages?Now I'm not asking you *four* to actually *read* the books. You know,just go through, beginning to end, and notice each word.For every new word you see, write it down, and put a &quot;1&quot; next to it, andeverytime you see a word *again*, add &quot;1&quot; more to the previous number.So basically I'm asking y'all to keep count of how many times a wordcomes up.Got it? If yes, cool! If not, find a sibling, friend, or adult near youand ask them to help you out :)...Say you start with *Harry Potter and the Sorcerer's Stone*:::    Mr. and Mrs. Dursley of number four, Privet Drive, were proud to say that they were perfectly normal, thank you very much...And imagine that you're on the 5th word. This or something close to thisis what you're going for:::    Mr.     -&gt; 1    and     -&gt; 1    Mrs.    -&gt; 1    Dursley -&gt; 1    of      -&gt; 1Or if you're a *wannabe-Harry-Potter* fan, ah I'm just kidding!If you started with *the-book-that-must-not-be-named* - I know you guyswon't get it, but persons my age will :)Alright! So you started with *The Hunger Games*:::    When I wake up, the other side of the bed is cold...By the sixth word you have:::    When  -&gt; 1    I     -&gt; 1    wake  -&gt; 1    up    -&gt; 1    the   -&gt; 1You have a long day ahead of you......*1,105,285 words later*Now that you're done tallying up all those words, why not order allthese words by the *number of times you've seen them*?See you next week!...Back so soon? You should have gotten something like this:::    psst*, remember, the format is:     word -&gt; # of times the word appears    'the' -&gt; 80030    'of'  -&gt; 40025    'and' -&gt; 38313    'to'  -&gt; 28766    'in'  -&gt; 22050    'a'   -&gt; 21155    'that'-&gt; 12512    'he'  -&gt; 12401    'was' -&gt; 11410    'it'  -&gt; 10681    ... there's a lot more words you've tallied up...Those were the most common words.Now on the *less-frequent* end, you'll find your words appearing not asoften...::    ... 29137 words later.    'przazdziecka' -&gt; 1    'disclosure'   -&gt; 1    'galvanism'    -&gt; 1    'repertoire'   -&gt; 1    'bravado'      -&gt; 1    'gal'          -&gt; 1    'ideological'  -&gt; 1    'guaiacol'     -&gt; 1    'expands'      -&gt; 1    'revolvers'    -&gt; 1Yeah Chris? Oh, 'what does *lez freekend*' mean? Um, so it meanssomething like: *you probably won't hear or read that word very often.*Now what if I asked you to help me find this word I'm looking for? And Iknow this word starts with the letters: 'th'.I'm pretty sure you guys can do this much faster!...*5 minutes later!*...Not bad! You only had to go through 29157 unique words after all!::    'the'  -&gt; 80030    'that' -&gt; 12512    'this' -&gt; 4063    'they' -&gt; 3938    'there'-&gt; 2972    'their'-&gt; 2955    'them' -&gt; 2241    'then' -&gt; 1558    'these'-&gt; 1231    'than' -&gt; 1206    ... 229 words more...239 words, still kind of lot though huh? And you know your big brother,he's too lazy to do this work *by hand* (*cough* program it up *cough*);)So the word I'm looking for is on the tip of my tongue. I think the nextletter is &quot;i&quot;.*1 minute later*::    'this'     -&gt; 4063    'think'    -&gt; 557    'things'   -&gt; 321    'thing'    -&gt; 303    'third'    -&gt; 239    'thin'     -&gt; 166    'thinking' -&gt; 137    'thirty'   -&gt; 123    'thick'    -&gt; 77    'thirds'   -&gt; 43    ... 36 words more...*I scan through the first 10 words.* Oh, I just remembered that the nextletter is 'r'.*You start taking out even more words.**10 seconds later.*::    'third'      -&gt; 239    'thirty'     -&gt; 123    'thirds'     -&gt; 43    'thirteen'   -&gt; 32    'thirst'     -&gt; 13    'thirteenth' -&gt; 11    'thirdly'    -&gt; 8    'thirsty'    -&gt; 5    'thirtieth'  -&gt; 3    'thirties'   -&gt; 2Aha, 'thirdly' was the word I was looking for! What, you never heard ofthe word &quot;thirdly&quot; before?Now you might be saying to yourself, &quot;*that's pretty cool!*\ &quot;, andyou're right!And you know what's cooler? *Making everyone's life a tiny bit easier*is! :)But how can you do that with just *words*?Aren't words boring and dull?It's like all we do is talk, write, and think with *words*. I mean, howlame, I can't even describe to you this *autocomplete*thing-slash-idea-thing without having to write it out with *words*!Ugh! I hate words!*Whoah, wait a minute! That was not cool of me! Let's relax for aminute.*Let's try to give an imaginary hug to the word-factory in our brains.That part of our brain works so hard, even when we don't ask it to. Hownice of our brain to do that. Not!What I'm trying to is sometimes it's not so nice for our brains todistract us, especially when we have homework or other, real-world,problems like adult-homework.So how about this: let's try to think about *what* the next sentencecoming out of our own mouths *will be*\ `\* &lt;#note-2&gt;`__.Now if you're thinking about what will be coming out of my mouth, or outof your mouth, or your mouth, or your mouth, or your mouth, you're doingit wrong! (to readers who aren't one of my 4 younger siblings, that'show many I have).Try your best to think about *what* the next sentence coming out of*your own* mouth will be....Did you decide on your sentence? Good!Now what if I asked you to give me two reasons explaining *why* and*how* you chose the sentence you chose?Wait, I can't even do that! Let's make it easier on ourselves andexplain *why* and *how* we chose the first *word*.Still pretty hard huh?If you thought about it, and you thought it was pretty darn hard to givea *good and honest* reason as to why it is you chose the word you chose,let's bring out a word you guys might not understand: *probability*.If you feel like you don't *get* what the word means, sure you do! Justuse the word &quot;probably&quot; in one of your sentences, but but try to makessome sense.What do I mean? Well, let's just consider the English language. Likemost other things, the English language has rules.The kind of rules that can be simplified down to:1) &quot;***something*** *action* ***something***&quot;.2) Replace ***something***'s and ***action*** with words that make sense   to you.Fair enough, right?Now, imagine you could put &quot;pause&quot; right after the first word that comesout of your mouth.Let's just say that first word is &quot;the&quot;.Now in the case that you stuttered for reasons outside yourconscientious control (for example: &quot;thhh thhe the&quot;). No big deal, youmeant to say &quot;the&quot;, so let's *flatten* it to just that!With that *word* said, what words do you *think* you might have saidafter it?You might tell me, &quot;*any word I want!*Of course you could have! I bet you spent a millisecond thinking aboutwhether or not the next word you were going to say was going to be:*guaiacol*.I *know* because I thought about using that word too!I can remember the first time I heard (or read) *guaiacol* like it wasyesterday. I read it in some funky article on the internet. I found theword in a list of words that don't appear too often in the Englishlanguage.After I read it, I was able to fit *guaiacol* nicely into that part ofmy brain where I... uhh.. was... able... uhh...Oh, you *know*, that place in my brain where I get to choose whether Iwant to say *the apple*, *the automobile*, *the austronaut*, etc....Ok, so clearly I'm no brainician, and that may or may not be the way ourbrain works - actually, it's probably super super unlikely.But even though that idea is probably wrong, the idea itself sounds likea pretty darn good way of suggesting the next word or words somebody istrying to *type*.What if you had a way to count the number of times you've heard &quot;apple&quot;said after the word &quot;the&quot;?Ask yourself the same question, but now with the word &quot;automobile&quot;instead of &quot;apple&quot;.What if you had the time to think about every possible word that you'veever heard spoken after the word &quot;the&quot;? I'd say it might have lookedsomething like this:::    Words you might have heard following the word &quot;the&quot; and the number of times you might have heard it    'same'     -&gt; 996    'french'   -&gt; 688    'first'    -&gt; 652    'old'      -&gt; 591    'emperor'  -&gt; 581    'other'    -&gt; 528    'whole'    -&gt; 500    'united'   -&gt; 466    'room'     -&gt; 376    'most'     -&gt; 373    ... 9331 more words...Not impressed with your brain yet? Let's continue this little thoughtexperiment further.Imagine that you just said &quot;the&quot;, and you could put pause after thefirst *letter* of the next word out of your mouth: &quot;h&quot;.Real quick, think of the shortest amount of time you can think of. Thinkof the shortest *second* you can think of. Now shorter than that too.At this point, you can't even call that length of time a *second*. Butin that length of time, your brain may have just done this:::    Every word you've ever heard coming after the word &quot;the&quot;:    'house'   -&gt; 284    'head'    -&gt; 117    'hands'   -&gt; 101    'hand'    -&gt; 97    'horses'  -&gt; 71    'hill'    -&gt; 64    'highest' -&gt; 64    'high'    -&gt; 57    'history' -&gt; 56    'heart'   -&gt; 55And that brain you got did this realllllyyyyyy fast. Faster than Google,Bing, Yahoo and any other company can ever hope to beat. And your braindid this without even asking for your permission. I think our brains aretrying to control us you guys, oh no!If you're not 5---------------The basic idea is this:Assume you have a large collection of Enlish-understandable text mergedinto a single string.Start by transforming that string into a list of words (AKA *ngrams ofword-legth*), and also (but not required) normalize each word ('The' -&gt;'the').Once you have a normalized list of words, you can start building afrequency distribution measuring the frequency of each word....At this point you can start &quot;predict&quot; the &quot;final state&quot; of aword-in-progress. But consider the case where a user types in some querybox:::    &quot;The th&quot;And he intends to write:::    &quot;The third&quot;With the above predictive model, you'll be suggesting something like:::    [        ('the', 80030),        ('they', 3938),        ('there', 2972),        ...    ]This explains one specific type of predictive model, which can bewritten as P(word), and you've just seen the pitfalls of using **just**this model.Now for the next word, ask yourself, what's the probability that I'mgoing to type the word &quot;apple&quot; given that I wrote &quot;tasty&quot;?In machine learning and AI books, you'll be presented *ConditionalProbability* with the following equation:::    P(word A and word B) = P(word B | word A) * P(word A)That equation addresses the problem that I mentioned.We've handled P(wordA) already.To handle P(word B \| word A), which reads *probability of word A givenword B *, I take a *literall* interpretation of the word &quot;given&quot;, inthat context, to mean the following:*&quot;word A&quot; is the key pointing to a probability distribution representingall the words that follow &quot;word A&quot;*Once we can represent this second model, we can also apply the*filtering* step - given that we know more letters in the second word,we can zone in on more precise suggestions.--------------Afterword~~~~~~~~~notes: \*I have to give a shout out to `SamHarris &lt;https://twitter.com/SamHarrisOrg&gt;`__ for being, AFAIK, the firstperson or one of the firsts, in `wonderfully putting intowords &lt;https://www.youtube.com/watch?v=pCofmZlC72g#t=1144&gt;`__ what I'veborrowed and slightly adapted for this writing. `I highly recommend hiswork &lt;http://www.samharris.org/&gt;`__Another shoutout to `Peter Norvig &lt;http://norvig.com&gt;`__ for inspiringme and probably many others with our own little &quot;toy&quot; programs. His*Occam's Razor* approach to problem solving will likely cause someconfusion as it may appear that my work is an almost full on copy-pasteof his `*How to Write a SpellChecker* &lt;http://norvig.com/spell-correct.html&gt;`__!But I swear it's not! I actually I think I may have out-Norvig'ed PeterNorvig when it comes to describing `conditionalprobability &lt;http://en.wikipedia.org/wiki/Conditional_probability&gt;`__:P(wordA &amp; wordB) = P(wordB \| wordA)\*P(wordA)And another one to Rob Renaud's `GibberishDetector &lt;https://github.com/rrenaud/Gibberish-Detector&gt;`__. I, out ofpure chance, ran into his project some time after running into Norvig'sarticle. I can't describe *how much it helped* to intuitively understandwhat the heavy hitters of &quot;AI&quot; consider to be introductory material;this was greatly needed b/c at the time, I felt overwhelmed by my owndesire to really understand this area, and everything else going on.I do have a second article about this exact thing, only expresseddifferently (audience is non-programming), and it may or may not beposted soon! [STRIKEOUT:Oh and the code too, that is if someone hasn'tgotten to translating the above article to code before I can get touploading the project :P I'm trying to get the kinks out of here and thecode so it's simple, duh!]I dedicate this work to my sisters, Cat, Melissa and Christine, and myfavorite brother, Christian :)note 1^^^^^^`go back &lt;#explain-like-im-5&gt;`__*To avoid confusion, I wrote this section in the form of a letter to myyounger siblings*note 2^^^^^^\*I'm borrowing, what I consider, `one of the most beautiful thoughtexperiments I've ever heard trying to describe one'sself &lt;https://www.youtube.com/watch?v=pCofmZlC72g#t=1144&gt;`__. I'm a bigfan of Sam Harris's work. Highly recommend!</longdescription>
</pkgmetadata>