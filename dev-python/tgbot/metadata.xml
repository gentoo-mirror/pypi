<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A Python Telegram Bot=====================|Build Status|Welcome to a UWSGI based abstract Telegram Bot. With this framework youare easily able to set up a complete Telegram Bot with self madecommands without a lot of extra work. All abstract commands areimplemented as GET-Responses as explained onhttps://core.telegram.org/bots/api. This means you don't need to haveexperience in HTTP Requests or PHP: All you need is python.In the next few chapters I will explain you all the Features and how toproperly set up the bot.Set Up======First of all, as we are talking about an *abstract* bot you first needto *implement* this package.**For programming with the bot, you need the following:**1. At least Python 3.X2. A good supported Python IDE (for example PyCharm)3. This python package , available on pypiAn example implementation of this bot will be soon available in theexample folder.**For using your bot implemenation on a real server**1. At least Python 3.X2. Install this package with pip install xxxx3. Install regis with pip install redis4. Install uwsgi with pip install uwsgi*Warning*: It's recommended that you install all packages used for yourbot on a virtual environment to not mess up your OS. All infos aboutVirtual Environments can be read onhttp://docs.python-guide.org/en/latest/dev/virtualenvs/. With virtualenvironments you can keep all the used requirements only for thisproject / bot.More instructions will follow.Features========Commands and Inline Commands----------------------------This Bot support both the normal commands and the newly added inlinecommands. To add new commands you simply create methods inside either aCommand- or InlineCommandClass. The name of the method is the commanditself. To add more command- inlinecommandclasses to your bot you simplyadd the to the lists which you give the class TGBotWSGI when youinitialise the bot. For more information check the example.Configuration-------------All configurations are managed by \*.ini - files.UWSGI~~~~~Bot~~~For correctly configuring the bot, you need a file/resources/config/config.ini inside your bot project. All neededattributes will be explained here in future and will also be shown inthe example.Logging-------The Bot supports a complete logger and can be accessed intelegram/tglogging/init.py .Files-----You are able to save several data in .json files. To define new filesyou simply define a folder for all your json filesm in thebot-configuration and define json-file-names in a list when implementingthe class *TGBotWSGI*.Redis-----File Server~~~~~~~~~~~To save performance when e.g. loading files, a cache server isimplemented. Every time a command has been recognized, all the createdfiles will be loaded into the cache of this server, if the cache isempty. If it is not empty, every time a command has been recognized thecache will be used to make the bot more performant.Limit Server~~~~~~~~~~~~To prevent spam there is a limit cache server. In the config.ini you areable to set the amount and time of a limit: - Amount: How many commandsare allowed until you start to restrict the use of the bot? - Time: Whatperiod are we looking at? When will the restriction be resetted?Conversation Server~~~~~~~~~~~~~~~~~~~Furthermore a conversation cache server has also been added to addsupport for longer command conversations. If you , for example, startwith a command, the bot then can answer back with a second question. Youwill then answer back etc. All these commands will be explained in thenext sub-chapter.More Documentation will follow... |Build Status| image:: https://travis-ci.org/T-Eberle/tgbot.svg?branch=master   :target: https://travis-ci.org/T-Eberle/tgbot</longdescription>
</pkgmetadata>