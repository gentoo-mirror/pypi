<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ÂµPipenv-------.. image:: https://img.shields.io/github/v/tag/thoth-station/micropipenv?style=plastic  :target: https://github.com/thoth-station/micropipenv/releases  :alt: GitHub tag (latest by date).. image:: https://travis-ci.com/thoth-station/micropipenv.svg?branch=master  :target: https://travis-ci.com/thoth-station/micropipenv.. image:: https://img.shields.io/pypi/pyversions/micropipenv?style=plastic  :target: https://pypi.org/project/micropipenv  :alt: PyPI - Python Version.. image:: https://img.shields.io/pypi/l/micropipenv?style=plastic  :target: https://pypi.org/project/micropipenv  :alt: PyPI - License.. image:: https://img.shields.io/pypi/dm/micropipenv?style=plastic  :target: https://pypi.org/project/micropipenv  :alt: PyPI - DownloadsA lightweight wrapper for pip to support requirements.txt, Pipenv and Poetrylock files or converting them to `pip-tools&lt;https://pypi.org/project/pip-tools/&gt;`_ compatible output. Designed forcontainerized Python applications but not limited to them.For a brief video preview, `check this demo&lt;https://www.youtube.com/watch?v=I-QC83BcLuo&amp;t=8m58s&gt;`_ (the micropipenvpart starts at 9:00).See also `micropipenv: Installing Python dependencies in containerizedapplications&lt;https://developers.redhat.com/articles/2021/05/19/micropipenv-installing-python-dependencies-containerized-applications&gt;`__for more info about this tool and a `blog post published about it&lt;https://dev.to/fridex/micropipenv-the-one-installation-tool-that-covers-pipenv-poetry-and-pip-tools-3ee7&gt;`__.What's the difference in comparision to pip when using requirements.txt?=========================================================================* if ``requirements.txt`` state all the packages in a pinned version with  hashes (e.g. `pip-tools &lt;https://pypi.org/project/pip-tools/&gt;`_), micropipenv  installs packages with a possible fallback if the installation order is  relevant  * you don't need to care about the installation and maintain correct order or    requirements in ``requirements.txt``  * best effort installation - try until there is a possibility to succeed* if ``requirements.txt`` do not state all the packages in a pinned form  * pip's resolver algorithm is used and it's left on pip to resolve    requirements  * the same behavior as micropipenv would not be usedWhat's the difference in comparision to Poetry?===============================================* a lightweight addition to Poetry, not a Poetry replacement  * micropipenv does not substitute Poetry it rather complements it for    containerized deployments where the size of the container image and    software shipped with it matters* no release management to Python package indexes* micropipenv does not implement resolver, it uses already resolved stack that  application is shipped with based on ``poetry.lock`` and ``pyproject.toml``* no virtual environment management  * virtual environment management is left on user, if neededWhat's the difference in comparision to Pipenv?===============================================* a lightweight addition to Pipenv, not a Pipenv replacement  * micropipenv does not substitute Pipenv it rather complements it for    containerized deployments where the size of the container image and    software shipped with it matters* it does not `vendor all the dependencies as Pipenv  &lt;https://github.com/pypa/pipenv/tree/master/pipenv/vendor&gt;`_* micropipenv does not implement resolver, it uses already resolved stack that  application is shipped with ``Pipfile.lock``* no virtual environment management  * virtual environment management is left on user, if neededmicropipenv use cases=====================Why should I use ``micropipenv`` instead of `Pipenv &lt;https://github.com/pypa/pipenv&gt;`_or `Poetry &lt;https://pypi.org/project/poetry&gt;`_?* I would like to have a tool that &quot;rules them all&quot; - one lightweight tool to  support all Python dependency lock file managers (pip-tools, Poetry, Pipenv)  and lets users decide what they want to use when deploying Python applications  in containerized environments (e.g. Kubernetes, OpenShift, ...).* I would like to have a fast and minimalistic tool to install software  packages in CI.* I would like to have containerized Python applications as small as possible  with minimum software shipped and required to build and run the Python  application in production.* I would like to convert files produced by Pipenv/Poetry to a pip-tools  compatible output.* I don't want to install Pipenv/Poetry, but I would like to run a project that  uses Pipenv/Poetry for dependency management (e.g. restricted environments).* My Pipenv installation is broken and `Pipenv upstream did not issue any new  Pipenv release &lt;https://github.com/pypa/pipenv/issues/4058&gt;`_.* I would like to deploy my application into a production environment and my  application dependencies are managed by Pipenv/Poetry (dependencies are  already resolved), but I don't want to run Pipenv/Poetry in production (e.g.  OpenShift's s2i build process).``micropipenv install``=======================The tool supports installing dependencies of the following formats:* ``Pipenv`` style lock format - files ``Pipfile`` and ``Pipfile.lock``* ``Poetry`` style lock format - files ``pyproject.toml`` and ``poetry.lock``* ``pip-tools`` style lock format - file ``requirements.txt``* raw ``requirements.txt`` as used by ``pip`` (not a lock file)In case of Pipenv, Poetry and pip-tools style format, the tool performsautomatic recovery if the installation order of dependencies is relevant (onedependency fails to install as it depends on an another one).To enforce the installation method used, specify ``--method`` option to the``install`` subcommand. By default, ``micropipenv`` traverses the filesystem upfrom the current working directory and looks for the relevant files in thefollowing order:1. ``Pipfile.lock`` and optionally ``Pipfile`` (if ``--deploy`` set)2. ``poetry.lock`` and ``pyproject.toml``3. ``requirements.txt`` for ``pip-tools`` and raw ``pip`` requirementsTo install dependencies issue the following command:.. code-block:: console  micropipenv install --dev  # --dev is optionalYou can supply additional positional arguments that will be passed to ``pip``.Use double dashes to distinguish ``pip`` options from ``micropipenv`` options... code-block::  # issue `pip install --user'  micropipenv install -- --user``micropipenv`` does not create any virtual environment as in case ofPipenv/Poetry.  It rather directly talks to ``pip``, if necessary, andconstructs arguments out of the lock file used.To create a virtual environment to be used by ``micropipenv``:.. code-block:: console  python3 -m venv venv/ &amp;&amp; . venv/bin/activate``micropipenv install --deploy``================================If you wish to mimic ``pipenv --deploy`` functionality, you can do so:.. code-block:: console  micropipenv install --deployNote however, there is a need to parse ``Pipfile`` and verify its contentcorresponds to Pipefile.lock used (digest computed on ``Pipfile`` content).``micropipenv`` requires toml extras for this functionality, so you will needto install ``micropipenv[toml]`` (see installation instructions bellow).The ``--deploy`` option takes no effect for Poetry and requirementsinstallation methods.``micropipenv install --dev``================================Installation of &quot;development&quot; dependencies can be acomplished using the``--dev`` flag. This flag has no effect when ``requirements.txt`` file is used.``micropipenv requirements`` / ``micropipenv req``==================================================To generate output compatible with `pip-tools&lt;https://pypi.org/project/pip-tools/&gt;`_, you can issue the following command:.. code-block:: console  micropipenv requirementsThis applies to conversion from Poetry and Pipenv specific lock files.Additional configuration options can limit what is present in the output (e.g.``--no-dev`` to remove development dependencies).A special option ``--only-direct`` makes ``micropipenv`` work on ``Pipfile``instead of ``Pipfile.lock``. This requires toml extras, so install``micropipenv[toml]`` for this functionality (see installation instructionsbellow). To get direct dependencies of an application and store them inrequirements.txt file:.. code-block:: console  micropipenv requirements --only-direct &gt; requirements.txtFor a setup that follows ``pip-tools`` convention with ``requirements.in`` and``requirements.txt``.. code-block:: console  micropipenv requirements --no-dev &gt; requirements.txt  micropipenv requirements --no-dev --only-direct &gt; requirements.in  micropipenv requirements --no-default &gt; dev-requirements.txt  micropipenv requirements --no-default --only-direct &gt; dev-requirements.inSee ``micropipenv requirements --help`` for more info.``micropipenv`` as a library============================``micropipenv`` exposes some core functionality on top of``Pipfile``/``Pipfile.lock``.  You can import its functions and use``micropipenv`` as a lightweight library for ``Pipfile``/``Pipfile.lock`` and``pyproject.toml``/``poetry.lock`` manipulation.Adjusting options using environment variables=============================================All options can be triggered using environment variables - the name of anenvironment variable is always prefixed with ``MICROPIPENV_`` and consists ofthe name of the option converted to uppercase, dashes are replaced withunderscores (example ``--no-dev`` is mapped to ``MICROPIPENV_NO_DEV``). Allenvironment variables corresponding to flags are parsed as integers andsubsequently casted to a boolean. For example, to turn ``--no-dev`` flag on,set ``MICROPIPENV_NO_DEV=1`` (0 disables the flag). Parameters supplied to CLItake precedence over environment variables.A special environment variable ``MICROPIPENV_PIP_BIN`` can point to analternate ``pip`` binary.To run this tool in a verbose mode, you can set the ``MICROPIPENV_DEBUG=1`` (thesame behavior can be achieved with multiple ``--verbose`` supplied).The tool prints software stack information to the standard error output. This wasdesigned for Thoth to capture information about installed dependencies as auseful source of information for Thoth's build analyzers. This behaviour can besuppressed by setting ``MICROPIPENV_NO_LOCKFILE_PRINT=1`` environment variable.Besides printing, the tool also writes the content of Pipfile.lock (if a lockedsoftware stack is used) to the directory where lock files are present (for Pipenvfiles, the Pipfile.lock is kept untouched). This behaviour can be suppressed byproviding ``MICROPIPENV_NO_LOCKFILE_WRITE=1`` environment variable.Example usage=============Install dependencies managed by Poetry as ``pip install --user`` would do(option ``--method`` is optional, auto-discovery is performed if omitted):.. code-block:: console  $ ls  poetry.lock pyproject.toml project.py  $ micropipenv install --method poetry -- --userInstall dependencies (both main and develop) managed by Poetry into a virtualenvironment:.. code-block:: console  $ ls  poetry.lock pyproject.toml project.py  $ python3 -m venv venv/  $ . venv/bin/activate  (venv) $ micropipenv install --devInstall dependencies managed by Pipenv (both main and develop) into a virtualenvironment  (option ``--method`` is optional, auto-discovery is performed ifomitted):.. code-block:: console  $ ls  Pipfile Pipfile.lock src/  $ python3 -m venv venv/  $ . venv/bin/activate  (venv) $ micropipenv install --devPerform deployment of an application as Pipenv would do with Python interpreterversion check and Pipfile file hash check (you can create virtual environmentonly if necessary):.. code-block:: console  $ ls  Pipfile Pipfile.lock src/  $ python3 -m venv venv/  $ . venv/bin/activate  (venv) $ micropipenv install --deployGenerate `pip-tools &lt;https://pypi.org/project/pip-tools/&gt;`_ compliant``requirements.in``, ``dev-requirements.in``, ``requirements.txt`` and``dev-requirements.txt`` out of ``Pipfile`` and ``Pipfile.lock`` - projectdependencies managed by Pipenv:.. code-block:: console  $ ls  Pipfile Pipfile.lock src/  $ micropipenv requirements --no-dev &gt; requirements.txt  $ micropipenv requirements --no-dev --only-direct &gt; requirements.in  $ micropipenv requirements --no-default &gt; dev-requirements.txt  $ micropipenv requirements --no-default --only-direct &gt; dev-requirements.inGenerate `pip-tools &lt;https://pypi.org/project/pip-tools/&gt;`_ complaint``requirements.in``, ``dev-requirements.in``, ``requirements.txt`` and``dev-requirements.txt`` out of ``pyproject.toml`` and ``poetry.lock`` - projectdependencies managed by Poetry:.. code-block:: console  $ ls  poetry.lock pyproject.toml src/  $ micropipenv requirements --no-dev &gt; requirements.txt  $ micropipenv requirements --no-dev --only-direct &gt; requirements.in  $ micropipenv requirements --no-default &gt; dev-requirements.txt  $ micropipenv requirements --no-default --only-direct &gt; dev-requirements.inFor OpenShift's s2i integration,`check this repo with a demo &lt;https://github.com/fridex/s2i-example-micropipenv&gt;`_.Installation============The project is `hosted on PyPI &lt;https://pypi.org/project/micropipenv&gt;`_ soinstalling it using ``pip`` works as expected:.. code-block:: console  pip install micropipenvThe default installation does not bring any dependencies so its just``micropipenv`` that gets installed. However, the default installation supportsonly ``Pipfile.lock`` management. If you would like to manipulate also with``Pipfile`` or Poetry specific lock files, you will need to install``micropipenv`` with TOML support (TOML is not in the standard Python library):.. code-block:: console  pip install micropipenv[toml]Once the project gets installed, you can browse the help message by invokingthe ``micropipenv`` CLI:.. code-block:: console  micropipenv --helpIf you wish to install ``micropipenv`` on your Fedora system:.. code-block:: console  dnf install -y micropipenvSee available `RPM packages &lt;https://src.fedoraproject.org/rpms/micropipenv&gt;`_.No installation===============You can run ``micropipenv`` without actually installing it - simply downloadthe file and execute it. If you do not wish to save ``micropipenv.py`` file todisk, you can issue:.. code-block:: console  curl https://raw.githubusercontent.com/thoth-station/micropipenv/master/micropipenv.py | python3 - --helpAnything after ``python3 -`` will be passed as an argument to``micropipenv.py`` so installing packages can be simply performed using:.. code-block:: console  curl https://raw.githubusercontent.com/thoth-station/micropipenv/master/micropipenv.py | python3 - install -- --userAll arguments after -- will be passed to ``pip`` as options.OpenShift s2i (Source-To-Image)===============================micropipenv is available in UBI, Fedora and RHEL based container images. Toenable micropipenv and benefit from its features, you need to export``ENABLE_MICROPIPENV=1`` environment variable in more recent Python 3 containerimages. See `sclorg/s2i-python-container&lt;https://github.com/sclorg/s2i-python-container/tree/master/3.8&gt;`__ repo formore information.License and copying===================This project is licensed under the terms of the GNU Lesser General PublicLicense v3 or later. See ``LICENSE-LGPL`` and ``LICENSE-GPL`` files for thelicense terms.Copyright (C) 2020-2022 `Project Thoth &lt;http://thoth-station.ninja/&gt;`__; Red Hat Inc.Original author: * FridolÃ­n 'fridex' PokornÃ½ &lt;fridolin@redhat.com&gt;Maintainers: * LumÃ­r 'Frenzy' Balhar &lt;lbalhar@redhat.com&gt; * Max Gautier &lt;max.gautier@redhat.com&gt;</longdescription>
</pkgmetadata>