<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Environment Utils[![Pypi project](https://badge.fury.io/py/environments-utils.svg)](https://badge.fury.io/py/environments-utils)[![Pypi total project downloads](https://pepy.tech/badge/environments-utils)](https://pepy.tech/badge/environments-utils)Utilities to identify the environment in which your Python script is running.This includes determining whether you are in a `Jupyter Notebook`, within a node of a `SLURM` cluster, the architecture of the system you are using, and the operating system.## InstallationInstall `environments_utils` from `PyPi`:```shellpip install environments_utils```## Examples### Detect Rosetta on macOS with Python[Rosetta](https://developer.apple.com/documentation/apple_silicon/about_the_rosetta_translation_environment) is a translation environment that enables you to run apps that contain x86_64 instructions on Apple silicon. In some cases, Rosetta may fail to translate an app successfully, and lead to crashes or other unexpected behavior. It is sometimes therefore useful to know whether the script is running within a macOS with Rosetta so to better understand whether the odd behaviour you may be experiencing is due to Rosetta or not.To detect Rosetta, simply run:```pythonfrom environments_utils import is_macos_rosettaif is_macos_rosetta():    print(&quot;I am running inside Rosetta!&quot;)```### is_tmuxReturn a boolean representing if the script is running within a TMUX-like terminal.```pythonfrom environments_utils import is_tmuxif not is_tmux():    print(&quot;This script is long-running; consider starting it within a TMUX-like terminal.&quot;)```### is_notebookReturn a boolean representing if the script is running within a Jupyter notebook.```pythonfrom environments_utils import is_notebookfrom tqdm import tqdm_notebook, tqdm as tqdm_clitqdm = tqdm_notebook if is_notebook() else tqdm_cli```### is_slurm_nodeReturns whether you are in a `SLURM` cluster node.```pythonfrom environments_utils import (    is_slurm_node,    get_slurm_node_id,    get_number_of_available_slurm_nodes)if is_slurm_node():    print(&quot;YAY! I'm in node {} of {}!&quot;.format(get_slurm_node_id(), get_number_of_available_slurm_nodes()))```## Operating System IdentifiersUtilities to identify the operating system running the app.```pythonfrom environments_utils import is_macos, is_windows, is_linux, is_macos_with_armif is_macos():    print(&quot;The OS is macOS&quot;)if is_windows():    print(&quot;The OS is Windows&quot;)if is_linux():    print(&quot;The OS is Linux&quot;)if is_macos_with_arm():    print(&quot;The machine is macOS with ARM processors like M1&quot;)```## Architecture IdentifiersUtilities to identify the architectures running the app.```pythonfrom environments_utils import is_x86, is_x86_64, is_armif is_x86():    print(&quot;This is a 32-bit system with x86 architecture.&quot;)if is_x86_64():    print(&quot;This is a 64-bit system with x86_64 architecture.&quot;)if is_arm():    print(&quot;This is an ARM machine, such as Mac M1&quot;)```## Internet ConnectionUtility to detect whether the user is connected to the internet.```pythonfrom environments_utils import is_onlineif is_online():    print(&quot;You are online.&quot;)else:    print(&quot;You are offline&quot;)```</longdescription>
</pkgmetadata>