<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># VecSim - A unified interface for similarity serversA standard, light-weight interface to all popular similarity servers.## The problems we are trying to solve:1. **Standard API** - Different vector similarity servers have different APIs - so switching is not trivial.1. **Identifiers** - Some vector similarity servers support string IDs, some do not - we keep track of the mapping.1. **Partitions** - In most cases, pre-filtering is needed prior to querying, we abstract this concept away.## Supported engines:1. Scikit-learn, via [NearestNeighbors](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.NearestNeighbors.html)1. [RediSearch](https://redis.io/docs/stack/search/reference/vectors/)1. [Faiss](https://github.com/facebookresearch/faiss)1. [ElasticSearch](https://www.elastic.co)1. [Pinecone](https://www.pinecone.io)## QuickStart example```pythonimport numpy as np# Import a similarity server of your choice:# SKlearn (best for small datasets or testing)from vecsim import SciKitIndexsim = SciKitIndex(metric='cosine', dim=32)user_ids = [&quot;user_&quot;+str(1+i) for i in range(100)]user_data = np.random.random((100,32))item_ids=[&quot;item_&quot;+str(101+i) for i in range(100)]item_data = np.random.random((100,32))sim.add_items(user_data, user_ids, partition=&quot;users&quot;)sim.add_items(item_data, item_ids, partition=&quot;items&quot;)# Index the datasim.init()# Run nearest neighbor vector searchquery = np.random.random(32)dists, items = sim.search(query, k=10) # returns a list of users and itemsdists, items = sim.search(query, k=10, partition=&quot;users&quot;) # returns a list of users only```For more examples, please read our [documentation](https://vecsim.readthedocs.io/)</longdescription>
</pkgmetadata>