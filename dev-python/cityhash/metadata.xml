<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CityHash/FarmHashPython wrapper for [FarmHash](https://github.com/google/farmhash) and[CityHash](https://github.com/google/cityhash), a family of fastnon-cryptographic hash functions.[![Build Status](https://img.shields.io/github/actions/workflow/status/escherba/python-cityhash/build.yml?branch=master)](https://github.com/escherba/python-cityhash/actions/workflows/build.yml)[![PyPI Version](https://img.shields.io/pypi/v/cityhash.svg)](https://pypi.python.org/pypi/cityhash)[![Conda-Forge Version](https://anaconda.org/conda-forge/python-cityhash/badges/version.svg)](https://anaconda.org/conda-forge/python-cityhash)[![Downloads](https://img.shields.io/pypi/dm/cityhash.svg)](https://pypistats.org/packages/cityhash)[![License](https://img.shields.io/pypi/l/cityhash.svg)](https://opensource.org/licenses/mit-license)[![Supported Python Versions](https://img.shields.io/pypi/pyversions/cityhash.svg)](https://pypi.python.org/pypi/cityhash)## Getting StartedTo install from PyPI:``` bashpip install cityhash```To install in a Conda environment:``` bashconda install -c conda-forge python-cityhash```The package exposes Python APIs for CityHash and FarmHash under `cityhash` and`farmhash` namespaces, respectively. Each provides 32-, 64- and 128-bitimplementations.## Usage Examples### Stateless hashingUsage example for FarmHash:``` python&gt;&gt;&gt; from farmhash import FarmHash32, FarmHash64, FarmHash128&gt;&gt;&gt; FarmHash32(&quot;abc&quot;)1961358185&gt;&gt;&gt; FarmHash64(&quot;abc&quot;)2640714258260161385&gt;&gt;&gt; FarmHash128(&quot;abc&quot;)76434233956484675513733017140465933893```### Hardware-independent fingerprintsFingerprints are seedless hashes that are guaranteed to be hardware- andplatform-independent. This can be useful for networking applications whichrequire persisting hashed values.``` python&gt;&gt;&gt; from farmhash import Fingerprint128&gt;&gt;&gt; Fingerprint128(&quot;abc&quot;)76434233956484675513733017140465933893```### Incremental hashingCityHash and FarmHash do not support incremental hashing and thus are not idealfor hashing of character streams. If you require incremental hashing, consideranother hashing library, such as[MetroHash](https://github.com/escherba/python-metrohash) or[xxHash](https://github.com/ifduyue/python-xxhash).### Fast hashing of NumPy arraysThe [Buffer Protocol](https://docs.python.org/3/c-api/buffer.html) allowsPython objects to expose their data as raw byte arrays for fast access withouthaving to copy to a separate location in memory. NumPy is one well-knownlibrary that extensively uses this protocol.All hashing functions in this package will read byte arrays from objects thatexpose them via the buffer protocol. Here is an example showing hashing of afour-dimensional NumPy array:``` python&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; from farmhash import FarmHash64&gt;&gt;&gt; arr = np.zeros((256, 256, 4))&gt;&gt;&gt; FarmHash64(arr)1550282412043536862```The NumPy arrays need to be contiguous for this to work. To convert anon-contiguous array, use NumPy's `ascontiguousarray()` function.## SSE4.2 supportFor x86-64 platforms, the PyPI repository for this package includes wheelscompiled with SSE4.2 support.  The 32- and 64-bit (but not the 128-bit)variants of FarmHash significantly benefit from SSE4.2 instructions.The vanilla CityHash functions (under `cityhash` module) do not take advantageof SSE4.2. Instead, one can use the `cityhashcrc` module provided with thispackage which exposes 128- and 256-bit CRC functions that do harness SSE4.2.These functions are very fast, and beat `FarmHash128` on speed (FarmHash doesnot include a 256-bit function). Since FarmHash is the intended successor ofCityHash, I would be careful before using the CityHash-CRC functions, however,and would verify whether they provide sufficient randomness for your intendedapplication.## Development### Local workflowFor those wanting to contribute, here is a quick start using Make commands:``` bashgit clone https://github.com/escherba/python-cityhash.gitcd python-cityhashmake env           # create a virtual environmentmake test          # run Python testsmake cpp-test      # run C++ testsmake shell         # enter IPython shell```To find out which Make targets are available, enter:``` bashmake help```### DistributionThe package wheels are built using[cibuildwheel](https://cibuildwheel.readthedocs.io/) and are distributed toPyPI using GitHub actions. The wheels contain compiled binaries and areavailable for the following platforms: windows-amd64, ubuntu-x86,linux-x86\_64, linux-aarch64, and macosx-x86\_64.## See AlsoFor other fast non-cryptographic hash functions available as Python extensions,see [MetroHash](https://github.com/escherba/python-metrohash),[MurmurHash](https://github.com/hajimes/mmh3), and[xxHash](https://github.com/ifduyue/python-xxhash).## AuthorsThe original CityHash Python bindings are due to Alexander \[Amper\] Marshalov.They were rewritten in Cython by Eugene Scherba, who also added the FarmHashbindings. The CityHash and FarmHash algorithms and their C++ implementation areby Google.## LicenseThis software is licensed under the [MITLicense](http://www.opensource.org/licenses/mit-license). See the includedLICENSE file for details.</longdescription>
</pkgmetadata>