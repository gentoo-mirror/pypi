<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Sphinx wavedrom extension=========================A sphinx extension that allows including wavedrom diagrams by using its text-based representationWavedrom online editor and tutorial: https://wavedrom.com/.. image:: https://travis-ci.org/bavovanachte/sphinx-wavedrom.svg?branch=master:target: https://travis-ci.org/bavovanachte/sphinx-wavedrom.. image:: https://badge.fury.io/py/sphinxcontrib-wavedrom.svg:target: https://badge.fury.io/py/sphinxcontrib-wavedromInstallation------------The wavedrom extension can be installed using pip:::pip install sphinxcontrib-wavedromand by adding **'sphinxcontrib.wavedrom'** to the extensions list in your conf.py file.Directives----------The extension is useable in the form of an extra wavedrom directive, as shown below.::.. wavedrom::{ &quot;signal&quot;: [  { &quot;name&quot;: &quot;clk&quot;,  &quot;wave&quot;: &quot;P......&quot; },  { &quot;name&quot;: &quot;bus&quot;,  &quot;wave&quot;: &quot;x.==.=x&quot;, &quot;data&quot;: [&quot;head&quot;, &quot;body&quot;, &quot;tail&quot;, &quot;data&quot;] },  { &quot;name&quot;: &quot;wire&quot;, &quot;wave&quot;: &quot;0.1..0.&quot; }]}Alternatively, it can read the json from a file:::.. wavedrom:: mywave.jsonWhen configured to generate images (see `Configuration`_) the directive will generate an image and includeit into the input. It allows for the same configuration as the image directive:::.. wavedrom:: mywave.json        :height: 100px        :width: 200 px        :scale: 50 %        :alt: alternate text        :align: rightThe image can be turned into a figure by adding a caption:::    .. wavedrom:: mywave.json        :caption: My wave figureThe extension can be configured (see `Configuration`_) to not generate an image out of the diagram descriptionitself, but to surround it with some html and js tags in the final html document that allow the images to be renderedby the browser. This is the currently the default for HTML output.Configuration-------------The following decision tree gives an overview of which configurations to make in different use cases:.. image:: configuration.png  :alt: Decision tree for configuration settingsThe extension can be configured to either directly output images or by emitting the javascript to live-render thewavedrom code, which obviously only works for HTML output. All other outputs (most notably ``latexpdf``) embed agenerated image in any case, but this is only supported when using Python 3.Depending on the output you're building, the plugin will automatically choose the appropriate image rendering method(HTML defaults to browser rendering, pdf to build-time image generation). You can force the generation of build-timeimages by adding the following configuration to your ``conf.py``:::    wavedrom_html_jsinline = FalseThis may be interesting in case you are building for various output targets and want to ensure consistent diagramsbetween all output formatsBuild-time image generation through wavedrompy or wavedrom-cli``````````````````````````````````````````````````````````````2 Tools are available for the build-time generation of images:- `wavedrom-cli &lt;https://github.com/wavedrom/cli&gt;`_: The default builder. This is the tool maintained by the wavedrom  team itself. More bloaty than wavedrompy as it requires node.js and npm to install and use, but more likely to render  consistent images w.r.t. the browser-rendered version.- `wavedrompy &lt;https://github.com/wallento/wavedrompy&gt;`_: A python &quot;clone&quot; of wavedrompy. The goal of the project is to  stay as close as possible to the JS implementation, but offer a solution that doesn't require node.js or npm to be  installed.As mentioned, wavedrom-cli is the default builder. If you want to select wavedrompy instead, add``render_using_wavedrompy = True`` to your ``conf.py``:Wavedrompy is imported as a python module and requires no further configuration. Wavedrom-cli is executed using systemcalls. The default command is `npx wavedrom-cli`, but this can be overwritten using the ``wavedrom_cli`` configurationparameter in `conf.py`Browser-rendered images through inline Javascript`````````````````````````````````````````````````When HTML building is configured to inline the javascript (default), the extension can work in 2 modes:- Online mode: the extension links to the javascript file(s) hosted on the wavedrom server or your own server- Offline mode: the extension uses the javascript file(s) that are saved locally on your drive.The online mode is the default one. In case you want to use the js files hosted on the wavedrom server, no configurationis needed. However, in case the desired JS files are hosted on a custom server (or on localhost) add the following toconf.py:- ``online_wavedrom_js_url`` : the url of the server hosting the javascript files. The plugin will look for 2 files:+ {online_wavedrom_js_url}/skins/default.js+ {online_wavedrom_js_url}/wavedrom.min.js**Warning**: A full URI is needed when configuring. &quot;http://www.google.com&quot; will work but &quot;www.google.com&quot; won't.If offline mode is desired, the following configuration parameters need to be provided:- ``offline_skin_js_path`` : the path to the skin javascript file (the url to the online version is &quot;https://wavedrom.com/skins/default.js&quot;)- ``offline_wavedrom_js_path`` : the path to the wavedrom javascript file (the url to the online version is &quot;https://wavedrom.com/wavedrom.min.js&quot;)The paths given for these configurations need to be relative to the configuration directory (the directory that contains conf.py)Examples--------In the `example` folder, you can find a couple of examples (taken from the wavedrom tutorial), illustration the use of the extension.</longdescription>
</pkgmetadata>