<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ssm-starter===========|PyPI version|Loads AWS SSM Parameter Store parameters into local system environmentvariables and then executes your application so it has access to thoseenvironment variables.This was inspired by the Twelve-Factor App principle `Store config inthe environment &lt;https://12factor.net/config&gt;`__.The intended use case is to be used as the ENTRYPOINT to Dockercontainers which run in AWS where the application gets its configurationfrom SSM and stores it in the environment, then starts the application,which can reference these values through the environment.Installation------------.. code:: shell    pip install ssm-starterUsage-----SSM-Starter is installed as a command line utility and can be run as:.. code:: shell    ssm-starter --ssm-name /dev/my-app/ --command /bin/bash run-app.shRegarding format of ssm-name and pathing, note that all of the followingare equivalent:.. code:: shell    ssm-starter --ssm-name /dev/my-app --command /bin/bash run-app.sh    ssm-starter --ssm-name /dev/my-app/ --command /bin/bash run-app.sh    AWS_ENV=dev ssm-starter --ssm-name my-app --command /bin/bash run-app.shExample-------Let's say you have the following three AWS SSM Parameters and theirvalues.+------------+----------+| SSM Path   | Value    |+============+==========+| /dev/my-ap | abc123   || p/MYAPP\_T |          || EST\_VAR   |          |+------------+----------+| /dev/my-ap | Server=m || p/MYAPP\_D | yserver; || B\_CONN\_S | Database || TRING      | =mydb;Ui ||            | d=myuid; ||            | Pwd=secr ||            | et;      |+------------+----------+| /dev/my-ap | xyz789   || p/MYAPP\_T |          || EST\_TWO   |          |+------------+----------+Running ssm-starter with the ssm-name &quot;my-app&quot; and environment variableAWS\_ENV set to &quot;dev&quot; result in the following:.. code:: shell      $ export AWS_REGION=us-east-1      $ export AWS_ENV=dev      $ ssm-starter --ssm-name my-app --command /bin/bash run-app.sh      Reading parameters from SSM path: /dev/my-app/      Read 3 parameters from SSM      MYAPP_TEST_VAR - setting value from ssm: abc123      MYAPP_DB_CONN_STRING - setting value from ssm (SecureString, 51 chars)      MYAPP_TEST_TWO already in environment      /bin/bash run-app.shAfter this runs these variables are in the environment and accessible tothe application. Notice that if the SSM parameter was stored as aSecureString, the value is not echoed to stdout, and that if anenvironment variable already exists with that name, it is notoverwritten. So if an environment variable is directly passed into thecontainer through &quot;docker run -e&quot; or given to it by an orchestrator suchas if it is defined in the task definition for ECS, that will takeprecidence.Arguments---------``--ssm-name`` The name prefix of your application. If you have anenvironment variable AWS\_ENV present, it will additionally prefix thiswith that. Multiple ``--ssm-name`` arguments can be provided in whichcase SSM starter will read all parameters from each SSM path provided.``--command`` The command to execute after loading the SSM variablesinto the environment. The command does not need to be enclosed in quotesbut *this should be the last argument as all arguments after this areassumed to be part of the command to execute*.``--abort-if-duplicates`` This optional argument will instruct SSMStarter to abort (non-zero exit code) if any duplicate parameter namesare found. This would only occur if multiple ``--ssm-name`` argumentsare provided. The default behavior is to skip any encounteredduplicates, which also logs a warning message.``--overwrite-if-duplicates`` This optional argument will instruct SSMStarter to overwrite if any duplicate parameter names are found, so thelast parameter &quot;wins&quot;. This would only occur if multiple ``--ssm-name``arguments are provided. The default behavior is to skip any encounteredduplicates, which also logs a warning message.``AWS_ENV`` (environment variable) If present, this will be prefixedbefore the supplied ssm-name. If you have a separate AWS accounts foreach environment, you will not need this. If however you are sharing asingle AWS account for multiple environments (dev, stage, prod, etc)then this provides a way to partition the SSM variables.``AWS_REGION`` (environment variable) The AWS\_REGION environmentvariable is expected to be present. Region is set by this environmentvariable rather than though an argument to ssm-starter so that the sameconfiguration can be promoted to multiple environments that may be indifferent regions. If only AWS\_REGION is set, ssm-starter will also setAWS\_DEFAULT\_REGION to the same value. If both are set and in conflict,ssm-starter will set both to the value in AWS\_REGION.Build and test locally----------------------.. code:: shell    docker build -t billtrust/ssm-starter:build -f Dockerfile.buildenv .    pip install iam-docker-run --user    # specify a valid IAM role name which has full permissions to SSM    export IAM_ROLE_NAME=&quot;role-ops-developers&quot;    # specify a local AWS profile name which has access to assume the above IAM role    export AWS_PROFILE_NAME=&quot;dev&quot;    # this executes the integration test using python scripttest in the context of    # the specified IAM role which has access to SSM    iam-docker-run \      --image billtrust/ssm-starter:build \      --aws-role-name $IAM_ROLE_NAME \      --profile $AWS_PROFILE_NAME \      --host-source-path . \      --full-entrypoint &quot;make test&quot;Publishing Updates to PyPi--------------------------For the maintainer - to publish an updated version of ssm-search,increment the version number in version.py and run the following:.. code:: shell    docker build -f ./Dockerfile.buildenv -t billtrust/ssm-starter:build .    docker run --rm -it --entrypoint make billtrust/ssm-starter:build publishAt the prompts, enter the username and password to the Billtrustpypi.org repo.License-------MIT LicenseCopyright (c) 2018 Factor Systems Inc.Permission is hereby granted, free of charge, to any person obtaining acopy of this software and associated documentation files (the&quot;Software&quot;), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions:The above copyright notice and this permission notice shall be includedin all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESSOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANYCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE... |PyPI version| image:: https://badge.fury.io/py/ssm-starter.svg   :target: https://badge.fury.io/py/ssm-starter</longdescription>
</pkgmetadata>