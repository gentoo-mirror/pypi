<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======begins======--------Overview--------Command line programs for *lazy* humans.* Decorate a function to be your programs starting point.* Generate command line parser based on function signature.* Search system environment for option default values.|pypi_version| |build_status| |coverage|-----------Why begins?-----------I write a lot ofsmall programs in `Python`_.These programs oftenaccept a small number ofsimple command line arguments.Having to writecommand line parsing codein each of thesesmall programs bothbreaks my train of thoughtand greatly increases thevolume of code I am writting.Begins was implemented toremove the boilerplate codefrom these Python programs.It's not intended to replacethe rich command line processingneeded for larger applications.------------Requirements------------For Python versions earlierthan Python 3.3,the `funcsigs`_ package from the`Python Package Index`_ isrequired.For Python version 2.6,the `argparse`_ package from the`Python Package Index`_ isalso required.Both of these dependencies arelisted in the package configuration.If using `Pip`_ toinstall *begins* thenthe required dependencies willbe automatically installed.------------Installation------------*begins* is availablefor download fromthe `Python Package Index`_.To install using `Pip`_ ::$ pip install beginsAlternatively, the latestdevelopment version can beinstalled directlyfrom `Github`_. ::$ pip install git+https://github.com/aliles/begins.gitPlease note that*begins* is still inan alpha state and thereforethe API or behaviourcould change.---------------------------------Setting a programs starting point---------------------------------The ``begin.start()`` function can beused as a function callor a decorator.If called as a functionit returns ``True`` whencalled from the ``__main__`` module.To do this it inspectsthe stack frame of the caller,checking the ``__name__`` global.This allows the following Python pattern::    &gt;&gt;&gt; if __name__ == '__main__':    ...     passTo be replace with::    &gt;&gt;&gt; import begin    &gt;&gt;&gt; if begin.start():    ...    passIf used as a decoratorto annotate a functionthe function will be calledif defined in the ``__main__`` moduleas determined by inspectingthe current stack frame.Any definitions that followthe decorated functionwont be created untilafter the function callis complete.Usage of ``begin.start()`` asa decorator looks like::    &gt;&gt;&gt; import begin    &gt;&gt;&gt; @begin.start    ... def run():    ...     passBy deferring the executionof the function until afterthe remainder of the module has loadedensures the main function doesn't failif depending on somethingdefined in later code.----------------------------Parsing command line options----------------------------If ``begin.start()`` decorates afunction accepts parameters``begin.start()`` willprocess the command foroptions to pass asthose parameters::    &gt;&gt;&gt; import begin    &gt;&gt;&gt; @begin.start    ... def run(name='Arther', quest='Holy Grail', colour='blue', *knights):    ...     &quot;tis but a scratch!&quot;The decorated function abovewill generate the followingcommand line help::   usage: example.py [-h] [-n NAME] [-q QUEST] [-c COLOUR]                     [knights [knights ...]]   tis but a scratch!   positional arguments:     knights   optional arguments:     -h, --help            show this help message and exit     -n NAME, --name NAME  (default: Arther)     -q QUEST, --quest QUEST                           (default: Holy Grail)     -c COLOUR, --colour COLOUR                           (default: blue)In Python3, any `function annotations`_for a parameter becomethe command line option help.For example::    &gt;&gt;&gt; import begin    &gt;&gt;&gt; @begin.start                                         # doctest: +SKIP    ... def run(name: 'What, is your name?',    ...         quest: 'What, is your quest?',    ...         colour: 'What, is your favourite colour?'):    ...     passWill generate command help like::   usage: holygrail_py3.py [-h] -n NAME -q QUEST -c COLOUR   optional arguments:     -h, --help            show this help message and exit     -n NAME, --name NAME  What, is your name?     -q QUEST, --quest QUEST                           What, is your quest?     -c COLOUR, --colour COLOUR                           What, is your favourite colour?Command line parsing supports:* positional arguments* keyword arguments* default values* variable length arguments* annotationsCommand line parsingdoes not supportvariable length keyword arguments,commonly written as``**kwargs``.If variable length keyword argumentsare used bythe decorated functionan exceptionwill be raised.If a parameterdoes not have a default,failing to pass a valueon the command linewill cause running the program toprint an error and exit.For programs that havea large number of optionsit may be preferable toonly use long options.To suppress short options,pass ``False`` as the``short_args`` keyword argument tothe ``begin.start`` decorator::    &gt;&gt;&gt; import begin    &gt;&gt;&gt; @begin.start(short_args=False)    ... def run(name='Arther', quest='Holy Grail', colour='blue', *knights):    ...     &quot;tis but a scratch!&quot;This program will notaccept ``-n``, ``-q`` or ``-c``as option names.Similarity, a large number ofcommand line options maybe better displayed inalphabetical order.This can be achievedby passing ``lexical_order``as ``True``::    &gt;&gt;&gt; import begin    &gt;&gt;&gt; @begin.start(lexical_order=True)    ... def main(charlie=3, alpha=1, beta=2):    ...     passThis program will listthe command line options as``alpha``, ``beta``, ``charlie``instead of the orderin which the functionaccepts them.---------------Further Reading---------------A walk-through tutorial,the remainder of this guideand API documentation canare all part of theofficial *begins* documentationhosted on `Read The Docs`_.------Issues------Any bug reports orfeature requests canbe made using GitHub' `issues system`_... _Github: https://github.com/aliles/begins.. _Read The Docs: http://begins.readthedocs.org.. _Python: http://python.org.. _Python Package Index: https://pypi.python.org/pypi.. _Pip: http://www.pip-installer.org.. _argparse: https://pypi.python.org/pypi/argparse.. _issues system: https://github.com/aliles/begins/issues.. _funcsigs: https://pypi.python.org/pypi/funcsigs.. _function annotations: http://www.python.org/dev/peps/pep-3107/.. |build_status| image:: https://secure.travis-ci.org/aliles/begins.png?branch=master   :target: https://travis-ci.org/aliles/begins   :alt: Current build status.. |coverage| image:: https://coveralls.io/repos/aliles/begins/badge.png?branch=master   :target: https://coveralls.io/r/aliles/begins?branch=master   :alt: Latest PyPI version.. |pypi_version| image:: https://pypip.in/v/begins/badge.png   :target: https://crate.io/packages/begins/   :alt: Latest PyPI version</longdescription>
</pkgmetadata>