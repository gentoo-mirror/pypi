<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;&lt;i&gt;✨ pybitset ✨ &lt;/i&gt;&lt;/h1&gt;&lt;h3 align=&quot;center&quot;&gt;The python binding for &lt;a href=&quot;https://github.com/lemire/cbitset&quot;&gt;cbitset&lt;/a&gt;&lt;/h3&gt;[![pypi](https://img.shields.io/pypi/v/pybitset.svg)](https://pypi.org/project/pybitset/)![python](https://img.shields.io/pypi/pyversions/pybitset)![implementation](https://img.shields.io/pypi/implementation/pybitset)![wheel](https://img.shields.io/pypi/wheel/pybitset)![license](https://img.shields.io/github/license/synodriver/pybitset.svg)![action](https://img.shields.io/github/workflow/status/synodriver/pybitset/build%20wheel)### install```bashpip install pybitset```### Usage```pythonfrom pybitset import BitSetb= BitSet()for i in range(1000):    b.set(3*i)for v in b:    print(v)```- use ```BITSET_USE_CFFI``` env var to specify a backend### Public functions```pythonclass BitSet:    def __init__(self) -&gt; None: ...    def __del__(self) -&gt; None: ...    @staticmethod    def from_ptr(ptr) -&gt; BitSet: ...    def clear(self) -&gt; None: ...    def fill(self) -&gt; None: ...    def copy(self) -&gt; BitSet: ...    def resize(self, newarraysize: int, padwithzeroes: bool) -&gt; bool: ...    def size_in_bytes(self) -&gt; int: ...    def size_in_bits(self) -&gt; int: ...    def size_in_words(self) -&gt; int: ...    def grow(self, newarraysize: int) -&gt; bool: ...    def trim(self) -&gt; bool: ...    def shift_left(self, s: int) -&gt; None: ...    def shift_right(self, s: int) -&gt; None: ...    def set(self, i: int) -&gt; None: ...    def set_to_value(self, i: int, flag: bool) -&gt; None: ...    def get(self, i: int) -&gt; bool: ...    def count(self) -&gt; int: ...    def minimum(self) -&gt; int: ...    def maximum(self) -&gt; int: ...    def inplace_union(self, b2: BitSet) -&gt; bool: ...    def union_count(self, b2: BitSet) -&gt; int: ...    def inplace_intersection(self, b2: BitSet): ...    def intersection_count(self, b2: BitSet) -&gt; int: ...    def disjoint(self, b2: BitSet) -&gt; bool: ...    def intersect(self, b2: BitSet) -&gt; bool: ...    def contains_all(self, b2: BitSet) -&gt; bool: ...    def inplace_difference(self, b2: BitSet) -&gt; None: ...    def difference_count(self, b2: BitSet) -&gt; int: ...    def inplace_symmetric_difference(self, b2: BitSet) -&gt; bool: ...    def symmetric_difference_count(self, b2: BitSet) -&gt; int: ...    def __iter__(self): ...    def for_each(self, func) -&gt; bool: ...    def print(self) -&gt; None: ...```</longdescription>
</pkgmetadata>