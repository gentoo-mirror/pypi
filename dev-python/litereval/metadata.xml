<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># litereval`litereval` is wrapper around `ast.literal_eval` with new additional `{foo='bar', key=None}` `dict` syntax.Plus some helper tools to deep merge dictionaries, parse `ast.literal_eval` python data to `*args` and `**kwargs`.Can be used to create wrapper command line interfaces. See [pyppdf](https://github.com/kiwi0fruit/pyppdf).# InstallNeeds python 3.6+```bashconda install -c defaults -c conda-forge litereval```or```bashpip install litereval```# API### litereval```pydef litereval(string: str):    &quot;&quot;&quot;    Small extension of ``ast.literal_eval`` that also    accepts dict in a form of ``{key=100, foo='bar'}``    Returns    -------    ret :        ast.literal_eval(preprocess(string))    &quot;&quot;&quot;```### merge```pydef merge(source: dict, destination: dict,          copy: bool = False) -&gt; dict:    &quot;&quot;&quot;    Deep merge two dictionaries.    Overwrites in case of conflicts.    From https://stackoverflow.com/a/20666342    &quot;&quot;&quot;```### args_kwargs```pydef args_kwargs(args: Any) -&gt; Tuple[    Union[tuple, None], Union[dict, None]]:    &quot;&quot;&quot;    Parses ``args`` object to ``(*args, **kwargs)`` tuple.    Special case when ``args`` is ``None``: returns ``(None, None)``.    Otherwise tries to put not iterable object to tuple:    ``args`` to ``(args,)``. Examples:    * ``(1, 2)`` to ``(1, 2), {}``    * ``&quot;foo&quot;`` to ``(&quot;foo&quot;,), {}``    * ``{(): ('a', 0), 'foo': None} to      ``('a', 0), {'foo': None}``    Returns    -------    ret :        tuple: *args, **kwargs    &quot;&quot;&quot;```### get_args```pydef get_args(name: str, args, default=None) -&gt; Args:    &quot;&quot;&quot;    Gets ``*args`` and ``**kwargs`` for a ``name`` function    from an ``args`` dict. Wrapper around ``args_kwargs`` function.    Returns ``NamedTuple`` ``Args``: ``(args: tuple, kwargs: dict)``    &quot;&quot;&quot;```### get```pydef get(key: str, dic, default=None):    &quot;&quot;&quot;Gets key even from not a dictionary.&quot;&quot;&quot;```### tuple\_```pydef tuple_(obj: Any) -&gt; tuple:    &quot;&quot;&quot;Converts any object to tuple. ``string`` to ``(string,)``.&quot;&quot;&quot;```### validated```pydef validated(args: tuple, kwargs: dict) -&gt; Tuple[tuple, dict]:    &quot;&quot;&quot;Validates inputs and returns ``*args, **kwargs``.&quot;&quot;&quot;```</longdescription>
</pkgmetadata>