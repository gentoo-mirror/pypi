<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django sweet utils.[![Downloads](https://static.pepy.tech/personalized-badge/django-sweet-utils?period=total&amp;units=international_system&amp;left_color=black&amp;right_color=orange&amp;left_text=Downloads)](https://pepy.tech/project/django-sweet-utils)  A little django code sugar.  &gt; If you find this package useful, please star it on [GitHub](https://github.com/AllYouZombies/django-sweet-utils).  ## Quickstart1. Add `django_sweet_utils` to your `INSTALLED_APPS` setting like this:    ```    INSTALLED_APPS = [        ...        'django_sweet_utils',        ...    ]    ```2. Inherit your models from `django_sweet_utils.db.models.Model`:   ```   from django_sweet_utils.db.models import Model         class MyModel(Model):      ...   ```      From now your models has the following fields:      - `uuid4` as object id;      - `created_at` as object creation time;      - `updated_at` as object last update time;      - `is_deleted` as indicator that object is deleted or not;               Models that inherited from `django_sweet_utils.db.models.Model` can be filtered with simple `existing()` property:   ```   from django_sweet_utils.db.models import Model         class MyModel(Model):      ...         queryset = MyModel.objects.existing()   ```   This returns queryset filtered by `is_deleted=False`   Also, now you don't need to catch `DoesNotExist` error when attempting to get some object while it does not exist.   Just use `get_or_none()` instead of `get()` and query returns `None` if there is no object.## Features### Models#### Fake deletionYou can delete your objects without actual database deletion.Just use `delete()` method on your model instance and it will be marked as deleted with `is_deleted=True`:To perform actual deletion use `hard_delete()` method instead.#### UUID4 as object idEvery model instance has `uuid4` field as object id.#### Created and updated timeEvery model instance has `created_at` and `updated_at` fields as object creation and last update time.#### Existing objectsYou can get only existing objects with `existing()` property on your model manager.```pythonqueryset = MyModel.objects.existing()```#### Get or noneYou can get object or `None` if it does not exist with `get_or_none()` method on your model manager.```pythonobj = MyModel.objects.get_or_none(pk=1)```### API#### ViewsInherit your DRF API views from `django_sweet_utils.api.views`:    ```from django_sweet_utils.api.views import UpdateAPIView, DestroyAPIViewclass MyUpdateView(UpdateAPIView):   ...class MyDestroyView(DestroyAPIView):   ...```  #### PaginationThere is `PageNumberPagination` class that adds `page_size` query parameter to `PageNumberPagination` class.    ```pythonREST_FRAMEWORK = {   ...   'DEFAULT_PAGINATION_CLASS': 'django_sweet_utils.api.pagination.PageNumberPagination',   'PAGE_SIZE': 10,   ...}```  From now your views supports `POST` request method instead of `PATCH` and `DELETE`DestroyAPIView does not perform actual database deletion, but only marks file as deleted with `is_deleted=True`  ### Permissions#### There is `DjangoModelPermissions` class that adds `view` permission to `DjangoModelPermissions` class on `GET` request method.### AdminHard deletion action for admin panel.```pythonfrom django_sweet_utils.admin import hard_delete_selectedclass MyModelAdmin(admin.ModelAdmin):    actions = [hard_delete_selected]```### Seriliazers#### Prettier choice fieldYou can use custom `ChoiceField` instead of `ChoiceField` from `rest_framework` to get prettier choices representation in API.```pythonfrom django_sweet_utils.api.serializers import ChoiceFieldclass MySerializer(serializers.ModelSerializer):    my_field = ChoiceField(choices=MY_CHOICES)```#### Prettier multiple choice fieldYou can use custom `MultipleChoiceField` instead of `MultipleChoiceField` from `rest_framework` to get prettier choices representation in API.```pythonfrom django_sweet_utils.api.serializers import MultipleChoiceFieldclass MySerializer(serializers.ModelSerializer):    my_field = MultipleChoiceField(choices=MY_CHOICES)```### Template tags#### `format_string` template tagYou can use `format_string` template tag to format string with arguments.```html{% load django_sweet_utils %}{{ &quot;Hello, {0}!&quot;.format_string(&quot;World&quot;) }}```#### `set_query_string_param` template tagYou can use `set_query_string_param` template tag to set query string parameter.```html{% load django_sweet_utils %}{% set_query_string_param &quot;page&quot; 1 %}```More info about this tag you can find [here](django_sweet_utils/templatetags/query_string.py).### Logging#### Customised JSON formatterThere is `CustomisedJSONFormatter` class that formats log records as JSON.```pythonfrom django_sweet_utils.logging import CustomisedJSONFormatterAPP_LABEL = &quot;my_app&quot;ENVIRONMENT = &quot;production&quot;formatter = CustomisedJSONFormatter()```#### Customised JSON handlerThere is `CustomHandler` class that handles log records as JSON.```pythonfrom django_sweet_utils.logging import CustomHandlerhandler = CustomHandler()```### Misc#### Custom JSON encoderYou can use `LazyEncoder` to serialize lazy objects to JSON.```pythonfrom django_sweet_utils.misc import LazyEncoderjson.dumps({&quot;lazy&quot;: lazy_object}, cls=LazyEncoder)```</longdescription>
</pkgmetadata>