<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Asyncio zookeeper client (aiozk)[![PyPi version](https://img.shields.io/pypi/v/aiozk.svg)](https://pypi.python.org/pypi/aiozk)[![Build Status](https://img.shields.io/github/workflow/status/micro-fan/aiozk/master)](https://github.com/micro-fan/aiozk/actions)&lt;!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc --&gt;**Table of Contents**- [Asyncio zookeeper client (aiozk)](#asyncio-zookeeper-client-aiozk)    - [Status](#status)    - [Installation](#installation)    - [Quick Example](#quick-example)    - [Recipes](#recipes)        - [Caution](#caution)    - [Testing](#testing)        - [Run tests](#run-tests)        - [Testing approach](#testing-approach)        - [Recipes testing](#recipes-testing)        - [Run some tests directly](#run-some-tests-directly)    - [References](#references)&lt;!-- markdown-toc end --&gt;## StatusHave no major bugs in client/session/connection, but recipes need more testcode to become more robust.Any help and interest are welcome ðŸ˜€## Installation```bash$ pip install aiozk```## Quick Example```pythonimport asynciofrom aiozk import ZKClientasync def main():    zk = ZKClient('localhost')    await zk.start()    await zk.create('/foo', data=b'bazz', ephemeral=True)    assert b'bazz' == await zk.get_data('/foo')    await zk.close()asyncio.run(main())```## RecipesYou may use recipes, similar to zoonado, kazoo, and other libs:```python# assuming zk is aiozk.ZKClient# Lockasync with await zk.recipes.Lock('/path/to/lock').acquire():    # ... Do some stuff ...    pass# Barrierbarrier = zk.recipes.Barrier('/path/to/barrier)await barrier.create()await barrier.lift()await barrier.wait()# DoubleBarrierdouble_barrier = zk.recipes.DoubleBarrier('/path/to/double/barrier', min_participants=4)await double_barrier.enter(timeout=0.5)# ...  Do some stuff ...await double_barrier.leave(timeout=0.5)```You can find full list of recipes provided by aiozk here:[aiozk recipes](https://github.com/micro-fan/aiozk/tree/master/aiozk/recipes)To understand ideas behind recipes [please readthis](https://zookeeper.apache.org/doc/current/recipes.html) and [even morerecipes here](http://curator.apache.org/curator-recipes/index.html). Make sureyou're familiar with all recipes before doing something new by yourself,especially when it involves more than few zookeeper calls.### CautionDon't mix different type of recipes at the same znode path. For example,creating a Lock and a DoubleBarrier object at the same path. It may causeundefined behavior ðŸ˜“## Testing**NB**: please ensure that you're using recent `docker-compose` version. You can get it by running```pip install --user -U docker-compose```### Run tests```# you should have access to dockerdocker-compose build./test-runner.sh```Or you can run tests with tox```pip install --user tox tox-dockertox```### Testing approachMost of tests are integration tests and running on real zookeeper instances.We've chosen `zookeeper 3.5` version since it has an ability to dynamic reconfiguration and we're going to do all connecting/reconnecting/watches tests on zk docker cluster as this gives us the ability to restart any server and see what happens.```sh# first terminal: launch zookeeper clusterdocker-compose rm -fv &amp;&amp; docker-compose build zk &amp;&amp; docker-compose up --scale zk=7 zk_seed zk# it will launch cluster in this terminal and remain. last lines should be like this:zk_6       | Servers: 'server.1=172.23.0.9:2888:3888:participant;0.0.0.0:2181\nserver.2=172.23.0.2:2888:3888:participant;0.0.0.0:2181\nserver.3=172.23.0.3:2888:3888:participant;0.0.0.0:2181\nserver.4=172.23.0.4:2888:3888:participant;0.0.0.0:2181\nserver.5=172.23.0.5:2888:3888:participant;0.0.0.0:2181\nserver.6=172.23.0.7:2888:3888:participant;0.0.0.0:2181'zk_6       | CONFIG: server.1=172.23.0.9:2888:3888:participant;0.0.0.0:2181zk_6       | server.2=172.23.0.2:2888:3888:participant;0.0.0.0:2181zk_6       | server.3=172.23.0.3:2888:3888:participant;0.0.0.0:2181zk_6       | server.4=172.23.0.4:2888:3888:participant;0.0.0.0:2181zk_6       | server.5=172.23.0.5:2888:3888:participant;0.0.0.0:2181zk_6       | server.6=172.23.0.7:2888:3888:participant;0.0.0.0:2181zk_6       | server.7=172.23.0.6:2888:3888:observer;0.0.0.0:2181zk_6       |zk_6       |zk_6       | Reconfiguring...zk_6       | ethernal loopzk_7       | Servers: 'server.1=172.23.0.9:2888:3888:participant;0.0.0.0:2181\nserver.2=172.23.0.2:2888:3888:participant;0.0.0.0:2181\nserver.3=172.23.0.3:2888:3888:participant;0.0.0.0:2181\nserver.4=172.23.0.4:2888:3888:participant;0.0.0.0:2181\nserver.5=172.23.0.5:2888:3888:participant;0.0.0.0:2181\nserver.6=172.23.0.7:2888:3888:participant;0.0.0.0:2181\nserver.7=172.23.0.6:2888:3888:participant;0.0.0.0:2181'zk_7       | CONFIG: server.1=172.23.0.9:2888:3888:participant;0.0.0.0:2181zk_7       | server.2=172.23.0.2:2888:3888:participant;0.0.0.0:2181zk_7       | server.3=172.23.0.3:2888:3888:participant;0.0.0.0:2181zk_7       | server.4=172.23.0.4:2888:3888:participant;0.0.0.0:2181zk_7       | server.5=172.23.0.5:2888:3888:participant;0.0.0.0:2181zk_7       | server.6=172.23.0.7:2888:3888:participant;0.0.0.0:2181zk_7       | server.7=172.23.0.6:2888:3888:participant;0.0.0.0:2181zk_7       | server.8=172.23.0.8:2888:3888:observer;0.0.0.0:2181zk_7       |zk_7       |zk_7       | Reconfiguring...zk_7       | ethernal loop```Run tests in docker:```shdocker-compose run --no-deps aiozk# last lines will be about testing results............lot of lines ommited.........----------------------------------------------------------------------Ran 3 tests in 1.059sOK```Run tests locally:```sh# ZK_IP can be something from logs above, like: ZK_HOST=172.21.0.6:2181ZK_HOST=&lt;ZK_IP&gt; ./venv/bin/pytest```### Recipes testingIt seems that usually recipes require several things to be tested:* That recipe flow is working as expected* Timeouts: reproduce every timeout with meaningful values (timeout 0.5s and block for 0.6s)### Run some tests directlyAnother way to run tests only which you are interested in quickly. Or this isuseful when you run tests under the other version of python.```sh# Run zookeeper containerdocker run -p 2181:2181 zookeeper# Run pytest directly at the development source treeexport ZK_HOST=localhostpytest -s --log-cli-level=DEBUG aiozk/test/test_barrier.py```## References* It is based on [wglass/zoonado](https://github.com/wglass/zoonado/tree/master/zoonado) implementation</longdescription>
</pkgmetadata>