<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![](/media/banner.png)# arkivistArkivist is Python Dictionary wrapper for JSON files.Other behaviors are similar to native Python dictionaries, the tutorial below only covers add-on feature specific to Arkivist.## Official Release**Arkivist** can now be used on your Python projects through PyPi by running pip command on a Python-ready environment.`pip install arkivist --upgrade`Current version is 1.2.\*, but more updates are coming soon. Installing it will also install required packages including *requests*.This is compatible with Python 3.9+ and is already used in various personal projects.## Use-cases**1.** Need a lightweight data storage with zero application installations. **2.** The project is for personal or hobby with low number of users who simultaneously access the data storage. **3.** The project requires a data storage that has a fast learning curve due to resource or time constraints. ## Usage**1. Import Package**```pythonfrom arkivist import Arkivist```**2. Cast Python Dictionary to Arkivist object** Create a new file if not yet existing.```pythonmessage = Arkivist({&quot;hello&quot;: &quot;world&quot;})data = {&quot;a&quot;: &quot;Ant&quot;, &quot;b&quot;: &quot;Bug&quot;, &quot;c&quot;: &quot;Cat&quot;}animals = Arkivist(data, filepath=&quot;animals.json&quot;, mode=&quot;w+&quot;)```**3. Instantiate data from existing JSON file**&gt; By default, autosave is set to True. To optimize, set autosave to False and perform manual saving after completely performing operations.```pythonstorage = Arkivist(&quot;storage.json&quot;)```**4. Set JSON File indentation**```python# indent = 1, 2, 3, or 4storage = Arkivist(&quot;storage.json&quot;, indent=2)```**5. Customize sorting options**```pythonstorage = Arkivist(&quot;storage.json&quot;, autosort=True, reverse=False)```**6. Disable Autosave**```pythonstorage = Arkivist(&quot;storage.json&quot;, autosave=False)storage.save()storage.save(save_as=&quot;storage-copy.json&quot;)```**7. Add new entry**```pythonplaces= Arkivist(&quot;data/places.json&quot;)places.set(1, &quot;Sun&quot;)places.set(2, &quot;Earth&quot;)places.set(3, &quot;Moon&quot;)# native update formatpeople = Arkivist(&quot;data/people.json&quot;)people.update({&quot;juan&quot;: {&quot;name&quot;: &quot;Juan Dela Cruz&quot;}})people.update({&quot;maria&quot;: {&quot;name&quot;: &quot;Maria Dela Cruz&quot;}})```**8. Get dictionary object** Set to read mode only, show an error if file does not exists.```pythonplaces = Arkivist(&quot;data/places.json&quot;, mode=&quot;r&quot;)print(places.show())```**9. Generate JSON-compliant string**```pythonplaces = Arkivist(&quot;data/places.json&quot;)print(places.string())```**10. Clear dictionary data**```pythonplaces = Arkivist(&quot;data/places.json&quot;, autosave=False)places.reset()```**11. Replace all contents**```python# replace from a valid dictionarypeople = Arkivist(&quot;data/people.json&quot;)friends = {&quot;friend&quot;: {&quot;name&quot;: &quot;Friend&quot;}, &quot;enemy&quot;: {&quot;name&quot;: &quot;Enemy&quot;}}people.load(friends)# load from valid JSON stringanons = &quot;{\&quot;robot\&quot;: {\&quot;name\&quot;: \&quot;Robot\&quot;}, \&quot;ghost\&quot;: {\&quot;name\&quot;: \&quot;Ghost\&quot;}}&quot;people.load(anons)```**12. Check if empty or not**```python## do not save to filepeople = Arkivist(&quot;data/people.json&quot;).reset()print(&quot;Count:&quot;, people.count(), &quot;; Is empty: &quot;, people.is_empty())```**13. Flatten the nested dictionary**```pythonpeople = Arkivist(&quot;data/people.json&quot;)people.set(&quot;juan&quot;, {&quot;name&quot;: &quot;Juan Dela Cruz&quot;})people.set(&quot;maria&quot;, {&quot;name&quot;: &quot;Maria Dela Cruz&quot;})print(people.flatten())```**14. Fetch from a web API**```pythontodos = Arkivist() # autosave = False, data is only in memorytodos.fetch(&quot;https://jsonplaceholder.typicode.com/todos/1&quot;)print(todos.show())```**15. Get random key-value pair**```pythonnames = Arkivist(&quot;names.json&quot;).reset()names.set(&quot;abc&quot;, {&quot;name&quot;: &quot;Abc&quot;})names.set(&quot;dog&quot;, {&quot;name&quot;: &quot;Doggy&quot;})names.set(&quot;juan&quot;, {&quot;names&quot;: &quot;Juan&quot;})print(&quot;Random item:&quot;, names.random())```**16. Double check if expected key value is correct**```pythonnumbers = Arkivist(&quot;numbers.json&quot;).reset()numbers.set(&quot;one&quot;: 1)print(&quot;Doublecheck (1):&quot;, numbers.doublecheck(&quot;one&quot;, 1))print(&quot;Doublecheck (2):&quot;, numbers.doublecheck(&quot;one&quot;, 2))```**16. Perform shallow queries**```pythonnames = Arkivist(&quot;names.json&quot;)names.set(&quot;abc&quot;, {&quot;name&quot;: &quot;Abc&quot;})names.set(&quot;dog&quot;, {&quot;name&quot;: &quot;Doggy&quot;})names.set(&quot;juan&quot;, {&quot;name&quot;: &quot;Juan&quot;})# exact matchfor name, data in names.where(&quot;name&quot;, &quot;Abc&quot;).query():    print(name, data)# search containing the substringfor name, data in names.where(&quot;name&quot;, &quot;a&quot;, exact=False).query():    print(name, data)# search containing the substring, case sensitivity = Falsefor name, data in names.where(&quot;name&quot;, &quot;a&quot;, exact=False, sensitivity=False).query():    print(name, data)# search excluding the exact keywordfor name, data in names.where(&quot;name&quot;).exclude(&quot;Abc&quot;).query():    print(name, data)# search excluding the items containing the keywordfor name, data in names.where(&quot;name&quot;).exclude(&quot;a&quot;, exact=False).query():    print(name, data)# search excluding the items containing the keyword, case sensitivity = Falsefor name, data in names.where(&quot;name&quot;).exclude(&quot;A&quot;, exact=False, sensitivity=False).query():    print(name, data)```**17. Find child of parent**```pythonnames = Arkivist(&quot;names.json&quot;).reset()names.set(&quot;names&quot;, {})names.find(&quot;names&quot;).set(&quot;maria&quot;, 1)print(&quot;Maria:&quot;, names.find(&quot;names&quot;).get(&quot;maria&quot;, 0))print(&quot;Pedro:&quot;, names.find(&quot;names&quot;).get(&quot;pedro&quot;, 0))```**18. Append/Extend/Remove items in list**```pythontest = Arkivist(&quot;tests.json&quot;).reset()test.append_in(&quot;colors&quot;, &quot;red&quot;)test.append_in(&quot;colors&quot;, &quot;orange&quot;)test.append_in(&quot;colors&quot;, &quot;yellow&quot;)test.append_in(&quot;colors&quot;, (&quot;blue&quot;, &quot;green&quot;), unique=True, sort=True)test.remove_in(&quot;colors&quot;, &quot;yellow&quot;)test.remove_in(&quot;colors&quot;, (&quot;blue&quot;, &quot;purple&quot;))test.set(&quot;numbers&quot;, {})test.find(&quot;numbers&quot;).append_in(&quot;odd&quot;, 1)test.find(&quot;numbers&quot;).append_in(&quot;odd&quot;, (1, 3, 5, [7]))```**19. Encrypt JSON file**&gt; NOTE: Copy and securely store the auto-generated authetication file to maintain access to the JSON file. Otherwise, the actual data from the JSON file can no longer be accessed. Without the secure key, reading, writing, and decryption will not be allowed. If the authfile is invalid or not set, check for the filename of the auto-generated file and rename as needed and update the filename to your program source code to access the JSON file again.```python# Set the filename of the authentication fileweather = Arkivist(&quot;temp/encrypted.json&quot;, authfile=&quot;secret-key.txt&quot;)# To encrypt data, use the encrypt functionweather.encrypt()# Perform normal operations as neededweather.set(&quot;weather&quot;, {})weather.find(&quot;weather&quot;).set(&quot;2022-04-14&quot;, &quot;Cloudy&quot;)weather.find(&quot;weather&quot;).set(&quot;2022-04-15&quot;, &quot;Sunny&quot;)# to unencrypt, set to falseweather.encrypt(False)```## FuturesArkivist is an ongoing project and new features will be added in the future. In the future, it aims to add complex querying and also add a security layer to protect data from unauthorized access.## ConclusionArkivist allows you to build your Python apps with a lightweight data storage, this can come handy especially when you are doing personal and hobby projects that handles simple data.## Fun factArkivist is a play on the word Archive, which means a collection of historical documents or records. Arkivist is like your digital librarian that manages your important data for a lightweight and organized data storage.</longdescription>
</pkgmetadata>