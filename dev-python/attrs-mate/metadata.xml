<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://github.com/MacHu-GWU/attrs_mate-project/workflows/CI/badge.svg    :target: https://github.com/MacHu-GWU/attrs_mate-project/actions?query=workflow:CI.. image:: https://codecov.io/gh/MacHu-GWU/attrs_mate-project/branch/master/graph/badge.svg  :target: https://codecov.io/gh/MacHu-GWU/attrs_mate-project.. image:: https://img.shields.io/pypi/v/attrs_mate.svg    :target: https://pypi.python.org/pypi/attrs_mate.. image:: https://img.shields.io/pypi/l/attrs_mate.svg    :target: https://pypi.python.org/pypi/attrs_mate.. image:: https://img.shields.io/pypi/pyversions/attrs_mate.svg    :target: https://pypi.python.org/pypi/attrs_mate.. image:: https://img.shields.io/badge/STAR_Me_on_GitHub!--None.svg?style=social    :target: https://github.com/MacHu-GWU/attrs_mate-project------.. image:: https://img.shields.io/badge/Link-Document-orange.svg      :target: https://attrs_mate.readthedocs.io/index.html.. image:: https://img.shields.io/badge/Link-API-orange.svg      :target: https://attrs_mate.readthedocs.io/py-modindex.html.. image:: https://img.shields.io/badge/Link-Source_Code-blue.svg      :target: https://attrs_mate.readthedocs.io/py-modindex.html.. image:: https://img.shields.io/badge/Link-Install-blue.svg      :target: `install`_.. image:: https://img.shields.io/badge/Link-GitHub-blue.svg      :target: https://github.com/MacHu-GWU/attrs_mate-project.. image:: https://img.shields.io/badge/Link-Submit_Issue-blue.svg      :target: https://github.com/MacHu-GWU/attrs_mate-project/issues.. image:: https://img.shields.io/badge/Link-Request_Feature-blue.svg      :target: https://github.com/MacHu-GWU/attrs_mate-project/issues.. image:: https://img.shields.io/badge/Link-Download-blue.svg      :target: https://pypi.org/pypi/attrs_mate#filesWelcome to ``attrs_mate`` Documentation==============================================================================.. contents::    :class: this-will-duplicate-information-and-it-is-still-useful-here    :depth: 1    :local:`attrs &lt;https://www.attrs.org/en/stable/index.html&gt;`_ makes writing class a lot of more fun!``attrs_mate`` aims to bring more features to ``attrs``, less code, and better code pattern.Usage1: More Utility Methods------------------------------------------------------------------------------.. code-block:: python    from attrs_mate import attr, AttrsClass    @attr.s    class User(AttrsClass):        id = attr.ib()        name = attr.ib()    user = User(id=1, name=&quot;Alice&quot;)    user.keys() # [&quot;id&quot;, &quot;name&quot;]    user.values() # [1, &quot;Alice&quot;]    user.items() # [(&quot;id&quot;, 1), (&quot;name&quot;: &quot;Alice&quot;)]    user.to_dict() # {&quot;id&quot;: 1, &quot;name&quot;: &quot;Alice&quot;}    user.to_OrderedDict() # OrderedDict([(&quot;id&quot;, 1), (&quot;name&quot;: &quot;Alice&quot;)])Usage2: Allow attrs to construct complex object from dict data.------------------------------------------------------------------------------**Plus, this is an example of nesting schema**... code-block:: python    import attr    from attrs_mate import AttrsClass    @attr.s    class Profile(AttrsClass):        &quot;&quot;&quot;        firstname, lastname, ssn are generic data type field.        &quot;&quot;&quot;        firstname = AttrsClass.ib_str() # default String Validator        lastname = AttrsClass.ib_str()        ssn = AttrsClass.ib_str()    @attr.s    class Degree(AttrsClass):        name = AttrsClass.ib_str()        year = AttrsClass.ib_int() # default Integer Validator    @attr.s    class People(AttrsClass):        &quot;&quot;&quot;        - ``profile`` is nested field.        - ``degrees`` is collection type field.        &quot;&quot;&quot;        id = AttrsClass.ib_int()        profile = Profile.ib_nested() # default Nested Schema Validator and Converter        degrees = Degree.ib_list() # default Nested Schema Validator and Converter    &gt;&gt;&gt; people = People(        id=1,        profile=Profile(            firstname=&quot;David&quot;,            lastname=&quot;John&quot;,            ssn=&quot;123-45-6789&quot;,        ),        degrees=[            Degree(name=&quot;Bachelor&quot;, year=2004),            Degree(name=&quot;Master&quot;, year=2006),        ],    )    &gt;&gt;&gt; people_data = people.to_dict()    &gt;&gt;&gt; people_data    {        'id': 1,        'profile': {            'lastname': 'John', 'ssn': '123-45-6789', 'firstname': 'David'        },        'degrees': [            {'name': 'Bachelor', 'year': 2004},            {'name': 'Master', 'year': 2006}        ]    }    &gt;&gt;&gt; people = People.from_dict(people_data)    &gt;&gt;&gt; people    People(id=1, profile=Profile(firstname='David', lastname='John', ssn='123-45-6789'), degrees=[Degree(name='Bachelor', year=2004), Degree(name='Master', year=2006)])Or you can just pass nested schema in dictionary, it works the same:.. code-block:: python    &gt;&gt;&gt; people = People(        id=1,        profile=dict(            firstname=&quot;David&quot;,            lastname=&quot;John&quot;,            ssn=&quot;123-45-6789&quot;,        ),        degrees=[            dict(name=&quot;Bachelor&quot;, year=2004),            dict(name=&quot;Master&quot;, year=2006),        ],    )Usage3: Cached Instance and Property Attribute------------------------------------------------------------------------------.. code-block:: python    from attrs_mate import attr, LazyClass    @attr.s    class User(LazyClass): # instance are cached        id = attr.ib()        lastname = attr.ib()        firstname = attr.ib()        uuid_called_count = attr.ib(default=0)        fullname_called_count = attr.ib(default=0)        @LazyClass.lazyproperty        def uuid(self):            self.uuid_called_count += 1            return self.id        @LazyClass.lazyproperty        def fullname(self): # property method are cached            self.fullname_called_count += 1            return &quot;{} {}&quot;.format(self.lastname, self.firstname)    &gt;&gt;&gt; user1 = User.lazymake(id=1, lastname=&quot;David&quot;, firstname=&quot;John&quot;)    &gt;&gt;&gt; user1.fullname_called_count    0 # initially, fullname never been called    &gt;&gt;&gt; user1.fullname    David John    &gt;&gt;&gt; user1.fullname_called_count    1 # called once    &gt;&gt;&gt; user1.fullname    David John    &gt;&gt;&gt; user1.fullname_called_count    1 # User.fullname() not been called    # use factory method to create new instance    &gt;&gt;&gt; user2 = User.lazymake(id=1, lastname=&quot;David&quot;, firstname=&quot;Kim&quot;)    &gt;&gt;&gt; id(user1) == id(user2)    True # since    &gt;&gt;&gt; user2.firstname == &quot;John&quot;    True    &gt;&gt;&gt; user2.fullname_called_count    1 # already been called once, because it is actually user1.. _install:Install------------------------------------------------------------------------------``attrs_mate`` is released on PyPI, so all you need is:.. code-block:: console    $ pip install attrs_mateTo upgrade to latest version:.. code-block:: console    $ pip install --upgrade attrs_mate</longdescription>
</pkgmetadata>