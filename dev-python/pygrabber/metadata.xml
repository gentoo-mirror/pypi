<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python_grabberThis is a Python library that enables you to use video cameras from Python on Windows. It is based on DirectShow.In particular, it allows to: * Capture photos from a video camera * View installed cameras on a system * Set the camera options * Save a vide captured from a cameraThe library is available on PyPI: https://pypi.org/project/pygrabber/0.1/## Basic example```python# This code lists the cameras connected to your PC:from pygrabber.dshow_graph import FilterGraphgraph = FilterGraph()print(graph.get_input_devices())```## Save images example```python# Captures a frame from the first camera found on your computer every second and saves it to a fileimport cv2from datetime              import datetimefrom threading             import Event, Threadfrom pygrabber.dshow_graph import FilterGraphfrom os                    import pathPAUSE_BETWEEN_CAPTURE = 1  # 1 sec.OUTPUT_FOLDER         = r&quot;C:\test\\&quot;CAMERA_INDEX          = 0 # Using first camera foundglobal start_timedef capture_photos_loop(event_):    global start_time    start_time = datetime.now()    while not event_.isSet():        graph.grab_frame()        event_.wait(PAUSE_BETWEEN_CAPTURE)def show_image(image):    global start_time    capture_time = datetime.now() - start_time    image_file_name = path.join(OUTPUT_FOLDER, str(capture_time.seconds * 1000 + int(capture_time.microseconds / 1000)) + &quot;.jpg&quot;)    cv2.imwrite(image_file_name, image)    print(f&quot;Image {image_file_name} written&quot;)if __name__ == &quot;__main__&quot;:    event          = Event()    capture_thread = Thread(target=capture_photos_loop, args=(event, ))    graph          = FilterGraph()    devices        = graph.get_input_devices()    print(f&quot;Connecting to device {devices[CAMERA_INDEX]}&quot;)    graph.add_video_input_device(CAMERA_INDEX)    graph.add_sample_grabber(lambda image: show_image(image))    graph.add_null_render()    graph.prepare_preview_graph()    graph.run()    capture_thread.start()    input(f&quot;Capturing images every {PAUSE_BETWEEN_CAPTURE}s, press ENTER to terminate.&quot;)    event.set()    capture_thread.join()    print(&quot;Done&quot;)```## View live video example```python# This code shows a screen with the live image from the first camera in your PC.# We add to the graph two filters: one is a source filter corresponding to the first camera connected to your PC,# the second is the default render, that shows the images from the camera in a window on the screen.# Then we call prepare, that connects the two filters together, and run, to execute the graph.# Finally, we need a method to pause the program while watching the camera video.# I use the Tkinter mainloop function which fetches and handles Windows events, so the application does't seem frozen.from pygrabber.dshow_graph import FilterGraphfrom tkinter               import Tkgraph = FilterGraph()graph.add_video_input_device(0)graph.add_default_render()graph.prepare_preview_graph()graph.run()root = Tk()root.withdraw() # hide Tkinter main windowroot.mainloop()```See also the other examples on the &quot;examples&quot; folder and the article https://www.codeproject.com/Articles/1274094/%2FArticles%2F1274094%2FCapturing-images-from-camera-using-Python-and-Dire.## Sample GUI applicationThe file run_gui.py will run a tool with a GUI that enables you to use a camera connected to your system, capture still frames or videos, do basic image porcessing. </longdescription>
</pkgmetadata>