<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-permission2==========================.. image:: https://img.shields.io/pypi/v/django-permission2.svg?style=flat-square    :target: https://github.com/janmalte/django-permission2/blob/master/setup.py    :alt: Version.. image:: https://img.shields.io/pypi/l/django-permission2.svg?style=flat-square    :target: https://github.com/janmalte/django-permission2/blob/master/LICENSE    :alt: License.. image:: https://img.shields.io/pypi/format/django-permission2.svg?style=flat-square    :target: https://pypi.python.org/pypi/django-permission2/    :alt: Format.. image:: https://img.shields.io/pypi/pyversions/django-permission2.svg?style=flat-square    :target: https://pypi.python.org/pypi/django-permission2/    :alt: Supported python versions.. image:: https://img.shields.io/pypi/status/django-permission2.svg?style=flat-square    :target: https://pypi.python.org/pypi/django-permission2/    :alt: Status.. image:: https://readthedocs.org/projects/django-permission2/badge/?version=latest    :target: https://django-permission2.readthedocs.io/en/latest/?badge=latest    :alt: Documentation StatusAuthor    Malte Gerth &lt;mail@malte-gerth.de&gt;Original Author    Alisue &lt;lambdalisue@hashnote.net&gt;Supported python versions    Python 3.7, 3.8, 3.9Supported django versions    Django 2.2, 3.2, 4.0, 4.1An enhanced permission library which enables a *logic-based permission system*to handle complex permissions in Django.Documentation-------------http://django-permission2.readthedocs.org/en/latest/Installation------------Use pip_ like::    $ pip install django-permission2.. _pip:  https://pypi.python.org/pypi/pipUsage-----The following might help you to understand as well.- Basic strategy or so on, `Issue #28 &lt;https://github.com/jazzband/django-permission/issues/28&gt;`_- Advanced usage and examples, `Issue #26 &lt;https://github.com/jazzband/django-permission/issues/26&gt;`_Configuration~~~~~~~~~~~~~1.  Add ``permission`` to the ``INSTALLED_APPS`` in your settings    module    .. code:: python        INSTALLED_APPS = (            # ...            'permission',        )2.  Add our extra authorization/authentication backend    .. code:: python        AUTHENTICATION_BACKENDS = (            'django.contrib.auth.backends.ModelBackend', # default            'permission.backends.PermissionBackend',        )3.  Follow the instructions below to apply logical permissions to django modelsAutodiscovery~~~~~~~~~~~~~Like django's admin package, django-permission2 automatically discovers the ``perms.py`` in your application directory **by running ``permission.autodiscover()``**.Additionally, if the ``perms.py`` module has a ``PERMISSION_LOGICS`` variable, django-permission2 automatically run the following functions to apply the permission logics... code:: python    for model, permission_logic_instance in PERMISSION_LOGICS:        if isinstance(model, str):            model = get_model(*model.split(&quot;.&quot;, 1))        add_permission_logic(model, permission_logic_instance).. note::    Autodiscover feature is automatically called if you are using django higher than 1.7 so no need to follow the tutorial below.    To disable, use `PERMISSION_AUTODISCOVER_ENABLE` setting.**Quick tutorial**1.  Add ``import permission; permission.autodiscover()`` to your ``urls.py`` like:    .. code:: python        from django.conf.urls import patterns, include, url        from django.contrib import admin        admin.autodiscover()        # add this line        import permission; permission.autodiscover()        urlpatterns = patterns('',            url(r'^admin/', include(admin.site.urls)),            # ...        )2.  Write ``perms.py`` in your application directory like:    .. code:: python        from permission.logics import AuthorPermissionLogic        from permission.logics import CollaboratorsPermissionLogic        PERMISSION_LOGICS = (            ('your_app.Article', AuthorPermissionLogic()),            ('your_app.Article', CollaboratorsPermissionLogic()),        )You can specify a different module or variable name, with ``PERMISSION_AUTODISCOVER_MODULE_NAME`` or ``PERMISSION_AUTODISCOVER_VARIABLE_NAME`` respectively.Apply permission logic~~~~~~~~~~~~~~~~~~~~~~~~~Let's assume you wrote an article model which has an ``author`` attribute to store the creator of the article, and you want to give that author full control permissions(e.g. add, change and delete permissions).What you need to do is just applying ``permission.logics.AuthorPermissionLogic``to the ``Article`` model like.. code:: python    from django.db import models    from django.contrib.auth.models import User    class Article(models.Model):        title = models.CharField('title', max_length=120)        body = models.TextField('body')        author = models.ForeignKey(User)        # this is just required for easy explanation        class Meta:            app_label='permission'    # apply AuthorPermissionLogic    from permission import add_permission_logic    from permission.logics import AuthorPermissionLogic    add_permission_logic(Article, AuthorPermissionLogic()).. note::    You can specify related object with `field__name` attribute like    `django queryset lookup &lt;https://docs.djangoproject.com/en/1.10/topics/db/queries/#field-lookups&gt;`_.    See the working example below:.. code:: python    from django.db import models    from django.contrib.auth.models import User    class Article(models.Model):        title = models.CharField('title', max_length=120)        body = models.TextField('body')        project = models.ForeignKey('permission.Project')        # this is just required for easy explanation        class Meta:            app_label='permission'    class Project(models.Model):        title = models.CharField('title', max_length=120)        body = models.TextField('body')        author = models.ForeignKey(User)        # this is just required for easy explanation        class Meta:            app_label='permission'    # apply AuthorPermissionLogic to Article    from permission import add_permission_logic    from permission.logics import AuthorPermissionLogic    add_permission_logic(Article, AuthorPermissionLogic(        field_name='project__author',    ))That's it.Now the following codes will work as expected:.. code:: python    user1 = User.objects.create_user(        username='john',        email='john@test.com',        password='password',    )    user2 = User.objects.create_user(        username='alice',        email='alice@test.com',        password='password',    )    art1 = Article.objects.create(        title=&quot;Article 1&quot;,        body=&quot;foobar hogehoge&quot;,        author=user1    )    art2 = Article.objects.create(        title=&quot;Article 2&quot;,        body=&quot;foobar hogehoge&quot;,        author=user2    )    # You have to apply 'permission.add_article' to users manually because it    # is not an object permission.    from permission.utils.permissions import perm_to_permission    user1.user_permissions.add(perm_to_permission('permission.add_article'))    assert user1.has_perm('permission.add_article') == True    assert user1.has_perm('permission.change_article') == False    assert user1.has_perm('permission.change_article', art1) == True    assert user1.has_perm('permission.change_article', art2) == False    assert user2.has_perm('permission.add_article') == False    assert user2.has_perm('permission.delete_article') == False    assert user2.has_perm('permission.delete_article', art1) == False    assert user2.has_perm('permission.delete_article', art2) == True    #    # You may also be interested in django signals to apply 'add' permissions to the    # newly created users.    # https://docs.djangoproject.com/en/dev/ref/signals/#django.db.models.signals.post_save    #    from django.db.models.signals.post_save    from django.dispatch import receiver    from permission.utils.permissions import perm_to_permission    @receiver(post_save, sender=User)    def apply_permissions_to_new_user(sender, instance, created, **kwargs):        if not created:            return        #        # permissions you want to apply to the newly created user        # YOU SHOULD NOT APPLY PERMISSIONS EXCEPT PERMISSIONS FOR 'ADD'        # in this way, the applied permissions are not object permission so        # if you apply 'permission.change_article' then the user can change        # any article object.        #        permissions = [            'permission.add_article',        ]        for permission in permissions:            # apply permission            # perm_to_permission is a utility to convert string permission            # to permission instance.            instance.user_permissions.add(perm_to_permission(permission))See http://django-permission2.readthedocs.org/en/latest/_modules/permission/logics/author.html#AuthorPermissionLogicto learn how this logic works.Now, assume you add ``collaborators`` attribute to store collaboratorsof the article and you want to give them a change permission.What you need to do is quite simple.Apply ``permission.logics.CollaboratorsPermissionLogic``to the ``Article`` model as follows.. code:: python    from django.db import models    from django.contrib.auth.models import User    class Article(models.Model):        title = models.CharField('title', max_length=120)        body = models.TextField('body')        author = models.ForeignKey(User)        collaborators = models.ManyToManyField(User)        # this is just required for easy explanation        class Meta:            app_label='permission'    # apply AuthorPermissionLogic and CollaboratorsPermissionLogic    from permission import add_permission_logic    from permission.logics import AuthorPermissionLogic    from permission.logics import CollaboratorsPermissionLogic    add_permission_logic(Article, AuthorPermissionLogic())    add_permission_logic(Article, CollaboratorsPermissionLogic(        field_name='collaborators',        any_permission=False,        change_permission=True,        delete_permission=False,    )).. note::    You can specify related object with `field_name` attribute like    `django queryset lookup &lt;https://docs.djangoproject.com/en/1.10/topics/db/queries/#field-lookups&gt;`_.    See the working example below:.. code:: python    from django.db import models    from django.contrib.auth.models import User    class Article(models.Model):        title = models.CharField('title', max_length=120)        body = models.TextField('body')        project = models.ForeignKey('permission.Project')        # this is just required for easy explanation        class Meta:            app_label='permission'    class Project(models.Model):        title = models.CharField('title', max_length=120)        body = models.TextField('body')        collaborators = models.ManyToManyField(User)        # this is just required for easy explanation        class Meta:            app_label='permission'    # apply AuthorPermissionLogic to Article    from permission import add_permission_logic    from permission.logics import CollaboratorsPermissionLogic    add_permission_logic(Article, CollaboratorsPermissionLogic(        field_name='project__collaborators',    ))That's it.Now the following codes will work as expected:.. code:: python    user1 = User.objects.create_user(        username='john',        email='john@test.com',        password='password',    )    user2 = User.objects.create_user(        username='alice',        email='alice@test.com',        password='password',    )    art1 = Article.objects.create(        title=&quot;Article 1&quot;,        body=&quot;foobar hogehoge&quot;,        author=user1    )    art1.collaborators.add(user2)    assert user1.has_perm('permission.change_article') == False    assert user1.has_perm('permission.change_article', art1) == True    assert user1.has_perm('permission.delete_article', art1) == True    assert user2.has_perm('permission.change_article') == False    assert user2.has_perm('permission.change_article', art1) == True    assert user2.has_perm('permission.delete_article', art1) == FalseSee http://django-permission2.readthedocs.org/en/latest/_modules/permission/logics/collaborators.html#CollaboratorsPermissionLogicto learn how this logic works.There are `StaffPermissionLogic &lt;http://django-permission2.readthedocs.org/en/latest/_modules/permission/logics/staff.html#StaffPermissionLogic&gt;`_and `GroupInPermissionLogic &lt;http://django-permission2.readthedocs.org/en/latest/_modules/permission/logics/groupin.html#GroupInPermissionLogic&gt;`_for ``is_staff`` or ``group`` based permission logic as well.Customize permission logic............................Your own permission logic class must be a subclass of``permission.logics.PermissionLogic`` and must override``has_perm(user_obj, perm, obj=None)`` method which return boolean value.Class, method, or function decorator-------------------------------------Like Django's ``permission_required`` but it can be used for object permissionsand as a class, method, or function decorator.Also, you don't need to specify a object to this decorator for object permission.This decorator automatically determined the object from request(so you cannnot use this decorator for non view class/method/function but youanyway use ``user.has_perm`` in that case)... code:: python    &gt;&gt;&gt; from permission.decorators import permission_required    &gt;&gt;&gt; # As class decorator    &gt;&gt;&gt; @permission_required('auth.change_user')    &gt;&gt;&gt; class UpdateAuthUserView(UpdateView):    ...     pass    &gt;&gt;&gt; # As method decorator    &gt;&gt;&gt; class UpdateAuthUserView(UpdateView):    ...     @permission_required('auth.change_user')    ...     def dispatch(self, request, *args, **kwargs):    ...         pass    &gt;&gt;&gt; # As function decorator    &gt;&gt;&gt; @permission_required('auth.change_user')    &gt;&gt;&gt; def update_auth_user(request, *args, **kwargs):    ...     passOverride the builtin ``if`` template tag----------------------------------------django-permission2 overrides the builtin ``if`` tag, adding two operators to handlepermissions in templates.You can write a permission test by using ``has`` keyword, and a target object with ``of`` as below... code:: html    {% if user has 'blogs.add_article' %}        &lt;p&gt;This user have 'blogs.add_article' permission&lt;/p&gt;    {% elif user has 'blog.change_article' of object %}        &lt;p&gt;This user have 'blogs.change_article' permission of {{object}}&lt;/p&gt;    {% endif %}    {# If you set 'PERMISSION_REPLACE_BUILTIN_IF = False' in settings #}    {% permission user has 'blogs.add_article' %}        &lt;p&gt;This user have 'blogs.add_article' permission&lt;/p&gt;    {% elpermission user has 'blog.change_article' of object %}        &lt;p&gt;This user have 'blogs.change_article' permission of {{object}}&lt;/p&gt;    {% endpermission %}.. note::    You have to add `'permission.templatetags.permissionif'` to `'builtins'` option manually.    See    - https://docs.djangoproject.com/en/1.9/releases/1.9/#django-template-base-add-to-builtins-is-removed    - https://docs.djangoproject.com/en/1.9/topics/templates/#module-django.template.backends.django    Or following example:    .. code:: python        TEMPLATES = [            {                'BACKEND': 'django.template.backends.django.DjangoTemplates',                'OPTIONS': {                    'builtins': ['permission.templatetags.permissionif'],                },            },        ]License-------------------------------------------------------------------------------The MIT License (MIT)Copyright (c) 2022 Malte Gerth &lt;mail@malte-gerth.de&gt;Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</longdescription>
</pkgmetadata>