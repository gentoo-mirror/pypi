<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=======================marshmallow-oneofschema=======================.. image:: https://dev.azure.com/sloria/sloria/_apis/build/status/marshmallow-code.marshmallow-oneofschema?branchName=master    :target: https://dev.azure.com/sloria/sloria/_build/latest?definitionId=13&amp;branchName=master    :alt: Build Status.. image:: https://badgen.net/badge/marshmallow/3    :target: https://marshmallow.readthedocs.io/en/latest/upgrading.html    :alt: marshmallow 3 compatibleAn extension to marshmallow to support schema (de)multiplexing.marshmallow is a fantastic library for serialization and deserialization of data.For more on that project see its `GitHub &lt;https://github.com/marshmallow-code/marshmallow&gt;`_page or its `Documentation &lt;http://marshmallow.readthedocs.org/en/latest/&gt;`_.This library adds a special kind of schema that actually multiplexes other schemasbased on object type. When serializing values, it uses get_obj_type() methodto get object type name. Then it uses ``type_schemas`` name-to-Schema mappingto get schema for that particular object type, serializes object using thatschema and adds an extra field with name of object type. Deserialization is reverse.Installing----------::    $ pip install marshmallow-oneofschemaExample-------The code below demonstrates how to set up a polymorphic schema. For the full context check out the tests.Once setup the schema should act like any other schema. If it does not then please file an Issue... code:: python    import marshmallow    import marshmallow.fields    from marshmallow_oneofschema import OneOfSchema    class Foo:        def __init__(self, foo):            self.foo = foo    class Bar:        def __init__(self, bar):            self.bar = bar    class FooSchema(marshmallow.Schema):        foo = marshmallow.fields.String(required=True)        @marshmallow.post_load        def make_foo(self, data, **kwargs):            return Foo(**data)    class BarSchema(marshmallow.Schema):        bar = marshmallow.fields.Integer(required=True)        @marshmallow.post_load        def make_bar(self, data, **kwargs):            return Bar(**data)    class MyUberSchema(OneOfSchema):        type_schemas = {&quot;foo&quot;: FooSchema, &quot;bar&quot;: BarSchema}        def get_obj_type(self, obj):            if isinstance(obj, Foo):                return &quot;foo&quot;            elif isinstance(obj, Bar):                return &quot;bar&quot;            else:                raise Exception(&quot;Unknown object type: {}&quot;.format(obj.__class__.__name__))    MyUberSchema().dump([Foo(foo=&quot;hello&quot;), Bar(bar=123)], many=True)    # =&gt; [{'type': 'foo', 'foo': 'hello'}, {'type': 'bar', 'bar': 123}]    MyUberSchema().load(        [{&quot;type&quot;: &quot;foo&quot;, &quot;foo&quot;: &quot;hello&quot;}, {&quot;type&quot;: &quot;bar&quot;, &quot;bar&quot;: 123}], many=True    )    # =&gt; [Foo('hello'), Bar(123)]By default get_obj_type() returns obj.__class__.__name__, so you can just reuse thatto save some typing:.. code:: python    class MyUberSchema(OneOfSchema):        type_schemas = {&quot;Foo&quot;: FooSchema, &quot;Bar&quot;: BarSchema}You can customize type field with `type_field` class property:.. code:: python    class MyUberSchema(OneOfSchema):        type_field = &quot;object_type&quot;        type_schemas = {&quot;Foo&quot;: FooSchema, &quot;Bar&quot;: BarSchema}    MyUberSchema().dump([Foo(foo=&quot;hello&quot;), Bar(bar=123)], many=True)    # =&gt; [{'object_type': 'Foo', 'foo': 'hello'}, {'object_type': 'Bar', 'bar': 123}]You can use resulting schema everywhere marshmallow.Schema can be used, e.g... code:: python    import marshmallow as m    import marshmallow.fields as f    class MyOtherSchema(m.Schema):        items = f.List(f.Nested(MyUberSchema))License-------MIT licensed. See the bundled `LICENSE &lt;https://github.com/marshmallow-code/marshmallow-oneofschema/blob/master/LICENSE&gt;`_ file for more details.</longdescription>
</pkgmetadata>