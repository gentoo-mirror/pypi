<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Control Govee LED Lights from PythonThis library provides control over Govee-manufactured lights.  @wez built thisfor use with Home Assistant. You can [find the corresponding hacs-govee-lanrepo here](https://github.com/wez/govee-lan-hass).It has an emphasis on making use of their [LANAPI](https://app-h5.govee.com/user-manual/wlan-guide) but also makes use oftheir [HTTPAPI](https://govee-public.s3.amazonaws.com/developer-docs/GoveeDeveloperAPIReference.pdf)in order to retrieve the user-assigned names of the devices, and to control thedevices that don't yet support the LAN API.## Getting Started```pythonfrom govee_led_wez import GoveeController, GoveeDevicecontroller = GoveeController()def device_changed(device: GoveeDevice):    print(f&quot;{device.device_id} state -&gt; {device.state}&quot;)controller.set_device_change_callback(device_changed)if YOUR_API_KEY:    controller.set_http_api_key(YOUR_API_KEY)    controller.start_http_poller()controller.start_lan_poller()if YOU_WANT_BLE:    # Optional, if you want bluetooth device control.    # This will disconnect from devices after they are idle    # for a while. If you omit this, devices will be disconnected    # in case of error. You probably want this.    controller.start_ble_idler()    # This will look for new devices in the background,    # by default every 10 minutes    controller.start_ble_poller()    # Alternatively: This will look for devices right now,    # but note that it needs # to perform discovery and can    # take several seconds    # await controller.query_ble_devices()# Devices will now be discovered asynchronously```## Notes*Devices are discovered asynchronously*. While the full set of devicesassociated with your account can be returned via the HTTP API, theinitial request for them is made asynchronously by the backgroundhttp poller task.  If you need the list immediately, you can call`controller.query_http_devices()` to obtain that list.*The HTTP API has some tight rate limits*. This library prefers to avoidread-after-write operations to verify the state in order to reserve the callsfor issuing commands to your devices.  This means that, for devices that don'tsupport the LAN API, the assumed state may be a bit wonky until the deviceis controlled. You can call `controller.update_device_state()` toexplicitly retrieve the state.*BLE is preferred over HTTP*. When we know a device is accessible via BLE,then we will attempt to control it via BLE before trying to use HTTP.LAN is always attempted first, as it has the lowest latency.*BLE is currently only usable in conjunction with HTTP and/or LAN discovery*.There isn't a BLE-only usage at the moment.# ContributingA `Makefile` provides shortcuts for doing stuff:* `make setup` - do one-time setup for developing* `make check` - performs type checking and linting* `make test` - runs tests* `make fmt` - runs code formatting, potentially appeasing `make check`* `make build` - builds distributable bitsGitHub Actions will run the `check`, `test` and `build` actions on PRs.</longdescription>
</pkgmetadata>