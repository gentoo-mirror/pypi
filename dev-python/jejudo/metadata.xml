<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## This module is built on top of Jishaku.&gt; 1. Download jishaku&gt; ```bash&gt; pip install -U &quot;jishaku @ git+https://github.com/Gorialis/jishaku@master&quot;&gt; ```jejudo is an extension for bot developers that enables rapid prototyping, experimentation, and debugging of features for bots.One of jejudo's core philosophies is to be dynamic and easy-to-use. Here's the two step install:&gt; 1. Download jejudo on the command line using pip:&gt; ```bash&gt; pip install -U jejudo&gt; ```&gt; 2. Load the extension in your bot code before it runs:&gt; ```python&gt; bot.load_extension('jejudo')&gt; # or&gt; await bot.load_extension('jejudo')&gt; ```&gt; That's it!You can also import the module to use the command development utilities.## Command reference&lt;table&gt;    &lt;tr&gt;        &lt;td width=&quot;60px&quot;&gt;            &lt;img align=&quot;left&quot; width=&quot;50&quot; src=&quot;https://github.com/Gorialis/jishaku/blob/master/.github/assets/python_logo.svg&quot;&gt;        &lt;/td&gt;        &lt;td&gt;            &lt;h4&gt;&amp;gt; &lt;code&gt;jejudo [py|python] &amp;lt;argument&amp;gt;&lt;/code&gt;&lt;/h4&gt;            The Python commands execute or evaluate Python code passed into them.            It supports simple expressions:            &lt;br&gt;&lt;br&gt; &lt;!-- Horrifying that I have to do this --&gt;            &lt;blockquote&gt;                &lt;p&gt;&amp;gt;  &lt;i&gt;jejudo py 3+4&lt;/i&gt;&lt;/p&gt;                &lt;img align=&quot;left&quot; width=&quot;50&quot; height=&quot;50&quot; src=&quot;https://github.com/Gorialis/jishaku/blob/master/.github/assets/beep_bot.svg&quot;&gt;                    &lt;p&gt;&lt;b&gt;Beep Bot&lt;/b&gt;&lt;/p&gt;                    7            &lt;/blockquote&gt;            &lt;br&gt;            It also supports async expressions:            &lt;br&gt;&lt;br&gt;            &lt;blockquote&gt;                &lt;p&gt;&amp;gt;  &lt;i&gt;jejudo py await _ctx.pins()&lt;/i&gt;&lt;/p&gt;                &lt;img align=&quot;left&quot; width=&quot;50&quot; height=&quot;50&quot; src=&quot;https://github.com/Gorialis/jishaku/blob/master/.github/assets/beep_bot.svg&quot;&gt;                    &lt;p&gt;&lt;b&gt;Beep Bot&lt;/b&gt;&lt;/p&gt;                    [&amp;lt;Message id=123456789012345678 ...&amp;gt;, ...]            &lt;/blockquote&gt;            &lt;br&gt;            You can pass in codeblocks for longer blocks of code to execute, and you can use &lt;code&gt;yield&lt;/code&gt; to return intermediate results within your processing.            &lt;br&gt;&lt;br&gt;            The &lt;i&gt;inspect&lt;/i&gt; variant of the command will return a codeblock with detailed inspection information on all objects returned.            &lt;br&gt;&lt;br&gt;            The variables available by default in all execution contexts are:            &lt;br&gt;&lt;br&gt;            &lt;table&gt;                &lt;tr&gt;                    &lt;td&gt;&lt;code&gt;_ctx&lt;/code&gt;&lt;/td&gt;                    &lt;td&gt;                        The &lt;a href=&quot;https://discordpy.readthedocs.io/en/latest/ext/commands/api.html#discord.ext.commands.Context&quot;&gt;Context&lt;/a&gt; that invoked the command.                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;&lt;code&gt;_bot&lt;/code&gt;&lt;/td&gt;                    &lt;td&gt;                        The running &lt;a href=&quot;https://discordpy.readthedocs.io/en/latest/ext/commands/api.html#discord.ext.commands.Bot&quot;&gt;Bot&lt;/a&gt; instance.                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;&lt;code&gt;_author&lt;/code&gt;&lt;br&gt;&lt;code&gt;_channel&lt;/code&gt;&lt;br&gt;&lt;code&gt;_guild&lt;/code&gt;&lt;br&gt;&lt;code&gt;_me&lt;/code&gt;&lt;br&gt;&lt;code&gt;_message&lt;/code&gt;&lt;br&gt;&lt;code&gt;_msg&lt;/code&gt;&lt;/td&gt;                    &lt;td&gt;                        Shortcuts for attributes on &lt;a href=&quot;https://discordpy.readthedocs.io/en/latest/ext/commands/api.html#discord.ext.commands.Context&quot;&gt;&lt;code&gt;_ctx&lt;/code&gt;&lt;/a&gt;.                    &lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;&lt;code&gt;_find&lt;/code&gt;&lt;br&gt;&lt;code&gt;_get&lt;/code&gt;&lt;/td&gt;                    &lt;td&gt;                        Shortcuts for &lt;a href=&quot;https://discordpy.readthedocs.io/en/latest/api.html#utility-functions&quot;&gt;&lt;code&gt;discord.utils&lt;/code&gt;&lt;/a&gt; functions.                    &lt;/td&gt;                &lt;/tr&gt;            &lt;/table&gt;            &lt;br&gt;            The underscore prefix on the provided variables is intended to help prevent shadowing when writing large blocks of code within the command.            &lt;br&gt;            If you decide that you don't want the prefix, you can disable it by setting the &lt;code&gt;jejudo_NO_UNDERSCORE&lt;/code&gt; environment variable to &lt;code&gt;true&lt;/code&gt;.            &lt;br&gt;&lt;br&gt;            Each Python command is individually scoped. That means variables you create won't be retained in later invocations.            &lt;br&gt;        &lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;&lt;table&gt;    &lt;tr&gt;        &lt;td width=&quot;60px&quot;&gt;            &lt;img align=&quot;left&quot; width=&quot;50&quot; src=&quot;https://github.com/Gorialis/jishaku/blob/master/.github/assets/terminal.svg&quot;&gt;        &lt;/td&gt;        &lt;td&gt;            &lt;h4&gt;&amp;gt; &lt;code&gt;jejudo [sh|shell] &amp;lt;argument&amp;gt;&lt;/code&gt;&lt;/h4&gt;            The shell command executes commands within your system shell.            &lt;br&gt;&lt;br&gt;            If you're on Linux and are using a custom shell, jejudo will obey the &lt;code&gt;SHELL&lt;/code&gt; environment variable, otherwise, it will use &lt;code&gt;/bin/bash&lt;/code&gt;.            &lt;br&gt;            On Windows, jejudo will use PowerShell if it's detected, otherwise, it will use Command Prompt.            &lt;br&gt;&lt;br&gt;        &lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;&lt;table&gt;    &lt;tr&gt;        &lt;td width=&quot;60px&quot;&gt;            &lt;img align=&quot;left&quot; width=&quot;50&quot; src=&quot;https://github.com/Gorialis/jishaku/blob/master/.github/assets/extension.svg&quot;&gt;        &lt;/td&gt;        &lt;td&gt;            &lt;h4&gt;&amp;gt; &lt;code&gt;jejudo [load|reload] [extensions...]&lt;/code&gt;&lt;/h4&gt;            &lt;h4&gt;&amp;gt; &lt;code&gt;jejudo unload [extensions...]&lt;/code&gt;&lt;/h4&gt;            These commands load, reload, or unload extensions on your bot.            &lt;br&gt;&lt;br&gt;            You can reload jejudo itself with &lt;code&gt;jsk reload jejudo&lt;/code&gt;.            &lt;br&gt;            &lt;code&gt;jsk reload ~&lt;/code&gt; will reload all extensions on your bot.            &lt;br&gt;&lt;br&gt;            You can load, reload, or unload multiple extensions at once: &lt;code&gt;jsk reload cogs.one cogs.two&lt;/code&gt;            &lt;br&gt;&lt;br&gt;            &lt;h4&gt;&amp;gt; &lt;code&gt;jejudo shutdown&lt;/code&gt;&lt;/h4&gt;            This command gracefully shuts down your bot.            &lt;br&gt;&lt;br&gt;            &lt;h4&gt;&amp;gt; &lt;code&gt;jejudo rtt&lt;/code&gt;&lt;/h4&gt;            This command calculates &lt;a href=&quot;https://en.wikipedia.org/wiki/Round-trip_delay&quot;&gt;Round-Trip Time&lt;/a&gt; for your bot to the API. It does this by calculating response time samples, so you can tell if your bot is being slow or not.            &lt;br&gt;&lt;br&gt;        &lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</longdescription>
</pkgmetadata>