<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Welcome to foxes![FOXES Logo](Logo_FOXES.svg)## OverviewThe software `foxes` is a modular wind farm simulation and wake modelling toolbox which is based on engineering wake models. It has many applications, for example- Wind farm optimization, e.g. layout optimization or wake steering,- Wind farm post-construction analysis,- Wake model studies, comparison and validation,- Wind farm simulations invoking complex model chains.The calculation is fully vectorized and its fast performance is owed to [dask](https://www.dask.org/). Also the parallelization on local or remote clusters is enabled via `dask`. The wind farmoptimization capabilities invoke the [iwopy](https://github.com/FraunhoferIWES/iwopy) package whichas well supports vectorization.`foxes` is build upon many years of experience with wake model code development at IWES, starting with the C++ based in-house code _flapFOAM_ (2011-2019) and the Python based direct predecessor _flappy_ (2019-2022).Documentation: [https://fraunhoferiwes.github.io/foxes.docs/index.html](https://fraunhoferiwes.github.io/foxes.docs/index.html)Source code: [https://github.com/FraunhoferIWES/foxes](https://github.com/FraunhoferIWES/foxes)PyPi reference: [https://pypi.org/project/foxes/](https://pypi.org/project/foxes/)Anaconda reference: [https://anaconda.org/conda-forge/foxes](https://anaconda.org/conda-forge/foxes)## RequirementsThe supported Python versions are: - `Python 3.7`- `Python 3.8`- `Python 3.9`- `Python 3.10`## Installation via conda### Virtual Python environmentFirst create a new `conda` environment, for example called `foxes`, by```consoleconda create -c conda-forge --name foxes```Then activate the environment every time you work with `foxes`, by```consoleconda activate foxes```You can leave the environment by```consoleconda deactivate```The `conda` installation commands below should be executed within the active `foxes` environment.### Standard usersThe `foxes` package is available on the channel [conda-forge](https://anaconda.org/conda-forge/foxes). You can install the latest version by```consoleconda install -c conda-forge foxes```### DevelopersFor developers using `conda`, we recommend first installing foxes, then removing only the `foxes` package while keeping the dependencies, and then adding `foxes` again from a git using `conda develop`:```consoleconda install -c conda-forge foxes conda-buildconda remove foxes --forcegit clone https://github.com/FraunhoferIWES/foxes.gitcd foxesconda develop .```The last line makes sure that all your code changes are included whenever importing `foxes`. Concerning the `git clone` line, we actually recommend that you fork `foxes` on GitHub and then replace that command by cloning your fork instead.## Installation via pip### Virtual Python environmentFirst create a new `venv` environment, for example called `foxes` and located at `~/venv/foxes` (choose any other convenient name and location in your file system if you prefer), by```consolepython3 -m venv ~/venv/foxes```Then activate the environment every time you work with `foxes`, by```consolesource ~/venv/foxes/bin/activate```You can leave the environment by```consoledeactivate```The `pip` installation commands below should be executed within the active `foxes` environment.### Standard usersAs a standard user, you can install the latest release via [pip](https://pypi.org/project/foxes/) by```consolepip install foxes```This commands installs the version that correspond to the `main` branch at [github](https://github.com/FraunhoferIWES/foxes). Alternatively, you can decide to install the latest pre-release developments (non-stable) by```consolepip install git+https://github.com/FraunhoferIWES/foxes@dev#egg=foxes```### DevelopersFor developers using `pip`, simply invoke the `-e` flag in the installation command in your local clone:```consolegit clone https://github.com/FraunhoferIWES/foxes.gitcd foxespip install -e .```The last line makes sure that all your code changes are included whenever importing `foxes`. Concerning the `git clone` line, we actually recommend that you fork `foxes` on GitHub and then replace that command by cloning your fork instead.## UsageFor detailed examples of how to run _foxes_, check the `examples` and `notebooks` folders in this repository. A minimal running example is the following, based on provided static `csv` data files:```pythonimport foxesstates = foxes.input.states.Timeseries(&quot;timeseries_3000.csv.gz&quot;, [&quot;WS&quot;, &quot;WD&quot;,&quot;TI&quot;,&quot;RHO&quot;])mbook = foxes.ModelBook(&quot;NREL-5MW-D126-H90.csv&quot;)farm = foxes.WindFarm()foxes.input.farm_layout.add_from_file(farm,&quot;test_farm_67.csv&quot;,turbine_models=[&quot;Pct&quot;])algo = foxes.algorithms.Downwind(mbook, farm, states, [&quot;Jensen_linear_k007&quot;])farm_results = algo.calc_farm()print(farm_results)```## Contributing1. Fork _foxes_ on _github_.2. Create a branch (`git checkout -b new_branch`)3. Commit your changes (`git commit -am &quot;your awesome message&quot;`)4. Push to the branch (`git push origin new_branch`)5. Create a pull request [here](https://github.com/FraunhoferIWES/foxes/pulls)## AcknowledgementsThe development of _foxes_ and its predecessors _flapFOAM_ and _flappy_ (internal - non public) has been supported through multiple publicly funded research projects. We acknowledge in particular the funding by the Federal Ministry of Economic Affairs and Climate Action (BMWK) through the projects _Smart Wind Farms_ (grant no. 0325851B), _GW-Wakes_ (0325397B) and _X-Wakes_ (03EE3008A) as well as the funding by the Federal Ministry of Education and Research (BMBF) in the framework of the project _H2Digital_ (03SF0635).</longdescription>
</pkgmetadata>