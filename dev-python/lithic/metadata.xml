<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Lithic Python API Library&gt; **Migration Guide**&gt;&gt; We've made some major improvements to how you pass arguments to methods which will require migrating your existing code.&gt;&gt; If you want to migrate to the new patterns incrementally you can do so by installing `v0.5.0`. This release contains both&gt; the new and old patterns with a backwards compatibility layer.&gt;&gt; You can find a guide to migrating in [this document](#migration-guide).[![PyPI version](https://img.shields.io/pypi/v/lithic.svg)](https://pypi.org/project/lithic/)The Lithic Python library provides convenient access to the Lithic REST API from any Python 3.7+application. It includes type definitions for all request params and response fields,and offers both synchronous and asynchronous clients powered by [httpx](https://github.com/encode/httpx).## DocumentationThe API documentation can be found [here](https://docs.lithic.com).## Installation```shpip install lithic```## UsageThe full API of this library can be found in [api.md](https://www.github.com/lithic-com/lithic-python/blob/main/api.md).```pythonfrom lithic import Lithicclient = Lithic(    # defaults to os.environ.get(&quot;LITHIC_API_KEY&quot;)    api_key=&quot;my api key&quot;,    # defaults to &quot;production&quot;.    environment=&quot;sandbox&quot;,)card = client.cards.create(    type=&quot;SINGLE_USE&quot;,)print(card.token)```While you can provide an `api_key` keyword argument, we recommend using [python-dotenv](https://pypi.org/project/python-dotenv/)and adding `LITHIC_API_KEY=&quot;my api key&quot;` to your `.env` file so that your API Key is not stored in source control.## Async UsageSimply import `AsyncLithic` instead of `Lithic` and use `await` with each API call:```pythonfrom lithic import AsyncLithicclient = AsyncLithic(    # defaults to os.environ.get(&quot;LITHIC_API_KEY&quot;)    api_key=&quot;my api key&quot;,    # defaults to &quot;production&quot;.    environment=&quot;sandbox&quot;,)async def main():    card = await client.cards.create(        type=&quot;SINGLE_USE&quot;,    )    print(card.token)asyncio.run(main())```Functionality between the synchronous and asynchronous clients is otherwise identical.## Using TypesNested request parameters are [TypedDicts](https://docs.python.org/3/library/typing.html#typing.TypedDict). Responses are [Pydantic models](https://docs.pydantic.dev), which provide helper methods for things like serializing back into json ([v1](https://docs.pydantic.dev/1.10/usage/models/), [v2](https://docs.pydantic.dev/latest/usage/serialization/)). To get a dictionary, you can call `dict(model)`.This helps provide autocomplete and documentation within your editor. If you would like to see type errors in VS Code to help catch bugs earlier, set `python.analysis.typeCheckingMode` to `&quot;basic&quot;`.## PaginationList methods in the Lithic API are paginated.This library provides auto-paginating iterators with each list response, so you do not have to request successive pages manually:```pythonimport lithicclient = Lithic()all_cards = []# Automatically fetches more pages as needed.for card in client.cards.list():    # Do something with card here    all_cards.append(card)print(all_cards)```Or, asynchronously:```pythonimport asyncioimport lithicclient = AsyncLithic()async def main() -&gt; None:    all_cards = []    # Iterate through items across all pages, issuing requests as needed.    async for card in client.cards.list():        all_cards.append(card)    print(all_cards)asyncio.run(main())```Alternatively, you can use the `.has_next_page()`, `.next_page_info()`, or `.get_next_page()` methods for more granular control working with pages:```pythonfirst_page = await client.cards.list()if first_page.has_next_page():    print(f&quot;will fetch next page using these details: {first_page.next_page_info()}&quot;)    next_page = await first_page.get_next_page()    print(f&quot;number of items we just fetched: {len(next_page.data)}&quot;)# Remove `await` for non-async usage.```Or just work directly with the returned data:```pythonfirst_page = await client.cards.list()print(f&quot;page number: {first_page.page}&quot;)  # =&gt; &quot;page number: 1&quot;for card in first_page.data:    print(card.token)# Remove `await` for non-async usage.```## Nested paramsNested parameters are dictionaries, typed using `TypedDict`, for example:```pythonfrom lithic import Lithicclient = Lithic()client.cards.create(    foo={        &quot;bar&quot;: True,    },)```## Webhook VerificationWe provide helper methods for verifying that a webhook request came from Lithic, and not a malicious third party.You can use `lithic.webhooks.verify_signature(body: string, headers, secret?) -&gt; None` or `lithic.webhooks.unwrap(body: string, headers, secret?) -&gt; Payload`,both of which will raise an error if the signature is invalid.Note that the &quot;body&quot; parameter must be the raw JSON string sent from the server (do not parse it first).The `.unwrap()` method can parse this JSON for you into a `Payload` object.For example, in [FastAPI](https://fastapi.tiangolo.com/):```py@app.post('/my-webhook-handler')async def handler(request: Request):    body = await request.body()    secret = os.environ['LITHIC_WEBHOOK_SECRET']  # env var used by default; explicit here.    payload = client.webhooks.unwrap(body, request.headers, secret)    print(payload)    return {'ok': True}```## Handling errorsWhen the library is unable to connect to the API (e.g., due to network connection problems or a timeout), a subclass of `lithic.APIConnectionError` is raised.When the API returns a non-success status code (i.e., 4xx or 5xxresponse), a subclass of `lithic.APIStatusError` will be raised, containing `status_code` and `response` properties.All errors inherit from `lithic.APIError`.```pythonimport lithicfrom lithic import Lithicclient = Lithic()try:    client.cards.create(        type=&quot;an_incorrect_type&quot;,    )except lithic.APIConnectionError as e:    print(&quot;The server could not be reached&quot;)    print(e.__cause__)  # an underlying Exception, likely raised within httpx.except lithic.RateLimitError as e:    print(&quot;A 429 status code was received; we should back off a bit.&quot;)except lithic.APIStatusError as e:    print(&quot;Another non-200-range status code was received&quot;)    print(e.status_code)    print(e.response)```Error codes are as followed:| Status Code | Error Type                 || ----------- | -------------------------- || 400         | `BadRequestError`          || 401         | `AuthenticationError`      || 403         | `PermissionDeniedError`    || 404         | `NotFoundError`            || 422         | `UnprocessableEntityError` || 429         | `RateLimitError`           || &gt;=500       | `InternalServerError`      || N/A         | `APIConnectionError`       |### RetriesCertain errors will be automatically retried 2 times by default, with a short exponential backoff.Connection errors (for example, due to a network connectivity problem), 409 Conflict, 429 Rate Limit,and &gt;=500 Internal errors will all be retried by default.You can use the `max_retries` option to configure or disable this:```pythonfrom lithic import Lithic# Configure the default for all requests:client = Lithic(    # default is 2    max_retries=0,)# Or, configure per-request:client.with_options(max_retries=5).cards.list(    page_size=10,)```### TimeoutsRequests time out after 1 minute by default. You can configure this with a `timeout` option,which accepts a float or an [`httpx.Timeout`](https://www.python-httpx.org/advanced/#fine-tuning-the-configuration):```pythonfrom lithic import Lithic# Configure the default for all requests:client = Lithic(    # default is 60s    timeout=20.0,)# More granular control:client = Lithic(    timeout=httpx.Timeout(60.0, read=5.0, write=10.0, connect=2.0),)# Override per-request:client.with_options(timeout=5 * 1000).cards.list(    page_size=10,)```On timeout, an `APITimeoutError` is thrown.Note that requests which time out will be [retried twice by default](#retries).## Advanced: Configuring custom URLs, proxies, and transportsYou can configure the following keyword arguments when instantiating the client:```pythonimport httpxfrom lithic import Lithicclient = Lithic(    # Use a custom base URL    base_url=&quot;http://my.test.server.example.com:8083&quot;,    proxies=&quot;http://my.test.proxy.example.com&quot;,    transport=httpx.HTTPTransport(local_address=&quot;0.0.0.0&quot;),)```See the httpx documentation for information about the [`proxies`](https://www.python-httpx.org/advanced/#http-proxying) and [`transport`](https://www.python-httpx.org/advanced/#custom-transports) keyword arguments.## Advanced: Managing HTTP resourcesBy default we will close the underlying HTTP connections whenever the client is [garbage collected](https://docs.python.org/3/reference/datamodel.html#object.__del__) is called but you can also manually close the client using the `.close()` method if desired, or with a context manager that closes when exiting.# Migration guideThis section outlines the features that were deprecated in `v0.5.0`, and subsequently removed in `v0.6.0` and how to migrate your code.## Breaking changes### TypedDict â†’ keyword argumentsThe way you pass arguments to methods has been changed from a single `TypedDict` to individual arguments. For example, this snippet:```pythoncard = await client.cards.create({&quot;type&quot;: &quot;VIRTUAL&quot;})```Now becomes:```pythoncard = await client.cards.create(type=&quot;VIRTUAL&quot;)```#### MigratingThe easiest way to make your code compatible with this change is to add `**{`, for example:```diff- card = await client.cards.create({'type': 'VIRTUAL'})+ card = await client.cards.create(**{'type': 'VIRTUAL'})```However, it is highly recommended to completely switch to explicit keyword arguments:```diff- card = await client.cards.create({'type': 'VIRTUAL'})+ card = await client.cards.create(type='VIRTUAL')```### Named path argumentsAll but the last path parameter must now be passed as named arguments instead of positional arguments, for example, for a method that calls the endpoint `/account_holders/{account_holder_token}/documents/{document_token}` you would've been able to call the method like this:```pythoncard = await client.account_holders.retrieve(    &quot;account_holder_token&quot;, &quot;my_document_token&quot;)```But now you must call the method like this:```pythoncard = await client.account_holders.retrieve(    &quot;my_document_token&quot;, account_holder_token=&quot;account_holder_token&quot;)```If you have type checking enabled in your IDE it will tell you which parts of your code need to be updated.### Request optionsYou used to be able to set request options on a per-method basis, now you can only set them on the client. There are two methods that you can use to make this easy, `with_options` and `copy`.If you need to make multiple requests with changed options, you can use `.copy()` to get a new client object with those options. This can be useful if you need to set a custom header for multiple requests, for example:```pythoncopied = client.copy(default_headers={&quot;X-My-Header&quot;: &quot;Foo&quot;})card = await copied.cards.create(type=&quot;VIRTUAL&quot;)await copied.cards.provision(card.token, digital_wallet=&quot;GOOGLE_PAY&quot;)```If you just need to override one of the client options for one request, you can use `.with_options()`, for example:```pythonawait client.with_options(timeout=None).cards.create(type=&quot;VIRTUAL&quot;)```It should be noted that the `.with_options()` method is simply an alias to `.copy()`, you can use them interchangeably.You can pass nearly every argument that is supported by the Client `__init__` method to the `.copy()` method, except for `proxies` and `transport`.```pythoncopied = client.copy(    api_key=&quot;...&quot;,    environment=&quot;sandbox&quot;,    timeout=httpx.Timeout(read=10),    max_retries=5,    default_headers={        &quot;X-My-Header&quot;: &quot;value&quot;,    },    default_query={        &quot;my_default_param&quot;: &quot;value&quot;,    },)```## New features### Pass custom headersIf you need to add additional headers to a request you can easily do so with the `extra_headers` argument:```pythoncard = await client.cards.create(    type=&quot;VIRTUAL&quot;,    extra_headers={        &quot;X-Foo&quot;: &quot;my header&quot;,    },)```### Pass custom JSON propertiesYou can add additional properties to the JSON request body that are not included directly in the method definition through the `extra_body` argument. This can be useful when there are in new properties in the API that are in beta and aren't in the SDK yet.```pythoncard = await client.cards.create(    type=&quot;VIRTUAL&quot;,    extra_body={        &quot;special_prop&quot;: &quot;foo&quot;,    },)# sends this to the API:# {&quot;type&quot;: &quot;VIRTUAL&quot;, &quot;special_prop&quot;: &quot;foo&quot;}```### Pass custom query parametersYou can add additional query parameters that aren't specified in the method definition through the `extra_query` argument. This can be useful when there are any new/beta query parameters that are not yet in the SDK.```pythoncard = await client.cards.create(    type=&quot;VIRTUAL&quot;,    extra_query={        &quot;special_param&quot;: &quot;bar&quot;,    },)# makes the request to this URL:# https://api.lithic.com/v1/cards?special_param=bar```## Rich `date` and `datetime` typesWe've improved the types for response fields / request params that correspond to `date` or `datetime` values!Previously they were just raw strings but now response fields will be instances of `date` or `datetime`.This means that if you're working with these fields and parsing them into `datetime` instances manually you will have to removeany code that performs said parsing.```diffcard = client.cards.retrieve('&lt;token&gt;')- created = datetime.fromisoformat(card.created_at)+ created = card.created_atprint(created.month)```For request params you can continue to pass in strings if you want to use a datetime library other than the standard library version but if youwere writing code that looked like this:```pydt = datetime(...)for card in client.cards.list(begin=dt.isoformat()):  ...```You can remove the explicit call to `isoformat`!```diffdt = datetime(...)- for card in client.cards.list(begin=dt.isoformat()):+ for card in client.cards.list(begin=dt):  ...```## VersioningThis package generally attempts to follow [SemVer](https://semver.org/spec/v2.0.0.html) conventions, though certain backwards-incompatible changes may be released as minor versions:1. Changes that only affect static types, without breaking runtime behavior.2. Changes to library internals which are technically public but not intended or documented for external use. _(Please open a GitHub issue to let us know if you are relying on such internals)_.3. Changes that we do not expect to impact the vast majority of users in practice.We take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.We are keen for your feedback; please open an [issue](https://www.github.com/lithic-com/lithic-python/issues) with questions, bugs, or suggestions.## RequirementsPython 3.7 or higher.</longdescription>
</pkgmetadata>