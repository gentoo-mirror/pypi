<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>mdstat for python=================This short library is used to convert your ``/proc/mdstat`` file into an objectusable in Python.  It comes with a short ``mdjson`` script that dumps your filein a JSON format.Requirements------------ - Linux (or at least get mdstat files from a Linux machine) - Python 2.6+ (or 3.2+)Example usage-------------For most use cases, you can simple run ``mdstat.parse()`` to get nesteddictionaries repesenting your local ``/proc/mdstat`` file.  If you fetch thefile remotely or need to run the parser on a stream, use ``parse_stream``... code-block:: javascript    $ mdjson    {        &quot;personalities&quot;: [            &quot;raid10&quot;        ],        &quot;unused_devices&quot;: [],        &quot;devices&quot;: {            &quot;md127&quot;: {                &quot;read_only&quot;: true,                &quot;status&quot;: {                    &quot;near_copies&quot;: 2,                    &quot;blocks&quot;: 34359475200,                    &quot;raid_disks&quot;: 4,                    &quot;offset_copies&quot;: 0,                    &quot;far_copies&quot;: 1,                    &quot;synced&quot;: [                        true,                        true,                        true,                        true                    ],                    &quot;chunks&quot;: &quot;512K&quot;,                    &quot;super&quot;: &quot;1.2&quot;,                    &quot;non_degraded_disks&quot;: 4                },                &quot;bitmap&quot;: null,                &quot;resync&quot;: null,                &quot;active&quot;: true,                &quot;disks&quot;: {                    &quot;xvdf&quot;: {                        &quot;spare&quot;: true,                        &quot;faulty&quot;: false,                        &quot;write_mostly&quot;: false,                        &quot;number&quot;: 4,                        &quot;replacement&quot;: false                    },                    &quot;xvdd&quot;: {                        &quot;spare&quot;: false,                        &quot;faulty&quot;: false,                        &quot;write_mostly&quot;: false,                        &quot;number&quot;: 2,                        &quot;replacement&quot;: false                    },                    &quot;xvde&quot;: {                        &quot;spare&quot;: false,                        &quot;faulty&quot;: false,                        &quot;write_mostly&quot;: false,                        &quot;number&quot;: 3,                        &quot;replacement&quot;: false                    },                    &quot;xvdb&quot;: {                        &quot;spare&quot;: false,                        &quot;faulty&quot;: false,                        &quot;write_mostly&quot;: false,                        &quot;number&quot;: 0,                        &quot;replacement&quot;: false                    },                    &quot;xvdc&quot;: {                        &quot;spare&quot;: false,                        &quot;faulty&quot;: false,                        &quot;write_mostly&quot;: false,                        &quot;number&quot;: 1,                        &quot;replacement&quot;: false                    }                },                &quot;personality&quot;: &quot;raid10&quot;            }        }    }You can also use the python interface to generate a nested dictionary:.. code-block:: python    &gt;&gt;&gt; import mdstat    &gt;&gt;&gt; mdstat.parse()    {        &quot;personalities&quot;: [            &quot;raid1&quot;,            &quot;raid5&quot;,            &quot;raid10&quot;,        ],        &quot;devices&quot;: {            &quot;md0&quot;: {                &quot;active&quot;: True,                [... snip ...]            }        }        &quot;unused_devices&quot;: []    }</longdescription>
</pkgmetadata>