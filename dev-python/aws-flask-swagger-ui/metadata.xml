<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aws-flask-swagger-ui![Tests Status](https://github.com/tb102122/aws_flask_swagger_ui/actions/workflows/tests.yml/badge.svg)![Release Status](https://github.com/tb102122/aws_flask_swagger_ui/actions/workflows/py-publish.yml/badge.svg)Simple Flask blueprint for adding [Swagger UI](https://github.com/swagger-api/swagger-ui) to your flask application.Including a WSGI adapter for [AWS API Gateway/Lambda Proxy Integration](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html) to allows you to use WSGI-compatible middleware and frameworks like Flask and Django with the AWS API Gateway/Lambda proxy integration for your Swagger documentation.Included Swagger UI version: [see here](./aws_flask_swagger_ui/dist/VERSION)## Installation`pip install aws-flask-swagger-ui`## UsageSimple usage example is shown below for more options check the file [extend examples](./example.py):```pythonfrom flask import Flaskfrom aws_flask_swagger_ui import get_swaggerui_blueprint, flask_ui_responseapp = Flask(__name__)swaggerui_blueprint = get_swaggerui_blueprint(    &quot;/api-doc&quot;,    aws_gw_config={        &quot;exportType&quot;: &quot;oas30&quot;,        &quot;parameters&quot;: {            &quot;extensions&quot;: &quot;integrations&quot;,            &quot;extensions&quot;: &quot;apigateway&quot;,            &quot;extensions&quot;: &quot;authorizers&quot;,        },    },)app.register_blueprint(swaggerui_blueprint)def lambda_handler(event, context):    return flask_ui_response(app, event, context, base64_content_types={&quot;image/png&quot;})```### AWS Gateway Configurationhttp://mysite.com = https://restApiId.execute-api.region.amazonaws.com/stage/In order that the above example works correctly the Lambda function must be connected as Proxy to the endpoint http://mysite.com/api-doc/ Configure your API Gateway with a `{proxy+}` resource with an `ANY` method. Your &quot;Method Response&quot; should likely include an `application/json` &quot;Response Body for 200&quot; that uses the `Empty` model.Because API Gateway doesn't match the root folder with {proxy+} definition, your default URL should contain index.html. It is suggested to create a mock integration on your path `/api-doc` to return a 301. (ex: `/api-doc =&gt; 301` =&gt; `/api-doc/index.html`) Source code based on Terraform to achieve this can be found in this [article](https://itnext.io/how-to-easily-create-a-http-301-redirection-with-aws-api-gateway-2bf2874ef3f2).### Lambda Test EventThe Lambda function must have the permissions to export the API definition!If you wish to use the &quot;Test&quot; functionality in Lambda for your function, you will need a &quot;API Gateway AWS Proxy&quot; event. Check the event JSON objects in the [events](events/) folder.To update your test event, click &quot;Actions&quot; -&gt; &quot;Configure test event&quot;.Within the Events you need to update the `&quot;apiId&quot;` and `&quot;stage&quot;` with values for your AWS account.### Protect documentation with passwordIf you create an environment variable like, SWAGGER_PASSWORD=abcThen you will need to pass a query parameter in the URL like, http://mysite.com/api-doc/?pass=abcIf you don't have the environment variable then endpoint is not password protected and you can access it as per normal http://mysite.com/api-doc/## ConfigurationThe blueprint supports overloading all Swagger UI configuration options that can be JSON serialized.See [swagger-ui configuration](https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md#parameters) for options.Plugins and function parameters are not supported at this time.OAuth2 parameters can be found at [swagger-ui oauth2](https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md).## LicenseThis library is licensed under the [Apache 2.0 License](./LICENSE).## Test- Clone the repo and run pytest```bashgit clone https://github.com/tb102122/aws_flask_swagger_ui.gitpython -m venv virtualenvvirtualenv/bin/activatepip install --upgrade pip, setuptools, wheelpip install flake8 pytest boto3 pytest-covpip install .flake8 .pytest```</longdescription>
</pkgmetadata>