<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://dev.azure.com/asottile/asottile/_apis/build/status/asottile.re-assert?branchName=master)](https://dev.azure.com/asottile/asottile/_build/latest?definitionId=31&amp;branchName=master)[![Azure DevOps coverage](https://img.shields.io/azure-devops/coverage/asottile/asottile/31/master.svg)](https://dev.azure.com/asottile/asottile/_build/latest?definitionId=31&amp;branchName=master)re-assert=========show where your regex match assertion failed!## installation`pip install re-assert`## usage`re-assert` provides a helper class to make assertions of regexes simpler.### `re_assert.Matches(pattern: str, *args, **kwargs)`construct a `Matches` object._note_: under the hood, `re-assert` uses the [`regex`] library for matching,any `*args` / `**kwargs` that `regex.compile` supports will work.  in general, the `regex` library is 100% compatible with the `re` library (and will evenaccept its flags, etc.)[`regex`]: https://pypi.org/project/regex/### `re_assert.Matches.from_pattern(pattern: Pattern[str]) -&gt; Matches`construct a `Matches` object from an already-compiled regex.this is useful (for instance) if you're testing an existing compiled regex.```pycon&gt;&gt;&gt; import re&gt;&gt;&gt; reg = re.compile('foo')&gt;&gt;&gt; Matches.from_pattern(reg) == 'fork'False&gt;&gt;&gt; Matches.from_pattern(reg) == 'food'True```### `Matches.__eq__(other)` (`==`)the equality operator is overridden for use with assertion frameworks suchas pytest```pycon&gt;&gt;&gt; pat = Matches('foo')&gt;&gt;&gt; pat == 'bar'False&gt;&gt;&gt; pat == 'food'True```### `Matches.__repr__()` (`repr(...)`)a side-effect of an equality failure changes the `repr(...)` of a `Matches`object.  this allows for useful pytest assertion messages:```pytest&gt;       assert Matches('foo') == 'fork'E       AssertionError: assert Matches('foo'...ork\n    #    ^ == 'fork'E         -Matches('foo')\nE         -    # regex failed to match at:\nE         -    #\nE         -    #&gt; fork\nE         -    #    ^E         +'fork'```### `Matches.assert_matches(s: str)`if you're using some other test framework, this method is useful for producinga readable traceback```pycon&gt;&gt;&gt; Matches('foo').assert_matches('food')&gt;&gt;&gt; Matches('foo').assert_matches('fork')Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;  File &quot;/home/asottile/workspace/re-assert/re_assert.py&quot;, line 63, in assert_matches    assert self == s, self._failAssertionError:  regex failed to match at:&gt; fork    ^```</longdescription>
</pkgmetadata>