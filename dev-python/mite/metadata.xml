<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Mite[![Python 3.9](https://img.shields.io/badge/python-3.9-blue.svg)](https://www.python.org/downloads/release/python-390/) [![Python 3.10](https://img.shields.io/badge/python-3.10-blue.svg)](https://www.python.org/downloads/release/python-3100/) [![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/sky-uk/mite/blob/master/LICENSE) [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black) [![Docs](https://img.shields.io/badge/docs-read-blue)](https://sky-uk.github.io/mite/)## Load Testing FrameworkMite is a load testing framework with distributed components written in Python.Requests are executed asynchronously, allowing large throughput from relatively small infrastructure.## Installation```bashpython3 -m venv ~/.virtualenvs/mitesource ~/.virtualenvs/mite/bin/activatepip install -r requirements.txt```This requires that you have libcurl installed on your system (including C header files for development, which are often distributed separately from the shared libraries).  On Ubuntu, this can be accomplished with the command:```sudo apt install libcurl4 libcurl4-openssl-dev```(NB we recommend using a version of libcurl linked against opensslrather than gnutls, since the latter has memory leak problems)You can also use the dockerfile included in this repository to runmite.  In order to get a shell in a container with mite installed, runthese commands (assuming you have docker installed on your machine):```docker build -t mite .docker run --rm -it mite sh```Run `mite --help` for a full list of commands## Your first scenarioScenarios are a combination of 3 things, a set of journeys to run, adatapool to provide test data for the journey (if applicable), and avolume model.### JourneysJourneys are async python functions, and are where you put the logic ofwhat you're trying to achieve.  Below is a simple example:```pythonimport asyncioasync def journey(ctx, arg1, arg2):    async with ctx.transaction('test1'):        ctx.send('test_message', content=ctx.config.get('test_msg', 'Not set'), sum=arg1 + arg2)        await asyncio.sleep(0.5)```This journey just sends a log message to be collected by the frameworkand waits for half a second.  This journey takes 3 arguments, a contextand two numbers (which will be supplied by the datapool, see below).#### ContextThe context is important for every journey.  It provides a number ofuseful methods for timing/naming of transactions, sending messages anddefaults to including http functionality from acurl.  Functionality canbe included in the journey by attaching it to the context.In the above example we see an example of naming a transaction `asyncwith ctx.transaction('test1'):`.  This will capture timing for theindented block.We also see that the config is attached to the context with`ctx.config.get('test_msg', 'Not set')` and in this case, the value ofthat config value is sent to the log collector with`ctx.send('test_message', content=ctx.config.get('test_msg', 'Not set'))`### DatapoolsTo feed data into your test journey, you'll need a datapool. Several ofthese are already provided in mite and usually read data in from aniterable. To specify a custom datapool implementation, you simply need aclass that implements a `checkin` method which adds data to the pool anda `checkout` method which removes data from the pool to be used byjourneys.For the above journey, which expects two arguments, we will show anexample of the RecyclableIterableDataPool.```pythonfrom mite.datapools import RecyclableIterableDataPooldatapool = RecyclableIterableDataPool([(i, i+2) for i in range(5000)])```This pool will share data out to runners and check it back in when therunners are done with that block of data.  In this case it cyclesthrough a list of tuples which each contain two integers.### Volume ModelA volume model defines how many instances of the journey should be ranwithin a window of time.  The window is definied as a start and an endtime (measured in seconds since the beginning of the test), which will befed to the model by the framework.  This allows complex calculations tospecify the current volume based on the current time.  The volume modelcan also raise `StopVolumeModel` to inform mite that the load injectionshould stop for a given journey.  For this example we'll use a simplevolume model which merely runs ten journeys simultaneously, forever.```pythonvolumemodel = lambda start, end: 10```### ScenarioWe now need to package the journey, datapool and volume model into ascenario.  This is a simple as defining a function which returnsa list of triplets of (journey name, datapool, volumemodel).```pythondef scenario():    return [        ['mite.example:journey', datapool, volumemodel],    ]```The journey name should be a string with two parts separated by acolon.  The first part is the name of a python module that isimportable; the second is the name of a journey (an async function)within that module.  It is necessary to specify this as a string, ratherthan as a python object, because the journey will be executed in adifferent python process than the scenario function is.  Thus, we need aname for the journey that allows any python process to find it.The volume model and data pool, on the other hand, are only used in thepython process where the scenario function runs.  They are both pythonobjects.### Testing the journeyBefore running the scenario, we should test the journey in isolation asa scenario can be made up of multiple journeys.  This can be done withthe `mite journey test` command.  We just need to pass the name of thejourney and the datapool it requires:```shMITE_CONF_test_msg=&quot;Hello from mite&quot; mite journey test mite.example:journey mite.example:datapool```If something goes wrong, adding the `--debugging` flag to this commandwill drop excution into a debug session. The choice of debugger used can bemanaged by setting the [`PYTHONBREAKPOINT` environment variable](https://www.python.org/dev/peps/pep-0553/#environment-variable)before running mite. Python's built-in [pdb](https://docs.python.org/3/library/pdb.html))debugger is invoked by default, but this can be changed to use, say, the[ipdb debugger](https://github.com/gotcha/ipdb):```pip install ipdbexport PYTHONBREAKPOINT=ipdb.set_traceexport PYTHONPOSTMORTEM=ipdb.post_mortem````PYTHONPOSTMORTEM` is a mite-specific extension to [PEP553](https://www.python.org/dev/peps/pep-0553/) which defines the`PYTHONBREAKPOINT` functionality.### Run the scenarioIn order to run the finished scenario locally, which will include allthe necessary fixtures, run the following command:```shMITE_CONF_test_msg=&quot;Hello from mite&quot; mite scenario test mite.example:scenario```## Distributed deploymentsIn order to scale up miteÊ¼s capability to inject load, you will need torun it as a distributed suite of components.  You can learn more abouthow to accomplish this in the [documentation](https://sky-uk.github.io/mite/design-deployment.html).### Deploy distributed mite with docker composeBuild mite image: ```docker build -t mite .````Run mite deployments:Use `make` from `mite/local` dir:```make up # start mite containersmake status # check status of mite containersmake clean # remove all mite containers```or```docker-compose -f docker_compose.yml up```For more information on distributed mite usage, [info](/local/README.md)## MaintainersIf you run into any trouble or need support getting to grips with Mite,reach out on [Slack](https://sky.slack.com/messages/mite) if you work at Sky, or contact one of the maintainers if you're an external contributer:| [&lt;img src=&quot;https://avatars.githubusercontent.com/jb098&quot; width=100 height=100 alt=&quot;Jordan Brennan&quot; /&gt;&lt;br /&gt;Jordan Brennan](https://github.com/jb098)&lt;br /&gt;&lt;sub&gt;ðŸ’»&lt;/sub&gt; | [&lt;img src=&quot;https://avatars.githubusercontent.com/aecay&quot; width=100 height=100 alt=&quot;Aaron Ecay&quot; /&gt; &lt;br /&gt;Aaron Ecay](https://github.com/aecay)&lt;br /&gt;&lt;sub&gt;ðŸ’»&lt;/sub&gt; | [&lt;img src=&quot;https://avatars.githubusercontent.com/DavAnnunz&quot; width=100 height=100 alt=&quot;Davide Annunziata&quot; /&gt;&lt;br /&gt;Davide Annunziata](https://github.com/DavAnnunz)&lt;br /&gt;&lt;sub&gt;ðŸ’»&lt;/sub&gt; | [&lt;img src=&quot;https://avatars.githubusercontent.com/arroncanhamskyuk&quot; width=100 height=100 alt=&quot;Arron Canham&quot; /&gt;&lt;br /&gt;Arron Canham](https://github.com/arroncanhamskyuk)&lt;br /&gt;&lt;sub&gt;ðŸ’»&lt;/sub&gt; || :---: | :---: | :---: | :---: |**Special thanks to the following contributors:*** [Tony Simpson](https://github.com/tonysimpson)</longdescription>
</pkgmetadata>