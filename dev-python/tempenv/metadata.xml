<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># tempenv[![pypi](https://img.shields.io/pypi/v/tempenv.svg)](https://pypi.python.org/pypi/tempenv)[![Build Status](https://github.com/jeking3/tempenv/actions/workflows/ci.yml/badge.svg)](https://github.com/jeking3/tempenv/actions/workflows/ci.yml)[![codecov](https://codecov.io/gh/jeking3/tempenv/branch/main/graph/badge.svg)](https://codecov.io/gh/jeking3/tempenv)[![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)Manage environment variables in a temporary scope.Some products use environment variables as a primary means to supplycredentials.  To ensure the lifetime of exposed credentials is short,wrap them in a TemporaryEnvironment so that they are automaticallydestroyed on scope exit.You can:- Set or unset environment variables inside a ``with`` code block,- Get a warning if the code block modifies one of the environment  variables,- Optionally bypass restoration of the original environment variable  value if the code block modifies the environment variable.## InstallInstall the latest version of tempenv:```pip install tempenv```## ExamplesEach of these examples can be found in the tests.Set some environment variables temporarily:(see tests/example_set_test.py):```pythondef test_set(self):    user_before = os.environ.get(&quot;USER&quot;)    with TemporaryEnvironment({&quot;USER&quot;: &quot;nobody&quot;, &quot;OTHER&quot;: &quot;foo&quot;}):        assert os.environ.get(&quot;USER&quot;) == &quot;nobody&quot;        assert os.environ.get(&quot;OTHER&quot;) == &quot;foo&quot;    assert os.environ.get(&quot;USER&quot;) == user_before```Changing the value to ``None`` will unset the environment variable duringthe code block(see tests/example_unset_test.py):```pythondef test_unset(self):    os.environ[&quot;DEBUG&quot;] = &quot;1&quot;    with TemporaryEnvironment({&quot;DEBUG&quot;: None}):        assert &quot;DEBUG&quot; not in os.environ    assert &quot;DEBUG&quot; in os.environ```Changing a temporary environment variable during the scope will cause awarning(see tests/example_overwrite_test.py):```pythondef test_overwritten_in_context(self):    with self.assertWarnsRegex(EnvironmentVariableChangedWarning, &quot;FOO&quot;):        with TemporaryEnvironment({&quot;FOO&quot;: &quot;BAR&quot;}):            os.environ[&quot;FOO&quot;] = &quot;SAM&quot;```If you set the optional argument ``restore_if_changed=False`` then a changeduring the scope of the TemporaryEnvironment will not issue a warning and willnot restore to the original value(see tests/example_ignore_test.py):```pythondef test_ignored_overwrite_in_context(self):    os.environ[&quot;FOO&quot;] = &quot;BAR&quot;    with TemporaryEnvironment({&quot;FOO&quot;: &quot;SAM&quot;}, restore_if_changed=False):        os.environ[&quot;FOO&quot;] = &quot;DEAN&quot;    assert os.environ[&quot;FOO&quot;] == &quot;DEAN&quot;```You can use TemporaryEnvironment in a unittest scope as follows(see tests/example_unittest_test.py):```python@TemporaryEnvironment({&quot;USER&quot;: &quot;Crowley&quot;})def test_check(self):    assert os.environ.get(&quot;USER&quot;) == &quot;Crowley&quot;```## LicenseReleased under the Apache Software License, Version 2.0 (see `LICENSE`):```   Copyright (C) 2019 - 2022 James E. King III (@jeking3) &lt;jking@apache.org&gt;```## BugsPlease report any bugs that you find on [GitHub](https://github.com/jeking3/tempenv/issues).Or, even better, fork the repository on [GitHub](https://github.com/jeking3/tempenv)and create a pull request (PR). We welcome all changes, big or small, and wewill help you make the PR if you are new to `git` (just ask on the issue and/orsee `CONTRIBUTING.rst`).</longdescription>
</pkgmetadata>