<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># socketify.py&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/cirospaciari/socketify.py&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cirospaciari/socketify.py/main/misc/logo.png&quot; alt=&quot;Logo&quot; height=170&gt;&lt;/a&gt;  &lt;br /&gt;  &lt;br /&gt;  &lt;a href=&quot;https://github.com/cirospaciari/socketify.py/actions/workflows/linux.yml&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/cirospaciari/socketify.py/actions/workflows/linux.yml/badge.svg&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/cirospaciari/socketify.py/actions/workflows/windows.yml&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/cirospaciari/socketify.py/actions/workflows/windows.yml/badge.svg&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/cirospaciari/socketify.py/actions/workflows/macos.yml&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/cirospaciari/socketify.py/actions/workflows/macos.yml/badge.svg&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/cirospaciari/socketify.py/actions/workflows/macos_arm64.yml&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/cirospaciari/socketify.py/actions/workflows/macos_arm64.yml/badge.svg&quot; /&gt;&lt;/a&gt;  &lt;br/&gt;&lt;a href='https://github.com/cirospaciari/socketify.py'&gt;&lt;img alt='GitHub Clones' src='https://img.shields.io/badge/dynamic/json?color=success&amp;label=Clones&amp;query=count&amp;url=https://gist.githubusercontent.com/cirospaciari/2243d59951f4abe4fd2000f1e20bc561/raw/clone.json&amp;logo=github'&gt;&lt;/a&gt;&lt;a href='https://pypi.org/project/socketify/' target=&quot;_blank&quot;&gt;&lt;img alt='PyPI Downloads' src='https://static.pepy.tech/personalized-badge/socketify?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=brightgreen&amp;left_text=Downloads'&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/sponsors/cirospaciari/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1?label=Sponsor&amp;message=%E2%9D%A4&amp;logo=GitHub&amp;link=https://github.com/sponsors/cirospaciari&quot;/&gt;&lt;/a&gt;&lt;a href='https://discord.socketify.dev/' target=&quot;_blank&quot;&gt;&lt;img alt='Discord' src='https://img.shields.io/discord/1042529276219641906?label=Discord'&gt;&lt;/a&gt;&lt;/p&gt;&lt;div align=&quot;center&quot;&gt;  &lt;a href=&quot;https://docs.socketify.dev&quot;&gt;Documentation&lt;/a&gt;  &lt;span&gt;&amp;nbsp;&amp;nbsp;â€¢&amp;nbsp;&amp;nbsp;&lt;/span&gt;  &lt;a href=&quot;https://discord.socketify.dev/&quot;&gt;Discord&lt;/a&gt;  &lt;span&gt;&amp;nbsp;&amp;nbsp;â€¢&amp;nbsp;&amp;nbsp;&lt;/span&gt;  &lt;a href=&quot;https://github.com/cirospaciari/socketify.py/issues&quot;&gt;Issues&lt;/a&gt;  &lt;span&gt;&amp;nbsp;&amp;nbsp;â€¢&amp;nbsp;&amp;nbsp;&lt;/span&gt;  &lt;a href=&quot;https://github.com/cirospaciari/socketify.py/tree/main/examples&quot;&gt;Examples&lt;/a&gt;  &lt;br /&gt;&lt;/div&gt;## ðŸ’¡ Features- WebSocket with pub/sub support- Fast and reliable Http/Https- Support for Windows, Linux and macOS Silicon &amp; x64- Support for [`PyPy3`](https://www.pypy.org/) and [`CPython`](https://github.com/python/cpython)- Dynamic URL Routing with Wildcard &amp; Parameter support- Sync and Async Function Support- Really Simple API- Fast and Encrypted TLS 1.3 quicker than most alternative servers can do even unencrypted, cleartext messaging- Per-SNI HttpRouter Support- Proxy Protocol v2- Shared or Dedicated Compression Support- Max Backpressure, Max Timeout, Max Payload and Idle Timeout Support- Automatic Ping / Pong Support- Per Socket Data- [`Middlewares`](https://docs.socketify.dev/middlewares.html)- [`Templates`](https://docs.socketify.dev/templates.html) Support (examples with [`Mako`](https://github.com/cirospaciari/socketify.py/tree/main/examples/template_mako.py) and [`Jinja2`](https://github.com/cirospaciari/socketify.py/tree/main/examples/template_jinja2.py))- [`ASGI Server`](https://docs.socketify.dev/cli.html)- [`WSGI Server`](https://docs.socketify.dev/cli.html)- [`Plugins/Extensions`](https://docs.socketify.dev/extensions.html)## :mag_right: Upcoming Features- In-Memory Cache Tools- Fetch like API powered by libuv- Async file IO powered by libuv- Full asyncio integration with libuv- SSGI Server spec and support- RSGI Server support- Full Http3 support- [`HPy`](https://hpyproject.org/) integration to better support [`CPython`](https://github.com/python/cpython), [`PyPy`](https://www.pypy.org/) and [`GraalPython`](https://github.com/oracle/graalpython)- Hot ReloadingWe created and adapted the full C API from [uNetworking/uWebSockets](https://github.com/uNetworking/uWebSockets) and will integrate libuv powered fetch and file IO, this same C API is used by [Bun](https://bun.sh/)Join Github [`Discussions`](https://github.com/cirospaciari/socketify.py/discussions) or [`Discord`](https://discord.socketify.dev/) for help and have a look at the development progress.## :zap: BenchmarksSocketify WebFramework HTTP requests per second (Linux x64)![image](https://raw.githubusercontent.com/cirospaciari/socketify.py/main/misc/bench-bar-graph-general.png)WSGI Server requests per second (Linux x64)![image](https://raw.githubusercontent.com/cirospaciari/socketify.py/main/misc/bench-bar-graph-wsgi.png)ASGI Server requests per second (Linux x64)![image](https://raw.githubusercontent.com/cirospaciari/socketify.py/main/misc/bench-bar-graph-asgi.png)WebSocket messages per second (Linux x64)![image](https://raw.githubusercontent.com/cirospaciari/socketify.py/main/misc/bench-bar-graph-websockets.png)Http tested with TFB tool plaintext benchmark&lt;br/&gt;WebSocket tested with [Bun.sh](https://bun.sh) bench chat-client &lt;br/&gt;Source code in [TechEmPower](https://github.com/TechEmpower/FrameworkBenchmarks) and for websockets in [bench](https://github.com/cirospaciari/socketify.py/tree/main/bench)&lt;br/&gt;Machine OS: Debian GNU/Linux bookworm/sid x86_64 Kernel: 6.0.0-2-amd64 CPU: Intel i7-7700HQ (8) @ 3.800GHz Memory: 32066MiB ## ðŸ“¦ InstallationFor macOS x64 &amp; Silicon, Linux x64, Windows```bashpip install socketify#or specify PyPy3pypy3 -m pip install socketify#or in editable modepypy3 -m pip install -e socketify```Using install via requirements.txt```textsocketify``````bashpip install -r ./requirements.txt #or specify PyPy3pypy3 -m pip install -r ./requirements.txt ```If you are using linux or macOS, you may need to install libuv and zlib in your systemmacOS```bashbrew install libuvbrew install zlib```Linux```bashapt install libuv1 zlib1g```## ðŸ¤” UsageHello world app```pythonfrom socketify import Appapp = App()app.get(&quot;/&quot;, lambda res, req: res.end(&quot;Hello World socketify from Python!&quot;))app.listen(3000, lambda config: print(&quot;Listening on port http://localhost:%d now\n&quot; % config.port))app.run()```SSL version sample``` pythonfrom socketify import App, AppOptionsapp = App(AppOptions(key_file_name=&quot;./misc/key.pem&quot;, cert_file_name=&quot;./misc/cert.pem&quot;, passphrase=&quot;1234&quot;))app.get(&quot;/&quot;, lambda res, req: res.end(&quot;Hello World socketify from Python!&quot;))app.listen(3000, lambda config: print(&quot;Listening on port http://localhost:%d now\n&quot; % config.port))app.run()```WebSockets```pythonfrom socketify import App, AppOptions, OpCode, CompressOptionsdef ws_open(ws):    print('A WebSocket got connected!')    ws.send(&quot;Hello World!&quot;, OpCode.TEXT)def ws_message(ws, message, opcode):    #Ok is false if backpressure was built up, wait for drain    ok = ws.send(message, opcode)    app = App()    app.ws(&quot;/*&quot;, {    'compression': CompressOptions.SHARED_COMPRESSOR,    'max_payload_length': 16 * 1024 * 1024,    'idle_timeout': 12,    'open': ws_open,    'message': ws_message,    'drain': lambda ws: print(f'WebSocket backpressure: {ws.get_buffered_amount()}'),    'close': lambda ws, code, message: print('WebSocket closed'),    'subscription': lambda ws, topic, subscriptions, subscriptions_before: print(f'subscription/unsubscription on topic {topic} {subscriptions} {subscriptions_before}'),})app.any(&quot;/&quot;, lambda res,req: res.end(&quot;Nothing to see here!'&quot;))app.listen(3000, lambda config: print(&quot;Listening on port http://localhost:%d now\n&quot; % (config.port)))app.run()```We have more than 20 examples [click here](https://github.com/cirospaciari/socketify.py/tree/main/examples) for more## :hammer: Building from source```bash#clone and update submodulesgit clone https://github.com/cirospaciari/socketify.py.gitcd ./socketify.pygit submodule update --init --recursive --remote#you can use make linux, make macos or call Make.bat from Visual Studio Development Prompt to buildcd ./src/socketify/native/ &amp;&amp; make linux &amp;&amp; cd ../../../#install local pippypy3 -m pip install .#install in editable modepypy3 -m pip install -e .#if you want to removepypy3 -m pip uninstall socketify```## :briefcase: Commercially supportedI'm a Brazilian consulting &amp; contracting company dealing with anything related with [socketify.py](https://github.com/cirospaciari/socketify.py) and [socketify.rb](https://github.com/cirospaciari/socketify.rb)Don't hesitate sending a mail if you are in need of advice, support, or having other business inquiries in mind. We'll figure out what's best for both parties.Special thank's to [uNetworking AB](https://github.com/uNetworking) to develop [uWebSockets](https://github.com/uNetworking/uWebSockets), [uSockets](https://github.com/uNetworking/uSockets) and allow us to bring this features and performance to Python and PyPy## :heart: SponsorsIf you like to see this project thrive, you can sponsor us on GitHub too. We need all the help we can get.Thank you [`Otavio Augusto`](https://github.com/middlebaws) to be the first sponsor of this project!&lt;a href=&quot;https://github.com/sponsors/cirospaciari/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1?label=Sponsor&amp;message=%E2%9D%A4&amp;logo=GitHub&amp;link=https://github.com/sponsors/cirospaciari&quot;/&gt;&lt;/a&gt;## :star: Stargazers[![Stargazers repo roster for @cirospaciari/socketify.py](https://reporoster.com/stars/dark/cirospaciari/socketify.py)](https://github.com/cirospaciari/socketify.py/stargazers)## :wrench: Forkers[![Forkers repo roster for @cirospaciari/socketify.py](https://reporoster.com/forks/dark/cirospaciari/socketify.py)](https://github.com/cirospaciari/socketify.py/network/members)## :grey_question: uvloopWe don't use uvloop, because uvloop don't support Windows and PyPy3 at this moment, this can change in the future, but right now we want to implement our own libuv + asyncio solution, and a lot more.## :dizzy: CFFI vs Cython vs HPyCython performs really well on Python3 but really bad on PyPy3, CFFI are chosen for better support PyPy3 until we got our hands on a stable [`HPy`](https://hpyproject.org/) integration.</longdescription>
</pkgmetadata>