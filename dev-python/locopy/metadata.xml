<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://github.com/capitalone/locopy/workflows/Python%20package/badge.svg    :target: https://github.com/capitalone/locopy/actions.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/ambv/blacklocopy: Data Load and Copy using Python========================================A Python library to assist with ETL processing for:- Amazon Redshift (``COPY``, ``UNLOAD``)- Snowflake (``COPY INTO &lt;table&gt;``, ``COPY INTO &lt;location&gt;``)In addition:- The library supports Python 3.8 to 3.10- DB Driver (Adapter) agnostic. Use your favourite driver that complies with  `DB-API 2.0 &lt;https://www.python.org/dev/peps/pep-0249/&gt;`_- It provides functionality to download and upload data to S3 buckets, and internal stages (Snowflake)Quick Installation==================.. code-block:: bash    pip install locopyor install from conda-forge.. code-block:: bash    conda config --add channels conda-forge    conda install locopyInstallation instructions-------------------------A virtual or conda environment is highly recommended.. code-block:: bash    $ virtualenv locopy    $ source locopy/bin/activate    $ pip install --upgrade setuptools pip    $ pip install locopyPython Database API Specification 2.0-------------------------------------Rather than using a specific Python DB Driver / Adapter for Postgres (which should supports AmazonRedshift or Snowflake), ``locopy`` prefers to be agnostic. As an end user you can use any PythonDatabase API Specification 2.0 package.The following packages have been tested:- ``psycopg2``- ``pg8000``- ``snowflake-connector-python``You can use which ever one you prefer by importing the package and passing itinto the constructor input ``dbapi``.Usage-----You need to store your connection parameters in a YAML file (or pass them in directly).The YAML would consist of the following items:.. code-block:: yaml    # required to connect to redshift    host: my.redshift.cluster.com    port: 5439    database: db    user: userid    password: password    ## optional extras for the dbapi connector    sslmode: require    another_option: 123If you aren't loading data, you don't need to have AWS tokens set up.The Redshift connection (``Redshift``) can be used like this:.. code-block:: python    import pg8000    import locopy    with locopy.Redshift(dbapi=pg8000, config_yaml=&quot;config.yml&quot;) as redshift:        redshift.execute(&quot;SELECT * FROM schema.table&quot;)        df = redshift.to_dataframe()    print(df)If you want to load data to Redshift via S3, the ``Redshift`` class inherits from ``S3``:.. code-block:: python    import pg8000    import locopy    with locopy.Redshift(dbapi=pg8000, config_yaml=&quot;config.yml&quot;) as redshift:        redshift.execute(&quot;SET query_group TO quick&quot;)        redshift.execute(&quot;CREATE TABLE schema.table (variable VARCHAR(20)) DISTKEY(variable)&quot;)        redshift.load_and_copy(            local_file=&quot;example/example_data.csv&quot;,            s3_bucket=&quot;my_s3_bucket&quot;,            table_name=&quot;schema.table&quot;,            delim=&quot;,&quot;)        redshift.execute(&quot;SELECT * FROM schema.table&quot;)        res = redshift.cursor.fetchall()    print(res)If you want to download data from Redshift to a CSV, or read it into Python.. code-block:: python    my_profile = &quot;some_profile_with_valid_tokens&quot;    with locopy.Redshift(dbapi=pg8000, config_yaml=&quot;config.yml&quot;, profile=my_profile) as redshift:        ##Optionally provide export if you ALSO want the exported data copied to a flat file        redshift.unload_and_copy(            query=&quot;SELECT * FROM schema.table&quot;,            s3_bucket=&quot;my_s3_bucket&quot;,            export_path=&quot;my_output_destination.csv&quot;)Note on tokens^^^^^^^^^^^^^^To load data to S3, you will need to be able to generate AWS tokens, or assume the IAM role on a EC2instance. There are a few options for doing this, depending on where you're running your script andhow you want to handle tokens. Once you have your tokens, they need to be accessible to the AWScommand line interface. Seehttp://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#config-settings-and-precedencefor more information, but you can:- Populate environment variables ``AWS_ACCESS_KEY_ID``, ``AWS_SECRET_ACCESS_KEY``,  etc.- Leverage the AWS credentials file.  If you have multiple profiles configured  you can either call ``locopy.Redshift(profile=&quot;my-profile&quot;)``, or set up an  environment variable ``AWS_DEFAULT_PROFILE``.- If you are on a EC2 instance you can assume the credentials associated with the IAM role attached.Advanced Usage--------------See the `docs &lt;https://capitalone.github.io/locopy/&gt;`_ formore detailed usage instructions and examples including Snowflake.Contributors------------We welcome and appreciate your contributions! Before we can accept any contributions, we ask that you please be sure tosign the `Contributor License Agreement (CLA) &lt;https://cla-assistant.io/capitalone/locopy&gt;`_.This project adheres to the `Open Source Code of Conduct &lt;https://developer.capitalone.com/resources/code-of-conduct/&gt;`_.By participating, you are expected to honor this code.Roadmap-------Roadmap details can be found `here &lt;https://github.com/capitalone/locopy/blob/develop/ROADMAP.rst&gt;`_</longdescription>
</pkgmetadata>