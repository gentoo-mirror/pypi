<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `pydantic-kedro`Advanced serialization for [Pydantic](https://docs.pydantic.dev/) modelsvia [Kedro](https://kedro.readthedocs.io/en/stable/index.html) and[fsspec](https://filesystem-spec.readthedocs.io/en/latest/).This package implements custom Kedro &quot;datasets&quot; for both &quot;pure&quot; and &quot;arbitrary&quot;Pydantic models. You can also use it stand-alone, using Kedro just forserializing other object types.Please see the [documentation](https://pydantic-kedro.rtfd.io) for a tutorialand more examples.## Usage with KedroYou can use the [PydanticAutoDataSet][pydantic_kedro.PydanticAutoDataSet]or any other dataset from `pydantic-kedro` within your[Kedro catalog](https://docs.kedro.org/en/stable/get_started/kedro_concepts.html#data-catalog)to save your Pydantic models:```yaml# conf/base/catalog.ymlmy_pydantic_model: type: pydantic_kedro.PydanticAutoDataSet filepath: folder/my_model```## Direct Dataset UsageThis example works for &quot;pure&quot;, JSON-safe Pydantic models via`PydanticJsonDataSet`:```pythonfrom pydantic import BaseModelfrom pydantic_kedro import PydanticJsonDataSetclass MyPureModel(BaseModel):    &quot;&quot;&quot;Your custom Pydantic model with JSON-safe fields.&quot;&quot;&quot;    x: int    y: strobj = MyPureModel(x=1, y=&quot;why?&quot;)# Create an in-memory (temporary) file via `fsspec` and save itds = PydanticJsonDataSet(&quot;memory://temporary-file.json&quot;)ds.save(obj)# We can re-load it from the same fileread_obj = ds.load()assert read_obj.x == 1```## Standalone UsageYou can also use `pydantic-kedro` as a generic saving and loading engine forPydantic models:```pythonfrom tempfile import TemporaryDirectoryfrom pydantic import BaseModelfrom pydantic_kedro import load_model, save_modelclass MyModel(BaseModel):    &quot;&quot;&quot;My custom model.&quot;&quot;&quot;    name: str# We can use any fsspec URL, so we'll make a temporary folderwith TemporaryDirectory() as tmpdir:    save_model(MyModel(name=&quot;foo&quot;), f&quot;{tmpdir}/my_model&quot;)    obj = load_model(f&quot;{tmpdir}/my_model&quot;)    assert obj.name == &quot;foo&quot;```</longdescription>
</pkgmetadata>