<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Graphene-PynamoDB |Build Status| |Coverage Status| |PyPI version|=================================================================================A `PynamoDB &lt;http://pynamodb.readthedocs.io/&gt;`__ integration for`Graphene &lt;http://graphene-python.org/&gt;`__.Installation------------For instaling graphene, just run this command in your shell.. code:: bash    pip install graphene-pynamodbExamples--------Here is a simple PynamoDB model:.. code:: python    from uuid import uuid4    from pynamodb.attributes import UnicodeAttribute    from pynamodb.models import Model    class User(Model):        class Meta:            table_name = &quot;my_users&quot;            host = &quot;http://localhost:8000&quot;        id = UnicodeAttribute(hash_key=True)        name = UnicodeAttribute(null=False)    if not User.exists():        User.create_table(read_capacity_units=1, write_capacity_units=1, wait=True)        User(id=str(uuid4()), name=&quot;John Snow&quot;).save()        User(id=str(uuid4()), name=&quot;Daenerys Targaryen&quot;).save()To create a GraphQL schema for it you simply have to write thefollowing:.. code:: python    import graphene    from graphene_pynamodb import PynamoObjectType    class UserNode(PynamoObjectType):        class Meta:            model = User            interfaces = (graphene.Node,)    class Query(graphene.ObjectType):        users = graphene.List(UserNode)        def resolve_users(self, args, context, info):            return list(User.scan())    schema = graphene.Schema(query=Query)Then you can simply query the schema:.. code:: python    query = '''        query {          users {            name          }        }    '''    result = schema.execute(query)To learn more check out the following`examples &lt;https://github.com/yfilali/graphql-pynamodb/tree/master/examples/&gt;`__:-  **Full example**: `Flask PynamoDB   example &lt;https://github.com/yfilali/graphql-pynamodb/tree/master/examples/flask_pynamodb&gt;`__Limitations-----------graphene-pynamodb includes a basic implementation of relationships usinglists. OneToOne and OneToMany relationships are serialized as a List ofthe ids and unserialized lazyly. The limit for an item's size inDynamoDB is 400KB (seehttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html)This means the total &quot;row&quot; size including the serialized relationshipneeds to fit within 400KB so make sure to use this accordingly.In addition, scan operations on DynamoDB are unsorted by design. Thismeans that there is no reliable way to get a paginated result (Cursorsupport) on a root PynamoConnectionField.This means that if you need to paginate items, it is best to have themas a OneToMany relationship inside another Field (usually viewer ornode).Contributing------------After cloning `thisrepo &lt;https://github.com/yfilali/graphql-pynamodb&gt;`__, ensuredependencies are installed by running:.. code:: sh    python setup.py installAfter developing, the full test suite can be evaluated by running:.. code:: sh    python setup.py test # Use --pytest-args=&quot;-v -s&quot; for verbose mode.. |Graphene Logo| image:: http://graphene-python.org/favicon.png.. |Build Status| image:: https://travis-ci.org/yfilali/graphql-pynamodb.svg?branch=master   :target: https://travis-ci.org/yfilali/graphql-pynamodb.. |Coverage Status| image:: https://coveralls.io/repos/github/yfilali/graphql-pynamodb/badge.svg?branch=master   :target: https://coveralls.io/github/yfilali/graphql-pynamodb?branch=master.. |PyPI version| image:: https://badge.fury.io/py/graphene-pynamodb.svg   :target: https://badge.fury.io/py/graphene-pynamodb</longdescription>
</pkgmetadata>