<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyrinA rich, fast, performant and easy to use application framework to build apps using Flask on top of it.Pyrin is an application framework built on top of Flask micro-framework to make life easier for developers who want to develop an enterprise application using Flask, without having to make their own core layer and getting better codedesign and structure that is more maintainable.Pyrin could be used as the parent package of an application, so other application packages will use its functionality and features to maintain their goals without worrying about basic implementations.It is also possible for application packages to extend existing Pyrin packages.Pyrin point of view is to build an application which is more decoupled, so making it possible to have customized implementations of different packages and also making it easier to write unit-test packages.Another major fact of Pyrin is to avoid centralized locations for application features, so a teamof multiple developers be able to work on the same repository without facing conflicts hereand there. Also reducing the chances of annoying bugs due to forgetting to registersomething in somewhere.## Installing**Install using pip**:**`pip install pyrin`**## Running TestsTo be able to run tests:1. Pyrin tests are developed using pytest, you should first    install pyrin tests dependencies using pip:   **`pip install pyrin[tests]`**2. Now you could execute **`python3 start_unit.py`** to start all unit tests.## Demo ApplicationA demo application developed using Pyrin framework is available at: [Pyrin-Demo](https://github.com/mononobi/pyrin_demo)## Contribute In Pyrin DevelopmentWe highly appreciate any kind of contributions to Pyrin development.Fork Pyrin and implement a new feature and make a pull request, we'll letyou know when your work becomes a part of Pyrin.So, open the project in your IDE and create your pipenv environment.Then you could start developing Pyrin.## Extremely Simple Usage ExampleThe sample code below, is just a rapid showcase on how to develop using Pyrin. for a real world application, it is best fit to use the concept of dependency injection and IoC which Pyrin is built upon.To be able to create an application based on Pyrin, the only thing that is required to dois to subclass from pyrin **`Application`** class in your application package. this is needed for Pyrin to be able to find out your application path for generating different paths and also loading your application packages. there is no difference where to put your subclassed **`Application`**, in this example we put it inside the project's main package, inside **`__init__.py`**.**Sample Project Structure:**- root_dir  - demo    - `__init__.py`    - `api.py`    - `models.py`  - `start.py`**`__init__.py:`**```pythonfrom pyrin.application.base import Applicationclass DemoApplication(Application):    pass```**`models.py:`**```pythonfrom pyrin.database.model.declarative import CoreEntityfrom pyrin.database.orm.sql.schema.columns import GUIDPKColumn, StringColumn, SmallIntegerColumnclass GuestEntity(CoreEntity):    _table = 'guest'    id = GUIDPKColumn(name='id')    name = StringColumn(name='name', max_length=100, validated=True)    age = SmallIntegerColumn(name='age', min_value=1, validated=True)```**`api.py:`**```pythonfrom pyrin.api.router.decorators import apifrom pyrin.core.structs import DTOfrom pyrin.database.services import get_current_storefrom demo.models import GuestEntity@api('/introduce/&lt;name&gt;', authenticated=False)def introduce(name, **options):    &quot;&quot;&quot;    introduce yourself to us.    ---    parameters:      - name: name        type: string        description: your name    responses:      200:        schema:          type: string          description: a welcome note    &quot;&quot;&quot;    store = get_current_store()    guest = GuestEntity(name=name)    store.add(guest)    return 'Hello dear {name}, you have been added into our database.'.format(name=name)@api('/guests', authenticated=False)def guests(**options):    &quot;&quot;&quot;    gets the list of all guests.    ---    responses:      200:        schema:          type: array          items:            type: object            properties:              id:                type: string                format: uuid                description: id of guest              name:                type: string                description: name of guest              age:                type: integer                description: age of guest.    &quot;&quot;&quot;    store = get_current_store()    return store.query(GuestEntity).all()@api('/', authenticated=False)def hello(**options):    &quot;&quot;&quot;    shows the welcome message.    ---    responses:      200:        schema:          properties:            message:              type: string              description: welcome message            current_guests:              type: integer              description: count of current guests    &quot;&quot;&quot;    store = get_current_store()    count = store.query(GuestEntity.id).count()    result = DTO(message='Welcome to our demo application, please introduce yourself.',                 current_guests=count)    return result```**`start.py:`**```pythonfrom demo import DemoApplicationif __name__ == '__main__':    app = DemoApplication()    app.run(use_reloader=False)```Now you could start application by executing this command in your terminal:**`python3 start.py`**Application will be available at **`127.0.0.1:5000`** by default.Pyrin on default configurations, will use an **`in-memory sqlite`** database.## Creating a New Pyrin ProjectPyrin has a command line tool that can be used to create a new project.to use the command line interface of Pyrin, install Pyrin and then open a terminal and write:```shellpyrin project```after hitting enter, a couple of questions will be asked to create your project, answerquestions accordingly, and your project will be created without a hassle.## Using Project's Extended Command Line ToolAfter creating a new project using **`pyrin project`** command, a **`cli.py`** file will be generated in the root of your new project directory. there are a couple of command groups that can be used to perform different actions. execute each command with **`--help`** option to see all available commands of each group.- **Builtin Commands:**  - **`python cli.py alembic`**  - **`python cli.py babel`**  - **`python cli.py template`**  - **`python cli.py security`**    - **Integration Commands:**  - **`python cli.py celery`**## IntegrationsPyrin has builtin integrations for different services. to use each one of integrations insideyour application, you must install dependencies of that integration.**Celery:****`pip install pyrin[celery]`**To enable celery after installing its dependencies, open **`settings/packaging.ini`** fileand remove **`pyrin.task_queues.celery`** from the **`ignored_packages`** list.**Sentry:****`pip install pyrin[sentry]`**To enable sentry after installing its dependencies, open **`settings/packaging.ini`** fileand remove **`pyrin.logging.sentry`** from the **`ignored_packages`** list.**Redis:****`pip install pyrin[redis]`**To enable redis after installing its dependencies, open **`settings/packaging.ini`** fileand remove **`pyrin.caching.remote.handlers.redis`** from the **`ignored_modules`** list.**Memcached:****`pip install pyrin[memcached]`**To enable memcached after installing its dependencies, open **`settings/packaging.ini`** fileand remove **`pyrin.caching.remote.handlers.memcached`** from the **`ignored_modules`** list.## Built-in Swagger UI SupportPyrin has built-in support for Swagger UI thanks to [Flasgger](https://github.com/flasgger/flasgger).all of your api services are available on swagger without anything needed to be done.but you can enhance Swagger UI of your application by setting a good **`yaml`**docstring for your api method views.You can head over to **`127.0.0.1:5000/swagger`** to test the Swagger UI.## InspirationThis project is inspired by the awesome **`Deltapy`** framework by:- [@abisxir](https://github.com/abisxir)- [@mvavesal](https://github.com/mvavesal)Unfortunately I couldn't find any links to it online.## Hint`Pyrin` is a greek word and means core.</longdescription>
</pkgmetadata>