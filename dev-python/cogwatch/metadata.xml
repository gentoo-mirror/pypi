<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;Cog Watch&lt;/h1&gt;    &lt;div align=&quot;center&quot;&gt;  &lt;strong&gt;&lt;i&gt;Automatic hot-reloading for your discord.py command files.&lt;/i&gt;&lt;/strong&gt;  &lt;br /&gt;  &lt;br /&gt;    &lt;a href=&quot;https://pypi.org/project/cogwatch&quot;&gt;    &lt;img      src=&quot;https://img.shields.io/pypi/v/cogwatch?color=0073B7&amp;label=Latest&amp;style=for-the-badge&quot;      alt=&quot;Version&quot; /&gt;  &lt;/a&gt;    &lt;a href=&quot;https://python.org&quot;&gt;    &lt;img      src=&quot;https://img.shields.io/pypi/pyversions/cogwatch?color=0073B7&amp;style=for-the-badge&quot;      alt=&quot;Python Version&quot; /&gt;  &lt;/a&gt;&lt;/div&gt;&lt;br /&gt;`cogwatch` is a utility that you can plug into your `discord.py` bot *(orvarious supported bot libraries)* that will watch your command files directory*(cogs)* and automatically reload them as you modify or move them around inreal-time.No more reloading your commands manually every time you edit an embed just tomake sure it looks perfect!&lt;img align=&quot;center&quot; src=&quot;assets/example.png&quot; alt=&quot;&quot;&gt; &lt;br /&gt;## Features- Automatically reloads commands in real-time as you edit them *(no !reload  &lt;command_name&gt; needed)*.- Optionally handles the loading of all your commands on start-up *(removes  boilerplate)*.## Supported Libraries`cogwatch` *should* work with any library that forked from `discord.py`.However, these libraries have been explicitly tested to work:- [discord.py](https://discordpy.readthedocs.io/en/stable/)- [nextcord](https://docs.nextcord.dev/en/stable/)- [discord4py](https://docs.discord4py.dev/en/developer/)- [disnake](https://disnake.readthedocs.io/en/latest/)- [pycord](https://docs.pycord.dev/en/stable/)## Getting StartedYou can install the library with `pip install cogwatch`.Import the `watch` decorator and apply it to your `on_ready` method and let themagic take effect.See the [examples](/examples) directory for more details.```pythonimport asynciofrom discord.ext import commandsfrom cogwatch import watchclass ExampleBot(commands.Bot):    def __init__(self):        super().__init__(command_prefix='!')    @watch(path='commands', preload=True) # This is all you need to add.    async def on_ready(self):        print('Bot ready.')    async def on_message(self, message):        if message.author.bot:            return        await self.process_commands(message)async def main():    client = ExampleBot()    await client.start('YOUR_TOKEN_GOES_HERE')if __name__ == '__main__':    asyncio.run(main())```## ConfigurationThese options can be passed to the decorator *(or the class if manuallyinitializing)*:`path`: Path of the directory where your command files exist; cogwatch willwatch recursively within this directory. **Defaults to 'commands'**.`preload`: Whether to detect and load all cogs on start. **Defaults to False.**`colors`: Whether to use colorized terminal outputs or not. **Defaults toTrue.**`default_logger`: Whether to use the default logger *(to sys.stdout)* or not.**Defaults to True.**`loop`: Custom event loop. **Defaults to the current running event loop.**`debug`: Whether to run the bot only when the Python **\_\_debug\_\_** flag isTrue. **Defaults to True.****NOTE:** `cogwatch` will only run if the **\_\_debug\_\_** flag is set onPython. You can read more about that[here](https://docs.python.org/3/library/constants.html). In short, unless yourun Python with the *-O* flag from your command line, **\_\_debug\_\_** will be**True**. If you just want to bypass this feature, pass in `debug=False` and itwon't matter if the flag is enabled or not.## LoggingBy default, the utility has a logger configured so users can get output to theconsole. You can disable this by passing in `default_logger=False`. If you wantto hook into the logger -- for example, to pipe your output to another terminalor `tail` a file -- you can set up a custom logger like so:```pythonimport loggingimport syswatch_log = logging.getLogger('cogwatch')watch_log.setLevel(logging.INFO)watch_handler = logging.StreamHandler(sys.stdout)watch_handler.setFormatter(logging.Formatter('[%(name)s] %(message)s'))watch_log.addHandler(watch_handler)```## Licensecogwatch is available under the **[MIT License](/LICENSE)**.</longdescription>
</pkgmetadata>