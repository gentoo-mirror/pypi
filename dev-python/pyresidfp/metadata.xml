<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyresidfpEmulates the SID sound-chip in software. The C++ emulation code was copied over from[libsidplayfp](https://github.com/libsidplayfp/libsidplayfp).## How to installRequirements:- compiler for ISO C++11- Python 3 and header files### From PyPIInstall the latest version using```commandlinepython -m pip install pyresidfp```### From cloned git repository Build from source and install using```commandlinepython -m pip install .```## ExampleFor the example, [NumPy](http://www.numpy.org/) and [soundcard](https://github.com/bastibe/SoundCard) python packagesare required. The example is ported from the section *Sample Sound Program*,[Commodore 64 User's Guide](https://archive.org/embed/Commodore_64_Users_Guide_1982_Commodore), page 80:```pythonfrom datetime import timedeltaimport numpy as npimport soundcard as scfrom pyresidfp import SoundInterfaceDevice, Voice, ControlBits, Tone# program SIDsid = SoundInterfaceDevice()sid.Filter_Mode_Vol = 15             # Maximum volumesid.attack_decay(Voice.ONE, 190)     # 800 ms attack, 15 s decaysid.sustain_release(Voice.ONE, 248)  # sustain peak, 300 ms releasesid.tone(Voice.ONE, Tone.C4)sid.control(Voice.ONE, ControlBits.TRIANGLE | ControlBits.GATE)# sample attack phaseattack_phase = timedelta(seconds=0.32)raw_samples = sid.clock(attack_phase)# reprogram SID for release phase and samplerelease_phase = timedelta(seconds=0.3)sid.control(Voice.ONE, ControlBits.TRIANGLE)raw_samples.extend(sid.clock(release_phase))# convert audio format and playsamples = np.array(raw_samples, dtype=np.float32) / 2.0**15spkr = sc.default_speaker()spkr.play(data=samples, samplerate=int(sid.sampling_frequency), channels=1)```## CreditsWe like to thank all contributors of `libsidplayfp`, especially:- Dag Lem: Designed and programmed complete emulation engine.- Antti S. Lankila: Distortion simulation and calculation of combined waveforms- Ken HÃ¤ndel: source code conversion to Java- Leandro Nini: port to c++, merge with reSID 1.0</longdescription>
</pkgmetadata>