<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![ANYKS Smart language model](https://raw.githubusercontent.com/anyks/alm/master/site/img/banner.jpg)](https://anyks.com)# ANYKS Language Model (ALM)## Project goals and featuresThe are many toolkits capable of creating language models: ([KenLM](https://github.com/kpu/kenlm), [SriLM](https://github.com/BitMindLab/SRILM), [IRSTLM](https://github.com/irstlm-team/irstlm)), and each of those toolkits may have a reason to exist. But our language model creation toolkit has the following goals and features:- **UTF-8 support**: Full UTF-8 support without third-party dependencies.- **Support of many data formats**: ARPA, Vocab, Map Sequence, N-grams, Binary alm dictionary.- **Smoothing algorithms**: Kneser-Nay, Modified Kneser-Nay, Witten-Bell, Additive, Good-Turing, Absolute discounting.- **Normalisation and preprocessing for corpora**: Transferring corpus to lowercase, smart tokenization, ability to create black - and white - lists for n-grams.- **ARPA modification**: Frequencies and n-grams replacing, adding new n-grams with frequencies, removing n-grams.- **Pruning**: N-gram removal based on specified criteria.- **Removal of low-probability n-grams**: Removal of n-grams which backoff probability is higher than standard probability.- **ARPA recovery**: Recovery of damaged n-grams in ARPA with subsequent recalculation of their backoff probabilities.- **Support of additional word features**: Feature extraction: (numbers, roman numbers, ranges of numbers, numeric abbreviations, any other custom attributes) using scripts written in Python3.- **Text preprocessing**: Unlike all other language model toolkits, ALM can extract correct context from files with unnormalized texts.- **Unknown word token accounting**: Accounting of 〈unk〉 token as full n-gram.- **Redefinition of 〈unk〉 token**: Ability to redefine an attribute of an unknown token.- **N-grams preprocessing**: Ability to pre-process n-grams before adding them to ARPA using custom Python3 scripts.- **Binary container for Language Models**: The binary container supports compression, encryption and installation of copyrights.- **Convenient visualization of the Language model assembly process**: ALM implements several types of visualizations: textual, graphic, process indicator, and logging to files or console.- **Collection of all n-grams**: Unlike other language model toolkits, ALM is guaranteed to extract all possible n-grams from the corpus, regardless of their length (except for Modified Kneser-Nay); you can also force all n-grams to be taken into account even if they occured only once.## Requirements- [Zlib](http://www.zlib.net)- [OpenSSL](https://www.openssl.org)- [Python3](https://www.python.org/download/releases/3.0)- [NLohmann::json](https://github.com/nlohmann/json)- [BigInteger](http://mattmccutchen.net/bigint)## Install PyBind11```bash$ python3 -m pip install pybind11```## Description of Methods### Methods:- **idw** - Word ID retrieval method- **idt** - Token ID retrieval method- **ids** - Sequence ID retrieval method### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;hello&quot;)313191024&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;&lt;s&gt;&quot;)1&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;&lt;/s&gt;&quot;)22&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;&lt;unk&gt;&quot;)3&gt;&gt;&gt;&gt;&gt;&gt; alm.idt(&quot;1424&quot;)2&gt;&gt;&gt;&gt;&gt;&gt; alm.idt(&quot;hello&quot;)0&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;Living&quot;)13268942501&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;in&quot;)2047&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;the&quot;)83201&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;USA&quot;)72549&gt;&gt;&gt;&gt;&gt;&gt; alm.ids([13268942501, 2047, 83201, 72549])16314074810955466382```### Description| Name      | Description                                                                                                                                           ||-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------||〈s〉       | Sentence beginning token                                                                                                                              ||〈/s〉      | Sentence end token                                                                                                                                    ||〈url〉     | URL-address token                                                                                                                                     ||〈num〉     | Number (arabic or roman) token                                                                                                                        ||〈unk〉     | Unknown word token                                                                                                                                    ||〈time〉    | Time token (15:44:56)                                                                                                                                 ||〈score〉   | Score count token (4:3 ¦ 01:04)                                                                                                                       ||〈fract〉   | Fraction token (5/20 ¦ 192/864)                                                                                                                       ||〈date〉    | Date token (18.07.2004 ¦ 07/18/2004)                                                                                                                  ||〈abbr〉    | Abbreviation token (1-й ¦ 2-е ¦ 20-я ¦ p.s ¦ p.s.)                                                                                                    ||〈dimen〉   | Dimensions token (200x300 ¦ 1920x1080)                                                                                                                ||〈range〉   | Range of numbers token (1-2 ¦ 100-200 ¦ 300-400)                                                                                                      ||〈aprox〉   | Approximate number token (~93 ¦ ~95.86 ¦ 10~20)                                                                                                       ||〈anum〉    | Pseudo-number token (combination of numbers and other symbols) (T34 ¦ 895-M-86 ¦ 39km)                                                                ||〈pcards〉  | Symbols of the play cards (♠ ¦ ♣ ¦ ♥ ¦ ♦ )                                                                                                            ||〈punct〉   | Punctuation token (. ¦ , ¦ ? ¦ ! ¦ : ¦ ; ¦ … ¦ ¡ ¦ ¿)                                                                                                 ||〈route〉   | Direction symbols (arrows) (← ¦ ↑ ¦ ↓ ¦ ↔ ¦ ↵ ¦ ⇐ ¦ ⇑ ¦ ⇒ ¦ ⇓ ¦ ⇔ ¦ ◄ ¦ ▲ ¦ ► ¦ ▼)                                                                    ||〈greek〉   | Symbols of the Greek alphabet (Α ¦ Β ¦ Γ ¦ Δ ¦ Ε ¦ Ζ ¦ Η ¦ Θ ¦ Ι ¦ Κ ¦ Λ ¦ Μ ¦ Ν ¦ Ξ ¦ Ο ¦ Π ¦ Ρ ¦ Σ ¦ Τ ¦ Υ ¦ Φ ¦ Χ ¦ Ψ ¦ Ω)                         ||〈isolat〉  | Isolation/quotation token (( ¦ ) ¦ [ ¦ ] ¦ { ¦ } ¦ &quot; ¦ « ¦ » ¦ „ ¦ “ ¦ ` ¦ ⌈ ¦ ⌉ ¦ ⌊ ¦ ⌋ ¦ ‹ ¦ › ¦ ‚ ¦ ’ ¦ ′ ¦ ‛ ¦ ″ ¦ ‘ ¦ ” ¦ ‟ ¦ ' ¦〈 ¦ 〉)         ||〈specl〉   | Special character token (_ ¦ @ ¦ # ¦ № ¦ © ¦ ® ¦ &amp; ¦ § ¦ æ ¦ ø ¦ Þ ¦ – ¦ ‾ ¦ ‑ ¦ — ¦ ¯ ¦ ¶ ¦ ˆ ¦ ˜ ¦ † ¦ ‡ ¦ • ¦ ‰ ¦ ⁄ ¦ ℑ ¦ ℘ ¦ ℜ ¦ ℵ ¦ ◊ ¦ \ )     ||〈currency〉| Symbols of world currencies ($ ¦ € ¦ ₽ ¦ ¢ ¦ £ ¦ ₤ ¦ ¤ ¦ ¥ ¦ ℳ ¦ ₣ ¦ ₴ ¦ ₸ ¦ ₹ ¦ ₩ ¦ ₦ ¦ ₭ ¦ ₪ ¦ ৳ ¦ ƒ ¦ ₨ ¦ ฿ ¦ ₫ ¦ ៛ ¦ ₮ ¦ ₱ ¦ ﷼ ¦ ₡ ¦ ₲ ¦ ؋ ¦ ₵ ¦ ₺ ¦ ₼ ¦ ₾ ¦ ₠ ¦ ₧ ¦ ₯ ¦ ₢ ¦ ₳ ¦ ₥ ¦ ₰ ¦ ₿ ¦ ұ) ||〈math〉    | Mathematical operation token (+ ¦ - ¦ = ¦ / ¦ * ¦ ^ ¦ × ¦ ÷ ¦ − ¦ ∕ ¦ ∖ ¦ ∗ ¦ √ ¦ ∝ ¦ ∞ ¦ ∠ ¦ ± ¦ ¹ ¦ ² ¦ ³ ¦ ½ ¦ ⅓ ¦ ¼ ¦ ¾ ¦ % ¦ ~ ¦ · ¦ ⋅ ¦ ° ¦ º ¦ ¬ ¦ ƒ ¦ ∀ ¦ ∂ ¦ ∃ ¦ ∅ ¦ ∇ ¦ ∈ ¦ ∉ ¦ ∋ ¦ ∏ ¦ ∑ ¦ ∧ ¦ ∨ ¦ ∩ ¦ ∪ ¦ ∫ ¦ ∴ ¦ ∼ ¦ ≅ ¦ ≈ ¦ ≠ ¦ ≡ ¦ ≤ ¦ ≥ ¦ ª ¦ ⊂ ¦ ⊃ ¦ ⊄ ¦ ⊆ ¦ ⊇ ¦ ⊕ ¦ ⊗ ¦ ⊥ ¦ ¨) |---### Methods:- **setZone** - User zone set method### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setZone(&quot;com&quot;)&gt;&gt;&gt; alm.setZone(&quot;ru&quot;)&gt;&gt;&gt; alm.setZone(&quot;org&quot;)&gt;&gt;&gt; alm.setZone(&quot;net&quot;)```---### Methods:- **clear** - Method clear all data- **setAlphabet** - Method set alphabet- **getAlphabet** - Method get alphabet### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.getAlphabet()'abcdefghijklmnopqrstuvwxyz'&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.getAlphabet()'abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя'&gt;&gt;&gt;&gt;&gt;&gt; alm.clear()&gt;&gt;&gt;&gt;&gt;&gt; alm.getAlphabet()'abcdefghijklmnopqrstuvwxyz'```---### Methods:- **setUnknown** - Method set unknown word- **getUnknown** - Method extraction unknown word### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setUnknown(&quot;word&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.getUnknown()'word'```---### Methods:- **info** - Dictionary information output method- **init** - Language Model Initialization Method signature: [smoothing = wittenBell, modified = False, prepares = False, mod = 0.0]- **token** - Method for determining the type of the token words- **addText** - Method of adding text for estimate- **collectCorpus** - Training method of assembling the text data for ALM- **pruneVocab** - Dictionary pruning method- **buildArpa** - Method for build ARPA- **writeALM** - Method for writing data from ARPA file to binary container- **writeWords** - Method for writing these words to a file- **writeVocab** - Method for writing dictionary data to a file- **writeNgrams** - Method of writing data to NGRAMs files- **writeMap** - Method of writing sequence map to file- **writeSuffix** - Method for writing data to a suffix file for digital abbreviations- **writeAbbrs** - Method for writing data to an abbreviation file- **getSuffixes** - Method for extracting the list of suffixes of digital abbreviations- **writeArpa** - Method of writing data to ARPA file- **setSize** - Method for set size N-gram- **setLocale** - Method set locale (Default: en_US.UTF-8)- **pruneArpa** - Language model pruning method- **addWord** - Method for add a word to the dictionary- **setThreads** - Method for setting the number of threads used in work (0 - all available threads)- **setSubstitutes** - Method for set letters to correct words from mixed alphabets- **addAbbr** - Method add abbreviation- **setAbbrs** - Method set abbreviations- **getAbbrs** - Method for extracting the list of abbreviations- **addGoodword** - Method add good word- **addBadword** - Method add bad word- **readArpa** - Method for reading an ARPA file, language model- **readVocab** - Method of reading the dictionary- **setAdCw** - Method for set dictionary characteristics (cw - count all words in dataset, ad - count all documents in dataset)#### Description| Smoothing       ||-----------------|| wittenBell      || addSmooth       || goodTuring      || constDiscount   || naturalDiscount || kneserNey       || modKneserNey    |### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.info(&quot;./lm.alm&quot;)* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ** Name: Test Language Model* Encryption: AES128* Alphabet: абвгдеёжзийклмнопрстуфхцчшщъыьэюяabcdefghijklmnopqrstuvwxyz* Build date: 09/18/2020 21:52:00* N-gram size: 3* Words: 9373* N-grams: 25021* Author: Some name* Contacts: site: https://example.com, e-mail: info@example.com* Copyright ©: You company LLC* License type: MIT* License text:... License text ...* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *&gt;&gt;&gt; ```### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt; import json&gt;&gt;&gt; &gt;&gt;&gt; alm.setSize(3)&gt;&gt;&gt; alm.setThreads(0)&gt;&gt;&gt; alm.setLocale(&quot;en_US.UTF-8&quot;)&gt;&gt;&gt; alm.setAlphabet(&quot;абвгдеёжзийклмнопрстуфхцчшщъыьэюяabcdefghijklmnopqrstuvwxyz&quot;)&gt;&gt;&gt; alm.setSubstitutes({'p':'р','c':'с','o':'о','t':'т','k':'к','e':'е','a':'а','h':'н','x':'х','b':'в','m':'м'})&gt;&gt;&gt; &gt;&gt;&gt; alm.setOption(alm.options_t.allowUnk)&gt;&gt;&gt; alm.setOption(alm.options_t.resetUnk)&gt;&gt;&gt; alm.setOption(alm.options_t.mixDicts)&gt;&gt;&gt; alm.setOption(alm.options_t.tokenWords)&gt;&gt;&gt; alm.setOption(alm.options_t.interpolate)&gt;&gt;&gt; &gt;&gt;&gt; alm.init(alm.smoothing_t.modKneserNey, True, True)&gt;&gt;&gt; &gt;&gt;&gt; p = alm.getParams()&gt;&gt;&gt; p.algorithm4&gt;&gt;&gt; p.mod0.0&gt;&gt;&gt; p.preparesTrue&gt;&gt;&gt; p.modifiedTrue&gt;&gt;&gt; alm.idw(&quot;Сбербанк&quot;)13236490857&gt;&gt;&gt; alm.idw(&quot;Совкомбанк&quot;)22287680895&gt;&gt;&gt; &gt;&gt;&gt; alm.token(&quot;Сбербанк&quot;)'&lt;unk&gt;'&gt;&gt;&gt; alm.token(&quot;совкомбанк&quot;)'&lt;unk&gt;'&gt;&gt;&gt; &gt;&gt;&gt; alm.setAbbrs({13236490857, 22287680895})&gt;&gt;&gt; &gt;&gt;&gt; alm.addAbbr(&quot;США&quot;)&gt;&gt;&gt; alm.addAbbr(&quot;Сбер&quot;)&gt;&gt;&gt; &gt;&gt;&gt; alm.token(&quot;Сбербанк&quot;)'&lt;abbr&gt;'&gt;&gt;&gt; alm.token(&quot;совкомбанк&quot;)'&lt;abbr&gt;'&gt;&gt;&gt; &gt;&gt;&gt; alm.token(&quot;сша&quot;)'&lt;abbr&gt;'&gt;&gt;&gt; alm.token(&quot;СБЕР&quot;)'&lt;abbr&gt;'&gt;&gt;&gt; &gt;&gt;&gt; alm.getAbbrs(){13236490857, 189243, 22287680895, 26938511}&gt;&gt;&gt; &gt;&gt;&gt; alm.addGoodword(&quot;T-34&quot;)&gt;&gt;&gt; alm.addGoodword(&quot;АН-25&quot;)&gt;&gt;&gt; &gt;&gt;&gt; alm.addBadword(&quot;ийти&quot;)&gt;&gt;&gt; alm.addBadword(&quot;циган&quot;)&gt;&gt;&gt; alm.addBadword(&quot;апичатка&quot;)&gt;&gt;&gt; &gt;&gt;&gt; alm.addWord(&quot;министерство&quot;)&gt;&gt;&gt; alm.addWord(&quot;возмездие&quot;, 0, 1)&gt;&gt;&gt; alm.addWord(&quot;возражение&quot;, alm.idw(&quot;возражение&quot;), 2)&gt;&gt;&gt; &gt;&gt;&gt; def status(text, status):...     print(text, status)... &gt;&gt;&gt; def statusWriteALM(status):...     print(&quot;Write ALM&quot;, status)... &gt;&gt;&gt; def statusWriteArpa(status):...     print(&quot;Write ARPA&quot;, status)... &gt;&gt;&gt; def statusBuildArpa(status):...     print(&quot;Build ARPA&quot;, status)... &gt;&gt;&gt; def statusPrune(status):...     print(&quot;Prune data&quot;, status)... &gt;&gt;&gt; def statusWords(status):...     print(&quot;Write words&quot;, status)... &gt;&gt;&gt; def statusVocab(status):...     print(&quot;Write vocab&quot;, status)... &gt;&gt;&gt; def statusNgram(status):...     print(&quot;Write ngram&quot;, status)... &gt;&gt;&gt; def statusMap(status):...     print(&quot;Write map&quot;, status)... &gt;&gt;&gt; def statusSuffix(status):...     print(&quot;Write suffix&quot;, status)... &gt;&gt;&gt; def statusAbbreviation(status):...     print(&quot;Write abbreviation&quot;, status)... &gt;&gt;&gt; alm.addText(&quot;The future is now&quot;, 0)&gt;&gt;&gt; &gt;&gt;&gt; alm.collectCorpus(&quot;./correct.txt&quot;, status)Read text corpora 0Read text corpora 1Read text corpora 2Read text corpora 3Read text corpora 4Read text corpora 5Read text corpora 6...&gt;&gt;&gt; alm.pruneVocab(-15.0, 0, 0, statusPrune)Prune data 0Prune data 1Prune data 2Prune data 3Prune data 4Prune data 5Prune data 6...&gt;&gt;&gt; alm.pruneArpa(0.015, 3, statusPrune)Prune data 0Prune data 1Prune data 2Prune data 3Prune data 4Prune data 5Prune data 6...&gt;&gt;&gt; meta = {...     &quot;aes&quot;: 128,...     &quot;name&quot;: &quot;Test Language Model&quot;,...     &quot;author&quot;: &quot;Some name&quot;,...     &quot;lictype&quot;: &quot;MIT&quot;,...     &quot;password&quot;: &quot;password&quot;,...     &quot;copyright&quot;: &quot;You company LLC&quot;,...     &quot;lictext&quot;: &quot;... License text ...&quot;,...     &quot;contacts&quot;: &quot;site: https://example.com, e-mail: info@example.com&quot;... }&gt;&gt;&gt; &gt;&gt;&gt; alm.writeALM(&quot;./lm.alm&quot;, json.dumps(meta), statusWriteALM)Write ALM 0Write ALM 0Write ALM 0Write ALM 0Write ALM 0Write ALM 0...&gt;&gt;&gt; alm.writeWords(&quot;./words.txt&quot;, statusWords)Write words 0Write words 1Write words 2Write words 3Write words 4Write words 5Write words 6...&gt;&gt;&gt; alm.writeVocab(&quot;./lm.vocab&quot;, statusVocab)Write vocab 0Write vocab 1Write vocab 2Write vocab 3Write vocab 4Write vocab 5Write vocab 6...&gt;&gt;&gt; alm.writeNgrams(&quot;./lm.ngram&quot;, statusNgram)Write ngram 0Write ngram 1Write ngram 2Write ngram 3Write ngram 4Write ngram 5Write ngram 6...&gt;&gt;&gt; alm.writeMap(&quot;./lm.map&quot;, statusMap, &quot;|&quot;)Write map 0Write map 1Write map 2Write map 3Write map 4Write map 5Write map 6...&gt;&gt;&gt; alm.writeSuffix(&quot;./suffix.txt&quot;, statusSuffix)Write suffix 10Write suffix 20Write suffix 30Write suffix 40Write suffix 50Write suffix 60...&gt;&gt;&gt; alm.writeAbbrs(&quot;./words.abbr&quot;, statusAbbreviation)Write abbreviation 25Write abbreviation 50Write abbreviation 75Write abbreviation 100...&gt;&gt;&gt; alm.getAbbrs(){13236490857, 189243, 22287680895, 26938511}&gt;&gt;&gt; &gt;&gt;&gt; alm.getSuffixes(){2633, 1662978425, 14279182218, 3468, 47, 28876661395, 29095464659, 2968, 57, 30}&gt;&gt;&gt; &gt;&gt;&gt; alm.buildArpa(statusBuildArpa)Build ARPA 0Build ARPA 1Build ARPA 2Build ARPA 3Build ARPA 4Build ARPA 5Build ARPA 6...&gt;&gt;&gt; alm.writeArpa(&quot;./lm.arpa&quot;, statusWriteArpa)Write ARPA 0Write ARPA 1Write ARPA 2Write ARPA 3Write ARPA 4Write ARPA 5Write ARPA 6...```---### Methods:- **setOption** - Library options setting method- **unsetOption** - Disable module option method### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.unsetOption(alm.options_t.debug)&gt;&gt;&gt; alm.unsetOption(alm.options_t.mixDicts)&gt;&gt;&gt; alm.unsetOption(alm.options_t.onlyGood)&gt;&gt;&gt; alm.unsetOption(alm.options_t.confidence)...```#### Description| Options     | Description                                                                              ||-------------|------------------------------------------------------------------------------------------|| debug       | Flag debug mode                                                                          || stress      | Flag allowing to stress in words                                                         || uppers      | Flag that allows you to correct the case of letters                                      || onlyGood    | Flag allowing to consider words from the white list only                                 || mixDicts    | Flag allowing the use of words consisting of mixed dictionaries                          || allowUnk    | Flag allowing to unknown word                                                            || resetUnk    | Flag to reset the frequency of an unknown word                                           || allGrams    | Flag allowing accounting of all collected n-grams                                        || lowerCase   | Flag allowing to case-insensitive                                                        || confidence  | Flag ARPA file loading without pre-processing the words                                  || tokenWords  | Flag that takes into account when assembling N-grams, only those tokens that match words || interpolate | Flag allowing to use interpolation in estimating                                         |---### Methods:- **readMap** - Method for reading sequence map from file### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setLocale(&quot;en_US.UTF-8&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;абвгдеёжзийклмнопрстуфхцчшщъыьэюяabcdefghijklmnopqrstuvwxyz&quot;)&gt;&gt;&gt; alm.setSubstitutes({'p':'р','c':'с','o':'о','t':'т','k':'к','e':'е','a':'а','h':'н','x':'х','b':'в','m':'м'})&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.allowUnk)&gt;&gt;&gt; alm.setOption(alm.options_t.resetUnk)&gt;&gt;&gt; alm.setOption(alm.options_t.mixDicts)&gt;&gt;&gt; &gt;&gt;&gt; def statusMap(text, status):...     print(&quot;Read map&quot;, text, status)... &gt;&gt;&gt; def statusBuildArpa(status):...     print(&quot;Build ARPA&quot;, status)... &gt;&gt;&gt; def statusPrune(status):...     print(&quot;Prune data&quot;, status)... &gt;&gt;&gt; def statusVocab(text, status):...     print(&quot;Read Vocab&quot;, text, status)... &gt;&gt;&gt; def statusWriteArpa(status):...     print(&quot;Write ARPA&quot;, status)... &gt;&gt;&gt; alm.init(alm.smoothing_t.wittenBell)&gt;&gt;&gt; &gt;&gt;&gt; p = alm.getParams()&gt;&gt;&gt; p.algorithm2&gt;&gt;&gt; alm.readVocab(&quot;./lm.vocab&quot;, statusVocab)Read Vocab ./lm.vocab 0Read Vocab ./lm.vocab 1Read Vocab ./lm.vocab 2Read Vocab ./lm.vocab 3Read Vocab ./lm.vocab 4Read Vocab ./lm.vocab 5Read Vocab ./lm.vocab 6...&gt;&gt;&gt; alm.readMap(&quot;./lm1.map&quot;, statusMap, &quot;|&quot;)Read map ./lm.map 0Read map ./lm.map 1Read map ./lm.map 2Read map ./lm.map 3Read map ./lm.map 4Read map ./lm.map 5Read map ./lm.map 6...&gt;&gt;&gt; alm.readMap(&quot;./lm2.map&quot;, statusMap, &quot;|&quot;)Read map ./lm.map 0Read map ./lm.map 1Read map ./lm.map 2Read map ./lm.map 3Read map ./lm.map 4Read map ./lm.map 5Read map ./lm.map 6...&gt;&gt;&gt; alm.pruneVocab(-15.0, 0, 0, statusPrune)Prune data 0Prune data 1Prune data 2Prune data 3Prune data 4Prune data 5Prune data 6...&gt;&gt;&gt; alm.buildArpa(statusBuildArpa)Build ARPA 0Build ARPA 1Build ARPA 2Build ARPA 3Build ARPA 4Build ARPA 5Build ARPA 6...&gt;&gt;&gt; alm.writeArpa(&quot;./lm.arpa&quot;, statusWriteArpa)Write ARPA 0Write ARPA 1Write ARPA 2Write ARPA 3Write ARPA 4Write ARPA 5Write ARPA 6...&gt;&gt;&gt; def getWords(word, idw, oc, dc, count):...     print(word, idw, oc, dc, count)...     return True... &gt;&gt;&gt; alm.words(getWords)а 25 244 12 9373б 26 11 6 9373в 27 757 12 9373ж 32 12 7 9373и 34 823 12 9373к 36 102 12 9373о 40 63 12 9373п 41 1 1 9373р 42 1 1 9373с 43 290 12 9373у 45 113 12 9373Х 47 1 1 9373я 57 299 12 9373D 61 1 1 9373I 66 1 1 9373да 2179 32 10 9373за 2183 92 12 9373на 2189 435 12 9373па 2191 1 1 9373та 2194 4 4 9373об 2276 20 10 9373...&gt;&gt;&gt; alm.getStatistic()(13, 38124)&gt;&gt; alm.setAdCw(44381, 20)&gt;&gt;&gt; alm.getStatistic()(20, 44381)```### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;абвгдеёжзийклмнопрстуфхцчшщъыьэюяabcdefghijklmnopqrstuvwxyz&quot;)&gt;&gt;&gt; alm.setSubstitutes({'p':'р','c':'с','o':'о','t':'т','k':'к','e':'е','a':'а','h':'н','x':'х','b':'в','m':'м'})&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.allowUnk)&gt;&gt;&gt; alm.setOption(alm.options_t.resetUnk)&gt;&gt;&gt; alm.setOption(alm.options_t.mixDicts)&gt;&gt;&gt; &gt;&gt;&gt; def statusBuildArpa(status):...     print(&quot;Build ARPA&quot;, status)... &gt;&gt;&gt; def statusPrune(status):...     print(&quot;Prune data&quot;, status)... &gt;&gt;&gt; def statusNgram(text, status):...     print(&quot;Read Ngram&quot;, text, status)... &gt;&gt;&gt; def statusWriteArpa(status):...     print(&quot;Write ARPA&quot;, status)... &gt;&gt;&gt; alm.init(alm.smoothing_t.addSmooth, False, False, 0.5)&gt;&gt;&gt; &gt;&gt;&gt; p = alm.getParams()&gt;&gt;&gt; p.algorithm0&gt;&gt;&gt; p.mod0.5&gt;&gt;&gt; p.preparesFalse&gt;&gt;&gt; p.modifiedFalse&gt;&gt;&gt; &gt;&gt;&gt; alm.readNgram(&quot;./lm.ngram&quot;, statusNgram)Read Ngram ./lm.ngram 0Read Ngram ./lm.ngram 1Read Ngram ./lm.ngram 2Read Ngram ./lm.ngram 3Read Ngram ./lm.ngram 4Read Ngram ./lm.ngram 5Read Ngram ./lm.ngram 6...&gt;&gt;&gt; alm.pruneVocab(-15.0, 0, 0, statusPrune)Prune data 0Prune data 1Prune data 2Prune data 3Prune data 4Prune data 5Prune data 6...&gt;&gt;&gt; alm.buildArpa(statusBuildArpa)Build ARPA 0Build ARPA 1Build ARPA 2Build ARPA 3Build ARPA 4Build ARPA 5Build ARPA 6...&gt;&gt;&gt; alm.writeArpa(&quot;./lm.arpa&quot;, statusWriteArpa)Write ARPA 0Write ARPA 1Write ARPA 2Write ARPA 3Write ARPA 4Write ARPA 5Write ARPA 6...```---### Methods:- **modify** - ARPA modification method- **sweep** - ARPA Low Frequency N-gram Removal Method- **repair** - Method of repair of previously calculated ARPA### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;абвгдеёжзийклмнопрстуфхцчшщъыьэюяabcdefghijklmnopqrstuvwxyz&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt; &gt;&gt;&gt; def statusSweep(text, status):...     print(&quot;Sweep n-grams&quot;, text, status)... &gt;&gt;&gt; def statusWriteArpa(status):...     print(&quot;Write ARPA&quot;, status)... &gt;&gt;&gt; alm.init()&gt;&gt;&gt; &gt;&gt;&gt; alm.sweep(&quot;./lm.arpa&quot;, statusSweep)Sweep n-grams Read ARPA file 0Sweep n-grams Read ARPA file 1Sweep n-grams Read ARPA file 2Sweep n-grams Read ARPA file 3Sweep n-grams Read ARPA file 4Sweep n-grams Read ARPA file 5Sweep n-grams Read ARPA file 6...Sweep n-grams Sweep N-grams 0Sweep n-grams Sweep N-grams 1Sweep n-grams Sweep N-grams 2Sweep n-grams Sweep N-grams 3Sweep n-grams Sweep N-grams 4Sweep n-grams Sweep N-grams 5Sweep n-grams Sweep N-grams 6...&gt;&gt;&gt; alm.writeArpa(&quot;./lm.arpa&quot;, statusWriteArpa)Write ARPA 0Write ARPA 1Write ARPA 2Write ARPA 3Write ARPA 4Write ARPA 5Write ARPA 6...&gt;&gt;&gt; alm.clear()&gt;&gt;&gt; &gt;&gt;&gt; alm.setAlphabet(&quot;абвгдеёжзийклмнопрстуфхцчшщъыьэюяabcdefghijklmnopqrstuvwxyz&quot;)&gt;&gt;&gt; &gt;&gt;&gt; def statusRepair(text, status):...     print(&quot;Repair n-grams&quot;, text, status)... &gt;&gt;&gt; def statusWriteArpa(status):...     print(&quot;Write ARPA&quot;, status)... &gt;&gt;&gt; alm.init()&gt;&gt;&gt; &gt;&gt;&gt; alm.repair(&quot;./lm.arpa&quot;, statusRepair)Repair n-grams Read ARPA file 0Repair n-grams Read ARPA file 1Repair n-grams Read ARPA file 2Repair n-grams Read ARPA file 3Repair n-grams Read ARPA file 4Repair n-grams Read ARPA file 5Repair n-grams Read ARPA file 6...Repair n-grams Repair ARPA data 0Repair n-grams Repair ARPA data 1Repair n-grams Repair ARPA data 2Repair n-grams Repair ARPA data 3Repair n-grams Repair ARPA data 4Repair n-grams Repair ARPA data 5Repair n-grams Repair ARPA data 6...&gt;&gt;&gt; alm.writeArpa(&quot;./lm.arpa&quot;, statusWriteArpa)Write ARPA 0Write ARPA 1Write ARPA 2Write ARPA 3Write ARPA 4Write ARPA 5Write ARPA 6...&gt;&gt;&gt; alm.clear()&gt;&gt;&gt; &gt;&gt;&gt; alm.setAlphabet(&quot;абвгдеёжзийклмнопрстуфхцчшщъыьэюяabcdefghijklmnopqrstuvwxyz&quot;)&gt;&gt;&gt; &gt;&gt;&gt; def statusModify(text, status):...     print(&quot;Modify ARPA data&quot;, text, status)... &gt;&gt;&gt; def statusWriteArpa(status):...     print(&quot;Write ARPA&quot;, status)... &gt;&gt;&gt; alm.init()&gt;&gt;&gt; &gt;&gt;&gt; alm.modify(&quot;./lm.arpa&quot;, &quot;./remove.txt&quot;, alm.modify_t.remove, statusModify)Modify ARPA data Read ARPA file 0Modify ARPA data Read ARPA file 1Modify ARPA data Read ARPA file 2Modify ARPA data Read ARPA file 3Modify ARPA data Read ARPA file 4Modify ARPA data Read ARPA file 5Modify ARPA data Read ARPA file 6...Modify ARPA data Modify ARPA data 3Modify ARPA data Modify ARPA data 10Modify ARPA data Modify ARPA data 15Modify ARPA data Modify ARPA data 18Modify ARPA data Modify ARPA data 24Modify ARPA data Modify ARPA data 30...&gt;&gt;&gt; alm.writeArpa(&quot;./lm.arpa&quot;, statusWriteArpa)Write ARPA 0Write ARPA 1Write ARPA 2Write ARPA 3Write ARPA 4Write ARPA 5Write ARPA 6...```### Modification flags| Name    | Description                                             ||---------|---------------------------------------------------------|| emplace | Flag of adding n-gram into existing ARPA file           || remove  | Flag of removing n-gram from existing ARPA file         || change  | Flag of changing n-gram frequency in existing ARPA file || replace | Flag of replacing n-gram in existing ARPA file          |### File of adding n-gram into existing ARPA file```-3.002006США-1.365296границ США-0.988534у границ США-1.759398замуж за-0.092796собираюсь замуж за-0.474876и тоже-19.18453можно и тоже...```| N-gram frequency      | Separator   | N-gram       ||-----------------------|-------------|--------------|| -0.988534             | \t          | у границ США |### File of changing n-gram frequency in existing ARPA file```-0.6588787получайте удовольствие &lt;/s&gt;-0.6588787только в одном-0.6588787работа связана с-0.6588787мужчины и женщины-0.6588787говоря про то-0.6588787потому что я-0.6588787потому что это-0.6588787работу потому что-0.6588787пейзажи за окном-0.6588787статусы для одноклассников-0.6588787вообще не хочу...```| N-gram frequency      | Separator   | N-gram            ||-----------------------|-------------|-------------------|| -0.6588787            | \t          | мужчины и женщины |### File of replacing n-gram in existing ARPA file```коем случае нельзятам да тутно тем неда ты чтонеожиданный уожидаемый кв СМИв ФСБШахМат...```| Existing N-gram       | Separator   | New N-gram        ||-----------------------|-------------|-------------------|| но тем не             | \t          | да ты что         |### File of removing n-gram from existing ARPA file```ну то естьну очень большойбы было еслимы с нейты смеешься наддва года назаднад тем чтоили еще что-токак я понялкак ни удивительнокак вы знаететак и невсе-таки прававсе-таки болятвсе-таки сдохловсе-таки всталавсе-таки решилсяужемнемоевсе...```---### Methods:- **mix** - Multiple ARPA Interpolation Method [backward = True, forward = False]- **mix** - Interpolation method of multiple arpa algorithms (Bayesian and Logarithmic-linear) [Bayes: length &gt; 0, Loglinear: length == 0]### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt; &gt;&gt;&gt; alm.setAlphabet(&quot;абвгдеёжзийклмнопрстуфхцчшщъыьэюяabcdefghijklmnopqrstuvwxyz&quot;)&gt;&gt;&gt; &gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt; &gt;&gt;&gt; def statusMix(text, status):...     print(&quot;Mix ARPA data&quot;, text, status)... &gt;&gt;&gt; def statusWriteArpa(status):...     print(&quot;Write ARPA&quot;, status)... &gt;&gt;&gt; alm.init()&gt;&gt;&gt; &gt;&gt;&gt; alm.mix([&quot;./lm1.arpa&quot;, &quot;./lm2.arpa&quot;], [0.02, 0.05], True, statusMix)Mix ARPA data ./lm1.arpa 0Mix ARPA data ./lm1.arpa 1Mix ARPA data ./lm1.arpa 2Mix ARPA data ./lm1.arpa 3Mix ARPA data ./lm1.arpa 4Mix ARPA data ./lm1.arpa 5Mix ARPA data ./lm1.arpa 6...Mix ARPA data  0Mix ARPA data  1Mix ARPA data  2Mix ARPA data  3Mix ARPA data  4Mix ARPA data  5Mix ARPA data  6&gt;&gt;&gt; alm.writeArpa(&quot;./lm.arpa&quot;, statusWriteArpa)Write ARPA 0Write ARPA 1Write ARPA 2Write ARPA 3Write ARPA 4Write ARPA 5Write ARPA 6...&gt;&gt;&gt; alm.clear()&gt;&gt;&gt; &gt;&gt;&gt; alm.setAlphabet(&quot;абвгдеёжзийклмнопрстуфхцчшщъыьэюяabcdefghijklmnopqrstuvwxyz&quot;)&gt;&gt;&gt; &gt;&gt;&gt; def statusMix(text, status):...     print(&quot;Mix ARPA data&quot;, text, status)... &gt;&gt;&gt; def statusWriteArpa(status):...     print(&quot;Write ARPA&quot;, status)... &gt;&gt;&gt; alm.init()&gt;&gt;&gt; &gt;&gt;&gt; alm.mix([&quot;./lm1.arpa&quot;, &quot;./lm2.arpa&quot;], [0.02, 0.05], 0, 0.032, statusMix)Mix ARPA data ./lm1.arpa 0Mix ARPA data ./lm1.arpa 1Mix ARPA data ./lm1.arpa 2Mix ARPA data ./lm1.arpa 3Mix ARPA data ./lm1.arpa 4Mix ARPA data ./lm1.arpa 5Mix ARPA data ./lm1.arpa 6...Mix ARPA data  0Mix ARPA data  1Mix ARPA data  2Mix ARPA data  3Mix ARPA data  4Mix ARPA data  5Mix ARPA data  6&gt;&gt;&gt; alm.writeArpa(&quot;./lm.arpa&quot;, statusWriteArpa)Write ARPA 0Write ARPA 1Write ARPA 2Write ARPA 3Write ARPA 4Write ARPA 5Write ARPA 6...```---### Methods:- **size** - Method of obtaining the size of the N-gram### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; alm.size()3```---### Methods:- **damerauLevenshtein** - Determination of the Damerau-Levenshtein distance in phrases- **distanceLevenshtein** - Determination of Levenshtein distance in phrases- **tanimoto** - Method for determining Jaccard coefficient (quotient - Tanimoto coefficient)- **needlemanWunsch** - Word stretching method### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt; alm.damerauLevenshtein(&quot;привет&quot;, &quot;приветик&quot;)2&gt;&gt;&gt; &gt;&gt;&gt; alm.damerauLevenshtein(&quot;приевтик&quot;, &quot;приветик&quot;)1&gt;&gt;&gt; &gt;&gt;&gt; alm.distanceLevenshtein(&quot;приевтик&quot;, &quot;приветик&quot;)2&gt;&gt;&gt; &gt;&gt;&gt; alm.tanimoto(&quot;привет&quot;, &quot;приветик&quot;)0.7142857142857143&gt;&gt;&gt; &gt;&gt;&gt; alm.tanimoto(&quot;привеитк&quot;, &quot;приветик&quot;)0.4&gt;&gt;&gt; &gt;&gt;&gt; alm.needlemanWunsch(&quot;привеитк&quot;, &quot;приветик&quot;)4&gt;&gt;&gt; &gt;&gt;&gt; alm.needlemanWunsch(&quot;привет&quot;, &quot;приветик&quot;)2&gt;&gt;&gt; &gt;&gt;&gt; alm.damerauLevenshtein(&quot;acre&quot;, &quot;car&quot;)2&gt;&gt;&gt; alm.distanceLevenshtein(&quot;acre&quot;, &quot;car&quot;)3&gt;&gt;&gt; &gt;&gt;&gt; alm.damerauLevenshtein(&quot;anteater&quot;, &quot;theatre&quot;)4&gt;&gt;&gt; alm.distanceLevenshtein(&quot;anteater&quot;, &quot;theatre&quot;)5&gt;&gt;&gt; &gt;&gt;&gt; alm.damerauLevenshtein(&quot;banana&quot;, &quot;nanny&quot;)3&gt;&gt;&gt; alm.distanceLevenshtein(&quot;banana&quot;, &quot;nanny&quot;)3&gt;&gt;&gt; &gt;&gt;&gt; alm.damerauLevenshtein(&quot;cat&quot;, &quot;crate&quot;)2&gt;&gt;&gt; alm.distanceLevenshtein(&quot;cat&quot;, &quot;crate&quot;)2&gt;&gt;&gt;&gt;&gt;&gt; alm.mulctLevenshtein(&quot;привет&quot;, &quot;приветик&quot;)4&gt;&gt;&gt;&gt;&gt;&gt; alm.mulctLevenshtein(&quot;приевтик&quot;, &quot;приветик&quot;)1&gt;&gt;&gt;&gt;&gt;&gt; alm.mulctLevenshtein(&quot;acre&quot;, &quot;car&quot;)3&gt;&gt;&gt;&gt;&gt;&gt; alm.mulctLevenshtein(&quot;anteater&quot;, &quot;theatre&quot;)5&gt;&gt;&gt;&gt;&gt;&gt; alm.mulctLevenshtein(&quot;banana&quot;, &quot;nanny&quot;)4&gt;&gt;&gt;&gt;&gt;&gt; alm.mulctLevenshtein(&quot;cat&quot;, &quot;crate&quot;)4```---### Methods:- **textToJson** - Method to convert text to JSON- **isAllowApostrophe** - Apostrophe permission check method- **switchAllowApostrophe** - Method for permitting or denying an apostrophe as part of a word### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; def callbackFn(text):...     print(text)... &gt;&gt;&gt; alm.isAllowApostrophe()False&gt;&gt;&gt; alm.switchAllowApostrophe()&gt;&gt;&gt;&gt;&gt;&gt; alm.isAllowApostrophe()True&gt;&gt;&gt; alm.textToJson(&quot;«On nous dit qu'aujourd'hui c'est le cas, encore faudra-t-il l'évaluer» l'astronomie&quot;, callbackFn)[[&quot;«&quot;,&quot;On&quot;,&quot;nous&quot;,&quot;dit&quot;,&quot;qu'aujourd'hui&quot;,&quot;c'est&quot;,&quot;le&quot;,&quot;cas&quot;,&quot;,&quot;,&quot;encore&quot;,&quot;faudra-t-il&quot;,&quot;l'évaluer&quot;,&quot;»&quot;,&quot;l'astronomie&quot;]]```---### Methods:- **jsonToText** - Method to convert JSON to text### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; def callbackFn(text):...     print(text)... &gt;&gt;&gt; alm.jsonToText('[[&quot;«&quot;,&quot;On&quot;,&quot;nous&quot;,&quot;dit&quot;,&quot;qu\'aujourd\'hui&quot;,&quot;c\'est&quot;,&quot;le&quot;,&quot;cas&quot;,&quot;,&quot;,&quot;encore&quot;,&quot;faudra-t-il&quot;,&quot;l\'évaluer&quot;,&quot;»&quot;,&quot;l\'astronomie&quot;]]', callbackFn)«On nous dit qu'aujourd'hui c'est le cas, encore faudra-t-il l'évaluer» l'astronomie```---### Methods:- **restore** - Method for restore text from context### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.uppers)&gt;&gt;&gt;&gt;&gt;&gt; alm.restore([&quot;«&quot;,&quot;On&quot;,&quot;nous&quot;,&quot;dit&quot;,&quot;qu\'aujourd\'hui&quot;,&quot;c\'est&quot;,&quot;le&quot;,&quot;cas&quot;,&quot;,&quot;,&quot;encore&quot;,&quot;faudra-t-il&quot;,&quot;l\'évaluer&quot;,&quot;»&quot;,&quot;l\'astronomie&quot;])&quot;«On nous dit qu'aujourd'hui c'est le cas, encore faudra-t-il l'évaluer» l'astronomie&quot;```---### Methods:- **allowStress** - Method for allow using stress in words- **disallowStress** - Method for disallow using stress in words### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; def callbackFn(text):...     print(text)... &gt;&gt;&gt; alm.textToJson('«Бе́лая стрела́» — согласно распространённой в 1990-е годы в России городской легенде, якобы специально организованная и подготовленная законспирированная правительственная спецслужба, сотрудники которой — бывшие и действовавшие милиционеры и спецназовцы, имеющие право на физическую ликвидацию особо опасных уголовных авторитетов и лидеров орудовавших в России ОПГ, относительно которых не представляется возможным привлечения их к уголовной ответственности законными методами[1][2][3]. Несмотря на отсутствие официальных доказательств существования организации и многочисленные опровержения со стороны силовых структур и служб безопасности[4], в российском обществе легенду считают основанной на подлинных фактах громких убийств криминальных авторитетов, совершённых в 1990-е годы, и не исключают существование реальной спецслужбы[5].', callbackFn)[[&quot;«&quot;,&quot;Белая&quot;,&quot;стрела&quot;,&quot;»&quot;,&quot;—&quot;,&quot;согласно&quot;,&quot;распространённой&quot;,&quot;в&quot;,&quot;1990-е&quot;,&quot;годы&quot;,&quot;в&quot;,&quot;России&quot;,&quot;городской&quot;,&quot;легенде&quot;,&quot;,&quot;,&quot;якобы&quot;,&quot;специально&quot;,&quot;организованная&quot;,&quot;и&quot;,&quot;подготовленная&quot;,&quot;законспирированная&quot;,&quot;правительственная&quot;,&quot;спецслужба&quot;,&quot;,&quot;,&quot;сотрудники&quot;,&quot;которой&quot;,&quot;—&quot;,&quot;бывшие&quot;,&quot;и&quot;,&quot;действовавшие&quot;,&quot;милиционеры&quot;,&quot;и&quot;,&quot;спецназовцы&quot;,&quot;,&quot;,&quot;имеющие&quot;,&quot;право&quot;,&quot;на&quot;,&quot;физическую&quot;,&quot;ликвидацию&quot;,&quot;особо&quot;,&quot;опасных&quot;,&quot;уголовных&quot;,&quot;авторитетов&quot;,&quot;и&quot;,&quot;лидеров&quot;,&quot;орудовавших&quot;,&quot;в&quot;,&quot;России&quot;,&quot;ОПГ&quot;,&quot;,&quot;,&quot;относительно&quot;,&quot;которых&quot;,&quot;не&quot;,&quot;представляется&quot;,&quot;возможным&quot;,&quot;привлечения&quot;,&quot;их&quot;,&quot;к&quot;,&quot;уголовной&quot;,&quot;ответственности&quot;,&quot;законными&quot;,&quot;методами&quot;,&quot;[&quot;,&quot;1&quot;,&quot;]&quot;,&quot;[&quot;,&quot;2&quot;,&quot;]&quot;,&quot;[&quot;,&quot;3&quot;,&quot;]&quot;,&quot;.&quot;],[&quot;Несмотря&quot;,&quot;на&quot;,&quot;отсутствие&quot;,&quot;официальных&quot;,&quot;доказательств&quot;,&quot;существования&quot;,&quot;организации&quot;,&quot;и&quot;,&quot;многочисленные&quot;,&quot;опровержения&quot;,&quot;со&quot;,&quot;стороны&quot;,&quot;силовых&quot;,&quot;структур&quot;,&quot;и&quot;,&quot;служб&quot;,&quot;безопасности&quot;,&quot;[&quot;,&quot;4&quot;,&quot;]&quot;,&quot;,&quot;,&quot;в&quot;,&quot;российском&quot;,&quot;обществе&quot;,&quot;легенду&quot;,&quot;считают&quot;,&quot;основанной&quot;,&quot;на&quot;,&quot;подлинных&quot;,&quot;фактах&quot;,&quot;громких&quot;,&quot;убийств&quot;,&quot;криминальных&quot;,&quot;авторитетов&quot;,&quot;,&quot;,&quot;совершённых&quot;,&quot;в&quot;,&quot;1990-е&quot;,&quot;годы&quot;,&quot;,&quot;,&quot;и&quot;,&quot;не&quot;,&quot;исключают&quot;,&quot;существование&quot;,&quot;реальной&quot;,&quot;спецслужбы&quot;,&quot;[&quot;,&quot;5&quot;,&quot;]&quot;,&quot;.&quot;]]&gt;&gt;&gt;&gt;&gt;&gt; alm.jsonToText('[[&quot;«&quot;,&quot;Белая&quot;,&quot;стрела&quot;,&quot;»&quot;,&quot;—&quot;,&quot;согласно&quot;,&quot;распространённой&quot;,&quot;в&quot;,&quot;1990-е&quot;,&quot;годы&quot;,&quot;в&quot;,&quot;России&quot;,&quot;городской&quot;,&quot;легенде&quot;,&quot;,&quot;,&quot;якобы&quot;,&quot;специально&quot;,&quot;организованная&quot;,&quot;и&quot;,&quot;подготовленная&quot;,&quot;законспирированная&quot;,&quot;правительственная&quot;,&quot;спецслужба&quot;,&quot;,&quot;,&quot;сотрудники&quot;,&quot;которой&quot;,&quot;—&quot;,&quot;бывшие&quot;,&quot;и&quot;,&quot;действовавшие&quot;,&quot;милиционеры&quot;,&quot;и&quot;,&quot;спецназовцы&quot;,&quot;,&quot;,&quot;имеющие&quot;,&quot;право&quot;,&quot;на&quot;,&quot;физическую&quot;,&quot;ликвидацию&quot;,&quot;особо&quot;,&quot;опасных&quot;,&quot;уголовных&quot;,&quot;авторитетов&quot;,&quot;и&quot;,&quot;лидеров&quot;,&quot;орудовавших&quot;,&quot;в&quot;,&quot;России&quot;,&quot;ОПГ&quot;,&quot;,&quot;,&quot;относительно&quot;,&quot;которых&quot;,&quot;не&quot;,&quot;представляется&quot;,&quot;возможным&quot;,&quot;привлечения&quot;,&quot;их&quot;,&quot;к&quot;,&quot;уголовной&quot;,&quot;ответственности&quot;,&quot;законными&quot;,&quot;методами&quot;,&quot;[&quot;,&quot;1&quot;,&quot;]&quot;,&quot;[&quot;,&quot;2&quot;,&quot;]&quot;,&quot;[&quot;,&quot;3&quot;,&quot;]&quot;,&quot;.&quot;],[&quot;Несмотря&quot;,&quot;на&quot;,&quot;отсутствие&quot;,&quot;официальных&quot;,&quot;доказательств&quot;,&quot;существования&quot;,&quot;организации&quot;,&quot;и&quot;,&quot;многочисленные&quot;,&quot;опровержения&quot;,&quot;со&quot;,&quot;стороны&quot;,&quot;силовых&quot;,&quot;структур&quot;,&quot;и&quot;,&quot;служб&quot;,&quot;безопасности&quot;,&quot;[&quot;,&quot;4&quot;,&quot;]&quot;,&quot;,&quot;,&quot;в&quot;,&quot;российском&quot;,&quot;обществе&quot;,&quot;легенду&quot;,&quot;считают&quot;,&quot;основанной&quot;,&quot;на&quot;,&quot;подлинных&quot;,&quot;фактах&quot;,&quot;громких&quot;,&quot;убийств&quot;,&quot;криминальных&quot;,&quot;авторитетов&quot;,&quot;,&quot;,&quot;совершённых&quot;,&quot;в&quot;,&quot;1990-е&quot;,&quot;годы&quot;,&quot;,&quot;,&quot;и&quot;,&quot;не&quot;,&quot;исключают&quot;,&quot;существование&quot;,&quot;реальной&quot;,&quot;спецслужбы&quot;,&quot;[&quot;,&quot;5&quot;,&quot;]&quot;,&quot;.&quot;]]', callbackFn)«Белая стрела» — согласно распространённой в 1990-е годы в России городской легенде, якобы специально организованная и подготовленная законспирированная правительственная спецслужба, сотрудники которой — бывшие и действовавшие милиционеры и спецназовцы, имеющие право на физическую ликвидацию особо опасных уголовных авторитетов и лидеров орудовавших в России ОПГ, относительно которых не представляется возможным привлечения их к уголовной ответственности законными методами [1] [2] [3].Несмотря на отсутствие официальных доказательств существования организации и многочисленные опровержения со стороны силовых структур и служб безопасности [4], в российском обществе легенду считают основанной на подлинных фактах громких убийств криминальных авторитетов, совершённых в 1990-е годы, и не исключают существование реальной спецслужбы [5].&gt;&gt;&gt;&gt;&gt;&gt; alm.allowStress()&gt;&gt;&gt; alm.textToJson('«Бе́лая стрела́» — согласно распространённой в 1990-е годы в России городской легенде, якобы специально организованная и подготовленная законспирированная правительственная спецслужба, сотрудники которой — бывшие и действовавшие милиционеры и спецназовцы, имеющие право на физическую ликвидацию особо опасных уголовных авторитетов и лидеров орудовавших в России ОПГ, относительно которых не представляется возможным привлечения их к уголовной ответственности законными методами[1][2][3]. Несмотря на отсутствие официальных доказательств существования организации и многочисленные опровержения со стороны силовых структур и служб безопасности[4], в российском обществе легенду считают основанной на подлинных фактах громких убийств криминальных авторитетов, совершённых в 1990-е годы, и не исключают существование реальной спецслужбы[5].', callbackFn)[[&quot;«&quot;,&quot;Бе́лая&quot;,&quot;стрела́&quot;,&quot;»&quot;,&quot;—&quot;,&quot;согласно&quot;,&quot;распространённой&quot;,&quot;в&quot;,&quot;1990-е&quot;,&quot;годы&quot;,&quot;в&quot;,&quot;России&quot;,&quot;городской&quot;,&quot;легенде&quot;,&quot;,&quot;,&quot;якобы&quot;,&quot;специально&quot;,&quot;организованная&quot;,&quot;и&quot;,&quot;подготовленная&quot;,&quot;законспирированная&quot;,&quot;правительственная&quot;,&quot;спецслужба&quot;,&quot;,&quot;,&quot;сотрудники&quot;,&quot;которой&quot;,&quot;—&quot;,&quot;бывшие&quot;,&quot;и&quot;,&quot;действовавшие&quot;,&quot;милиционеры&quot;,&quot;и&quot;,&quot;спецназовцы&quot;,&quot;,&quot;,&quot;имеющие&quot;,&quot;право&quot;,&quot;на&quot;,&quot;физическую&quot;,&quot;ликвидацию&quot;,&quot;особо&quot;,&quot;опасных&quot;,&quot;уголовных&quot;,&quot;авторитетов&quot;,&quot;и&quot;,&quot;лидеров&quot;,&quot;орудовавших&quot;,&quot;в&quot;,&quot;России&quot;,&quot;ОПГ&quot;,&quot;,&quot;,&quot;относительно&quot;,&quot;которых&quot;,&quot;не&quot;,&quot;представляется&quot;,&quot;возможным&quot;,&quot;привлечения&quot;,&quot;их&quot;,&quot;к&quot;,&quot;уголовной&quot;,&quot;ответственности&quot;,&quot;законными&quot;,&quot;методами&quot;,&quot;[&quot;,&quot;1&quot;,&quot;]&quot;,&quot;[&quot;,&quot;2&quot;,&quot;]&quot;,&quot;[&quot;,&quot;3&quot;,&quot;]&quot;,&quot;.&quot;],[&quot;Несмотря&quot;,&quot;на&quot;,&quot;отсутствие&quot;,&quot;официальных&quot;,&quot;доказательств&quot;,&quot;существования&quot;,&quot;организации&quot;,&quot;и&quot;,&quot;многочисленные&quot;,&quot;опровержения&quot;,&quot;со&quot;,&quot;стороны&quot;,&quot;силовых&quot;,&quot;структур&quot;,&quot;и&quot;,&quot;служб&quot;,&quot;безопасности&quot;,&quot;[&quot;,&quot;4&quot;,&quot;]&quot;,&quot;,&quot;,&quot;в&quot;,&quot;российском&quot;,&quot;обществе&quot;,&quot;легенду&quot;,&quot;считают&quot;,&quot;основанной&quot;,&quot;на&quot;,&quot;подлинных&quot;,&quot;фактах&quot;,&quot;громких&quot;,&quot;убийств&quot;,&quot;криминальных&quot;,&quot;авторитетов&quot;,&quot;,&quot;,&quot;совершённых&quot;,&quot;в&quot;,&quot;1990-е&quot;,&quot;годы&quot;,&quot;,&quot;,&quot;и&quot;,&quot;не&quot;,&quot;исключают&quot;,&quot;существование&quot;,&quot;реальной&quot;,&quot;спецслужбы&quot;,&quot;[&quot;,&quot;5&quot;,&quot;]&quot;,&quot;.&quot;]]&gt;&gt;&gt;&gt;&gt;&gt; alm.jsonToText('[[&quot;«&quot;,&quot;Бе́лая&quot;,&quot;стрела́&quot;,&quot;»&quot;,&quot;—&quot;,&quot;согласно&quot;,&quot;распространённой&quot;,&quot;в&quot;,&quot;1990-е&quot;,&quot;годы&quot;,&quot;в&quot;,&quot;России&quot;,&quot;городской&quot;,&quot;легенде&quot;,&quot;,&quot;,&quot;якобы&quot;,&quot;специально&quot;,&quot;организованная&quot;,&quot;и&quot;,&quot;подготовленная&quot;,&quot;законспирированная&quot;,&quot;правительственная&quot;,&quot;спецслужба&quot;,&quot;,&quot;,&quot;сотрудники&quot;,&quot;которой&quot;,&quot;—&quot;,&quot;бывшие&quot;,&quot;и&quot;,&quot;действовавшие&quot;,&quot;милиционеры&quot;,&quot;и&quot;,&quot;спецназовцы&quot;,&quot;,&quot;,&quot;имеющие&quot;,&quot;право&quot;,&quot;на&quot;,&quot;физическую&quot;,&quot;ликвидацию&quot;,&quot;особо&quot;,&quot;опасных&quot;,&quot;уголовных&quot;,&quot;авторитетов&quot;,&quot;и&quot;,&quot;лидеров&quot;,&quot;орудовавших&quot;,&quot;в&quot;,&quot;России&quot;,&quot;ОПГ&quot;,&quot;,&quot;,&quot;относительно&quot;,&quot;которых&quot;,&quot;не&quot;,&quot;представляется&quot;,&quot;возможным&quot;,&quot;привлечения&quot;,&quot;их&quot;,&quot;к&quot;,&quot;уголовной&quot;,&quot;ответственности&quot;,&quot;законными&quot;,&quot;методами&quot;,&quot;[&quot;,&quot;1&quot;,&quot;]&quot;,&quot;[&quot;,&quot;2&quot;,&quot;]&quot;,&quot;[&quot;,&quot;3&quot;,&quot;]&quot;,&quot;.&quot;],[&quot;Несмотря&quot;,&quot;на&quot;,&quot;отсутствие&quot;,&quot;официальных&quot;,&quot;доказательств&quot;,&quot;существования&quot;,&quot;организации&quot;,&quot;и&quot;,&quot;многочисленные&quot;,&quot;опровержения&quot;,&quot;со&quot;,&quot;стороны&quot;,&quot;силовых&quot;,&quot;структур&quot;,&quot;и&quot;,&quot;служб&quot;,&quot;безопасности&quot;,&quot;[&quot;,&quot;4&quot;,&quot;]&quot;,&quot;,&quot;,&quot;в&quot;,&quot;российском&quot;,&quot;обществе&quot;,&quot;легенду&quot;,&quot;считают&quot;,&quot;основанной&quot;,&quot;на&quot;,&quot;подлинных&quot;,&quot;фактах&quot;,&quot;громких&quot;,&quot;убийств&quot;,&quot;криминальных&quot;,&quot;авторитетов&quot;,&quot;,&quot;,&quot;совершённых&quot;,&quot;в&quot;,&quot;1990-е&quot;,&quot;годы&quot;,&quot;,&quot;,&quot;и&quot;,&quot;не&quot;,&quot;исключают&quot;,&quot;существование&quot;,&quot;реальной&quot;,&quot;спецслужбы&quot;,&quot;[&quot;,&quot;5&quot;,&quot;]&quot;,&quot;.&quot;]]', callbackFn)«Бе́лая стрела́» — согласно распространённой в 1990-е годы в России городской легенде, якобы специально организованная и подготовленная законспирированная правительственная спецслужба, сотрудники которой — бывшие и действовавшие милиционеры и спецназовцы, имеющие право на физическую ликвидацию особо опасных уголовных авторитетов и лидеров орудовавших в России ОПГ, относительно которых не представляется возможным привлечения их к уголовной ответственности законными методами [1] [2] [3].Несмотря на отсутствие официальных доказательств существования организации и многочисленные опровержения со стороны силовых структур и служб безопасности [4], в российском обществе легенду считают основанной на подлинных фактах громких убийств криминальных авторитетов, совершённых в 1990-е годы, и не исключают существование реальной спецслужбы [5].&gt;&gt;&gt;&gt;&gt;&gt; alm.disallowStress()&gt;&gt;&gt; alm.textToJson('«Бе́лая стрела́» — согласно распространённой в 1990-е годы в России городской легенде, якобы специально организованная и подготовленная законспирированная правительственная спецслужба, сотрудники которой — бывшие и действовавшие милиционеры и спецназовцы, имеющие право на физическую ликвидацию особо опасных уголовных авторитетов и лидеров орудовавших в России ОПГ, относительно которых не представляется возможным привлечения их к уголовной ответственности законными методами[1][2][3]. Несмотря на отсутствие официальных доказательств существования организации и многочисленные опровержения со стороны силовых структур и служб безопасности[4], в российском обществе легенду считают основанной на подлинных фактах громких убийств криминальных авторитетов, совершённых в 1990-е годы, и не исключают существование реальной спецслужбы[5].', callbackFn)[[&quot;«&quot;,&quot;Белая&quot;,&quot;стрела&quot;,&quot;»&quot;,&quot;—&quot;,&quot;согласно&quot;,&quot;распространённой&quot;,&quot;в&quot;,&quot;1990-е&quot;,&quot;годы&quot;,&quot;в&quot;,&quot;России&quot;,&quot;городской&quot;,&quot;легенде&quot;,&quot;,&quot;,&quot;якобы&quot;,&quot;специально&quot;,&quot;организованная&quot;,&quot;и&quot;,&quot;подготовленная&quot;,&quot;законспирированная&quot;,&quot;правительственная&quot;,&quot;спецслужба&quot;,&quot;,&quot;,&quot;сотрудники&quot;,&quot;которой&quot;,&quot;—&quot;,&quot;бывшие&quot;,&quot;и&quot;,&quot;действовавшие&quot;,&quot;милиционеры&quot;,&quot;и&quot;,&quot;спецназовцы&quot;,&quot;,&quot;,&quot;имеющие&quot;,&quot;право&quot;,&quot;на&quot;,&quot;физическую&quot;,&quot;ликвидацию&quot;,&quot;особо&quot;,&quot;опасных&quot;,&quot;уголовных&quot;,&quot;авторитетов&quot;,&quot;и&quot;,&quot;лидеров&quot;,&quot;орудовавших&quot;,&quot;в&quot;,&quot;России&quot;,&quot;ОПГ&quot;,&quot;,&quot;,&quot;относительно&quot;,&quot;которых&quot;,&quot;не&quot;,&quot;представляется&quot;,&quot;возможным&quot;,&quot;привлечения&quot;,&quot;их&quot;,&quot;к&quot;,&quot;уголовной&quot;,&quot;ответственности&quot;,&quot;законными&quot;,&quot;методами&quot;,&quot;[&quot;,&quot;1&quot;,&quot;]&quot;,&quot;[&quot;,&quot;2&quot;,&quot;]&quot;,&quot;[&quot;,&quot;3&quot;,&quot;]&quot;,&quot;.&quot;],[&quot;Несмотря&quot;,&quot;на&quot;,&quot;отсутствие&quot;,&quot;официальных&quot;,&quot;доказательств&quot;,&quot;существования&quot;,&quot;организации&quot;,&quot;и&quot;,&quot;многочисленные&quot;,&quot;опровержения&quot;,&quot;со&quot;,&quot;стороны&quot;,&quot;силовых&quot;,&quot;структур&quot;,&quot;и&quot;,&quot;служб&quot;,&quot;безопасности&quot;,&quot;[&quot;,&quot;4&quot;,&quot;]&quot;,&quot;,&quot;,&quot;в&quot;,&quot;российском&quot;,&quot;обществе&quot;,&quot;легенду&quot;,&quot;считают&quot;,&quot;основанной&quot;,&quot;на&quot;,&quot;подлинных&quot;,&quot;фактах&quot;,&quot;громких&quot;,&quot;убийств&quot;,&quot;криминальных&quot;,&quot;авторитетов&quot;,&quot;,&quot;,&quot;совершённых&quot;,&quot;в&quot;,&quot;1990-е&quot;,&quot;годы&quot;,&quot;,&quot;,&quot;и&quot;,&quot;не&quot;,&quot;исключают&quot;,&quot;существование&quot;,&quot;реальной&quot;,&quot;спецслужбы&quot;,&quot;[&quot;,&quot;5&quot;,&quot;]&quot;,&quot;.&quot;]]&gt;&gt;&gt;&gt;&gt;&gt; alm.jsonToText('[[&quot;«&quot;,&quot;Белая&quot;,&quot;стрела&quot;,&quot;»&quot;,&quot;—&quot;,&quot;согласно&quot;,&quot;распространённой&quot;,&quot;в&quot;,&quot;1990-е&quot;,&quot;годы&quot;,&quot;в&quot;,&quot;России&quot;,&quot;городской&quot;,&quot;легенде&quot;,&quot;,&quot;,&quot;якобы&quot;,&quot;специально&quot;,&quot;организованная&quot;,&quot;и&quot;,&quot;подготовленная&quot;,&quot;законспирированная&quot;,&quot;правительственная&quot;,&quot;спецслужба&quot;,&quot;,&quot;,&quot;сотрудники&quot;,&quot;которой&quot;,&quot;—&quot;,&quot;бывшие&quot;,&quot;и&quot;,&quot;действовавшие&quot;,&quot;милиционеры&quot;,&quot;и&quot;,&quot;спецназовцы&quot;,&quot;,&quot;,&quot;имеющие&quot;,&quot;право&quot;,&quot;на&quot;,&quot;физическую&quot;,&quot;ликвидацию&quot;,&quot;особо&quot;,&quot;опасных&quot;,&quot;уголовных&quot;,&quot;авторитетов&quot;,&quot;и&quot;,&quot;лидеров&quot;,&quot;орудовавших&quot;,&quot;в&quot;,&quot;России&quot;,&quot;ОПГ&quot;,&quot;,&quot;,&quot;относительно&quot;,&quot;которых&quot;,&quot;не&quot;,&quot;представляется&quot;,&quot;возможным&quot;,&quot;привлечения&quot;,&quot;их&quot;,&quot;к&quot;,&quot;уголовной&quot;,&quot;ответственности&quot;,&quot;законными&quot;,&quot;методами&quot;,&quot;[&quot;,&quot;1&quot;,&quot;]&quot;,&quot;[&quot;,&quot;2&quot;,&quot;]&quot;,&quot;[&quot;,&quot;3&quot;,&quot;]&quot;,&quot;.&quot;],[&quot;Несмотря&quot;,&quot;на&quot;,&quot;отсутствие&quot;,&quot;официальных&quot;,&quot;доказательств&quot;,&quot;существования&quot;,&quot;организации&quot;,&quot;и&quot;,&quot;многочисленные&quot;,&quot;опровержения&quot;,&quot;со&quot;,&quot;стороны&quot;,&quot;силовых&quot;,&quot;структур&quot;,&quot;и&quot;,&quot;служб&quot;,&quot;безопасности&quot;,&quot;[&quot;,&quot;4&quot;,&quot;]&quot;,&quot;,&quot;,&quot;в&quot;,&quot;российском&quot;,&quot;обществе&quot;,&quot;легенду&quot;,&quot;считают&quot;,&quot;основанной&quot;,&quot;на&quot;,&quot;подлинных&quot;,&quot;фактах&quot;,&quot;громких&quot;,&quot;убийств&quot;,&quot;криминальных&quot;,&quot;авторитетов&quot;,&quot;,&quot;,&quot;совершённых&quot;,&quot;в&quot;,&quot;1990-е&quot;,&quot;годы&quot;,&quot;,&quot;,&quot;и&quot;,&quot;не&quot;,&quot;исключают&quot;,&quot;существование&quot;,&quot;реальной&quot;,&quot;спецслужбы&quot;,&quot;[&quot;,&quot;5&quot;,&quot;]&quot;,&quot;.&quot;]]', callbackFn)«Белая стрела» — согласно распространённой в 1990-е годы в России городской легенде, якобы специально организованная и подготовленная законспирированная правительственная спецслужба, сотрудники которой — бывшие и действовавшие милиционеры и спецназовцы, имеющие право на физическую ликвидацию особо опасных уголовных авторитетов и лидеров орудовавших в России ОПГ, относительно которых не представляется возможным привлечения их к уголовной ответственности законными методами [1] [2] [3].Несмотря на отсутствие официальных доказательств существования организации и многочисленные опровержения со стороны силовых структур и служб безопасности [4], в российском обществе легенду считают основанной на подлинных фактах громких убийств криминальных авторитетов, совершённых в 1990-е годы, и не исключают существование реальной спецслужбы [5].```---### Methods:- **addBadword** - Method add bad word- **setBadwords** - Method set words to blacklist- **getBadwords** - Method get words in blacklist### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setBadwords([&quot;hello&quot;, &quot;world&quot;, &quot;test&quot;])&gt;&gt;&gt;&gt;&gt;&gt; alm.getBadwords(){1554834897, 2156498622, 28307030}&gt;&gt;&gt;&gt;&gt;&gt; alm.addBadword(&quot;test2&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.getBadwords(){5170183734, 1554834897, 2156498622, 28307030}```### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setBadwords({24227504, 1219922507, 1794085167})&gt;&gt;&gt;&gt;&gt;&gt; alm.getBadwords(){24227504, 1219922507, 1794085167}&gt;&gt;&gt;&gt;&gt;&gt; alm.clear(alm.clear_t.badwords)&gt;&gt;&gt;&gt;&gt;&gt; alm.getBadwords(){}```---### Methods:- **addGoodword** - Method add good word- **setGoodwords** - Method set words to whitelist- **getGoodwords** - Method get words in whitelist### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setGoodwords([&quot;hello&quot;, &quot;world&quot;, &quot;test&quot;])&gt;&gt;&gt;&gt;&gt;&gt; alm.getGoodwords(){1554834897, 2156498622, 28307030}&gt;&gt;&gt;&gt;&gt;&gt; alm.addGoodword(&quot;test2&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.getGoodwords(){5170183734, 1554834897, 2156498622, 28307030}&gt;&gt;&gt;&gt;&gt;&gt; alm.clear(alm.clear_t.goodwords)&gt;&gt;&gt;&gt;&gt;  alm.getGoodwords(){}```### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setGoodwords({24227504, 1219922507, 1794085167})&gt;&gt;&gt;&gt;&gt;&gt; alm.getGoodwords(){24227504, 1219922507, 1794085167}```---### Methods:- **setUserToken** - Method for adding user token- **getUserTokens** - User token list retrieval method- **getUserTokenId** - Method for obtaining user token identifier- **getUserTokenWord** - Method for obtaining a custom token by its identifier### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setUserToken(&quot;usa&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.setUserToken(&quot;russia&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.getUserTokenId(&quot;usa&quot;)5759809081&gt;&gt;&gt;&gt;&gt;&gt; alm.getUserTokenId(&quot;russia&quot;)9910674734&gt;&gt;&gt;&gt;&gt;&gt; alm.getUserTokens()['usa', 'russia']&gt;&gt;&gt;&gt;&gt;&gt; alm.getUserTokenWord(5759809081)'usa'&gt;&gt;&gt;&gt;&gt;&gt; alm.getUserTokenWord(9910674734)'russia'&gt;&gt;&gt;&gt;&gt; alm.clear(alm.clear_t.utokens)&gt;&gt;&gt;&gt;&gt;&gt; alm.getUserTokens()[]```---### Methods:- **findNgram** - N-gram search method in text- **word** - &quot;Method to extract a word by its identifier&quot;### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt; &gt;&gt;&gt; def callbackFn(text):...     print(text)... &gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt; &gt;&gt;&gt; alm.idw(&quot;привет&quot;)2487910648&gt;&gt;&gt; alm.word(2487910648)'привет'&gt;&gt;&gt; &gt;&gt;&gt; alm.findNgram(&quot;Особое место занимает чудотворная икона Лобзание Христа Иудою&quot;, callbackFn)&lt;s&gt; ОсобоеОсобое местоместо занимаетзанимает чудотворнаячудотворная иконаикона ЛобзаниеЛобзание ХристаХриста ИудоюИудою &lt;/s&gt;&gt;&gt;&gt;```---### Methods:- **setUserTokenMethod** - Method for set a custom token processing function### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; def fn(token, word):...     if token and (token == &quot;&lt;usa&gt;&quot;):...         if word and (word.lower() == &quot;usa&quot;):...             return True...     elif token and (token == &quot;&lt;russia&gt;&quot;):...         if word and (word.lower() == &quot;russia&quot;):...             return True...     return False... &gt;&gt;&gt; alm.setUserToken(&quot;usa&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.setUserToken(&quot;russia&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.setUserTokenMethod(&quot;usa&quot;, fn)&gt;&gt;&gt;&gt;&gt;&gt; alm.setUserTokenMethod(&quot;russia&quot;, fn)&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;usa&quot;)5759809081&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;russia&quot;)9910674734&gt;&gt;&gt;&gt;&gt;&gt; alm.getUserTokenWord(5759809081)'usa'&gt;&gt;&gt;&gt;&gt;&gt; alm.getUserTokenWord(9910674734)'russia'```---### Methods:- **setAlmV2** - Method for set the language model type ALMv2- **unsetAlmV2** - Method for unset the language model type ALMv2- **readALM** - Method for reading data from a binary container- **setWordPreprocessingMethod** - Method for set the word preprocessing function### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt; &gt;&gt;&gt; alm.setAlmV2()&gt;&gt;&gt; &gt;&gt;&gt; def run(word, context):...     if word == &quot;возле&quot;: word = &quot;около&quot;...     return word... &gt;&gt;&gt; alm.setOption(alm.options_t.debug)&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; alm.setWordPreprocessingMethod(run)&gt;&gt;&gt;&gt;&gt;&gt; a = alm.perplexity(&quot;неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор???с лязгом выкатился и остановился возле мальчика....&quot;)info: &lt;s&gt; Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор &lt;punct&gt; &lt;punct&gt; &lt;punct&gt; &lt;/s&gt;info: p( неожиданно | &lt;s&gt; ) = [2gram] 0.00038931 [ -3.40969900 ] / 0.99999991info: p( из | неожиданно ...) = [2gram] 0.10110741 [ -0.99521700 ] / 0.99999979info: p( подворотни | из ...) = [2gram] 0.00711798 [ -2.14764300 ] / 1.00000027info: p( в | подворотни ...) = [2gram] 0.51077661 [ -0.29176900 ] / 1.00000021info: p( олега | в ...) = [2gram] 0.00082936 [ -3.08125500 ] / 0.99999974info: p( ударил | олега ...) = [2gram] 0.25002820 [ -0.60201100 ] / 0.99999978info: p( яркий | ударил ...) = [2gram] 0.50002878 [ -0.30100500 ] / 1.00000034info: p( прожектор | яркий ...) = [2gram] 0.50002878 [ -0.30100500 ] / 1.00000034info: p( патрульный | прожектор ...) = [2gram] 0.50002878 [ -0.30100500 ] / 1.00000034info: p( трактор | патрульный ...) = [2gram] 0.50002878 [ -0.30100500 ] / 1.00000034info: p( &lt;punct&gt; | трактор ...) = [OOV] 0.00000000 [ -inf ] / 0.99999973info: p( &lt;punct&gt; | &lt;punct&gt; ...) = [OOV] 0.00000000 [ -inf ] / 0.99999993info: p( &lt;punct&gt; | &lt;punct&gt; ...) = [OOV] 0.00000000 [ -inf ] / 0.99999993info: p( &lt;/s&gt; | &lt;punct&gt; ...) = [1gram] 0.05693430 [ -1.24462600 ] / 0.99999993info: 1 sentences, 13 words, 0 OOVsinfo: 3 zeroprobs, logprob= -12.97624000 ppl= 8.45034200 ppl1= 9.95800426info: &lt;s&gt; С лязгом выкатился и остановился около мальчика &lt;punct&gt; &lt;punct&gt; &lt;punct&gt; &lt;punct&gt; &lt;/s&gt;info: p( с | &lt;s&gt; ) = [2gram] 0.00642448 [ -2.19216200 ] / 0.99999991info: p( лязгом | с ...) = [2gram] 0.00195917 [ -2.70792700 ] / 0.99999999info: p( выкатился | лязгом ...) = [2gram] 0.50002878 [ -0.30100500 ] / 1.00000034info: p( и | выкатился ...) = [2gram] 0.51169951 [ -0.29098500 ] / 1.00000024info: p( остановился | и ...) = [2gram] 0.00143382 [ -2.84350600 ] / 0.99999975info: p( около | остановился ...) = [1gram] 0.00011358 [ -3.94468000 ] / 1.00000003info: p( мальчика | около ...) = [1gram] 0.00003932 [ -4.40541100 ] / 1.00000016info: p( &lt;punct&gt; | мальчика ...) = [OOV] 0.00000000 [ -inf ] / 0.99999990info: p( &lt;punct&gt; | &lt;punct&gt; ...) = [OOV] 0.00000000 [ -inf ] / 0.99999993info: p( &lt;punct&gt; | &lt;punct&gt; ...) = [OOV] 0.00000000 [ -inf ] / 0.99999993info: p( &lt;punct&gt; | &lt;punct&gt; ...) = [OOV] 0.00000000 [ -inf ] / 0.99999993info: p( &lt;/s&gt; | &lt;punct&gt; ...) = [1gram] 0.05693430 [ -1.24462600 ] / 0.99999993info: 1 sentences, 11 words, 0 OOVsinfo: 4 zeroprobs, logprob= -17.93030200 ppl= 31.20267541 ppl1= 42.66064865&gt;&gt;&gt; print(a.logprob)-30.906542```### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt; &gt;&gt;&gt; alm.setAlmV2()&gt;&gt;&gt; &gt;&gt;&gt; alm.setOption(alm.options_t.debug)&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; def statusAlm(status):...     print(&quot;Read ALM&quot;, status)... &gt;&gt;&gt; alm.readALM(&quot;./lm.alm&quot;, &quot;password&quot;, 128, statusAlm)Read ALM 0Read ALM 1Read ALM 2Read ALM 3Read ALM 4Read ALM 5Read ALM 6...&gt;&gt;&gt;&gt;&gt;&gt; a = alm.perplexity(&quot;неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор???с лязгом выкатился и остановился возле мальчика....&quot;)info: &lt;s&gt; Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор &lt;punct&gt; &lt;punct&gt; &lt;punct&gt; &lt;/s&gt;info: p( неожиданно | &lt;s&gt; ) = [2gram] 0.00038931 [ -3.40969900 ] / 0.99999991info: p( из | неожиданно ...) = [2gram] 0.10110741 [ -0.99521700 ] / 0.99999979info: p( подворотни | из ...) = [2gram] 0.00711798 [ -2.14764300 ] / 1.00000027info: p( в | подворотни ...) = [2gram] 0.51077661 [ -0.29176900 ] / 1.00000021info: p( олега | в ...) = [2gram] 0.00082936 [ -3.08125500 ] / 0.99999974info: p( ударил | олега ...) = [2gram] 0.25002820 [ -0.60201100 ] / 0.99999978info: p( яркий | ударил ...) = [2gram] 0.50002878 [ -0.30100500 ] / 1.00000034info: p( прожектор | яркий ...) = [2gram] 0.50002878 [ -0.30100500 ] / 1.00000034info: p( патрульный | прожектор ...) = [2gram] 0.50002878 [ -0.30100500 ] / 1.00000034info: p( трактор | патрульный ...) = [2gram] 0.50002878 [ -0.30100500 ] / 1.00000034info: p( &lt;punct&gt; | трактор ...) = [OOV] 0.00000000 [ -inf ] / 0.99999973info: p( &lt;punct&gt; | &lt;punct&gt; ...) = [OOV] 0.00000000 [ -inf ] / 0.99999993info: p( &lt;punct&gt; | &lt;punct&gt; ...) = [OOV] 0.00000000 [ -inf ] / 0.99999993info: p( &lt;/s&gt; | &lt;punct&gt; ...) = [1gram] 0.05693430 [ -1.24462600 ] / 0.99999993info: 1 sentences, 13 words, 0 OOVsinfo: 3 zeroprobs, logprob= -12.97624000 ppl= 8.45034200 ppl1= 9.95800426info: &lt;s&gt; С лязгом выкатился и остановился около мальчика &lt;punct&gt; &lt;punct&gt; &lt;punct&gt; &lt;punct&gt; &lt;/s&gt;info: p( с | &lt;s&gt; ) = [2gram] 0.00642448 [ -2.19216200 ] / 0.99999991info: p( лязгом | с ...) = [2gram] 0.00195917 [ -2.70792700 ] / 0.99999999info: p( выкатился | лязгом ...) = [2gram] 0.50002878 [ -0.30100500 ] / 1.00000034info: p( и | выкатился ...) = [2gram] 0.51169951 [ -0.29098500 ] / 1.00000024info: p( остановился | и ...) = [2gram] 0.00143382 [ -2.84350600 ] / 0.99999975info: p( около | остановился ...) = [1gram] 0.00011358 [ -3.94468000 ] / 1.00000003info: p( мальчика | около ...) = [1gram] 0.00003932 [ -4.40541100 ] / 1.00000016info: p( &lt;punct&gt; | мальчика ...) = [OOV] 0.00000000 [ -inf ] / 0.99999990info: p( &lt;punct&gt; | &lt;punct&gt; ...) = [OOV] 0.00000000 [ -inf ] / 0.99999993info: p( &lt;punct&gt; | &lt;punct&gt; ...) = [OOV] 0.00000000 [ -inf ] / 0.99999993info: p( &lt;punct&gt; | &lt;punct&gt; ...) = [OOV] 0.00000000 [ -inf ] / 0.99999993info: p( &lt;/s&gt; | &lt;punct&gt; ...) = [1gram] 0.05693430 [ -1.24462600 ] / 0.99999993info: 1 sentences, 11 words, 0 OOVsinfo: 4 zeroprobs, logprob= -17.93030200 ppl= 31.20267541 ppl1= 42.66064865&gt;&gt;&gt; print(a.logprob)-30.906542```---### Methods:- **setLogfile** - Method of set the file for log output- **setOOvFile** - Method set file for saving OOVs words### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setLogfile(&quot;./log.txt&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.setOOvFile(&quot;./oov.txt&quot;)```---### Methods:- **perplexity** - Perplexity calculation- **pplConcatenate** - Method of combining perplexia- **pplByFiles** - Method for reading perplexity calculation by file or group of files### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; a = alm.perplexity(&quot;неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор???с лязгом выкатился и остановился возле мальчика....&quot;)&gt;&gt;&gt;&gt;&gt;&gt; print(a.logprob)-30.906542&gt;&gt;&gt;&gt;&gt;&gt; print(a.oovs)0&gt;&gt;&gt;&gt;&gt;&gt; print(a.words)24&gt;&gt;&gt;&gt;&gt;&gt; print(a.sentences)2&gt;&gt;&gt;&gt;&gt;&gt; print(a.zeroprobs)7&gt;&gt;&gt;&gt;&gt;&gt; print(a.ppl)17.229063831108224&gt;&gt;&gt;&gt;&gt;&gt; print(a.ppl1)19.398698060810077&gt;&gt;&gt;&gt;&gt;&gt; b = alm.pplByFiles(&quot;./text.txt&quot;)&gt;&gt;&gt;&gt;&gt;&gt; c = alm.pplConcatenate(a, b)&gt;&gt;&gt;&gt;&gt;&gt; print(c.ppl)7.384123548831112```### Description| Name      | Description                                                                 ||-----------|-----------------------------------------------------------------------------|| ppl       | The meaning of perplexity without considering the beginning of the sentence || ppl1      | The meaning of perplexion taking into account the beginning of the sentence || oovs      | Count of oov words                                                          || words     | Count of words in sentence                                                  || logprob   | Word sequence frequency                                                     || sentences | Count of sequences                                                          || zeroprobs | Count of zero probs                                                         |---### Methods:- **tokenization** - Method for breaking text into tokens### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; def tokensFn(word, context, reset, stop):...     print(word, &quot; =&gt; &quot;, context)...     return True...&gt;&gt;&gt; alm.switchAllowApostrophe()&gt;&gt;&gt;&gt;&gt;&gt; alm.tokenization(&quot;«On nous dit qu'aujourd'hui c'est le cas, encore faudra-t-il l'évaluer» l'astronomie&quot;, tokensFn)«  =&gt;  []On  =&gt;  ['«']nous  =&gt;  ['«', 'On']dit  =&gt;  ['«', 'On', 'nous']qu'aujourd'hui  =&gt;  ['«', 'On', 'nous', 'dit']c'est  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;]le  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;, &quot;c'est&quot;]cas  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;, &quot;c'est&quot;, 'le'],  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;, &quot;c'est&quot;, 'le', 'cas']encore  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;, &quot;c'est&quot;, 'le', 'cas', ',']faudra-t-il  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;, &quot;c'est&quot;, 'le', 'cas', ',', 'encore']l  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;, &quot;c'est&quot;, 'le', 'cas', ',', 'encore', 'faudra-t-il', 'l']'  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;, &quot;c'est&quot;, 'le', 'cas', ',', 'encore', 'faudra-t-il', 'l']évaluer  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;, &quot;c'est&quot;, 'le', 'cas', ',', 'encore', 'faudra-t-il', 'l', &quot;'&quot;]»  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;, &quot;c'est&quot;, 'le', 'cas', ',', 'encore', 'faudra-t-il', 'l', &quot;'&quot;, 'évaluer']l  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;, &quot;c'est&quot;, 'le', 'cas', ',', 'encore', 'faudra-t-il', 'l', &quot;'&quot;, 'évaluer', '»']'  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;, &quot;c'est&quot;, 'le', 'cas', ',', 'encore', 'faudra-t-il', 'l', &quot;'&quot;, 'évaluer', '»', 'l']astronomie  =&gt;  ['«', 'On', 'nous', 'dit', &quot;qu'aujourd'hui&quot;, &quot;c'est&quot;, 'le', 'cas', ',', 'encore', 'faudra-t-il', 'l', &quot;'&quot;, 'évaluer', '»', 'l', &quot;'&quot;]```---### Methods:- **setTokenizerFn** - Method for set the function of an external tokenizer### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; def tokenizerFn(text, callback):...     word = &quot;&quot;...     context = []...     for letter in text:...         if letter == &quot; &quot; and len(word) &gt; 0:...             if not callback(word, context, False, False): return...             context.append(word)...             word = &quot;&quot;...         elif letter == &quot;.&quot; or letter == &quot;!&quot; or letter == &quot;?&quot;:...             if not callback(word, context, True, False): return...             word = &quot;&quot;...             context = []...         else:...             word += letter...     if len(word) &gt; 0:...         if not callback(word, context, False, True): return...&gt;&gt;&gt; def tokensFn(word, context, reset, stop):...     print(word, &quot; =&gt; &quot;, context)...     return True...&gt;&gt;&gt; alm.setTokenizerFn(tokenizerFn)&gt;&gt;&gt;&gt;&gt;&gt; alm.tokenization(&quot;Hello World today!&quot;, tokensFn)Hello  =&gt;  []World  =&gt;  ['Hello']today  =&gt;  ['Hello', 'World']```---### Methods:- **sentences** - Sentences generation method- **sentencesToFile** - Method for assembling a specified number of sentences and writing to a file### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; def sentencesFn(text):...     print(&quot;Sentences:&quot;, text)...     return True...&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; alm.sentences(sentencesFn)Sentences: &lt;s&gt; В общем &lt;/s&gt;Sentences: &lt;s&gt; С лязгом выкатился и остановился возле мальчика &lt;/s&gt;Sentences: &lt;s&gt; У меня нет &lt;/s&gt;Sentences: &lt;s&gt; Я вообще не хочу &lt;/s&gt;Sentences: &lt;s&gt; Да и в общем &lt;/s&gt;Sentences: &lt;s&gt; Не могу &lt;/s&gt;Sentences: &lt;s&gt; Ну в общем &lt;/s&gt;Sentences: &lt;s&gt; Так что я вообще не хочу &lt;/s&gt;Sentences: &lt;s&gt; Потому что я вообще не хочу &lt;/s&gt;Sentences: &lt;s&gt; Продолжение следует &lt;/s&gt;Sentences: &lt;s&gt; Неожиданно из подворотни в олега ударил яркий прожектор патрульный трактор &lt;/s&gt;&gt;&gt;&gt;&gt;&gt;&gt; alm.sentencesToFile(5, &quot;./result.txt&quot;)```---### Methods:- **fixUppers** - Method for correcting registers in the text- **fixUppersByFiles** - Method for correcting text registers in a text file### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; alm.fixUppers(&quot;неожиданно из подворотни в олега ударил яркий прожектор патрульный трактор???с лязгом выкатился и остановился возле мальчика....&quot;)'Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор??? С лязгом выкатился и остановился возле мальчика....'&gt;&gt;&gt;&gt;&gt;&gt; alm.fixUppersByFiles(&quot;./corpus&quot;, &quot;./result.txt&quot;, &quot;txt&quot;)```---### Methods:- **checkHypLat** - Hyphen and latin character search method### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.checkHypLat(&quot;Hello-World&quot;)(True, True)&gt;&gt;&gt;&gt;&gt;&gt; alm.checkHypLat(&quot;Hello&quot;)(False, True)&gt;&gt;&gt;&gt;&gt;&gt; alm.checkHypLat(&quot;Привет&quot;)(False, False)&gt;&gt;&gt;&gt;&gt;&gt; alm.checkHypLat(&quot;так-как&quot;)(True, False)```---### Methods:- **getUppers** - Method for extracting registers for each word- **countLetter** - Method for counting the amount of a specific letter in a word### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;Living&quot;)10493385932&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;in&quot;)3301&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;the&quot;)217280&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;USA&quot;)188643&gt;&gt;&gt;&gt;&gt;&gt; alm.getUppers([10493385932, 3301, 217280, 188643])[1, 0, 0, 7]&gt;&gt;&gt; &gt;&gt;&gt; alm.countLetter(&quot;hello-world&quot;, &quot;-&quot;)1&gt;&gt;&gt;&gt;&gt;&gt; alm.countLetter(&quot;hello-world&quot;, &quot;l&quot;)3```---### Methods:- **urls** - Method for extracting URL address coordinates in a string### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.urls(&quot;This website: example.com was designed with ...&quot;){14: 25}&gt;&gt;&gt;&gt;&gt;&gt; alm.urls(&quot;This website: https://a.b.c.example.net?id=52#test-1 was designed with ...&quot;){14: 52}&gt;&gt;&gt;&gt;&gt;&gt; alm.urls(&quot;This website: https://a.b.c.example.net?id=52#test-1 and 127.0.0.1 was designed with ...&quot;){14: 52, 57: 66}```---### Methods:- **roman2Arabic** - Method for translating Roman numerals to Arabic### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.roman2Arabic(&quot;XVI&quot;)16```---### Methods:- **rest** - Method for correction and detection of words with mixed alphabets- **setSubstitutes** - Method for set letters to correct words from mixed alphabets- **getSubstitutes** - Method of extracting letters to correct words from mixed alphabets### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.setSubstitutes({'p':'р','c':'с','o':'о','t':'т','k':'к','e':'е','a':'а','h':'н','x':'х','b':'в','m':'м'})&gt;&gt;&gt;&gt;&gt;&gt; alm.getSubstitutes(){'a': 'а', 'b': 'в', 'c': 'с', 'e': 'е', 'h': 'н', 'k': 'к', 'm': 'м', 'o': 'о', 'p': 'р', 't': 'т', 'x': 'х'}&gt;&gt;&gt;&gt;&gt;&gt; str = &quot;ПPИBETИК&quot;&gt;&gt;&gt;&gt;&gt;&gt; str.lower()'пpиbetик'&gt;&gt;&gt;&gt;&gt;&gt; alm.rest(str)'приветик'```---### Methods:- **setTokensDisable** - Method for set the list of forbidden tokens- **setTokensUnknown** - Method for set the list of tokens cast to 〈unk〉- **setTokenDisable** - Method for set the list of unidentifiable tokens- **setTokenUnknown** - Method of set the list of tokens that need to be identified as 〈unk〉- **getTokensDisable** - Method for retrieving the list of forbidden tokens- **getTokensUnknown** - Method for extracting a list of tokens reducible to 〈unk〉- **setAllTokenDisable** - Method for set all tokens as unidentifiable- **setAllTokenUnknown** - The method of set all tokens identified as 〈unk〉### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;&lt;date&gt;&quot;)6&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;&lt;time&gt;&quot;)7&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;&lt;abbr&gt;&quot;)5&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;&lt;math&gt;&quot;)9&gt;&gt;&gt;&gt;&gt;&gt; alm.setTokenDisable(&quot;date|time|abbr|math&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.getTokensDisable(){9, 5, 6, 7}&gt;&gt;&gt;&gt;&gt;&gt; alm.setTokensDisable({6, 7, 5, 9})&gt;&gt;&gt;&gt;&gt;&gt; alm.setTokenUnknown(&quot;date|time|abbr|math&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.getTokensUnknown(){9, 5, 6, 7}&gt;&gt;&gt;&gt;&gt;&gt; alm.setTokensUnknown({6, 7, 5, 9})&gt;&gt;&gt;&gt;&gt;&gt; alm.setAllTokenDisable()&gt;&gt;&gt;&gt;&gt;&gt; alm.getTokensDisable(){2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23}&gt;&gt;&gt;&gt;&gt;&gt; alm.setAllTokenUnknown()&gt;&gt;&gt;&gt;&gt;&gt; alm.getTokensUnknown(){2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23}```---### Methods:- **countAlphabet** - Method of obtaining the number of letters in the dictionary### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.getAlphabet()'abcdefghijklmnopqrstuvwxyz'&gt;&gt;&gt;&gt;&gt;&gt; alm.countAlphabet()26&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.countAlphabet()59```---### Methods:- **countBigrams** - Method get count bigrams- **countTrigrams** - Method get count trigrams- **countGrams** - Method get count N-gram by lm size### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; alm.countBigrams(&quot;неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор???с лязгом выкатился и остановился возле мальчика....&quot;)12&gt;&gt;&gt;&gt;&gt;&gt; alm.countTrigrams(&quot;неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор???с лязгом выкатился и остановился возле мальчика....&quot;)10&gt;&gt;&gt;&gt;&gt;&gt; alm.size()3&gt;&gt;&gt;&gt;&gt;&gt; alm.countGrams(&quot;неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор???с лязгом выкатился и остановился возле мальчика....&quot;)10&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;неожиданно&quot;)3263936167&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;из&quot;)5134&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;подворотни&quot;)12535356101&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;в&quot;)53&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;Олега&quot;)2824508300&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;ударил&quot;)24816796913&gt;&gt;&gt;&gt;&gt;&gt; alm.countBigrams([3263936167, 5134, 12535356101, 53, 2824508300, 24816796913])5&gt;&gt;&gt;&gt;&gt;&gt; alm.countTrigrams([3263936167, 5134, 12535356101, 53, 2824508300, 24816796913])4&gt;&gt;&gt;&gt;&gt;&gt; alm.countGrams([3263936167, 5134, 12535356101, 53, 2824508300, 24816796913])4```---### Methods:- **arabic2Roman** - Convert arabic number to roman number### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.arabic2Roman(23)'XXIII'&gt;&gt;&gt;&gt;&gt;&gt; alm.arabic2Roman(&quot;33&quot;)'XXXIII'```---### Methods:- **setThreads** - Method for set the number of threads (0 - all threads)### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; alm.setThreads(3)&gt;&gt;&gt;&gt;&gt;&gt; a = alm.pplByFiles(&quot;./text.txt&quot;)&gt;&gt;&gt;&gt;&gt;&gt; print(a.logprob)-48201.29481399994```---### Methods:- **fti** - Method for removing the fractional part of a number### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.fti(5892.4892)5892489200000&gt;&gt;&gt;&gt;&gt;&gt; alm.fti(5892.4892, 4)58924892```---### Methods:- **context** - Method for assembling text context from a sequence### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;неожиданно&quot;)3263936167&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;из&quot;)5134&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;подворотни&quot;)12535356101&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;в&quot;)53&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;Олега&quot;)2824508300&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;ударил&quot;)24816796913&gt;&gt;&gt;&gt;&gt;&gt; alm.context([3263936167, 5134, 12535356101, 53, 2824508300, 24816796913])'Неожиданно из подворотни в Олега ударил'```---### Methods:- **isAbbr** - Method of checking a word for compliance with an abbreviation- **isSuffix** - Method for checking a word for a suffix of a numeric abbreviation- **isToken** - Method for checking if an identifier matches a token- **isIdWord** - Method for checking if an identifier matches a word### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; alm.addAbbr(&quot;США&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.isAbbr(&quot;сша&quot;)True&gt;&gt;&gt;&gt;&gt;&gt; alm.addSuffix(&quot;1-я&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.isSuffix(&quot;1-я&quot;)True&gt;&gt;&gt;&gt;&gt;&gt; alm.isToken(alm.idw(&quot;США&quot;))True&gt;&gt;&gt;&gt;&gt;&gt; alm.isToken(alm.idw(&quot;1-я&quot;))True&gt;&gt;&gt;&gt;&gt;&gt; alm.isToken(alm.idw(&quot;125&quot;))True&gt;&gt;&gt;&gt;&gt;&gt; alm.isToken(alm.idw(&quot;&lt;s&gt;&quot;))True&gt;&gt;&gt;&gt;&gt;&gt; alm.isToken(alm.idw(&quot;Hello&quot;))False&gt;&gt;&gt;&gt;&gt;&gt; alm.isIdWord(alm.idw(&quot;https://anyks.com&quot;))True&gt;&gt;&gt;&gt;&gt;&gt; alm.isIdWord(alm.idw(&quot;Hello&quot;))True&gt;&gt;&gt;&gt;&gt;&gt; alm.isIdWord(alm.idw(&quot;-&quot;))False```---### Methods:- **findByFiles** - Method search N-grams in a text file### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.debug)&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; alm.findByFiles(&quot;./text.txt&quot;, &quot;./result.txt&quot;)info: &lt;s&gt; Кукайсари кукайсари японскиеяпонские каллиграфыкаллиграфы яя постояннопостоянно навещалнавещал ихих тайнотайно отот людейлюдей &lt;/s&gt;info: &lt;s&gt; Неожиданно изНеожиданно из подворотнииз подворотни вподворотни в Олегав Олега ударилОлега ударил яркийударил яркий прожекторяркий прожектор патрульныйпрожектор патрульный тракторпатрульный трактор&lt;s&gt; С лязгомС лязгом выкатилсялязгом выкатился ивыкатился и остановилсяи остановился возлеостановился возле мальчикавозле мальчика```---### Methods:- **checkSequence** - Sequence Existence Method- **existSequence** - Method for checking the existence of a sequence, excluding non-word tokens- **checkByFiles** - Method for checking if a sequence exists in a text file### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.debug)&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; alm.addAbbr(&quot;США&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.isAbbr(&quot;сша&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence(&quot;Неожиданно из подворотни в олега ударил&quot;)True&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence(&quot;Сегодня сыграл и в Олега ударил яркий прожектор патрульный трактор с корпоративным сектором&quot;)True&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence(&quot;Сегодня сыграл и в Олега ударил яркий прожектор патрульный трактор с корпоративным сектором&quot;, True)True&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence(&quot;в Олега ударил яркий&quot;)True&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence(&quot;в Олега ударил яркий&quot;, True)True&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence(&quot;от госсекретаря США&quot;)True&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence(&quot;от госсекретаря США&quot;, True)True&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence(&quot;Неожиданно из подворотни в олега ударил&quot;, 2)True&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence([&quot;Неожиданно&quot;,&quot;из&quot;,&quot;подворотни&quot;,&quot;в&quot;,&quot;олега&quot;,&quot;ударил&quot;], 2)True&gt;&gt;&gt;&gt;&gt;&gt; alm.existSequence(&quot;&lt;s&gt; Сегодня сыграл и в, Олега ударил яркий прожектор, патрульный трактор - с корпоративным сектором &lt;/s&gt;&quot;, 2)(True, 0)&gt;&gt;&gt;&gt;&gt;&gt; alm.existSequence([&quot;&lt;s&gt;&quot;,&quot;Сегодня&quot;,&quot;сыграл&quot;,&quot;и&quot;,&quot;в&quot;,&quot;,&quot;,&quot;Олега&quot;,&quot;ударил&quot;,&quot;яркий&quot;,&quot;прожектор&quot;,&quot;,&quot;,&quot;патрульный&quot;,&quot;трактор&quot;,&quot;-&quot;,&quot;с&quot;,&quot;корпоративным&quot;,&quot;сектором&quot;,&quot;&lt;/s&gt;&quot;], 2)(True, 2)&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;от&quot;)6086&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;госсекретаря&quot;)51273912082&gt;&gt;&gt;&gt;&gt;&gt; alm.idw(&quot;США&quot;)5&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence([6086, 51273912082, 5])True&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence([6086, 51273912082, 5], True)True&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence([&quot;от&quot;, &quot;госсекретаря&quot;, &quot;США&quot;])True&gt;&gt;&gt;&gt;&gt;&gt; alm.checkSequence([&quot;от&quot;, &quot;госсекретаря&quot;, &quot;США&quot;], True)True&gt;&gt;&gt;&gt;&gt;&gt; alm.checkByFiles(&quot;./text.txt&quot;, &quot;./result.txt&quot;)info: 1999 | YES | Какой-то период времени мы вообще не общалисьinfo: 2000 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор.С лязгом выкатился и остановился возле мальчика.info: 2001 | YES | Так как эти яйца жалко есть а хочется все больше любоваться их можно покрыть лаком даже прозрачным лаком для ногтейinfo: 2002 | NO | кукай &lt;unk&gt; &lt;unk&gt; сари кукай &lt;unk&gt; &lt;unk&gt; сари японские каллиграфы я постоянно навещал их тайно от людейinfo: 2003 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор???С лязгом выкатился и остановился возле мальчика....info: 2004 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор?С лязгом выкатился и остановился возле мальчика.info: 2005 | YES | Сегодня яичницей никто не завтракал как впрочем и вчера на ближайшем к нам рынке мы ели фруктовый салат со свежевыжатым соком как в старые добрые времена в Бразилииinfo: 2006 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор!С лязгом выкатился и остановился возле мальчика.info: 2007 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор.с лязгом выкатился и остановился возле мальчика.All texts: 2007Exists texts: 1359Not exists texts: 648&gt;&gt;&gt;&gt;&gt;&gt; alm.checkByFiles(&quot;./corpus&quot;, &quot;./result.txt&quot;, False, &quot;txt&quot;)info: 1999 | YES | Какой-то период времени мы вообще не общалисьinfo: 2000 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор.С лязгом выкатился и остановился возле мальчика.info: 2001 | YES | Так как эти яйца жалко есть а хочется все больше любоваться их можно покрыть лаком даже прозрачным лаком для ногтейinfo: 2002 | NO | кукай &lt;unk&gt; &lt;unk&gt; сари кукай &lt;unk&gt; &lt;unk&gt; сари японские каллиграфы я постоянно навещал их тайно от людейinfo: 2003 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор???С лязгом выкатился и остановился возле мальчика....info: 2004 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор?С лязгом выкатился и остановился возле мальчика.info: 2005 | YES | Сегодня яичницей никто не завтракал как впрочем и вчера на ближайшем к нам рынке мы ели фруктовый салат со свежевыжатым соком как в старые добрые времена в Бразилииinfo: 2006 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор!С лязгом выкатился и остановился возле мальчика.info: 2007 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор.с лязгом выкатился и остановился возле мальчика.All texts: 2007Exists texts: 1359Not exists texts: 648&gt;&gt;&gt;&gt;&gt;&gt; alm.checkByFiles(&quot;./corpus&quot;, &quot;./result.txt&quot;, True, &quot;txt&quot;)info: 2000 | NO | Так как эти яйца жалко есть а хочется все больше любоваться их можно покрыть лаком даже прозрачным лаком для ногтейinfo: 2001 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор.С лязгом выкатился и остановился возле мальчика.info: 2002 | NO | Сегодня яичницей никто не завтракал как впрочем и вчера на ближайшем к нам рынке мы ели фруктовый салат со свежевыжатым соком как в старые добрые времена в Бразилииinfo: 2003 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор!С лязгом выкатился и остановился возле мальчика.info: 2004 | NO | кукай &lt;unk&gt; &lt;unk&gt; сари кукай &lt;unk&gt; &lt;unk&gt; сари японские каллиграфы я постоянно навещал их тайно от людейinfo: 2005 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор?С лязгом выкатился и остановился возле мальчика.info: 2006 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор???С лязгом выкатился и остановился возле мальчика....info: 2007 | NO | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор.с лязгом выкатился и остановился возле мальчика.All texts: 2007Exists texts: 0Not exists texts: 2007```---### Methods:- **check** - String Check Method- **match** - String Matching Method- **addAbbr** - Method add abbreviation- **addSuffix** - Method add number suffix abbreviation- **setSuffixes** - Method set number suffix abbreviations- **readSuffix** - Method for reading data from a file of suffixes and abbreviations### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt; &gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt; alm.setSubstitutes({'p':'р','c':'с','o':'о','t':'т','k':'к','e':'е','a':'а','h':'н','x':'х','b':'в','m':'м'})&gt;&gt;&gt; &gt;&gt;&gt; alm.check(&quot;Дом-2&quot;, alm.check_t.home2)True&gt;&gt;&gt; &gt;&gt;&gt; alm.check(&quot;Дом2&quot;, alm.check_t.home2)False&gt;&gt;&gt; &gt;&gt;&gt; alm.check(&quot;Дом-2&quot;, alm.check_t.latian)False&gt;&gt;&gt; &gt;&gt;&gt; alm.check(&quot;Hello&quot;, alm.check_t.latian)True&gt;&gt;&gt; &gt;&gt;&gt; alm.check(&quot;прiвет&quot;, alm.check_t.latian)True&gt;&gt;&gt; &gt;&gt;&gt; alm.check(&quot;Дом-2&quot;, alm.check_t.hyphen)True&gt;&gt;&gt; &gt;&gt;&gt; alm.check(&quot;Дом2&quot;, alm.check_t.hyphen)False&gt;&gt;&gt; &gt;&gt;&gt; alm.check(&quot;Д&quot;, alm.check_t.letter)True&gt;&gt;&gt; &gt;&gt;&gt; alm.check(&quot;$&quot;, alm.check_t.letter)False&gt;&gt;&gt; &gt;&gt;&gt; alm.check(&quot;-&quot;, alm.check_t.letter)False&gt;&gt;&gt; &gt;&gt;&gt; alm.check(&quot;просtоквaшино&quot;, alm.check_t.similars)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;my site http://example.ru, it's true&quot;, alm.match_t.url)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;по вашему ip адресу 46.40.123.12 проводится проверка&quot;, alm.match_t.url)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;мой адрес в формате IPv6: http://[2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d]/&quot;, alm.match_t.url)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;13-я&quot;, alm.match_t.abbr)True&gt;&gt;&gt; alm.match(&quot;13-я-й&quot;, alm.match_t.abbr)False&gt;&gt;&gt; alm.match(&quot;т.д&quot;, alm.match_t.abbr)True&gt;&gt;&gt; alm.match(&quot;т.п.&quot;, alm.match_t.abbr)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;С.Ш.А.&quot;, alm.match_t.abbr)True&gt;&gt;&gt; &gt;&gt;&gt; alm.addAbbr(&quot;сша&quot;)&gt;&gt;&gt; alm.match(&quot;США&quot;, alm.match_t.abbr)True&gt;&gt;&gt; &gt;&gt;&gt; alm.addSuffix(&quot;15-летия&quot;)&gt;&gt;&gt; alm.match(&quot;15-летия&quot;, alm.match_t.abbr)True&gt;&gt;&gt; &gt;&gt;&gt; alm.getSuffixes(){3139900457}&gt;&gt;&gt; &gt;&gt;&gt; alm.idw(&quot;лет&quot;)328041&gt;&gt;&gt; &gt;&gt;&gt; alm.idw(&quot;тых&quot;)352214&gt;&gt;&gt; &gt;&gt;&gt; alm.setSuffixes({328041, 352214})&gt;&gt;&gt; &gt;&gt;&gt; alm.getSuffixes(){328041, 352214}&gt;&gt;&gt; &gt;&gt;&gt; def status(status):...     print(status)... &gt;&gt;&gt; alm.readSuffix(&quot;./suffix.abbr&quot;, status)&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;15-лет&quot;, alm.match_t.abbr)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;20-тых&quot;, alm.match_t.abbr)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;15-летия&quot;, alm.match_t.abbr)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;Hello&quot;, alm.match_t.latian)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;прiвет&quot;, alm.match_t.latian)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;23424&quot;, alm.match_t.number)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;hello&quot;, alm.match_t.number)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;23424.55&quot;, alm.match_t.number)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;23424&quot;, alm.match_t.decimal)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;23424.55&quot;, alm.match_t.decimal)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;23424,55&quot;, alm.match_t.decimal)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;-23424.55&quot;, alm.match_t.decimal)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;+23424.55&quot;, alm.match_t.decimal)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;+23424.55&quot;, alm.match_t.anumber)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;15T-34&quot;, alm.match_t.anumber)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;hello&quot;, alm.match_t.anumber)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;hello&quot;, alm.match_t.allowed)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;évaluer&quot;, alm.match_t.allowed)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;13&quot;, alm.match_t.allowed)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;Hello-World&quot;, alm.match_t.allowed)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;Hello&quot;, alm.match_t.math)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;+&quot;, alm.match_t.math)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;=&quot;, alm.match_t.math)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;Hello&quot;, alm.match_t.upper)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;hello&quot;, alm.match_t.upper)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;hellO&quot;, alm.match_t.upper)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;a&quot;, alm.match_t.punct)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;,&quot;, alm.match_t.punct)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot; &quot;, alm.match_t.space)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;a&quot;, alm.match_t.space)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;a&quot;, alm.match_t.special)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;±&quot;, alm.match_t.special)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;[&quot;, alm.match_t.isolation)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;a&quot;, alm.match_t.isolation)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;a&quot;, alm.match_t.greek)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;Ψ&quot;, alm.match_t.greek)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;-&gt;&quot;, alm.match_t.route)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;⇔&quot;, alm.match_t.route)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;a&quot;, alm.match_t.letter)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;!&quot;, alm.match_t.letter)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;!&quot;, alm.match_t.pcards)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;♣&quot;, alm.match_t.pcards)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;p&quot;, alm.match_t.currency)False&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;$&quot;, alm.match_t.currency)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;€&quot;, alm.match_t.currency)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;₽&quot;, alm.match_t.currency)True&gt;&gt;&gt; &gt;&gt;&gt; alm.match(&quot;₿&quot;, alm.match_t.currency)True```---### Methods:- **delInText** - Method for delete letter in text### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.delInText(&quot;неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор??? с лязгом выкатился и остановился возле мальчика....&quot;, alm.wdel_t.punct)'неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор с лязгом выкатился и остановился возле мальчика'&gt;&gt;&gt;&gt;&gt;&gt; alm.delInText(&quot;hello-world-hello-world&quot;, alm.wdel_t.hyphen)'helloworldhelloworld'&gt;&gt;&gt;&gt;&gt;&gt; alm.delInText(&quot;неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор??? с лязгом выкатился и остановился возле мальчика....&quot;, alm.wdel_t.broken)'неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор с лязгом выкатился и остановился возле мальчика'&gt;&gt;&gt;&gt;&gt;&gt; alm.delInText(&quot;«On nous dit qu'aujourd'hui c'est le cas, encore faudra-t-il l'évaluer» l'astronomie&quot;, alm.wdel_t.broken)&quot;On nous dit qu'aujourd'hui c'est le cas encore faudra-t-il l'valuer l'astronomie&quot;```---### Methods:- **countsByFiles** - Method for counting the number of n-grams in a text file### Example:```python&gt;&gt;&gt; import alm&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.debug)&gt;&gt;&gt;&gt;&gt;&gt; alm.setOption(alm.options_t.confidence)&gt;&gt;&gt;&gt;&gt;&gt; alm.setAlphabet(&quot;abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя&quot;)&gt;&gt;&gt;&gt;&gt;&gt; alm.readArpa('./lm.arpa')&gt;&gt;&gt;&gt;&gt;&gt; alm.countsByFiles(&quot;./text.txt&quot;, &quot;./result.txt&quot;, 3)info: 0 | Сегодня яичницей никто не завтракал как впрочем и вчера на ближайшем к нам рынке мы ели фруктовый салат со свежевыжатым соком как в старые добрые времена в Бразилииinfo: 10 | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор?С лязгом выкатился и остановился возле мальчика.info: 10 | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор!С лязгом выкатился и остановился возле мальчика.info: 0 | Так как эти яйца жалко есть а хочется все больше любоваться их можно покрыть лаком даже прозрачным лаком для ногтейinfo: 10 | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор???С лязгом выкатился и остановился возле мальчика....Counts 3grams: 471&gt;&gt;&gt;&gt;&gt;&gt; alm.countsByFiles(&quot;./corpus&quot;, &quot;./result.txt&quot;, 2, &quot;txt&quot;)info: 19 | Так как эти яйца жалко есть а хочется все больше любоваться их можно покрыть лаком даже прозрачным лаком для ногтейinfo: 12 | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор.с лязгом выкатился и остановился возле мальчика.info: 12 | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор!С лязгом выкатился и остановился возле мальчика.info: 10 | кукай &lt;unk&gt; &lt;unk&gt; сари кукай &lt;unk&gt; &lt;unk&gt; сари японские каллиграфы я постоянно навещал их тайно от людейinfo: 12 | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор???С лязгом выкатился и остановился возле мальчика....info: 12 | Неожиданно из подворотни в Олега ударил яркий прожектор патрульный трактор?С лязгом выкатился и остановился возле мальчика.info: 27 | Сегодня яичницей никто не завтракал как впрочем и вчера на ближайшем к нам рынке мы ели фруктовый салат со свежевыжатым соком как в старые добрые времена в БразилииCounts 2grams: 20270```### Description| N-gram size | Description         ||-------------|---------------------|| 1           | language model size || 2           | bigram              || 3           | trigram             |</longdescription>
</pkgmetadata>