<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. begin-intro**reader** is a Python feed reader library.It is designed to allow writing feed reader applicationswithout any business code,and without depending on a particular framework... end-intro|build-status-github| |code-coverage| |documentation-status| |pypi-status| |type-checking| |code-style|.. |build-status-github| image:: https://github.com/lemon24/reader/workflows/build/badge.svg  :target: https://github.com/lemon24/reader/actions?query=workflow%3Abuild  :alt: build status (GitHub Actions).. |code-coverage| image:: https://codecov.io/github/lemon24/reader/coverage.svg?branch=master  :target: https://codecov.io/github/lemon24/reader?branch=master  :alt: code coverage.. |documentation-status| image:: https://readthedocs.org/projects/reader/badge/?version=latest&amp;style=flat  :target: https://reader.readthedocs.io/en/latest/?badge=latest  :alt: documentation status.. |pypi-status| image:: https://img.shields.io/pypi/v/reader.svg  :target: https://pypi.python.org/pypi/reader  :alt: PyPI status.. |type-checking| image:: http://www.mypy-lang.org/static/mypy_badge.svg  :target: http://mypy-lang.org/  :alt: checked with mypy.. |code-style| image:: https://img.shields.io/badge/code%20style-black-000000.svg  :target: https://github.com/psf/black  :alt: code style: black.. begin-features*reader* allows you to:* retrieve, store, and manage **Atom**, **RSS**, and **JSON** feeds  * and even follow **Twitter** accounts* mark articles as read or important* add arbitrary tags/metadata to feeds and articles* filter feeds and articles* full-text search articles* get statistics on feed and user activity* write plugins to extend its functionality* skip all the low level stuff and focus on what makes your feed reader different...all these with:* a stable, clearly documented API* excellent test coverage* fully typed PythonWhat *reader* doesn't do:* provide an UI* provide a REST API (yet)* depend on a web framework* have an opinion of how/where you use itThe following exist, but are optional (and frankly, a bit unpolished):* a minimal web interface  * that works even with text-only browsers  * with automatic tag fixing for podcasts (MP3 enclosures)* a command-line interface.. end-featuresDocumentation: `reader.readthedocs.io`_.. _reader.readthedocs.io: https://reader.readthedocs.io/Usage:.. begin-usage.. code-block:: bash    $ pip install reader.. code-block:: python    &gt;&gt;&gt; from reader import make_reader    &gt;&gt;&gt;    &gt;&gt;&gt; reader = make_reader('db.sqlite')    &gt;&gt;&gt; reader.add_feed('http://www.hellointernet.fm/podcast?format=rss')    &gt;&gt;&gt; reader.update_feeds()    &gt;&gt;&gt;    &gt;&gt;&gt; entries = list(reader.get_entries())    &gt;&gt;&gt; [e.title for e in entries]    ['H.I. #108: Project Cyclops', 'H.I. #107: One Year of Weird', ...]    &gt;&gt;&gt;    &gt;&gt;&gt; reader.mark_entry_as_read(entries[0])    &gt;&gt;&gt;    &gt;&gt;&gt; [e.title for e in reader.get_entries(read=False)]    ['H.I. #107: One Year of Weird', 'H.I. #106: Water on Mars', ...]    &gt;&gt;&gt; [e.title for e in reader.get_entries(read=True)]    ['H.I. #108: Project Cyclops']    &gt;&gt;&gt;    &gt;&gt;&gt; reader.update_search()    &gt;&gt;&gt;    &gt;&gt;&gt; for e in reader.search_entries('year', limit=3):    ...     title = e.metadata.get('.title')    ...     print(title.value, title.highlights)    ...    H.I. #107: One Year of Weird (slice(15, 19, None),)    H.I. #52: 20,000 Years of Torment (slice(17, 22, None),)    H.I. #83: The Best Kind of Prison ().. end-usage</longdescription>
</pkgmetadata>