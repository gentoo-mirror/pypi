<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># IntroductionPyProg is an Open-Source library for creating progress indicators (e.g. progress bars). It helps you create customizable progress indicators. This library is for Python.# CompatibilityPyProg is compatible with both Python 3 and Python 2, and will also work on Qt Console.# Getting Started## InstallationLatest Release: `pip install pyprog`Latest Development Release: `pip install git+https://github.com/Bill13579/pyprog.git@develop`After you have installed PyProg, you can test if it has been successfully installed by running `import pyprog` in python. If PyProg was installed successfully, it should show no errors.## How to use the PyProg Progress Bar### Basic PyProg Progress BarTo create a basic progress bar, follow these steps:1. Install PyProg ([Guide](#installation &quot;How to install PyProg&quot;))2. Import PyProg: `import pyprog`3. Create a `ProgressBar` object: `prog = pyprog.ProgressBar(&quot;&quot;, &quot;&quot;)`4. Show the bar: `prog.update()`5. To update the status, use `prog.set_stat(&lt;status&gt;)` to set the status and then use `prog.update()` to actually show the change6. When finished, use `prog.end()` to make the Progress Bar lastExample Code with Fake For loop:```pythonimport pyprogfrom time import sleep# Create a PyProg ProgressBar Objectprog = pyprog.ProgressBar(&quot;:-) &quot;, &quot; OK!&quot;)# Show the initial statusprog.update()# Fake for loopfor i in range(0, 100):# Sleep for a while (This is just to slow down the for loop so that it won't end in an instant)sleep(0.1)# Update statusprog.set_stat(i + 1)# Show (Update) the current statusprog.update()# Make the Progress Bar finalprog.end()```Output:```Initial State::-) Progress: 0% --------------------------------------------------  OK!When progress is 50::-) Progress: 50% #########################-------------------------  OK!Final State::-) Progress: 100% ##################################################  OK!```#### What is the first two parameters?The first two parameters in `prog = pyprog.ProgressBar(&quot;&quot;, &quot;&quot;)` is for telling PyProg what to put before and after the progress indicator.Example:``` :-) Progress: 0% --------------------------------------------------  OK!  ^                                 ^                                  ^Prefix                             Bar                              Suffix```### Pretty Progress BarYou can also add more options to make it look good.Adding options `complete_symbol=&quot;█&quot;, not_complete_symbol=&quot;-&quot;` will change the original output to:```Initial State::-) Progress: 0% --------------------------------------------------  OK!When progress is 50::-) Progress: 50% █████████████████████████-------------------------  OK!Final State::-) Progress: 100% ██████████████████████████████████████████████████  OK!```### Auto calculate the percentagePyProg can also auto calculate the current percentage. You just need to tell PyProg the total number of things you need to process.Change the line `prog = pyprog.ProgressBar(&quot;&quot;, &quot;&quot;)` to `prog = pyprog.ProgressBar(&quot;&quot;, &quot;&quot;, &lt;Total Number of things&gt;)`, and PyProg will calculate the percentage for you based on the status that you give it.To use it in our simple progress bar code, if we have 37 tasks to do, we can change this:```python# Create a PyProg ProgressBar Objectprog = pyprog.ProgressBar(&quot;:-) &quot;, &quot; OK!&quot;)```to this:```python# Create a PyProg ProgressBar Objectprog = pyprog.ProgressBar(&quot;:-) &quot;, &quot; OK!&quot;, 37)```And also change the fake for loop from `for i in range(0, 100):` to `for i in range(0, 37):`, and it will auto calculate the percentage and show it to the user.## How to use the PyProg Progress Indicator (Fraction)### Basic PyProg Progress Indicator (Fraction)To create a basic progress indicator (fraction), follow these steps:1. Import PyProg: `import pyprog`2. Create a `ProgressIndicatorFraction` object: `prog = pyprog.ProgressIndicatorFraction(&quot;&quot;, &quot;&quot;, &lt;Total number of things&gt;)` (Replace &quot;&lt;Total number of things&gt;&quot; with the total number of tasks or things you need to process)3. Show the indicator: `prog.update()`4. To update the status, use `prog.set_stat(&lt;status&gt;)` to set the status and then use `prog.update()` to actually show the change5. When finished, use `prog.end()` to make the Progress Indicator (Fraction) lastExample Code with Fake For loop (We are using 56 as the total in this example):```pythonimport pyprogfrom time import sleep# Create a PyProg ProgressIndicatorFraction Objectprog = pyprog.ProgressIndicatorFraction(&quot;:-) &quot;, &quot; OK!&quot;, 56)# Show the initial statusprog.update()# Fake for loopfor i in range(0, 56):# Sleep for a while (This is just to slow down the for loop so that it won't end in an instant)sleep(0.1)# Update statusprog.set_stat(i + 1)# Show (Update) the current statusprog.update()# Make the Progress Indicator (Fraction) finalprog.end()```Output:```Initial State::-) 0/56 OK!When half done::-) 28/56 OK!Final State::-) 56/56 OK!```# Documentation## Progress Indicator Parameters### Options for ProgressBar#### prefixThe prefix of everything.#### suffixThe suffix of everything.#### total (default is 100)This is the option that tells PyProg how many things or tasks you need to process. We used it in the [Auto calculate the percentage](#auto-calculate-the-percentage &quot;Auto calculate the percentage&quot;) section.#### bar_length (default is 50)This tells PyProg how long should the bar should be.#### initial (default is 0)Initial status to show on the bar.#### decimals (default is 0)How many decimals should the percent have.#### complete_symbol (default is &quot;#&quot;)The complete symbol will be shown in the complete part of the bar. We used it in the [Pretty Progress Bar](#pretty-progress-bar &quot;Pretty Progress Bar&quot;) section.Example Position of complete symbol:Progress: 59% &lt;span style=&quot;background-color: #FFFF00&quot;&gt;#############################&lt;/span&gt;---------------------&amp;nbsp;#### not_complete_symbol (default is &quot;-&quot;)The not complete symbol will be shown in the not yet complete part of the bar. We used it in the [Pretty Progress Bar](#pretty-progress-bar &quot;Pretty Progress Bar&quot;) section.Example Position of complete symbol:Progress: 59% #############################&lt;span style=&quot;background-color: #FFFF00&quot;&gt;---------------------&lt;/span&gt;&amp;nbsp;#### progress_loc (default is 0)Where the progress explanation (prefix) and the progress text should be shown.Possible Values:&lt;br/&gt;ProgressBar.PROGRESS_LOC_START or 0 - Show both at the start&lt;br/&gt;ProgressBar.PROGRESS_LOC_MIDDLE or 1 - Show both at the middle of the bar&lt;br/&gt;ProgressBar.PROGRESS_LOC_END or 2 - Show both at the end&lt;br/&gt;ProgressBar.PROGRESS_LOC_EXP_START_PROGRESS_MID or 3 - Show explanation (prefix) at the start and the progress text at the middle of the bar&lt;br/&gt;ProgressBar.PROGRESS_LOC_EXP_END_PROGRESS_MID or 4 - Show explanation (prefix) at the end and the progress text at the middle of the barPROGRESS_LOC_START:&lt;br/&gt;&lt;span style=&quot;background-color: #FFFF00&quot;&gt;Progress: 32%&lt;/span&gt; ################----------------------------------&amp;nbsp;PROGRESS_LOC_MIDDLE:&lt;br/&gt;\################ &lt;span style=&quot;background-color: #FFFF00&quot;&gt;Progress: 32%&lt;/span&gt; ------------------&amp;nbsp;PROGRESS_LOC_END:&lt;br/&gt;\################---------------------------------- &lt;span style=&quot;background-color: #FFFF00&quot;&gt;Progress: 32%&lt;/span&gt;PROGRESS_LOC_EXP_START_PROGRESS_MID:&lt;br/&gt;&lt;span style=&quot;background-color: #FFFF00&quot;&gt;Progress:  &lt;/span&gt;################----- &lt;span style=&quot;background-color: #FFFF00&quot;&gt;32%&lt;/span&gt; -----------------------&amp;nbsp;PROGRESS_LOC_EXP_END_PROGRESS_MID:&lt;br/&gt;\################----- &lt;span style=&quot;background-color: #FFFF00&quot;&gt;32%&lt;/span&gt; ----------------------- &lt;span style=&quot;background-color: #FFFF00&quot;&gt;Progress: &lt;/span&gt;#### progress_format (default is &quot;+p%&quot;)Format for the progress text. PyProg replaces special characters with actual values. Here is a list of special characters:&quot;+p&quot; -&gt; Current percent&lt;br/&gt;&quot;+c&quot; -&gt; Current status#### progress_explain (default is &quot;Progress: &quot;)This is the progress explanation (prefix).Example position of progress explanation:&lt;span style=&quot;background-color: #FFFF00&quot;&gt;Progress: &lt;/span&gt;32% ################----------------------------------&amp;nbsp;Examples:&lt;br/&gt;&quot;Progress: &quot;&lt;br/&gt;&quot;Current Progress: &quot;#### wrap_bar_prefix (default is &quot; &quot;)The prefix of the bar.#### wrap_bar_suffix (default is &quot; &quot;)The suffix of the bar.### Options for ProgressIndicatorFraction#### prefixThe prefix of everything.#### suffixThe suffix of everything.#### totalThis is the option that tells PyProg how many things or tasks you need to process.#### initial (default is 0)Initial status to show on the indicator.## Progress Indicator Functions### Functions for ProgressBar#### set_stat()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: currentSet the current progress.#### stat()Available on: PyProg 1.1.0-0 ~&lt;br/&gt;Params: current&lt;br/&gt;Note: This function is currently only available on the ProgressBar. Support for ProgressIndicatorFraction will come soon.Set the current progress and update the progress bar.#### progress()Available on: PyProg 1.1.0-0 ~&lt;br/&gt;Params: progress&lt;br/&gt;Note: This function is currently only available on the ProgressBar. Support for ProgressIndicatorFraction will come soon.Increase the progress by the given amount.#### update()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: (none)Update the progress bar so that it shows the current progress.&lt;br/&gt;Note: Also call this to initiate the bar.#### end()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: (none)End the progress bar.#### end_m()Available on: PyProg 1.1.0-0 ~&lt;br/&gt;Params: msg&lt;br/&gt;Note: This function is currently only available on the ProgressBar. Support for ProgressIndicatorFraction will come soon.End the progress bar with a message.#### set_prefix()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: prefixSet the prefix#### set_suffix()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: suffixSet the suffix#### set_total()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: totalSet the total#### set_bar_length()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: bar_lengthSet the length of the bar#### set_decimals()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: decimalsSet the number of decimals for the percent#### set_symbols()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: symbolsSet the complete symbol and the not complete symbol. `symbols` has to be a tuple: (complete symbol, not complete symbol)#### set_progress_loc()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: progress_locSet the progress explanation (prefix) and the progress text location. See [the progress_loc parameter](#user-content-progress_loc-default-is-0 &quot;progress_loc&quot;) section for the possible values.#### set_progress_explain()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: progress_explainSet the progress explanation (prefix).Examples:&lt;br/&gt;&quot;Progress: &quot;&lt;br/&gt;&quot;Current Progress: &quot;#### set_wrap_bar_text()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: prefix, suffixSet the wrap bar text (the prefix and the suffix of the bar).#### set_progress_format()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: progress_formatSet the format for the progress text. PyProg replaces special characters with actual values. Here is a list of special characters:&quot;+p&quot; -&gt; Current percent&lt;br/&gt;&quot;+c&quot; -&gt; Current status### Functions for ProgressIndicatorFunction#### set_stat()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: currentSet the current progress.#### update()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: (none)Update the progress indicator so that it shows the current progress.Note: Also call this to initiate the indicator.#### end()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: (none)End the progress indicator.#### set_prefix()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: prefixSet the prefix#### set_suffix()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: suffixSet the suffix#### set_total()Available on: PyProg 1.0.0 ~&lt;br/&gt;Params: totalSet the total</longdescription>
</pkgmetadata>