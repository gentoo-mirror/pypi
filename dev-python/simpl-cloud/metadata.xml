<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=========================Wharton Interactive Simpl=========================Base models and API for Django-based simulations.Provides an API compatible with the  Wharton Interactive marketplace.Getting Started===============Install simpl-cloud, with the API extras if required::    pip install simpl-cloud[api]Add simpl to your project's Django settings module, along with the followingsettings::    INSTALLED_APPS = {        # ...        'simpl',    }    SIMPL_GAME_EXPERIENCE = &quot;simpl.GameExperience&quot;    SIMPL_RUN = &quot;simpl.Run&quot;    SIMPL_INSTANCE = &quot;simpl.Instance&quot;    SIMPL_CHARACTER = &quot;simpl.Character&quot;    SIMPL_PLAYER = &quot;simpl.Player&quot;    SIMPL_LOGOUT_URL_NAME = &quot;account_logout&quot;Add the following to your project's URL conf::    urlpatterns = [      # ...      path(&quot;simpl/&quot;, include(&quot;simpl.urls&quot;)),    ]Architecture Overview=====================``Run`` objects provide management and configuration of one or more game instances.Navigation----------Provide a function to the ``SIMPL_SETUP_NAV`` setting. It should accept a Runobject as an argument and return a dictionary of keys as Simpl URL names and thevalues as a dictionary with the name, optional hint, and one of thefollowing statuses:- ``simpl.nav.DISABLED`` (and unstarted)- ``simpl.nav.UNSTARTED``- ``simpl.nav.INCOMPLETE``- ``simpl.nav.READY``- ``simpl.nav.COMPLETE``For example::    return {        &quot;config&quot;: {            &quot;name&quot;: &quot;Game Configuration&quot;,            &quot;status&quot;: nav.UNSTARTED,        },        &quot;team&quot;: {            &quot;name&quot;: &quot;Manage Teams&quot;,            &quot;status&quot;: nav.DISABLED,        },        &quot;start&quot;: {            &quot;name&quot;: &quot;Start Game&quot;,            &quot;status&quot;: nav.DISABLED,        },    }Provide a function to the ``SIMPL_PLAY_NAV`` setting. It should accept a Runobject as an argument and return a dictionary of keys as Simpl URL names and thevalues as a dicitonary with the name and one of the following statuses:- ``simpl.constants.DISABLED``- ``simpl.constants.READY``Launching game instances------------------------When a player is added to a run, their details are stored in a ``Player``object.When they start playing your game, they will be attached to an ``Character``object in a game ``Instance`` object that will track the progress of their game.For multiplayer runs, these players will be initially grouped into ``Lobby``object so they can be assigned to a game Instances. A lobby can be marked as``ready`` once it is ready to start.You can use ``Run.prepare`` to create new game ``Instance`` objects or manuallycreate these.Game play URL~~~~~~~~~~~~~The API uses a customizable url endpoint for players. You can specify this byusing a custom ``Player`` model and overriding ``Player.get_play_url``.Alternatively, you can specify a ``SIMPL_GET_PLAY_URL`` in your settings as adotted path to a function that receives a player instance and returns thecorrect url.Run status--------------A run has the following statuses:* Set up (initial state, until any configuration options are provided)* Players prepare (optional step to if your game experience if players can  interact with their Instance before gameplay starts)* Running (game Instances are running)* Debrief (optional step if your game experience provides a different interface  after gameplay finishes)Game Instance status--------------------Each game Instance also has a status:* Preparing - waiting to start (``Instance.date_start`` unset)* Playing - game in progress (``Instance.date_start`` set but  ``Instance.date_end`` unset)* Ended - game complete (``Instance.date_end`` set)Player status-------------Your app may mark a player as having ``completed`` the game (with a date).Custom models=============Extend the Simpl Django models by overriding the default classes in yourproject's Django settings module:* ``Instance`` via ``SIMPL_INSTANCE = &quot;your_app.YourInstance&quot;``* ``Character`` via ``SIMPL_CHARACTER = &quot;your_app.YourCharacter&quot;``* ``GameExperience`` (only if your app provides multiple different game  experiences)  via ``SIMPL_GAME_EXPERIENCE = &quot;your_app.YourGameExperience&quot;``More rarely, you may also want to override the run and player:* ``Run`` via ``SIMPL_RUN = &quot;your_app.YourRun&quot;``* ``Player`` via ``SIMPL_PLAYER = &quot;your_app.YourPlayer&quot;``Your overridden classes should subclass the related ``simpl.models.Base*``abstract models.The Character class will need two related abstract models, ``BaseCharacterData``and ``BaseCharacterLinked``. This is to make it possible to have character dataas a template, not linked to a user or instance.Auth0=====If using Auth0 for social authentication, add the following Django settings tomake sure users are correctly logged out of Auth0 and (optionally) redirected after logout::  ACCOUNT_ADAPTER = &quot;simpl.auth0.Auth0LogoutAdapter&quot;  AUTH0_LOGOUT_RETURN_TO = &quot;some.url&quot;</longdescription>
</pkgmetadata>