<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>************************************************************fixtures: Fixtures with cleanups for testing and convenience*************************************************************fixtures* defines a Python contract for reusable state / support logic,primarily for unit testing. Helper and adaption logic is included to make iteasy to write your own fixtures using the fixtures contract. Glue code isprovided that makes using fixtures that meet the ``Fixtures`` contract in``unittest`` compatible test cases easy and straight forward.Dependencies============* Python 3.7+  This is the base language fixtures is written in and for.* ``pbr``  Used for version and release management of fixtures.The ``fixtures[streams]`` extra adds:* ``testtools`` &lt;https://launchpad.net/testtools&gt;  ``testtools`` provides helpful glue functions for the details API used to report  information about a fixture (whether its used in a testing or production  environment).For use in a unit test suite using the included glue, you will need a testenvironment that supports ``TestCase.addCleanup``. Writing your own glue codeis easy. Alternatively, you can simply use Fixtures directly without anysupport code.To run the test suite for fixtures, ``testtools`` is needed.Why Fixtures============Standard Python ``unittest`` provides no obvious method for making and reusingstate needed in a test case other than by adding a method on the test class.This scales poorly - complex helper functions propagating up a test classhierarchy is a regular pattern when this is done. Mocking, while a great tool,doesn't itself prevent this (and helpers to mock complex things can accumulatein the same way if placed on the test class).By defining a uniform contract where helpers have no dependency on the testclass we permit all the regular code hygiene activities to take place withoutthe distorting influence of being in a class hierarchy that is modelling anentirely different thing - which is what helpers on a ``TestCase`` suffer from.About Fixtures==============A fixture represents some state. Each fixture has attributes on it that arespecific to the fixture. For instance, a fixture representing a directory thatcan be used for temporary files might have a attribute ``path``.Most fixtures have complete ``pydoc`` documentation, so be sure to check``pydoc fixtures`` for usage information.Creating Fixtures=================Minimally, subclass ``Fixture``, define ``_setUp`` to initialize your state,schedule a cleanup for when ``cleanUp`` is called, and you're done::  &gt;&gt;&gt; import unittest  &gt;&gt;&gt; import fixtures  &gt;&gt;&gt; class NoddyFixture(fixtures.Fixture):  ...     def _setUp(self):  ...         self.frobnozzle = 42  ...         self.addCleanup(delattr, self, 'frobnozzle')This will initialize ``frobnozzle`` when ``setUp`` is called, and when``cleanUp`` is called get rid of the ``frobnozzle`` attribute. Prior to version1.3.0 *fixtures* recommended overriding ``setUp``. This is still supported, butsince it is harder to write leak-free fixtures in this fashion, it is notrecommended.If your fixture has diagnostic data - for instance the log file of anapplication server, or log messages - it can expose that by creating a contentobject (``testtools.content.Content``) and calling ``addDetail``::  &gt;&gt;&gt; from testtools.content import text_content  &gt;&gt;&gt; class WithLog(fixtures.Fixture):  ...     def _setUp(self):  ...         self.addDetail('message', text_content('foo bar baz'))The method ``useFixture`` will use another fixture, call ``setUp`` on it, call``self.addCleanup(thefixture.cleanUp)``, attach any details from it and returnthe fixture. This allows simple composition of different fixtures::  &gt;&gt;&gt; class ReusingFixture(fixtures.Fixture):  ...     def _setUp(self):  ...         self.noddy = self.useFixture(NoddyFixture())There is a helper for adapting a function or function pair into Fixtures. Itputs the result of the function in ``fn_result``::  &gt;&gt;&gt; import os.path  &gt;&gt;&gt; import shutil  &gt;&gt;&gt; import tempfile  &gt;&gt;&gt; def setup_function():  ...     return tempfile.mkdtemp()  &gt;&gt;&gt; def teardown_function(fixture):  ...     shutil.rmtree(fixture)  &gt;&gt;&gt; fixture = fixtures.FunctionFixture(setup_function, teardown_function)  &gt;&gt;&gt; fixture.setUp()  &gt;&gt;&gt; print (os.path.isdir(fixture.fn_result))  True  &gt;&gt;&gt; fixture.cleanUp()This can be expressed even more pithily::  &gt;&gt;&gt; fixture = fixtures.FunctionFixture(tempfile.mkdtemp, shutil.rmtree)  &gt;&gt;&gt; fixture.setUp()  &gt;&gt;&gt; print (os.path.isdir(fixture.fn_result))  True  &gt;&gt;&gt; fixture.cleanUp()Another variation is ``MethodFixture`` which is useful for adapting alternatefixture implementations to Fixture::  &gt;&gt;&gt; class MyServer:  ...    def start(self):  ...        pass  ...    def stop(self):  ...        pass  &gt;&gt;&gt; server = MyServer()  &gt;&gt;&gt; fixture = fixtures.MethodFixture(server, server.start, server.stop)You can also combine existing fixtures using ``CompoundFixture``::  &gt;&gt;&gt; noddy_with_log = fixtures.CompoundFixture([NoddyFixture(),  ...                                            WithLog()])  &gt;&gt;&gt; with noddy_with_log as x:  ...     print (x.fixtures[0].frobnozzle)  42The Fixture API===============The example above introduces some of the ``Fixture`` API. In order to be ableto clean up after a fixture has been used, all fixtures define a ``cleanUp``method which should be called when a fixture is finished with.Because it's nice to be able to build a particular set of related fixtures inadvance of using them, fixtures also have a ``setUp`` method which should becalled before trying to use them.One common desire with fixtures that are expensive to create is to reuse themin many test cases; to support this the base ``Fixture`` also defines a``reset`` which calls ``self.cleanUp(); self.setUp()``. Fixtures that can moreefficiently make themselves reusable should override this method. This can thenbe used with multiple test state via things like ``testresources``,``setUpClass``, or ``setUpModule``.When using a fixture with a test you can manually call the ``setUp`` and``cleanUp`` methods. More convenient though is to use the included glue from``fixtures.TestWithFixtures`` which provides a mixin defining ``useFixture``(camel case because ``unittest`` is camel case throughout) method. It will call``setUp`` on the fixture, call ``self.addCleanup(fixture)`` to schedule acleanup, and return the fixture. This lets one write::  &gt;&gt;&gt; import testtools  &gt;&gt;&gt; import unittestNote that we use ``testtools.TestCase``. ``testtools`` has it's ownimplementation of ``useFixture`` so there is no need to use``fixtures.TestWithFixtures`` with ``testtools.TestCase``::  &gt;&gt;&gt; class NoddyTest(testtools.TestCase, fixtures.TestWithFixtures):  ...     def test_example(self):  ...         fixture = self.useFixture(NoddyFixture())  ...         self.assertEqual(42, fixture.frobnozzle)  &gt;&gt;&gt; result = unittest.TestResult()  &gt;&gt;&gt; _ = NoddyTest('test_example').run(result)  &gt;&gt;&gt; print (result.wasSuccessful())  TrueFixtures implement the context protocol, so you can also use a fixture as acontext manager::  &gt;&gt;&gt; with fixtures.FunctionFixture(setup_function, teardown_function) as fixture:  ...    print (os.path.isdir(fixture.fn_result))  TrueWhen multiple cleanups error, ``fixture.cleanUp()`` will raise a wrapperexception rather than choosing an arbitrary single exception to raise::  &gt;&gt;&gt; import sys  &gt;&gt;&gt; from fixtures.fixture import MultipleExceptions  &gt;&gt;&gt; class BrokenFixture(fixtures.Fixture):  ...     def _setUp(self):  ...         self.addCleanup(lambda:1/0)  ...         self.addCleanup(lambda:1/0)  &gt;&gt;&gt; fixture = BrokenFixture()  &gt;&gt;&gt; fixture.setUp()  &gt;&gt;&gt; try:  ...    fixture.cleanUp()  ... except MultipleExceptions:  ...    exc_info = sys.exc_info()  &gt;&gt;&gt; print (exc_info[1].args[0][0].__name__)  ZeroDivisionErrorFixtures often expose diagnostic details that can be useful for tracking downissues. The ``getDetails`` method will return a dict of all the attacheddetails but can only be called before ``cleanUp`` is called. Each detailobject is an instance of ``testtools.content.Content``::  &gt;&gt;&gt; with WithLog() as l:  ...     print(l.getDetails()['message'].as_text())  foo bar bazErrors in setUp+++++++++++++++The examples above used ``_setUp`` rather than ``setUp`` because the baseclass implementation of ``setUp`` acts to reduce the chance of leakingexternal resources if an error is raised from ``_setUp``. Specifically,``setUp`` contains a try/except block which catches all exceptions, capturesany registered detail objects, and calls ``self.cleanUp`` before propagatingthe error. As long as you take care to register any cleanups before callingthe code that may fail, this will cause them to be cleaned up. The captureddetail objects are provided to the args of the raised exception.If the error that occurred was a subclass of ``Exception`` then ``setUp`` willraise ``MultipleExceptions`` with the last element being a ``SetupError`` thatcontains the detail objects. Otherwise, to prevent causing normallyuncatchable errors like ``KeyboardInterrupt`` being caught inappropriately inthe calling layer, the original exception will be raised as-is and nodiagnostic data other than that from the original exception will be available.Shared Dependencies+++++++++++++++++++A common use case within complex environments is having some fixtures shared byother ones.Consider the case of testing using a ``TempDir`` with two fixtures built on topof it; say a small database and a web server. Writing either one is nearlytrivial. However handling ``reset()`` correctly is hard: both the database andweb server would reasonably expect to be able to discard operating systemresources they may have open within the temporary directory before its removed.A recursive ``reset()`` implementation would work for one, but not both.Calling ``reset()`` on the ``TempDir`` instance between each test is probablydesirable but we don't want to have to do a complete ``cleanUp`` of the higherlayer fixtures (which would make the ``TempDir`` be unused and triviallyresettable. We have a few options available to us.Imagine that the webserver does not depend on the DB fixture in any way - wejust want the webserver and DB fixture to coexist in the same tempdir.A simple option is to just provide an explicit dependency fixture for thehigher layer fixtures to use.  This pushes complexity out of the core and ontousers of fixtures::  &gt;&gt;&gt; class WithDep(fixtures.Fixture):  ...     def __init__(self, tempdir, dependency_fixture):  ...         super(WithDep, self).__init__()  ...         self.tempdir = tempdir  ...         self.dependency_fixture = dependency_fixture  ...     def setUp(self):  ...         super(WithDep, self).setUp()  ...         self.addCleanup(self.dependency_fixture.cleanUp)  ...         self.dependency_fixture.setUp()  ...         # we assume that at this point self.tempdir is usable.  &gt;&gt;&gt; DB = WithDep  &gt;&gt;&gt; WebServer = WithDep  &gt;&gt;&gt; tempdir = fixtures.TempDir()  &gt;&gt;&gt; db = DB(tempdir, tempdir)  &gt;&gt;&gt; server = WebServer(tempdir, db)  &gt;&gt;&gt; server.setUp()  &gt;&gt;&gt; server.cleanUp()Another option is to write the fixtures to gracefully handle a dependencybeing reset underneath them. This is insufficient if the fixtures wouldblock the dependency resetting (for instance by holding file locks openin a tempdir - on Windows this will prevent the directory being deleted).Another approach which ``fixtures`` neither helps nor hinders is to raisea signal of some sort for each user of a fixture before it is reset. In theexample here, ``TempDir`` might offer a subscribers attribute that both theDB and web server would be registered in. Calling ``reset`` or ``cleanUp``on the tempdir would trigger a callback to all the subscribers; the DB andweb server reset methods would look something like::  &gt;&gt;&gt; def reset(self):  ...     if not self._cleaned:  ...         self._clean()(Their action on the callback from the tempdir would be to do whatever workwas needed and set ``self._cleaned``.) This approach has the (perhaps)surprising effect that resetting the webserver may reset the DB - if thewebserver were to be depending on ``tempdir.reset`` as a way to reset thewebserver's state.Another approach which is not currently implemented is to provide an objectgraph of dependencies and a reset mechanism that can traverse that, along witha separation between 'reset starting' and 'reset finishing' - the DB andwebserver would both have their ``reset_starting`` methods called, then thetempdir would be reset, and finally the DB and webserver would have``reset_finishing`` called.Stock Fixtures==============In addition to the ``Fixture``, ``FunctionFixture`` and ``MethodFixture``classes, fixtures includes a number of pre-canned fixtures. The API docs forfixtures will list the complete set of these, should the docs be out of date ornot to hand. For the complete feature set of each fixture please see the APIdocs.``ByteStream``++++++++++++++Trivial adapter to make a ``BytesIO`` (though it may in future auto-spill todisk for large content) and expose that as a detail object, for automaticinclusion in test failure descriptions. Very useful in combination with``MonkeyPatch``::  &gt;&gt;&gt; fixture = fixtures.StringStream('my-content')  &gt;&gt;&gt; fixture.setUp()  &gt;&gt;&gt; with fixtures.MonkeyPatch('sys.something', fixture.stream):  ...     pass  &gt;&gt;&gt; fixture.cleanUp()This requires the ``fixtures[streams]`` extra.``EnvironmentVariable``+++++++++++++++++++++++Isolate your code from environmental variables, delete them or set them to anew value::  &gt;&gt;&gt; fixture = fixtures.EnvironmentVariable('HOME')``FakeLogger``++++++++++++++Isolate your code from an external logging configuration - so that your testgets the output from logged messages, but they don't go to e.g. the console::  &gt;&gt;&gt; fixture = fixtures.FakeLogger()``FakePopen``+++++++++++++Pretend to run an external command rather than needing it to be present to runtests::  &gt;&gt;&gt; from io import BytesIO  &gt;&gt;&gt; fixture = fixtures.FakePopen(lambda _:{'stdout': BytesIO('foobar')})``LogHandler``++++++++++++++Replace or extend a logger's handlers. The behavior of this fixture depends onthe value of the ``nuke_handlers`` parameter: if ``true``, the logger'sexisting handlers are removed and replaced by the provided handler, while if``false`` the logger's set of handlers is extended by the provided handler::  &gt;&gt;&gt; from logging import StreamHandler  &gt;&gt;&gt; fixture = fixtures.LogHandler(StreamHandler())``MockPatchObject``+++++++++++++++++++Adapts ``mock.patch.object`` to be used as a fixture::  &gt;&gt;&gt; class Fred:  ...     value = 1  &gt;&gt;&gt; fixture = fixtures.MockPatchObject(Fred, 'value', 2)  &gt;&gt;&gt; with fixture:  ...     Fred().value  2  &gt;&gt;&gt; Fred().value  1``MockPatch``+++++++++++++Adapts ``mock.patch`` to be used as a fixture::  &gt;&gt;&gt; fixture = fixtures.MockPatch('subprocess.Popen.returncode', 3)``MockPatchMultiple``+++++++++++++++++++++Adapts ``mock.patch.multiple`` to be used as a ``fixture``::  &gt;&gt;&gt; fixture = fixtures.MockPatchMultiple('subprocess.Popen', returncode=3)``MonkeyPatch``+++++++++++++++Control the value of a named Python attribute::  &gt;&gt;&gt; def fake_open(path, mode):  ...     pass  &gt;&gt;&gt; fixture = fixtures.MonkeyPatch('__builtin__.open', fake_open)Note that there are some complexities when patching methods - please see theAPI documentation for details.``NestedTempfile``++++++++++++++++++Change the default directory that the ``tempfile`` module places temporaryfiles and directories in. This can be useful for containing the noise createdby code which doesn't clean up its temporary files. This does not affecttemporary file creation where an explicit containing directory was provided::  &gt;&gt;&gt; fixture = fixtures.NestedTempfile()``PackagePathEntry``++++++++++++++++++++Adds a single directory to the path for an existing Python package. This addsto the ``package.__path__`` list. If the directory is already in the path,nothing happens, if it isn't then it is added on ``setUp`` and removed on``cleanUp``::  &gt;&gt;&gt; fixture = fixtures.PackagePathEntry('package/name', '/foo/bar')``PythonPackage``+++++++++++++++++Creates a python package directory. Particularly useful for testing code thatdynamically loads packages/modules, or for mocking out the command line entrypoints to Python programs::  &gt;&gt;&gt; fixture = fixtures.PythonPackage('foo.bar', [('quux.py', '')])``PythonPathEntry``+++++++++++++++++++Adds a single directory to ``sys.path``. If the directory is already in thepath, nothing happens, if it isn't then it is added on ``setUp`` and removed on``cleanUp``::  &gt;&gt;&gt; fixture = fixtures.PythonPathEntry('/foo/bar')``Stream``++++++++++Trivial adapter to expose a file-like object as a detail object, for automaticinclusion in test failure descriptions. ``StringStream`` and ``BytesStream``provided concrete users of this fixture.This requires the ``fixtures[streams]`` extra.``StringStream``++++++++++++++++Trivial adapter to make a ``StringIO`` (though it may in future auto-spill todisk for large content) and expose that as a detail object, for automaticinclusion in test failure descriptions. Very useful in combination with``MonkeyPatch``::  &gt;&gt;&gt; fixture = fixtures.StringStream('stdout')  &gt;&gt;&gt; fixture.setUp()  &gt;&gt;&gt; with fixtures.MonkeyPatch('sys.stdout', fixture.stream):  ...     pass  &gt;&gt;&gt; fixture.cleanUp()This requires the ``fixtures[streams]`` extra.``TempDir``+++++++++++Create a temporary directory and clean it up later::  &gt;&gt;&gt; fixture = fixtures.TempDir()The created directory is stored in the ``path`` attribute of the fixture after``setUp``.``TempHomeDir``+++++++++++++++Create a temporary directory and set it as ``$HOME`` in the environment::  &gt;&gt;&gt; fixture = fixtures.TempHomeDir()The created directory is stored in the ``path`` attribute of the fixture after``setUp``.The environment will now have ``$HOME`` set to the same path, and the valuewill be returned to its previous value after ``tearDown``.``Timeout``+++++++++++Aborts if the covered code takes more than a specified number of whole wall-clockseconds.There are two possibilities, controlled by the ``gentle`` argument: when gentle,an exception will be raised and the test (or other covered code) will fail.When not gentle, the entire process will be terminated, which is less clean,but more likely to break hangs where no Python code is running... caution::   Only one timeout can be active at any time across all threads in a single   process.  Using more than one has undefined results.  (This could be improved   by chaining alarms.).. note::   Currently supported only on Unix because it relies on the ``alarm`` system   call.``WarningsCapture``+++++++++++++++++++Capture warnings for later analysis::  &gt;&gt;&gt; fixture = fixtures.WarningsCapture()The captured warnings are stored in the ``captures`` attribute of the fixtureafter ``setUp``.``WarningsFilter``++++++++++++++++++Configure warnings filters during test runs::  &gt;&gt;&gt; fixture = fixtures.WarningsFilter(  ...     [  ...         {  ...             'action': 'ignore',  ...             'message': 'foo',  ...             'category': DeprecationWarning,  ...         },  ...     ]  ... )Order is important: entries closer to the front of the list override entrieslater in the list, if both match a particular warning.Contributing============Fixtures has its project homepage on GitHub&lt;https://github.com/testing-cabal/fixtures&gt;.License=======  Copyright (c) 2010, Robert Collins &lt;robertc@robertcollins.net&gt;  Licensed under either the Apache License, Version 2.0 or the BSD 3-clause  license at the users choice. A copy of both licenses are available in the  project source as Apache-2.0 and BSD. You may not use this file except in  compliance with one of these two licences.  Unless required by applicable law or agreed to in writing, software  distributed under these licenses is distributed on an &quot;AS IS&quot; BASIS, WITHOUT  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  license you chose for the specific language governing permissions and  limitations under that license.</longdescription>
</pkgmetadata>