<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![docstr-coverage](https://github.com/HunterMcGushion/docstr_coverage/raw/master/docs/logo_wide.png)&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://choosealicense.com/licenses/mit/&quot; alt=&quot;License: MIT&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/license-MIT-green.svg&quot; /&gt;&lt;/a&gt;    &lt;img src=&quot;https://github.com/HunterMcGushion/docstr_coverage/workflows/Python%20package/badge.svg&quot; /&gt;    &lt;a href='https://docstr-coverage.readthedocs.io/en/latest/?badge=latest'&gt;        &lt;img src='https://readthedocs.org/projects/docstr-coverage/badge/?version=latest' alt='Documentation Status' /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/docstr-coverage/&quot;&gt;        &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/docstr-coverage&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://img.shields.io/pypi/pyversions/docstr-coverage&quot;&gt;        &lt;img alt=&quot;Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/docstr-coverage&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pepy.tech/project/docstr-coverage&quot;&gt;        &lt;img alt=&quot;Download count&quot; src=&quot;https://static.pepy.tech/personalized-badge/docstr-coverage?period=total&amp;units=international_system&amp;left_color=gray&amp;right_color=orange&amp;left_text=downloads&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://black.readthedocs.io/en/stable/&quot; alt=&quot;Code Style: Black&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot; /&gt;    &lt;/a&gt;&lt;/p&gt;`docstr-coverage` is a simple tool that lets you measure your Python source code's[docstring](http://www.python.org/dev/peps/pep-0257/#what-is-a-docstring) coverage. It shows which of your functions, classes, methods, and modules don't have docstrings. It also provide statistics about overall docstring coverage for individual files, and for your entire project.- [Source](https://github.com/HunterMcGushion/docstr_coverage)- [Documentation](https://docstr-coverage.readthedocs.io/en/latest/api_essentials.html)## Example```bash&gt;&gt;&gt; HunterMcGushion$ docstr-coverage /docstr_coverage/File: &quot;docstr_coverage/setup.py&quot; - No module docstring - No docstring for `readme` Needed: 2; Found: 0; Missing: 2; Coverage: 0.0%File: &quot;docstr_coverage/docstr_coverage/__init__.py&quot; - No module docstring Needed: 1; Found: 0; Missing: 1; Coverage: 0.0%File: &quot;docstr_coverage/docstr_coverage/coverage.py&quot; - No docstring for `DocStringCoverageVisitor.__init__` Needed: 11; Found: 10; Missing: 1; Coverage: 90.9%Overall statistics for 3 files:Docstrings needed: 14; Docstrings found: 10; Docstrings missing: 4Total docstring coverage: 71.4%;  Grade: Very good```## How Do I Use It### Command-line ToolGeneral usage is: `docstr-coverage &lt;path to dir or module&gt; [options]`To test a single module, named `some_module.py`, run:```bashdocstr-coverage some_module.py```To test a directory (recursively), just supply the directory `some_project/src` instead:```bashdocstr-coverage some_project/src```#### Options- _--skip-magic, -m_ - Ignore all magic methods (except `__init__`)- _--skip-init, -i_ - Ignore all `__init__` methods- _--skip-file-doc, -f_ - Ignore module docstrings (at the top of files)- _--skip-private, -P_ - Ignore private functions (starting with a single underscore)- _--skip-class-def, -c_ - Ignore docstrings of class definitions- _--skip-property, -sp_ - Ignore functions with `@property` decorator- _--include-setter, -is_ - Include functions with `@setter` decorator (skipped by default)- _--include-deleter, -idel_ - Include functions with `@deleter` decorator (skipped by default)- _--accept-empty, -a_ - Exit with code 0 if no Python files are found (default: exit code 1)- _--exclude=\&lt;regex\&gt;, -e \&lt;regex\&gt;_ - Filepath pattern to exclude from analysis  - To exclude the contents of a virtual environment `env` and your `tests` directory, run:  ```docstr-coverage some_project/ -e &quot;.*/(env|tests)&quot;```- _--verbose=\&lt;level\&gt;, -v \&lt;level\&gt;_ - Set verbosity level (0-3, default: 3)  - 0 - Silence  - 1 - Print overall statistics  - 2 - Also print individual statistics for each file  - 3 - Also print missing docstrings (function names, class names, etc.)  - 4 - Also print information about present docstrings- _--fail-under=&lt;int|float&gt;, -F &lt;int|float&gt;_ - Fail if under a certain percentage of coverage (default: 100.0)- _--badge=\&lt;filepath\&gt;, -b \&lt;filepath\&gt;_ - Generate a docstring coverage percent badge as an SVG saved to a given filepath  - Include the badge in a repo's README using   ```[![docstr_coverage](&lt;filepath/of/your/saved/badge.svg&gt;)](https://github.com/HunterMcGushion/docstr_coverage)```,  where `&lt;filepath/of/your/saved/badge.svg&gt;` is the path provided to the `--badge` option- _--follow-links, -l_ - Follow symlinks- _--percentage-only, -p_ - Output only the overall coverage percentage as a float, silencing all other logging- _--help, -h_ - Display CLI options#### Config FileAll options can be saved in a config file. A file named `.docstr.yaml` in the folder in which `docstr-coverage` is executed is picked up automatically. Other locations can be passed using `docstr-coverage -C path/to/config.yml` or the long version `--config`.Example:```yamlpaths: # list or string  - docstr_coveragebadge: docs # Pathexclude: .*/test # regexverbose: 3 # int (0-4)skip_magic: True # Booleanskip_file_doc: True # Booleanskip_init: True # Booleanskip_class_def: True # Booleanskip_private: True # Booleanfollow_links: True # Booleanaccept_empty: True # Booleanignore_names_file: .*/test # regexfail_under: 90 # int percentage_only: True # Booleanignore_patterns: # Dict with key/value pairs of file-pattern/node-pattern  .*: method_to_ignore_in_all_files  FileWhereWeWantToIgnoreAllSpecialMethods: &quot;__.+__&quot;  SomeFile:    - method_to_ignore1    - method_to_ignore2    - method_to_ignore3  a_very_important_view_file:    - &quot;^get$&quot;    - &quot;^set$&quot;    - &quot;^post$&quot;  detect_.*:    - &quot;get_val.*&quot;```equivalent to```docstr-coverage docstr_coverage -e &quot;.*/test&quot; --skip-magic --skip-init --badge=&quot;docs&quot; --skip-class-def etc...```Note that options passed as command line arguments have precedence over options configured in a config file.#### Ignoring by RegexIn your config files, using `ignore_patterns`, you can specify regex patterns for files names and nodes (methods, ...)which should be ignored. See config file example above.#### Overriding by CommentsNote that `docstr-coverage` can not parse dynamically added documentation (e.g. through class extension).Thus, some of your code which deliberately has no docstring might be counted as uncovered.You can override this by adding either ```# docstr-coverage:inherited``` (intended for use if a docstring is provided in the corresponding superclass method)or a generic excuse with a reason, like ```# docstr-coverage:excused `My probably bad excuse` ```.These have to be stated right above any class or function definition (or above the functions annotations, if applicable).Such class or function would then be counted as if they had a docstring.```python# docstr-coverage:excused `no one is reading this anyways`class FooBarChild(FooBar):    # docstr-coverage:inherited    def function(self):        pass```#### Pre-commit hookYou can use `docstr-coverage` as a pre-commit hook by adding the following to your `.pre-commit-config.yaml` file and configuring the `paths` section of the [`.docstr.yaml` config](#config-file).  This is preferrable over [pre-commit args](https://pre-commit.com/#config-args),  as it facilitates the use of the same config in CI, pre-commit and manual runs.```yamlrepos:  - repo: https://github.com/HunterMcGushion/docstr_coverage    rev: v2.3.0 # most recent docstr-coverage release or commit sha    hooks:      - id: docstr-coverage        args: [&quot;--verbose&quot;, &quot;2&quot;] # override the .docstr.yaml to see less output```#### Package in Your ProjectYou can also use `docstr-coverage` as a part of your project by importing it thusly.It will supply you with overall and per-file coverages:```pythonfrom docstr_coverage import get_docstring_coveragemy_coverage = get_docstring_coverage(['some_dir/file_0.py', 'some_dir/file_1.py'])```If you want more fine grained information, try the experimental `docstr_coverage.analyze()````pythonfrom docstr_coverage import analyzecoverage_report = analyze(['some_dir/file_0.py', 'some_dir/file_1.py'])coverage = coverage_report.count_aggregate().coverage()```## Why Should I Use It- Thorough documentation is important to help others (and even yourself) understand your code- As a developer, improve your code's maintainability for when you need to make updates and fix bugs- As a user, instantly know how easy it's going to be to understand a new library \* If its documentation coverage is low, you may need to figure a lot out for yourself## Installation```bashpip install docstr-coverage```If you like being on the cutting-edge, and you want all the latest developments, run:```bashpip install git+https://github.com/HunterMcGushion/docstr_coverage.git```## Special ThanksThank you to Alexey &quot;DataGreed&quot; Strelkov, and James Harlow for doing all the hard work.`docstr-coverage` simply revives and brings their efforts to Python 3. See 'THANKS.txt' for more information.</longdescription>
</pkgmetadata>