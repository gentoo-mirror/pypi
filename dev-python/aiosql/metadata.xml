<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. aiosql documentation master file, created by   sphinx-quickstart on Sun Jul 18 12:49:31 2021.   You can adapt this file completely to your liking, but it should at least   contain the root `toctree` directive.aiosql - Simple SQL in Python=============================`SQL &lt;https://en.wikipedia.org/wiki/SQL&gt;`__ is code.Write it, version control it, comment it, and run it using files.Writing your SQL code in Python programs as strings doesn't allow you to easilyreuse them in SQL GUIs or CLI tools like ``psql``.With aiosql you can organize your SQL statements in *.sql* files, load theminto your python application as methods to call without losing the ability touse them as you would any other SQL file.This project supports standard`PEP 249 &lt;https://peps.python.org/pep-0249/&gt;`__and`asyncio &lt;https://docs.python.org/3/library/asyncio.html&gt;`__based drivers for`SQLite &lt;https://www.sqlite.org/&gt;`__(`sqlite3 &lt;https://docs.python.org/3/library/sqlite3.html&gt;`__,`aiosqlite &lt;https://aiosqlite.omnilib.dev/en/latest/?badge=latest&gt;`__,`apsw &lt;https://pypi.org/project/apsw/&gt;`__),`PostgreSQL &lt;https://postgresql.org/&gt;`__(`psycopg (3) &lt;https://www.psycopg.org/psycopg3/&gt;`__,`psycopg2 &lt;https://www.psycopg.org/docs/&gt;`__,`pg8000 &lt;https://pypi.org/project/pg8000/&gt;`__,`pygresql &lt;http://www.pygresql.org/&gt;`__,`asyncpg &lt;https://magicstack.github.io/asyncpg/current/&gt;`__),`MySQL &lt;https://www.mysql.com/&gt;`__(`PyMySQL &lt;https://github.com/PyMySQL/PyMySQL/&gt;`__,`mysqlclient &lt;https://pypi.org/project/mysqlclient/&gt;`__,`mysql-connector &lt;https://dev.mysql.com/doc/connector-python/en/&gt;`__),`MariaDB &lt;https://mariadb.org/&gt;`__(`mariadb &lt;https://pypi.org/project/mariadb/&gt;`__) and`DuckDB &lt;https://www.duckdb.org/&gt;`__(`duckdb &lt;https://duckdb.org/docs/api/python/dbapi&gt;`__),out of the box.Note that some detailed feature support may vary depending on the underlying driverand database engine actual capabilities.This module is an implementation of`Kris Jenkins' yesql &lt;https://github.com/krisajenkins/yesql&gt;`__`Clojure &lt;https://clojure.org/&gt;`__ library to the`Python &lt;https://www.python.org/&gt;`__`ecosystem &lt;https://pypi.org/&gt;`__.Extensions to support other database drivers can be written by you!See: `Database Driver Adapters &lt;./database-driver-adapters.html&gt;`__.Feel free to pull request!Badges------..   NOTE :target: is needed so that github renders badges on a line... image:: https://github.com/nackjicholson/aiosql/actions/workflows/aiosql-package.yml/badge.svg?branch=master&amp;style=flat   :alt: Build status   :target: https://github.com/nackjicholson/aiosql/actions/..   hardcoded coverage and tests, 100% and 162/15 if docker run is ok.. image:: https://img.shields.io/badge/coverage-100%25-success   :alt: Code Coverage   :target: https://github.com/nackjicholson/aiosql/actions/.. image:: https://img.shields.io/badge/tests-189%20✓-success   :alt: Tests   :target: https://github.com/nackjicholson/aiosql/actions/.. image:: https://img.shields.io/github/issues/nackjicholson/aiosql?style=flat   :alt: Issues   :target: https://github.com/nackjicholson/aiosql/issues/.. image:: https://img.shields.io/github/contributors/nackjicholson/aiosql   :alt: Contributors   :target: https://github.com/nackjicholson/aiosql/graphs/contributors.. image:: https://img.shields.io/pypi/dm/aiosql?style=flat   :alt: Pypi Downloads   :target: https://pypistats.org/packages/aiosql.. image:: https://img.shields.io/github/stars/nackjicholson/aiosql?style=flat&amp;label=Star   :alt: Stars   :target: https://github.com/nackjicholson/aiosql/stargazers.. image:: https://img.shields.io/pypi/v/aiosql   :alt: Version   :target: https://pypi.org/project/aiosql/.. image:: https://img.shields.io/github/languages/code-size/nackjicholson/aiosql?style=flat   :alt: Code Size   :target: https://github.com/nackjicholson/aiosql/.. image:: https://img.shields.io/badge/databases-5-informational   :alt: Databases   :target: https://github.com/nackjicholson/aiosql/.. image:: https://img.shields.io/badge/drivers-13-informational   :alt: Drivers   :target: https://github.com/nackjicholson/aiosql/.. image:: https://img.shields.io/github/languages/count/nackjicholson/aiosql?style=flat   :alt: Language Count   :target: https://en.wikipedia.org/wiki/Programming_language.. image:: https://img.shields.io/github/languages/top/nackjicholson/aiosql?style=flat   :alt: Top Language   :target: https://en.wikipedia.org/wiki/Python_(programming_language).. image:: https://img.shields.io/pypi/pyversions/aiosql?style=flat   :alt: Python Versions   :target: https://www.python.org/..   some non-sense badge about badges:-).. image:: https://img.shields.io/badge/badges-16-informational   :alt: Badges   :target: https://shields.io/.. image:: https://img.shields.io/pypi/l/aiosql?style=flat   :alt: BSD 2-Clause License   :target: https://opensource.org/licenses/BSD-2-ClauseUsage-----Install from `pypi &lt;https://pypi.org/project/aiosql&gt;`__, for instance by running ``pip install aiosql``.Then write parametric SQL queries in a file and execute it from Python methods,eg this *greetings.sql* file:.. code:: sql    -- name: get_all_greetings    -- Get all the greetings in the database    select greeting_id, greeting      from greetings     order by 1;    -- name: get_user_by_username^    -- Get a user from the database using a named parameter    select user_id, username, name      from users     where username = :username;This example has an imaginary SQLite database with greetings and users.It prints greetings in various languages to the user and showcases the basicfeature of being able to load queries from a SQL file and call them by namein python code.You can use ``aiosql`` to load the queries in this file for use in your Pythonapplication:.. code:: python    import aiosql    import sqlite3    queries = aiosql.from_path(&quot;greetings.sql&quot;, &quot;sqlite3&quot;)    with sqlite3.connect(&quot;greetings.db&quot;) as conn:        user = queries.get_user_by_username(conn, username=&quot;willvaughn&quot;)        # user: (1, &quot;willvaughn&quot;, &quot;William&quot;)        for _, greeting in queries.get_all_greetings(conn):            # scan [(1, &quot;Hi&quot;), (2, &quot;Aloha&quot;), (3, &quot;Hola&quot;), …]            print(f&quot;{greeting}, {user[2]}!&quot;)        # Hi, William!        # Aloha, William!        # …Or even in an asynchroneous way, with two SQL queries running in parallelusing ``aiosqlite`` and ``asyncio``:.. code:: python    import asyncio    import aiosql    import aiosqlite    queries = aiosql.from_path(&quot;greetings.sql&quot;, &quot;aiosqlite&quot;)    async def main():        async with aiosqlite.connect(&quot;greetings.db&quot;) as conn:            # Parallel queries!            greetings, user = await asyncio.gather(                queries.get_all_greetings(conn),                queries.get_user_by_username(conn, username=&quot;willvaughn&quot;)            )            for _, greeting in greetings:                print(f&quot;{greeting}, {user[2]}!&quot;)    asyncio.run(main())It may seem inconvenient to provide a connection on each call.You may have a look at the `AnoDB &lt;https://github.com/zx80/anodb&gt;`__ `DB`class which wraps both a database connection and query functions in oneconnection-like extended object, including managing automatic reconnection ifneeded.Why you might want to use this------------------------------* You think SQL is pretty good, and writing SQL is an important part of your applications.* You don't want to write your SQL in strings intermixed with your python code.* You're not using an ORM like `SQLAlchemy &lt;https://www.sqlalchemy.org/&gt;`__ or  `Django &lt;https://www.djangoproject.com/&gt;`__ ,  with large (100k lines) code imprints vs about 800 for `aiosql`,  and you don't need to.* You want to be able to reuse your SQL in other contexts.  Loading it into `psql` or other database tools.Why you might NOT want to use this----------------------------------* You're looking for an `ORM &lt;https://en.wikipedia.org/wiki/Object-relational_mapping&gt;`__.* You aren't comfortable writing SQL code.* You don't have anything in your application that requires complicated SQL beyond basic CRUD operations.* Dynamically loaded objects built at runtime really bother you.</longdescription>
</pkgmetadata>