<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;wetter&lt;/h1&gt;&lt;p align=center&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/ucyo/wetter-py/master/assets/undraw_weather.svg&quot; width=500px/&gt;&lt;/p&gt;&lt;p align=center&gt;&lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/wetter?color=blue&quot;&gt;&lt;img alt=&quot;PyPI - License&quot; src=&quot;https://img.shields.io/pypi/l/wetter&quot;&gt;&lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/wetter&quot;&gt;&lt;img alt=&quot;PyPI - Format&quot; src=&quot;https://img.shields.io/pypi/format/wetter&quot;&gt;&lt;img alt=&quot;PyPI - Status&quot; src=&quot;https://img.shields.io/pypi/status/wetter&quot;&gt;&lt;img alt=&quot;Docker Image Version (tag latest semver)&quot; src=&quot;https://img.shields.io/docker/v/ucyo/wetter/latest?color=blue&amp;label=docker&quot;&gt;&lt;/p&gt;This repository provides an Python application for checking the currentweather conditions at your favourite location. Additionally, it allows queryinghistorical data to run analysis on past measurements.## UsageThe tool provides the `wetter` command line tool with several subcommands:|command|Description||-------|-----------||`wetter latest`| Return latest measurement for your favourite city||`wetter update`|Update datastore with latest measurements||`wetter update --historical`|Update datastore with measurements from last year||`wetter compare --last-week`| Compare current weather w/ last week ||`wetter compare --last-month`| Compare current weather w/ last month ||`wetter compare --last-year`| Compare current weather w/ last year ||`wetter compare --month`| Analyse specific month (average temperature &amp; hottest days)|Entering nothing but the `wetter` command will return the latest measurementof the location similar to `wetter latest`.## Getting startedThere are several ways to install `wetter`. The easiest method would be to use pypi, download releases from GitHub or clone the repository and use e.g. [`poetry`](https://python-poetry.org/) to install it. If you don't want to install library immediately you could first try `wetter` by spinning up its docker image.- Install using pypi    ```bash    pip install wetter  # the more courageous can add a --pre flag    ```- Install by (1) downloading the `.whl` from our releases and (2) install using `pip`    ```bash    python3 -m pip install wetter-0.3.0-py3-none-any.whl    ```- Install from source by cloning the repository and using `poetry`    ```bash    git clone https://github.com/ucyo/wetter-py.git  # clone the repo    cd wetter-py/wetter  # change to library    poetry install    ```- Get started using docker    ```bash    docker run -it ucyo/wetter:latest bash  # ucyo/wetter:testing for pre-releases    ```Checking if everything is working appropriately can be done using `wetter latest`. It should return something like the following:```bash&gt; wetter latestCurrently it is üå°Ô∏è 12.7¬∞C and wind speed üå¨Ô∏è 13.0 km/h.Latest measurement on üìÖ 2023-01-01 @ 01:00AM.```Now that we know everything is working as expected. Go ahead and update the database by executing `wetter update`.&gt; Your mileage might vary on getting the exact same output. The timestamp of the above command adjusts to the local time zone and might be different on yours.## ConfigurationI don't know why, but you might be interested in measurements from a different location. You can do this by adjusting the `wetter.toml` file. The location of the `wetter.toml` depends on your operating system. Additionally, you can find the locations of the measurement data itself i.e. `wetter.json` and logs i.e. `wetter.log`.|Location|Operating System||--------|----------------||`/home/&lt;username&gt;/.config/wetter/`|Linux :penguin: (config)||`/home/&lt;username&gt;/.local/share/wetter/`|Linux :penguin: (data)||`/home/&lt;username&gt;/.local/state/wetter/log/wetter.log`|Linux :penguin: (log)||`/Users/&lt;username&gt;/Library/Application Support/wetter/`|macOS :apple: (config &amp; data)||`/Users/&lt;username&gt;/Library/Logs/wetter/`|macOS :apple: (logs)||`C:\Users\&lt;username&gt;\AppData\Local\ucyo\wetter`|Windows :window: (config &amp; data)||`C:\Users\&lt;username&gt;\AppData\Local\ucyo\wetter\logs`|Windows :window: (logs)|If you have problems finding the proper location there is a gimmick that got you covered.The path to the configuration file is returned by `wetter configure --config`.The logging level can be set by the `WETTER_LOG` environmental variable.### Sample configuration```toml[location]lat = 49lon = 8.41```The configuration file is very basic. Simply type in the lat/lon position :earth_africa: ofyour favourite location.You might use an online service to look up the coordinates of a certain city like a [LatLongFinder](https://www.latlong.net/).### Sample database```json{    &quot;lat&quot;: 49,    &quot;lon&quot;: 8.41,    &quot;version&quot;: 1,    &quot;data&quot;: {        &quot;index&quot;: [&quot;temperature&quot;, &quot;wind&quot;],        &quot;columns&quot;: [&quot;2023-01-01T00:00:00.000000+0000&quot;, &quot;2023-01-01T01:00:00.000000+0000&quot;],        &quot;data&quot;: [[7.7, 12.7], [6.8, 13.0]],    },}```The json database stores only the data for a single position. Those are includedin the database with the `lat` and `lon` tags.This information aligned on system start with the configuration file.Should they not match within 1 degree (in the above case for latitude `48 &lt;= lat &lt;= 50`),then a reset will be triggered.&gt; Note: The update to the new location happens without user interaction.&gt; The tool assumes the user changed the settings knowingly and will update the&gt; the database on the next execution.## Setup background daemonThere are several ways to enable a background process on Unix systems (incl. macOS).The easiest and most supported is to setup using `cron`.Another scheduling daemon is `systemd`.In the following are the instructions for both systems.&gt; Spoiler alert! Use `cron`.### CrontabExecute the following command:```bash(crontab -l ; echo &quot;5 * * * * wetter update&quot;) 2&gt; /dev/null | sort -u | crontab -```Check [crontab guru](https://crontab.guru/) for details on the scheduling syntax.### SystemdGo back :point_up: Just use `cron`. All that glistens is not gold :eyes:#### tl;drIn user space:```bashwetter configure --systemd &gt; wetter.service  # generate service filewetter configure --systemdtimer &gt; wetter.timer # generate schedule file```As privileged user:```bashln -s $(which wetter) /usr/bin/wetter  # get binary out of homemv wetter.service /etc/systemd/system/wetter.service  # move service filemv wetter.timer /etc/systemd/system/wetter.timer  # move schedule servicesystemctl enable wetter.service  # enable servicesystemctl start wetter.service  # start service```#### DetailedFirst you need to create the necessary files for a systemd service.This involves two files:First, the service file which defines the background process in `wetter.service`.Afterwards, the scheduler file which defines when the background process needs to be run i.e. `wetter.timer`.```bashwetter configure --systemd &gt; wetter.service  # generate service filewetter configure --systemdtimer &gt; wetter.timer # generate schedule file```&gt; Note: Timers are not mandatory to run services on a certain schedule. One could use the the `systemd-run` command to schedule calls to services without a timer configuration. See [systemd-run manpage](https://man.archlinux.org/man/systemd-run.1) on ArchLinux for details.Now that have the necessary files set up, need to make them availablefor systemd. The most common location of systemd files is `/etc/systemd/system/`.Therefore you need to move the files to that location.```bashmv wetter.service /etc/systemd/system/wetter.service  # move service filemv wetter.timer /etc/systemd/system/wetter.timer  # schedule service```&gt; Note: Fedora/RedHat/CentOS users might need to adjust the above mentioned location.Before you can enable and start the service you must address a caveat of systemd.The systemd daemon is not allowed to access binaries in home directories of users.That's why you need to create a symbolic link in `/usr/bin` to allowthe service to execute updates on the database. That can be done usingthe following command:```bashln -s $(which wetter) /usr/bin/wetter```This concludes the setup process. Now the service can be enabled and startedusing the `systemctl` command.- Enabling the systemd service `systemctl enable wetter.service`- Starting the systemd service `systemctl start wetter.service`## ResourcesThe measurement data is being gathered using the archive and forecast APIfrom [Open-Meteo.com](https://open-meteo.com/) :heart:</longdescription>
</pkgmetadata>