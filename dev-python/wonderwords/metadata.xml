<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Wonderwords**Generate random words and sentences with ease in python**![PyPI - Downloads](https://img.shields.io/pypi/dm/wonderwords?style=for-the-badge)![Libraries.io SourceRank](https://img.shields.io/librariesio/sourcerank/pypi/wonderwords?style=for-the-badge)![PyPI - License](https://img.shields.io/pypi/l/wonderwords?style=for-the-badge)https://github.com/mrmaxguns/wonderwordsmodule/workflows/Python%20package/badge.svg**Quick links:** * [GitHub repository](https://github.com/mrmaxguns/wonderwordsmodule) * [PyPI page](https://pypi.org/project/wonderwords) * [Official Documentation](https://wonderwords.readthedocs.io)***Wonderwords is a python package useful for generating random words andstructured random sentences. It also comes with a colorful command lineinterface for quickly generating random words. The latest version is available[on GitHub](https://github.com/mrmaxguns/wonderwordsmodule) while the stableversion is available [on PyPI](https://pypi.org/project/wonderwords).## Table of Contents- Features- Installation- Usage  - The Wonderwords Python API  - The Wonderwords CLI- Versioning- License- Contributing- Credits## FeaturesHere's what Wonderwords is capable of:- Random word generation- Specify word length, what it starts and ends with, category, and even custom  regular expressions!- Use custom word lists and define custom categories of words- Beautiful command line interface- Easy-to-use interface and comprehensive documentation- Open source!## InstallationTo install the latest version of Wonderwords, use your favorite package managerfor the Python Package Index to install the ``wonderwords`` package. For examplewith pip:```bashpip install wonderwords```To upgrade Wonderwords with pip use:```bashpip install --upgrade wonderwords```To verify that the installation worked, import Wonderwords in python:```pythonimport wonderwords```If you get a `ModuleNotFound` error, make sure that you have installedWonderwords from the step above. For further issues,[open a new issue from the GitHub page](https://github.com/mrmaxguns/wonderwordsmodule/issues/new/choose).## UsageThis section will briefly describe Wonderwords usage. Since Wonderwords hasa command line interface and python module, you will find two subsections.### The Wonderwords Python APIThe base random word generation class is the `RandomWord` class. You cangenerate words with the `word` method:```pythonfrom wonderwords import RandomWordr = RandomWord()# generate a random wordr.word()# random word that starts with a and ends with enr.word(starts_with=&quot;a&quot;, ends_with=&quot;en&quot;)# generate a random noun or adjective, by default all parts of speech are includedr.word(include_parts_of_speech=[&quot;nouns&quot;, &quot;adjectives&quot;])# generate a random word between the length of 3 and 8 charactersr.word(word_min_length=3, word_max_length=8)# generate a random word with a custom regular expressionr.word(regex=&quot;.*a&quot;)# you can combine multiple filtering optionsr.word(starts_with=&quot;ru&quot;, word_max_length=10, include_parts_of_speech=[&quot;verbs&quot;])```You can also get a list of all words matching some criteria using the `filter`method:```python# get a list of ALL words that start with &quot;am&quot;r.filter(starts_with=&quot;am&quot;)# you can use all the options found in the word method:r.filter(ends_with=&quot;k&quot;, include_parts_of_speech=[&quot;verbs&quot;], word_min_length=4)```You can also generate a random list of words with the `random_words` method.This is much like the filter method, except you specify the amount of wordsto return, and the words are randomly chosen. If there aren't enough words tosatisfy the amount, a `NoWordsToChooseFrom` exception is raised:```python# get a list of 3 random nounsr.random_words(3, include_parts_of_speech=[&quot;nouns&quot;])# you can use all the options found in the word methodr.random_words(5, starts_with=&quot;o&quot;, word_min_length=10)# if the amount of words you want to get is larger than the amount of words# there are, a NoWordsToChooseFrom exception is raised:r.random_words(100, starts_with=&quot;n&quot;, word_min_length=16)# there are less than 100 words that are at least 16 letters long and start with# n, so an exception is raised# you can silence the NoWordsToChooseFrom exception and return all words even# if there are less, by setting return_less_if_necessary to Truer.random_words(100, starts_with=&quot;n&quot;, word_min_length=16, return_less_if_necessary=True)```Generating random sentences is easy using the `RandomSentence` class:```pythonfrom wonderwords import RandomSentences = RandomSentence()# Get a random bare-bone sentences.bare_bone_sentence()# Get a random bare-bone sentence with a direct objects.simple_sentence()# Get a random bare-bone sentence with an adjectives.bare_bone_with_adjective()# Get a random sentence with a subject, predicate, direct object and adjectives.sentence()```More advanced usage (and a tutorial!) is found in the documentation, such asadding custom categories of words. The full documentation with all informationcan be found at: https://wonderwords.readthedocs.io## The Wonderwords CLIWonderwords provides a command line interface, too, which can be used with the`wonderwords` command. Usage:```usage: wonderwords [-h] [-w] [-f] [-l LIST] [-s {bb,ss,bba,s}] [-v] [-sw STARTS_WITH] [-ew ENDS_WITH]                   [-p {noun,verb,adjective,nouns,verbs,adjectives} [{noun,verb,adjective,nouns,verbs,adjectives} ...]] [-min WORD_MIN_LENGTH]                   [-max WORD_MAX_LENGTH] [-r REGEX] [-d DELIMITER]optional arguments:  -h, --help            show this help message and exit  -w, --word, --random-word                        generate a random word  -f, --filter          filter a list of words matching the criteria specified  -l LIST, --list LIST  return a list of words of a certain length  -s {bb,ss,bba,s}, --sentence {bb,ss,bba,s}                        return a sentence based on the structure chosen  -v, --version         Print the version number and exit  -sw STARTS_WITH, --starts-with STARTS_WITH                        specify what string the random word(s) should start with  -ew ENDS_WITH, --ends-with ENDS_WITH                        specify what string the random word(s) should end with  -p {noun,verb,adjective,nouns,verbs,adjectives} [{noun,verb,adjective,nouns,verbs,adjectives} ...], --parts-of-speech {noun,verb,adjective,nouns,verbs,adjectives} [{noun,verb,adjective,nouns,verbs,adjectives} ...]                        specify to only include certain parts of speech (by default all parts of speech are included)  -min WORD_MIN_LENGTH, --word-min-length WORD_MIN_LENGTH                        specify the minimum length of the word(s)  -max WORD_MAX_LENGTH, --word-max-length WORD_MAX_LENGTH                        specify the maximum length of the word(s)  -r REGEX, --regex REGEX, --re REGEX, --regular-expression REGEX                        specify a python-style regular expression that every word must match  -d DELIMITER, --delimiter DELIMITER                        Specify the delimiter to put between a list of words, default is ', '```The basic commands are:  * `-w`: generate a random word  * `-f`: which works much like the `filter` function to return all words matching    a certain criteria  * `-l LIST`: get a list of `LIST` random words  * `-s {bb,ss,bba,s}`: generate a random sentence:    * `bb`: bare bone sentence    * `ss`: simple sentence (bare bone sentence with direct object)    * `bba`: bare bone sentence with adjective    * `s`: generate a simple sentence with an adjective# VersioningDuring its early stages, Wonderwords didn't have a set versioning system andtherefore, versions before `v2.0.0-alpha` are in disarray. Starting with version2 alpha, Wonderwords uses **sematic versioning**.# LicenseWonderwords is open source and is distributed under the MIT license. See LICENSEfor more details.# ContributingAll contributions are welcome and we hope Wonderwords will continue growing.Start out by reading `CONTRIBUTING.md` for contributing guidelines and how toget started.# CreditsWonderwords has been made possible thanks to the following works:- `profanitylist.txt` from  [RobertJGabriel/Google-profanity-words](https://github.com/RobertJGabriel/Google-profanity-words)  under the  [Apache-2.0 license](https://github.com/RobertJGabriel/Google-profanity-words/blob/master/LICENSE)</longdescription>
</pkgmetadata>