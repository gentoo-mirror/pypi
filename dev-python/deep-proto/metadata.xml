<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Deep ProtoThis is the generated code for the common APIs for DEEP. This is generated from the project [intergra/deep-proto](https://github.com/intergral/deep-proto).# UsageThe usage of these packages differs between server and clients. Please see [GRPC docs](https://grpc.io/docs/languages/python/) for more guidance.## ClientTo use this as a client:```pythonimport grpcfrom deepproto.proto.tracepoint.v1.tracepoint_pb2 import Snapshotdef pollServer()    # setup the connection channel    channel = grpc.secure_channel(&quot;deep:43315&quot;, grpc.ssl_channel_credentials())    # create stub service    stub = PollConfigStub(channel)    # create request    request = PollRequest()    # send request and await response    response = stub.poll(request)def sendSnapshot()    # setup the connection channel    channel = grpc.secure_channel(&quot;deep:43315&quot;, grpc.ssl_channel_credentials())    # create stub service    stub = SnapshotServiceStub(channel)    # create grpc snapshot message    snapshot = Snapshot()    # send snapshot, and await response    response = stub.send(snapshot)```## ServerTo use this as a server:```pythonimport deepprotoimport grpcfrom deepproto.proto.poll.v1.poll_pb2 import PollResponse, ResponseTypefrom deepproto.proto.poll.v1.poll_pb2_grpc import PollConfigServicerfrom deepproto.proto.tracepoint.v1.tracepoint_pb2 import TracePointConfig, SnapshotResponsefrom deepproto.proto.tracepoint.v1.tracepoint_pb2_grpc import SnapshotServiceServicerdef serve():    # configure GRPC    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))    # register the services    deepproto.proto.poll.v1.poll_pb2_grpc.add_PollConfigServicer_to_server(PollServicer(), server)    deepproto.proto.tracepoint.v1.tracepoint_pb2_grpc.add_SnapshotServiceServicer_to_server(SnapshotServicer(), server)        # start the server    server.add_insecure_port('[::]:43315')    server.start()    server.wait_for_termination()class SnapshotServicer(SnapshotServiceServicer):    def send(self, request, context):        # Code to process a new snapshot        return SnapshotResponse()class PollServicer(PollConfigServicer):    def poll(self, request, context):        # code to process a poll request        return PollResponse()```# DocumentationThe documentation for this project is available [here](https://intergral.github.io/deep-proto/common/).# LicensingThis project is licensed as [AGPL-3.0-only](https://raw.githubusercontent.com/intergral/deep-proto/master/LICENSE).</longdescription>
</pkgmetadata>