<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PythonFinder: Cross Platform Search Tool for Finding Pythons=============================================================.. image:: https://img.shields.io/pypi/v/pythonfinder.svg    :target: https://pypi.org/project/pythonfinder.. image:: https://img.shields.io/pypi/l/pythonfinder.svg    :target: https://pypi.org/project/pythonfinder.. image:: https://img.shields.io/pypi/pyversions/pythonfinder.svg    :target: https://pypi.org/project/pythonfinder.. image:: https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg    :target: https://saythanks.io/to/techalchemy.. image:: https://readthedocs.org/projects/pythonfinder/badge/?version=master    :target: http://pythonfinder.readthedocs.io/en/master/?badge=master    :alt: Documentation StatusInstallation*************Install from `PyPI`_:.. code-block:: console    $ pipenv install pythonfinderInstall from `Github`_:.. code-block:: console    $ pipenv install -e git+https://github.com/sarugaku/pythonfinder.git#egg=pythonfinder.. _PyPI: https://www.pypi.org/project/pythonfinder.. _Github: https://github.com/sarugaku/pythonfinder.. _`Usage`:Usage******Using PythonFinder is easy.  Simply import it and ask for a python:.. code-block:: pycon    &gt;&gt;&gt; from pythonfinder import Finder    &gt;&gt;&gt; f = Finder()    &gt;&gt;&gt; f.find_python_version(3, minor=6)    PathEntry(path=PosixPath('/home/hawk/.pyenv/versions/3.6.5/bin/python'), _children={}, is_root=False, only_python=False, py_version=PythonVersion(major=3, minor=6, patch=5, is_prerelease=False, is_postrelease=False, is_devrelease=False, version=&lt;Version('3.6.5')&gt;, architecture='64bit', comes_from=PathEntry(path=PosixPath('/home/hawk/.pyenv/versions/3.6.5/bin/python'), _children={}, is_root=True, only_python=False, py_version=None, pythons=None), executable=None), pythons=None)    &gt;&gt;&gt; f.find_python_version(2)    PathEntry(path=PosixPath('/home/hawk/.pyenv/shims/python2'), ...py_version=PythonVersion(major=2, minor=7, patch=15, is_prerelease=False, is_postrelease=False, is_devrelease=False, version=&lt;Version('2.7.15')&gt;, architecture='64bit', comes_from=PathEntry(path=PosixPath('/home/hawk/.pyenv/shims/python2'), _children={}, is_root=True, only_python=False, py_version=None, pythons=None), executable=None), pythons=None)    &gt;&gt;&gt; f.find_python_version(&quot;anaconda3-5.3.0&quot;)Find a named distribution, such as ``anaconda3-5.3.0``:.. code-block:: pycon    PathEntry(path=PosixPath('/home/hawk/.pyenv/versions/anaconda3-5.3.0/bin/python3.7m'), _children={'/home/hawk/.pyenv/versions/anaconda3-5.3.0/bin/python3.7m': ...}, only_python=False, name='anaconda3-5.3.0', _py_version=PythonVersion(major=3, minor=7, patch=0, is_prerelease=False, is_postrelease=False, is_devrelease=False,...))PythonFinder can even find beta releases:.. code-block:: pycon    &gt;&gt;&gt; f.find_python_version(3, minor=7)    PathEntry(path=PosixPath('/home/hawk/.pyenv/versions/3.7.0b1/bin/python'), _children={}, is_root=False, only_python=False, py_version=PythonVersion(major=3, minor=7, patch=0, is_prerelease=True, is_postrelease=False, is_devrelease=False, version=&lt;Version('3.7.0b1')&gt;, architecture='64bit', comes_from=PathEntry(path=PosixPath('/home/hawk/.pyenv/versions/3.7.0b1/bin/python'), _children={}, is_root=True, only_python=False, py_version=None, pythons=None), executable=None), pythons=None)    &gt;&gt;&gt; f.which('python')    PathEntry(path=PosixPath('/home/hawk/.pyenv/versions/3.6.5/bin/python'), _children={}, is_root=False, only_python=False, py_version=PythonVersion(major=3, minor=6, patch=5, is_prerelease=False, is_postrelease=False, is_devrelease=False, version=&lt;Version('3.6.5')&gt;, architecture='64bit', comes_from=PathEntry(path=PosixPath('/home/hawk/.pyenv/versions/3.6.5/bin/python'), _children={}, is_root=True, only_python=False, py_version=None, pythons=None), executable=None), pythons=None)Windows Support****************PythonFinder natively supports windows via both the *PATH* environment variable and `PEP-514 &lt;https://www.python.org/dev/peps/pep-0514/&gt;`_ compliant finder which comes by default with python 3. Usage on windows becomes:.. code-block:: pycon    &gt;&gt;&gt; from pythonfinder import Finder    &gt;&gt;&gt; f = Finder()    &gt;&gt;&gt; f.find_python_version(3, minor=6)    PythonVersion(major=3, minor=6, patch=4, is_prerelease=False, is_postrelease=False, is_devrelease=False, version=&lt;Version('3.6.4')&gt;, architecture='64bit', comes_from=PathEntry(path=WindowsPath('C:/Program Files/Python36/python.exe'), _children={}, is_root=False, only_python=True, py_version=None, pythons=None), executable=WindowsPath('C:/Program Files/Python36/python.exe'))    &gt;&gt;&gt; f.find_python_version(3, minor=7, pre=True)    PythonVersion(major=3, minor=7, patch=0, is_prerelease=True, is_postrelease=False, is_devrelease=False, version=&lt;Version('3.7.0b5')&gt;, architecture='64bit', comes_from=PathEntry(path=WindowsPath('C:/Program Files/Python37/python.exe'), _children={}, is_root=False, only_python=True, py_version=None, pythons=None), executable=WindowsPath('C:/Program Files/Python37/python.exe'))    &gt;&gt;&gt; f.which('python')    PathEntry(path=WindowsPath('C:/Python27/python.exe'), _children={}, is_root=False, only_python=False, py_version=None, pythons=None)Finding Executables///////////////////PythonFinder also provides **which** functionality across platforms, and it uses lazy loading and fast-returns to be performant at this task... code-block:: pycon    &gt;&gt;&gt; f.which('cmd')    PathEntry(path=WindowsPath('C:/windows/system32/cmd.exe'), _children={}, is_root=False, only_python=False, py_version=None, pythons=None)    &gt;&gt;&gt; f.which('code')    PathEntry(path=WindowsPath('C:/Program Files/Microsoft VS Code/bin/code'), _children={}, is_root=False, only_python=False, py_version=None, pythons=None)     &gt;&gt;&gt; f.which('vim')    PathEntry(path=PosixPath('/usr/bin/vim'), _children={}, is_root=False, only_python=False, py_version=None, pythons=None)    &gt;&gt;&gt; f.which('inv')    PathEntry(path=PosixPath('/home/hawk/.pyenv/versions/3.6.5/bin/inv'), _children={}, is_root=False, only_python=False, py_version=None, pythons=None)Architecture support////////////////////PythonFinder supports architecture specific lookups on all platforms:.. code-block:: pycon    &gt;&gt;&gt; f.find_python_version(3, minor=6, arch=&quot;64&quot;)    PathEntry(path=PosixPath('/usr/bin/python3'), _children={'/usr/bin/python3': ...}, only_python=False, name='python3', _py_version=PythonVersion(major=3, minor=6, patch=7, is_prerelease=False, is_postrelease=False, is_devrelease=False, is_debug=False, version=&lt;Version('3.6.7')&gt;, architecture='64bit', comes_from=..., executable='/usr/bin/python3', name='python3'), _pythons=defaultdict(None, {}), is_root=False)Integrations************** `Pyenv &lt;https://github.com/pyenv/pyenv&gt;`_* `ASDF &lt;https://github.com/asdf-vm/asdf&gt;`_* `PEP-514 &lt;https://www.python.org/dev/peps/pep-0514/&gt;`_* `Virtualenv &lt;https://github.com/pypa/virtualenv&gt;`_* `Pipenv &lt;https://pipenv.org&gt;`_</longdescription>
</pkgmetadata>