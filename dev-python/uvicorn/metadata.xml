<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img width=&quot;320&quot; height=&quot;320&quot; src=&quot;https://raw.githubusercontent.com/tomchristie/uvicorn/master/docs/uvicorn.png&quot; alt='uvicorn'&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;em&gt;An ASGI web server, for Python.&lt;/em&gt;&lt;/p&gt;---[![Build Status](https://github.com/encode/uvicorn/workflows/Test%20Suite/badge.svg)](https://github.com/encode/uvicorn/actions)[![Package version](https://badge.fury.io/py/uvicorn.svg)](https://pypi.python.org/pypi/uvicorn)**Documentation**: [https://www.uvicorn.org](https://www.uvicorn.org)**Requirements**: Python 3.8+Uvicorn is an ASGI web server implementation for Python.Until recently Python has lacked a minimal low-level server/application interface forasync frameworks. The [ASGI specification][asgi] fills this gap, and means we're now able tostart building a common set of tooling usable across all async frameworks.Uvicorn supports HTTP/1.1 and WebSockets.## QuickstartInstall using `pip`:```shell$ pip install uvicorn```This will install uvicorn with minimal (pure Python) dependencies.```shell$ pip install 'uvicorn[standard]'```This will install uvicorn with &quot;Cython-based&quot; dependencies (where possible) and other &quot;optional extras&quot;.In this context, &quot;Cython-based&quot; means the following:- the event loop `uvloop` will be installed and used if possible.- the http protocol will be handled by `httptools` if possible.Moreover, &quot;optional extras&quot; means that:- the websocket protocol will be handled by `websockets` (should you want to use `wsproto` you'd need to install it manually) if possible.- the `--reload` flag in development mode will use `watchfiles`.- windows users will have `colorama` installed for the colored logs.- `python-dotenv` will be installed should you want to use the `--env-file` option.- `PyYAML` will be installed to allow you to provide a `.yaml` file to `--log-config`, if desired.Create an application, in `example.py`:```pythonasync def app(scope, receive, send):    assert scope['type'] == 'http'    await send({        'type': 'http.response.start',        'status': 200,        'headers': [            (b'content-type', b'text/plain'),        ],    })    await send({        'type': 'http.response.body',        'body': b'Hello, world!',    })```Run the server:```shell$ uvicorn example:app```---## Why ASGI?Most well established Python Web frameworks started out as WSGI-based frameworks.WSGI applications are a single, synchronous callable that takes a request and returns a response.This doesnâ€™t allow for long-lived connections, like you get with long-poll HTTP or WebSocket connections,which WSGI doesn't support well.Having an async concurrency model also allows for options such as lightweight background tasks,and can be less of a limiting factor for endpoints that have long periods being blocked on networkI/O such as dealing with slow HTTP requests.---## Alternative ASGI serversA strength of the ASGI protocol is that it decouples the server implementationfrom the application framework. This allows for an ecosystem of interoperatingwebservers and application frameworks.### DaphneThe first ASGI server implementation, originally developed to power Django Channels, is [the Daphne webserver][daphne].It is run widely in production, and supports HTTP/1.1, HTTP/2, and WebSockets.Any of the example applications given here can equally well be run using `daphne` instead.```$ pip install daphne$ daphne app:App```### Hypercorn[Hypercorn][hypercorn] was initially part of the Quart web framework, beforebeing separated out into a standalone ASGI server.Hypercorn supports HTTP/1.1, HTTP/2, and WebSockets.It also supports [the excellent `trio` async framework][trio], as an alternative to `asyncio`.```$ pip install hypercorn$ hypercorn app:App```### Mangum[Mangum][mangum] is an adapter for using ASGI applications with AWS Lambda &amp; API Gateway.---&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Uvicorn is &lt;a href=&quot;https://github.com/encode/uvicorn/blob/master/LICENSE.md&quot;&gt;BSD licensed&lt;/a&gt; code.&lt;br/&gt;Designed &amp; crafted with care.&lt;/i&gt;&lt;br/&gt;&amp;mdash; ðŸ¦„  &amp;mdash;&lt;/p&gt;[asgi]: https://asgi.readthedocs.io/en/latest/[daphne]: https://github.com/django/daphne[hypercorn]: https://github.com/pgjones/hypercorn[mangum]: https://mangum.io[trio]: https://trio.readthedocs.io</longdescription>
</pkgmetadata>