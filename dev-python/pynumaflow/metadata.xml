<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python SDK for Numaflow[![Build](https://github.com/numaproj/numaflow-python/actions/workflows/ci.yml/badge.svg)](https://github.com/numaproj/numaflow-python/actions/workflows/ci.yml)[![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE)[![Release Version](https://img.shields.io/github/v/release/numaproj/numaflow-python?label=pynumaflow)](https://github.com/numaproj/numaflow-python/releases/latest)This SDK provides the interface for writing [UDFs](https://numaflow.numaproj.io/user-guide/user-defined-functions/user-defined-functions/)and [UDSinks](https://numaflow.numaproj.io/user-guide/sinks/user-defined-sinks/) in Python.## InstallationInstall the package using pip.```bashpip install pynumaflow```### Build locallyThis project uses [Poetry](https://python-poetry.org/) for dependency management and packaging.To build the package locally, run the following command from the root of the project.```bashmake setup````To run unit tests:```bashmake test```To format code style using black and ruff:```bashmake lint```Setup [pre-commit](https://pre-commit.com/) hooks:```bashpre-commit install```## Implement a User Defined Function (UDF)### Map```pythonfrom pynumaflow.mapper import Messages, Message, Datum, Mapperdef my_handler(keys: list[str], datum: Datum) -&gt; Messages:    val = datum.value    _ = datum.event_time    _ = datum.watermark    return Messages(Message(value=val, keys=keys))if __name__ == &quot;__main__&quot;:    grpc_server = Mapper(handler=my_handler)    grpc_server.start()```### SourceTransformer - Map with event time assignment capabilityIn addition to the regular Map function, SourceTransformer supports assigning a new event time to the message.SourceTransformer is only supported at source vertex to enable (a) early data filtering and (b) watermark assignment by extracting new event time from the message payload.```pythonfrom datetime import datetimefrom pynumaflow.sourcetransformer import Messages, Message, Datum, SourceTransformerdef transform_handler(keys: list[str], datum: Datum) -&gt; Messages:    val = datum.value    new_event_time = datetime.now()    _ = datum.watermark    message_t_s = Messages(Message(val, event_time=new_event_time, keys=keys))    return message_t_sif __name__ == &quot;__main__&quot;:    grpc_server = SourceTransformer(handler=transform_handler)    grpc_server.start()```### Reduce```pythonimport aiorunfrom typing import Iterator, Listfrom pynumaflow.reducer import Messages, Message, Datum, Metadata, AsyncReducerasync def my_handler(        keys: List[str], datums: Iterator[Datum], md: Metadata) -&gt; Messages:    interval_window = md.interval_window    counter = 0    async for _ in datums:        counter += 1    msg = (        f&quot;counter:{counter} interval_window_start:{interval_window.start} &quot;        f&quot;interval_window_end:{interval_window.end}&quot;    )    return Messages(Message(str.encode(msg), keys))if __name__ == &quot;__main__&quot;:    grpc_server = AsyncReducer(handler=my_handler)    aiorun.run(grpc_server.start())```### Sample ImageA sample UDF [Dockerfile](examples/map/forward_message/Dockerfile) is providedunder [examples](examples/map/forward_message).## Implement a User Defined Sink (UDSink)```pythonfrom typing import Iteratorfrom pynumaflow.sinker import Datum, Responses, Response, Sinkerdef my_handler(datums: Iterator[Datum]) -&gt; Responses:    responses = Responses()    for msg in datums:        print(&quot;User Defined Sink&quot;, msg.value.decode(&quot;utf-8&quot;))        responses.append(Response.as_success(msg.id))    return responsesif __name__ == &quot;__main__&quot;:    grpc_server = Sinker(my_handler)    grpc_server.start()```### Sample ImageA sample UDSink [Dockerfile](examples/sink/log/Dockerfile) is providedunder [examples](examples/sink/log).</longdescription>
</pkgmetadata>