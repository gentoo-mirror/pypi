<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>colt===[![CI Actions Status](https://github.com/altescy/colt/workflows/CI/badge.svg)](https://github.com/altescy/colt/actions?query=workflow%3ACI)[![Pulish Actions Status](https://github.com/altescy/colt/workflows/publish/badge.svg)](https://github.com/altescy/colt/actions?query=workflow%3Apublish)[![Python version](https://img.shields.io/pypi/pyversions/colt)](https://github.com/altescy/colt)[![pypi version](https://img.shields.io/pypi/v/colt)](https://pypi.org/project/colt/)[![license](https://img.shields.io/github/license/altescy/colt)](https://github.com/altescy/colt/blob/master/LICENSE)## Quick Links- [Installation](#Installation)- [Basic Examples](#Examples)- [kaggle Titanic Example](https://github.com/altescy/colt/tree/master/examples/titanic)## Introduction`colt` is a configuration utility for Python objects.`colt` constructs Python objects from a configuration dict which is convertable into JSON.(Inspired by [AllenNLP](https://github.com/allenai/allennlp))## Installation```pip install colt```## Examples#### Basic Usage```pythonimport typing as tpimport colt@colt.register(&quot;foo&quot;)class Foo:    def __init__(self, message: str) -&gt; None:        self.message = message@colt.register(&quot;bar&quot;)class Bar:    def __init__(self, foos: tp.List[Foo]) -&gt; None:        self.foos = foosif __name__ == &quot;__main__&quot;:    config = {        &quot;@type&quot;: &quot;bar&quot;,  # specify type name with `@type`        &quot;foos&quot;: [            {&quot;message&quot;: &quot;hello&quot;},  # type of this is inferred from type-hint            {&quot;message&quot;: &quot;world&quot;},        ]    }    bar = colt.build(config)    assert isinstance(bar, Bar)    print(&quot; &quot;.join(foo.message for foo in bar.foos))        # =&gt; &quot;hello world&quot;```#### `scikit-learn` Configuration```pythonimport coltfrom sklearn.datasets import load_irisfrom sklearn.model_selection import train_test_splitif __name__ == &quot;__main__&quot;:    config = {        # import types automatically if type name is not registerd        &quot;@type&quot;: &quot;sklearn.ensemble.VotingClassifier&quot;,        &quot;estimators&quot;: [            (&quot;rfc&quot;, { &quot;@type&quot;: &quot;sklearn.ensemble.RandomForestClassifier&quot;,                      &quot;n_estimators&quot;: 10 }),            (&quot;svc&quot;, { &quot;@type&quot;: &quot;sklearn.svm.SVC&quot;,                      &quot;gamma&quot;: &quot;scale&quot; }),        ]    }    X, y = load_iris(return_X_y=True)    X_train, X_valid, y_train, y_valid = train_test_split(X, y)    model = colt.build(config)    model.fit(X_train, y_train)    valid_accuracy = model.score(X_valid, y_valid)    print(f&quot;valid_accuracy: {valid_accuracy}&quot;)```### `Registrable` ClassBy using the `Registrable` class, you can devide namespace into each class.In a following example, `Foo` and `Bar` have different namespaces.```pythonimport coltclass Foo(colt.Registrable):    passclass Bar(colt.Registrable):    pass@Foo.register(&quot;baz&quot;)class FooBaz(Foo):    pass@Bar.register(&quot;baz&quot;)class BarBaz(Bar):    pass@colt.register(&quot;my_class&quot;)class MyClass:    def __init__(self, foo: Foo, bar: Bar):        self.foo = foo        self.bar = barif __name__ == &quot;__main__&quot;:    config = {        &quot;@type&quot;: &quot;my_class&quot;,        &quot;foo&quot;: {&quot;@type&quot;: &quot;baz&quot;},        &quot;bar&quot;: {&quot;@type&quot;: &quot;baz&quot;}    }    obj = colt.build(config)    assert isinstance(obj.foo, FooBaz)    assert isinstance(obj.bar, BarBaz)```</longdescription>
</pkgmetadata>