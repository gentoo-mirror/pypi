<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python SDK for Cisco CUCM AXL API[![PyPi Status](https://github.com/PresidioCode/ciscoaxl/actions/workflows/python-publish.yml/badge.svg?event=deployment_status)](https://github.com/PresidioCode/ciscoaxl/actions/workflows/python-publish.yml)## AXL API Documentation- https://developer.cisco.com/docs/axl-schema-reference/## Installation```bashpip install ciscoaxl````testing in a lab is highly recommended. if you don't have a lab of your own, you can reserve a DevNet Sandbox free of charge!`## Reserve a DevNet Sandbox (if required)TheDevNetSandboxisaccessible throughCiscoDevNetathttp://developer.cisco.comSelectCollaborationontherighthand category menuandthen lookforthe“Collaboration12.5”tile.Hitreserve.To connect to the lab, you'll need to use VPN.VPN Credentials will be sent to your DevNet registered email account, or you can view the _OUTPUT_ from the topology page. Once connected, you can click on the server, in this case CUCM, and select _ATTRIBUTES_ to find username, password, and hostname / ip address.___## Enable AXL SOAP Service on CUCM:Enable the AXL SOAP interfaceBrowse to the CUCM Serviceability page on https://&lt;IP_CUCM&gt;/ccmserviceTools &gt; Service Activation:Enable the &quot;Cisco AXL Web Service&quot;![](docs/2020-06-01-11-13-59.png)---## Create an AXL Service Account&gt; Step 1 - Create an AXL User GroupCUCM &gt; User Management &gt; User Group &gt; Add.&gt; Step 2 - Assign the AXL role to the groupOn the top right drop down list &quot;Related Links&quot;. Select &quot;Assign Role to User Group&quot; and select &quot;Standard AXL API Access&quot;![](docs/2020-06-01-11-29-06.png)&gt; Step 3 - Create a new Application UserCUCM &gt; User Management &gt; Application User &gt; Add.![](docs/2020-06-01-11-33-25.png)Add the User Group &quot;AXL Group&quot; to this user so that after saving the roles of the new Application User appear as in the following screen:![](docs/2020-06-01-11-43-34.png)## SDK Usage ```pythonfrom ciscoaxl import axlcucm = '10.10.20.1'username = 'axlaccess'password = 'axlpassword'version = '12.5'ucm = axl(username=username,password=password,cucm=cucm,cucm_version=version)```&gt; Note: all get methods that return more than 1 item have a tagfilter property that can allow more fields to return. Fields are filtered by default to increase performance, but if you need additional fields returned from the axl call, simply add the tagfilter={} to the request. Example:```pythonget_phones(tagfilter={ &quot;name&quot;: &quot;&quot;,            &quot;product&quot;: &quot;&quot;,            &quot;description&quot;: &quot;&quot;,            &quot;protocol&quot;: &quot;&quot;,            &quot;locationName&quot;: &quot;&quot;,            &quot;callingSearchSpaceName&quot;: &quot;&quot;,            &quot;devicePoolName&quot;: &quot;&quot;        })```## Users#### Get All Users```pythonfor user in ucm.get_users():    print(user.firstName)```#### Get Specific User```pythonuser = ucm.get_user(user_id='mscott')print(user.email)```#### Add User```pythonucm.add_user(user_id='jlevensailor', last_name='Levensailor', first_name='Jeff')```#### Delete User```pythonucm.delete_user(user_id='jlevensailor')```#### Update User```pythonucm.update_user(user_id='jlevensailor', password='Lagavulin16', pin='5432')```## Phones#### Get Phones```pythonfor phone in ucm.get_phones():    print(phone.name)```#### Get Specific Phone```pythonphone = ucm.get_phone(name='SEP001122445566')print(phone.name)```#### Add Phone```pythonucm.add_phone(    name='SEP0023AF482340',    description='Robert - 1102',    product='Cisco 8861',    device_pool='RTP_DP',    location='RTP_LOC',    phone_template='Standard 8861 SIP',    protocol='SIP',    css='AVST-CSS',    subscribe_css='AVST-CSS',    lines=[        ('1102', 'ABQ_PT', 'Robert Smith', 'Robert Smith', 'Robert Smith - 1102', '+1408202XXXX')    ])```#### Delete Phone```pythonucm.delete_phone(name='SEP004433220043')```## Translations and Transformations#### Get Translation Patterns```pythonfor trans in ucm.get_translations():    detailed = ucm.get_translation(uuid=trans.uuid)    print(detailed.description)```#### Get Specific Translation Pattern```pythontrans = ucm.get_translation(pattern='2XXX', routePartitionName='xlates-pt')print(trans.description)```#### Add Translation Pattern```pythonported = ['12324625544', '12324625545', '12324625546']for num in ported:    ucm.add_translation(pattern=num, routePartitionName='pstn_pt',calledPartyTransformationMask='1102', callingSearchSpaceName='GW_CSS')```#### Delete Translation Pattern```pythonucm.delete_translation(pattern='34567', routePartitionName='xlates-pt')```#### Update Translation Pattern```pythonucm.update_translation(pattern='1234', routePartitionName='xlates-pt', newPattern='4567')```## Device Pools#### Get Device Pools```pythonfor dp in ucm.get_device_pools():    print(dp.name)```#### Get Specific Device Pool```pythondp = ucm.get_device_pool(name='RTP_DP')print(dp.name)```#### Add Device Pool```pythonucm.add_device_pool(device_pool='Hollywood_DP')```#### Delete Device Pool```pythonucm.delete_device_pool(device_pool='Hollywood_DP')```#### Update Device Pool```pythonucm.update_device_pool(name='RTP_DP', regionName='G711_RGN')```## CSS and Partitions#### Get Calling Search Spaces```pythonfor css in ucm.get_calling_search_spaces():    print(css.name)```#### Get Specific Calling Search Space```pythoncss = ucm.get_calling_search_space(calling_search_space='pstn-css')print(css.name)```#### Add Calling Search Space```pythonucm.add_calling_search_space(    calling_search_space='VIP_CSS',    description='Very Important Stuff'    members=['losfeliz-pt','silverlake-pt','pstn-pt']    )```#### Delete Calling Search Space```pythonucm.update_calling_search_space(calling_search_space='VIP_CSS')```#### Delete Calling Search Space```pythonucm.delete_calling_search_space(calling_search_space='VIP_CSS')```#### Get Partitions```pythonfor pt in ucm.get_partitions():    print(pt.name)```#### Get Specific Partition```pythonpt = ucm.get_partition(routePartitionName='pstn-pt')print(pt.name)```#### Add Partition```pythonucm.add_partition(routePartitionName='VIP_PT', description='Very Important Peep')```#### Delete Partition```pythonucm.delete_partition(name='VIP_PT')```## Regions and Locations#### Get Regions```pythonfor reg in ucm.get_regions():    print(reg.uuid)```#### Get Specific Region```pythonreg = ucm.get_region(region='losfeliz_reg')print(reg.name)```#### Add Region```pythonucm.add_region(region='Hollywood-REG')```#### Delete Region```pythonucm.delete_region(region='Hollywood-REG')```#### Get Locations```pythonfor loc in ucm.get_locations():    print(loc.name)```#### Get Specific Location```pythonloc = ucm.get_location(name='Shadow')print(loc.name)```#### Add Location```pythonucm.add_location(location='Hollywood-LOC')```#### Delete Location```pythonucm.delete_location(location='Hollywood-LOC')```## Directory Numbers#### Get Directory Numbers```pythonfor dn in ucm.get_directory_numbers():    print(dn.uuid)```#### Get Specific Directory Number```pythondn = ucm.get_directory_number(pattern='2888',routePartitionName='losfeliz-pt')print(dn.uuid)```#### Add Directory Number```pythonucm.add_directory_number(    pattern='1102',    routePartitionName='ABQ_PT'    )```#### Delete Directory Number```pythonucm.delete_directory_number(uuid='{0B0CDC93-EC9C-7255-1B09-40A3CE727D5A}')```## Device Profiles#### Get User Device Profiles```pythonfor udp in ucm.get_device_profiles():    print(udp.name)```#### Get Specific User Device Profile```pythonudp = ucm.get_device_profile(name='udp-bsimpson')print(udp.name)```#### Add User Device Profile```pythonucm.add_device_profile(    name='UDP_MScott',    description='Michael Scott - 2901',    product='Cisco 8861',    phone_template='Standard 8861 SIP',    protocol='SIP',    lines=[        ('2901', 'losfeliz-pt', 'Michael Scott', 'Michael Scott', 'Michael Scott - 2901', '+1408202XXXX'),        ('2902', 'losfeliz-pt', 'Pam Beesley', 'Pam Beesley', 'Pam Beesley - 2902', '+1408202XXXX')    ])```#### Delete User Device Profile```pythonucm.delete_device_profile('UDP_Mscott')```## CTI Route Points#### Get CTI Route Points```pythonfor cti in ucm.get_cti_route_points():    print(cti.name)```#### Get Specific CTI Route Point```pythoncti = ucm.get_cti_route_point(cti_route_point='AutoAttendant')print(cti.name)```#### Add CTI Route Point```pythonucm.add_cti_route_point(    cti_route_point='aa-pilot',    description='pilot to unity',    device_pool='LosFeliz_DP',    css='allphone-css',    lines=[        ('2908', 'losfeliz-pt'),        ('2909', 'losfeliz-pt')    ])```#### Delete CTI Route Point```pythonucm.delete_cti_route_point(name='OneArch')```## Route Groups, Lists, and Patterns#### List Route Plan```pythonnums = ['19197016707', '19197016712', '19197016713', '19197016706', '191970167016']for num in nums:    for route in ucm.list_route_plan(num):        print(route.dnOrPattern)for route in ucm.list_route_plan('2901'):    print(route.uuid)```#### Get Route Groups```pythonfor rg in ucm.get_route_groups():    print(rg.name)```#### Get Specific Route Group```pythonrg = ucm.get_route_group(route_group='losfeliz-rg')print(rg.uuid)```#### Add Route Group```pythonucm.add_route_group(    route_group='hollywood-rg',    distribution_algorithm='Circular',    members=[('america-online-sip'), ('h323')])```#### Delete Route Group```pythonucm.delete_route_group(route_group='hollywood-rg')```#### Get Route Lists```pythonfor rl in ucm.get_route_lists():    print(rl.name)```#### Get Specific Route List```pythonrl = ucm.get_route_list(route_list='stdloc-rl')print(rl.description)```#### Add Route List```pythonucm.add_route_list(    route_list='hollywood-rl',    description='hollywood',    run_on_all_nodes='true',    cm_group_name='Default',    members=[        ('losfeliz-rg'),        ('silverlake-rg')    ])```#### Delete Route List```pythonucm.delete_route_list(route_list='hollywood-rl')```#### Get Route Patterns```pythonfor rp in ucm.get_route_patterns():    print(rp.pattern)```#### Get Specific Route Pattern```pythonrp = ucm.get_route_pattern(pattern='911')print(rp.description)```#### Add Route Pattern```pythonucm.add_route_pattern(    pattern='999',    routePartitionName='losfeliz-pt',    description='Movie Times',    route_list='stdloc-rl'    )```#### Delete Route Pattern```pythonucm.delete_route_pattern(pattern='999', routePartitionName='losfeliz-pt')```## Runs and Dos#### Execute SQL Query```shfor sql in ucm.run_sql_query('select * from device where description like &quot;Bart%&quot;'):    print(sql.name)```#### Do LDAP Sync on all agreements```shfor ldap in ucm.get_ldap_dir():    ucm.do_ldap_sync(uuid=ldap.uuid)```#### Reset Device```pythonucm.do_device_reset(device='SEP001100220033')```#### Extension Mobility Login```pythonucm.do_device_login(device='SEP001100220033', userId='bsimpson')```#### Extension Mobility Logout```pythonucm.do_device_logout(device='SEP001100220033', userId='bsimpson')```</longdescription>
</pkgmetadata>