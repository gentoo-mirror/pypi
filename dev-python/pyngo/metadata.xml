<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Pyngo :snake:&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;Utils to help integrate pydantic into Django projects&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/yezz123/pyngo/actions/workflows/test.yml&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/yezz123/pyngo/actions/workflows/test.yml/badge.svg&quot; alt=&quot;Test&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/yezz123/pyngo&quot;&gt;    &lt;img src=&quot;https://codecov.io/gh/yezz123/pyngo/branch/main/graph/badge.svg&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/pyngo&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/pyngo?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/pyngo&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/pyngo.svg?color=%2334D058&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;---## InstallationYou can add pyngo in a few easy steps. First of all, install the dependency:```sh$ pip install pyngo---&gt; 100%Successfully installed pyngo```---## Features üéâ- Using Pydantic to Build your Models in Django Project.- Using `OpenAPI` utilities to build params from a basic model.- using `QueryDictModel` to build `Pydantic` models from a `QueryDict` object.- propagate any errors from Pydantic in Django Rest Framework.- Tested in Python 3.6 and up.## Examples üìö### OpenAPI- `pyngo.openapi_params()` can build params from a basic model```pyfrom pydantic import BaseModelfrom pyngo import openapi_paramsclass Model(BaseModel):   bingo: intprint(openapi_params(Model))```- `pyngo.ParameterDict.required` is set according to the type of the variable```pyfrom typing import Optionalfrom pydantic import BaseModelfrom pyngo import openapi_paramsclass Model(BaseModel):   required_param: int   optional_param: Optional[int]print(openapi_params(Model))```Other fields can be set through the field‚Äôs info:```pyfrom pydantic import BaseModel, Fieldfrom pyngo import openapi_paramsclass WithDescription(BaseModel):   described_param: str = Field(      description=&quot;Hello World Use Me!&quot;   )class InPath(BaseModel):   path_param: str = Field(location=&quot;path&quot;)class WithDeprecated(BaseModel):   deprecated_field: bool = Field(deprecated=True)class WithNoAllowEmpty(BaseModel):   can_be_empty: bool = Field(allowEmptyValue=False)print(openapi_params(WithDescription)[0][&quot;description&quot;])print(openapi_params(InPath)[0][&quot;in&quot;])print(openapi_params(WithDeprecated)[0][&quot;deprecated&quot;])print(openapi_params(WithNoAllowEmpty)[0][&quot;allowEmptyValue&quot;])```### Django- `pyngo.querydict_to_dict()` and `pyngo.QueryDictModel` are conveniences for building a `pydantic.BaseModel` from a `django.QueryDict`.```pyfrom typing import Listfrom django.http import QueryDictfrom pydantic import BaseModelfrom pyngo import QueryDictModel, querydict_to_dictclass Model(BaseModel):   single_param: int   list_param: List[str]class QueryModel(QueryDictModel):   single_param: int   list_param: List[str]query_dict = QueryDict(&quot;single_param=20&amp;list_param=Life&quot;)print(Model.parse_obj(querydict_to_dict(query_dict, Model)))print(QueryModel.parse_obj(query_dict))```&gt; **Note:** Don't forget to Setup the Django Project.### Django Rest Framework- `pyngo.drf_error_details()` will propagate any errors from Pydantic.```pyfrom pydantic import BaseModel, ValidationErrorfrom pyngo import drf_error_detailsclass Model(BaseModel):   foo: int   bar: strdata = {&quot;foo&quot;: &quot;Cat&quot;}try:   Model.parse_obj(data)except ValidationError as e:   print(drf_error_details(e))```Errors descend into nested fields:```pyfrom typing import Listfrom pydantic import BaseModel, ValidationErrorfrom pyngo import drf_error_detailsclass Framework(BaseModel):   frm_id: intclass Language(BaseModel):   framework: List[Framework]data = {&quot;Framework&quot;: [{&quot;frm_id&quot;: &quot;not_a_number&quot;}, {}]}expected_details = {   &quot;framework&quot;: {      &quot;0&quot;: {&quot;frm_id&quot;: [&quot;value is not a valid integer&quot;]},      &quot;1&quot;: {&quot;frm_id&quot;: [&quot;field required&quot;]},   }}try:   Framework.parse_obj(data)except ValidationError as e:   print(drf_error_details(e))```## Development üöß### Setup environment üì¶You should create a virtual environment and activate it:```bashpython -m venv venv/``````bashsource venv/bin/activate```And then install the development dependencies:```bash# Install dependenciespip install -e .[test,lint]```### Run tests üåùYou can run all the tests with:```bashbash scripts/test.sh```&gt; Note: You can also generate a coverage report with:```bashbash scripts/test_html.sh```### Format the code üçÇExecute the following command to apply `pre-commit` formatting:```bashbash scripts/format.sh```Execute the following command to apply `mypy` type checking:```bashbash scripts/lint.sh```## License üçªThis project is licensed under the terms of the MIT license.</longdescription>
</pkgmetadata>