<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Mongomancy## DescriptionProject contains abstraction of `pymongo` driver for automatic reconnect on master switch in remote MongoDB cluster. Italso provides data definition layer.Core of `mongo_driver` is the `Engine` class, handling queries reconnection with notification to registered reconnecthooks.`Database` creates `Collection`s by their definitions. Database hooks itself to engine reconnect event, so it can switchinternal state of database's collections instances.```mermaid    classDiagram        Executor &lt;|-- Engine : implements        Database o-- Executor        Database *-- Collection        Database o-- CollectionDefinition        Collection o-- Executor        CollectionDefinition *-- Index        CollectionDefinition *-- Document                class Executor{            &lt;&lt;abstract&gt;&gt;            reconnect()            register_hook(reconnect_hook_func)            find_one(collection: pymongo.collection.Collection, ...)            other_collection_methods(collection: pymongo.collection.Collection, ...)        }                class Engine{            +client: MongoClient            -_retry_command(collection, command, ...)            dispose()            reconnect()            register_hook(reconnect_hook_func)            find_one(collection: pymongo.collection.Collection, ...)            other_collection_methods(collection: pymongo.collection.Collection, ...)        }            class Collection{            +dialect_entity: pymongo.collection.Collection            +engine: Executor            +find_one(...)            other_collection_methods()        }                class Document{            +unique_key: Optional[BsonDict]            +data: BsonDict        }            class CollectionDefinition{            +name: str            +indices: Sequence[Index]            +default_docs: Sequence[Document]        }            class Index{            +fields: OrderedDictType[str, Union[str, int]]            +name: Optional[str]            +unique: Optional[bool]            field_for_mongo() -&gt; List[Tuple[str, Union[str, int]]]        }            class Database{            +engine: Executor            +topology: List[types.CollectionDefinition]            -_database: pymongo.database.Database            -_collections: Dict[str, Collection]            invalidate_cache_hook(source: Engine)             get_collection(name: str) -&gt; Collection            extend(*new_definitions: types.CollectionDefinition)            create_all(skip_existing: bool)            ping() -&gt; bool        }```## InstallationWithin a particular ecosystem, there may be a common way of installing things, such as using Yarn, NuGet, or Homebrew.However, consider the possibility that whoever is reading your README is a novice and would like more guidance. Listingspecific steps helps remove ambiguity and gets people to using your project as quickly as possible. If it only runs in aspecific context like a particular programming language version or operating system or has dependencies that have to beinstalled manually, also add a Requirements subsection.## Usage```pythonimport loggingfrom mongomancy import Engine, Database, CollectionDefinition, Indexengine = Engine(&quot;localhost&quot;, 27017)logger = logging.getLogger(__name__)db = Database(engine=engine, logger=logger)game = CollectionDefinition(name=&quot;game&quot;, indices=[Index(fields={&quot;genre&quot;: 1})])player = CollectionDefinition(name=&quot;player&quot;, indices=[Index(fields={&quot;player_id&quot;: 1}, unique=True)])db.add_collection(game)db.add_collection(player)db.create_all()db[&quot;game&quot;].find({&quot;genre&quot;: &quot;adventure&quot;})```## BuildClone repo and set up your pypi repo account credentials on build for build environment.- Move to package repo:    ```shell    cd ~/git/mongomancy    ```- Install requirements:   ```shell   python -m pip install -Ur requirements.txt   ```- Clean old build fragments:    ```shell    rm -rf ./dist ./build ./mongomancy/mongomancy.egg-info    ```- Build new package:    ```shell    python -m build    ``` - Upload new package:    ```shell    python -m twine upload dist/*     ```</longdescription>
</pkgmetadata>