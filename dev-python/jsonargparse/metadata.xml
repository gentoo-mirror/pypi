<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://readthedocs.org/projects/jsonargparse/badge/?version=stable    :target: https://readthedocs.org/projects/jsonargparse/.. image:: https://github.com/omni-us/jsonargparse/actions/workflows/tests.yml/badge.svg    :target: https://github.com/omni-us/jsonargparse/actions/workflows/tests.yml.. image:: https://codecov.io/gh/omni-us/jsonargparse/branch/main/graph/badge.svg    :target: https://codecov.io/gh/omni-us/jsonargparse.. image:: https://sonarcloud.io/api/project_badges/measure?project=omni-us_jsonargparse&amp;metric=alert_status    :target: https://sonarcloud.io/dashboard?id=omni-us_jsonargparse.. image:: https://badge.fury.io/py/jsonargparse.svg    :target: https://badge.fury.io/py/jsonargparsejsonargparse============Docs: https://jsonargparse.readthedocs.io/ | Source: https://github.com/omni-us/jsonargparse/``jsonargparse`` is a library for creating command-line interfaces (CLIs) andmaking Python apps easily configurable. It is a well-maintained project withfrequent releases, adhering to high standards of development: semanticversioning, deprecation periods, changelog, automated testing, and full testcoverage.Although ``jsonargparse`` might not be widely recognized yet, it already boastsa `substantial user base&lt;https://github.com/omni-us/jsonargparse/network/dependents&gt;`__. Most notably,it serves as the engine behind `LightningCLI&lt;https://lightning.ai/docs/pytorch/stable/cli/lightning_cli.html&gt;`__.Features--------``jsonargparse`` is user-friendly and encourages the development of **clean,high-quality code**. It encompasses numerous powerful features, some unique to``jsonargparse``, while also combining advantages found in similar packages:- **Automatic** creation of CLIs, like `Fire  &lt;https://pypi.org/project/fire/&gt;`__, `Typer  &lt;https://pypi.org/project/typer/&gt;`__, `Clize  &lt;https://pypi.org/project/clize/&gt;`__ and `Tyro  &lt;https://pypi.org/project/tyro/&gt;`__.- Use **type hints** for argument validation, like `Typer  &lt;https://pypi.org/project/typer/&gt;`__, `Tap  &lt;https://pypi.org/project/typed-argument-parser/&gt;`__ and `Tyro  &lt;https://pypi.org/project/tyro/&gt;`__.- Use of **docstrings** for automatic generation of help, like `Tap  &lt;https://pypi.org/project/typed-argument-parser/&gt;`__, `Tyro  &lt;https://pypi.org/project/tyro/&gt;`__ and `SimpleParsing  &lt;https://pypi.org/project/simple-parsing/&gt;`__.- Parse from **configuration files** and **environment variables**, like  `OmegaConf &lt;https://pypi.org/project/omegaconf/&gt;`__, `dynaconf  &lt;https://pypi.org/project/dynaconf/&gt;`__, `confuse  &lt;https://pypi.org/project/confuse/&gt;`__ and `configargparse  &lt;https://pypi.org/project/ConfigArgParse/&gt;`__.- **Dataclasses** support, like `SimpleParsing  &lt;https://pypi.org/project/simple-parsing/&gt;`__ and `Tyro  &lt;https://pypi.org/project/tyro/&gt;`__.Other notable features include:- **Extensive type hint support:** nested types (union, tuple, etc.),  containers (list, dict, etc.), restricted types (regex, numbers), paths, URLs,  types from stubs (``*.pyi``), future annotations (PEP `563  &lt;https://peps.python.org/pep-0563/&gt;`__), and backports (PEPs `604  &lt;https://peps.python.org/pep-0604&gt;`__/`585  &lt;https://peps.python.org/pep-0585&gt;`__).- **Dependency injection:** support types that expect a class instance and  callables that return a class instance.- **Structured configs:** parse config files with more understandable non-flat  hierarchies.- **Config file formats:** `json &lt;https://www.json.org/&gt;`__, `yaml  &lt;https://yaml.org/&gt;`__, `jsonnet &lt;https://jsonnet.org/&gt;`__ and extendible to  more formats.- **Relative paths:** within config files and parsing of config paths referenced  inside other configs.- **Argument linking:** directing parsed values to multiple parameters,  preventing unnecessary interpolation in configs.Design principles------------------ **Non-intrusive/decoupled:**  There is no requirement for unrelated modifications throughout a codebase,  maintaining the `separation of concerns principle  &lt;https://en.wikipedia.org/wiki/Separation_of_concerns&gt;`__. In simpler terms,  changes should make sense even without the CLI. No need to inherit from a  special class, add decorators, or use CLI-specific type hints.- **Minimal boilerplate:**  A recommended practice is to write code with function/class parameters having  meaningful names, accurate type hints, and descriptive docstrings. Reuse these  wherever they appear to automatically generate the CLI, following the `don't  repeat yourself principle  &lt;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&gt;`__. A notable  advantage is that when parameters are added or types changed, the CLI will  remain synchronized, avoiding the need to update the CLI's implementation.- **Dependency injection:**  Using as type hint a class or a callable that instantiates a class, a practice  known as `dependency injection  &lt;https://en.wikipedia.org/wiki/Dependency_injection&gt;`__, is a sound design  pattern for developing loosely coupled and highly configurable software. Such  type hints should be supported with minimal restrictions... _installation:Installation============You can install using `pip &lt;https://pypi.org/project/jsonargparse/&gt;`__ as:.. code-block:: bash    pip install jsonargparseBy default the only dependency that jsonargparse installs is `PyYAML&lt;https://pypi.org/project/PyYAML/&gt;`__. However, several optional features can beenabled by specifying any of the following extras requires: ``signatures``,``jsonschema``, ``jsonnet``, ``urls``, ``fsspec``, ``ruyaml``, ``omegaconf`` and``argcomplete``. There is also the ``all`` extras require to enable all optionalfeatures. Installing jsonargparse with extras require is as follows:.. code-block:: bash    pip install &quot;jsonargparse[signatures,urls]&quot;  # Enable signatures and URLs features    pip install &quot;jsonargparse[all]&quot;              # Enable all optional features</longdescription>
</pkgmetadata>