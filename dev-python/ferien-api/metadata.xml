<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ferien-api[![PyPI version](https://badge.fury.io/py/ferien-api.svg)](https://badge.fury.io/py/ferien-api)[![Build Status](https://travis-ci.org/HazardDede/ferien-api.svg?branch=master)](https://travis-ci.org/HazardDede/ferien-api)[![Coverage Status](https://coveralls.io/repos/github/HazardDede/ferien-api/badge.svg?branch=master)](https://coveralls.io/github/HazardDede/ferien-api?branch=master)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)&gt; Python client library for ferien-api.de## Installation`ferien-api` needs python 3.5+ to function properly```pip install ferien-api```## UsageYou could use the synchronous implementation which will block until a response arrives from the apior you could use the async implementation which will be non-blocking your other async stuff.**Synchronous**:```pythonimport feriendef main():    # Get all vacations for all time and states    print(&quot;All vacations:&quot;, ferien.all_vacations())    # Get all vacations for a specific state (in this case Hamburg - HH) ...    print(&quot;All vacations for HH:&quot;, ferien.state_vacations('HH'))    # ... and optionally for a specific year    print(&quot;All vacations for HH in 2019:&quot;, ferien.state_vacations('HH', 2019))    # Fetch all valid states    print(&quot;Valid state codes:&quot;, ferien.state_codes())    # Get current vacation (None if there is no vacation)    print(&quot;Current vacation in HH:&quot;, ferien.current_vacation('HH'))    # Get next vacation (None if there is no next vacation)    print(&quot;Next vacation in HH:&quot;, ferien.next_vacation('HH'))if __name__ == '__main__':    main()```**Asynchronous**:```pythonimport asyncioimport ferienasync def main():    # Get all vacations for all time and states    print(&quot;All vacations:&quot;, await ferien.all_vacations_async())    # Get all vacations for a specific state (in this case Hamburg - HH) ...    print(&quot;All vacations for HH:&quot;, await ferien.state_vacations_async('HH'))    # ... and optionally for a specific year    print(&quot;All vacations for HH in 2019:&quot;, await ferien.state_vacations_async('HH', 2019))    # Fetch all valid states. This one is _NOT_ async    print(&quot;Valid state codes:&quot;, ferien.state_codes())    # Get current vacation (None if there is no vacation)    print(&quot;Current vacation in HH:&quot;, ferien.current_vacation(vacs=await ferien.state_vacations_async('HH')))    # Get next vacation (None if there is no next vacation)    print(&quot;Next vacation in HH:&quot;, ferien.next_vacation(vacs=await ferien.state_vacations_async('HH')))if __name__ == '__main__':    loop = asyncio.get_event_loop()    loop.run_until_complete(main())```Both implementations of `all_vacations` and `state_vacations` will return a list of `Vacation` data objects.See below for the definition of a `Vacation` object.```pythonVacation(    start=datetime.datetime(2020, 12, 21, 0, 0),    end=datetime.datetime(2021, 1, 5, 0, 0),    year=2020,    state_code='HH',    name='weihnachtsferien',    slug='weihnachtsferien-2020-HH')```*Please note*: All datetime objects are in the `Europe/Berlin (CET/CEST)` timezoneUsing the async version it is easy to make multiple requests in &quot;parallel&quot; (not true... you know that when you arean asyncio enthusiast) and save a lot of time:```pythonimport asyncioimport ferienasync def print_wrapper(state_code):    print(&quot;Fetching {}&quot;.format(state_code))    res = await ferien.state_vacations_async(state_code, 2019)    print(&quot;Fetched {}&quot;.format(state_code))    return resif __name__ == '__main__':    loop = asyncio.get_event_loop()    coros = [        print_wrapper('HH'),        print_wrapper('SH'),        print_wrapper('BE'),        print_wrapper('BB')    ]    loop.run_until_complete(asyncio.gather(*coros))```## Changelog**0.3.7*** Adapts the vacation date parsing logic to the new ferien-api standard (#8)* Fixes some linting errors using the latest linter / mypy (#8)**0.3.6*** Removes unnecessary print statement in utils.py**0.3.5*** Adds strptime fallback for Z remainder (#5)**0.3.4*** Fixes incorrect localization to Europe/Berlin for dates**0.3.3*** Changes all timestamps from naive to 'Europe/Berlin'**0.3.2*** Adds type hints to codebase* Adds mypy as a linter**0.3.1*** Adds pylint as a linter and make him happy!**0.3.0*** Adds `current_vacation` and `next_vacation` implementations**0.2.0*** Adds an async implementation of `all_vacations` and `state_vacations`**0.1.0*** Initial version</longdescription>
</pkgmetadata>