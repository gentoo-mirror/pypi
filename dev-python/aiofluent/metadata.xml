<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A Python structured logger for Fluentd======================================WARNING: This is a fork of the https://github.com/fluent/fluent-logger-pythonproject to work with asyncio.Many web/mobile applications generate huge amount of event logs (c,f.login, logout, purchase, follow, etc). To analyze these event logs couldbe really valuable for improving the service. However, the challenge iscollecting these logs easily and reliably.`Fluentd &lt;https://github.com/fluent/fluentd&gt;`__ solves that problem byhaving: easy installation, small footprint, plugins, reliable buffering,log forwarding, etc.**aiofluent** is a Python library, to record the events fromPython application.Requirements-------------  Python 3.5 or greater- ``msgpack-python``Installation------------This library is distributed as 'aiofluent' python package. Pleaseexecute the following command to install it... code:: sh    $ pip install aiofluentConfiguration-------------Fluentd daemon must be launched with a tcp source configuration:::    &lt;source&gt;      type forward      port 24224    &lt;/source&gt;To quickly test your setup, add a matcher that logs to the stdout:::    &lt;match app.**&gt;      type stdout    &lt;/match&gt;Usage-----FluentSender Interface~~~~~~~~~~~~~~~~~~~~~~`sender.FluentSender` is a structured event logger for Fluentd.By default, the logger assumes fluentd daemon is launched locally. Youcan also specify remote logger by passing the options... code:: python    from aiofluent import sender    # for local fluent    logger = sender.FluentSender('app')    # for remote fluent    logger = sender.FluentSender('app', host='host', port=24224)For sending event, call `emit` method with your event. Following example will send the event tofluentd, with tag 'app.follow' and the attributes 'from' and 'to'... code:: python    # Use current time    logger.emit('follow', {'from': 'userA', 'to': 'userB'})    # Specify optional time    cur_time = int(time.time())    logger.emit_with_time('follow', cur_time, {'from': 'userA', 'to':'userB'})You can detect an error via return value of `emit`. If an error happens in `emit`, `emit` returns `False` and get an error object using `last_error` method... code:: python    if not logger.emit('follow', {'from': 'userA', 'to': 'userB'}):        print(logger.last_error)        logger.clear_last_error() # clear stored error after handled errorsIf you want to shutdown the client, call `close()` method... code:: python    logger.close()Event-Based Interface~~~~~~~~~~~~~~~~~~~~~This API is a wrapper for `sender.FluentSender`.First, you need to call ``sender.setup()`` to create global `sender.FluentSender` loggerinstance. This call needs to be called only once, at the beginning ofthe application for example.Initialization code of Event-Based API is below:.. code:: python    from aiofluent import sender    # for local fluent    sender.setup('app')    # for remote fluent    sender.setup('app', host='host', port=24224)Then, please create the events like this. This will send the event tofluentd, with tag 'app.follow' and the attributes 'from' and 'to'... code:: python    from aiofluent import event    # send event to fluentd, with 'app.follow' tag    event.Event('follow', {      'from': 'userA',      'to':   'userB'    })`event.Event` has one limitation which can't return success/failure result.Other methods for Event-Based Interface... code:: python    sender.get_global_sender # get instance of global sender    sender.close # Call FluentSender#closeHandler for buffer overflow~~~~~~~~~~~~~~~~~~~~~~~~~~~You can inject your own custom proc to handle buffer overflow in the event of connection failure. This will mitigate the loss of data instead of simply throwing data away... code:: python    import msgpack    from io import BytesIO    def handler(pendings):        unpacker = msgpack.Unpacker(BytesIO(pendings))        for unpacked in unpacker:            print(unpacked)    logger = sender.FluentSender('app', host='host', port=24224, buffer_overflow_handler=handler)You should handle any exception in handler. aiofluent ignores exceptions from ``buffer_overflow_handler``.This handler is also called when pending events exist during `close()`.Python logging.Handler interface~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~This client-library also has ``FluentHandler`` class for Python loggingmodule... code:: python    import logging    from aiofluent import handler    custom_format = {      'host': '%(hostname)s',      'where': '%(module)s.%(funcName)s',      'type': '%(levelname)s',      'stack_trace': '%(exc_text)s'    }    logging.basicConfig(level=logging.INFO)    l = logging.getLogger('fluent.test')    h = handler.FluentHandler('app.follow', host='host', port=24224)    formatter = handler.FluentRecordFormatter(custom_format)    h.setFormatter(formatter)    l.addHandler(h)    l.info({      'from': 'userA',      'to': 'userB'    })    l.info('{&quot;from&quot;: &quot;userC&quot;, &quot;to&quot;: &quot;userD&quot;}')    l.info(&quot;This log entry will be logged with the additional key: 'message'.&quot;)You can also customize formatter via logging.config.dictConfig.. code:: python    import logging.config    import yaml    with open('logging.yaml') as fd:        conf = yaml.load(fd)    logging.config.dictConfig(conf['logging'])A sample configuration ``logging.yaml`` would be:.. code:: python    logging:        version: 1        formatters:          brief:            format: '%(message)s'          default:            format: '%(asctime)s %(levelname)-8s %(name)-15s %(message)s'            datefmt: '%Y-%m-%d %H:%M:%S'          fluent_fmt:            '()': fluent.handler.FluentRecordFormatter            format:              level: '%(levelname)s'              hostname: '%(hostname)s'              where: '%(module)s.%(funcName)s'        handlers:            console:                class : logging.StreamHandler                level: DEBUG                formatter: default                stream: ext://sys.stdout            fluent:                class: fluent.handler.FluentHandler                host: localhost                port: 24224                tag: test.logging                formatter: fluent_fmt                level: DEBUG            none:                class: logging.NullHandler        loggers:            amqp:                handlers: [none]                propagate: False            conf:                handlers: [none]                propagate: False            '': # root logger                handlers: [console, fluent]                level: DEBUG                propagate: FalseLicense-------Apache License, Version 2.01.2.9 (2020-10-22)------------------- Only log errors every 30 seconds1.2.8 (2020-05-15)------------------- Handle TypeError formatting log data1.2.7 (2020-03-09)------------------- Fix repo location1.2.6 (2020-01-06)------------------- Improve error logging  [vangheem]1.2.5 (2019-12-19)------------------- Handle event loop closed error  [vangheem]1.2.4 (2019-12-19)------------------- Increase max queue size1.2.3 (2019-04-01)------------------- Fix release1.2.2 (2019-04-01)------------------- nanosecond_precision by default  [davidonna]1.2.1 (2018-10-31)------------------- Add support for nanosecond precision timestamps  [davidonna]1.2.0 (2018-06-14)------------------- Maintain one AsyncIO queue for all logs  [vangheem]1.1.4 (2018-05-29)------------------- Handle RuntimeError on canceling tasks/cleanup  [vangheem]1.1.3 (2018-02-15)------------------- Lock calling the close method of sender  [vangheem]- Increase default timeout  [vangheem]1.1.2 (2018-02-07)------------------- lock the whole method  [vangheem]1.1.1 (2018-02-07)------------------- Use lock on getting connection object  [vangheem]1.1.0 (2018-01-25)------------------- Move to using asyncio connection infrastructure instead of sockets  [vangheem]1.0.8 (2018-01-04)------------------- Always close out buffer data  [vangheem]1.0.7 (2018-01-04)------------------- Handle errors processing log queue  [vangheem]1.0.6 (2017-11-14)------------------- Prevent log queue from getting too large  [vangheem]1.0.5 (2017-10-17)------------------- Fix release to include CHANGELOG.rst file  [vangheem]1.0.4 (2017-10-10)------------------- Fix pushing initial record1.0.3 (2017-10-10)------------------- Handle Runtime error when logging done before event loop started  [vangheem]1.0.2 (2017-10-09)------------------- Fix to make normal logging call async  [vangheem]1.0.1 (2017-07-03)------------------- initial release</longdescription>
</pkgmetadata>