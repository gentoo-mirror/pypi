<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Molecule Hetzner Cloud Plugin[![Drone CI-CD](https://drone.autonomic.zone/api/badges/autonomic-cooperative/molecule-hetznercloud/status.svg)](https://drone.autonomic.zone/autonomic-cooperative/molecule-hetznercloud)[![PyPI Package](https://badge.fury.io/py/molecule-hetznercloud.svg)](https://badge.fury.io/py/molecule-hetznercloud)[![Repository License](https://img.shields.io/badge/license-LGPL-brightgreen.svg)](LICENSE)A [Hetzner Cloud](https://www.hetzner.com/cloud) plugin for [Molecule](https://molecule.readthedocs.io/en/latest/).This plugin allows you to do `molecule init role myrolename -d hetznercloud`and have Molecule provision on-demand Hetzner Cloud VPSes of your choice foryour integration testing. New VPSes will be automagically created andprovisioned on each `molecule test` run, SSH keys are generated and managedinternally and all resources are cleaned up regardless of whether the roleunder test succeeds or fails.## SupportIf you use this plugin in a commercial setting or you find it personallyuseful, please support my maintenance work financially through my[Liberapay](https://liberapay.com/decentral1se/) profile or through my [GithubSponsor profile](https://github.com/sponsors/decentral1se). I do not receiveany financial support from RedHat or Hetzner Cloud for this work.## Install```bash$ pip install molecule-hetznercloud```If you're looking for a container approach, see [ansible-community/toolset](https://github.com/ansible-community/toolset).## UpgradePlease see the [CHANGELOG.md](./CHANGELOG.md) for migration guides.```bash$ pip install --upgrade molecule-hetznercloud```## UsageYou need to expose a `HCLOUD_TOKEN` environment variable in your environment.Find out more about how to get one of those [over here](https://docs.hetzner.cloud/#overview-authentication).```bash$ export HCLOUD_TOKEN=mycoolapitoken```Then create a role using the driver plugin.```bash$ molecule init role myrolename -d hetznercloud```Your `myrolename/molecule/default/molecule.yml` should then look like the following.```yaml---dependency:  name: galaxydriver:  name: hetznercloudplatforms:  - name: instance    server_type: cx11    image: debian-10provisioner:  name: ansibleverifier:  name: ansible```Please see [docs.hetzner.cloud](https://docs.hetzner.cloud/) for information regarding images and server types.Then just run the role.```bash$ cd myrolename &amp;&amp; molecule test```To ease initial debugging for getting things started, also expose the followingenvironment variables.```bash$ export MOLECULE_NO_LOG=False  # not so verbose, helpful$ export MOLECULE_DEBUG=True  # very verbose, last ditch effort```## Volume Handling&gt; **WARNING**: this feature appears to be broke. See [#24](https://github.com/ansible-community/molecule-hetznercloud/issues/24) for moreIt is possible to have the driver manage volumes during the test run. You canadd the following stanza to your Molecule configuration to have Molecule createthis volume for the managed VPS. This volume will be cleaned up after use.```yamlplatforms:  - name: instance    server_type: cx11    image: debian-10    volumes:      - name: &quot;molecule-hetznercloud-volume-1-${INSTANCE_UUID}&quot;        location: /foo/bar      - name: &quot;molecule-hetznercloud-volume-2-${INSTANCE_UUID}&quot;        size: 20```Supported keys are:- **name** (required): name of volume- **size** (optional, default: `10GB`): size of volume- **location** (optional, default: `omitted`): path for volume## Network CreationThis Driver is able to generate networks and subnetworks during the test run.This can be useful for cluster tests. You can create networks with thefollowing snippet:```yamlplatforms:  - name: instance1    server_type: cx11    image: debian-10    networks:      test-network:        ip_range: 10.10.0.0/16        subnet:          ip: 10.10.10.1/24          type: cloud          network_zone: eu-central      test-network-2:        ip_range: 10.20.0.0/16        subnet:          ip: 10.20.10.1/24  - name: instance2    server_type: cx11    image: debian-10    networks:      test-network:        subnet:          ip: 10.10.10.2/24```The networks **ip_range** is only important for creating. If you have multiplehosts, it is okay to only define **ip_range** once. The supported keys are:- **networks**    - **ip_range** (required): ip range of network (usually `/16`)- **subnet**    - **ip** (required): ip that should be assigned to host (also generates subnetwork) - prefix mandatory    - **type** (optional, default: `cloud`): type of subnetwork    - **network_zone** (optional, default: `eu-central`): network zone of subnetwork## Only use `molecule.yml` for configurationIt is being worked on that it is possible to remove all the files except the`molecule.yml` scenario file in your scenario directory. This is useful whenyou only require this plugin to do the default behaviour each time. It is alsouseful to reduce maintenance effort for migration of configurations. Thisplugin currently embeds the `create.yml` and `destroy.yml` playbooks. All otherplaybooks (e.g. prepare, cleanup) can be created as needed and Molecule willpick them up and run them. Embedding the `converge.yml` awaits [this featurerequest](https://github.com/ansible-community/molecule/issues/2675).## MirroringIssues will be responded to on both issue trackers.- [git.autonomic.zone](https://git.autonomic.zone/autonomic-cooperative/molecule-hetznercloud) (primary)- [github.com](https://github.com/ansible-community/molecule-hetznercloud) (mirror)## Change logSee [CHANGELOG.md](./CHANGELOG.md).## Molecule Documentation&gt; https://molecule.readthedocs.io## Contact- Ping @decentral1se on the `#ansible-molecule` channel on [Libera](https://libera.chat/).## LicenseThe [LGPLv3](https://www.gnu.org/licenses/lgpl-3.0.en.html) license.## TestingThis is all done on our [drone.autonomic.zone](https://drone.autonomic.zone/autonomic-cooperative/molecule-hetznercloud) setup.### Unit```bash$ pip install tox$ tox -v```### Integration```git clone https://github.com/ansible-community/molecule-hetznercloud.gitcd molecule-hetznercloudpython3 -m venv .venv &amp;&amp; source .venv/bin/activatepip install -e . &quot;ansible&lt;4&quot; netaddrexport INSTANCE_UUID=$(openssl rand -hex 5)export HCLOUD_TOKEN=YOURKEYcd integration &amp;&amp; molecule test```</longdescription>
</pkgmetadata>