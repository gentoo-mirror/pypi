<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![image][0]][1][![image][2]][3][![image][4]][5][![image][6]][7]  [0]: https://github.com/oarepo/oarepo-communities/workflows/CI/badge.svg  [1]: https://github.com/oarepo/oarepo-communities/actions?query=workflow%3ACI  [2]: https://img.shields.io/github/tag/oarepo/oarepo-communities.svg  [3]: https://github.com/oarepo/oarepo-communities/releases  [4]: https://img.shields.io/pypi/dm/oarepo-communities.svg  [5]: https://pypi.python.org/pypi/oarepo-communities  [6]: https://img.shields.io/github/license/oarepo/oarepo-communities.svg  [7]: https://github.com/oarepo/oarepo-communities/blob/master/LICENSE# OARepo-CommunitiesOArepo module that adds support for communities## PrerequisitesTo use this library, you need to configure your `RECORDS_REST_ENDPOINTS`to use [OARepo FSM](https://github.com/oarepo/oarepo-fsm)and [OARepo Records Draft](https://github.com/oarepo/invenio-records-draft) libraries first.Ensure that your Record Metadata schema contains the following fields:```json{    &quot;oarepo:primaryCommunity&quot;:{        &quot;type&quot;: &quot;string&quot;    },    &quot;oarepo:secondaryCommunities&quot;: {        &quot;type&quot;: &quot;array&quot;,        &quot;items&quot;: {            &quot;type&quot;: &quot;string&quot;        }    },    &quot;oarepo:recordStatus&quot;: {        &quot;type&quot;: &quot;string&quot;    },    &quot;access&quot;: {        &quot;owned_by&quot;: {            &quot;description&quot;: &quot;List of user IDs that are owners of the record.&quot;,            &quot;type&quot;: &quot;array&quot;,            &quot;minItems&quot;: 1,            &quot;uniqueItems&quot;: true,            &quot;items&quot;: {                &quot;type&quot;: &quot;object&quot;,                &quot;additionalProperties&quot;: false,                &quot;properties&quot;: {                    &quot;user&quot;: {                        &quot;type&quot;: &quot;integer&quot;                    }                }            }        }    }}```or if you want you can use your custom schema and you have to specify JSON address separated by dots (level1.level2etc.) in configuration. Please see example:```pythonOAREPO_COMMUNITIES_PRIMARY_COMMUNITY_FIELD = 'address1.separated.by.dots'OAREPO_COMMUNITIES_OWNED_BY_FIELD = 'address2.separated.by.dots'OAREPO_COMMUNITIES_COMMUNITIES_FIELD = 'address3.separated.by.dots'```## InstallationOARepo-Communities is on PyPI so all you need is:``` console$ pip install oarepo-communities```## Configuration### Community record classTo use this module, you need to inherit your Record class from the following mixin.You should also implement `canonical_url` with `CommunityPIDValue` for record's `pid_value`,which provides an ID of record's primary community e.g.:```pythonfrom oarepo_communities.record import CommunityRecordMixinclass CommunityRecord(CommunityRecordMixin, Record):...@propertydef canonical_url(self):    return url_for(f'invenio_records_rest.records/record_item',                   pid_value=CommunityPIDValue(                       self['id'],                       current_oarepo_communities.get_primary_community_field(self)                   ), _external=True)```### Community RolesTo customize invenio roles to be created inside each community, override the following defaults:```pythonOAREPO_COMMUNITIES_ROLES = ['member', 'curator', 'publisher']&quot;&quot;&quot;Roles present in each community.&quot;&quot;&quot;```This configuration will create an internal Invenio roles named:```community:&lt;community_id&gt;:membercommunity:&lt;community_id&gt;:curatorcommunity:&lt;community_id&gt;:publisher```for each newly created community.### Community actionsCommunity action grants users having community roles associated with the action a permission toperform a certain action on all records in the community (given that other necessary conditionsare also met, e.g. record's ownership and/or current state, see [Permissions](https://github.com/oarepo/oarepo-communities#permissions)).To customize which actions could be assigned to community roles, override the following defaults:```pythonOAREPO_COMMUNITIES_ALLOWED_ACTIONS = [    COMMUNITY_READ, COMMUNITY_CREATE,    COMMUNITY_REQUEST_APPROVAL, COMMUNITY_APPROVE, COMMUNITY_REVERT_APPROVE,    COMMUNITY_REQUEST_CHANGES,    COMMUNITY_PUBLISH,    COMMUNITY_UNPUBLISH]&quot;&quot;&quot;Community actions available to community roles.&quot;&quot;&quot;```### Default role actions permission matrixYou can customize default action permissions assigned to roles of newlycreated communities by customizing:```pythonOAREPO_COMMUNITIES_DEFAULT_ACTIONS = {   'any': [], # e.g. anonymous, non-community users   'author': [], # owners of the records   'member': [COMMUNITY_CREATE],   'curator': [COMMUNITY_READ, COMMUNITY_APPROVE, COMMUNITY_UPDATE, COMMUNITY_REQUEST_CHANGES, COMMUNITY_DELETE],   'publisher': [COMMUNITY_PUBLISH, COMMUNITY_REVERT_APPROVE]}&quot;&quot;&quot;Default action2role permission matrix for newly created communities.&quot;&quot;&quot;```### REST EndpointsRegister Records REST endpoints that will represent community record collections under:```pythonOAREPO_COMMUNITIES_ENDPOINTS = ['recid', ...]&quot;&quot;&quot;List of community enabled endpoints.&quot;&quot;&quot;OAREPO_FSM_ENABLED_REST_ENDPOINTS = ['recid', ...]&quot;&quot;&quot;Enable FSM transitions for the community record collection.&quot;&quot;&quot;```_NOTE: items should be the keys of `RECORDS_REST_ENDPOINTS` config dict._Endpoints registered as community endpoints are expected to have item and list paths in thefollowing format:```pythonRECORDS_REST_ENDPOINTS={    list_route=f'/&lt;community_id&gt;/',    item_route=f'/&lt;commpid({pid_type},record_class=&quot;{record_class}&quot;):pid_value&gt;',...}```#### Links FactoryFor this library to work, you will need to set the following links factory in your `RECORDS_REST_ENDPOINTS`:```pythonfrom oarepo_communities.links import community_record_links_factory...RECORDS_REST_ENDPOINTS={    'recid': {        ...        links_factory_imp=partial(community_record_links_factory, original_links_factory=your_original_links_factory),    }```***WARNING***: `your_original_links_factory` should expect `CommunityPIDValue` instance to be passed for linkgeneration as record's `pid_value`## SearchTo limit search results to records in a certain community, use the following in your `RECORDS_REST_ENDPOINTS`:```pythonfrom oarepo_communities.search import CommunitySearch, community_search_factory...RECORDS_REST_ENDPOINTS={    'recid': {        ...        search_class=CommunitySearch,        search_factory_imp=community_search_factory    }```This will restrict the results of a search query to just the records having primary or secondarycommunity ID obtained from the current request. Furtherfiltering will occur considering the current user community roles and records state(see [Permissions](https://github.com/oarepo/oarepo-communities#permissions)).If the community ID could not be determined from the current request, results will befiltered with all IDs of communities where the current user is in any role.## PermissionsThis library provides the permission factories to be used for securing `RECORDS_REST_ENDPOINTS` community-enabledcollections. It also provides default permissions for each community action.Default community permission factories together with default `OAREPO_COMMUNITIES_DEFAULT_ACTIONS` config implements the followingpermissions matrix in a collection of community records:### State-based permissionsEach role is granted permissions based on a state of the record:| state | anonymous/any | author |  member  | curator | publisher | admin ||------|-------------|-------|-----------|---------|--------|---------|| filling |       x            |   r/w    |         c        |      r/w     |       x     |       r/w     || approving |     x      |   r        |        x         |      r/w     |     x       |       r/w     || approved  |     x      |   r        |        r          |       r       |      r       |       r/w                    || published |     r      |    r       |        r          |       r       |      r        |        r(+unpublish) |_r(read), w(update), c(create)_### Action need permissionsEach role is granted community-scope restricted permissions to invoke a certain actions on a record.| role | actions ||-----|-------|| author | request-approval (own records only) || curator | approve, delete, read, request-changes, update || publisher | publish, revert-approve || admin | all above + unpublish |## SignalsEach community action defined on CommunityRecordMixin sends a signal whenevera record's state changes. Thefollowing [signals](https://github.com/oarepo/oarepo-communities/oarepo_communities/signals.py) are available foreach possible action. You will need to connect to these signals in your app toexecute any extra actions needed on each state change event.```pythonon_request_approval = _signals.signal('on-community-request-approve')&quot;&quot;&quot;Signal sent when community record transitions to pending approval state.&quot;&quot;&quot;on_delete_draft = _signals.signal('on-community-delete-draft')&quot;&quot;&quot;Signal sent when community record delete draft action is triggered.   When implementing the event listener, it is your responsibility   to commit any changes to the record.&quot;&quot;&quot;on_request_changes = _signals.signal('on-community-request-changes')&quot;&quot;&quot;Signal sent when community record transitions from approved to editing state.&quot;&quot;&quot;on_approve = _signals.signal('on-community-approve')&quot;&quot;&quot;Signal sent when community record transtions to approved state.   When implementing the event listener, it is your responsibility   to commit any changes to the record.&quot;&quot;&quot;on_revert_approval = _signals.signal('on-community-revert-approval')&quot;&quot;&quot;Signal sent when community record transitions from approved to pending approval state.   When implementing the event listener, it is your responsibility   to commit any changes to the record.&quot;&quot;&quot;on_publish = _signals.signal('on-community-publish')&quot;&quot;&quot;Signal sent when community record transitions from approved to published state.&quot;&quot;&quot;on_unpublish = _signals.signal('on-community-unpublish')&quot;&quot;&quot;Signal sent when community record transitions published to approved state.&quot;&quot;&quot;```## Usage### CLIYou can find all CLI commands that are available under `invenio oarepo:communities` group.To create a community, use:````shellUsage: oarepo oarepo:communities create [OPTIONS] COMMUNITY_ID TITLEOptions:  --description TEXT  Community description  --policy TEXT       Curation policy  --title TEXT        Community title  --logo-path TEXT    Path to the community logo file  --ctype TEXT        Type of a community  --help              Show this message and exit.````This command will create a new community together with Invenio Roles for the community.Created community roles will be defined by default as:```pythondict(    name=f'community:{community_id}:{community_role}',    description=f'{title} - {community_role}')```This can be customized by using custom `OAREPO_COMMUNITIES_ROLE_KWARGS` factory.To manage actions allowed on each role in a community use the following CLI commands:```Usage: oarepo oarepo:communities actions [OPTIONS] COMMAND [ARGS]...  Management commands for OARepo Communities actions.Options:  --help  Show this message and exit.Commands:  allow  Allow actions to the given role.  deny   Deny actions on the given role.  list   List all available community actions.```#### Discover available communities```shell$ oarepo oarepo:communities list- cesnet - CESNET community A testing CESNET community to test oarepo-communities```#### Discover actions available/assigned to the community roles```yaml$ oarepo oarepo:communities actions list -c cesnetAvailable actions:- read- create- update- request-approval- approve- revert-approve- request-changes- delete- publish- unpublishAvailable community roles:- author- any- publisher- curator- memberAllowed community role actions:- create: publisher, curator- publish: publisher- read: publisher- request-changes: curatorAllowed system role actions:```#### Allow a certain actions for the certain community role```shell$ oarepo oarepo:communities actions allow cesnet curator delete approve revert-approveAdded role action: community-delete Need(method='role', value='community:cesnet:curator')Added role action: community-approve Need(method='role', value='community:cesnet:curator')Added role action: community-revert-approve Need(method='role', value='community:cesnet:curator')```### REST APIThis library registers the folowing REST API routes for OARepo:#### Community list```shellcurl http://127.0.0.1:5000/communities/ {    'comtest': {        'id': 'comtest',        'metadata': {'description': 'Community description'},        'title': 'Title',        'type': 'Other',        'links': {            'self': 'https://localhost/communities/comtest'        }    }},    ... }```#### Community Detail```shellcommunity_id=comtestcurl http://127.0.0.1:5000/communities/${community_id}{    'id': 'comtest',    'metadata': {'description': 'Community description'},    'title': 'Title',    'type': 'Other',    'actions': { # present for community members only       'community-read': ['community:comtest:curator', 'community-record-owner'],       'community-update': ['community-record-owner'],       ...     },    'links': {        'self': 'https://localhost/communities/comtest'    }}}```Further documentation is available onhttps://oarepo-communities.readthedocs.io/Copyright (C) 2021 CESNET.OARepo-Communities is free software; you can redistribute it and/ormodify it under the terms of the MIT License; see LICENSE file for moredetails...    Copyright (C) 2021 CESNET.    OARepo-Communities is free software; you can redistribute it and/or    modify it under the terms of the MIT License; see LICENSE file for more    details.Changes=======Version 0.1.0 (released TBD)- Initial public release.</longdescription>
</pkgmetadata>