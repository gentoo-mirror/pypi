<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># EDGARA small library to access files from SEC's edgar.## Installation&gt;   pip install edgar## ExampleTo get a company's latest 5 10-Ks, run``` pythonfrom edgar import Companycompany = Company(&quot;Oracle Corp&quot;, &quot;0001341439&quot;)tree = company.get_all_filings(filing_type = &quot;10-K&quot;)docs = Company.get_documents(tree, no_of_documents=5)```or```pythonfrom edgar import Company, TXTMLcompany = Company(&quot;INTERNATIONAL BUSINESS MACHINES CORP&quot;, &quot;0000051143&quot;)doc = company.get_10K()text = TXTML.parse_full_10K(doc)```To get all companies and find a specific one, run``` pythonfrom edgar import Edgaredgar = Edgar()possible_companies = edgar.find_company_name(&quot;Cisco System&quot;)```To avoid pull of all company data from sec.gov on Edgar initialization, pass in a local path to the data``` pythonfrom edgar import Edgaredgar = Edgar(&quot;/path/to/cik-lookup-data.txt&quot;)possible_companies = edgar.find_company_name(&quot;Cisco System&quot;)```To get XBRL data, run```pythonfrom edgar import Company, XBRL, XBRLElementcompany = Company(&quot;Oracle Corp&quot;, &quot;0001341439&quot;)results = company.get_data_files_from_10K(&quot;EX-101.INS&quot;, isxml=True)xbrl = XBRL(results[0])XBRLElement(xbrl.relevant_children_parsed[15]).to_dict() // returns a dictionary of name, value, and schemaRef```## API### Company```pythonCompany(name, cik, timeout=10)```* name (company name)* cik (company CIK number)* timeout (optional) (default: 10)#### Methods`get_filings_url(self, filing_type=&quot;&quot;, prior_to=&quot;&quot;, ownership=&quot;include&quot;, no_of_entries=100) -&gt; str`Returns a url to fetch filings data* filing_type: The type of document you want. i.e. 10-K, S-8, 8-K. If not specified, it'll return all documents* prior_to: Time prior which documents are to be retrieved. If not specified, it'll return all documents* ownership: defaults to include. Options are include, exclude, only.* no_of_entries: defaults to 100. Returns the number of entries to be returned. Maximum is 100.`get_all_filings(self, filing_type=&quot;&quot;, prior_to=&quot;&quot;, ownership=&quot;include&quot;, no_of_entries=100) -&gt; lxml.html.HtmlElement`Returns the HTML in the form of [lxml.html](http://lxml.de/lxmlhtml.html)* filing_type: The type of document you want. i.e. 10-K, S-8, 8-K. If not specified, it'll return all documents* prior_to: Time prior which documents are to be retrieved. If not specified, it'll return all documents* ownership: defaults to include. Options are include, exclude, only.* no_of_entries: defaults to 100. Returns the number of entries to be returned. Maximum is 100.`get_10Ks(self, no_of_documents=1, as_documents=False) -&gt; List[lxml.html.HtmlElement]`Returns the HTML in the form of [lxml.html](http://lxml.de/lxmlhtml.html) of concatenation of all the documents in the 10-K* no_of_documents (default: 1): numer of documents to be retrieved* When `as_documents` is set to `True`, it returns `-&gt; List[edgar.document.Documents]` a list of [Documents](#documents)`get_document_type_from_10K(self, document_type, no_of_documents=1) -&gt; List[lxml.html.HtmlElement]`Returns the HTML in the form of [lxml.html](http://lxml.de/lxmlhtml.html) of the document within 10-K* document_type: Tye type of document you want, i.e. 10-K, EX-3.2* no_of_documents (default: 1): numer of documents to be retrieved`get_data_files_from_10K(self, document_type, no_of_documents=1, isxml=False) -&gt; List[lxml.html.HtmlElement]`Returns the HTML in the form of [lxml.html](http://lxml.de/lxmlhtml.html) of the data file within 10-K* document_type: Tye type of document you want, i.e. EX-101.INS* no_of_documents (default: 1): numer of documents to be retrieved* isxml (default: False): by default, things aren't case sensitive and is parsed with `html` in `lxml. If this is True, then it is parsed with `etree` which is case sensitive#### Class Method`get_documents(self, tree: lxml.html.Htmlelement, no_of_documents=1, debug=False, as_documents=False) -&gt; List[lxml.html.HtmlElement]` Returns a list of strings, each string contains the body of the specified document from input* tree: lxml.html form that is returned from Company.getAllFilings* no_of_documents: number of document returned. If it is 1, the returned result is just one string, instead of a list of strings. Defaults to 1.* debug (default: **False**): if **True**, displays the URL and form* When `as_documents` is set to `True`, it returns `-&gt; List[edgar.document.Documents]` a list of [Documents](#documents)### EdgarGets all companies from EDGAR`get_cik_by_company_name(company_name: str) -&gt; str`: Returns the CIK if given the exact name or the company`get_company_name_by_cik(cik: str) -&gt; str`: Returns the company name if given the CIK (with the `000`s) `find_company_name(words: str) -&gt; List[str]`: Returns a list of company names by exact word matching`match_company_by_company_name(self, name, top=5) -&gt; List[Dict[str, Any]]`: Returns a list of dictionarys, with company names, CIK, and their fuzzy match score* `top (default: 5)` returns the top number of fuzzy matches. If set to `None`, it'll return the whole list (which is a lot)### XBRLParses data from XBRL#### Properties`relevant_children`* get children that are not `context``relevant_children_parsed`* get children that are not `context`, `unit`, `schemaRef`* cleans tags### DocumentsFiling and Documents Details for the SEC EDGAR Form (such as 10-K)```pythonDocuments(url, timeout=10)```#### Properties`url: str`: URL of the document`content: dict`: Dictionary of meta data of the document`content['Filing Date']: str`: Document filing date`content['Accepted']: str`: Document accepted datetime`content['Period of Report']: str`: The date period that the document is for`element: lxml.html.HtmlElement`: The HTML element for the Document (from the url) so it can be further parsed## Contribution&lt;a href=&quot;https://www.buymeacoffee.com/joeyism&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&quot; &gt;&lt;/a&gt;</longdescription>
</pkgmetadata>