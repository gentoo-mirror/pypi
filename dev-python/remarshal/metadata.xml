<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># RemarshalConvert between CBOR, JSON, MessagePack, TOML, and YAML. When installed,provides the command line command `remarshal` as well as the short commands`{cbor,json,msgpack,toml,yaml}2`&amp;#x200B;`{cbor,json,msgpack,toml,yaml}`. Withthese commands, you can perform format conversion, reformatting, and errordetection.## Known limitations* CBOR, MessagePack, and YAML with binary fields can not be converted to JSONor TOML. Binary fields are converted between CBOR, MessagePack, and YAML.* TOML containing values of the[Local Date-Time](https://toml.io/en/v1.0.0-rc.1#local-date-time) type can notbe converted to CBOR. The Local Date type can only be converted to JSON andYAML. The Local Time type can not be converted to any other format. OffsetDate-Time and its equivalents can be converted between CBOR, MessagePack,TOML, and YAML. Keys of any date-time type are converted to string TOMLkeys.* Date and time types are converted to JSON strings. They can not be safelyroundtripped through JSON.* A YAML timestamp with only a date becomes a YAML timestamp or a TOML LocalDate-Time for the midnight of that date. This means you can not roundtripevery YAML document through Remarshal.## InstallationYou will need Python 3.8 or later. Earlier versions of Python 3 are notsupported.The recommended way to run Remarshal is to install the latest release from[PyPI](https://pypi.org/project/remarshal/) with[pipx](https://github.com/pypa/pipx).```shpipx install remarshal```Regular installation is not mandatory. The command```shpipx run remarshal [arg ...]```will download Remarshal and run it from a temporary location.It will cache the downloaded version for up to 14 days. Remarshal will not beautomatically updated during this time.You can install Remarshal using pip.```shpython3 -m pip install --user remarshal```Instead of a release, you can install the development version. Preferreleases unless you have a reason to run the development version.```shpython3 -m pip install --user git+https://github.com/remarshal-project/remarshal```## Usage```usage: remarshal.py [-h] [-v] [-i input] [--if {cbor,json,msgpack,toml,yaml}]                    [--json-indent n] [-k] [-o output]                    [--of {cbor,json,msgpack,toml,yaml}] [-s] [--unwrap key]                    [--wrap key] [--yaml-indent n] [--yaml-style {,',&quot;,|,&gt;}]                    [--yaml-width n]                    [input] [output]Convert between CBOR, JSON, MessagePack, TOML, and YAML.positional arguments:  input                 input file  output                output fileoptions:  -h, --help            show this help message and exit  -v, --version         show program's version number and exit  -i input, --input input                        input file  --if {cbor,json,msgpack,toml,yaml}, -if {cbor,json,msgpack,toml,yaml}, --input-format {cbor,json,msgpack,toml,yaml}                        input format  --json-indent n, --indent-json n                        JSON indentation  -k, --stringify       Turn into strings boolean, date-time, and null keys                        for JSON and TOML and null values for TOML  -o output, --output output                        output file  --of {cbor,json,msgpack,toml,yaml}, -of {cbor,json,msgpack,toml,yaml}, --output-format {cbor,json,msgpack,toml,yaml}                        output format  -s, --sort-keys       sort JSON, TOML, YAML keys instead of preserving key                        order  --unwrap key          only output the data stored under the given key  --wrap key            wrap the data in a map type with the given key  --yaml-indent n       YAML indentation  --yaml-style {,',&quot;,|,&gt;}                        YAML formatting style  --yaml-width n        YAML line width for long strings```You can use a short command`{cbor,json,msgpack,toml,yaml}2`&amp;#x200B;`{cbor,json,msgpack,toml,yaml}`instead of `remarshal` with format arguments. The `remarshal` command as wellas the short commands exit with status 0 on success, 1 on operational failure,and 2 when they fail to parse the command line.If no input argument `input`/`-i input` is given or its value is `-`,Remarshal reads input data from standard input. Similarly, with no`output`/`-o output` or an output argument that is `-`, it writes the resultto standard output.### WrappersThe arguments `--wrap` and `--unwrap` are available to solve the problem ofconverting CBOR, JSON, MessagePack, and YAML data to TOML if the top-levelelement of the data is not of a dictionary type (i.e., not a map in CBOR andMessagePack, an object in JSON, or an associative array in YAML).You can not represent such data as TOML directly; the data must be wrapped in adictionary first. Passing the flag `--wrap someKey` to `remarshal` or one ofits short commands wraps the input data in a &quot;wrapper&quot; dictionary with one key,&quot;someKey&quot;, with the input data as its value. The flag `--unwrap someKey` doesthe opposite: only the value stored under the key &quot;someKey&quot; in the top-leveldictionary element of the input data is converted to the target format andoutput; the rest of the input is ignored. If the top-level element is not adictionary or does not have the key &quot;someKey&quot;, `--unwrap someKey` causes anerror.The following shell transcript demonstrates the problem and how `--wrap` and`--unwrap` solve it:```$ echo '[{&quot;a&quot;:&quot;b&quot;},{&quot;c&quot;:[1,2,3]}]' | ./remarshal.py --if json --of tomlError: cannot convert non-dictionary data to TOML; use &quot;wrap&quot; to wrap it in a dictionary$ echo '[{&quot;a&quot;:&quot;b&quot;},{&quot;c&quot;:[1,2,3]}]' \  | ./remarshal.py --if json --of toml --wrap main[[main]]a = &quot;b&quot;[[main]]c = [1, 2, 3]$ echo '[{&quot;a&quot;:&quot;b&quot;},{&quot;c&quot;:[1,2,3]}]' \  | ./remarshal.py --if json --wrap main - test.toml$ ./remarshal.py test.toml --of json{&quot;main&quot;:[{&quot;a&quot;:&quot;b&quot;},{&quot;c&quot;:[1,2,3]}]}$ ./remarshal.py test.toml --of json --unwrap main[{&quot;a&quot;:&quot;b&quot;},{&quot;c&quot;:[1,2,3]}]```## Examples```$ ./remarshal.py example.toml --of yamlclients:  data:  - - gamma    - delta  - - 1    - 2  hosts:  - alpha  - omegadatabase:  connection_max: 5000  enabled: true  ports:  - 8001  - 8001  - 8002  server: 192.168.1.1owner:  bio: 'GitHub Cofounder &amp; CEO    Likes tater tots and beer.'  dob: 1979-05-27 07:32:00+00:00  name: Tom Preston-Werner  organization: GitHubproducts:- name: Hammer  sku: 738594937- color: gray  name: Nail  sku: 284758393servers:  alpha:    dc: eqdc10    ip: 10.0.0.1  beta:    country: 中国    dc: eqdc10    ip: 10.0.0.2title: TOML Example$ curl -s http://api.openweathermap.org/data/2.5/weather\?q\=Kiev,ua \  | ./remarshal.py --if json --of tomlbase = &quot;cmc stations&quot;cod = 200dt = 1412532000id = 703448name = &quot;Kiev&quot;[clouds]all = 44[coord]lat = 50.42999999999999972lon = 30.51999999999999957[main]humidity = 66pressure = 1026temp = 283.49000000000000909temp_max = 284.14999999999997726temp_min = 283.14999999999997726[sys]country = &quot;UA&quot;id = 7358message = 0.24370000000000000sunrise = 1412481902sunset = 1412522846type = 1[[weather]]description = &quot;scattered clouds&quot;icon = &quot;03n&quot;id = 802main = &quot;Clouds&quot;[wind]deg = 80speed = 2```## LicenseMIT. See the file `LICENSE`.`example.toml` from &lt;https://github.com/toml-lang/toml&gt;. `example.json`,`example.msgpack`, `example.cbor`, `example.yml`, `tests/bin.msgpack`, and`tests/bin.yml` are derived from it.</longdescription>
</pkgmetadata>