<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&gt; ⚠️ 请参考[迁移指南](https://github.com/vikadata/vika.py/blob/master/docs/upgrade_to_v1.md) 从 0.1.x 升级至 1.x 版本，旧版本我们将不再维护!![vika.py](https://socialify.git.ci/vikadata/vika.py/image?description=1&amp;descriptionEditable=Vika%20is%20a%20API-based%20SaaS%20database%20platform%20for%20users%20and%20developers%20here%27s%20Python%20SDK%20for%20integration.&amp;font=Inter&amp;forks=1&amp;issues=1&amp;language=1&amp;logo=https%3A%2F%2Fs1.vika.cn%2Fspace%2F2020%2F09%2F04%2F9fcd0d98c2c74274840fcde3341d5164&amp;owner=1&amp;pattern=Circuit%20Board&amp;pulls=1&amp;stargazers=1&amp;theme=Light)[Vika](https://vika.cn) Python SDK 是对维格表 Fusion API 的官方封装，提供类似 Django ORM 风格的 API。用户交流 QQ 群：683795224## 快速开始### 环境要求python3.6 +### 安装```shellpip install --upgrade vika```### 获取 API TOKEN访问维格表的工作台，点击左下角的个人头像，进入「用户中心 &gt; 开发者配置」。点击生成 Token(首次使用需要绑定邮箱)。### 使用基础用法```pythonfrom vika import Vikavika = Vika(&quot;your api_token&quot;)dst = vika.datasheet(&quot;dstt3KGCKtp11fgK0t&quot;)# 传入表格URL 会自动解析表格 id，忽略视图 id。# dst = vika.datasheet(&quot;https://vika.cn/space/spcxcvEBLXf7X/workbench/dstt3KGCKtp11fgK0t/viwmKtRiYcPfk&quot;)# 创建记录record = dst.records.create({&quot;title&quot;: &quot;new record from Python SDK&quot;})print(record.title)# print(record.标题)# 批量创建记录records = dst.records.bulk_create([    {&quot;title&quot;: &quot;new record from Python SDK&quot;},    {&quot;title&quot;: &quot;new record from Python SDK2&quot;}])# 更新单个字段值record.title = &quot;new title&quot;print(record.title)# &quot;new title&quot;# 更新多个字段值record.update({    &quot;title&quot;: &quot;new title&quot;,    &quot;other_field&quot;: &quot;new value&quot;,})# 批量更新多条记录records = dst.records.bulk_update([    {&quot;recordId&quot;: &quot;recxxxxx1&quot;, &quot;fields&quot;:{&quot;title&quot;: &quot;new record.title from Python SDK&quot;}},    {&quot;recordId&quot;: &quot;recxxxxx2&quot;, &quot;fields&quot;:{&quot;title&quot;: &quot;new record.title from Python SDK2&quot;}},])# 附件字段更新my_file = dst.upload_file( &lt; 本地或网络文件路径 &gt;)record.files = [my_file]# 过滤记录songs = dst_songs.records.filter(artist=&quot;faye wong&quot;)for song in songs:    print(song.title)# 批量更新一批记录dst_tasks.records.filter(title=None).update(status=&quot;Pending&quot;)# 获取单条记录book = dst_book.records.get(ISBN=&quot;9787506341271&quot;)print(book.title)# 将 record 对象转化为 jsonrecord.json()# 删除符合过滤条件的一批记录dst.records.filter(title=None).delete()# 获取字段for field in vika.datasheet(&quot;dstId&quot;).fields.all():  print(field.name)# 获取指定视图的字段，隐藏的字段不会返回for field in vika.datasheet(&quot;dstId&quot;).fields.all(viewId=&quot;viewId&quot;):  print(field.name)# 获取视图for view in vika.datasheet(&quot;dstId&quot;).views.all():  print(view.name)```### 字段映射对于中文用户，表格的字段名通常是中文，虽然 Python 支持中文变量名，但是依然会出现中文字段名不符合变量规范的情况。因此你不得不回退到使用 fieldId 作为 key 的情况，致使代码可读性变差。为了改善这种情况，Python SDK 提供了字段映射的功能。| Bug 标题\!     | Bug 状态 || -------------- | -------- || 登陆后页面崩溃 | 待修复   |```pythondst = vika.datasheet(&quot;dstt3KGCKtp11fgK0t&quot;,field_key_map={  &quot;title&quot;: &quot;Bug 标题!&quot;,  &quot;state&quot;: &quot;Bug状态&quot;,})record = dst.records.get()print(record.title)# &quot;登陆后页面崩溃&quot;print(record.state)# &quot;待修复&quot;record.state=&quot;已修复&quot;```保留使用 field id 作 key 的用法```pythonbug = vika.datasheet(&quot;dstn2lEFltyGHe2j86&quot;, field_key=&quot;id&quot;)row = bug.records.get(flddpSLHEzDPQ=&quot;登陆后页面崩溃&quot;)row.flddpSLHEzDPQ = &quot;登陆后页面崩溃&quot;row.update({    &quot;flddpSLHEzDPQ&quot;: &quot;登陆后页面崩溃&quot;,    &quot;fldwvNDf9teD2&quot;: &quot;已修复&quot;})```指定 `field_key=&quot;id&quot;` 时，再指定 `field_key_map` 对应的键值应该是 `fieldId````pythonbug = vika.datasheet(&quot;dstn2lEFltyGHe2j86&quot;, field_key=&quot;id&quot;, field_key_map={    &quot;title&quot;: &quot;flddpSLHEzDPQ&quot;,    &quot;state&quot;: &quot;fldwvNDf9teD2&quot;,})```## API### 维格表#### records 方法`dst.records` 管理表格中的记录。| 方法             | 参数                  | 返回类型    | 说明                                                                                                   | 例子                                                                                                           || ---------------- | --------------------- | ----------- | ------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------- || create           | dict                  | Record      | 创建单条记录                                                                                           | `dst.records.create({&quot;title&quot;:&quot;new title&quot;})`                                                                    || bulk_create      | dict[]                | Record[]    | 批量创建多条记录                                                                                       | `dst.records.bulk_create([{&quot;title&quot;:&quot;new record1&quot;},{&quot;title&quot;:&quot;new record2&quot;}])`                                   || bulk_update      | dict[]                | Record[]    | 批量更新多条记录                                                                                       | `dst.records.bulk_update([{&quot;recordId&quot;: &quot;recxxxxx1&quot;, &quot;fields&quot;:{&quot;title&quot;: &quot;new record.title from Python SDK&quot;}}])` || all              | \*\*kwargs            | QuerySet    | 返回记录集合,可传参定制返回内容                                                                        | `dst.records.all()`                                                                                            || get              | \*\*kwargs            | Record      | 单条记录                                                                                               | `dst.records.get(title=&quot;new title&quot;)`                                                                           || get_or_create    | (defaults,\*\*kwargs) | Record,bool | 通过 kwargs 查询对应的记录，如果不存在则结合 defaults 创建一条新记录，返回的 bool 表示是否是新建的记录 | `dst.records.get_or_create(title=&quot;new title&quot;,defaults={&quot;status&quot;:&quot;pending&quot;})`                                   || update_or_create | (defaults,\*\*kwargs) | Record,bool | 通过 kwargs 查询对应的记录，并以 defaults 更新记录。不存在则创建（与 get_or_create 一致）              | `dst.records.update_or_create(title=&quot;new title&quot;,defaults={&quot;status&quot;:&quot;done&quot;})`                                   || filter           | \*\*kwargs            | QuerySet    | 过滤一批记录                                                                                           | `dst.records.filter(title=&quot;new title&quot;)`                                                                        |#### QuerySet返回 QuerySet 的方法可以进行链式调用。例如 qs = dst.records.all() 返回了一批查询出来的数据集。| 方法   | 参数     | 返回类型 | 说明                   | 例子                                                              || ------ | -------- | -------- | ---------------------- | ----------------------------------------------------------------- || filter | \*\*dict | QuerySet | 过滤出一批记录         | `qs.filter(title=&quot;new title&quot;)`                           || all    | /        | QuerySet | 返回当前记录集合的拷贝 | `qs.filter(title=&quot;new title&quot;).all()`                     || get    | \*\*dict | Record   | 单条记录               | `qs.get(title=&quot;new title&quot;)`                              || count  | /        | int      | 记录总数               | `qs.filter(title=&quot;new title&quot;).count()`                   || last   | /        | Record   | 最后一条记录           | `qs.filter(title=&quot;new title&quot;).last()`                    || first  | /        | Record   | 第一条记录             | `qs.filter(title=&quot;new title&quot;).first()`                   || update | \*\*dict | Record   | 更新成功的记录数       | `qs.filter(title=&quot;new title&quot;).update(title=&quot;new title&quot;)` || delete | /        | bool     | 是否删除成功           | `qs.filter(title=&quot;new title&quot;).delete()`                  |#### Record查询出来的 QuerySet 是一个 Record 的集合。单个 Record 可以通过 `record.字段名` 的方式获取指定字段的值。**请尽量避免字段名和 Record 保留的方法属性同名，表格中的同名字段会被遮蔽。如果确实存在，请使用字段映射配置**| 方法/属性 | 参数 | 返回类型 | 说明                                     | 例子            || --------- | ---- | -------- | ---------------------------------------- | --------------- || json      | /    | dict     | 返回当前记录的所有字段值                 | `record.json()` || \_id      | /    | str      | \_id 是保留属性，返回当前记录的 recordId | `record._id`    |#### 字段值维格列字段值与 Python 数据结构的映射关系。 维格表中单元格为空的数据始终是 null，API 返回的记录中，不会包含值为 null 的字段。| 维格列类型 | 数据类型            || ---------- | ------------------- || 单行文本   | str                 || 多行文本   | str                 || 单选       | str                 || 多选       | str[]               || 网址       | str                 || 电话       | str                 || 邮箱       | str                 || 数字       | number              || 货币       | number              || 百分比     | number              || 自增数字   | number              || 日期       | number              || 创建时间   | number              || 修改时间   | number              || 附件       | attachment object[] || 成员       | unit object[]       || 勾选       | bool                || 评分       | int                 || 创建人     | unit object         || 修改人     | unit object         || 神奇关联   | str[]               || 神奇引用   | any[]               || 智能公式   | str / bool          |#### all 参数all 方法会自动处理分页加载全部资源_传入分页相关参数（pageNum、pageSize）时，SDK 不会再自动加载全部记录，只返回指定页数据_。&gt; 尽量避免在不加参数的情况下使用 dst.records.all 方法，获取全部数据。&gt; API 每次请求最多获取 1000 条数据，如果你的数据量过大，接近 50000 的限制。在不加任何参数的情况下，调用 all 会串行请求 50 次 API。 不仅非常慢，而且消耗 API 请求额度。_返回指定分页的记录_```pythondst.records.all(pageNum=3)```_搭配视图使用_指定视图 id 返回和视图中相同的数据。```pythondst.records.all(viewId=&quot;viwxxxxxx&quot;)```_使用公式筛选数据_```pythondst.records.all(filterByFormula='{title}=&quot;hello&quot;')```| 参数            | 类型               | 说明                                                                  | 例子                                  || --------------- | ------------------ | --------------------------------------------------------------------- | ------------------------------------- || viewId          | str                | 视图 ID。请求会返回视图中经过视图中筛选/排序后的结果                  |                                       || pageNum         | int                | 默认 1                                                                |                                       || pageSize        | int                | 默认 100 ， 最大 1000                                                 |                                       || sort            | dict[]             | 指定排序的字段，会覆盖视图排序条件                                    | `[{ field: 'field1', order: 'asc' }]` || recordIds       | str[]              | 返回指定 recordId 的记录集                                            | `['recordId1', 'recordId2']`          || fields          | str[]              | 只有指定字段会返回                                                    |                                       || filterByFormula | str                | 使用公式作为筛选条件，返回匹配的记录                                  |                                       || maxRecords      | int                | 限制返回记录数，默认 5000                                             |                                       || cellFormat      | 'json' or 'string' | 默认为 'json'，指定为 'string' 时所有值都将被自动转换为 string 格式。 |                                       || fieldKey        | 'name' or 'id'     | 指定 field 查询和返回的 key。默认使用列名 'name'。                    |                                       |参见：[公式使用方式](https://vika.cn/help/tutorial-getting-started-with-formulas/)### 空间站### 文件目录## 开发测试复制测试模板到自己的空间站，每次测试时，保证表中只有一条 title = &quot;无人生还&quot; 的记录- [正式环境测试模板](https://vika.cn/share/shrTZC8odwrWl95Gil2Dm)- [内部环境测试模板](https://integration.vika.ltd/share/shr2BYKJ5QysFK9YoAws1)```shellcp .env.example .env```配置测试所需的环境变量```shell# 安装依赖pipenv install --prepipenv shellpython -m unittest test```## 更新日志参见: [releases](https://github.com/vikadata/vika.py/releases)## 相关项目- [JavaScript SDK](https://github.com/vikadata/vika.js)- [Golang SDK](https://github.com/vikadata/vika.go)- [Java SDK](https://github.com/vikadata/vika.java)## FAQ### 可以拿到表格的字段类型（meta）信息吗？~~目前不可以，后续 REST API 升级会暴露表格 meta 信息~~可以通过 fields/views 接口获取### 可以自动创建单多选选项吗？```record.tags = [&quot;目前 tags 字段中不存在的选项&quot;]```~~目前不可以，你只能赋值已经存在的选项。后续会支持 :D~~现在已经支持，如果写入不存在的单多选字段，自动创建该选项### 单个表格最大支持多少条记录？目前单表最大支持 5w 条记录### 每次请求可以处理更多的记录吗？目前是 10 条。后续我们会根据实际情况，调整该限制的大小。### 每次请求可以获取更多的记录吗?目前最大值是 1000 条。后续我们会根据实际情况，调整该限制的大小。</longdescription>
</pkgmetadata>