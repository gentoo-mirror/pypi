<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># 1. TL;DR exampleSTEP 1Write this code:# File tests/some_module.py```python@pytest.mark.record_http@pytest.mark.record_time@pytest.mark.record_verify_screendef test_some_test(record):    some_python_object = ...    record.add_verify(object=some_python_object)```STEP 2Run:pytest tests/some_module.py --recordIt will:Save all the  HTTP requestsSave the execution datetimeSave the screen outputSave the data you provide to recorder objectSTEP 3Run:pytest tests/some_module.pyIt will:Reuse the stored HTTP requestsReuse the same datetime to execute the testCompare the current screen output to the previous one and raise and exception if differentCompare the current recorder object data to the previous one and raise and exception if different# 2. Detailed exampleCODE```python@pytest.mark.record_http@pytest.mark.record_time(date=datetime(2023, 3, 1, 12, 0, 0), tic=False)@pytest.mark.record_verify_screen(hash=True)def test_some_test(record):    ...    record.hash_only = True    record.add_verify(object=df)    record.add_verify(object=[df])    recorder.add_verify(        object=df,    )```USAGEpytest [FILE] [--record[=none,all,http,object,screen,time]] [--record-no-overwrite] [--record-no-hash]FILESFor a given test_function from test_module, we will have the following files:/tests/test_module.py:test_function/tests/record/http/test_module/test_function.yaml/tests/record/object/test_module/test_function.json/tests/record/object_hash/test_module/test_function.txt/json?/tests/record/screen/test_module/test_function.txt/json?/tests/record/screen_hash/test_module/test_function.txt/json?/tests/record/time/test_module/test_function.txt/json?</longdescription>
</pkgmetadata>