<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># whatsappy[![Downloads](https://pepy.tech/badge/whatsappy-py)](https://pepy.tech/project/whatsappy-py)Whatsappy is a Python library for creating whatsapp bots.Creator: [Italo Seara](https://github.com/italoseara)## InstallationUse the package manager [pip](https://pip.pypa.io/en/stable/) to install whatsappy.```bashpip install whatsappy-py```## Usage### Basic example:```pythonfrom whatsappy import Whatsappwhatsapp = Whatsapp()whatsapp.login(visible=False) # Login whatsapp (Headless mode)chat = whatsapp.chat('Mom') # Goes to the selected chatchat.send('Hello') # Send a messagewhatsapp.close() # Exit```## 1. Setup```pythonfrom whatsappy import Whatsappwhatsapp = Whatsapp() # Initialize the library```## 2. Login### Input```pythonwhatsapp.login(visible=False, timeout=0)```| Arguments | Type | Default || --------- | ---- | ------- || visible   | bool | False   || timeout   | int  | 0       |P.S: `timeout` should be in seconds### Output![QRCode](https://i.imgur.com/aQjoNdZ.png?1)### After you scan it, you should wait for a message like this:```Successfully logged in```## 3. Close```pythonwhatsapp.close() # Closes the webdriver```## 4.1 Chat### Input```pythonwhatsapp.chat(name=&quot;Mom&quot;) # Opens the conversation```| Arguments | Type | Default || --------- | ---- | ------- || name      | str  | -       |### Output### *Group** Properties  | Property        | Type      | Default |  | --------------- | --------- | ------- |  | name            | str       | &quot;&quot;      |  | description     | str       | &quot;&quot;      |  | profile_picture | str       | None    |  | invite_link     | str       | None    |  | admin           | bool      | False   |  | participants    | List[str] | []      |  | last_message    | Any       | -       |  P.S.: `last_message` will be explained later on* Functions  * `send` -&gt; `None`: Sends a message to the chat        | Arguments | Type | Default |    | --------- | ---- | ------- |    | message   | str  | &quot;&quot;      |    | file      | str  | &quot;&quot;      |    P.S.: `file` shoud be a file path    ```python    group.send(message=&quot;Hi &lt;@Mom&gt;!&quot;, file=&quot;flowers.jpg&quot;) # Use &lt;@Contact Name&gt; to mention someone    ```    * `add` -&gt; `None`: Adds new participants to the group      | Arguments | Type      | Default |    | --------- | --------- | ------- |    | contacts  | List[str] | -       |    ```python    group.add([&quot;Grandma&quot;, &quot;Cousin&quot;])    ```  * `remove` -&gt; `None`: Removes participants from the group      | Arguments | Type      | Default |    | --------- | --------- | ------- |    | contacts  | List[str] | -       |    ```python    group.remove([&quot;Boring Cousin&quot;])    ```  * `promote` -&gt; `None`: Promotes participants to admin    | Arguments | Type      | Default |    | --------- | --------- | ------- |    | contacts  | List[str] | -       |    ```python    group.promote([&quot;Dad&quot;, &quot;Mom&quot;])    ```    * `demote` -&gt; `None`: Demotes participants to member    | Arguments | Type      | Default |    | --------- | --------- | ------- |    | contacts  | List[str] | -       |    ```python    group.demote([&quot;Brother&quot;])    ```    * `leave` -&gt; `None`: Leaves the group    | Arguments | Type | Default |    | --------- | ---- | ------- |    | -         | -    | -       |    ```python    group.leave()    ```### *Contact** Properties    | Property        | Type | Default |  | --------------- | ---- | ------- |  | name            | str  | &quot;&quot;      |  | number          | str  | &quot;&quot;      |  | about           | str  | &quot;&quot;      |  | profile_picture | str  | None    |  | last_message    | Any  | -       |  P.S.: `last_message` will be explained later on* Functions  * `send` -&gt; `None`: Sends a message to the chat        | Arguments | Type | Default |    | --------- | ---- | ------- |    | message   | str  | &quot;&quot;      |    | file      | str  | &quot;&quot;      |    P.S.: `file` shoud be a file path    ```python    group.send(message=&quot;Hi &lt;@Mom&gt;!&quot;, file=&quot;flowers.jpg&quot;) # Use &lt;@Contact Name&gt; to mention someone    ```## 4.2 MessageThe `last_message` property of a chat will return the type of the message (Location, Text, Contact card, etc.) as a class, it can be:### *Text** Properties  | Property     | Type     | Default |  | ------------ | -------- | ------- |  | text         | str      | &quot;&quot;      |  | chat         | Any      | None    |  | author       | str      | None    |  | time         | datetime | None    |  | forwarded    | bool     | False   |  | quote        | Quote    | -       |  | Quote.text   | str      | -       |  | Quote.author | str      | -       |* Functions  * `forward` -&gt; `None`: Forward the message to a list of contacts    | Arguments | Type      | Default |    | --------- | --------- | ------- |    | contacts  | List[str] | -       |    ```python    message.forward([&quot;Mom&quot;, &quot;Grandma&quot;])    ```    * `reply` -&gt; `None`: Reply the message quoting the original one    | Arguments | Type | Default |    | --------- | ---- | ------- |    | message   | str  | &quot;&quot;      |    | file      | str  | &quot;&quot;      |    P.S.: `file` should be a file path    ```python    message.reply(&quot;Wow, that's awesome!&quot;)    ```  * `reply_privately` -&gt; `None`: Reply the message in private chat (Only works on groups)    | Arguments | Type | Default |    | --------- | ---- | ------- |    | message   | str  | &quot;&quot;      |    | file      | str  | &quot;&quot;      |    P.S.: `file` should be a file path        ```python    message.reply_privately(&quot;Long time since i saw you, huh?&quot;)    ```  * `delete` -&gt; `None`: Deletes the message only for you    | Arguments | Type | Default |    | --------- | ---- | ------- |    | -         | -    | -       |    ```python    message.delete()    ```  * `star` -&gt; `None`: Stars the message for you    | Arguments | Type | Default |    | --------- | ---- | ------- |    | -         | -    | -       |    ```python    message.star()    ```### *Document*Inherits all the `Text` properties and functions* Properties  | Arguments     | Type  | Default |  | ------------- | ----- | ------- |  | file          | File  | None    |  | File.size     | int   | 0       |  | File.name     | str   | &quot;&quot;      |  | File.mimetype | str   | &quot;&quot;      |  | File.content  | bytes | b&quot;&quot;     |### *Video*Inherits all the `Text` properties and functions* Properties  | Arguments | Type | Default |  | --------- | ---- | ------- |  | length    | int  | 0       |### *Audio*Inherits all the `Text` properties and functions* Properties  | Arguments    | Type  | Default |  | ------------ | ----- | ------- |  | file         | File  | None    |  | File.size    | int   | 0       |  | File.length  | int   | 0       |  | File.content | bytes | b&quot;&quot;     |  | isrecorded   | bool  | False   |### *ContactCard*Inherits all the `Text` properties and functions* Properties  | Arguments       | Type          | Default |  | --------------- | ------------- | ------- |  | contacts        | List[Contact] | []      |  | Contact.name    | str           | &quot;&quot;      |  | Contact.numbers | List[str]     | []      |### *Location*Inherits all the `Text` properties and functions* Properties  | Arguments | Type  | Default |  | --------- | ----- | ------- |  | coords    | tuple | ()      |  | link      | str   | &quot;&quot;      |### *LiveLocation*Inherits all the `Location` properties and functions* Properties  | Arguments | Type     | Default |  | --------- | -------- | ------- |  | until     | datetime | None    |### *Image*Inherits all the `Text` properties and functions* Properties  | Arguments       | Type  | Default |  | --------------- | ----- | ------- |  | file            | File  | None    |  | File.size       | int   | 0       |  | File.resolution | tuple | ()      |  | File.content    | bytes | b&quot;&quot;     |### *Sticker*Inherits all the `Image` properties and functions* Properties  | Arguments | Type | Default |  | --------- | ---- | ------- |  | -         | -    | -       |## Create a new Group### Input```pythongroup = whatsapp.new_group(    name=&quot;Family Group&quot;,     contacts=[&quot;Mom&quot;, &quot;Dad&quot;, &quot;Grandma&quot;, &quot;+17873375275&quot;])print(group)```### Output```Whatsapp.Group(    name=&quot;Family Group&quot;,     description=&quot;&quot;,     profile_picture=None,     invite_link=&quot;https://chat.whatsapp.com/J6SwpsK5jzq5h0e5Tx3gBu&quot;,    admin=True)```## Change group information### Input```pythongroup = whatsapp.chat(&quot;Family Group&quot;)group.name = &quot;My Family&quot; # Changes group namegroup.description = &quot;This is a family group&quot; # Changes group descriptiongroup.profile_picture = &quot;Family.jpeg&quot; # Changes group profile pictureprint(group)```### Output```Whatsapp.Group(    name=&quot;My Family&quot;,     description=&quot;This is a family group&quot;,     profile_picture=&quot;https://pps.whatsapp.net/v/t61.24694-24/187559880_805785283641101_6215437820834613111_n.jpg?ccb=11-4&amp;oh=01_AVxyUwoLnQVdZ1bxDOx2zhYMWKKRitosP3wH-tILL8JNMw&amp;oe=61F7B127&quot;,     invite_link=&quot;https://chat.whatsapp.com/J6SwpsK5jzq5h0e5Tx3gBu&quot;,    admin=True)```## Get all your contacts### Input```pythoncontacts = whatsapp.contact_list print(contacts)```### Output```[&quot;Mom&quot;, &quot;Dad&quot;, &quot;Cousin&quot;, &quot;Friend&quot;, ...]```## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.Please make sure to update tests as appropriate.## License[MIT](https://github.com/italoseara/whatsappy/blob/main/LICENSE)</longdescription>
</pkgmetadata>