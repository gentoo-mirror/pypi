<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cp2k-input-tools[![Build status](https://github.com/cp2k/cp2k-input-tools/actions/workflows/test.yml/badge.svg)](https://github.com/cp2k/cp2k-input-tools/actions) [![codecov](https://codecov.io/gh/cp2k/cp2k-input-tools/branch/develop/graph/badge.svg)](https://codecov.io/gh/cp2k/cp2k-input-tools) [![PyPI](https://img.shields.io/pypi/pyversions/cp2k-input-tools)](https://pypi.org/project/cp2k-input-tools/)Fully validating pure-python CP2K input file parsers including preprocessing capabilitiesAvailable commands (also available through an API, see below):* `cp2klint` .. a CP2K input file linter* `fromcp2k` .. create a JSON/YAML configuration file or an [AiiDA](https://github.com/aiidateam/aiida-cp2k) run script from a CP2K input file (includes validation)* `tocp2k` .. convert a JSON or YAML configuration back to CP2K's input file format (includes validation)* `cp2kgen` .. generate new input files based on a given input file and expressions to change parameters programmatically* `cp2kget` .. get values from a CP2K input file (most likely a restart file) given a path of sections and attribute* `cp2k-language-server` .. a [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) implementation for the CP2K input file format* `cp2k-datafile-lint` .. linters for other CP2K-related data file formats (like pseudos and basissets)For a description of the JSON/YAML formats used, see below.## Requirements* Python 3.6+* https://pypi.org/project/transitions/* https://pypi.org/project/pint/* optional: https://pypi.org/project/ruamel.yaml/ for YAML support* optional: https://github.com/openlawlibrary/pygls for the cp2k-language-serverFor development: https://poetry.eustace.io/ https://pytest.org/## Idea* have a pure-python CP2K input file linter with proper syntax error reporting (context, etc.)* a final &amp; complete restart file parser* basis for an AiiDA CP2K project importer* testbed for alternative import formats (YAML, JSON) for CP2K* possible testbed for a re-implementation of the CP2K input parser itself## TODOs* parser: improve error reporting with context* preprocessor: don't lose original context when interpolating variables* parser: parsing the XML is slow (easily 70% of the time), pickle or generate Python code directly instead and keep XML parsing as fallback* parser: preserve comments when going to/from YAML# Usage## InstallationYou will get most tools using simply:```console$ pip install cp2k-input-tools```For YAML support you should use```console$ pip install cp2k-input-tools[yaml]```and for the Language Server:```console$ pip install cp2k-input-tools[lsp]```## Command Line InterfaceGenerate JSON, YAML or aiida-cp2k run script from a CP2K input file:```console$ fromcp2k --helpusage: fromcp2k [-h] [-y] [-c] [-b BASE_DIR] [-t TRAFO] &lt;file&gt;Convert CP2K input to JSON (default) or YAMLpositional arguments:  &lt;file&gt;                CP2K input fileoptional arguments:  -h, --help            show this help message and exit  -y, --yaml            output yaml instead of json  -c, --canonical       use the canonical output format  -b BASE_DIR, --base-dir BASE_DIR                        search path used for relative @include's  -t TRAFO, --trafo TRAFO                        transformation applied to key and section names (auto,                        upper, lower)```Generate an [aiida-cp2k](https://github.com/aiidateam/aiida-cp2k) template run script:```console$ fromcp2k --format aiida-cp2k-calc tests/inputs/test01.inpAny key transformation function other than 'auto' is ignored when generating an aiida-cp2k run script templatefrom aiida.engine import runfrom aiida.orm import (load_code, Dict, StructureData)cp2k_code = load_code('...')# Structurestructure = StructureData(...)# Parametersparameters = Dict(    dict={           &quot;FORCE_EVAL&quot;: {               &quot;DFT&quot;: {                   &quot;KPOINTS&quot;: {                       &quot;FULL_GRID&quot;: False,                       &quot;PARALLEL_GROUP_SIZE&quot;: -1,                       &quot;SCHEME&quot;: &quot;MONKHORST-PACK 3 3 3&quot;,                       &quot;SYMMETRY&quot;: False,                   },                   &quot;MGRID&quot;: {                       &quot;CUTOFF&quot;: 1000.0,                       &quot;REL_CUTOFF&quot;: 100.0,                   },                   &quot;POISSON&quot;: {                       &quot;PERIODIC&quot;: &quot;XYZ&quot;,                   },                   &quot;PRINT&quot;: {                       &quot;OVERLAP_CONDITION&quot;: {                           &quot;_&quot;: &quot;ON&quot;,                           &quot;1-NORM&quot;: True,                           &quot;DIAGONALIZATION&quot;: True,                       },                   },                   &quot;QS&quot;: {                       &quot;EPS_DEFAULT&quot;: 1e-16,                       &quot;EXTRAPOLATION&quot;: &quot;USE_GUESS&quot;,                       &quot;METHOD&quot;: &quot;GAPW&quot;,                   },                   &quot;SCF&quot;: {                       &quot;SMEAR&quot;: {                           &quot;_&quot;: True,                           &quot;ELECTRONIC_TEMPERATURE&quot;: 300.0,                           &quot;METHOD&quot;: &quot;FERMI_DIRAC&quot;,                       },                       &quot;ADDED_MOS&quot;: 40,                       &quot;EPS_SCF&quot;: 1e-08,                       &quot;MAX_SCF&quot;: 50,                   },                   &quot;XC&quot;: {                       &quot;XC_FUNCTIONAL&quot;: {                           &quot;_&quot;: &quot;PBE&quot;,                       },                   },                   &quot;BASIS_SET_FILE_NAME&quot;: &quot;./BASIS_SETS&quot;,                   &quot;POTENTIAL_FILE_NAME&quot;: &quot;./POTENTIALS&quot;,               },               &quot;SUBSYS&quot;: {                   &quot;CELL&quot;: {                       &quot;CELL_REF&quot;: {                           &quot;A&quot;: &quot;4.32947291598 0.0 0.0&quot;,                           &quot;B&quot;: &quot;2.16473645799 3.7494335304 0.0&quot;,                           &quot;C&quot;: &quot;2.16473645799 1.24981118034 3.53499983838&quot;,                           &quot;PERIODIC&quot;: &quot;XYZ&quot;,                       },                       &quot;A&quot;: &quot;4.07419 0.0 0.0&quot;,                       &quot;B&quot;: &quot;2.037095 3.52835204 0.0&quot;,                       &quot;C&quot;: &quot;2.037095 1.17611735 3.32656221&quot;,                       &quot;PERIODIC&quot;: &quot;XYZ&quot;,                   },                   &quot;KIND&quot;: [                       {                       &quot;_&quot;: &quot;Ge&quot;,                       &quot;ELEMENT&quot;: &quot;Ge&quot;,                       &quot;POTENTIAL&quot;: &quot;ALL-q32&quot;,                       &quot;BASIS_SET&quot;: &quot;ORB pob-TZVP&quot;,                       },                   ],                   &quot;TOPOLOGY&quot;: {                       &quot;COORD_FILE_NAME&quot;: &quot;./struct.xyz&quot;,                       &quot;COORD_FILE_FORMAT&quot;: &quot;XYZ&quot;,                   },               },               &quot;METHOD&quot;: &quot;QUICKSTEP&quot;,           },           &quot;GLOBAL&quot;: {               &quot;PRINT_LEVEL&quot;: &quot;MEDIUM&quot;,               &quot;PROJECT_NAME&quot;: &quot;fatman.calc&quot;,               &quot;RUN_TYPE&quot;: &quot;ENERGY&quot;,           },    })# Construct process builder.builder = cp2k_code.get_builder()builder.structure = structurebuilder.parameters = parametersbuilder.code = cp2k_codebuilder.metadata.options.resources = {    &quot;num_machines&quot;: 1,    &quot;num_mpiprocs_per_machine&quot;: 1,}builder.metadata.options.max_wallclock_seconds = 1 * 3 * 60run(builder)```Generate a CP2K input file from a JSON or YAML:```console$ tocp2k --helpusage: tocp2k [-h] [-y] &lt;file&gt;Convert JSON or YAML input to CP2Kpositional arguments:  &lt;file&gt;      JSON or YAML input fileoptional arguments:  -h, --help  show this help message and exit  -y, --yaml```Lint a CP2K input file:```console$ cp2klint tests/inputs/unterminated_var.inpSyntax error: unterminated variable, in tests/inputs/unterminated_var.inp:line   36: @IF ${HP               ~~~~^```Generate input files for a `CUTOFF` convergence study (multiple expressions will be combined as a cartesian product):```console$ cp2kgen tests/inputs/NaCl.inp &quot;force_eval/dft/mgrid/cutoff=[800,900,1000]&quot;Writing 'NaCl-cutoff_800.inp'...Writing 'NaCl-cutoff_900.inp'...Writing 'NaCl-cutoff_1000.inp'...$ diff -Naurb NaCl-cutoff_800.inp NaCl-cutoff_900.inp--- NaCl-cutoff_800.inp2019-10-21 18:52:09.994323474 +0200+++ NaCl-cutoff_900.inp2019-10-21 18:52:10.680996641 +0200@@ -69,7 +69,7 @@       POTENTIAL_FILE_NAME ALL_POTENTIALS       &amp;MGRID          REL_CUTOFF 80.0-         CUTOFF 800+         CUTOFF 900          NGRIDS 6       &amp;END MGRID       &amp;XC```Get a value from a CP2K input file, for example a `RESTART` file generated in a cell optimization:```console$ cp2kget tests/inputs/NaCl.inp &quot;force_eval/subsys/cell/a/0&quot;force_eval/subsys/cell/a/0: 5.64123539364476```## APIConvert a CP2K input file to a nested Python dictionary:```pythonfrom cp2k_input_tools.parser import CP2KInputParser, CP2KInputParserSimplifiedcanonical = Falseif canonical:    parser = CP2KInputParser()else:    parser = CP2KInputParserSimplified()with open(&quot;project.inp&quot;) as fhandle:    tree = parser.parse(fhandle)```Convert a nested Python dictionary back to a CP2K input file:```pythonfrom cp2k_input_tools.generator import CP2KInputGeneratorgenerator = CP2KInputGenerator()tree = {&quot;global&quot;: {}}  # ... the input treewith open(&quot;project.inp&quot;, &quot;w&quot;) as fhandle:    for line in generator.line_iter(tree):        fhandle.write(f&quot;{line}\n&quot;)```## Language Server ProtocolThe executable providing the language server is: `cp2k-language-server`For `vim` you need a plugin to be able to use language servers. One such plugin is [ALE](https://github.com/dense-analysis/ale) for which you can create in its directory the file `ale_linters/cp2k/language_server.vim` with the content```vimcall ale#Set('cp2k_lsp_executable', 'cp2k-language-server')function! ale_linters#cp2k#language_server#GetProjectRoot(buffer) abort    let l:git_path = ale#path#FindNearestDirectory(a:buffer, '.git')    return !empty(l:git_path) ? fnamemodify(l:git_path, ':h:h') : ''endfunctioncall ale#linter#Define('cp2k', {\   'name': 'language_server',\   'lsp': 'stdio',\   'executable': {b -&gt; ale#Var(b, 'cp2k_lsp_executable')},\   'project_root': function('ale_linters#cp2k#language_server#GetProjectRoot'),\   'command': '%e',\})```Afterwards you must set the filetype when editing a CP2K input file to `cp2k` to get it running. This can be done explicitly using `:set filetype=cp2k`.# The CP2K JSON and YAML formatsA reference to the CP2K input format can be found here: https://manual.cp2k.org/## Canonical formatFor everything except the pre-processor capabilities (`@IF/@ENDIF/$var/@SET`) there is a canonical one-to-one mapping of the CP2K input format to either JSON or YAML:* repeatable sections are mapped to dictionaries* keywords or subsections are key/value entries in sections* all repeatable elements (sections and keywords) are mapped to lists of their respective mapped datatype* section parameters are mapped to a special key named `_`* default section keywords are mapped to a special key name `*`* sections in JSON or YAML must be prefixed to avoid double definition of a key in case of same name for a section and a keyword (like the `POTENTIAL` in `KIND`), to avoid quotation marks, instead of CP2K's `&amp;` we are using the `+`* keyword values are mapped based on their datatypes: a list of values is always mapped to a list of their respective datatypesThe following example input:```&amp;GLOBAL   PRINT_LEVEL MEDIUM   PROJECT test   RUN_TYPE ENERGY&amp;END GLOBAL&amp;FORCE_EVAL   METHOD Quickstep   &amp;DFT      BASIS_SET_FILE_NAME &quot;./BASIS_SETS&quot;      POTENTIAL_FILE_NAME ./POTENTIALS      &amp;XC         &amp;XC_FUNCTIONAL PBE         &amp;END XC_FUNCTIONAL      &amp;END XC   &amp;END DFT   &amp;SUBSYS      &amp;CELL         A [angstrom] 4.07419 0.0 0.0         B [angstrom] 2.037095 3.52835204 0.0         C [angstrom] 2.037095 1.17611735 3.32656221         PERIODIC XYZ      &amp;END CELL      &amp;KIND Ge         ELEMENT Ge         POTENTIAL ALL-q32         BASIS_SET ORB pob-TZVP      &amp;END KIND      &amp;TOPOLOGY         COORD_FILE ./struct.xyz         COORD_FILE_FORMAT XYZ      &amp;END TOPOLOGY   &amp;END SUBSYS&amp;END FORCE_EVAL```would generate the (canonical) JSON:```json{  &quot;+global&quot;: {    &quot;print_level&quot;: &quot;medium&quot;,    &quot;project_name&quot;: &quot;test&quot;,    &quot;run_type&quot;: &quot;energy&quot;  },  &quot;+force_eval&quot;: [    {      &quot;method&quot;: &quot;quickstep&quot;,      &quot;+DFT&quot;: {        &quot;basis_set_file_name&quot;: [          &quot;./BASIS_SETS&quot;        ],        &quot;potential_file_name&quot;: &quot;./POTENTIALS&quot;      },      &quot;+XC&quot;: {        &quot;+xc_functional&quot;: {          &quot;_&quot;: &quot;PBE&quot;        }      },      &quot;+subsys&quot;: {        &quot;cell&quot;: {          &quot;A&quot;: [ 4.07419, 0, 0 ],          &quot;B&quot;: [ 2.037095, 3.52835204, 0 ],          &quot;C&quot;: [ 2.037095, 1.17611735, 3.32656221 ],          &quot;periodic&quot;: &quot;XYZ&quot;        },        &quot;+kind&quot;: [          {            &quot;_&quot;: &quot;Ge&quot;,            &quot;element&quot;: &quot;Ge&quot;,            &quot;potential&quot;: &quot;ALL-q32&quot;,            &quot;basis_set&quot;: [              [ &quot;ORB&quot;, &quot;pob-TZVP&quot; ]            ]          }          ],        &quot;+topology&quot;: {          &quot;coord_file_name&quot;: &quot;./struct.xyz&quot;,          &quot;coord_file_format&quot;: &quot;XYZ&quot;        }      }    }  ]}```*Caveats*:* the full input format needs be known and is being loaded from a bundled `cp2k_input.xml`* the YAML/JSON is quiet verbose and one has to know exactly which keywords can be repeatedWhile there is no solution to remedy the first caveat, the second can be solved with the simplified output format## Simplified formatStill based on the canonical format the simplified format relaxes some of the rules1. a section must only be prefixed with a `+` if a keyword with the same name is present at the same time in the same section (since we can figure out whether the user wanted to specify the section or the keyword by inspecting the value for the key: `dict` for a section)2. if a repeated keyword or section contains only one entry, the list can be omitted (in case of ambiguity priority is given to multiple values per keyword rather than keyword repetition)3. sections with default parameters can be formulated as dictionaries, as long as the default parameter values are unique and do not match section keyword or subsection namesthe example from before in the simplified format:```json{  &quot;global&quot;: {    &quot;print_level&quot;: &quot;medium&quot;,    &quot;project_name&quot;: &quot;test&quot;,    &quot;run_type&quot;: &quot;energy&quot;  },  &quot;force_eval&quot;: {    &quot;method&quot;: &quot;quickstep&quot;,    &quot;DFT&quot;: {      &quot;basis_set_file_name&quot;: &quot;./BASIS_SETS&quot;,      &quot;potential_file_name&quot;: &quot;./POTENTIALS&quot;    },    &quot;xc&quot;: {      &quot;xc_functional&quot;: {        &quot;_&quot;: &quot;PBE&quot;      }    },    &quot;subsys&quot;: {      &quot;cell&quot;: {        &quot;A&quot;: [ 4.07419, 0, 0 ],        &quot;B&quot;: [ 2.037095, 3.52835204, 0 ],        &quot;C&quot;: [ 2.037095, 1.17611735, 3.32656221 ],        &quot;periodic&quot;: &quot;XYZ&quot;      },      &quot;kind&quot;: {        &quot;_&quot;: &quot;Ge&quot;,        &quot;element&quot;: &quot;Ge&quot;,        &quot;potential&quot;: &quot;ALL-q32&quot;,        &quot;basis_set&quot;: [ &quot;ORB&quot;, &quot;pob-TZVP&quot; ]      },      &quot;topology&quot;: {        &quot;coord_file_name&quot;: &quot;./struct.xyz&quot;,        &quot;coord_file_format&quot;: &quot;XYZ&quot;      }    }  }}```or in YAML (with simplification rule #3 applied):```yamlglobal:  print_level: medium  project_name: test  run_type: energyforce_eval:  DFT:    basis_set_file_name: ./BASIS_SETS    potential_file_name: ./POTENTIALS  XC:    xc_functional:      _: PBE  # this can NOT be simplified since PBE could also be a subsection of xc_functional  method: quickstep  subsys:    cell:      A: [ 4.07419, 0.0, 0.0]      B: [ 2.037095, 3.52835204, 0.0]      C: [ 2.037095, 1.17611735, 3.32656221]      periodic: XYZ    kind:      Ge:        basis_set: [ORB, pob-TZVP]        element: Ge        potential: ALL-q32    topology:      coord_file_format: XYZ      coord_file_name: ./struct.xyz```</longdescription>
</pkgmetadata>