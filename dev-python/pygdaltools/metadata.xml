<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pygdaltoolsPython library providing wrappers for the most common Gdal/OGR command line tools. Currently, ogr2ogr, ogrinfo, gdalinfo and gdalsrsinfo are supported.Note that this library requires GDAL/OGR tools to be installed in the system.## Installation```pip install pygdaltools```This command does not automatically install GDAL/OGR tools in your system.In Debian or Ubuntu you can install them by using:```apt-get install gdal-bin```In CentOS:```yum -y install gdal```For Windows, you can install GDAL/OGR by using [OSGeo4W](https://trac.osgeo.org/osgeo4w/).You will also need to see the [Configuration section](#configuration).## UsageGdalinfo:```import gdaltoolsinfo = gdaltools.gdalinfo(&quot;/mypath/myraster.tif&quot;)print info # output is the same generated by the gdalinfo command```Raster stats:```stats = gdaltools.get_raster_stats(&quot;/mypath/myraster.tif&quot;)print stats[0]# outputs a tuple: (band0_min, band0_max, band0_mean, band0_stdev)print stats[1]# outputs a tuple: (band1_min, band1_max, band1_mean, band1_stdev)```Ogrinfo:```# Basic usage:info = gdaltools.ogrinfo(&quot;thelayer.shp&quot;, &quot;thelayer&quot;, geom=False)print info # output is the same generated by the ogrinfo command# Other examples:ogrinfo(&quot;thedb.sqlite&quot;)gdaltools.ogrinfo(&quot;thedb.sqlite&quot;, &quot;layer1&quot;, &quot;layer2&quot;, geom=&quot;SUMMARY&quot;)gdaltools.ogrinfo(&quot;thedb.sqlite&quot;, sql=&quot;SELECT UpdateLayerStatistics()&quot;)```Ogr2ogr. From shp to geojson:```ogr = gdaltools.ogr2ogr()ogr.set_encoding(&quot;UTF-8&quot;)ogr.set_input(&quot;mylayer.shp&quot;, srs=&quot;EPSG:4326&quot;)ogr.set_output(&quot;mylayer.geojson&quot;)ogr.execute()```It can also be chained in a single line:```gdaltools.ogr2ogr()\  .set_encoding(&quot;UTF-8&quot;)\  .set_input(&quot;mylayer.shp&quot;, srs=&quot;EPSG:4326&quot;)\  .set_output(&quot;mylayer.geojson&quot;).execute()```Ogr2ogr. From postgis to shp:```ogr = gdaltools.ogr2ogr()conn = gdaltools.PgConnectionString(host=&quot;localhost&quot;, port=5432, dbname=&quot;scolab&quot;, schema=&quot;data&quot;, user=&quot;myuser&quot;, password=&quot;mypass&quot;)ogr.set_input(conn, table_name=&quot;roads&quot;, srs=&quot;EPSG:4326&quot;)ogr.set_output(&quot;mylayer.shp&quot;)ogr.execute()```Ogr2ogr. From postgis to spatialite, specifying a different output table name:```ogr = gdaltools.ogr2ogr()conn = gdaltools.PgConnectionString(host=&quot;localhost&quot;, port=5432, dbname=&quot;scolab&quot;, schema=&quot;data&quot;, user=&quot;myuser&quot;, password=&quot;mypass&quot;)ogr.set_input(conn, table_name=&quot;roads&quot;, srs=&quot;EPSG:4326&quot;)ogr.set_output(&quot;mydb.sqlite&quot;, table_name=&quot;roads2010&quot;)ogr.set_output_mode(data_source_mode=ogr.MODE_DS_CREATE_OR_UPDATE) # required to add the layer to an existing DBogr.execute()```Ogr2ogr. From postgis to spatialite, reprojecting to &quot;EPSG:25830&quot;:```ogr = gdaltools.ogr2ogr()conn = gdaltools.PgConnectionString(host=&quot;localhost&quot;, port=5432, dbname=&quot;scolab&quot;, schema=&quot;data&quot;, user=&quot;myuser&quot;, password=&quot;mypass&quot;)ogr.set_input(conn, table_name=&quot;roads&quot;, srs=&quot;EPSG:4326&quot;)ogr.set_output(&quot;mydb.sqlite&quot;, srs=&quot;EPSG:25830&quot;)ogr.execute()```## ConfigurationBy default, gdaltools assumes that Gdal/Ogr commands are installed under /usr/bin/ (the standard Linux path).In order to configure specific paths (for instance for using the library in Windows), you can use:```import gdaltoolsgdaltools.Wrapper.BASEPATH = &quot;C/Program Files/Gdal/bin&quot;print gdaltools.gdalinfo(&quot;mywindowsraster.tif&quot;)```You can also use lower level API for setting the full path for specific commands:```info = gdaltools.GdalInfo(command_path=&quot;C/Program Files/Gdal/bin/gdalinfo.exe&quot;)info.set_input('mywindowsraster.tif')print info.execute()print info.get_raster_stats()```## FAQNobody asked yet, but just in case.Q - Why don't you use the Python GDAL/OGR API?  A - The GDAL/OGR command line tools perform very specific, higher-level tasks, whilethe Python GDAL/OGR API offers a much lower level API. Therefore, in this library wetry to offer this higher level functionality using a programmer-friendly interface.Q - But why do you internally call the command line tools, instead of implementingeach command using the Python GDAL/OGR API?  A - We believe it would take us more time to write the library using the API instead of the CLI.It also has some advantages: 1) it can use different versions of GDAL/OGR in the same computer2) it does not require having Python GDAL bindings installed.In any case, we can try &quot;the API way&quot; if you are willing to fund it ;-)Q - Why don't you use the sample Python implementation of these commands that are included in the GDAL Python bindings?  A - They can be used, the library allows specifying the path to the command to use.## AuthorsCesar Martinez Izquierdo - [Scolab](http://scolab.es)</longdescription>
</pkgmetadata>