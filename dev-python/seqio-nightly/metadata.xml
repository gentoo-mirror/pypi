<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SeqIO*Task-based datasets, preprocessing, and evaluation for sequence models**Go to [SeqIO ReadTheDocs Documentation Page](https://seqio.readthedocs.io/).*## Overview**SeqIO** is a library for processing sequential data to be fed into downstreamsequence models. It uses [`tf.data.Dataset`](https://www.tensorflow.org/api_docs/python/tf/data/Dataset)to create scalable data pipelines but requires minimal use of TensorFlow. Inparticular, with one line of code, the returned dataset can be transformed to anumpy iterator and hence it is fully compatible with other frameworks such as[JAX](https://github.com/google/jax) or[PyTorch](https://pytorch.org/).SeqIO assumes that the dataset is a sequence. Modalities such as text or audioare naturally supported. Images are supported as long as they are represented assequences (e.g., [Image GPT](http://proceedings.mlr.press/v119/chen20s.html)).SeqIO is a refactor of the[`t5.data`](https://github.com/google-research/text-to-text-transfer-transformer/)library used (in conjunction with the[Mesh Tensorflow](https://github.com/tensorflow/mesh) Transformerimplementation) to train the T5 models introduced in [*Exploring the Limits ofTransfer Learning with a Unified Text-to-TextTransformer*](https://arxiv.org/abs/1910.10683).If you have used `t5.data` in the past and want to know how SeqIO differs,please read [this section](#differences-from-t5data).## Installation### From Pypi```shpip install seqio```### From Source```shgit clone https://github.com/google/seqio.gitcd seqiopip install -e .```## Usage TutorialAt a high level, we use SeqIO with the following steps.1.  Define a `Task` (and optionally a `Mixture`).1.  Define (or use an existing) a `FeatureConverter` based on the model    architecture.1.  Use the top-level function `seqio.get_dataset` to obtain the    `tf.data.Dataset` instance.We will look at each of these steps in detail.### Defining a `Task`The most important class in SeqIO is the `Task`. It is an abstraction that combines:  * a raw *data source*  * one or more *preprocessing* steps  * a *vocabulary* to tokenize/detokenize each preprocessed feature for the model  * a *postprocessor* to convert detokenized model outputs into a format for evaluation  * one or more *metrics* to evaluate withOftentimes a `Task` lines up with a common benchmark. In this tutorial, we use[WMT 19 English-German](http://www.statmt.org/wmt19/translation-task.html) machinetranslation task. In the end, our `Task` will look like this:```pyseqio.TaskRegistry.add(    &quot;wmt19_ende&quot;,    seqio.TfdsDataSource(tfds_name=&quot;wmt19_translate/de-en:1.0.0&quot;),    preprocessors=[        functools.partial(            translate, source_language='en', target_language='de'),        seqio.preprocessors.tokenize, seqio.preprocessors.append_eos    ],    output_features={        'inputs':            seqio.Feature(                seqio.SentencePieceVocabulary('/path/to/inputs/vocab'),                add_eos=False,                dtype=tf.int32),        'targets':            seqio.Feature(                seqio.SentencePieceVocabulary('/path/to/targets/vocab'),                add_eos=True,                dtype=tf.int32),    },    metric_fns=[bleu])```We typically add the `Task` to the global registry when we define it (as shownabove) to make it easier to use with model configs and flags. Thus, it  musthave a unique string name (`&quot;wmt19_ende&quot;` in this case). Note, however, thatyou may also instantiate a `seqio.Task` directly without adding it to theregistry, if desired.We'll now break down each part of the task definition.#### Data SourceData sources are the first step in your pipeline, providing a way to load rawdata in many formats as a `tf.data.Dataset`.All data sources are subclasses of the `DataSource` base class and are defined in[dataset_providers](https://github.com/google/seqio/tree/main/seqio/dataset_providers.py),Existing implementations include:  * `TfdsDataSource` for loading examples from [TensorFlow Datasets](https://www.tensorflow.org/datasets).  * `TextLineDataSource` for loading examples from text files (e.g., tsv).  * `TFExampleDataSource` for loading [`tf.train.Example`](https://www.tensorflow.org/tutorials/load_data/tfrecord) protos from a file (e.g. a `TFRecord` file.)  * `FunctionDataSource` for providing an custom function that returns a `tf.data.Dataset`.In our example, we are using the `TfdsDataSource`. We specify the name of the WMT dataset in TFDS ([`&quot;wmt19_translate&quot;`](https://www.tensorflow.org/datasets/catalog/wmt19_translate)), the specific config for the language pair that excludes the context for the open domain setting (`&quot;de-en&quot;`), and the version number (`&quot;1.0.0&quot;`).#### Output FeaturesThe `output_features` field expects a dictionary that maps string feature namesto `seqio.Feature` objects. This defines what the `Task` is expected to producein its output examples. The output examples *may* contain additional fields, butthey *must* contain these fields in the specified format or exceptions will beraised.Each `Feature` includes:*   A `vocabulary`, which must subclass    [`seqio.Vocabulary`](https://github.com/google/seqio/tree/main/seqio/vocabularies.py),    to specify how the feature can be tokenized and detokenized. You may use    `seqio.PassThroughVocabulary` if tokenization is not necessary.*   `add_eos`, which specifies whether the feature should end with the    vocabulary's EOS token.*   The output `dtype` which must be a `tf.dtypes.DType`.**Note:** specifying these options on `Feature` does not by itself ensure theproper transformations are applied -- you must also include the necessarypreprocessors.The [tasks used in T5](TODO) all produce &quot;inputs&quot; and &quot;targets&quot; features to beconsumed by the text-to-text model. For a decoder-only language model, only asingle feature (e.g., &quot;targets&quot;) would be necessary. Nevertheless, SeqIO isflexible enough to generate arbitrary output features what will be convertedinto model features by the [`FeatureConverter`](#featureconverter) later in thepipeline.#### PreprocessorsPreprocessors are functions that transform one `tf.data.Dataset` into a new`tf.data.Dataset`. Typically this involves executing a `map` over the givendataset. The preprocessors provided to the `Task` will be executed sequentially.As an example, let's look at the previously undefined `translate` from the&quot;wmt19_ende&quot; example above.```pydef translate(dataset: tf.data.Dataset,              source_language: str,              target_language: str) -&gt; tf.data.Dataset:  def _translate(ex: Mapping[str, tf.Tensor]) -&gt; Mapping[str, tf.Tensor]:    &quot;&quot;&quot;Convert a translation example to a text2text pair.    For example, say the dataset returns examples of this format:      {'de': 'Das ist gut.', 'en': 'That is good.'}    If source_language = 'de', target_language = 'en', then the outputs will have    the format:      {'inputs': 'translate de to en: Das ist gut.',      'targets': 'That is good.'}    Args:      ex: an example to process.      source_language: source language code (e.g. 'en') to translate from.      target_language: target language code (e.g. 'de') to translate to.    Returns:      A preprocessed example with the format listed above.    &quot;&quot;&quot;    src_str = f'translate {source_language}'    tgt_str = f' to {target_language}: '    return {        'inputs': tf.strings.join([src_str, tgt_str, ex[source_language]]),        'targets': ex[target_language],    }  return dataset.map(_translate,                     num_parallel_calls=tf.data.experimental.AUTOTUNE)```The TFDS dataset provides the dataset where each example has the form: `{'de':'Das ist gut.', 'en': 'That is good.'}`. We convert this to &quot;inputs&quot; and&quot;targets&quot; with the appropriate prompt to inform the model of the task.A few **important** notes:1.  When instantiating a `Task`, the preprocessor functions can have the    following arguments: `dataset`, `output_features`, and `sequence_length`.    The first (positional) dataset argument is always required. If an argument    named `output_features` is provided, the    [output feature mapping](#output-features) will be passed to the    preprocessor. If `sequence_length` is provided, a mapping from feature name    to its *maximum* final sequence length    ([provided by the caller](#getting-a-preprocessed-dataset)) will be    passed -- any sequences that are too long after preprocessing will be    automatically truncated. If a preprocessor function does have other    arguments, they must have default values or be bound (e.g., with    `functools.partial` as used in `translate`) before instantiating the `Task`.1.  Mapping functions operate on and return `tf.Tensor`s using TensorFlow    operations. This is more flexible than it may sound:    *   Automatic        [AutoGraph](https://www.tensorflow.org/guide/function#autograph_transformations)        conversion allow you to write python control flow in your        transformations.    *   [tf.experimental.numpy](https://www.tensorflow.org/guide/tf_numpy)        provides a numpy interface.    *   [`tf.py_function`](https://www.tensorflow.org/api_docs/python/tf/py_function)        allows you to wrap arbitrary Python code. Note: `tf.data` pipelines        using this function can only be run in the python process where they        were defined, and performance is limited by the python GIL.    See `tf.data.Dataset`    [documentation](https://www.tensorflow.org/api_docs/python/tf/data/Dataset)    for more details.1.  When calling `map`, it is important to **always** set    `num_parallel_calls=tf.data.experimental.AUTOTUNE` to avoid creating a    bottleneck. The `seqio.map_over_dataset` decorator helps enforce this as    follows.    ```py    @seqio.map_over_dataset    def translate(ex: Mapping[str, tf.Tensor],                  source_language: str,                  target_language: str) -&gt; Mapping[str, tf.Tensor]:      &quot;&quot;&quot;Convert a translation dataset to a text2text pair.      For example, say the dataset returns examples of this format:        {'de': 'Das ist gut.', 'en': 'That is good.'}      If source_language = 'de', target_language = 'en', then the outputs will have      the format:        {'inputs': 'translate German to English: Das ist gut.',        'targets': 'That is good.'}      Args:        ex: an example to process.        source_language: source language code (e.g. 'en') to translate from.        target_language: target language code (e.g. 'de') to translate to.      Returns:        A preprocessed example with the format listed above.      &quot;&quot;&quot;      src_str = f'translate {source_language}'      tgt_str = f' to {target_language}: '      return {          'inputs': tf.strings.join([src_str, tgt_str, ex[source_language]]),          'targets': ex[target_language],      }    ```    Note that `translate` takes as input an individual example. Then    `seqio.map_over_dataset` decorates it to a function that takes in a    `tf.data.Dataset` instance.1.  Stochastic operations must be    [stateless](https://www.tensorflow.org/guide/random_numbers#stateless_rngs)    if deterministic pipelines are needed. To get (optionally deterministic)    seeds for these operations, use the `seqio.map_over_dataset(num_seeds=n)`    decorator. For example:    ```py    def random_chunk(      dataset: tf.data.Dataset,      sequence_length: Mapping[str, int]    ) -&gt; tf.data.Dataset:    &quot;&quot;&quot;Takes a random chunk out of each feature the size of `sequence_length`.&quot;&quot;&quot;      @seqio.map_over_dataset(num_seeds=1)      def take_chunk(          ex: Mapping[str, tf.Tensor],          seed      ) -&gt; Mapping[str, tf.Tensor]:        new_ex = {}        for k, v in ex.items():          if k in sequence_length:            length = sequence_length[k]            start_idx = tf.random.stateless_uniform(               (), seed, 0, tf.size(v) - (length + 1))            new_ex[k] = v[start_idx:start_idx+length]          else:            new_ex[k] = v        return new_ex    return take_chunk(dataset)    ```    If `num_seeds &gt; 1`, the arg will instead be called `seeds` and will contain    a sequence of seeds.In our &quot;wmt_19_ende&quot; task, we also use the predefined preprocessors`seqio.preprocessors.tokenize` and `seqio.preprocessors.append_eos`. The formeruses each `Feature.vocabulary` to tokenize it, and the the latter appends`Feature.vocabulary.eos_id` to the feature if the `Feaure.add_eos` is True. See[preprocessors.py](https://github.com/google/seqio/tree/main/seqio/preprocessors.py) fortheir implementations and other useful preprocessors.#### PostprocessorDuring evaluation, the model outputs are first detokenized using the outputfeature vocabulary. Before passing these predictions to the metric functions,they can be run through a Python postprocessing function, alongside the fullinput example. Similarly, the raw targets are run through this function beforebeing passed to the metrics. Since the postprocess function is used on both themodel output and the targets, it is passed an `is_target` boolean in case thebehavior should be different. It is also passed the fully preprocessed example,including fields that were excluded from `output_features`.For the &quot;wmt19_ende&quot;, we don't need any postprocessors. See &quot;trivia_qa_open&quot;task in the [Advanced Postprocessing `Task`](#advanced-postprocessing-task) foran example postprocessor.#### MetricsMetrics are functions that are passed (by the [Evaluator](#evaluator)) thefully-materialized list of postprocessed model outputs (or scores) and targetsand return a mapping from string names to `MetricValue` objects containing theirvalues. These are most commonly floating-point scalars, but may also be text,images, audio, histograms, etc (see[metrics.py](https://github.com/google/seqio/tree/main/seqio/metrics.py) for the full list).The first argument of a metric function must always be called `targets`. If thesecond argument of a metric function is called `predictions`, it will be passedthe decoded and detokenized model prediction. If it is called `scores`, it willbe passed a list of log-likelihood scores for each example.If multiple metric functions are provided, they will all be used and theirreturned mappings merged.##### Prediction MetricsPrediction metrics are computed using the postprocessed targets and modeloutputs (predictions). The args must be named `targets` and `predictions`.Let's look at the metric function used for &quot;wmt19_ende&quot; task. A standard metricfor the translation task is BLEU and we use `sacrebleu` implementation.```pydef bleu(targets: Sequence[str], predictions: Sequence[str]):  &quot;&quot;&quot;Computes BLEU score.  Args:    targets: list of strings or list of list of strings if multiple references      are present.    predictions: list of strings  Returns:    bleu_score across all targets and predictions  &quot;&quot;&quot;  if isinstance(targets[0], list):    targets = [[x for x in target] for target in targets]  else:    # Need to wrap targets in another list for corpus_bleu.    targets = [targets]  bleu_score = sacrebleu.corpus_bleu(predictions, targets,                                     smooth_method=&quot;exp&quot;,                                     smooth_value=0.0,                                     force=False,                                     lowercase=False,                                     tokenize=&quot;intl&quot;,                                     use_effective_order=False)  return {&quot;bleu&quot;: bleu_score.score}```##### Score MetricsScore metrics are computed using the postprocessed targets and theirlog-likelihood scores according to the model. The args must be named `targets`and `scores`.```pydef perplexity(targets: Sequence[str], scores: Sequence[int]):  return {    &quot;perplexity&quot;: seqio.metrics.Scalar(np.exp(np.mean(scores)))  }```### Defining a `Mixture`Once you have multiple `Task`s added to the `TaskRegistry`, you can define`Mixture`s that will combine the examples from them according to some specifiedrate. Examples will then be sampled from each task in proportion to its rate.As an example, [Multilingual T5](goo.gle/mt5) uses a `Mixture` of per-language`Task`s with tail languages up-weighted in the mixture.There are 3 ways to specify the tasks and their rates:1.  Provide a rate along with each task's name (rates are normalized before    sampling). In this example, the rates provided are units of the final    mixture that come from the component tasks. Here, 1/(1+7) of the final    mixture will come from &quot;task1&quot;.    ```py    seqio.MixtureRegistry.add(      &quot;mix1&quot;,      [(&quot;task1&quot;, 1), (&quot;task2&quot;, 7)]    )    ```1.  Provide a constant default rate for some or all tasks, which will be used    when only the name is provided. The example below will produce identical    mixing rates as the previous one.    ```py    seqio.MixtureRegistry.add(      &quot;mix1&quot;,      [(&quot;task1&quot;, 0.5), &quot;task2&quot;],      default_rate=3.5    )    ```1.  Provide a function that generates the rate for each task at runtime. The    example below uses the provided    [`seqio.mixing_rate_num_examples`](https://github.com/google/seqio/tree/main/seqio/utils.py),    which uses the number of examples (computed during    [offline caching](#optional-offline-caching)) as the rate for each task.    ```py    seqio.MixtureRegistry.add(      &quot;mix2&quot;,      [&quot;task1&quot;, &quot;task2&quot;],      default_rate=seqio.mixing_rate_num_examples    )    ```You can also include `Mixture`s in your `Mixture`! For example, the followingtask would contain 1/24 (from &quot;mix1&quot;) + 1/3 &quot;task1&quot;, 7/24 (from &quot;mix1&quot;) of&quot;task2&quot;, and 1/3 &quot;task3&quot;.```pyseqio.MixtureRegistry.add(  &quot;mix3&quot;,  [&quot;mix1&quot;, &quot;task1&quot;, &quot;task3&quot;],  default_rate=1)```If sampling without replacement is important for your task, you can achieve thatby using either deterministic tasks or using dataset checkpointing (and notrunning more than an epoch) for a non-deterministic task. Otherwise, the mixturemay sample with replacement.### Getting a Preprocessed DatasetNow that your `Task` (and/or `Mixture`) is defined, its primary functionality isto use it to generate a dataset.You may first need to use `seqio.get_mixture_or_task(mixture_or_task_name)` toaccess your dataset provider from the registry.After that, you can call `get_dataset` to build the `tf.data.Dataset`. Forexample:```pydataset = seqio.get_mixture_or_task(&quot;mix1&quot;).get_dataset(    sequence_length={&quot;inputs&quot;: 256, &quot;targets&quot;: 128},    split=&quot;train&quot;,    shuffle=True,    num_epochs=1,    shard_info=seqio.ShardInfo(index=0, num_shards=10),    use_cached=False,    seed=42)# Print the first 5 examples.for _, ex in zip(range(5), dataset.as_numpy_iterator()):  print(ex)```Some notes on a few the arguments:*   `sequence_length`: An *optional* mapping from feature name to *maximum*    length. Will be passed to the preprocessors with a `sequence_length`    argument. If not `None`, the final example features will be truncated if    they exceed the specified length. Note that this value may be required to be    set if any of the preprocessors use the `sequence_length` argument and do    not handle the `None` case.*   `num_epochs`: The number of times to repeat the source dataset.    Preprocessing will be re-applied with new seeds to enable new samples from    stochastic steps. Note that if the `CacheDatasetPlaceholder` is included    (see below) preprocessing is only re-applied after that step.*   `shard_info`: An optional sharding specification for loading a deterministic    subset of the dataset. Loading will be most efficient if the number of    shards evenly divides the number of shards in the raw data source.*   `use_cached`: Specifies whether to load from a pre-cached task for increased    performance or to do the preprocessing on-the-fly. See the    [following section](#optional-offline-caching) for details on how to cache    your task, which must be done before this can be set to `True`.*   `seed`: An optional seed to use for deterministic shuffling and (stateless)    stochastic ops. These operations will still be pseudorandom but will be    reproducible with the same seed. Set to `None` if determinism is not    desired.### (Optional) Offline CachingFor improved performance at load time and avoid redundant computations forcommonly used tasks, you can pre-cache your `Task` with all or part of thepreprocessing done in advance of training.The first step to doing so is to add a`seqio.CacheDatasetPlaceholder(required=False)` as one of the steps in yourpreprocessing pipeline. All steps before the placeholder will be cached offlineand all steps after will be executed on the fly at load time. You may set`required=True` if you want `get_dataset` to fail unless `use_cached=True`.Caveats:*   Any stochastic operations that you wish to be re-run when `num_epochs &gt; 1`    or with a different `seed` *should* go after the placeholder since only a    single sample will be cached.*   Any preprocessing steps that use the `sequence_length` argument *must* come    after the `seqio.CacheDatasetPlaceholder` preprocessor since this is only    known at runtime, or an exception will be raised. If you wish to cache for a    specific sequence length, you can use    [`seqio.experimental.add_fully_cached_task`](https://github.com/google/seqio/tree/main/seqio/experimental.py).Once your `Task` is registered, you can run[`cache_tasks_main`](https://github.com/google/seqio/tree/main/seqio/scripts/cache_tasks_main.py)to execute the offline preprocessing, providing it with the module containingyour task definitions via the `--module_import` flag. For very large datasets,it's recommended you run this [Apache Beam](https://beam.apache.org/) script ona distributed framework like[Google Cloud DataFlow](https://beam.apache.org/documentation/runners/dataflow/).Finally, you are ready to load the cached version of your `Task` (or `Mixture`)containing it. You will need to add the path to the directory you passed to`--output_cache_dir` via `seqio.add_global_cache_dirs([&quot;/my/cache/dir&quot;])`. Nowwhen you call `task_or_mixture.get_dataset(..., use_cached=True)`, the data willbe loaded from the cache directory instead of the raw data source.### Feature ConvertersThe role of `Task` is to provide the dataset object with as littlemodel-specific features (e.g., generic &quot;inputs&quot; and &quot;targets&quot;) while the FeatureConverters transform the model-agnostic features to model-specific features(e.g., &quot;encoder_input_tokens&quot;). We refer to the former as &quot;task features&quot; andthe latter as &quot;model features&quot;.Let's use machine translation (English to German) as a running example.The raw data consists of sentence pairs such as```&quot;That is good\tDas ist gut.&quot;```A task registered to `Task` (e.g.,[wmt_t2t_ende_v003](t5/data/tasks.py?l=156&amp;rcl=337594707))reads these sentence pairs from the data source and applies a series of[preprocessors](t5/data/preprocessors.py?rcl=343354647).One of the internal representations looks like```python{&quot;inputs&quot;: &quot;translate English to German: That is good.&quot;, &quot;targets&quot;: &quot;Das ist gut.&quot;}```The final output from the `Task` is a tokenized version of the parallelsentences. In the following toy example (the token ids do not correspond to theabove string example), the dataset consists of 2 examples.```pythondataset = [{&quot;inputs&quot;: [7, 8, 5], &quot;targets&quot;: [3, 9]},           {&quot;inputs&quot;: [8, 4, 9, 3], &quot;targets&quot;: [4]}]```The format is in the `tf.data.Dataset` (i.e., each example is a dictionary with&quot;inputs&quot; and &quot;targets&quot; fields.The `FeatureConverter` then takes this as an input and converts to themodel-specific features. In addition, the feature converter performs padding andoptionally packing (for model implementations that support it) for efficiency.For example, let's assume that we are using the standard Transformerarchitecture with an encoder and a decoder. The output of the feature converteris```pythonconverted_dataset = [{    &quot;encoder_input_tokens&quot;: [7, 8, 5, 1, 8, 4, 9, 3, 1, 0],     &quot;encoder_segment_ids&quot;: [1, 1, 1, 1, 2, 2, 2, 2, 2, 0],       &quot;encoder_positions&quot;: [0, 1, 2, 3, 0, 1, 2, 3, 4, 0],   &quot;decoder_target_tokens&quot;: [3, 9, 1, 4, 1, 0, 0],    &quot;decoder_input_tokens&quot;: [0, 3, 9, 0, 4, 0, 0],    &quot;decoder_loss_weights&quot;: [1, 1, 1, 1, 1, 0, 0],       &quot;decoder_positions&quot;: [0, 1, 2, 0, 1, 0, 0],     &quot;decoder_segment_ids&quot;: [1, 1, 1, 2, 2, 0, 0],}]```In this case, two task examples are packed into one. `*_segment_id` and`*_position` are the fields used to denote the membership and position of packedtoken in the original sequence. The EOS ids (i.e., 1) are appended. In addition,each fields is padded to the specified length.We will look at the details of this example in Encoder-decoder architecture:`seqio.EncDecFeatureConverter` section.#### Feature converters provided out of the boxWe provide feature converters for three common architectures: encoder-decoder,decoder-only and encoder-only. Here we describe how users can use the featureconverters for each of these architectures out of the box as a part of the SeqIOlibrary.In the SeqIO library, each architecture has a class defining how the taskfeatures are converted to model features. Since these feature converters arealready implemented, it is straightforward to use them by providing the class asa `feature_converter` argument of the `seqio.get_dataset` function. Thefollowing sections will show the example usage of `seqio.get_dataset`.##### Encoder-decoder architecture: `seqio.EncDecFeatureConverter`This is the architecture of the original Transformer paper. For theEnglish-to-German translation task, the following function call retrieves the`tf.data.Dataset` object with the model features.```pythondataset: tf.data.Dataset = seqio.get_dataset(    mixture_or_task_name=&quot;wmt_t2t_ende_v003&quot;,    task_feature_lengths={&quot;inputs&quot;: 32, &quot;targets&quot;: 32},    dataset_split=&quot;train&quot;,    shuffle=True,    feature_converter=seqio.EncDecFeatureConverter(pack=True))```The resulting dataset object has the following 7 fields|Feature name          | Explanation                ||----------------------|---------------------------||`encoder_input_tokens` | Input tokens to the encoder. ||`encoder_positions`    | Position index in the sequence before packing.||`encoder_segment_ids`  | Sequence membership before packing. Two positions with the same positive integer mean that they belong to the same sequence before packing. ||`decoder_input_tokens` | Input tokens to the decoder. ||`decoder_target_tokens`| Output tokens from the decoder. ||`decoder_loss_weights` | A weight on each position that can be used as a mask. ||`decoder_positions`    | Position index in the sequence before packing. ||`decoder_segment_ids`  | Same as `encoder_segment_ids` but for decoder.|##### Decoder-only architectureThis architecture consists of a single autoregressive stack, which we denote asa &quot;decoder&quot;.A decoder autoregressively produces an output sequence.Therefore, it can be used as a standard language model if the task dataset hasonly &quot;targets&quot; features, i.e., self-supervised. If the task dataset also has an&quot;inputs&quot; field, e.g., supervised machine translation, the decoder can still beused by concatenating the inputs and targets fields. See [Raffel et al.(2020)](https://arxiv.org/abs/1910.10683), Section 3.2.1 for more detailed takeon this topic.We support both uses cases and refer to the former as *standard language model*and the latter as *prefix language model*. Each of these models is describedseparately below.Note that we do not provide special features to denote how the dataset should beconsumed. For example, a Transformer-based fully autoregressive decoder has afully-causal self-attention layer. Since there are many ways of implementing themasking pattern for such attention layer and, more importantly, SeqIO is notlimited to attention-based models, we leave it up to the model implementationsto apply the masking pattern. There is one exception, and we cover this inthe Prefix LM section below.A common use pattern is to pretrain a decoder model with the left-to-rightlanguage modeling objective (unsupervised) using `seqio.LMFeatureConverter` andthen fine-tune (supervised) using `seqio.PrefixLMFeatureConverter`.###### Standard LMFor the standard language model, the task dataset only has &quot;targets&quot; field.Therefore, the sequence length specification only needs to specify targets.```pythondataset: tf.data.Dataset = seqio.get_dataset(    mixture_or_task_name=&quot;standard_lm&quot;,    task_feature_lengths={&quot;targets&quot;: 32},    dataset_split=&quot;train&quot;,    shuffle=True,    feature_converter=seqio.LMFeatureConverter(pack=True))```Note that &quot;standard_lm&quot; is not a registered task in the codebase. It is theleft-to-right language modeling task, i.e., predict the next token given theprevious tokens on some language corpus (e.g.,[C4](https://www.tensorflow.org/datasets/catalog/c4)).The output dataset has the following model features.|Feature name          | Explanation                ||----------------------|---------------------------||`decoder_target_tokens`| Output tokens from the decoder ||`decoder_input_tokens` | Input tokens to the decoder ||`decoder_loss_weights` | Binary mask to indicate where the loss should be taken ||`decoder_positions`    | Position index in the sequence before packing||`decoder_segment_ids`  | Sequence membership before packing. Two positions with the same positive integer mean that they belong to the same sequence before packing. |The `decoder_target_tokens` is a shifted version of `decoder_input_tokens` for thestandard teacher-forced autoregressive training.###### Prefix LM: `seqio.PrefixLMFeatureConverter`If the input dataset has a notion of &quot;inputs&quot; and &quot;targets&quot;, we can concatenatethem so that we can still use a single stack decoder. Therefore, the output onlycontains &quot;targets&quot; just like standard LM case.We use the same toy example for English-to-German translation task as a runningexample:```{&quot;inputs&quot;: &quot;translate English to German: That is good.&quot;, &quot;targets&quot;: &quot;Das ist gut.&quot;}```To be consumed by the decoder-only stack, `seqio.PrefixLMFeatureConverter`concatenates them form the new &quot;targets&quot;. Consider 2-layer decoder architecturewhose activations are shown below```That  is  good &lt;EOS&gt; Das ist gut &lt;EOS&gt; |    |    |    |    |   |    |   | u1   u2   u3   u4   u5  u6   u7  u8 |    |    |    |    |   |    |   | v1   v2   v3   v4   v5  v6   v7  v8 |    |    |    |    |   |    |   |&lt;BOS&gt; That is  good &lt;EOS&gt; Das ist gut```Let's us denote the first layer's activation in the `i`th position as `vi`.Similarly, let `ui` denote the activation of the second layer in the `i`thposition.For attention-based sequence models such as Transformer decoders, theself-attention layer is used to encode contextualized representation of thesequence. At a given layer, each position's representation is computed as afunction of the representations of the tokens *before* its position in theprevious layer.Referring to the toy example, when computing `u2` with fully-causing masking, wedo not use `v3`. This results in a representation `u2` of the word &quot;is&quot; thatdoes not take into account the word &quot;good&quot;, which is unnecessarily limiting.For Prefix LM, this issue is resolved by having the fully visible maskingpattern for the inputs portion only. For example, when computing `u2`, `v1`,`v2`, `v3`, `v4` and `v5` are all visible and taken into account. For the tokensin the &quot;targets&quot; of the `Task` dataset, we use the causal masking. For example,when computing `u6`, all `vi` for `i &lt;= 6` are taken into account but not `v7`.&lt;details&gt;  &lt;summary&gt;Why `v5` is included in the inputs attention pattern&lt;/summary&gt;  In the same translation example, we note that when computing `u2`, the  activation corresponding to the position where \&lt;EOS\&gt; token was input (i.e.,  `v5`) was visible. This doesn't count as &quot;cheating&quot; because the model doesn't  see the next word &quot;Das&quot;. This can provide additional context in building the  representation for &quot;good&quot;. In this case, `u4` has the context that &quot;good&quot; is  the last word in the sentence.&lt;/details&gt;`seqio.PrefixLMFeatureConverter` provides a feature `decoder_causal_attention`to encode this information. For the above example, we have```decoder_causal_attention = [1, 1, 1, 1, 1, 0, 0, 0]```indicating that the non-causal attention can be applied to the first fivepositions. Note that this feature seems trivial, but for a packed datasetthe inputs and targets boundary are more nuanced.A final consideration for the prefix LM is that because we concatenate &quot;inputs&quot;and &quot;targets&quot;, which tokens are used for the loss computation is a modelingdecision. For example, we can penalize the models only for the &quot;targets&quot; tokensor we may choose to penalize building the representation for &quot;inputs&quot; tokens.This is controlled by `loss_on_targets_only` argument (defaults to `True`) to`seqio.PrefixLMFeatureConverter` constructor. In the above example, we would get```decoder_loss_weights = [0, 0, 0, 0, 1, 1, 1, 1]```This indicates that the last 4 positions are used for the loss computation.To get the dataset with prefix LM features, we can use```pythondataset: tf.data.Dataset = seqio.get_dataset(    mixture_or_task_name=&quot;wmt_t2t_ende_v003&quot;,    task_feature_lengths={&quot;inputs&quot;: 32, &quot;targets&quot;: 32},    dataset_split=&quot;train&quot;,    shuffle=True,    feature_converter=seqio.PrefixLMFeatureConverter(        pack=True,        loss_on_targets_only=True))```The resulting features have length 64 because it concatenates inputs and targetseach with length 32.The output dataset has the following model features. Note that the onlyadditional feature is `decoder_causal_attention`.|Feature name          | Explanation                ||----------------------|---------------------------||`decoder_target_tokens`| Output tokens from the decoder ||`decoder_input_tokens` | Input tokens to the decoder ||`decoder_loss_weights` | Binary mask to indicate where the loss should be taken ||`decoder_positions`    | Position index in the sequence before packing||`decoder_segment_ids`  | Sequence membership before packing. Two positions with the ` same positive integer mean that they belong to the same sequence before packing. ||`decoder_causal_attention`| Binary mask denoting which tokens are in the non-causal masking region.|###### Encoder-only architectureLike decoder-only architecture, this one is a single stack, but notautoregressive.One notable assumption is that the inputs and targets are *aligned*, i.e., theyhave the same sequence length and `i`th position in the targets correspond tothe output representation of the `i`th token in the inputs.A common model using encoder-only architecture is[BERT](https://arxiv.org/abs/1810.04805). We provide `Encoder` feature converterclass to support the Masked Language Modeling (MLM) objective from BERT.We assume that a unique sentinel such as `[MASK]` token is used to mask somefraction of the input text and the task is to recover the original text.Therefore, the &quot;targets&quot; is naturally defined as the original text whereas&quot;inputs&quot; are the masked text.Encoder-only models are often used for classification tasks. In BERT, a specialtoken `[CLS]` is prepended to the input sequence. The last layer's activationcorresponding to this sentinel token is the contextualized representation of thesequence. We assume that such &quot;classification&quot; sentinel is prepended.Consider the following example for the MLM task. The input dataset has twoexamples, which is packed to one example. We assume that `mask_id = 9` and the`[CLS]` token has id of 8.```pydataset = [{&quot;inputs&quot;: [8, 9, 9, 3, 4], &quot;targets&quot;: [8, 7, 4, 3, 4]},           {&quot;inputs&quot;: [8, 3, 9], &quot;targets&quot;: [8, 3, 6]}]converted_dataset = {     &quot;encoder_input_tokens&quot;: [8, 9, 9, 3, 4, 1, 8, 3, 9, 1, 0],    &quot;encoder_target_tokens&quot;: [8, 7, 4, 3, 4, 1, 8, 3, 6, 1, 0],      &quot;encoder_segment_ids&quot;: [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 0],        &quot;encoder_positions&quot;: [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0],     &quot;encoder_loss_weights&quot;: [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0],}```Note that the packed sequence has `[CLS]` token at the beginning of eachsequences. Also note that the loss is taken only on the masked position.To use the pre-defined `EncoderFeatureConverter`, provide `mask_id` as anargument.```pydataset: tf.data.Dataset = seqio.get_dataset(    mixture_or_task_name=&quot;some mlm task&quot;,    task_feature_lengths={&quot;inputs&quot;: 32, &quot;targets&quot;: 32},    dataset_split=&quot;train&quot;,    shuffle=True,    feature_converter=seqio.EncoderFeatureConverter(        pack=True,        mask_id=9))```The resulting dataset object has the following 5 fields|Feature name          | Explanation                ||----------------------|---------------------------||`encoder_input_tokens` | Input tokens to the encoder ||`encoder_positions`    | Position index in the sequence before packing||`encoder_segment_ids`  | Sequence membership before packing. Two positions with the ` same positive integer mean that they belong to the same sequence before packing. ||`encoder_target_tokens`| Output tokens from the encoder ||`encoder_loss_weights` | Binary mask to indicate where the loss should be taken |                                          :###### Custom architecturesFor a model architectures, you would need to create a subclass of`FeatureConverter` and override two methods `_convert_features` and`get_model_feature_lengths` to define how task features are mapped to the modelfeatures including the length relationships. The existing feature converters(e.g., `seqio.EncDecFeatureConverter`) follows the same pattern. So this can beuseful starting point.### EvaluationThe SeqIO `Evaluator` class provides a way to evaluate models on SeqIO Tasksand Mixtures. For an interactive walkthrough of SeqIO evaluation, see the [Evaluation Notebook](https://github.com/google/seqio/blob/main/seqio/docs/tutorials.md). The following is a deep-dive into the Evaluator class.An Evaluator instance can be created by passing a SeqIO Task orMixture, and additional eval params like feature converter, split, sequencelengths, seed, etc. The Evaluator init calls `get_dataset` for each Task to beevaluated with the appropriate params, creating the `task_dataset`, and invokesthe model-specific feature converter on the `task_dataset` to create featuresthat can be passed to a model, called `model_dataset`. Both `task_dataset` and`model_dataset` are stored in-memory so that the dataset can be reused acrossmultiple evaluations (e.g. on checkpoints from a training run). Both datasetsare enumerated so that even if the order of examples is changed during modelinference, the enumeration can be used to match model outputs to examples fromthe `task_dataset`.For Mixtures, each sub-Task is evaluated separately, regardless of mixingrates, because in the context of eval benchmarks, Mixtures commonly refer to acollection of Tasks belonging to that benchmark, each of which is evaluatedseparately, e.g. SuperGLUE mixture.Once an `Evaluator` instance is created with a SeqIO Task or Mixture, a modelcan be evaluated by calling `evaluator.evaluate(...)` and passing a `predict_fn`and/or a `predict_with_aux_fn` and/or a `score_fn` to interact with the model.`predict_fn` takes the `model_dataset` as input and outputs a `Sequence[(index,token_ids)]` where `token_ids` is the sequence of token ids generated by themodel for the input example whose index matches `index`. Therefore, even if`predict_fn` mixes the order of the examples during prediction, the order can becorrected as long as the correct index for each example is maintained. A commonexample is the multi-host setup where the evaluation dataset is split amongstmultiple hosts that independently make predictions and combine the resultsduring which the ordering can be mixed. `predict_with_aux_fn` is similar to`predict_fn`, except that it can also return a dictionary of auxiliary valuesalong with each sequence of `token_ids`, e.g. scores from the generated tokens.The `score_fn` takes the `model_dataset` as input and returns a`Sequence[(index, score)]` where `score` is the sequence of log likelihoodscores for the targets in the dataset. This simple interface allows users toeasily integrate the SeqIO evaluation flow with popular training frameworks inTF and Jax.Corresponding to the model fns, users can configure three kinds of metric fns intheir Tasks, which are differentiated by their function signature. Metricscomputed on the outputs of `predict_fn` (and `predict_with_aux_fn`) have thesignature `targets` and `predictions` (and optionally `aux_values`), whilemetrics computed on the outputs of `score_fn` have the have the signature`targets` and `predictions`. The `Evaluator` takes care of calling the correctmodel fns and metric fns during evaluation. Here is an example of a metric ofeach type.```def sequence_accuracy(targets, predictions): seq_acc = 100 * np.mean([p == t for p, t in zip(predictions, targets)]) return {&quot;sequence_accuracy&quot;: seq_acc}def log_likelihood(targets, scores): log_likelihood = np.mean([scipy.special.logsumexp(el) for el in scores]) return {&quot;log_likelihood&quot;: log_likelihood}```There are 4 steps involved in the evaluation using predicted tokens:+   the `predict_fn` or `predict_with_aux_fn` returns indices and output_tokens:    `Sequence[Tuple[int, Sequence[int]]]`, potentially with some auxiliary    values.+   output tokens are decoded by `vocab.decode`+   postprocessors configured in Tasks are applied to the decoded output. These    are denoted as predictions.+   metric fns configured in Tasks are applied to the predictions and the cached    targets.There are 2 steps involved in the evaluation using scores:+   the `score_fn` returns indices and scores: `Sequence[Tuple[int,    Sequence[float]]]`+   metric fns configured in Tasks is applied to the scores and the cached    targets.Training codebases like T5X provide integration with SeqIO evaluation to allow evaluating checkpoints on SeqIO Tasks and Mixtures. See [T5X Eval](https://github.com/google-research/t5x/blob/main/docs/usage/eval.md)for instructions.## Differences from `t5.data`The original `t5` library introduced and implemented the `t5.data.Task`abstraction for specifying preprocessing and evaluation metrics for text-to-texttasks. When creating a task, users specify a source dataset of raw text, somepreprocessing steps, a vocabulary for tokenization, and evaluation metrics. Thefully-specified Task can then be used to pre-train or fine-tune aencoder-decoder transformer model. However, the design included many baked-inassumptions about the types of tasks users could specify.SeqIO removes some of the constraints of this abstraction:*   Inputs and outputs are no longer required to be strings (e.g., it may be    images or audio).*   Architectures other than the original encoder-decoder are supported (e.g.,    decoder-only languaged models like GPT or encoder-only models like BERT).*   Users can control at which stage of the pipeline offline caching occurs.*   Users can control when and where EOS tokens are added.Furthermore, SeqIO has been made more modular with respect to the MeshTensorFlow Transformer. This allows it to be used with other modelimplementations with more consistency and much less code duplication.## Advanced Postprocessing `Task`### TriviaQA (Closed-book, open-domain version)This version of TriviaQA was introduced in [Roberts et al.2020](https://arxiv.org/abs/2002.08910).```pyseqio.TaskRegistry.add(    &quot;trivia_qa_open&quot;,    source=seqio.TfdsDataSource(      tfds_name=&quot;trivia_qa/unfiltered.nocontext:1.1.0&quot;,      splits={          &quot;train&quot;: &quot;train[:90%]&quot;,          &quot;validation&quot;: &quot;train[90%:]&quot;,          &quot;test&quot;: &quot;validation&quot;      }),    preprocessors=[        tqa_open_preprocessor,        seqio.preprocessors.tokenize,        seqio.preprocessors.append_eos,    ],    output_features={        &quot;inputs&quot;: seqio.Feature(           seqio.SentencePieceVocabulary(&quot;/path/to/inputs/vocab&quot;),           add_eos=False, dtype=tf.int32        ),        &quot;targets&quot;: seqio.Feature(           seqio.SentencePieceVocabulary(&quot;/path/to/targets/vocab&quot;),           add_eos=True, dtype=tf.int32        ),    },    postprocess_fn=tqa_open_postprocessor,    metric_fns=[tqa_metric])```In this example, we are using the `TfdsDataSource`. We specify the name of theTriviaQA dataset in TFDS([`&quot;trivia_qa&quot;`](https://www.tensorflow.org/datasets/catalog/trivia_qa)), thespecific config that excludes the context for the open domain setting(`&quot;unfiltered.nocontext&quot;`), and the version number (`&quot;1.1.0&quot;`). We also overridethe default splits to match what is commonly used for the open domain setting.Specifically, we set our &quot;test&quot; split to be the TFDS &quot;validation&quot; split, andcreate a small pseudo-&quot;validation&quot; set by taking examples out of the TFDS&quot;train&quot; split.The preprocessor `tqa_open_preprocessor` is defined as follows.```pydef tqa_open_preprocessor(    dataset: tf.data.Dataset,    prefix:str = &quot;trivia_qa question: &quot;  ) -&gt; tf.data.Dataset:  &quot;&quot;&quot;Convert TriviaQA dataset to open domain qa examples.  The function takes the trivia_qa TFDS dataset and emits examples of the  form:  {    &quot;inputs&quot;: &quot;trivia_qa question: What are the names of the Olsen Twins?&quot;    &quot;targets&quot;: &quot;Mary-Kate and Ashley&quot;,    &quot;answers&quot;: [&quot;Mary-Kate and Ashley&quot;, &quot;Ashley and Mary-Kate&quot;]  }  Args:    dataset: a tf.data.Dataset to process.    prefix: str, prefix to prepend to the inputs.  Returns:    a tf.data.Dataset  &quot;&quot;&quot;  def tqa_map(ex):    &quot;&quot;&quot;Map TriviaQA example to text-to-text example.&quot;&quot;&quot;    return {        &quot;inputs&quot;: prefix + ex[&quot;question&quot;],        &quot;targets&quot;: ex[&quot;answer&quot;][&quot;value&quot;],        &quot;answers&quot;: ex[&quot;answer&quot;][&quot;aliases&quot;],    }  return dataset.map(tqa_map, num_parallel_calls=tf.data.experimental.AUTOTUNE)```Or with the `seqio.map_overdataset` decorator, we have```pydef tqa_open_preprocessor(  dataset: tf.data.Dataset,  prefix: str = &quot;trivia_qa question: &quot;) -&gt; tf.data.Dataset:  @seqio.map_over_dataset  def tqa_map(ex: Mapping[str, tf.Tensor]) -&gt; Mapping[str, tf.Tensor]:    &quot;&quot;&quot;Map TriviaQA example to text-to-text example.&quot;&quot;&quot;    return {        &quot;inputs&quot;: prefix + ex[&quot;question&quot;],        &quot;targets&quot;: ex[&quot;answer&quot;][&quot;value&quot;],        &quot;answers&quot;: ex[&quot;answer&quot;][&quot;aliases&quot;],    }return tqa_map(dataset)```Here we made a thin wrapper to emphasize that the function decorated by`seqio.map_over_dataset` takes in an instance of `tf.data.Dataset`. In practice,this wrapper is not necessary.The postprocessor for this example is `tqa_open_postprocessor`, which is definedas follows:```pydef tqa_open_postprocessor(output_or_target, example=None, is_target=False):  &quot;&quot;&quot;Returns output as answer, or all answers if the full example is provided.&quot;&quot;&quot;  if is_target:    return [a.decode(&quot;utf-8&quot;) for a in example[&quot;answers&quot;]]  else:    return output_or_target.decode(&quot;utf-8&quot;)```When processing the target, we ignore `output_or_target` (equivalent to`example[&quot;targets&quot;]`) since it is just selecting a single answer in`trivia_qa_open`. Instead, we extract the full list of answers from the exampleand convert them from bytes to text. When handling the model output, we simplyconvert it to text from detokenized bytes.The metric function `tqa_metric` is defined as:```pydef tqa_metric(  targets: Sequence[Sequence[str]],  predictions: Sequence[str]) -&gt; Mapping[str, seqio.metrics.MetricValueValue]:  &quot;&quot;&quot;Computes official TriviaQA metrics.  Args:    targets: list of lists of strings    predictions: list of strings  Returns:    dict with score_key: squad score across all targets and predictions  &quot;&quot;&quot;  if len(targets) != len(predictions):    raise ValueError(&quot;Number of targets and predictions must match.&quot;)  def _normalize_answer(text):    &quot;&quot;&quot;Lower text and remove punctuation, articles and extra whitespace.&quot;&quot;&quot;    # Remove articles.    text = re.sub(r&quot;\b(a|an|the)\b&quot;, &quot; &quot;, s)    # Remove punctuation.    for punc in string.punctuation:      text = text.replace(punc, '')    # Normalize white space    text = &quot; &quot;.join(s.split())    return text  # Normalize answers before comparing.  targets = [[_normalize_answer(t) for t in u] for u in targets]  predictions = [_normalize_answer(p) for p in predictions]  em = np.mean([      max(pred == gt for gt in ground_truths)      for pred, ground_truths in zip(predictions, targets)  ])  return {      &quot;exact_match&quot;: seqio.metrics.Scalar(em),  }```## Citing SeqIOPlease use the following bibtex entry to cite SeqIO.```@article{roberts2022t5x,  url = {https://arxiv.org/abs/2203.17189},  author = {Roberts, Adam and Chung, Hyung Won and Levskaya, Anselm and Mishra, Gaurav and Bradbury, James and Andor, Daniel and Narang, Sharan and Lester, Brian and Gaffney, Colin and Mohiuddin, Afroz and Hawthorne, Curtis and Lewkowycz, Aitor and Salcianu, Alex and van Zee, Marc and Austin, Jacob and Goodman, Sebastian and Soares, Livio Baldini and Hu, Haitang and Tsvyashchenko, Sasha and Chowdhery, Aakanksha and Bastings, Jasmijn and Bulian, Jannis and Garcia, Xavier and Ni, Jianmo and Chen, Andrew and Kenealy, Kathleen and Clark, Jonathan H. and Lee, Stephan and Garrette, Dan and Lee-Thorp, James and Raffel, Colin and Shazeer, Noam and Ritter, Marvin and Bosma, Maarten and Passos, Alexandre and Maitin-Shepard, Jeremy and Fiedel, Noah and Omernick, Mark and Saeta, Brennan and Sepassi, Ryan and Spiridonov, Alexander and Newlan, Joshua and Gesmundo, Andrea},  title = {Scaling Up Models and Data with $\texttt{t5x}$ and $\texttt{seqio}$},  journal={arXiv preprint arXiv:2203.17189},  year = {2022},}```</longdescription>
</pkgmetadata>