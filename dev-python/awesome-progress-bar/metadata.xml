<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Awesome progress bar![](https://img.shields.io/pypi/v/awesome-progress-bar?color=blue&amp;style=flat-square)![](https://img.shields.io/pypi/dm/awesome-progress-bar?color=blue&amp;style=flat-square)![](https://img.shields.io/pypi/l/awesome-progress-bar?color=blue&amp;style=flat-square)![](https://img.shields.io/pypi/pyversions/awesome-progress-bar?style=flat-square)![](https://raw.githubusercontent.com/Yoskutik/awesome_progress_bar/master/preview.gif)It's a progress bar for the terminal. But why it is awesome?- It has thread mode. This way progress bar can run in the parallel.- It's animated with ASCII characters.- It also measures elapsed time.- It's user-friendly and customizable.Why does progress bar need to be run in the parallel mode?The bar should be updated when it is time to. Imagine we are doing something in the `for`loop and each iteration we update its state. But each iteration can take different amountof time. And each iteration can be longer than 1 minute. And without threads the animationwould have non-constant amount of FPS.&lt;br /&gt;# How to use## Initialization#### Parameters:&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;total&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;Amount of iterations&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;prefix&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;A short message before the progress bar. Default is &lt;code&gt;'Progress'&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;suffix&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;A short message after the progress bar. Default is &lt;code&gt;''&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;fill&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;A character that will be used as progress bar filler. Default is &lt;code&gt;'='&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;bar_length&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;The length of the whole string (including prefix, spinner, progress bar, percents and         suffix). Default is equal to the minimum between terminal's width and 100&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;update_period&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;The duration of pause between iterations in seconds. Default is &lt;code&gt;0.1&lt;/code&gt;. Works         only if &lt;b&gt;use_thread&lt;/b&gt; is &lt;code&gt;True&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;use_time&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;If &lt;code&gt;True&lt;/code&gt; there will be an information about elapsed time in the center of         the progress bar written in &lt;b&gt;time_format&lt;/b&gt; format. Default is &lt;code&gt;True&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;time_format&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;String, that should include &lt;code&gt;'hh'&lt;/code&gt;, &lt;code&gt;'mm'&lt;/code&gt; or/and &lt;code&gt;'ss'&lt;/code&gt;.         &lt;code&gt;'hh'&lt;/code&gt; will be replaced with amount of elapsed hours, &lt;code&gt;'mm'&lt;/code&gt; - minutes,         &lt;code&gt;'ss'&lt;/code&gt; - seconds. Default is &lt;code&gt;'mm:ss'&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;use_thread&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;If &lt;code&gt;True&lt;/code&gt; ProgressBar will create extra thread. Default is &lt;code&gt;True&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;spinner_type&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;One of &lt;code&gt;['sb', 'db', 's']&lt;/code&gt;. With &lt;code&gt;'sb'&lt;/code&gt; progress bar will print         spinner consisting of 1 Braille pattern. &lt;code&gt;'db'&lt;/code&gt; - 2 Braille patterns.         &lt;code&gt;'s'&lt;/code&gt; - a slash. Default is &lt;code&gt;'sb'&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;use_spinner&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;If &lt;code&gt;True&lt;/code&gt; the spinner will be shown. Default is &lt;code&gt;True&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;last_char&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;Something, that will be printed after the progress is done. Default is &lt;code&gt;'\n'&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;use_eta&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;If &lt;code&gt;True&lt;/code&gt; the information about approximate remaining time will be printed.         Default is &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;eta_format&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;The format of ETA. Similar to the &lt;b&gt;time_format&lt;/b&gt;. Default is equal to the         &lt;b&gt;time_format&lt;/b&gt;&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;## Methods&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;iter(append='')&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;            &lt;p&gt;Used for tracking the progress.&lt;/p&gt;            &lt;ul&gt;                &lt;li&gt;In the thread mode only increases the number of iteration.&lt;/li&gt;                &lt;li&gt;Without extra thread &lt;code&gt;bar.iter()&lt;/code&gt; prints the bar each time user call it.&lt;/li&gt;            &lt;/ul&gt;            Parameters:            &lt;ul&gt;                &lt;li&gt;&lt;b&gt;append:&lt;/b&gt; A string to append after the bar. The appended text doesn't effect                 on the progress bar width. &lt;/li&gt;            &lt;/ul&gt;        &lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;get_time_passed (return_str=True)&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;            &lt;p&gt;Returns the time spent.&lt;/p&gt;            &lt;p&gt;                If the progress is done returns bar's operating time. If not - returns the time elapsed                 from the progress start.            &lt;/p&gt;            Parameters:            &lt;ul&gt;                &lt;li&gt;&lt;b&gt;return_str:&lt;/b&gt; If &lt;code&gt;True&lt;/code&gt; returns time in the &lt;b&gt;time_format&lt;/b&gt;                format. If not returns just amount of seconds&lt;/li&gt;            &lt;/ul&gt;        &lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;stop()&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;            &lt;p&gt;Stops the bar in the thread mode.&lt;/p&gt;            &lt;p&gt;                If the bar doesn't call the &lt;code&gt;iter&lt;/code&gt; function the required number of times, the                 created thread will run until you call the &lt;stop&gt;stop&lt;/stop&gt; function.            &lt;/p&gt;        &lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;wait()&lt;/b&gt;&lt;/td&gt;        &lt;td&gt;            &lt;p&gt;Blocks the program until bar is dead.&lt;/p&gt;            &lt;p&gt;                The bar updates every &lt;b&gt;update_period&lt;/b&gt; seconds in the thread mode. Hence, there can                 be a small delay between last calling &lt;code&gt;bar.iter()&lt;/code&gt; and next try for printing                 something. So, if you want to print anything after the progress is done be aware to use                &lt;code&gt;bar.wait()&lt;/code&gt;              &lt;/p&gt;        &lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;\* `stop()` and `wait()` are needed only in the thread mode.## Examples```pythonfrom awesome_progress_bar import ProgressBarimport timetotal = 133bar = ProgressBar(total, bar_length=50)try:    for x in range(total):        time.sleep(0.1)        bar.iter(' Appended')except:    bar.stop()bar.wait()print('Bar is done')# Progress: |=========== 00:15 ============| 100.00% Appended# Bar is done``````pythonfrom awesome_progress_bar import ProgressBarbar = ProgressBar(100, prefix='Prefix', suffix='Suffix', use_eta=True, bar_length=70)# Prefix: в ‡ |==&gt;             00:00/00:14                |   5.26% Suffixbar = ProgressBar(100, fill='#', use_time=False, bar_length=50, use_spinner=False)# Progress: |##########&gt;                   |  33.83%bar = ProgressBar(100, time_format='hhh mmmin sss', bar_length=70, spinner_type='s')# Progress: - |=======&gt;         00h 00min 02s                  |  16.54%bar = ProgressBar(100, bar_length=70, spinner_type='db')# Progress: вў€вЎ± |===========&gt;         00:04                     |  24.81%```See more [here](https://github.com/Yoskutik/awesome_progress_bar/blob/master/examples.py).---Feel free to suggest ideas to improve this package in the GitHub's Issues section.![](https://img.shields.io/badge/@Yoskutik-444?logo=github&amp;style=flat-square) </longdescription>
</pkgmetadata>