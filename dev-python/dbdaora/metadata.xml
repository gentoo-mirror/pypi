<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dbdaora&lt;p align=&quot;center&quot; style=&quot;margin: 3em&quot;&gt;  &lt;a href=&quot;https://github.com/dutradda/dbdaora&quot;&gt;    &lt;img src=&quot;https://dutradda.github.io/dbdaora/dbdaora.svg&quot; alt=&quot;dbdaora&quot; width=&quot;300&quot;/&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;Communicates with &lt;b&gt;NoSQL&lt;/b&gt; (and &lt;b&gt;SQL&lt;/b&gt; for future) databases using repository and service patterns and python dataclasses&lt;/em&gt;&lt;/p&gt;---**Documentation**: &lt;a href=&quot;https://dutradda.github.io/dbdaora/&quot; target=&quot;_blank&quot;&gt;https://dutradda.github.io/dbdaora/&lt;/a&gt;**Source Code**: &lt;a href=&quot;https://github.com/dutradda/dbdaora&quot; target=&quot;_blank&quot;&gt;https://github.com/dutradda/dbdaora&lt;/a&gt;---## Key Features- **Creates an optional service layer with cache and circuit breaker**- **Supports for redis data types:**    + Hash    + Sorted Set    + *(Others data types are planned)*- **Backup redis data into other databases:**    + Google Datastore    + Mongodb *(soon)*    + SQL databases with SQLAlchemy *(soon)*    + *(Others data bases are planned)*- *Support for other databases are in development.*## Requirements - Python 3.8+ - [jsondaora](https://github.com/dutradda/jsondaora) for data validation/parsing - circuitbreaker - cachetools - Optionals:    + aioredis    + google-cloud-datastore## Instalation```$ pip install dbdaora```## Simple redis hash example```pythonimport asynciofrom dataclasses import dataclassfrom dbdaora import (    DictFallbackDataSource,    DictMemoryDataSource,    HashRepository,)@dataclassclass Person:    id: str    name: str    age: intdef make_person(name: str, age: int) -&gt; Person:    return Person(name.replace(' ', '_').lower(), name, age)class PersonRepository(HashRepository[Person, str]):    key_attrs = ('id',)repository = PersonRepository(    memory_data_source=DictMemoryDataSource(),    fallback_data_source=DictFallbackDataSource(),    expire_time=60,)person = make_person('John Doe', 33)asyncio.run(repository.add(person))geted_person = asyncio.run(repository.query(person.id).entity)print(geted_person)``````bashPerson(id='john_doe', name='John Doe', age=33)```## Simple redis sorted set example```pythonimport asynciofrom dbdaora import (    DictFallbackDataSource,    DictMemoryDataSource,    SortedSetEntity,    SortedSetRepository,)class Playlist(SortedSetEntity):    id: strclass PlaylistRepository(SortedSetRepository[Playlist, str]):    ...repository = PlaylistRepository(    memory_data_source=DictMemoryDataSource(),    fallback_data_source=DictFallbackDataSource(),    expire_time=60,)data = [('m1', 1), ('m2', 2), ('m3', 3)]playlist = Playlist(id='my_plalist', data=data)asyncio.run(repository.add(playlist))geted_playlist = asyncio.run(repository.query(playlist.id).entity)print(geted_playlist)``````pythonPlaylist(id='my_plalist', data=[b'm1', b'm2', b'm3'], max_size=None)```## Using the service layerThe service layer uses the backup dataset when redis is offline, opening a circuit breaker.It has an optional cache system too.```pythonimport asynciofrom dataclasses import dataclassfrom dbdaora import (    DictFallbackDataSource,    DictMemoryDataSource,    HashRepository,    make_hash_service,)@dataclassclass Person:    id: str    name: str    age: intdef make_person(name: str, age: int) -&gt; Person:    return Person(name.replace(' ', '_').lower(), name, age)class PersonRepository(HashRepository[Person, str]):    ...async def make_memory_data_source() -&gt; DictMemoryDataSource:    return DictMemoryDataSource()async def make_fallback_data_source() -&gt; DictFallbackDataSource:    return DictFallbackDataSource()service = asyncio.run(    make_hash_service(        PersonRepository,        memory_data_source_factory=make_memory_data_source,        fallback_data_source_factory=make_fallback_data_source,        repository_expire_time=60,    ))person = make_person('John Doe', 33)asyncio.run(service.add(person))geted_person = asyncio.run(service.get_one(person.id))print(geted_person)``````pythonPerson(id='john_doe', name='John Doe', age=33)```</longdescription>
</pkgmetadata>