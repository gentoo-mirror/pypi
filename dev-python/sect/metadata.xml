<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>sect====[![](https://github.com/lycantropos/sect/workflows/CI/badge.svg)](https://github.com/lycantropos/sect/actions/workflows/ci.yml &quot;Github Actions&quot;)[![](https://readthedocs.org/projects/sect/badge/?version=latest)](https://sect.readthedocs.io/en/latest &quot;Documentation&quot;)[![](https://codecov.io/gh/lycantropos/sect/branch/master/graph/badge.svg)](https://codecov.io/gh/lycantropos/sect &quot;Codecov&quot;)[![](https://img.shields.io/github/license/lycantropos/sect.svg)](https://github.com/lycantropos/sect/blob/master/LICENSE &quot;License&quot;)[![](https://badge.fury.io/py/sect.svg)](https://badge.fury.io/py/sect &quot;PyPI&quot;)In what follows `python` is an alias for `python3.6` or `pypy3.6`or any later version (`python3.7`, `pypy3.7` and so on).Installation------------Install the latest `pip` &amp; `setuptools` packages versions```bashpython -m pip install --upgrade pip setuptools```### UserDownload and install the latest stable version from `PyPI` repository```bashpython -m pip install --upgrade sect```### DeveloperDownload the latest version from `GitHub` repository```bashgit clone https://github.com/lycantropos/sect.gitcd sect```Install dependencies```bashpython -m pip install -r requirements.txt```Install```bashpython setup.py install```Usage-----```python&gt;&gt;&gt; from ground.base import get_context&gt;&gt;&gt; from sect.triangulation import Triangulation&gt;&gt;&gt; context = get_context()&gt;&gt;&gt; Contour, Point = context.contour_cls, context.point_cls&gt;&gt;&gt; (Triangulation.delaunay([Point(0, 0), Point(1, 0), Point(0, 1)],...                         context=context).triangles()...  == [Contour([Point(0, 0), Point(1, 0), Point(0, 1)])])True&gt;&gt;&gt; (Triangulation.delaunay([Point(0, 0), Point(3, 0), Point(1, 1),...                          Point(0, 3)],...                         context=context).triangles()...  == [Contour([Point(0, 0), Point(3, 0), Point(1, 1)]),...      Contour([Point(0, 0), Point(1, 1), Point(0, 3)]),...      Contour([Point(0, 3), Point(1, 1), Point(3, 0)])])True&gt;&gt;&gt; (Triangulation.delaunay([Point(0, 0), Point(1, 0), Point(1, 1),...                          Point(0, 1)],...                         context=context).triangles()...  == [Contour([Point(0, 1), Point(1, 0), Point(1, 1)]),...      Contour([Point(0, 0), Point(1, 0), Point(0, 1)])])True&gt;&gt;&gt; Polygon = context.polygon_cls&gt;&gt;&gt; (Triangulation.constrained_delaunay(...      Polygon(Contour([Point(0, 0), Point(1, 0), Point(0, 1)]), []),...      context=context).triangles()...  == [Contour([Point(0, 0), Point(1, 0), Point(0, 1)])])True&gt;&gt;&gt; (Triangulation.constrained_delaunay(...      Polygon(Contour([Point(0, 0), Point(3, 0), Point(1, 1), Point(0, 3)]),...              []),...      context=context).triangles()...  == [Contour([Point(0, 0), Point(3, 0), Point(1, 1)]),...      Contour([Point(0, 0), Point(1, 1), Point(0, 3)])])True&gt;&gt;&gt; (Triangulation.constrained_delaunay(...      Polygon(Contour([Point(0, 0), Point(4, 0), Point(0, 4)]),...              [Contour([Point(0, 0), Point(1, 2),...                        Point(2, 1)])]),...      context=context).triangles()...  == [Contour([Point(0, 0), Point(4, 0), Point(2, 1)]),...      Contour([Point(1, 2), Point(2, 1), Point(4, 0)]),...      Contour([Point(0, 4), Point(1, 2), Point(4, 0)]),...      Contour([Point(0, 0), Point(1, 2), Point(0, 4)])])True&gt;&gt;&gt; from sect.decomposition import Graph&gt;&gt;&gt; graph = Graph.from_polygon(Polygon(Contour([Point(0, 0), Point(6, 0),...                                             Point(6, 6), Point(0, 6)]),...                                    [Contour([Point(2, 2), Point(2, 4),...                                              Point(4, 4), Point(4, 2)])]),...                            context=context)&gt;&gt;&gt; Point(0, 0) in graphTrue&gt;&gt;&gt; Point(1, 1) in graphTrue&gt;&gt;&gt; Point(2, 2) in graphTrue&gt;&gt;&gt; Point(3, 3) in graphFalse&gt;&gt;&gt; from ground.base import Location&gt;&gt;&gt; graph.locate(Point(0, 0)) is Location.BOUNDARYTrue&gt;&gt;&gt; graph.locate(Point(1, 1)) is Location.INTERIORTrue&gt;&gt;&gt; graph.locate(Point(2, 2)) is Location.BOUNDARYTrue&gt;&gt;&gt; graph.locate(Point(3, 3)) is Location.EXTERIORTrue```Development-----------### Bumping version#### PreparationInstall[bump2version](https://github.com/c4urself/bump2version#installation).#### Pre-releaseChoose which version number category to bump following [semverspecification](http://semver.org/).Test bumping version```bashbump2version --dry-run --verbose $CATEGORY```where `$CATEGORY` is the target version number category name, possiblevalues are `patch`/`minor`/`major`.Bump version```bashbump2version --verbose $CATEGORY```This will set version to `major.minor.patch-alpha`. #### ReleaseTest bumping version```bashbump2version --dry-run --verbose release```Bump version```bashbump2version --verbose release```This will set version to `major.minor.patch`.### Running testsInstall dependencies```bashpython -m pip install -r requirements-tests.txt```Plain```bashpytest```Inside `Docker` container:- with `CPython`  ```bash  docker-compose --file docker-compose.cpython.yml up  ```- with `PyPy`  ```bash  docker-compose --file docker-compose.pypy.yml up  ````Bash` script:- with `CPython`  ```bash  ./run-tests.sh  ```  or  ```bash  ./run-tests.sh cpython  ```- with `PyPy`  ```bash  ./run-tests.sh pypy  ````PowerShell` script:- with `CPython`  ```powershell  .\run-tests.ps1  ```  or  ```powershell  .\run-tests.ps1 cpython  ```- with `PyPy`  ```powershell  .\run-tests.ps1 pypy  ```</longdescription>
</pkgmetadata>