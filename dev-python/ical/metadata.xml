<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>This is an iCalendar rfc 5545 implementation in python. The goal of thisproject is to offer a calendar library with the relevant and practicalfeatures needed for building a calendar application (e.g. recurringevents).ical's main focus is on simplicity, and the internal implementationis based on existing parsing libraries, where possible, making iteasy to support as much as possible of rfc5545. It is not a goal tosupport everything exhaustively, however, the simplicity of theimplementation makes it easy to do so.See [documentation](https://allenporter.github.io/ical/) for full quickstart and API reference.# QuickstartThe example below creates a Calendar, then adds an all day event tothe calendar, then iterates over all events on the calendar.```pythonfrom datetime import datefrom ical.calendar import Calendarfrom ical.event import Eventcalendar = Calendar()calendar.events.append(    Event(summary=&quot;Event summary&quot;, start=date(2022, 7, 3), end=date(2022, 7, 4)),)for event in calendar.timeline:    print(event.summary)```# Reading ics filesThis example parses an .ics file from disk and creates a `ical.calendar.Calendar` object, thenprints out the events in order:```pythonfrom pathlib import Pathfrom ical.calendar_stream import IcsCalendarStreamfilename = Path(&quot;example/calendar.ics&quot;)with filename.open() as ics_file:    calendar = IcsCalendarStream.calendar_from_ics(ics_file.read())print([event.summary for event in calendar.timeline])```# Writing ics filesThis example writes a calendar object to an ics output file:```pythonfrom pathlib import Pathfrom ical.calendar_stream import IcsCalendarStreamfilename = Path(&quot;example/output.ics&quot;)with filename.open() as ics_file:    ics_file.write(IcsCalendarStream.calendar_to_ics(calendar))```# Recurring eventsA calendar event may be recurring (e.g. weekly, monthly, etc). Recurring eventsare represented in a `ical.calendar.Calendar` with a single `ical.event.Event` object, howeverwhen observed through a `ical.timeline.Timeline` will be expanded based on the recurrence rule.See the `rrule`, `rdate`, and `exdate` fields on the `ical.event.Event` for more details.# Related WorkThere are other python rfc5545 implementations that are more mature, and havingbeen around for many years, are still active, and served as referenceimplementations for this project:  - Ics.py - [github](https://github.com/ics-py/ics-py) [docs](https://icspy.readthedocs.io/en/stable/) - Since 2013  - icalendar [github](https://github.com/collective/icalendar) [docs](https://icalendar.readthedocs.io/) - Since 2005</longdescription>
</pkgmetadata>