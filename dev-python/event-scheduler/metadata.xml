<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Event Scheduler## Table of Contents- [Overview](#overview)- [Installing](#installing)- [Documentation](#documentation)- [Quick Start](#quick-start)- [Example](#example)- [Contact](#contact)### OverviewThe Event Scheduler uses an internal thread to allow the application to schedule events to occur either ASAP or at a specified time in the future.Instead of blocking your application's main thread, you can concurrently runsome lightweight tasks. We took some inspiration for the API design from thepython library's [scheduler](https://docs.python.org/3/library/sched.html). Unlikethe native sched module, the Event Scheduler is always on and ready to acceptevents. Event Scheduler is completely thread-safe too!### InstallingYou should already have pip installed if you're using python &gt; 3.4. If youdon't, please visit this [link](https://pip.pypa.io/en/stable/installing/) to install it.To install event scheduler, type the following command in the terminal:`pip install event-scheduler`To import the module, add the following lines in your Python file.`from event_scheduler import EventScheduler`To download directly visit [PyPi](https://pypi.org/project/event-scheduler/) orthe [GitHub repository](https://github.com/phluentmed/PythonEventScheduler).## DocumentationFull documentation can be found [here](https://event-scheduler.readthedocs.io).### Quick Start`event_scheduler.start()`&gt; Enable the event scheduler to start taking events`event_scheduler.stop(hard_stop=False)`&gt;Stop the event scheduler and its internal thread. Set `hard_stop` to `True`&gt;to stop the scheduler right away and discard all pending events. Set &gt;`hard_stop` to `False` to wait for all events to finish executing at their&gt;scheduled times.`event_scheduler.enter(delay, priority, action, arguments=(), kwargs={})`&gt;Schedule an event with a callable `action` to be executed after the `delay`.&gt;Events will be executed according to their `delay` and `priority` (lower &gt;number = higher priority). `arguments` holds positional arguments and &gt;`kwargs` hold keyword arguments for the action. Returns an event object which&gt;can be used to cancel the event.`event_scheduler.cancel(event)`&gt;Cancel the event if it has not yet been executed.`event_scheduler.cancel_recurring(event_id)`&gt;Cancel the recurring event and all future occurrences. ```pythonfrom event_scheduler import EventSchedulerevent_scheduler = EventScheduler()# Starts the schedulerevent_scheduler.start()# Schedule an event that prints a message after 5 secondsevent_scheduler.enter(5, 0, print, ('5 seconds has passed since this event was entered!',))# Schedule a recurring event that prints a message every 10 secondsevent_scheduler.enter_recurring(10, 0, print, ('10 second interval has passed!',))```Output:\`5 seconds has passed since this event was entered!`\`10 second interval has passed!`\`10 second interval has passed!`\`...` ### ExamplePlease refer[here](https://github.com/phluentmed/event-scheduler/blob/master/example/transactions.py)for the example. ### ContactPlease email phluentmed@gmail.com or open an issue if you need any help usingthe module, have any questions, or even have some feature suggestions.&lt;ins&gt;Recommended Email format: &lt;/ins&gt;Subject: EventScheduler - [Issue]Steps to reproduce: (Please include code snippets or stack trace where possible)Device used:Platform:Actual result:Expected result:Comments:</longdescription>
</pkgmetadata>