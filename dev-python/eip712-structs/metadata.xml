<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># EIP-712 Structs  [![Build Status](https://travis-ci.org/ajrgrubbs/py-eip712-structs.svg?branch=master)](https://travis-ci.org/ajrgrubbs/py-eip712-structs) [![Coverage Status](https://coveralls.io/repos/github/ajrgrubbs/py-eip712-structs/badge.svg?branch=master)](https://coveralls.io/github/ajrgrubbs/py-eip712-structs?branch=master)A python interface for simple EIP-712 struct construction.In this module, a &quot;struct&quot; is structured data as defined in the standard.It is not the same as the Python Standard Library's struct (e.g., `import struct`).Read the proposal:&lt;br/&gt;https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#### Supported Python Versions- `3.6`- `3.7`## Install```bashpip install eip712-structs```## UsageSee [API.md](API.md) for a succinct summary of available methods.Examples/Details below.#### QuickstartSay we want to represent the following struct, convert it to a message and sign it:```textstruct MyStruct {    string some_string;    uint256 some_number;}```With this module, that would look like:```python# Make a unique domainfrom eip712_structs import make_domaindomain = make_domain(name='Some name', version='1.0.0')  # Make a Domain Separator# Define your struct typefrom eip712_structs import EIP712Struct, String, Uintclass MyStruct(EIP712Struct):    some_string = String()    some_number = Uint(256)# Create an instance with some datamine = MyStruct(some_string='hello world', some_number=1234)# Into a message dict (serializable to JSON) - domain requiredmy_msg = mine.to_message(domain)# Into signable bytes - domain requiredmy_bytes = mine.signable_bytes(domain)```See [Member Types](#member-types) for more information on supported types.#### Dynamic constructionAttributes may be added dynamically as well. This may be necessary if youwant to use a reserved keyword like `from`.```pythonfrom eip712_structs import EIP712Struct, Addressclass Message(EIP712Struct):    passMessage.to = Address()setattr(Message, 'from', Address())```#### The domain separatorEIP-712 specifies a domain struct, to differentiate between identical structs that may be unrelated.A helper method exists for this purpose.All values to the `make_domain()`function are optional - but at least one must be defined. If omitted, the resultingdomain struct's definition leaves out the parameter entirely.The full signature: &lt;br/&gt;`make_domain(name: string, version: string, chainId: uint256, verifyingContract: address, salt: bytes32)`##### Setting a default domainConstantly providing the same domain can be cumbersome. You can optionally set a default, and then forget it.It is automatically used by `.to_message()` and `.signable_bytes()````pythonimport eip712_structsfoo = SomeStruct()my_domain = eip712_structs.make_domain(name='hello world')eip712_structs.default_domain = my_domainassert foo.to_message() == foo.to_message(my_domain)assert foo.signable_bytes() == foo.signable_bytes(my_domain)```## Member Types### Basic typesEIP712's basic types map directly to solidity types.```pythonfrom eip712_structs import Address, Boolean, Bytes, Int, String, UintAddress()  # Solidity's 'address'Boolean()  # 'bool'Bytes()    # 'bytes'Bytes(N)   # 'bytesN' - N must be an int from 1 through 32Int(N)     # 'intN' - N must be a multiple of 8, from 8 to 256String()   # 'string'Uint(N)    # 'uintN' - N must be a multiple of 8, from 8 to 256```Use like:```pythonfrom eip712_structs import EIP712Struct, Address, Bytesclass Foo(EIP712Struct):    member_name_0 = Address()    member_name_1 = Bytes(5)    # ...etc```### Struct referencesIn addition to holding basic types, EIP712 structs may also hold other structs!Usage is almost the same - the difference is you don't &quot;instantiate&quot; the class.Example:```pythonfrom eip712_structs import EIP712Struct, Stringclass Dog(EIP712Struct):    name = String()    breed = String()class Person(EIP712Struct):    name = String()    dog = Dog  # Take note - no parentheses!# Dog &quot;stands alone&quot;Dog.encode_type()     # Dog(string name,string breed)# But Person knows how to include DogPerson.encode_type()  # Person(string name,Dog dog)Dog(string name,string breed)```Instantiating the structs with nested values may be done a couple different ways:```python# Method one: set it to a structdog = Dog(name='Mochi', breed='Corgi')person = Person(name='E.M.', dog=dog)# Method two: set it to a dict - the underlying struct is built for youperson = Person(    name='E.M.',    dog={        'name': 'Mochi',        'breed': 'Corgi',    })```### ArraysArrays are also supported for the standard.```pythonarray_member = Array(&lt;item_type&gt;[, &lt;optional_length&gt;])```- `&lt;item_type&gt;` - The basic type or struct that will live in the array- `&lt;optional_length&gt;` - If given, the array is set to that length.For example:```pythondynamic_array = Array(String())      # String[] dynamic_arraystatic_array  = Array(String(), 10)  # String[10] static_arraystruct_array = Array(MyStruct, 10)   # MyStruct[10] - again, don't instantiate structs like the basic types```## DevelopmentContributions always welcome.Install dependencies:- `pip install -r requirements.txt`Run tests:- `python setup.py test`- Some tests expect an active local ganache chain on http://localhost:8545. Docker will compile the contracts and start the chain for you.- Docker is optional, but useful to test the whole suite. If no chain is detected, chain tests are skipped.- Usage:    - `docker-compose up -d` (Starts containers in the background)    - Note: Contracts are compiled when you run `up`, but won't be deployed until the test is run.    - Cleanup containers when you're done: `docker-compose down`Deploying a new version:- Bump the version number in `setup.py`, commit it into master.- Make a release tag on the master branch in Github. Travis should handle the rest.## Shameless PlugWritten by [ConsenSys](https://consensys.net) for ourselves and the community! :heart:</longdescription>
</pkgmetadata>