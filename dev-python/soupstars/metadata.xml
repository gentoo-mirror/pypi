<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Soup Stars   [![Build Status](https://travis-ci.org/soupstars/soupstars.svg?branch=master)](https://travis-ci.org/soupstars/soupstars)&lt;!-- [![Coverage Status](https://coveralls.io/repos/github/tjwaterman99/soupstars/badge.svg?branch=master)](https://coveralls.io/github/tjwaterman99/soupstars?branch=master) --&gt;&lt;!-- [![Docs](https://readthedocs.org/projects/soupstars/badge/?version=latest)](https://soupstars.readthedocs.io/en/latest/?badge=latest) --&gt;[![Version](https://badge.fury.io/py/soupstars.svg)](https://badge.fury.io/py/soupstars)[![Python](https://img.shields.io/pypi/pyversions/soupstars.svg)](https://pypi.org/project/soupstars/)Soup Stars is a framework for building web parsers with Python. It is designed to make building, deploying, and scheduling web parsers easier by simplifying what you need to get started.## Quickstart```pip install soupstars```### Creating a parserNew parsers are created by typing `soupstars create` into a terminal, and supplying the name of a python module.```soupstars create myparser.py```Soup Stars will use a template parser to help you get started. This example creates a parser that extracts headlines from articles on the New York Times website.```pythonfrom soupstars import data, followurl = &quot;https://www.nytimes.com&quot;@followdef follow(url):    return (url.domain == &quot;www.nytimes.com&quot;) and (url.match(&quot;\d{4}\/\d{2}\/\d{2}&quot;))@parsedef h1(soup):    return soup.h1.text```You can test that the parser functions correctly.```soupstars run myparser```Use `soupstars --help` to see a full list of available commands.More documentation is available [here](http://soupstars-docs.s3-website-us-west-2.amazonaws.com/).## DevelopmentStart the docker services.```docker-compose up -d```Set up the containers.```docker-compose exec web flask s3 mb soupstars-archivedocker-compose exec web flask db upgradedocker-compose exec web flask seed schedulesdocker-compose exec web flask seed plansdocker-compose exec web flask seed userdocker-compose exec web flask seed parsers```Run the tests.```docker-compose run --rm client pytest -vs```## ReleasingNew tags that pass on CI will automatically be pushed to docker hub.To deploy to PyPI requires manually running the following commands.```pip3 install twinepython3 setup.py sdist bdist_wheeltwine upload dist/*```</longdescription>
</pkgmetadata>