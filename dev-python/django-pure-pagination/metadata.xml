<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======================django-pure-pagination======================.. image:: https://travis-ci.org/hovel/django-pure-pagination.svg?branch=master    :target: https://travis-ci.org/hovel/django-pure-paginationDescription======================:Author:    James Pacileo `@ignighted &lt;http://twitter.com/ignighted&gt;`_:Version:    0.3.0:Description:    django-pure-pagination provides advanced pagination features and is fully compatible with existing code based on Django's core pagination module. (aka no need to rewrite code!):Requirements:    Django 1.7+:Contributors:    `juandecarrion (Juande Carrion) &lt;https://github.com/juandecarrion&gt;`_, `twidi (Stéphane Angel) &lt;https://github.com/twidi&gt;`_, `bebraw (Juho Vepsäläinen) &lt;https://github.com/bebraw&gt;`_, `lampslave () &lt;https://github.com/lampslave&gt;`_, `GeyseR (Sergey Fursov) &lt;https://github.com/GeyseR&gt;`_, `zeus (Pavel Zhukov) &lt;https://github.com/zeus&gt;`_Introduction============The django app offers advanced pagination features without forcing major code changes within an existing project.Django-pure-pagination is based upon Django's core pagination module and is therefore compatible with the existing api.`Documentation for Django core pagination module &lt;http://docs.djangoproject.com/en/dev/topics/pagination/&gt;`_Features--------1. Uses same API as **django.core.pagination** and therefore is fully compatible with existing code.2. Has dynamic query string creation, which takes into consideration existing GET parameters.3. Out-of-the-box html rendering of the pagination4. Additional methods make it easier to render more advanced pagination templates.Installation------------Install package from PYPI:::    pip install django-pure-paginationor clone and install from repository:::    git clone git@github.com:jamespacileo/django-pure-pagination.git    cd django-pure-pagination    python setup.py installAdd `pure_pagination` to INSTALLED_APPS::    INSTALLED_APPS = (        ...        'pure_pagination',    )Finally substitute **from django.core.paginator import Paginator** with **from pure_pagination import Paginator**Settings--------A few settings can be set within settings.py::    PAGINATION_SETTINGS = {        'PAGE_RANGE_DISPLAYED': 10,        'MARGIN_PAGES_DISPLAYED': 2,        'SHOW_FIRST_PAGE_WHEN_INVALID': True,    }**PAGE_RANGE_DISPLAYED** is the number of pages neighbouring the current page which will be displayed (default is 10)**MARGIN_PAGES_DISPLAYED** is the number of pages neighbouring the first and last page which will be displayed (default is 2)Set **SHOW_FIRST_PAGE_WHEN_INVALID** to True when you want to just show first page when provided invalid page instead of 404 error.. image:: http://i.imgur.com/LCqrt.gifUsage example-------------Following is a simple example for **function based views**. For generic class-based views, see bellow.view file: **views.py**::    # views.py    from django.shortcuts import render_to_response    from pure_pagination import Paginator, EmptyPage, PageNotAnInteger    def index(request):        try:            page = request.GET.get('page', 1)        except PageNotAnInteger:            page = 1        objects = ['john', 'edward', 'josh', 'frank']        # Provide Paginator with the request object for complete querystring generation        p = Paginator(objects, request=request)        people = p.page(page)        return render_to_response('index.html', {            'people': people,        }template file: **index.html**::    {# index.html #}    {% extends 'base.html' %}    {% block content %}    {% for person in people.object_list %}        &lt;div&gt;            First name: {{ person }}        &lt;/div&gt;    {% endfor %}    {# The following renders the pagination html #}    &lt;div id=&quot;pagination&quot;&gt;        {{ people.render }}    &lt;/div&gt;    {% endblock %}Usage-----There a few different way you can make use of the features introduced within django-pure-pagination.Easiest way to render the pagination is to call the render method i.e. **{{ page.render }}**Alternatively you can access the Page object low level methods yourself**Special note:** **page_obj** and **current_page** both point to the page object within the template.::    {% load i18n %}    &lt;div class=&quot;pagination&quot;&gt;        {% if page_obj.has_previous %}            &lt;a href=&quot;?{{ page_obj.previous_page_number.querystring }}&quot; class=&quot;prev&quot;&gt;&amp;lsaquo;&amp;lsaquo; {% trans &quot;previous&quot; %}&lt;/a&gt;        {% else %}            &lt;span class=&quot;disabled prev&quot;&gt;&amp;lsaquo;&amp;lsaquo; {% trans &quot;previous&quot; %}&lt;/span&gt;        {% endif %}        {% for page in page_obj.pages %}            {% if page %}                {% ifequal page page_obj.number %}                    &lt;span class=&quot;current page&quot;&gt;{{ page }}&lt;/span&gt;                {% else %}                    &lt;a href=&quot;?{{ page.querystring }}&quot; class=&quot;page&quot;&gt;{{ page }}&lt;/a&gt;                {% endifequal %}            {% else %}                ...            {% endif %}        {% endfor %}        {% if page_obj.has_next %}            &lt;a href=&quot;?{{ page_obj.next_page_number.querystring }}&quot; class=&quot;next&quot;&gt;{% trans &quot;next&quot; %} &amp;rsaquo;&amp;rsaquo;&lt;/a&gt;        {% else %}            &lt;span class=&quot;disabled next&quot;&gt;{% trans &quot;next&quot; %} &amp;rsaquo;&amp;rsaquo;&lt;/span&gt;        {% endif %}    &lt;/div&gt;Generic Class-Based Views-------------------------Documentation for Django generic class-based views on https://docs.djangoproject.com/en/dev/ref/class-based-views/view file:* **views.py**    ::        # views.py        from django.views.generic import ListView        from pure_pagination.mixins import PaginationMixin        from my_app.models import MyModel        class MyModelListView(PaginationMixin, ListView):            # Important, this tells the ListView class we are paginating            paginate_by = 10            # Replace it for your model or use the queryset attribute instead            object = MyModeltemplate files:Note that the Django generic-based list view will include the object **page_obj** in the context. More information on https://docs.djangoproject.com/en/dev/ref/generic-views/#list-detail-generic-views* **_pagination.html**    ::        {% load i18n %}        &lt;div class=&quot;pagination&quot;&gt;            {% if page_obj.has_previous %}                &lt;a href=&quot;?{{ page_obj.previous_page_number.querystring }}&quot; class=&quot;prev&quot;&gt;&amp;lsaquo;&amp;lsaquo; {% trans &quot;previous&quot; %}&lt;/a&gt;            {% else %}                &lt;span class=&quot;disabled prev&quot;&gt;&amp;lsaquo;&amp;lsaquo; {% trans &quot;previous&quot; %}&lt;/span&gt;            {% endif %}            {% for page in page_obj.pages %}                {% if page %}                    {% ifequal page page_obj.number %}                        &lt;span class=&quot;current page&quot;&gt;{{ page }}&lt;/span&gt;                    {% else %}                        &lt;a href=&quot;?{{ page.querystring }}&quot; class=&quot;page&quot;&gt;{{ page }}&lt;/a&gt;                    {% endifequal %}                {% else %}                    ...                {% endif %}            {% endfor %}            {% if page_obj.has_next %}                &lt;a href=&quot;?{{ page_obj.next_page_number.querystring }}&quot; class=&quot;next&quot;&gt;{% trans &quot;next&quot; %} &amp;rsaquo;&amp;rsaquo;&lt;/a&gt;            {% else %}                &lt;span class=&quot;disabled next&quot;&gt;{% trans &quot;next&quot; %} &amp;rsaquo;&amp;rsaquo;&lt;/span&gt;            {% endif %}        &lt;/div&gt;*  **my_app/myobject_list.html**    ::        {# my_app/myobject_list.html #}        {% extends 'base.html' %}        {% block content %}        {% for object in object_list %}            &lt;div&gt;                First name: {{ object.first_name }}            &lt;/div&gt;        {% endfor %}        {# The following renders the pagination html #}        {% include &quot;_pagination.html&quot; %}        {% endblock %}</longdescription>
</pkgmetadata>