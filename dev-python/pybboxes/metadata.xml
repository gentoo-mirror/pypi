<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;PyBboxes&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://pypi.org/project/pybboxes&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/pybboxes?color=blue&quot; alt=&quot;Python versions&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pepy.tech/project/pybboxes&quot;&gt;&lt;img src=&quot;https://pepy.tech/badge/pybboxes&quot; alt=&quot;Total downloads&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/pybboxes&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/dm/pybboxes?color=blue&quot; alt=&quot;Monthly downloads&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pypi.org/project/pybboxes&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/pybboxes&quot; alt=&quot;Python versions&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/devrimcavusoglu/pybboxes/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/workflow/status/devrimcavusoglu/pybboxes/Tests&quot; alt=&quot;DOI&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/devrimcavusoglu/pybboxes/blob/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/devrimcavusoglu/pybboxes&quot; alt=&quot;Python versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;Light weight toolkit for bounding boxes providing conversion between bounding box types and simple computations. Supported bounding box types (&lt;ins&gt;italicized text indicates normalized values&lt;/ins&gt;):- **albumentations** : [Albumentations Format](https://albumentations.ai/docs/getting_started/bounding_boxes_augmentation/#albumentations)  - **_[x-tl, y-tl, x-br, y-br]_** (Normalized VOC Format) Top-left coordinates &amp; Bottom-right coordinates- **coco** : [COCO (Common Objects in Context)](http://cocodataset.org/)  - **[x-tl, y-tl, w, h]** Top-left corner &amp; width &amp; height- **fiftyone** : [FiftyOne](https://github.com/voxel51/fiftyone)  - **_[x-tl, y-tl, w, h]_** (Normalized COCO Format) Top-left coordinates &amp; width &amp; height- **voc** : [Pascal VOC](http://host.robots.ox.ac.uk/pascal/VOC/)  - **[x-tl, y-tl, x-br, y-br]** Top-left coordinates &amp; Bottom-right coordinates- **yolo** : [YOLO](https://github.com/ultralytics/yolov5)  - **_[x-c, y-c, w, h]_** Center coordinates &amp; width &amp; height**Glossary**- **tl:** top-left- **br:** bottom-right- **h:** height- **w:** width- **c:** center### Important NoticeSupport for Python&lt;3.8 will be dropped starting version `0.2` though the development for Python3.6 and Python3.7 may continue where it will be developed under version `0.1.x` for future versions. This may introduce; however, certain discrepancies and/or unsupported operations in the `0.1.x` versions. To fully utilize and benefit from the entire package, we recommend using Python3.8 at minimum (`Python&gt;=3.8`).## InstallationThrough pip (recommended),    pip install pybboxesor build from source,    git clone https://github.com/devrimcavusoglu/pybboxes.git    cd pybboxes    python setup.py install## Bounding BoxesYou can easily create bounding box as easy as```pythonfrom pybboxes import BoundingBoxmy_coco_box = [98, 345, 322, 117]coco_bbox = BoundingBox.from_coco(*my_coco_box)  # &lt;[98 345 322 117] (322x117) | Image: (?x?)&gt;# or alternatively# coco_bbox = BoundingBox.from_array(my_coco_box)```### Out of Bounds BoxesPybboxes supports OOB boxes, there exists a keyword `strict` in both Box classes (construction) and in functional modules. When `strict=True`, it does not allow out-of-bounds boxes to be constructed and raises an exception, while it does allow out-of-bounds boxes to be constructed and used when `strict=False`. Also, there is a property `is_oob` that indicates whether a particular bouding box is OOB or not. **Important** Note that, if the return value for `is_oob` is `None`, then it indicates that OOB status is unknown (e.g. image size required to determine, but not given). Thus, values `None` and `False` indicates different information.```pythonfrom pybboxes import BoundingBoximage_size = (640, 480)my_coco_box = [98, 345, 580, 245]  # OOB box for 640x480coco_bbox = BoundingBox.from_coco(*my_coco_box, image_size=image_size)  # Exception# ValueError: Given bounding box values is out of bounds. To silently skip out of bounds cases pass 'strict=False'.coco_bbox = BoundingBox.from_coco(*my_coco_box, image_size=image_size, strict=False)  # No Exceptioncoco_bbox.is_oob  # True```If you want to allow OOB, but still check OOB status, you should use `strict=False` and `is_oob` where needed.### ConversionWith the `BoundingBox` class the conversion is as easy as one method call.```pythonfrom pybboxes import BoundingBoxmy_coco_box = [98, 345, 322, 117]coco_bbox = BoundingBox.from_coco(*my_coco_box)  # &lt;[98 345 322 117] (322x117) | Image: (?x?)&gt;voc_bbox = coco_bbox.to_voc()  # &lt;[98 345 420 462] (322x117) | Image: (?x?)&gt;voc_bbox_values = coco_bbox.to_voc(return_values=True)  # (98, 345, 420, 462)```However, if you try to make conversion between two bounding boxes that require scaling/normalization it'll give an error```pythonfrom pybboxes import BoundingBoxmy_coco_box = [98, 345, 322, 117]coco_bbox = BoundingBox.from_coco(*my_coco_box)  # &lt;[98 345 322 117] (322x117) | Image: (?x?)&gt;# yolo_bbox = coco_bbox.to_yolo()  # this will raise an exception# You need to set image_size for coco_bbox and then you're good to gococo_bbox.image_size = (640, 480)yolo_bbox = coco_bbox.to_yolo()  # &lt;[0.4047 0.8406 0.5031 0.2437] (322x117) | Image: (640x480)&gt;```Image size associated with the bounding box can be given at the instantiation or while using classmethods e.g `from_coco()`.```pythonfrom pybboxes import BoundingBoxmy_coco_box = [98, 345, 322, 117]coco_bbox = BoundingBox.from_coco(*my_coco_box, image_size=(640, 480))  # &lt;[98 345 322 117] (322x117) | Image: (640x480)&gt;# no longer raises exceptionyolo_bbox = coco_bbox.to_yolo()  # &lt;[0.4047 0.8406 0.5031 0.2437] (322x117) | Image: (640x480)&gt; ```### Box operationsBox operations now available as of `v0.1.0`.```pythonfrom pybboxes import BoundingBoxmy_coco_box = [98, 345, 322, 117]my_coco_box2 = [90, 350, 310, 122]coco_bbox = BoundingBox.from_coco(*my_coco_box, image_size=(640, 480))coco_bbox2 = BoundingBox.from_coco(*my_coco_box2, image_size=(640, 480))iou = coco_bbox.iou(coco_bbox2)  # 0.8117110631149508area_union = coco_bbox + coco_bbox2  # 41670 | alternative way: coco_bbox.union(coco_bbox2)total_area = coco_bbox.area + coco_bbox2.area  # 75494  (not union)intersection_area = coco_bbox * coco_bbox2  # 33824 | alternative way: coco_bbox.intersection(coco_bbox2)first_bbox_diff = coco_bbox - coco_bbox2  # 3850second_bbox_diff = coco_bbox2 - coco_bbox  # 3996bbox_ratio = coco_bbox / coco_bbox2 # 0.9961396086726599 (not IOU)```## Functional**Note**: functional computations are moved under `pybboxes.functional` starting with the version `0.1.0`. The only exception is that  `convert_bbox()` which still can be used by importing `pybboxes` only (for backward compatibility).### ConversionYou are able to convert from any bounding box type to another.```pythonimport pybboxes as pbxcoco_bbox = (1,2,3,4)  # COCO Format bbox as (x-tl,y-tl,w,h)voc_bbox = (1,2,3,4)  # Pascal VOC Format bbox as (x-tl,y-tl,x-br,y-br)pbx.convert_bbox(coco_bbox, from_type=&quot;coco&quot;, to_type=&quot;voc&quot;)  # (1, 2, 4, 6)pbx.convert_bbox(voc_bbox, from_type=&quot;voc&quot;, to_type=&quot;coco&quot;)  # (1, 2, 2, 2)```Some formats require image width and height information for scaling, e.g. YOLO bbox (resulting coordinates are rounded to 2 decimals to ease reading).```pythonimport pybboxes as pbxvoc_bbox = (1,2,3,4)  # Pascal VOC Format bbox as (x-tl,y-tl,x-br,y-br)pbx.convert_bbox(voc_bbox, from_type=&quot;voc&quot;, to_type=&quot;yolo&quot;, image_size=(28, 28))  # (0.07, 0.11, 0.07, 0.07)```### ComputationYou can also make computations on supported bounding box formats.```pythonimport pybboxes.functional as pbfcoco_bbox = (1,2,3,4)  # COCO Format bbox as (x-tl,y-tl,w,h)voc_bbox = (1,2,3,4)  # Pascal VOC Format bbox as (x-tl,y-tl,x-br,y-br)pbf.compute_area(coco_bbox, bbox_type=&quot;coco&quot;)  # 12pbf.compute_area(voc_bbox, bbox_type=&quot;voc&quot;)  # 4```## Contributing### InstallationInstall the package as follows, which will set you ready for the development mode.```shellpip install -e .[dev]```### TestsTo tests simply run.    python tests/run_tests.py### Code StyleTo check code style,    python tests/run_code_style.py checkTo format codebase,    python tests/run_code_style.py format## LicenseLicensed under the [MIT](LICENSE) License.</longdescription>
</pkgmetadata>