<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpyAPI - JsonSchema and OpenAPI tools for python &lt;br&gt; [![CI](https://github.com/kodemore/opyapi/actions/workflows/main.yaml/badge.svg)](https://github.com/kodemore/opyapi/actions/workflows/main.yaml) [![Release](https://github.com/kodemore/opyapi/actions/workflows/release.yml/badge.svg)](https://github.com/kodemore/opyapi/actions/workflows/release.yml) [![codecov](https://codecov.io/gh/kodemore/opyapi/branch/main/graph/badge.svg?token=KWFTWSKPKJ)](https://codecov.io/gh/kodemore/opyapi) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)JsonSchema and OpenAPI tools for python.## Features- Validation builder for json schema- Custom string formatters support- Full JsonSchema draft-7 support- Support for JsonReferences, $anchor- Dataclass generation from OpenAPI schema- Great performance## InstallationWith pip,```shellpip install opyapi```or through poetry```shellpoetry add opyapi```# Usage&gt; It is recommended to get familiar with json-schema if you haven't yet. &gt; [Understanding Json Schema](https://json-schema.org/understanding-json-schema/index.html) is a great place to start and learn Json Schema's basics## Simple usageLibrary can be used to validate data, against defined json-schema like so:```pythonfrom opyapi import validateassert validate(    {&quot;name&quot;: &quot;Test&quot;, &quot;age&quot;:12},     {        &quot;type&quot;: &quot;object&quot;,        &quot;properties&quot;: {            &quot;name&quot;: {                &quot;type&quot;: &quot;string&quot;,            },            &quot;age&quot;: {              &quot;type&quot;: &quot;integer&quot;,              }        }    })```## Using referencesValidating documents against complex schemas is also possible,please consider the following example with json references:```pythonfrom opyapi import validateschema = {    &quot;type&quot;: &quot;object&quot;,    &quot;properties&quot;: {        &quot;name&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;minLength&quot;: 2,        },        &quot;email&quot;: {            &quot;$ref&quot;: &quot;#/$defs/email&quot;        }    },    &quot;$defs&quot;: {        &quot;email&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;format&quot;: &quot;email&quot;        }    }}validate({&quot;name&quot;: &quot;Bob&quot;, &quot;email&quot;: &quot;bob@test.com&quot;}, schema)```## Custom string formats support```pythonfrom opyapi import StringFormat, validateimport redef my_format_validator(value: str) -&gt; str:    if re.match(&quot;^my-&quot;, value):        return value    raise ValueError(f&quot;Could not validate {value}&quot;)StringFormat[&quot;my-format&quot;] = my_format_validatorvalidate(&quot;my-test&quot;, {&quot;type&quot;: &quot;string&quot;, &quot;format&quot;: &quot;my-format&quot;})  # passesvalidate(&quot;test&quot;, {&quot;type&quot;: &quot;string&quot;, &quot;format&quot;: &quot;my-format&quot;})  # fails```&gt; In the above example `opyapi.StringFormat` is used to register new custom format,&gt; which is recognised during validation.## Re-using validatorsThere are scenarios where same validator should be used multiple times,in these scenarios to improve performance it is better to use `build_validator_for` which returns a validator function for the passed schema:```pythonfrom opyapi import build_validator_formy_validator = build_validator_for({    &quot;type&quot;: &quot;object&quot;,    &quot;properties&quot;: {        &quot;name&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;minLength&quot;: 2,        },        &quot;email&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;format&quot;: &quot;email&quot;,        }    },})assert my_validator({&quot;name&quot;: &quot;Bob&quot;, &quot;email&quot;: &quot;bob@email.com&quot;})```## Catching errors`opyapi` provides versatile error package, which is really simple to use. You are only required to define try/except block within you can catch one of the errors defined in the package depending on your scenario.```pythonfrom opyapi import build_validator_forfrom opyapi.errors import ValidationErrormy_validator = build_validator_for({    &quot;type&quot;: &quot;object&quot;,    &quot;properties&quot;: {        &quot;name&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;minLength&quot;: 2,        },        &quot;email&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;format&quot;: &quot;email&quot;,        }    },})try:    my_validator({&quot;name&quot;: &quot;Bob&quot;, &quot;email&quot;: &quot;invalid&quot;})except ValidationError as e:    print(f&quot;Validation failed from the reason: {e}&quot;)```### Errors structureThe following graph represents exception used in `opyapi`. All exceptions are part of `opyapi.errors` module.```ValueError    ┗━ ValidationError            ┣━ TypeValidationError            ┣━ EnumValidationError            ┣━ FormatValidationError            ┣━ ItemsValidationError            ┃           ┣━ UniqueItemsValidationError            ┃           ┣━ AdditionalItemsValidationError            ┃           ┣━ MinimumItemsValidationError            ┃           ┗━ MaximumItemsValidationError            ┣━ MultipleOfValidationError            ┣━ ComparisonValidationError            ┃           ┣━ EqualityValidationError            ┃           ┗━ RangeValidationError            ┃                       ┣━ MinimumValidationError            ┃                       ┣━ MaximumValidationError            ┃                       ┣━ ExclusiveMinimumValidationError            ┃                       ┗━ ExclusiveMaximumValidationError            ┗━ ObjectValidationError                        ┣━ PropertyValidationError                        ┃           ┣━ RequiredPropertyValidationError                        ┃           ┣━ PropertyValueValidationError                        ┃           ┣━ PropertyNameValidationError                        ┃           ┗━ AdditionalPropertiesValidationError                        ┣━ ObjectSizeValidationError                        ┃           ┣━ MinimumPropertiesValidationError                        ┃           ┗━ MaximumPropertiesValidationError                        ┗━ DependencyValidationError```#### `opyapi.errors.ValidationError`Generic validation error.#### `opyapi.errors.TypeValidationError`Raised when passed type does not conform type defined in the schema.&gt; Can be triggered by following example schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;integer&quot;&gt; }&gt; ```#### `opyapi.errors.EnumValidationError`Raised when value does not conform enum definition.&gt; Can be triggered by following example schema:&gt; ```json&gt; {&gt;   &quot;enum&quot;: [&quot;integer&quot;, &quot;string&quot;, &quot;boolean&quot;]&gt; }&gt; ```#### `opyapi.errors.FormatValidationError`Raised when value does not conform defined format in string schema.&gt; Can be triggered by following example schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;string&quot;,&gt;   &quot;format&quot;: &quot;date-time&quot;&gt; }&gt; ```#### `opyapi.errors.ItemsValidationError`Generic Exception raised when validation of an array fails for some reason.#### `opyapi.errors.UniqueItemsValidationError`Raised when items in an array are expected to be unique but passed value does not conform the requirement. This exception extends generic `opyapi.errors.ItemsValidationError` exception.&gt; Can be triggered by following example schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;array&quot;,&gt;   &quot;uniqueItems&quot;: true&gt; }&gt; ```#### `opyapi.errors.AdditionalItemsValidationError`Raised when additional items in an array either does not conform the schema or are not expected.This exception extends generic `opyapi.errors.ItemsValidationError` exception.&gt; Can be triggered by the following schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;array&quot;,&gt;   &quot;items&quot;: [&gt;     {&quot;type&quot;: &quot;string&quot;},&gt;     {&quot;type&quot;:  &quot;integer&quot;}        &gt;   ],&gt;   &quot;additionalItems&quot;: false&gt; }&gt; ```#### `opyapi.errors.MinimumItemsValidationError`, `opyapi.errors.MaximumItemsValidationError`Raised when number of items in an array does not conform maximum or minimum items specified in schema.This exception extends generic `opyapi.errors.ItemsValidationError` exception.&gt; Can be triggered by following example schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;array&quot;,&gt;   &quot;minimumItems&quot;: 2,&gt;   &quot;MaximumItems&quot;: 10&gt; }&gt; ```#### `opyapi.errors.MultipleOfValidationError`Raised when validated number is not multiplication of passed value.&gt; Can be triggered by following example schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;numerical&quot;,&gt;   &quot;multipleOf&quot;: 2&gt; }&gt; ```#### `opyapi.errors.ComparisonValidationError`Raised when comparison operation fails. This is a generic exception used by other comparison errors.#### `opyapi.errors.EqualityValidationError`Raised when validated value is not the same as defined expected value. This exception extends `opyapi.errors.ComparisonValidationError`.&gt; Can be triggered by following example schema:&gt; ```json&gt; {&gt;   &quot;const&quot;: &quot;test&quot;&gt; }&gt; ```#### `opyapi.errors.RangeValidationError`Raised when (exclusive) minimum, (exclusive) maximum comparisons fail. This exception extends `opyapi.errors.ComparisonValidationError`.#### `opyapi.errors.MinimumValidationError`, `opyapi.errors.MaximumValidationError`, `opyapi.errors.ExclusiveMinimumValidationError`, `opyapi.errors.ExclusiveMaximumValidationError`Raised when passed numerical (or integer) value is not within expected range defined in schema.&gt; Can be triggered by the following example schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;numerical&quot;,&gt;   &quot;minimum&quot;: 2&gt; }&gt; ```#### `opyapi.errors.ObjectValidationError`Generic exception raised when validation of an object fails for some reason.#### `opyapi.errors.PropertyValidationError`Generic exception raised when validation of object's property fails for some reason. This exception extends `opyapi.errors.ObjectValidationError` exception.#### `opyapi.errors.RequiredPropertyValidationError`Raised when required property is not present in passed object.This exception extends `opyapi.errors.PropertyValidationError` exception.&gt; Can be triggered by the following example schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;object&quot;,&gt;   &quot;properties&quot;: {&gt;     &quot;name&quot; : {&quot;type&quot;: &quot;string&quot;}&gt;   },&gt;   &quot;required&quot;: [&quot;name&quot;]&gt; }&gt; ```#### `opyapi.errors.PropertyValueValidationError`Raised when property contains invalid value. This exception extends `opyapi.errors.PropertyValidationError` exception.&gt; Can be triggered by the following example schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;object&quot;,&gt;   &quot;properties&quot;: {&gt;     &quot;name&quot; : {&quot;type&quot;: &quot;string&quot;}&gt;   }&gt; }&gt; ```#### `opyapi.errors.PropertyNameValidationError`Raised when property's names does not conform defined schema. This exception extends `opyapi.errors.PropertyValidationError` exception.&gt; Can be triggered by the following example schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;object&quot;,&gt;   &quot;properties&quot;: {&gt;     &quot;name&quot; : {&quot;type&quot;: &quot;string&quot;}&gt;   },&gt;   &quot;propertyNames&quot;: {&gt;     &quot;pattern&quot;: &quot;^x-&quot; &gt;   }&gt; }&gt; ```#### `opyapi.errors.AdditionalPropertiesValidationError`Raised when additional properties are not allowed or set schema is not followed. This exception extends `opyapi.errors.PropertyValidationError` exception.&gt; Can be triggered by the following example schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;object&quot;,&gt;   &quot;properties&quot;: {&gt;     &quot;name&quot; : {&quot;type&quot;: &quot;string&quot;}&gt;   },&gt;   &quot;additionalProperties&quot;: false&gt; }&gt; ```#### `opyapi.errors.ObjectSizeValidationError`Generic exception raised when number of properties does not conform defined schema. This exception extends `opyapi.errors.ObjectValidationError` exception.#### `opyapi.errors.MinimumPropertiesValidationError`, `opyapi.errors.MaximumPropertiesValidationError`Generic exception raised when number of properties does not conform defined schema. These exceptions extend `opyapi.errors.ObjectSizeValidationError`exception.&gt; Can be triggered by the following example schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;object&quot;,&gt;   &quot;properties&quot;: {&gt;     &quot;name&quot; : {&quot;type&quot;: &quot;string&quot;}&gt;   },&gt;   &quot;minProperties&quot;: 2,&gt;   &quot;maxProperties&quot;: 10&gt; }&gt; ```#### `opyapi.errors.DependencyValidationError`Raised when dependent properties are defined in the schema but not provided in a passed object. This exception extends `opyapi.errors.ObjectValidationError` exception.&gt; Can be triggered by the following example schema:&gt; ```json&gt; {&gt;   &quot;type&quot;: &quot;object&quot;,&gt;   &quot;properties&quot;: {&gt;     &quot;name&quot; : {&quot;type&quot;: &quot;string&quot;}&gt;   },&gt;   &quot;dependentRequired&quot;: {&gt;     &quot;name&quot;: [&quot;first_name&quot;, &quot;last_name&quot;]&gt;   }&gt; }&gt; ```## API### `validate(obj: typing.Any, schema: typing.Union[dict, opyapi.JsonSchema]): typing.Any`Validates passed object `obj`, and if valid returns the object, otherwise raises a `ValueError` exception.```pythonfrom opyapi import validateassert validate(    {&quot;name&quot;: &quot;Test&quot;, &quot;age&quot;:12},     {        &quot;type&quot;: &quot;object&quot;,        &quot;properties&quot;: {            &quot;name&quot;: {                &quot;type&quot;: &quot;string&quot;,            },            &quot;age&quot;: {              &quot;type&quot;: &quot;integer&quot;,              }        }    })```### `build_validator_for(schema: typing.Union[dict, JsonSchema]) -&gt; Callable`Creates validator function for passed json schema and returns it as a result.```pythonfrom opyapi import build_validator_forvalidator =  build_validator_for({    &quot;type&quot;: &quot;object&quot;,    &quot;properties&quot;: {        &quot;name&quot;: {            &quot;type&quot;: &quot;string&quot;,        },        &quot;age&quot;: {          &quot;type&quot;: &quot;integer&quot;,          }    }})```</longdescription>
</pkgmetadata>