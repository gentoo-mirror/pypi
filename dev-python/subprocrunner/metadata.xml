<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. contents:: **subprocrunner**   :backlinks: top   :depth: 2Summary=============A Python wrapper library for ``subprocess`` module... image:: https://badge.fury.io/py/subprocrunner.svg    :target: https://badge.fury.io/py/subprocrunner    :alt: PyPI package version.. image:: https://img.shields.io/pypi/pyversions/subprocrunner.svg    :target: https://pypi.org/project/subprocrunner    :alt: Supported Python versions.. image:: https://img.shields.io/pypi/implementation/subprocrunner.svg    :target: https://pypi.org/project/subprocrunner    :alt: Supported Python implementations.. image:: https://github.com/thombashi/subprocrunner/actions/workflows/lint_and_test.yml/badge.svg    :target: https://github.com/thombashi/subprocrunner/actions/workflows/lint_and_test.yml    :alt: CI status of Linux/macOS/Windows.. image:: https://coveralls.io/repos/github/thombashi/subprocrunner/badge.svg?branch=master    :target: https://coveralls.io/github/thombashi/subprocrunner?branch=master    :alt: Test coverageUsage========Execute a command----------------------------:Sample Code:    .. code:: python        from subprocrunner import SubprocessRunner        runner = SubprocessRunner([&quot;echo&quot;, &quot;test&quot;])        print(runner)        print(f&quot;return code: {runner.run()}&quot;)        print(f&quot;stdout: {runner.stdout}&quot;)                runner = SubprocessRunner([&quot;ls&quot;, &quot;__not_exist_dir__&quot;])        print(runner)        print(f&quot;return code: {runner.run()}&quot;)        print(f&quot;stderr: {runner.stderr}&quot;)        :Output:    .. code::        SubprocessRunner(command='echo test', returncode='not yet executed')        return code: 0        stdout: test                SubprocessRunner(command='ls __not_exist_dir__', returncode='not yet executed')        return code: 2        stderr: ls: cannot access '__not_exist_dir__': No such file or directoryExecute a command with retry--------------------------------------------------------:Sample Code:    .. code:: python        from subprocrunner import Retry, SubprocessRunner        SubprocessRunner(command).run(retry=Retry(total=3, backoff_factor=0.2, jitter=0.2))Raise an exception when a command execution failed--------------------------------------------------------:Sample Code:    .. code:: python        import sys        from subprocrunner import SubprocessRunner        from subprocrunner.error import CalledProcessError        runner = SubprocessRunner(&quot;ls not-exist-dir&quot;)        # raise an exception at run        try:            runner.run(check=True)        except CalledProcessError as e:            print(f&quot;run(check=True): {e}\n{e.stderr}&quot;, file=sys.stderr)        # raise an exception after run        runner.run()        try:            runner.raise_for_returncode()        except CalledProcessError as e:            print(f&quot;raise_for_returncode(): {e}\n{e.stderr}&quot;, file=sys.stderr):Output:    .. code::        run(check=True): Command 'ls not-exist-dir' returned non-zero exit status 2.        ls: cannot access 'not-exist-dir': No such file or directory        raise_for_returncode(): Command 'ls not-exist-dir' returned non-zero exit status 2.        ls: cannot access 'not-exist-dir': No such file or directorydry run----------------------------Commands are not actually run when passing ``dry_run=True`` to ``SubprocessRunner`` class constructor.:Sample Code:    .. code:: python        from subprocrunner import SubprocessRunner        runner = SubprocessRunner(&quot;echo test&quot;, dry_run=True)        print(runner)        print(f&quot;return code: {runner.run()}&quot;)        print(f&quot;stdout: {runner.stdout}&quot;)        :Output:    .. code::        SubprocessRunner(command='echo test', returncode='not yet executed', dryrun=True)        return code: 0        stdout: Get execution command history--------------------------------------------------------:Sample Code:    .. code:: python        from subprocrunner import SubprocessRunner        SubprocessRunner.clear_history()        SubprocessRunner.is_save_history = True                SubprocessRunner([&quot;echo&quot;, &quot;hoge&quot;]).run()        SubprocessRunner([&quot;echo&quot;, &quot;foo&quot;]).run()                print(&quot;\n&quot;.join(SubprocessRunner.get_history())):Output:    .. code::        echo hoge        echo fooGet a command information----------------------------.. code-block:: pycon    &gt;&gt;&gt; from subprocrunner import Which    &gt;&gt;&gt; which = Which(&quot;ls&quot;)    &gt;&gt;&gt; which.is_exist()    True    &gt;&gt;&gt; which.abspath()    '/usr/bin/ls'    &gt;&gt;&gt; which    command=ls, is_exist=True, abspath=/usr/bin/lsInstallation============Install from PyPI------------------------------::    pip install subprocrunnerInstall from PPA (for Ubuntu)------------------------------::    sudo add-apt-repository ppa:thombashi/ppa    sudo apt update    sudo apt install python3-subprocrunnerDependencies============- Python 3.6+- `Python package dependencies (automatically installed) &lt;https://github.com/thombashi/subprocrunner/network/dependencies&gt;`__Optional dependencies----------------------------------- `loguru &lt;https://github.com/Delgan/loguru&gt;`__    - Used for logging if the package installed</longdescription>
</pkgmetadata>