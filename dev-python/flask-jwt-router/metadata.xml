<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Python package](https://github.com/joegasewicz/flask-jwt-router/actions/workflows/python-package.yml/badge.svg)](https://github.com/joegasewicz/flask-jwt-router/actions/workflows/python-package.yml)[![PyPI version](https://badge.fury.io/py/flask-jwt-router.svg)](https://badge.fury.io/py/flask-jwt-router)[![codecov](https://codecov.io/gh/joegasewicz/Flask-JWT-Router/branch/master/graph/badge.svg)](https://codecov.io/gh/joegasewicz/Flask-JWT-Router)[![Codacy Badge](https://api.codacy.com/project/badge/Grade/c15de26af47d48448392eaa5e0e41bcf)](https://www.codacy.com/manual/joegasewicz/Flask-JWT-Router?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=joegasewicz/Flask-JWT-Router&amp;amp;utm_campaign=Badge_Grade)[![Documentation Status](https://readthedocs.org/projects/flask-jwt-router/badge/?version=latest)](https://flask-jwt-router.readthedocs.io/en/latest/?badge=latest)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/flask-jwt-router)[![GitHub license](https://img.shields.io/github/license/joegasewicz/flask-jwt-router)](https://github.com/joegasewicz/flask-jwt-router/blob/master/LICENSE.txt)![Flask JWT Router](assets/logo.png?raw=true &quot;Title&quot;)Read the docs: [Flask-JWT-Router](https://flask-jwt-router.readthedocs.io/en/latest/) # Flask JWT RouterFlask JWT Router is a Python library that adds authorised routes to a Flask app. Both basic &amp; Google's OAuth2.0 authenticationis supported.## ![Google-Cloud](assets/Google-Cloud1.png) Google's OAuth2.0 supported## Quik Start```pythonfrom flask_jwt_router import JwtRoutesjwt_routes = JwtRoutes()jwt_routes.init_app(    app,    entity_models=[MyModel],)```Now your front end needs a token. Create an endpoint &amp;return a new access token from the clients header *code*.For Example::```pythonfrom flask import request@app.routes(&quot;/login&quot;, methods=[&quot;POST&quot;])def login():    jwt_routes.google.oauth_login(request) # Pass in Flask's request```Now, the next time your front-end requests authorised resourcesflask-jwt-router will authenticate with this access token untilit expires.## InstallationStable version```bashpip install flask-jwt-router```## Basic Usage ```pythonfrom flask import Flaskfrom flask_jwt_router import JwtRoutesapp = Flask(__name__)# You are required to always set a unique SECRET_KEY for your appapp.config[&quot;SECRET_KEY&quot;] = &quot;your_app_secret_key&quot;JwtRoutes(app)# If you're using the Flask factory pattern:jwt_routes = JwtRoutes()  # Example with *entity_model - see belowdef create_app(config):    ...    jwt_routes.init_app(app)```## Whitelist Routes```pythonapp.config[&quot;WHITE_LIST_ROUTES&quot;] = [    (&quot;POST&quot;, &quot;/register&quot;),]@app.route(&quot;/register&quot;, methods=[&quot;POST&quot;])def register():    return &quot;I don't need authorizing!&quot;```## Prefix your api name to whitelisted routes```python    # All routes willapp.config[&quot;JWT_ROUTER_API_NAME&quot;] = &quot;/api/v1&quot;app.config[&quot;WHITE_LIST_ROUTES&quot;] = [    (&quot;POST&quot;, &quot;/register&quot;),]@app.route(&quot;/api/v1/register&quot;, methods=[&quot;POST&quot;])def register():    return &quot;I don't need authorizing!&quot;   ```## Bypass Flask-JWT-Router on specified routes```python    # Define homepage template routes for example on JWT_IGNORE_ROUTES     # &amp; still get to use the api name on request handlers returning resources    app.config[&quot;IGNORED_ROUTES&quot;] = [        (&quot;GET&quot;, &quot;/&quot;)    ]```## Declare an entity model```python# Create your entity model (example uses Flask-SqlAlchemy)class UserModel(db.Model):    __tablename__ = &quot;users&quot;    id = db.Column(db.Integer, primary_key=True)    name = db.Column(db.String)    # You can define the primary key name with `ENTITY_KEY` on Flask's configapp.config[&quot;ENTITY_KEY&quot;] = &quot;user_id&quot;# (`id` is used by default)JwtRoutes(app, entity_models=[UserModel, TeacherModel, ...etc])# Or pass later with `init_app`def create_app(config):    ...    jwt_routes.init_app(app, entity_models=[UserModel, TeacherModel, ...etc])```## Authorization```pythonfrom your_app import jwt_routes# white list the routesapp.config[&quot;WHITE_LIST_ROUTES&quot;] = [    (&quot;POST&quot;, &quot;/register&quot;),    (&quot;POST&quot;, &quot;/login&quot;),]@app.route(&quot;/login&quot;, methods=[&quot;POST&quot;])def register():    &quot;&quot;&quot;I'm registering a new user &amp; returning a token!&quot;&quot;&quot;    return jsonify({        &quot;token&quot;: jwt_routes.create_token(entity_id=1, table_name='users')    })@app.route(&quot;/your_resource&quot;, methods=[&quot;POST&quot;])def login():    &quot;&quot;&quot;I'm authorized &amp; updating my token!&quot;&quot;&quot;    return jsonify({        &quot;token&quot;: jwt_routes.update_token(entity_id=1)    })```*Warning: The `table_name` must be the same as your tablename or `__tablename__` attribute's value.(With SqlAlchemy, you can define a `__tablename__` attribute directly or elsethe name is derived from your entityâ€™s database table name).## Setting the Token Expire DurationThere are two ways to set the expire duration of the JWT.from your app config```python        # Set the token expire duration to 7 days        app.config[&quot;JWT_EXPIRE_DAYS&quot;] = 7```calling the `set_exp````python        # Set the token expire duration to 14 days        jwt_routes = JwtRoutes()        # jwt_routes.init_app( ...etc        jwt_routes.set_exp(expire_days=14)```By default the expire duration is set to 30 days## Create &amp; update Tokens on RoutesCreate a new entity &amp; return a new token```python@app.route(&quot;/register&quot;, methods=[&quot;POST&quot;])    def register():        user_data = request.get_json()        try:            user = UserModel(**user_data)            user.create_user() # your entity creation logic            # Here we pass the id as a kwarg to `create_token`            token: str = jwt_routes.create_token(entity_id=user.id, table_name=&quot;users&quot;)            # Now we can return a new token!            return {                &quot;message&quot;: &quot;User successfully created.&quot;,                &quot;token&quot;: str(token),  # casting is optional            }, 200```Access entity on Flask's global context```python    from app import app, jwt_routes    # Example uses Marshmallow to serialize entity object    class EntitySchema(Schema):        id = fields.Integer()        name = fields.String()    @app.route(&quot;/login&quot;, methods=[&quot;GET&quot;])    def login():        user_data = g.get(&quot;users&quot;) # This is your SqlAlchemy `__tablename__` or the default name.        try:            user_dumped = UserSchema().dump(user_data)        except ValidationError as _:           return {                       &quot;error&quot;: &quot;User requested does not exist.&quot;                   }, 401        return {            &quot;data&quot;: user_dumped,            &quot;token&quot;: jwt_routes.update_token(entity_id=user_data.id),        }, 200        ```If you are handling a request with a token in the headers you can call::```python    jwt_routes.update_token(entity_id=user_data.id)```If you are handling a request without a token in the headers you can call::```python    jwt_routes.create_token(entity_id=user_data.id, table_name=&quot;users&quot;)```An Example configuration for registering &amp; logging in users of different types:```python    app.config[&quot;IGNORED_ROUTES&quot;] = [(&quot;GET&quot;, &quot;/&quot;)]    app.config[&quot;JWT_ROUTER_API_NAME&quot;] = &quot;/api/v1&quot;    app.config[&quot;WHITE_LIST_ROUTES&quot;] = [        (&quot;POST&quot;, &quot;/auth/user&quot;), (&quot;POST&quot;, &quot;/auth/user/login&quot;),        (&quot;POST&quot;, &quot;/auth/teacher&quot;), (&quot;POST&quot;, &quot;/auth/teacher/login&quot;),    ]        # Optionally, you can pass your models to Flask's config:    app.config[&quot;ENTITY_MODELS&quot;] = [ UserModel, TeacherModel, ...etc ]```## JSON Web Token setupTo send the JSON web token from your front end, you will need to pass a `Bearer` string in your authorization header.For example:```javascript    fetch(url, {        headers: {            Authorization: &quot;Bearer &lt;my_token&gt;&quot;,        }    })```### Routing without headersIf you require calling a resource without passing headers, then you can use the ``auth`` query param (useful when streaming video files):```python    url = &quot;http://example.com/cars?auth=my_token&quot;```### Google OAuth 2.0 Quick StartRead the detailed instructions here: [Flask-JWT-Router](https://flask-jwt-router.readthedocs.io/en/latest/google.html)```pythonfrom flask_jwt_router import Google, JwtRoutesoauth_options = {    &quot;client_id&quot;: &quot;&lt;CLIENT_ID&gt;&quot;,    &quot;client_secret&quot;: &quot;&lt;CLIENT_SECRET&gt;&quot;,    &quot;redirect_uri&quot;: &quot;http://localhost:3000&quot;,    &quot;tablename&quot;: &quot;users&quot;,    &quot;email_field&quot;: &quot;email&quot;,    &quot;expires_in&quot;: 3600,}jwt_routes = JwtRoutes()jwt_routes.init_app(    app,    google_oauth=oauth_options,    strategies=[Google],    entity_models=[MyModel],)```## Google OAuth 2.0 with ReactJSFlask-JWT-Router supports auth Google's OAuth 2.0 Single Sign On strategy if you are using React only.(We will provide Google's OAuth 2.0 Single Sign On strategy for server to server as soon as possible!).### Quick StartCreate a login route for Google's OAuth 2.0```python   @app.route(&quot;/api/v1/google_login&quot;, methods=[&quot;POST&quot;])    def google_login():        google = jwt_routes.get_strategy(&quot;Google&quot;)        data = google.oauth_login(request)        return data, 200```If your app requires multiple redirect uri's thenyou can use the `redirect_uri` kwarg to assign a uri for the currentrequest handler. For example:```pythongoogle = jwt_routes.get_strategy(&quot;Google&quot;)data = google.oauth_login(request, redirect=&quot;http://another_redirect.com&quot;)```We have created a ReactJS library specifically for Flask-JWT-Router - [react-google-oauth2.0](https://github.com/joegasewicz/react-google-oauth2.0)In your React app directory install react-google-oauth2.0:```bashnpm install react-google-oauth2 --save ```## TestingTesting OAuth2.0 in a Flask app is non-trivial, especially if you rely on Flask-JWT-Routerto append your user onto Flask's global context (or `g`). Therefore we have provided autility method that returns a headers Dict that you can then use in your test view handlerrequest. This example is using the Pytest library:```python    from flask_jwt_router import (        BaseJwtRoutes,        JwtRoutes,        Google,        GoogleTestUtil,        TestRoutingMixin,    )    class TestJwtRoutes(TestRoutingMixin, BaseJwtRoutes):        pass            if not Config.E2E_TEST:        jwt_routes = JwtRoutes()    else:        jwt_routes = TestJwtRoutes()    if not config.E2E_TEST:        jwt_routes.init_app(            app,            google_oauth=oauth_options,            strategies=[Google],            entity_models=[MyModel],        )    else:        jwt_routes.init_app(            app,            google_oauth=oauth_options,            strategies=[GoogleTestUtil],            entity_models=[MyModel],        )``````python    @pytest.fixture()    def client():        # See https://flask.palletsprojects.com/en/1.1.x/testing/ for details    def test_blogs(client):        google = jwt_routes.get_strategy(&quot;GoogleTestUtil&quot;)        user_headers = google.create_test_headers(email=&quot;user@gmail.com&quot;)        rv = client.get(&quot;/blogs&quot;, headers=user_headers)```If you are not running a db in your tests, then you can use the `entity` kwarg.For example:```python# user is an instantiated SqlAlchemy objectgoogle = jwt_routes.get_strategy(&quot;GoogleTestUtil&quot;)user_headers = google.create_test_headers(email=&quot;user@gmail.com&quot;, entity=user)# user_headers: { &quot;X-Auth-Token&quot;: &quot;Bearer &lt;GOOGLE_OAUTH2_TEST&gt;&quot; }```If you require more than one request to a Flask view handler in a single unit test, then setthe *scope* kwarg to **application**. (Default is *function*). If you are testing different entities within a single unit test method or function then you must pass in your entity.For example:```pythonmy_entity = User(email=&quot;user@gmail.com&quot;) # If you're testing against a real db, make sure this is an entry in the dbgoogle = jwt_routes.get_strategy(&quot;GoogleTestUtil&quot;)_ = google.create_test_headers(email=&quot;user@gmail.com&quot;, scope=&quot;application&quot;, entity=my_entity)```## Authors* **joegasewicz** - *Initial work* - [@joegasewicz](https://twitter.com/joegasewicz)* **Kousik Mitra** - *Initial work* - [@kousikmitra](https://github.com/kousikmitra)## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.Please make sure to update tests as appropriate.Make sure you have Python versions: `3.6`,  `3.7`,  `3.8`Then run:```python    tox```To check the docs look good locally you can run:```bash    make html```## License[MIT](https://choosealicense.com/licenses/mit/)</longdescription>
</pkgmetadata>