<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># airflow-provider-duckdbA DuckDB provider for Airflow. This provider exposes a hook/connection that returns a DuckDB connection.## Installation```bashpip install airflow-provider-duckdb```## ConnectionThe connection type is `duckdb`. It supports setting the following parameters:- `file` (optional): The path to the DuckDB database file. If not set, operations will be done in-memory.Example connection strings:- `duckdb://:memory:`- `duckdb:///tmp/duckdb.db`## Usage```pythonimport pandas as pdimport pendulumfrom airflow.decorators import dag, taskfrom duckdb_provider.hooks.duckdb_hook import DuckDBHook@dag(    schedule=None,    start_date=pendulum.datetime(2022, 1, 1, tz=&quot;UTC&quot;),    catchup=False,)def duckdb_transform():    @task    def create_df() -&gt; pd.DataFrame:        &quot;&quot;&quot;        Create a dataframe with some sample data        &quot;&quot;&quot;        df = pd.DataFrame(            {                &quot;a&quot;: [1, 2, 3],                &quot;b&quot;: [4, 5, 6],                &quot;c&quot;: [7, 8, 9],            }        )        return df    @task    def simple_select(df: pd.DataFrame) -&gt; pd.DataFrame:        &quot;&quot;&quot;        Use DuckDB to select a subset of the data        &quot;&quot;&quot;        hook = DuckDBHook.get_hook('duckdb_default')        conn = hook.get_conn()        # execute a simple query        res = conn.execute(&quot;SELECT a, b, c FROM df WHERE a &gt;= 2&quot;).df()        return res    @task    def add_col(df: pd.DataFrame) -&gt; pd.DataFrame:        &quot;&quot;&quot;        Use DuckDB to add a column to the data        &quot;&quot;&quot;        hook = DuckDBHook.get_hook('duckdb_default')        conn = hook.get_conn()        # add a column        conn.execute(&quot;CREATE TABLE tb AS SELECT *, a + b AS d FROM df&quot;)        # get the table        return conn.execute(&quot;SELECT * FROM tb&quot;).df()    @task    def aggregate(df: pd.DataFrame) -&gt; pd.DataFrame:        &quot;&quot;&quot;        Use DuckDB to aggregate the data        &quot;&quot;&quot;        hook = DuckDBHook.get_hook('duckdb_default')        conn = hook.get_conn()        # aggregate        return conn.execute(&quot;SELECT SUM(a), COUNT(b) FROM df&quot;).df()    create_df_res = create_df()    simple_select_res = simple_select(create_df_res)    add_col_res = add_col(simple_select_res)    aggregate_res = aggregate(add_col_res)duckdb_transform()```</longdescription>
</pkgmetadata>