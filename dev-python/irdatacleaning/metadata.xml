<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># irdatacleaningThis python package is designed to make Artificial Intelligence accessible by startingwith the data cleaning stage.## DataCorrelation:this module allows you to be able to view the correlation values of your datasetallowing you the ability to prevent simple errorsDataCorrelation(df = pandas dataframe)df: is where you will input the dataset you would like to evaluate Correlationmatrix(): is the method you call uppon to view which columns havecorrelation relationships. LookingAtCorr() is the method is where you will actually make the changes to your datasetthis method returns a pandas dataframe.Check(): this method will call uppon both LookingAtCorr, and Correlationmatrix for youthis method also will return a pandas dataframe.## DataDiscovery:This class is designed to allow you the ability to evaluate your dataso that you may get an idea of what you need to change in the datasetthe best way to use this class is by actaully creating an instance of thisclass where it will automate everything.DataDiscovery(df)df will be any pandas dataframe you wish to evaluate.## Encoderthis class is dessigned to help you make encoding your data simplethe input variables for this class aredf: a pandas dataframetype: by defalult this variable will br set to ONEHOTENCODER if you with to useOrdinalEncoder you would set type to ordinalencodercolumns: when you have specific columns you want to be be corrected a specific waythen import the column or column names to this variable and only those columns will get correctedthey type you specificedthen you can call the check method to make the corretionsthis method will return a pandas data frameif you wish to compare the returned value to the original dataset you maycall copy## InconsistentDatathis class is dessigned to help you in the process of correcting inconsitent datayou have the ability to use use,seperatingwords(origin,change):this method is created so that you will be able to make sure all the columnsnames with more then one word is seperated correctlyorigin is the original format used to seperate the wordschange is the format you would like to be used to seperate wordschangeing_column_cases(case = &quot;title&quot;)this method is used to correct the columns nanes so that they are all infull caps, full lower, or title casecase will be used to tell the method what case you would likeby defalut case will be set equal to title but by sayingcase = upper the column names will be put to full lowerand the same for case = uppercolumn_names_white_space():this method will be used to correct white space in column namesdata_white_space():this method will be used to correct white space in the datasetcorrecting(column_name, corrections ):this method is dessigned to help you make the needed changes to the data in the cellsso that your data is more consistentcolumn_name is the var used to identify which column will get the correctionscorrections is the dictionary with the corrected valuescheck(seperatingwords = False, origin = &quot;&quot;, corrections = &quot;&quot; , change_case = False,case = &quot;title&quot;, correcting = False, column_name = &quot;&quot;, cell_corrections=None):this methode is designed to automate all the steps. needed except you will have to provide someinput argumentsfirst is seperatingwords by defalut is false when you set this to true you will be calling theseperatingwords words methodtherefore you will have to add what the origin is set equalas well as corrections these will both be some kind string valuesnext input value will be casechange_case = False to be able to have all your column names changed to the same case you will want change the value of change_case to truecase = &quot;title&quot;you can change this depending on how you would like to formate your column nameswhen you want to correct specifica values in the data you will set correcting to true as well ascolumn_name = to the column name that will get these corrections donethencell_corrections = to a dictionarythe corrected pandas data frame will be returnautocheck():does the same as what check does but walks you through the proccess of making all the changesresources():a method dessigned to give you links for more information on the class## MissingValues:MissingValues(df, stategy, columns, fillna)df: is where you will enter in the pandas dataframe you wish to correctstategy: is where you will define the strategy you with to use to correct the missing valuesthe strategy options you have are median, fillna and dropna enter one of those options to have your missing valuescorrected in that strategy, by default this var is set to mediancolumns: is where you will enter the list of columns you wish to have the missing values corrected infillna: when you enter fillna for the stategy this is where you will enter the value you wish for the columns missingvalues to be set to, currently you are only able to set this input variable to one value so i sugest that if youhave multiple columns that have misisng values use the median strategy to correct them or if you wish to still use thefillna strategy with multiple columns use this class more than once there will be a version of this module in thefuture that will allow you to use fillna on multiple columns with different valuescheck(): this is the method that you will use to tell the module to start making changes to the pandas data frame that you enteredthis method will return the corrected pandas data frame.copy_df: is the original unaltered dataframecurrently this module is only designed to be used with columns that are not object columns## StringToDateTime:this class is designed to make converting strings to datetime more accessablethis is done by creating an instance of the class StringToDateTime(df, column_names)df is where you will define the pandas dataframe that you will work withcolumn_names is when you have a column names for columns you wish have converted to datetimethat is not not [&quot;date&quot;,&quot;dates&quot;,&quot;starttime&quot;,&quot;start_time&quot;,&quot;start time&quot;], to use this input argumentsuccessfully you must pass in a listcheck(): to tell the module to make the corrections you must call the check methodresources(): will give you the link to the youtube video about this module as well as the github## Resources:this class is used to allow you islanders the ability to get additional resources on the module or classes## FeatureScaler:This class is designed to allow you to scale your data with ease. You have the ability to scaler yourby using StandardScaler or normalize. Not only that, but you can also scale either the whole dataset oryou can just scale one column at a time.the initialization of this module isFeatureScaler(data,scaler=StandardScaler,columns=[])data is where you can either enter a pandas data frame or a NumPy array,by default the scaler this module will use is StandardScaler, but you can change this variable to normalize to usenormalization.the columns input argument is to allow you the ability to have more control over what columns get scaled if you leave thisempty, you will end up scaling the whole datasetto tell the module to do something with the data, all you have to do is call the check method by .check()this will return the scaled data that you imported in the same format that you entered it as```pythonimport irdatacleaning as irdimport numpy as npscaler_data= np.array([[ 1., -1.,  2.],                    [ 2.,  0.,  0.],                    [ 0.,  1., -1.]])scaler = ird.FeatureScaler(data = scaler_data)scaler_data = scaler.check()norm_data= np.array([[ 1., -1.,  2.],            [ 2.,  0.,  0.],            [ 0.,  1., -1.]])norm = ird.FeatureScaler(data = norm_data,scaler = &quot;normalize&quot;, columns = [1])norm_data = norm.check()```</longdescription>
</pkgmetadata>