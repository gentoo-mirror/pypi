<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>```_|_|_|    _|    _|  _|_|_|  _|_|      _|_|_|  _|  _|_|    _|_|_|_|    _|  _|    _|  _|    _|    _|  _|    _|  _|_|      _|_|    _|  _|    _|  _|    _|    _|  _|    _|  _|        _|_|_|_|      _|_|_|  _|    _|    _|    _|_|_|  _|          _|_|_|_|              _|_|          _|_|```[![Build status](https://gitlab.com/pymarc/pymarc/badges/main/pipeline.svg)](https://gitlab.com/pymarc/pymarc/-/commits/main)pymarc is a python library for working with bibliographic data encoded in[MARC21](https://en.wikipedia.org/wiki/MARC_standards). It provides an API forreading, writing and modifying MARC records. It was mostly designed to be anemergency eject seat, for getting your data assets out of MARC and into somekind of saner representation. However over the years it has been used to createand modify MARC records, since despite [repeatedcalls](https://web.archive.org/web/20170731163019/http://www.marc-must-die.info/index.php/Main_Page)for it to die as a format, MARC seems to be living quite happily as a zombie.Below are some common examples of how you might want to use pymarc. Ifyou run across an example that you think should be here please send apull request.You can read pymarc documentation [here](https://pymarc.readthedocs.io/en/latest/).### InstallationYou'll probably just want to use pip to install pymarc:    pip install pymarcIf you'd like to download and install the latest source you'll need git:    git clone git://gitlab.com/pymarc/pymarc.gitYou'll also need [setuptools](https://pypi.python.org/pypi/setuptools#installation-instructions). Once you have the source and setuptools run the pymarc testsuite to make sure things are in order with the distribution:    python setup.py testAnd then install:    python setup.py install### ReadingMost often you will have some MARC data and will want to extract datafrom it. Here's an example of reading a batch of records and printing outthe title. If you are curious this example uses the batch fileavailable here in pymarc repository:```pythonfrom pymarc import MARCReaderwith open('test/marc.dat', 'rb') as fh:    reader = MARCReader(fh)    for record in reader:        print(record.title)``````The pragmatic programmer : from journeyman to master /Programming Python /Learning Python /Python cookbook /Python programming for the absolute beginner /Web programming : techniques for integrating Python, Linux, Apache, and MySQL /Python programming on Win32 /Python programming : an introduction to computer science /Python Web programming /Core python programming /Python and Tkinter programming /Game programming with Python, Lua, and Ruby /Python programming patterns /Python programming with the Java class libraries : a tutorial for building Weband Enterprise applications /Learn to program using Python : a tutorial for hobbyists, self-starters, and allwho want to learn the art of computer programming /Programming with Python /BSD Sockets programming from a multi-language perspective /Design patterns : elements of reusable object-oriented software /Introduction to algorithms /ANSI Common Lisp /```A `pymarc.Record` object has a few handy properties like `title` for getting atbits of a bibliographic record, others include: `author`, `isbn`, `subjects`,`location`, `notes`, `physicaldescription`, `publisher`, `pubyear`, `issn`,`issn_title`. But really, to work with MARC data you need to understand thenumeric field tags and subfield codes that are used to designate various bitsof information. There is a lot more data hidden in a MARC record than thesehelper properties provide access to. For example the `title` property works byextracting the information from the `245` field, subfields `a` and `b` behindthe scenes. You can access `245a` like so:```pythonprint(record['245']['a'])```Some fields like subjects can repeat. In cases like that you will want to use`get_fields` to get all of them as `pymarc.Field` objects, which you can theninteract with further:```pythonfor f in record.get_fields('650'):    print(f)```If you are new to MARC fields [UnderstandingMARC](http://www.loc.gov/marc/umb/) is a pretty good primer, and the [MARC 21Formats](http://www.loc.gov/marc/marcdocz.html) page at the Library of Congress is a good reference once you understand the basics.### Writing*Note: As of v5.0.0 `Subfield` is used to create subfields. Prior to v5,subfields were constructed and accessed as a list of strings, e.g., `[code,value, code, value]`. In v5.0.0 this has been changed to organize the subfieldsinto a list of tuples, e.g., `[(code, value), (code, value)]`. The `Subfield`is implemented as a `NamedTuple` so that the tuples can be constructed as`Subfield(code=code, value=value)`. The old style of creating subfields is nolonger supported. Attempting to pass a list of strings to the `subfields`parameter for the `Field` constructor will raise a `ValueError`. Forconvenience the `Field.convert_legacy_subfields` class method can be used to convert a legacy list of strings into a list of `Subfield`s.*Here's an example of creating a record and writing it out to a file.```pythonfrom pymarc import Record, Field, Subfieldrecord = Record()record.add_field(    Field(        tag='245',        indicators=['0', '1'],        subfields=[            Subfield(code='a', value='The pragmatic programmer : '),            Subfield(code='b', value='from journeyman to master /'),            Subfield(code='c', value='Andrew Hunt, David Thomas.')        ]))with open('file.dat', 'wb') as out:    out.write(record.as_marc())```To convert from the old string list to a list of `Subfield`s, the `.convert_legacy_subfields` class methodis provided on the `Field` class.```pythonfrom pymarc import Field, Subfieldlegacy_fields: list[str] = ['a', 'The pragmatic programmer : ',                            'b', 'from journeyman to master /',                            'c', 'Andrew Hunt, David Thomas']coded_fields: list[Subfield] = Field.convert_legacy_subfields(legacy_fields)```### UpdatingUpdating works the same way, you read it in, modify it, and then write it outagain:```pythonfrom pymarc import MARCReaderwith open('test/marc.dat', 'rb') as fh:    reader = MARCReader(fh)    record = next(reader)    record['245']['a'] = 'The Zombie Programmer : 'with open('file.dat', 'wb') as out:    out.write(record.as_marc())```### JSON and XMLIf you find yourself using MARC data a fair bit, and distributing it, you maymake other developers a bit happier by using the JSON or XML serializations. Themain benefit to using XML or JSON is that the UTF8 character encoding is used,rather than the frustratingly archaic MARC8 encoding. Also they will be able touse standard JSON and XML reading/writing tools to get at the data they wantinstead of some crazy MARC processing library like, ahem, pymarc.**XML**To parse a file of MARCXML records you can:```pythonfrom pymarc import parse_xml_to_arrayrecords = parse_xml_to_array('test/batch.xml')```If you have a large XML file and would rather not read them all into memory youcan:```pythonfrom pymarc import map_xmldef print_title(r):    print(r.title)map_xml(print_title, 'test/batch.xml')```Also, if you prefer you can pass in a file like object in addition to the pathto both *map_xml* and *parse_xml_to_array*:```pythonfrom pymarc import parse_xml_to_arrayrecords = parse_xml_to_array(open('test/batch.xml'))```**JSON**JSON support is fairly minimal in that you can call a `pymarc.Record`'s`as_json()` method to return JSON for a given MARC Record:```pythonfrom pymarc import MARCReaderwith open('test/one.dat','rb') as fh:    reader = MARCReader(fh)    for record in reader:        print(record.as_json(indent=2))``````json{  &quot;leader&quot;: &quot;01060cam  22002894a 4500&quot;,  &quot;fields&quot;: [    {      &quot;001&quot;: &quot;11778504&quot;    },    {      &quot;010&quot;: {        &quot;ind1&quot;: &quot; &quot;,        &quot;subfields&quot;: [          {            &quot;a&quot;: &quot;   99043581 &quot;          }        ],        &quot;ind2&quot;: &quot; &quot;      }    },    {      &quot;100&quot;: {        &quot;ind1&quot;: &quot;1&quot;,        &quot;subfields&quot;: [          {            &quot;a&quot;: &quot;Hunt, Andrew,&quot;          },          {            &quot;d&quot;: &quot;1964-&quot;          }        ],        &quot;ind2&quot;: &quot; &quot;      }    },    {      &quot;245&quot;: {        &quot;ind1&quot;: &quot;1&quot;,        &quot;subfields&quot;: [          {            &quot;a&quot;: &quot;The pragmatic programmer :&quot;          },          {            &quot;b&quot;: &quot;from journeyman to master /&quot;          },          {            &quot;c&quot;: &quot;Andrew Hunt, David Thomas.&quot;          }        ],        &quot;ind2&quot;: &quot;4&quot;      }    },    {      &quot;260&quot;: {        &quot;ind1&quot;: &quot; &quot;,        &quot;subfields&quot;: [          {            &quot;a&quot;: &quot;Reading, Mass :&quot;          },          {            &quot;b&quot;: &quot;Addison-Wesley,&quot;          },          {            &quot;c&quot;: &quot;2000.&quot;          }        ],        &quot;ind2&quot;: &quot; &quot;      }    },    {      &quot;300&quot;: {        &quot;ind1&quot;: &quot; &quot;,        &quot;subfields&quot;: [          {            &quot;a&quot;: &quot;xxiv, 321 p. ;&quot;          },          {            &quot;c&quot;: &quot;24 cm.&quot;          }        ],        &quot;ind2&quot;: &quot; &quot;      }    },    {      &quot;504&quot;: {        &quot;ind1&quot;: &quot; &quot;,        &quot;subfields&quot;: [          {            &quot;a&quot;: &quot;Includes bibliographical references.&quot;          }        ],        &quot;ind2&quot;: &quot; &quot;      }    },    {      &quot;650&quot;: {        &quot;ind1&quot;: &quot; &quot;,        &quot;subfields&quot;: [          {            &quot;a&quot;: &quot;Computer programming.&quot;          }        ],        &quot;ind2&quot;: &quot;0&quot;      }    },    {      &quot;700&quot;: {        &quot;ind1&quot;: &quot;1&quot;,        &quot;subfields&quot;: [          {            &quot;a&quot;: &quot;Thomas, David,&quot;          },          {            &quot;d&quot;: &quot;1956-&quot;          }        ],        &quot;ind2&quot;: &quot; &quot;      }    }  ]}```If you want to parse a file of MARCJSON records you can:```pythonfrom pymarc import parse_json_to_arrayrecords = parse_json_to_array(open('test/batch.json'))print(records[0])``````=LDR  00925njm  22002777a 4500=001  5637241=003  DLC=005  19920826084036.0=007  sdubumennmplu=008  910926s1957\\\\nyuuun\\\\\\\\\\\\\\eng\\=010  \\$a   91758335=028  00$a1259$bAtlantic=040  \\$aDLC$cDLC=050  00$aAtlantic 1259=245  04$aThe Great Ray Charles$h[sound recording].=260  \\$aNew York, N.Y. :$bAtlantic,$c[1957?]=300  \\$a1 sound disc :$banalog, 33 1/3 rpm ;$c12 in.=511  0\$aRay Charles, piano &amp; celeste.=505  0\$aThe Ray -- My melancholy baby -- Black coffee -- There's no you -- Doodlin' -- Sweet sixteen bars -- I surrender dear -- Undecided.=500  \\$aBrief record.=650  \0$aJazz$y1951-1960.=650  \0$aPiano with jazz ensemble.=700  1\$aCharles, Ray,$d1930-$4prf```Support-------The pymarc developers encourage you to join the [pymarc GoogleGroup](http://groups.google.com/group/pymarc) if you need help.  Also, pleasefeel free to use [issue tracking](https://gitlab.com/pymarc/pymarc/issues) onGitLab to submit feature requests or bug reports. If you've got an itch toscratch, please scratch it, and send merge requests on[GitLab](http://gitlab.com/pymarc/pymarc).If you start working with MARC you may feel like you need moral supportin addition to technical support. The[#code4lib](ircs://irc.libera.chat/code4lib) channel on [Libera](https://libera.chat/) is a good place for both.</longdescription>
</pkgmetadata>