<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>tag-expressions===============Package to evaluate logical tag expressions by using a modified version of the `Shunting Yard algorithm &lt;https://en.wikipedia.org/wiki/Shunting-yard_algorithm&gt;`_.This package is a Python port of cucumbers tag expression.It's also used by `radish &lt;https://github.com/radish-bdd/radish&gt;`_.|Build Status| |PyPI package version| |PyPI python versions|Installing----------.. code:: bash    $ pip install tag-expressionsHere is a tease---------------.. code:: python    &gt;&gt;&gt; from tagexpressions import parse    &gt;&gt;&gt;    &gt;&gt;&gt; expression = '( a and b ) or ( c and d )'    &gt;&gt;&gt; compiled_expression = parse(expression)    &gt;&gt;&gt; print(compiled_expression)    ( ( a and b ) or ( c and d ) )    &gt;&gt;&gt;    &gt;&gt;&gt; data = ['a', 'b', 'c', 'd']    &gt;&gt;&gt; assert compiled_expression.evaluate(data) == True    &gt;&gt;&gt;    &gt;&gt;&gt; data = ['a', 'c']    &gt;&gt;&gt; assert compiled_expression.evaluate(data) == False    &gt;&gt;&gt;    &gt;&gt;&gt;    &gt;&gt;&gt; expression = 'not a or b and not c or not d or e and f'    &gt;&gt;&gt; compiled_expression = parse(expression)    &gt;&gt;&gt; print(compiled_expression)    ( ( ( not ( a ) or ( b and not ( c ) ) ) or not ( d ) ) or ( e and f ) )    &gt;&gt;&gt;    &gt;&gt;&gt; data = ['b', 'e', 'f']    &gt;&gt;&gt; assert compiled_expression.evaluate(data) == True    &gt;&gt;&gt;    &gt;&gt;&gt; data = ['a', 'c', 'd']    &gt;&gt;&gt; assert compiled_expression.evaluate(data) == FalseUsage-----Available operators~~~~~~~~~~~~~~~~~~~* **or** - &quot;or&quot; conjunction of two given variables* **and** - &quot;and&quot; conjunction of two given variables* **not** - negation of a single variableEvery other token given in an *infix* is considered a variable.Operator precedence~~~~~~~~~~~~~~~~~~~From high to low:* ()* or* and* not.. |Build Status| image:: https://travis-ci.org/timofurrer/tag-expressions.png?branch=master   :target: https://travis-ci.org/timofurrer/tag-expressions.. |PyPI package version| image:: https://badge.fury.io/py/tag-expressions.svg   :target: https://badge.fury.io/py/tag-expressions.. |PyPI python versions| image:: https://img.shields.io/pypi/pyversions/tag-expressions.svg   :target: https://pypi.python.org/pypi/tag-expressions</longdescription>
</pkgmetadata>