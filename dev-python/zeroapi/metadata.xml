<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;    &lt;img height=&quot;300px&quot; src=&quot;https://ananto30.github.io/i/1200xCL_TP.png&quot; /&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;Zero is a simple Python framework (RPC like) to build fast and high performance microservices or distributed servers&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://codecov.io/gh/Ananto30/zero&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://codecov.io/gh/Ananto30/zero/branch/main/graph/badge.svg?token=k0aA0G6NLs&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/zeroapi/&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/zeroapi&quot; /&gt;    &lt;/a&gt;    &lt;br&gt;    &lt;a href=&quot;https://app.codacy.com/gh/Ananto30/zero/dashboard?utm_source=gh&amp;utm_medium=referral&amp;utm_content=&amp;utm_campaign=Badge_grade&quot;&gt;        &lt;img src=&quot;https://app.codacy.com/project/badge/Grade/f6d4db49974b470f95999565f7901595&quot;/&gt;    &lt;/a&gt;    &lt;a href=&quot;https://codeclimate.com/github/Ananto30/zero/maintainability&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://api.codeclimate.com/v1/badges/4f2fd83bee97326699bc/maintainability&quot; /&gt;    &lt;/a&gt;&lt;/p&gt;&lt;hr&gt;**Features**:*   Zero provides **faster communication** (see [benchmarks](https://github.com/Ananto30/zero#benchmarks-)) between the microservices using [zeromq](https://zeromq.org/) under the hood.*   Zero uses messages for communication and traditional **client-server** or **request-reply** pattern is supported.*   Support for both **async** and **sync**.*   The base server (ZeroServer) **utilizes all cpu cores**.*   **Code generation**! See [example](https://github.com/Ananto30/zero#code-generation-) üëá**Philosophy** behind Zero:*   **Zero learning curve**: The learning curve is tends to zero. Just add functions and spin up a server, literally that's it! The framework hides the complexity of messaging pattern that enables faster communication.*   **ZeroMQ**: An awesome messaging library enables the power of Zero.Let's get started!# Getting started üöÄ*Ensure Python 3.8+*    pip install zeroapi**For Windows**, [tornado](https://pypi.org/project/tornado/) needs to be installed separately (for async operations). It's not included with `zeroapi` because for linux and mac-os, tornado is not needed as they have their own event loops.*   Create a `server.py`    ```python    from zero import ZeroServer    app = ZeroServer(port=5559)    @app.register_rpc    def echo(msg: str) -&gt; str:        return msg    @app.register_rpc    async def hello_world() -&gt; str:        return &quot;hello world&quot;    if __name__ == &quot;__main__&quot;:        app.run()    ```*   The **RPC functions only support one argument** (`msg`) for now.*   Also note that server **RPC functions are type hinted**. Type hint is **must** in Zero server. Supported types can be found [here](/zero/utils/type_util.py#L11).*   Run the server    ```shell    python -m server    ```*   Call the rpc methods    ```python    from zero import ZeroClient    zero_client = ZeroClient(&quot;localhost&quot;, 5559)    def echo():        resp = zero_client.call(&quot;echo&quot;, &quot;Hi there!&quot;)        print(resp)    def hello():        resp = zero_client.call(&quot;hello_world&quot;, None)        print(resp)    if __name__ == &quot;__main__&quot;:        echo()        hello()    ```*   Or using async client -    ```python    import asyncio    from zero import AsyncZeroClient    zero_client = AsyncZeroClient(&quot;localhost&quot;, 5559)    async def echo():        resp = await zero_client.call(&quot;echo&quot;, &quot;Hi there!&quot;)        print(resp)    async def hello():        resp = await zero_client.call(&quot;hello_world&quot;, None)        print(resp)    if __name__ == &quot;__main__&quot;:        loop = asyncio.get_event_loop()        loop.run_until_complete(echo())        loop.run_until_complete(hello())    ```# Serialization üì¶## Default serializer[Msgspec](https://jcristharif.com/msgspec/) is the default serializer. So `msgspec.Struct` (for high performance) or `dataclass` or any [supported types](https://jcristharif.com/msgspec/supported-types.html) can be used easily to pass complex arguments, i.e.```pythonfrom dataclasses import dataclassfrom msgspec import Structfrom zero import ZeroServerapp = ZeroServer()class Person(Struct):    name: str    age: int    dob: datetime@dataclassclass Order:    id: int    amount: float    created_at: datetime@app.register_rpcdef save_person(person: Person) -&gt; bool:    # save person to db    ...@app.register_rpcdef save_order(order: Order) -&gt; bool:    # save order to db    ...```## Return typeThe return type of the RPC function can be any of the [supported types](https://jcristharif.com/msgspec/supported-types.html). If `return_type` is set in the client `call` method, then the return type will be converted to that type.```python@dataclassclass Order:    id: int    amount: float    created_at: datetimedef get_order(id: str) -&gt; Order:    return zero_client.call(&quot;get_order&quot;, id, return_type=Order)```# Code Generation ü§ñEasy to use code generation tool is also provided!After running the server, like above, call the server to get the client code. This makes it easy to know what functions are available in the local or remote server.Using `zero.generate_client` generate client code for even remote servers using the `--host` and `--port` options.```shellpython -m zero.generate_client --host localhost --port 5559 --overwrite-dir ./my_client```It will generate client like this -```pythonimport typing  # remove this if not neededfrom typing import List, Dict, Union, Optional, Tuple  # remove this if not neededfrom zero import ZeroClientzero_client = ZeroClient(&quot;localhost&quot;, 5559)class RpcClient:    def __init__(self, zero_client: ZeroClient):        self._zero_client = zero_client    def echo(self, msg: str) -&gt; str:        return self._zero_client.call(&quot;echo&quot;, msg)    def hello_world(self, msg: str) -&gt; str:        return self._zero_client.call(&quot;hello_world&quot;, msg)```Use the client -```pythonfrom my_client import RpcClient, zero_clientclient = RpcClient(zero_client)if __name__ == &quot;__main__&quot;:    client.echo(&quot;Hi there!&quot;)    client.hello_world(None)```Currently, the code generation tool supports only `ZeroClient` and not `AsyncZeroClient`.*WIP - Generate models from server code.*# Important notes üìù*   `ZeroServer` should always be run under `if __name__ == &quot;__main__&quot;:`, as it uses multiprocessing.*   The methods which are under `register_rpc()` in `ZeroServer` should have **type hinting**, like `def echo(msg: str) -&gt; str:`# Let's do some benchmarking! üèéZero is all about inter service communication. In most real life scenarios, we need to call another microservice.So we will be testing a gateway calling another server for some data. Check the [benchmark/dockerize](https://github.com/Ananto30/zero/tree/main/benchmarks/dockerize) folder for details.There are two endpoints in every tests,*   `/hello`: Just call for a hello world response üòÖ*   `/order`: Save a Order object in redisCompare the results! üëá# Benchmarks üèÜ11th Gen Intel¬Æ Core‚Ñ¢ i7-11800H @ 2.30GHz, 8 cores, 16 threads, 16GB RAM (Docker in Ubuntu 22.04.2 LTS)*(Sorted alphabetically)*Framework   | &quot;hello world&quot; (req/s) | 99% latency (ms) | redis save (req/s) | 99% latency (ms)----------- | --------------------- | ---------------- | ------------------ | ----------------aiohttp     | 14391.38              | 10.96            | 9470.74            | 12.94aiozmq      | 15121.86              | 9.42             | 5904.84            | 21.57fastApi     | 9590.96               | 18.31            | 6669.81            | 24.41sanic       | 18790.49              | 8.69             | 12259.29           | 13.52zero(sync)  | 24805.61              | 4.57             | 16498.83           | 7.80zero(async) | 22716.84              | 5.61             | 17446.19           | 7.24# Roadmap üó∫*   [x] Make msgspec as default serializer*   [ ] Add support for async server (currently the sync server runs async functions in the eventloop, which is blocking)*   [ ] Add pub/sub support# ContributionContributors are welcomed üôè**Please leave a star ‚≠ê if you like Zero!**[![&quot;Buy Me A Coffee&quot;](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/ananto30)</longdescription>
</pkgmetadata>