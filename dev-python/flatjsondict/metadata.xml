<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flatjsondict: efficient JSON-like data transformation tool## What is it?**flatjsondict** is nested JSON-like object transformation tool that provides `FlatJson` object for flat Pandas `Series` index-like label and filesystem path-like label access and manipulation for nested JSON-like data. Primarily used to efficently transform Pandas `Series` with MultiIndex index to nested JSON-like (dict, list) object and nested JSON-like data to flat Pandas `Series` with MultiIndex index.Labels need to be tuples or path-like strings. The default separator for path-like text labels is ``/``, but can be configured by constructor or updated by calling :meth:`FlatJson.set_keypath_separator`.Note that `FlatJson` provides :meth:`FlatJson.to_series()` to prepare JSON-like data for efficiently creating Pandas `Series` object with data MultiIndex index allowing to efficiently transform nested JSON-like object to Pandas `Series`.Note that `FlatJson` provides :meth:`FlatJson.to_json()` to efficiently create nested JSON-like object from flat tuple-like label dictionary. Alternatively, `FlatJson` can be used as the target dictionary-like class when calling `Series.to_dict(FlatJson)`, then `FlatJson.to_json()` can be called to return nested json-like data for use with JSON:API applications.## ExamplesConstructing `FlatJson` from a nested dictionary.```python&gt;&gt;&gt; import flatjsondict as fj&gt;&gt;&gt; d = {'a': 1, 'b': {'c': 3}}&gt;&gt;&gt; d_fj = fj.FlatJson(data=d)&gt;&gt;&gt; d_fj{('a',): 1, ('b', 'c'): 3}```Note that the nested objects are dictionaries hence all label keys are string values.```python&gt;&gt;&gt; d = {'a': 1, 'b': ['c', 3]}&gt;&gt;&gt; d_fj = fj.FlatJson(data=d)&gt;&gt;&gt; d_fj{('a',): 1, ('b', 0): 'c', ('b', 1): 3}```Note that the labels keys for nested lists are integer values.```python&gt;&gt;&gt; d = {'a': 1, 'b': ['c', 3]}&gt;&gt;&gt; d_fj = fj.FlatJson(data=d)&gt;&gt;&gt; d_fj.to_series(){('a', ''): 1, ('b', 0): 'c', ('b', 1): 3}```Note that for nested object with varying nesting depth the label tuple length is normalized (padded) when calling :meth:`FlatJson.to_series()`. Such label length normalization prepares `FlatJson` data for efficient creation of Pandas `Series` objects with MultiIndex index allowing to transform deeply nested JSON object data to Pandas `Series`.Constructing nested json-like data from `FlatJson`-like dictioaries.```python&gt;&gt;&gt; import flatjsondict as fj&gt;&gt;&gt; d = {('a', ''): 1, ('b', 0): 'c', ('b', 1): 3}&gt;&gt;&gt; d_fj = fj.FlatJson(data=d)&gt;&gt;&gt; d_fj.to_json(){'a': 1, 'b': ['c', 3]}&gt;&gt;&gt; d_fj.paths()['a', 'b/0', 'b/1']```Constructing `FlatJson` from Pandas `Series.to_dict()`.```python&gt;&gt;&gt; import pandas as pd&gt;&gt;&gt; import flatjsondict as fj&gt;&gt;&gt; d = {('a', ''): 1, ('b', 0): 'c', ('b', 1): 3}&gt;&gt;&gt; ds = pd.Series(d)&gt;&gt;&gt; ds.to_dict(fj.FlatJson){('a',): 1, ('b', 0): 'c', ('b', 1): 3}&gt;&gt;&gt; ds.to_dict(fj.FlatJson).to_json(){'a': 1, 'b': ['c', 3]}```Note that you can pass `FlatJson` to Pandas `Series.to_dict(FlatJson)` to directly derive `FlatJson` from Pandas `Series` data. Then use`FlatJson.to_json()` to return nested JSON-like data.</longdescription>
</pkgmetadata>