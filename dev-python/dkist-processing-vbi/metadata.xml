<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>dkist-processing-vbi====================Overview--------The dkist-processing-vbi library contains the implementation of the vbi pipelines as a collection of the`dkist-processing-core &lt;https://pypi.org/project/dkist-processing-core/&gt;`_ framework and`dkist-processing-common &lt;https://pypi.org/project/dkist-processing-common/&gt;`_ Tasks.The recommended project structure is to separate tasks and workflows into seperate packages.  Having the workflowsin their own package facilitates using the build_utils to test the integrity of those workflows in the unit test.`example &lt;https://bitbucket.org/dkistdc/dkist-processing-test/src/master/dkist_processing_test/workflows/&gt;`_Build-----Artifacts are built through `bitbucket pipelines &lt;bitbucket-pipelines.yml&gt;`_The pipeline can be used in other repos with a modification of the package and artifact locationsto use the names relevant to the target repo.e.g. dkist-processing-test -&gt; dkist-processing-vbi and dkist_processing_test -&gt; dkist_processing_vbiDeployment----------Deployment is done with `turtlebot &lt;https://bitbucket.org/dkistdc/turtlebot/src/master/&gt;`_ and followsthe process detailed in `dkist-processing-core &lt;https://pypi.org/project/dkist-processing-core/&gt;`_Environment Variables---------------------Only those specified by `dkist-processing-core &lt;https://pypi.org/project/dkist-processing-core/&gt;`_ and `dkist-processing-common &lt;https://pypi.org/project/dkist-processing-common/&gt;`_.Development-----------.. code-block:: bash    git clone git@bitbucket.org:dkistdc/dkist-processing-vbi.git    cd dkist-processing-vbi    pre-commit install    pip install -e .[test]    pytest -v --cov dkist_processing_vbiChangelog#########When you make **any** change to this repository it **MUST** be accompanied by a changelog file.The changelog for this repository uses the `towncrier &lt;https://github.com/twisted/towncrier&gt;`__ package.Entries in the changelog for the next release are added as individual files (one per change) to the ``changelog/`` directory.Writing a Changelog Entry^^^^^^^^^^^^^^^^^^^^^^^^^A changelog entry accompanying a change should be added to the ``changelog/`` directory.The name of a file in this directory follows a specific template::  &lt;PULL REQUEST NUMBER&gt;.&lt;TYPE&gt;[.&lt;COUNTER&gt;].rstThe fields have the following meanings:* ``&lt;PULL REQUEST NUMBER&gt;``: This is the number of the pull request, so people can jump from the changelog entry to the diff on BitBucket.* ``&lt;TYPE&gt;``: This is the type of the change and must be one of the values described below.* ``&lt;COUNTER&gt;``: This is an optional field, if you make more than one change of the same type you can append a counter to the subsequent changes, i.e. ``100.bugfix.rst`` and ``100.bugfix.1.rst`` for two bugfix changes in the same PR.The list of possible types is defined the the towncrier section of ``pyproject.toml``, the types are:* ``feature``: This change is a new code feature.* ``bugfix``: This is a change which fixes a bug.* ``doc``: A documentation change.* ``removal``: A deprecation or removal of public API.* ``misc``: Any small change which doesn't fit anywhere else, such as a change to the package infrastructure.Rendering the Changelog at Release Time^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^When you are about to tag a release first you must run ``towncrier`` to render the changelog.The steps for this are as follows:* Run `towncrier build --version vx.y.z` using the version number you want to tag.* Agree to have towncrier remove the fragments.* Add and commit your changes.* Tag the release.**NOTE:** If you forget to add a Changelog entry to a tagged release (either manually or automatically with ``towncrier``)then the Bitbucket pipeline will fail. To be able to use the same tag you must delete it locally and on the remote branch:.. code-block:: bash    # First, actually update the CHANGELOG and commit the update    git commit    # Delete tags    git tag -d vWHATEVER.THE.VERSION    git push --delete origin vWHATEVER.THE.VERSION    # Re-tag with the same version    git tag vWHATEVER.THE.VERSION    git push --tags origin main</longdescription>
</pkgmetadata>