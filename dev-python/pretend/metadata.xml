<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pretend=======.. image:: https://secure.travis-ci.org/alex/pretend.png    :target: https://travis-ci.org/alex/pretendPretend is a library to make stubbing with Python easier.What is stubbing?-----------------Stubbing is a technique for writing tests. You may hear the term mixed up withmocks, fakes, or doubles. Basically a stub is an object that returns pre-cannedresponses, rather than doing any computation.Martin Fowler does a good job explaining the terms in his `Mocks Aren't Stubs`_article... _`Mocks Aren't Stubs`: http://martinfowler.com/articles/mocksArentStubs.htmlHow do I install ``pretend``?-----------------------------It's easy with ``pip``!.. code:: bash    $ pip install pretendHow do I use ``pretend``?-------------------------It's easy, the ``stub`` function makes it easy to create a stub:.. code:: pycon    &gt;&gt;&gt; from pretend import stub    &gt;&gt;&gt; x = stub(country_code=&quot;US&quot;)    &gt;&gt;&gt; some_function(x)Here ``x`` will be an object with a single attribute ``country_code`` which hasthe value ``&quot;US&quot;``. Unlike mocks, ``x`` will not respond to any other attributeor methods, nor does it have any methods for making assertions about what youaccessed.If you want to add a method to the stub, simply provide a function to it:.. code:: pycon    &gt;&gt;&gt; from pretend import stub    &gt;&gt;&gt; x = stub(country_code=lambda: &quot;US&quot;)    &gt;&gt;&gt; x.country_code()    'US'It's important to note that functions on stubs *do not* take a ``self``argument, this is because stubs should be returning pre-canned values, notdoing computations.Exceptions with ``pretend``---------------------------Sometimes a method you want to stub doesn't return a value, but instead raisesan exception. To make this easy, ``pretend`` provides a helper function,``raiser``, it can be used like so:.. code:: pycon    &gt;&gt;&gt; from pretend import stub, raiser    &gt;&gt;&gt; x = stub(func=raiser(ValueError))    &gt;&gt;&gt; x.func()    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;      File &quot;pretend.py&quot;, line 74, in inner        raise exc    ValueErrorWhy is stubbing better?-----------------------Ideally stubbing tests how your system responds to a particular input, ratherthan which API is used. Stubbing still requires you to write tests that checkthe results of a computation, rather than looking for side effects. Thisdoesn't always work though, so you do sometimes still need mocking (e.g.sometimes you really want to check for a side effect.)How do I get my stub into place?--------------------------------If you come from other mocking libraries you're probably used to a ``patch``method to put a mock in place. ``pretend`` doesn't include anything like this,a) we believe it's better, where possible, to pass stubs as arguments ratherthan monkey patch them into place, b) we believe that when you do need tomonkey patch something into place you should use something provided by yourtesting tool. ``py.test`` includes `such a tool`_... _`such a tool`: http://pytest.org/latest/monkeypatch.htmlWhat if I really need to record the calls?------------------------------------------If you really really need to, ``pretend`` includes a ``call_recorder`` utility:.. code:: pycon    &gt;&gt;&gt; from pretend import call_recorder, call    &gt;&gt;&gt; f = call_recorder(lambda a: a + 2)    &gt;&gt;&gt; f(3)    5    &gt;&gt;&gt; assert f.calls == [call(3)]Who wrote this?---------------``pretend`` is by Alex Gaynor, who was just tired of not having a good stubbingtool for Python. The name is from Idan Gazit.</longdescription>
</pkgmetadata>