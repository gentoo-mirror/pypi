<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>patch_env - Patch os.environ with dynamic values when the interpreter starts============================================================================``patch_env`` lets you update Python's ``os.environ`` (the system environmentvariables dictionary) early during the interpreter's lifecycle, using the outputof a command you specify.This means you can inject a dynamic set of environment variables into the Pythoninterpreter without changing the environment of the process that starts theinterpreter or the command line arguments used to start it.  Integrateddevelopment environments (IDEs) often make it inconvenient or difficult toinject dynamic values in those configuration elements, so ``patch_env`` can helpthere.How it Works------------``patch_env`` installs a `Python site-specific configuration hook&lt;https://docs.python.org/3/library/site.html&gt;` that causes it to run very earlywhen the interpreter starts.  When it runs, if the ``PATCH_ENV_COMMAND``environment variable is set, its value is executed as a shell command and theoutput of that command is used to update ``os.environ``.So basically, set ``PATCH_ENV_COMMAND`` when you want ``patch_env`` to patchthings up for you, and don't set it when you don't.Your command's output should contain one environment variable per line, in theformat ``KEY=value``::    FOO=bar    AWS_SESSION_TOKEN=FwoGZXIvY...    HINT=values can have spaces and &quot;special chars&quot;, but not newlinesExample: PyCharm/IntelliJ IDEA debugging with aws-vault-------------------------------------------------------You're developing a program that uses the `boto3&lt;https://github.com/boto/boto3&gt;` library to access Amazon Web Services (AWS).Your organization prohibits storing unencrypted access keys on disk, so you use`aws-vault &lt;https://github.com/99designs/aws-vault&gt;` to manage them securely.This works great when you're running your program from the command line, butthere isn't an easy way to get your IDE to feed the output of ``aws-vault`` intothe environment before it starts the Python interpreter.Here's how you can use ``patch_env`` with an IDE like PyCharm to inject``aws-vault``'s output into the Python interpreter you're debugging with:1.  Install ``patch_env`` using pip.2.  Edit your PyCharm debug configuration and set the ``PATCH_ENV_COMMAND``    environment variable::        PATCH_ENV_COMMAND=aws-vault exec my-profile -- sh -c &quot;env | grep ^AWS_&quot;    Adjust the ``aws-vault`` command line as needed for your profile, session    duration, etc.  The important part is that we make ``aws-vault`` execute a    shell process that pipes all its environment variables through `grep` so we    select only the AWS credential variables.Now run the debugger.  ``patch_env`` logs the variables it parses from yourcommand at the ``DEBUG`` level, so you can configure Python logging at thatlevel if you need to verify that they're being parsed correctly.Limitations===========If ``aws-vault`` doesn't already have valid credentials when you startdebugging, it may need to read things like your MFA token from standard input.This will fail since ``patch_env`` doesn't feed any input to its``PATCH_ENV_COMMAND``.As a work-around, open a new terminal and run ``aws-vault exec`` for the profileyou use for debugging, enter the credentials there, and then re-launch thedebugger.  ``aws-vault`` stores its session tokens in your system's keystore, sothey'll be available to other instances of ``aws-vault`` until they expire.</longdescription>
</pkgmetadata>