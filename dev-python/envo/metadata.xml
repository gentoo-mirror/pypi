<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===========================================envo - smart environment variables handling===========================================Define environmental variables in python and activate hot reloaded shells for them.Features--------* Initialisation of variables in a given directory (creates common variables file too).. code-block::    user@pc:/project$ envo local --init  # creates local environment python files* Easy and dynamic handling in .py files (See documentation to learn more)* Provides addons like handling virtual environments.. code-block::    user@pc:/project$ envo local --init=venv  # will add .venv to PATH* Automatic env variables generation based on defined python variables* Hot reload. Activated shell will reload environmental variables when files change.* Activating shells for a given environment.. code-block::    user@pc:/project$ envo local    üê£(project)user@pc:/project$    üê£(project)user@pc:/project$ exit    user@pc:/project$ envo prod    üî•(project)user@pc:/project$* Saving variables to a regular .env file.. code-block::    user@pc:/project$ envo local --save* Printing variables (handy for non interactive CLIs like CI or docker).. code-block::    user@pc:/project$ envo local --dry-run* Detects undefined variables.* Perfect for switching kubernetes contexts and devops tasksExample#######Initialising environment.. code-block::    user@pc:/project$ envo local --initWill create :code:`env_comm.py` and :code:`env_local.py`.. code-block:: python    # env_comm.py    @dataclass    class ProjectEnvComm(Env):        @dataclass        class Python(BaseEnv):            version: str        class Meta:            raw = [&quot;kubeconfig&quot;]  # disable namespacing        python: Python        number: int        kubeconfig: Path        # Add more variables here        def __init__(self) -&gt; None:            super().__init__(root=Path(os.path.realpath(__file__)).parent)            self.name = &quot;proj&quot;            self.python = self.Python(version=&quot;3.8.2&quot;)            self.kubeconfig = self.root / f&quot;{self.stage}/kubeconfig.yaml&quot;    # env_local.py    @dataclass    class ProjectEnv(ProjectEnvComm):        def __init__(self) -&gt; None:            self.stage = &quot;test&quot;            self.emoji = &quot;üõ†Ô∏è&quot;            super().__init__()            self.number = 12    Env = ProjectEnvExample usage:.. code-block::    user@pc:/project$ envo  # short for &quot;envo local&quot;    üê£(project)user@pc:/project$ echo $PROJ_PYTHON_VERSION    3.8.2    üê£(project)user@pc:/project$echo $PROJ_NUMBER    12TODO:Major:* Refactor start_in* Add file hooks* Add bootstrap (versioning etc)* add error line numberMinor:* Shell should highlight envo commands on green* Unnecessary prompt rendered again aftet Ctr-d (only on xonsh?)* work on public/private fields and methods* add examples* print hooks for repr* Add reload commandBugs:* exiting while env loading yields Attribute ErrorImprovements:* type checking ?</longdescription>
</pkgmetadata>