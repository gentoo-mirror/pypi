<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPi Package Version](https://img.shields.io/pypi/v/google-calendar-analytics.svg)](https://pypi.org/project/google-calendar-analytics/)[![PyPi status](https://img.shields.io/pypi/status/google-calendar-analytics.svg?style=flat-square)](https://pypi.python.org/pypi/google-calendar-analytics)[![PyPi downloads](https://img.shields.io/pypi/dm/google-calendar-analytics.svg)](https://pypi.org/project/google-calendar-analytics/)[![Supported Python versions](https://img.shields.io/pypi/pyversions/google-calendar-analytics.svg)](https://pypi.python.org/pypi/google-calendar-analytics)# Google Calendar Analytics![img](https://github.com/Berupor/Calendar-Analytics/blob/master/examples/Logo.png?raw=true)---- ### [Documentation](https://berupor.github.io/Calendar-Analytics/)- ### [Source code](https://github.com/Berupor/Calendar-Analytics)---This Python program allows you to perform analytics on your Google Calendar events. With this program, you can visualizethe total duration of your events, compare the length of events across different time periods, and gain insights intowhich events take up the most time.## Features- Async support for faster data retrieval and chart generation- Extract events from your Google Calendar- Compute the total duration of events in a specified time range- Visualize the duration of events in a pie chart, bar chart, line chart and more- Limit the number of events displayed in the charts- Wide chart customization. For example, dark mode and transparent background## Quick StartTo use the Google Calendar Analytics program, first install the dependencies by running the following command:```bashpip install google-calendar-analytics```You can then import the AnalyzerFacade class and use it to analyze your data:### How to get credentials from Google?1. [Google documentation](https://developers.google.com/calendar/api/quickstart/python)```pythonimport asynciofrom datetime import datetimefrom google.oauth2.credentials import Credentialsfrom google_calendar_analytics import AnalyzerFacade# (You can get it from Google OAuth2 in you web app or from link above)creds = {    &quot;token&quot;: &quot;ya29.a0AVvZVsoH4qZcrGK25VwsXspJv-r9K-&quot;,    &quot;refresh_token&quot;: &quot;1//0hwlhrtalKgeRCgYIARAAGBESNwF-&quot;,    &quot;token_uri&quot;: &quot;https://oauth2.googleapis.com/token&quot;,    &quot;client_id&quot;: &quot;395np.apps.googleusercontent.com&quot;,    &quot;client_secret&quot;: &quot;GOCSPXFqoucE03VRVz&quot;,    &quot;scopes&quot;: [&quot;https://www.googleapis.com/auth/calendar&quot;],    &quot;expiry&quot;: &quot;2023-02-18T15:30:15.674219Z&quot;}creds = Credentials.from_authorized_user_info(creds)```Once you have created the credentials, you can create an instance of the AnalyzerFacade class and use it to analyze your data:```python# Choose time range for analysisstart_time = datetime(2023, 3, 1)end_time = datetime(2023, 3, 18)async def main():    async with AnalyzerFacade(creds=creds) as analyzer:        plot = await analyzer.analyze_one(start_time, end_time, event_name=&quot;Programming&quot;, plot_type=&quot;Line&quot;)        plot.show()if __name__ == &quot;__main__&quot;:    asyncio.run(main())```What's about multiple plots?```pythonasync def main():    async with AnalyzerFacade(creds=creds) as analyzer:        coroutines = []                coroutines.append(analyzer.analyze_one(start_time, end_time, event_name=&quot;Programming&quot;, plot_type=&quot;Line&quot;)        coroutines.append(analyzer.analyze_one(start_time, end_time, event_name=&quot;Reading&quot;, plot_type=&quot;Line&quot;))        coroutines.append(analyzer.analyze_many(start_time, end_time, plot_type=&quot;Pie&quot;))        coroutines.append(analyzer.analyze_many(start_time, end_time, plot_type=&quot;Bar&quot;))                                  result = await asyncio.gather(*coroutines)        for plot in result:            plot.show()```## ContributionIf you would like to contribute to this project, please feel free to submit a pull request. Some areas wherecontributions are particularly welcome include:- Adding new features- Improving existing features- Debugging and fixing bugs- Adding tests to ensure the program is working as expected## Analytics example:|              Pie plot               |              Bar plot               ||:-----------------------------------:|:-----------------------------------:|| ![img](https://github.com/Berupor/Calendar-Analytics/blob/master/examples/plot_Pie_ploty.png?raw=true) | ![img](https://github.com/Berupor/Calendar-Analytics/blob/master/examples/plot_Bar_ploty.png?raw=true) ||              Line plot               |                                          Multy line plot                                           |          |:------------------------------------:|:--------------------------------------------------------------------------------------------------:|| ![img](https://github.com/Berupor/Calendar-Analytics/blob/master/examples/plot_Line_ploty.png?raw=true) | ![img](https://github.com/Berupor/Calendar-Analytics/blob/master/examples/plot_Multy.png?raw=true) | </longdescription>
</pkgmetadata>