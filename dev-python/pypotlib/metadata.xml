<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `pypotlib` [![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](https://github.com/TheochemUI/pypotlib/blob/main/code_of_conduct.md) ![Builds](https://github.com/TheochemUI/pypotlib/actions/workflows/build_test.yml/badge.svg) ![Wheels](https://github.com/TheochemUI/pypotlib/actions/workflows/build_wheels.yml/badge.svg)Python bindings and ASE adapters for `potlib`.## DetailsThe library consists of thin wrappers to `potlib` under `cpot` and a`PyPotLibCalc` class which is an `ase` calculator under `ase_adapters`.## InstallationThis is [on PyPI](https://pypi.org/project/pypotlib), with wheels, so usage is simply:``` bashpip install pypotlib```Users are advised to not try to build from source, since the underlying `potlib`code includes `fortran` and `cpp` dependencies which can be slightly tricky towork with.### Local DevelopmentThe easiest way is to use the environment file, compatible with `conda`,`mamba`, `micromamba` etc.```bashmamba env create -f environment.ymlmamba activate rgpotpypdm install```### ProductionAs such, due to the compiled extensions and what not, `cibuildwheel` is used togenerate `macos` and `linux` wheels. Locally this may be emulated (on `linux`)by:```bashcibuildwheel --output-dir wheelhouse --platform linux```## Usage examplesThe simplest usage is just:```pythonimport pypotlib as pplimport numpy as npljpot = ppl.cpot.LJPot()pos = np.array([1, 2, 3, 1.2, 2.3, 3.6]).reshape(-1, 3)atm_types = [0, 0]cell_dim = np.eye(3)*50print(ljpot(pos, atm_types, cell_dim))```For using the ASE calculator we need an instantiated class.```pythonfrom ase import Atomsfrom pypotlib import cpotfrom pypotlib.ase_adapters import PyPotLibCalcatoms = Atoms(symbols=['Cu', 'H'], positions=[[0, 0, 0], [0.5, 0.5, 0.5]])calc = PyPotLibCalc(cpot.CuH2Pot())atoms.set_calculator(calc)print(atoms.get_potential_energy())print(atoms.get_forces())```To run an NEB with this, consider the following toy example:```pythonfrom ase import Atomsfrom ase.neb import NEBfrom ase.optimize import BFGSfrom pypotlib import cpotfrom pypotlib.ase_adapters import PyPotLibCalcatoms_initial = Atoms(symbols=['H', 'H'], positions=[(0, 0, 0), (0, 0, 1)])atoms_final = Atoms(symbols=['H', 'H'], positions=[(0, 0, 2), (0, 0, 3)])images = [atoms_initial]images += [atoms_initial.copy() for idx in range(3)]images += [atoms_final]for image in images:    image.calc = PyPotLibCalc(cpot.LJPot())neb = NEB(images)neb.interpolate(method = 'idpp')optimizer = BFGS(neb)optimizer.run(fmax=0.04)```# ContributionsAll contributions are welcome, this includes code and documentationcontributions but also questions or other clarifications. Note that we expectall contributors to follow our [Code ofConduct](https://github.com/TheochemUI/pypotlib/blob/main/CODE_OF_CONDUCT.md).# License[MIT](https://github.com/TheochemUI/pypotlib/blob/main/LICENSE).</longdescription>
</pkgmetadata>