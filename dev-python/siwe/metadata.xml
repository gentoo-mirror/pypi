<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Sign-In with EthereumThis package provides a Python implementation of EIP-4361: Sign In With Ethereum.## InstallationSIWE can be easily installed in any Python project with pip:```bashpip install siwe```## UsageSIWE provides a `SiweMessage` class which implements EIP-4361.### Parsing a SIWE MessageParsing is done by initializing a `SiweMessage` object with an EIP-4361 formatted string:``` pythonfrom siwe import SiweMessagemessage: SiweMessage = SiweMessage(message=eip_4361_string)```Alternatively, initialization of a `SiweMessage` object can be done with a dictionary containing expected attributes:``` pythonmessage: SiweMessage = SiweMessage(message={&quot;domain&quot;: &quot;login.xyz&quot;, &quot;address&quot;: &quot;0x1234...&quot;, ...})```### Verifying and Authenticating a SIWE MessageVerification and authentication is performed via EIP-191, using the `address` field of the `SiweMessage` as the expected signer. The validate method checks message structural integrity, signature address validity, and time-based validity attributes.``` pythontry:    message.verify(signature=&quot;0x...&quot;)    # You can also specify other checks (e.g. the nonce or domain expected).except siwe.ValidationError:    # Invalid```### Serialization of a SIWE Message`SiweMessage` instances can also be serialized as their EIP-4361 string representations via the `prepare_message` method:``` pythonprint(message.prepare_message())```## ExampleParsing and verifying a `SiweMessage` is easy:``` pythontry:    message: SiweMessage = SiweMessage(message=eip_4361_string)    message.verify(signature, nonce=&quot;abcdef&quot;, domain=&quot;example.com&quot;):except siwe.ValueError:    # Invalid message    print(&quot;Authentication attempt rejected.&quot;)except siwe.ExpiredMessage:    print(&quot;Authentication attempt rejected.&quot;)except siwe.DomainMismatch:    print(&quot;Authentication attempt rejected.&quot;)except siwe.NonceMismatch:    print(&quot;Authentication attempt rejected.&quot;)except siwe.MalformedSession as e:    # e.missing_fields contains the missing information needed for validation    print(&quot;Authentication attempt rejected.&quot;)except siwe.InvalidSignature:    print(&quot;Authentication attempt rejected.&quot;)# Message has been verified. Authentication complete. Continue with authorization/other.```## Testing```bashpoetry installgit submodule update --initpoetry run pytest```## See Also- [Sign-In with Ethereum: TypeScript](https://github.com/spruceid/siwe)- [Example SIWE application: login.xyz](https://login.xyz)- [EIP-4361 Specification Draft](https://eips.ethereum.org/EIPS/eip-4361)- [EIP-191 Specification](https://eips.ethereum.org/EIPS/eip-191)## DisclaimerOur Python library for Sign-In with Ethereum has not yet undergone a formalsecurity audit. We welcome continued feedback on the usability, architecture,and security of this implementation.</longdescription>
</pkgmetadata>