<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>docstring-gen================&lt;!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --&gt;&lt;b&gt;Instantly improve the documentation of your Python code withCodex.&lt;/b&gt;------------------------------------------------------------------------![PyPI](https://img.shields.io/pypi/v/docstring-gen.png) ![PyPI -Downloads](https://img.shields.io/pypi/dm/docstring-gen.png) ![PyPI -PythonVersion](https://img.shields.io/pypi/pyversions/docstring-gen.png)![GitHub WorkflowStatus](https://img.shields.io/github/actions/workflow/status/airtai/docstring-gen/test.yaml)![CodeQL](https://github.com/airtai/docstring-gen//actions/workflows/codeql.yml/badge.svg)![DependencyReview](https://github.com/airtai/docstring-gen//actions/workflows/dependency-review.yml/badge.svg)![GitHub](https://img.shields.io/github/license/airtai/docstring-gen.png)------------------------------------------------------------------------**docstring-gen** is an easy-to-use Python library that uses&lt;a href = &quot;https://beta.openai.com/docs/models/codex&quot; target=&quot;_blank&quot;&gt;OpenAI’sCodex model&lt;/a&gt; to automatically generate&lt;a href=&quot;https://google.github.io/styleguide/pyguide.html&quot; target = &quot;_blank&quot;&gt;Google-styledocstrings&lt;/a&gt; for Python codebase. The library is capable of readingboth Jupyter notebooks and Python files, and seamlessly adds meaningfuldocstrings to classes and functions that lack documentation. By using**docstring-gen**, developers can automatically generate docstrings fortheir codebase, resulting in time savings and improved documentationquality.## Install**docstring-gen** can be installed by running the command below. Thispackage requires Python 3.7 or higher to work.``` shellpip install docstring-gen```If the installation was successful, you should now have**docstring-gen** installed on your system. To see a full list ofsettings, run `docstring_gen --help`If you’re excited to try the latest version, you can install it directlyfrom GitHub by using the command:`pip install git+https://github.com/airtai/docstring-gen`## How to useThe **docstring-gen** library uses OpenAI’s Codex model to generatedocstrings for your Python classes and functions. In order to use thelibrary, you’ll need to&lt;a href=&quot;https://beta.openai.com/account/api-keys&quot; target=&quot;_blank&quot;&gt;createan API key for OpenAI&lt;/a&gt;.Once you have your API key, store it in the **OPENAI_API_KEY**environment variable. This is a necessary step for the library to work.To get started right away with sensible defaults, run:``` shelldocstring_gen {source_file_or_directory}```This will automatically add meaningful, Google-style docstrings to thePython classes and functions in the {source_file_or_directory} that donot already have one.For example, a function like below without the docstring:``` pythondef concatenate_strings(s1: str, s2: str) -&gt; str:    if not isinstance(s1, str) or not isinstance(s2, str):        raise TypeError(&quot;Both arguments should be strings.&quot;)    return s1 + s2```will become similar to:``` pythondef concatenate_strings(s1: str, s2: str) -&gt; str:    &quot;&quot;&quot;Concatenate two strings.    Args:        s1: First string        s2: Second string    Returns:        The concatenated string    Raises:        TypeError: If s1 or s2 is not a string    !!! note        The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)    &quot;&quot;&quot;    if not isinstance(s1, str) or not isinstance(s2, str):        raise TypeError(&quot;Both arguments should be strings.&quot;)    return s1 + s2```If you wish to regenerate the docstrings, you can re-run the commandwith the `-f` flag, which will remove the previous auto-generateddocstrings and replace them with new ones.``` shelldocstring_gen {source_file_or_directory} -f```**Note**: The default behavior of the library is to add docstrings onlyto functions and classes that are missing them. So, if you do notprovide the `-f` flag when re-running the command, the library will notreplace previously auto-generated docstrings, assuming that thefunctions already have them.If you prefer not to include the text **“autogenerated by docstring-genlibrary”** in the generated docstrings, you can use the`--no-include-auto-gen-txt` flag when running the command.``` shelldocstring_gen {source_file_or_directory} -f --no-include-auto-gen-txt```Now the docstring for the above function will look similar to:``` pythondef concatenate_strings(s1: str, s2: str) -&gt; str:    &quot;&quot;&quot;Concatenate two strings.    Args:        s1: First string        s2: Second string    Returns:        The concatenated string    Raises:        TypeError: If s1 or s2 is not a string    &quot;&quot;&quot;    if not isinstance(s1, str) or not isinstance(s2, str):        raise TypeError(&quot;Both arguments should be strings.&quot;)    return s1 + s2```**Important**: The library uses the text **“autogenerated bydocstring-gen library”** to identify which docstrings were generated bythe library. When the `--no-include-auto-gen-txt` flag is used, thistext will not be included in the generated docstrings. As a result, whenre-running the command with the `-f` flag, these docstrings will not bereplaced.”Alternatively, you can manually delete the **“autogenerated bydocstring-gen library”** (starting from the !!! note until the end) textfrom the classes and functions for which you think the auto-generateddocstring is appropriate, and then re-run the command using the `-f`flag to update the remaining auto-generated docstrings.In addition to the `-f` and `--no-include-auto-gen-txt` flags, you canalso customize the behavior by adjusting other parameters such as`--model`, `--temperature`, etc., For more information on these optionsand how to use them, please refer to the&lt;a href=&quot;https://beta.openai.com/docs/api-reference/completions/create&quot; target=&quot;_blank&quot;&gt;OpenAI’sdocumentation&lt;/a&gt;.### Jupyter notebook extensionWe have created a user-friendly notebook extension for the docstring-genlibrary. This extension provides a convenient way to document your codecell-by-cell, rather than having to document the entire notebook all atonce. To install the extension, simply run the following commands inyour terminal:**Note**: Please ensure&lt;a href=&quot;https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/install.html&quot; target=&quot;_blank&quot;&gt;jupyter-contrib-nbextensions&lt;/a&gt;.is installed before installing the docstring-gen library extension``` shelljupyter nbextension install https://github.com/airtai/jupyter-docstring-gen/archive/main.zip --userjupyter nbextension enable jupyter-docstring-gen-main/jupyter-docstring-gen```After successful installation, you will see a new button on your jupyternotebook toolbar. This button allows you to easily generate docstringsfor your Python code and improve your documentation.![](https://raw.githubusercontent.com/airtai/docstring-gen/main/nbs/images/docstring-gen-extension-btn.png)For more detailed information, please refer to this&lt;a href=&quot;https://github.com/airtai/jupyter-docstring-gen&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.## CopyrightCopyright © 2023 onwards airt technologies ltd, Inc.## LicenseThis project is licensed under the terms of the&lt;a href=&quot;https://github.com/airtai/docstring-gen/blob/main/LICENSE&quot; target=&quot;_blank&quot;&gt;ApacheLicense 2.0&lt;/a&gt;</longdescription>
</pkgmetadata>