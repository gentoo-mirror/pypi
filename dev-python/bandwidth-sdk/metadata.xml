<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Bandwidth Python SDK[![Test](https://github.com/Bandwidth/python-sdk/actions/workflows/test.yaml/badge.svg)](https://github.com/Bandwidth/python-sdk/actions/workflows/test.yaml)| **OS** | **Python** ||:---:|:---:|| Windows 2016 | 3.7, 3.8, 3.9, 3.10 || Windows 2019 | 3.7, 3.8, 3.9, 3.10 || Ubuntu 20.04 | 3.7, 3.8, 3.9, 3.10 || Ubuntu 22.04 | 3.7, 3.8, 3.9, 3.10 |## Getting Started### Installation```pip install bandwidth-sdk```### Initialize```pythonfrom bandwidth.bandwidth_client import BandwidthClientfrom bandwidth.messaging.models.message_request import MessageRequestfrom bandwidth.messaging.exceptions.messaging_exception import MessagingExceptionfrom bandwidth.voice.models.create_call_request import CreateCallRequestfrom bandwidth.voice.exceptions.api_error_exception import ApiErrorExceptionfrom bandwidth.voice.bxml.response import Responsefrom bandwidth.voice.bxml.verbs import *from bandwidth.multifactorauth.models.two_factor_code_request_schema import TwoFactorCodeRequestSchemafrom bandwidth.multifactorauth.models.two_factor_verify_request_schema import TwoFactorVerifyRequestSchemafrom bandwidth.phonenumberlookup.controllers.api_controller import APIController, ApiResponse, APIExceptionfrom bandwidth.phonenumberlookup.models.order_request import OrderRequestfrom bandwidth.webrtc.models.session import Sessionfrom bandwidth.webrtc.models.participant import Participantfrom bandwidth.webrtc.models.publish_permission_enum import PublishPermissionEnumbandwidth_client = BandwidthClient(    voice_basic_auth_user_name='username',    voice_basic_auth_password='password',    messaging_basic_auth_user_name='username',    messaging_basic_auth_password='password',    multi_factor_auth_basic_auth_user_name='username',    multi_factor_auth_basic_auth_password='password',    phone_number_lookup_basic_auth_user_name='username',    phone_number_lookup_basic_auth_password='password',    web_rtc_basic_auth_user_name='username',    web_rtc_basic_auth_password='password')account_id = &quot;12345&quot;```### Create A Phone Call```pythonvoice_client = bandwidth_client.voice_client.client##Create phone callbody = CreateCallRequest()body.mfrom = &quot;+17777777777&quot;body.to = &quot;+16666666666&quot;body.application_id = &quot;3-d-4-b-5&quot;body.answer_url = &quot;https://test.com&quot;try:    response = voice_client.create_call(account_id, body=body)    print(response.body.call_id) #c-3f758f24-a59bb21e-4f23-4d62-afe9-53o2ls3o4saio4l    print(response.status_code) #201except ApiErrorResponseException as e:    print(e.description) #Invalid from: must be an E164 telephone number    print(e.response_code) #400```### Send A Text Message```pythonmessaging_client = bandwidth_client.messaging_client.clientbody = MessageRequest()body.application_id = &quot;1-d-b&quot;body.to = [&quot;+17777777777&quot;]body.mfrom = &quot;+18888888888&quot;body.text = &quot;Greetings!&quot;try:    response = messaging_client.create_message(account_id, body)    print(response.body.id) #1570819529611mexbyfr7ugrouuxy    print(response.status_code) #202except MessagingException as e:    print(e.description) #Your request could not be accepted.    print(e.response_code) #400```### Create BXML```pythonresponse = Response()speak_sentence = SpeakSentence(    sentence=&quot;Test&quot;,    voice=&quot;susan&quot;,    locale=&quot;en_US&quot;,    gender=&quot;female&quot;)response.add_verb(speak_sentence)print(response.to_bxml())```### Create A MFA Request```pythonauth_client = bandwidth_client.multi_factor_auth_client.clientfrom_phone = &quot;+18888888888&quot;to_phone = &quot;+17777777777&quot;messaging_application_id = &quot;1-d-b&quot;scope = &quot;scope&quot;digits = 6body = TwoFactorCodeRequestSchema(    mfrom = from_phone,    to = to_phone,    application_id = messaging_application_id,    scope = scope,    digits = digits,    message = &quot;Your temporary {NAME} {SCOPE} code is {CODE}&quot;)auth_client.create_messaging_two_factor(account_id, body)code = &quot;123456&quot; #This is the user input to validatebody = TwoFactorVerifyRequestSchema(    to = to_phone,    application_id = application_id,    scope = scope,    code = code,    expiration_time_in_minutes = 3)response = auth_client.create_verify_two_factor(account_id, body)print(&quot;Auth status: &quot; + str(response.body.valid))```### Perform a TN Lookup Request```pythontnLookup_controller = bandwidth_client.phone_number_lookup_client.clientbody = AccountsTnlookupRequest()body.tns = ['+19195551234']try:    response = tnLookup_controller.create_tn_lookup_request(account_id, body)    print(response.status_code)except APIException as e:    print(&quot;Error:&quot;, e.response_code)requestId = response.body.request_id    # &quot;1234-abcd-5678-efgh&quot;try:    response = tnLookup_controller.get_tn_lookup_result(account_id, requestId)    print(response)except APIException as e:    print(&quot;Error:&quot;, e.response_code)```### WebRtc Participant &amp; Session Management```pythonweb_rtc_client = bandwidth_client.web_rtc_client.clientparticipant1 = {'participantId': '456'}participant2 = {'participantId': '789', 'streamAliases': ['alias1', 'alias2']}subscriptions = {'sessionId': session_id_arg, 'participants': [participant1, participant2]}create_session_body = Session()create_session_body.tag = 'new-session'create_session_response = web_rtc_client.create_session(account_id, create_session_body)session_id = create_session_response.body.idcreate_participant_body = Participant()create_participant_body.publish_permissions = [    PublishPermissionEnum.AUDIO,    PublishPermissionEnum.VIDEO]create_participant_body.callback_url = &quot;https://sample.com&quot;create_participant_response = web_rtc_client.create_participant(account_id, create_participant_body)participant_id = create_participant_response.body.participant.idweb_rtc_client.add_participant_to_session(account_id, session_id, participant_id, subscriptions)```## Supported Python VersionsThis package can be used with Python &gt;= 3.0## DocumentationDocumentation for this package can be found at https://dev.bandwidth.com/sdks/python.html## CredentialsInformation for credentials for this package can be found at https://dev.bandwidth.com/guides/accountCredentials.html</longdescription>
</pkgmetadata>