<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DSlash![Version: 0.6.4](https://img.shields.io/badge/Version-0.6.4-red?style=flat-square)[![Code Style: black](https://img.shields.io/badge/Code%20Style-black-black?style=flat-square)](https://github.com/psf/black)[![License: MIT](https://img.shields.io/badge/License-MIT-orange?style=flat-square)](./LICENSE)[![PyPI: dslash](https://img.shields.io/badge/PyPI-dslash-green?style=flat-square)](https://pypi.org/project/dslash)![Python: ^3.9](https://img.shields.io/badge/python-%5E3.9-blue?style=flat-square)&gt; **THIS PROJECT IS NO LONGER MAINTAINED**&gt;&gt; Danny has returned from a break, and [Discord.py](https://github.com/rapptz/discord.py)&gt; is now being maintained again, with support for slash commands. Nextcord also&gt; now has built-in support for slash commands. For new projects, you should use&gt; one of these options (or another).&gt;&gt; Dslash will continue to receive minimal updates to keep it working, at least&gt; for the near future, but it will not receive support for new features.&gt;&gt; One change Discord has made since this library stopped being maintained was&gt; to remove support for bots configuring permissions for their own commands. In&gt; order to avoid breaking bots, Dslash still allows permissions to be&gt; configured as before, but will now ignore them. The `allow_roles`,&gt; `allow_users`, `disallow_roles`, `disallow_users`, `global_permissions` and&gt; `guild_permissions` wrappers, as well as the `default_permission` and&gt; `permissions` parameters are all deprecated and should not be used.A library which supplements [Nextcord](https://github.com/nextcord/nextcord)(a fork of Discord.py) by adding support for slash commands.Documentation is still a work in progress, and the library should currently beconsidered unstable.You can install it using pip, eg. `pip install dslash`.## Example```pythonimport loggingimport randomimport typingfrom dslash import Choices, CommandClient, CommandGroup, CommandSubGroup, subcommandfrom nextcord import Embed, Interaction, Member, Role, AttachmentGUILD_ID = ...TOKEN = ...logging.basicConfig(level=logging.INFO)client = CommandClient(guild_id=GUILD_ID)@client.eventasync def on_ready():    print(f&quot;Logged in as {client.user}.&quot;)@client.command()async def roll(interaction: Interaction, sides: typing.Optional[int]):    &quot;&quot;&quot;Roll a dice.    :param sides: How many sides (default 6).    &quot;&quot;&quot;    value = random.randint(1, sides or 6)    await interaction.response.send_message(f&quot;You got: {value}&quot;)@client.groupclass Images(CommandGroup):    &quot;&quot;&quot;Cute image commands.&quot;&quot;&quot;    @subcommand()    async def cat(self, interaction: Interaction):        &quot;&quot;&quot;Get a cat image.&quot;&quot;&quot;        await interaction.response.send_message(            embed=Embed().set_image(url=&quot;https://cataas.com/cat&quot;)        )    @subcommand()    async def dog(self, interaction: Interaction):        &quot;&quot;&quot;Get a dog image.&quot;&quot;&quot;        await interaction.response.send_message(            embed=Embed().set_image(url=&quot;https://placedog.net/500?random&quot;)        )    @subcommand(name=&quot;any&quot;)    async def any_(self, interaction: Interaction):        &quot;&quot;&quot;Get any random image.&quot;&quot;&quot;        await interaction.response.send_message(            embed=Embed().set_image(url=&quot;https://picsum.photos/600&quot;)        )    @subcommand()    async def upload(self, interaction: Interaction, image: Attachment):        &quot;&quot;&quot;Upload a new cute image.&quot;&quot;&quot;        print(f&quot;Uploading {image.proxy_url!r}...&quot;)        await interaction.response.send_message(&quot;All done!&quot;)@client.groupclass Admin(CommandGroup):    &quot;&quot;&quot;Admin-only commands.&quot;&quot;&quot;    class Roles(CommandSubGroup):        &quot;&quot;&quot;Commands to manage roles.&quot;&quot;&quot;        @subcommand(name=&quot;del&quot;)        async def del_(self, interaction: Interaction, role: Role):            &quot;&quot;&quot;Delete a role.            :param role: The role to delete.            &quot;&quot;&quot;            await role.delete()            await interaction.response.send_message(&quot;Deleted the role.&quot;, ephemeral=True)@client.command()async def ban(interaction: Interaction, user: Member):    &quot;&quot;&quot;Ban a user.    :param user: The user to ban.    &quot;&quot;&quot;    await user.ban()    await interaction.response.send_message(&quot;Banned the user.&quot;, ephemeral=True)class RPSChoices(Choices):    rock = &quot;Rock&quot;    paper = &quot;Paper&quot;    scissors = &quot;Scissors&quot;    gun = &quot;Gun&quot;@client.command()async def rps(interaction: Interaction, choice: RPSChoices):    &quot;&quot;&quot;Play rock, paper, scissors.    :param choice: Your choice.    &quot;&quot;&quot;    if choice == RPSChoices.gun:        await interaction.response.send_message(&quot;That's cheating!&quot;)    else:        await interaction.response.send_message(f&quot;You picked {choice.name}.&quot;)client.run(TOKEN)```## DevelopmentAs well as Python 3.9+, this project requires Poetry for development.[Click this link for installation instructions](https://python-poetry.org/docs/master/#installation),or:- #### \*nix (Linux/MacOS)  `curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -`- #### Windows Powershell  `(Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py -UseBasicParsing).Content | python -`Once you have Poetry installed:1. **Create a virtual environment:** `poetry shell`2. **Install dependencies:** `poetry install`The following commands are then available:- `poe format` - Run auto-formatting and linting.Prefix these with `poetry run` if outside of the Poetry shell.</longdescription>
</pkgmetadata>