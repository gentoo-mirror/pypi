<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># echofish-aws-raw-to-zarr-lambda## Setting up the Python Environment# MacOS  1. Install pyenv (https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv)     1. ```brew update```     2. ```brew install pyenv```     3. In ~/.bashrc add        1. ```export PYENV_ROOT=&quot;$HOME/.pyenv&quot;```        2. ```export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;```        3. ```eval &quot;$(pyenv init -)&quot;```     4. ```brew install openssl readline sqlite3 xz zlib tcl-tk```  2. Install pyenv-virtualenv (https://github.com/pyenv/pyenv-virtualenv)     1. ```brew install pyenv-virtualenv```     2. In ~/.bashrc add         1. ```eval &quot;$(pyenv virtualenv-init -)&quot;```  3. Open a new terminal  4. Install Python version     1. ```env PYTHON_CONFIGURE_OPTS=&quot;--enable-shared&quot; pyenv install 3.9.16```     2. Optional: set global version of Python ```env PYTHON_CONFIGURE_OPTS=&quot;--enable-shared&quot; pyenv global 3.9.16```  5. Create virtual env     1. ```pyenv virtualenv 3.9.16 echofish-aws-raw-to-zarr-lambda```  6. Set local version of python (if not done already)     1. change directory to root of project     2. ```pyenv local echofish-aws-raw-to-zarr-lambda```# Other OS  1. Get a Mac  2. See Above MacOS## Setting up IntelliJ  1. Install the IntelliJ Python plugin  2. Set up pyenv     1. File -&gt; Project Structure or CMD + ;     2. SDKs -&gt; + -&gt; Add Python SDK -&gt; Virtual Environment     3. Select Existing Environment     4. Choose ~/.pyenv/versions/echofish-aws-raw-to-zarr-lambda/bin/python  3. Set up Python Facet (not sure if this is required)     1. File -&gt; Project Structure or CMD + ;     2. Facets -&gt; + -&gt; Python      3. Set interpreter ## Installing Dependencies  1. Add dependencies with versions to requirements.txt  2. ```pip install --upgrade pip &amp;&amp; pip install -r requirements_dev.txt```## MavenThis project can use Apache Maven to easily build this project.  However, this is not required, but recommended.Maven can be easily installed by downloading it from the Maven site or using sdkman.## Build with MavenAfter setting up your pyenv run:```mvn clean install```## DOTENVexport AWS_DEFAULT_PROFILE=echofish## Functional TestingTo run a functional test, developer will need to save the associated environment variables in .env for the lambda touse. The ACCESS_KEY and SECRET_ACCESS_KEY can be generated in IAM, users, rudy-dev, security credentials,access keys, create access key. Copy other values as needed from deployed CloudFormation Template.```shellexport OUTPUT_BUCKET=rudy-dev-echofish-118234403147-echofish-dev-outputexport TABLE_NAME=rudy-dev-echofish-EchoFish-File-Infoexport OUTPUT_BUCKET_ACCESS_KEY=&quot;XXX&quot;export OUTPUT_BUCKET_SECRET_ACCESS_KEY=&quot;YYY&quot;export TOPIC_ARN=&quot;arn:aws:sns:us-west-2:118234403147:rudy-dev-echofish-processing-finished&quot;```## Deploying new CodePipeline via CloudformationBuild project w 'mvn clean install', navigate to the 'target/codepipeline' directory. You will need tocreate a private ECR repo in us-east-1 w name of the project for builds to push to. Then:```commandlineaws --profile mggdev cloudformation create-stack --stack-name build-echofish-aws-raw-to-zarr-lambda-trunk --template-body file://codepipeline.yaml --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND```## Elastic Container RegistryNote that the main repository is built and curated in the mgg-dev account in us-west-2. The derived docker image is built and pushed to the echofish us-east-1 ECR.That image is then replicated to the echofish us-west-2 account. You will need to go to the echofish ECR -&gt; Repositories -&gt; [repo] -&gt; Permissions and copy the values from an existing project (for both regions).In the echofish aws account:```IAM -&gt; Roles -&gt; AWSServiceRoleForECRReplication```## To Run Tests```commandlinepython -m pytest```</longdescription>
</pkgmetadata>