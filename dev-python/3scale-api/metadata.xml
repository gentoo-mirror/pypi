<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># 3scale REST API client in Python3Scale REST API client in a wrapper over the 3scale API.[![lint &amp; smoke](https://github.com/3scale-qe/3scale-api-python/actions/workflows/lint-and-smoke.yml/badge.svg)](https://github.com/3scale-qe/3scale-api-python/actions)## InstallingInstall and update using pip:```bashpip install 3scale-api```Or as a dependency using the pipenv```bashpipenv install 3scale-api```## UsageClient supports basic CRUD operations and it using the official 3scale API.The API can be found at `&lt;https://yourdomain-admin.3scale.net&gt;/p/admin/api_docs`Basic usage of the client:```pythonfrom threescale_api import ThreeScaleClient, resourcesfrom typing import Listclient = ThreeScaleClient(url=&quot;myaccount.3scale.net&quot;, token=&quot;secret_token&quot;, ssl_verify=True)# Get list of APIs/Services or any other resourceservices: List[resources.Service] = client.services.list()# Get service by it's nametest_service: resources.Service = client.services[&quot;test_service&quot;] # or use: client.services.read_by_name(system_name)# Get service by it's idtest_service: resources.Service = client.services[12345] # or use client.services.read(id)# To get raw JSON response - you can use the fetch method - it takes the service idraw_json: dict = client.services.fetch(12345)# To create a new service (or any other resource), parameters are the same as you would provide by the documentationnew_service: resources.Service = client.services.create(system_name='my_testing_service', name=&quot;My Testing service&quot;)# In order to update service you can eitherclient.services[123456].update(param=&quot;new_value&quot;)# orservice: resources.Service = client.services[123456]service['param'] = 'new_value'service.update()# To get a proxy config you can useproxy: resources.Proxy = client.services['test_service'].proxy.read()# To update the proxy you can eitherproxy: resources.Proxy = client.services['test_service'].proxy.update(parameter_to_update='update')# orproxy_instance = client.services['test_service'].proxy.read()proxy_instance['param'] = 'new_value'proxy_instance.update()# On the service you can access the:service: resources.Service = client.services[123456]service.proxy           # The PROXY clientservice.mapping_rules   # mapping rules clientservice.metrics         # metricsservice.app_plans       # application plans# The proxy supports:proxy = service.proxy.read()proxy.promote(version=1, from_env=&quot;sandbox&quot;, to_env=&quot;production&quot;) # The promote operationproxy.mapping_rules # The mapping rulesproxy.configs       # proxy configurations clientproxy.policies      # Policies defined for the API```## Run the TestsTo run the tests you need to have installed development dependencies:```bashpipenv install --dev```and then run the `pytest`:```bashpipenv run pytest -v```### Integration tests configurationTo run the integration tests you need to set these env variables:```THREESCALE_PROVIDER_URL='https://example-admin.3scale.net'THREESCALE_PROVIDER_TOKEN='&lt;test-token&gt;'# OPTIONAL:THREESCALE_MASTER_URL='https://master.3scale.net'THREESCALE_MASTER_TOKEN='&lt;test-master-token&gt;'```</longdescription>
</pkgmetadata>