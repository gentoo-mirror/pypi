<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a href=&quot;https://github.com/scikit-hep/awkward-1.0#readme&quot;&gt;&lt;img src=&quot;https://github.com/scikit-hep/awkward-1.0/raw/main/docs-img/logo/logo-300px.png&quot;&gt;&lt;/a&gt;Awkward Array is a library for **nested, variable-sized data**, including arbitrary-length lists, records, mixed types, and missing data, using **NumPy-like idioms**.Arrays are **dynamically typed**, but operations on them are **compiled and fast**. Their behavior coincides with NumPy when array dimensions are regular and generalizes when they're not.# Motivating exampleGiven an array of objects with `x`, `y` fields and variable-length nested lists like```pythonarray = ak.Array([    [{&quot;x&quot;: 1.1, &quot;y&quot;: [1]}, {&quot;x&quot;: 2.2, &quot;y&quot;: [1, 2]}, {&quot;x&quot;: 3.3, &quot;y&quot;: [1, 2, 3]}],    [],    [{&quot;x&quot;: 4.4, &quot;y&quot;: {1, 2, 3, 4]}, {&quot;x&quot;: 5.5, &quot;y&quot;: [1, 2, 3, 4, 5]}]])```the following slices out the `y` values, drops the first element from each inner list, and runs NumPy's `np.square` function on everything that is left:```pythonoutput = np.square(array[&quot;y&quot;, ..., 1:])```The result is```python[    [[], [4], [4, 9]],    [],    [[4, 9, 16], [4, 9, 16, 25]]]```The equivalent using only Python is```pythonoutput = []for sublist in array:    tmp1 = []    for record in sublist:        tmp2 = []        for number in record[&quot;y&quot;][1:]:            tmp2.append(np.square(number))        tmp1.append(tmp2)    output.append(tmp1)```Not only is the expression using Awkward Arrays more concise, using idioms familiar from NumPy, but it's much faster and uses less memory.For a similar problem 10 million times larger than the one above (on a single-threaded 2.2 GHz processor),   * the Awkward Array one-liner takes **4.6 seconds** to run and uses **2.1 GB** of memory,   * the equivalent using Python lists and dicts takes **138 seconds** to run and uses **22 GB** of memory.Speed and memory factors in the double digits are common because we're replacing Python's dynamically typed, pointer-chasing virtual machine with type-specialized, precompiled routines on contiguous data. (In other words, for the same reasons as NumPy.) Even higher speedups are possible when Awkward Array is paired with [Numba](https://numba.pydata.org/).Our [presentation at SciPy 2020](https://youtu.be/WlnUF3LRBj4) provides a good introduction, showing how to use these arrays in a real analysis.# InstallationAwkward Array can be installed [from PyPI](https://pypi.org/project/awkward) using pip:```bashpip install awkward```You will likely get a precompiled binary (wheel), depending on your operating system and Python version. If not, pip attempts to compile from source (which requires a C++ compiler, make, and CMake).Awkward Array is also available using [conda](https://anaconda.org/conda-forge/awkward), which always installs a binary:```bashconda install -c conda-forge awkward```If you have already added `conda-forge` as a channel, the `-c conda-forge` is unnecessary. Adding the channel is recommended because it ensures that all of your packages use compatible versions:```bashconda config --add channels conda-forgeconda update --all```## Getting help&lt;table&gt;  &lt;tr&gt;    &lt;td width=&quot;66%&quot; valign=&quot;top&quot;&gt;      &lt;a href=&quot;https://awkward-array.org&quot;&gt;        &lt;img src=&quot;https://github.com/scikit-hep/awkward-1.0/raw/main/docs-img/panel-tutorials.png&quot; width=&quot;570&quot;&gt;      &lt;/a&gt;      &lt;p align=&quot;center&quot;&gt;&lt;b&gt;        &lt;a href=&quot;https://awkward-array.org&quot;&gt;        How-to tutorials        &lt;/a&gt;      &lt;/b&gt;&lt;/p&gt;    &lt;/td&gt;    &lt;td width=&quot;33%&quot; valign=&quot;top&quot;&gt;      &lt;a href=&quot;https://awkward-array.readthedocs.io/en/latest/index.html&quot;&gt;        &lt;img src=&quot;https://github.com/scikit-hep/awkward-1.0/raw/main/docs-img/panel-sphinx.png&quot; width=&quot;268&quot;&gt;      &lt;/a&gt;      &lt;p align=&quot;center&quot;&gt;&lt;b&gt;        &lt;a href=&quot;https://awkward-array.readthedocs.io/en/latest/index.html&quot;&gt;        Python API reference        &lt;/a&gt;      &lt;/b&gt;&lt;/p&gt;      &lt;a href=&quot;https://awkward-array.readthedocs.io/en/latest/_static/index.html&quot;&gt;        &lt;img src=&quot;https://github.com/scikit-hep/awkward-1.0/raw/main/docs-img/panel-doxygen.png&quot; width=&quot;268&quot;&gt;      &lt;/a&gt;      &lt;p align=&quot;center&quot;&gt;&lt;b&gt;        &lt;a href=&quot;https://awkward-array.readthedocs.io/en/latest/_static/index.html&quot;&gt;        C++ API reference        &lt;/a&gt;      &lt;/b&gt;&lt;/p&gt;    &lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;   * Report bugs, request features, and ask for additional documentation on [GitHub Issues](https://github.com/scikit-hep/awkward-1.0/issues).   * If you have a &quot;How do I...?&quot; question, ask about it on [StackOverflow with the [awkward-array] tag](https://stackoverflow.com/questions/tagged/awkward-array). Be sure to include tags for any other libraries that you use, such as Pandas or PyTorch.   * To ask questions in real time, try the Gitter [Scikit-HEP/awkward-array](https://gitter.im/Scikit-HEP/awkward-array) chat room.</longdescription>
</pkgmetadata>