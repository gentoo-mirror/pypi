<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)[![tests](https://github.com/bsl-tools/bsl/actions/workflows/pytest.yml/badge.svg?branch=main)](https://github.com/bsl-tools/bsl/actions/workflows/pytest.yml)[![Downloads](https://static.pepy.tech/personalized-badge/bsl?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=blue&amp;left_text=pypi%20downloads)](https://pepy.tech/project/bsl)[![Downloads](https://static.pepy.tech/personalized-badge/bsl?period=month&amp;units=international_system&amp;left_color=grey&amp;right_color=blue&amp;left_text=pypi%20downloads/month)](https://pepy.tech/project/bsl)[![PyPI version](https://badge.fury.io/py/bsl.svg)](https://badge.fury.io/py/bsl)[![Brain Streaming Layer](https://raw.githubusercontent.com/bsl-tools/bsl/master/doc/_static/icon-with-name/icon-with-name.svg)](https://bsl-tools.github.io/)**BrainStreamingLayer** [(Documentation website)](https://bsl-tools.github.io/)provides a real-time brain signal streaming framework.**BSL** is a wrapper around the python interface to the Lab Streaming Layer(LSL). **BSL** goal is to simplify the design of a study using the LabStreaming Layer which provides sub-millisecond time synchronization accuracy.Any signal acquisition system supported by native LSL or OpenVibe is alsosupported by BSL. Since the data communication is based on TCP, signals can betransmitted wirelessly. For more information about LSL, please visit the[LSL github](https://github.com/sccn/labstreaminglayer).**BSL** is based on **NeuroDecode**. The original version developed by[**Kyuhwa Lee**](https://github.com/dbdq) was recognised at[Microsoft Brain Signal Decoding competition](https://github.com/dbdq/microsoft_decoding)with the First Prize Award (2016) after achieving high decoding accuracy.**BSL** is based on the refactor version by[**Arnaud Desvachez**](https://github.com/dnastars) for the[Fondation Campus Biotech Geneva (FCBG)](https://github.com/fcbg-hnp).The low-level functionalities have been reworked and improved, while thedecoding functionalities have been dropped.# InstallationBSL supports `python &gt;= 3.8` and requires:- numpy- scipy- mne- pyqt5- pyqtgraphBSL uses `pylsl` to interface with LSL. A version is provided in`bsl.externals` and should work 'as is' on most systems. A different versionof `pylsl` can be installed and will be automatically selected by BSL ifavailable.BSL uses `psychopy` for trigger via an on-board parallel port. A versionincluding only the `parallel` module is provided in `bsl.externals` and shouldwork 'as is' on most systems. A different version of `psychopy` can beinstalled and will be automatically selected by BSL if available.Optional dependencies for trigger via a parallel port (LPT):- pyserial, if the [Arduino to LPT converter](https://github.com/fcbg-hnp/arduino-trigger)  is used.BSL can be installed via `pip` with `pip install bsl`.BSL can be installed from a cloned repository in normal mode with`pip install .` or in development mode with `pip install -e .`.Optional dependencies can be installed using the keywords:- build- doc- externals- parallel- style- test- allFor instance, `pip install bsl[parallel]` will install `BSL` with thedependencies for parallel port triggers.# DocumentationBSL is centered around 4 main modules: `stream_receiver`, `stream_recorder`,`stream_player` and `stream_viewer`.## StreamReceiverThe stream receiver connects to one or more LSL streams and acquires data fromthose. Supported streams are:- EEG- Markers**Example:**```from bsl import StreamReceiver# Connects to all available streamssr = StreamReceiver(bufsize=1, winsize=1, stream_name=None)# Update each stream buffer with new datasr.acquire()# Retrieve buffer/window for the stream named 'StreamPlayer'data, timestamps = sr.get_window(stream_name='StreamPlayer')```The data and its timestamps are returned as numpy array:- `data.shape = (samples, channels)`- `timestamps.shape = (samples, )`The data can be returned as an MNE raw instance if `return_raw` is set to`True`.## StreamRecorderThe stream recorder connects to one or more LSL streams and periodicallyacquires data from those until stopped, and then saves the acquired data todisk in pickle `.pcl` and in FIF `.fif` format.**Example:**```import timefrom bsl import StreamRecorder# Connects to all available streamsrecorder = StreamRecorder(record_dir=None, fname=None, stream_name=None,                          verbose=True)recorder.start()time.sleep(10)recorder.stop()```When the argument `record_dir` is set to None, the current folder obtained with `pathlib.Path.cwd()` is used. When the argument `fname` is set to None, the created files' stem use the start datetime.**CLI:** The stream recorder can be called by command-line in a terminal byusing either `bsl stream_recorder` or `bsl_stream_recorder` followed by theoptional arguments `-d`, `-f`, `-s` respectively for `record_dir`, `fname`,and `stream_name`, and the optional flags `--fif_subdir` and `--verbose`.```bsl_stream_recorder -d &quot;D:/Data&quot;bsl_stream_recorder -d &quot;D:/Data&quot; -f testbsl_stream_recorder -d &quot;D:/Data&quot; -f test -s openvibeSignals```## StreamPlayerThe stream player loads a previously recorded `.fif` file and creates a LSLserver streaming data from this file. The stream player can be used to testcode with a fake LSL data stream.**Example:**```import timefrom bsl import StreamPlayersp = StreamPlayer(stream_name='StreamPlayer', fif_file=r'path to .fif')sp.start()time.sleep(10)sp.stop()```**CLI:**  The stream player can be called by command-line in a terminal byusing either `bsl stream_player` or `bsl_stream_player` followed by positionalarguments `stream_name` and `fif_file` and the optional arguments `-r`, `-c`,`-t` respectively for `repeat`, `chunk_size` and `trigger_def`, and theoptional flag `--high_resolution`.```bsl_stream_player StreamPlayer data-raw.fifbsl_stream_player StreamPlayer data-raw.fif -c 16bsl_stream_player StreamPlayer data-raw.fif -c 16 -t triggerdef.ini```## StreamViewerThe stream viewer creates a 2-window GUI composed of a control GUI and aplotter GUI to display the data acquired from an LSL server in real-time.**CLI:** The stream viewer can be called by command-line in a terminal by usingeither `bsl stream_viewer` or `bsl_stream_viewer` followed by the optionalargument `-s` for the `stream_name`. If no stream name is provided, a promptwill ask the user to select the desired non-marker stream to display.```bsl_stream_viewerbsl_stream_viewer -s StreamPlayer```## TriggersTriggers includes functions to mark time event by sending a trigger which willbe saved on the *TRIGGER* channel of the on-going recording. Triggers can beachieved either through hardware or through software.Currently, the supported hardware triggers use an LPT port.**Example:**```import timefrom bsl import StreamRecorderfrom bsl.triggers import SoftwareTriggerfrom bsl.triggers import ParallelPortTrigger# Software triggerrecorder = StreamRecorder()recorder.start()trigger = Softwaretrigger(recorder)for k in range(1, 5):    trigger.signal(k)    time.sleep(1)trigger.close()recorder.stop()# Hardware trigger through Arduino LPT converterrecorder = StreamRecorder()recorder.start()trigger = ParallelPortTrigger(address='arduino')for k in range(1, 5):    trigger.signal(k)    time.sleep(1)trigger.close()recorder.stop()```Note that closing the trigger before stopping the recording may not be requiredfor all kind of triggers.# Copyright and licenseThe codes are released under[GNU Lesser General Public License](https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html).</longdescription>
</pkgmetadata>