<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># spacymoji: emoji for spaCy[spaCy](https://spacy.io) extension and pipeline componentfor adding emoji meta data to `Doc` objects. Detects emoji consisting of oneor more unicode characters, and can optionally merge multi-char emoji (combinedpictures, emoji with skin tone modifiers) into one token. Human-readable emojidescriptions are added as a custom attribute, and an optional lookup table canbe provided for your own descriptions. The extension sets the custom `Doc`,`Token` and `Span` attributes `._.is_emoji`, `._.emoji_desc`, `._.has_emoji` and `._.emoji`. You can read more about custom pipeline components and extension attributes [here](https://spacy.io/usage/processing-pipelines).Emoji are matched using spaCy's [`PhraseMatcher`](https://spacy.io/api/phrasematcher), and looked up in the datatable provided by the [`emoji` package](https://github.com/carpedm20/emoji).[![Azure Pipelines](https://img.shields.io/azure-devops/build/explosion-ai/public/22/master.svg?logo=azure-pipelines&amp;style=flat-square&amp;label=build)](https://dev.azure.com/explosion-ai/public/_build?definitionId=22)[![Current Release Version](https://img.shields.io/github/release/explosion/spacymoji.svg?style=flat-square&amp;logo=github)](https://github.com/explosion/spacymoji/releases)[![pypi Version](https://img.shields.io/pypi/v/spacymoji.svg?style=flat-square&amp;logo=pypi&amp;logoColor=white)](https://pypi.org/project/spacymoji/)# ‚è≥ Installation`spacymoji` requires `spacy` v3.0.0 or higher. For spaCy v2.x, instally `spacymoji==2.0.0`.```bashpip install spacymoji```# ‚òùÔ∏è UsageImport the component and add it anywhere in your pipeline using the stringname of the `&quot;emoji&quot;` component factory:```pythonimport spacynlp = spacy.load(&quot;en_core_web_sm&quot;)nlp.add_pipe(&quot;emoji&quot;, first=True)doc = nlp(&quot;This is a test üòª üëçüèø&quot;)assert doc._.has_emoji is Trueassert doc[2:5]._.has_emoji is Trueassert doc[0]._.is_emoji is Falseassert doc[4]._.is_emoji is Trueassert doc[5]._.emoji_desc == &quot;thumbs up dark skin tone&quot;assert len(doc._.emoji) == 2assert doc._.emoji[1] == (&quot;üëçüèø&quot;, 5, &quot;thumbs up dark skin tone&quot;)````spacymoji` only cares about the token text, so you can use it on a blank`Language` instance (it should work for all[available languages](https://spacy.io/usage/models#languages)!), or ina pipeline with a loaded pipeline. If your pipelineincludes a tagger, parser and entity recognizer, make sure to add the emojicomponent as `first=True`, so the spans are merged right after tokenization,and _before_ the document is parsed. If your text contains a lot of emoji, thismight even give you a nice boost in parser accuracy.## Available attributesThe extension sets attributes on the `Doc`, `Span` and `Token`. You canchange the attribute names (and other parameters of the Emoji component) by passingthem via the `config` parameter in the `nlp.add_pipe(...)` method. For more detailson custom components and attributes, see the[processing pipelines documentation](https://spacy.io/usage/processing-pipelines#custom-components).| Attribute            | Type                       | Description                                                   || -------------------- | -------------------------- | ------------------------------------------------------------- || `Token._.is_emoji`   | bool                       | Whether the token is an emoji.                                || `Token._.emoji_desc` | str                        | A human-readable description of the emoji.                    || `Doc._.has_emoji`    | bool                       | Whether the document contains emoji.                          || `Doc._.emoji`        | List[Tuple[str, int, str]] | `(emoji, index, description)` tuples of the document's emoji. || `Span._.has_emoji`   | bool¬†                      | Whether the span contains emoji.                              || `Span._.emoji`       | List[Tuple[str, int, str]] | `(emoji, index, description)` tuples of the span's emoji.     |## SettingsYou can configure the `emoji` factory by setting any of the following parameters inthe `config` dictionary:| Setting       | Type                      | Description                                                                                                                            || ------------- | ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- || `attrs`       | Tuple[str, str, str, str] | Attributes to set on the `._` property. Defaults to `('has_emoji', 'is_emoji', 'emoji_desc', 'emoji')`.                                || `pattern_id`  | str                       | ID of match pattern, defaults to `'EMOJI'`. Can be changed to avoid ID conflicts.                                                      || `merge_spans` | bool                      | Merge spans containing multi-character emoji, defaults to `True`. Will only merge combined emoji resulting in one icon, not sequences. || `lookup`      | Dict[str, str]            | Optional lookup table that maps emoji strings to custom descriptions, e.g. translations or other annotations.                          |```pythonemoji_config = {&quot;attrs&quot;: (&quot;has_e&quot;, &quot;is_e&quot;, &quot;e_desc&quot;, &quot;e&quot;), lookup={&quot;üë®üé§&quot;: &quot;David Bowie&quot;})nlp.add_pipe(emoji, first=True, config=emoji_config)doc = nlp(&quot;We can be üë®üé§ heroes&quot;)assert doc[3]._.is_eassert doc[3]._.e_desc == &quot;David Bowie&quot;```If you're training a pipeline, you can define the component config in your [`config.cfg`](https://spacy.io/usage/training):```ini[nlp]pipeline = [&quot;emoji&quot;, &quot;ner&quot;]# ...[components.emoji]factory = &quot;emoji&quot;merge_spans = false```</longdescription>
</pkgmetadata>