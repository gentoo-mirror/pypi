<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Interface Read the Docs and GitHub Actions[![Docs](https://github.com/dfm/rtds-action/workflows/Docs/badge.svg)](https://github.com/dfm/rtds-action/actions?query=workflow%3ADocs)[![Documentation Status](https://readthedocs.org/projects/rtds-action/badge/?version=latest)](https://rtds-action.readthedocs.io/en/latest/?badge=latest)I like to use [Read the Docs](https://readthedocs.org/) to build (and version!) mydocs, but I _also_ like to use [Jupyter notebooks](https://jupyter.org/) towrite tutorials. Unfortunately, even though[notebooks can be executed on Read the Docs](https://docs.readthedocs.io/en/stable/guides/jupyter.html),some of them take a very long time to run orneed special Docker environments to execute,which goes beyond what the platform supports. In these cases I needed to checkexecuted notebooks (often with large images) into my git repository, causinghuge amounts of bloat. Futhermore, the executed notebooks would often get out ofsync with the development of the code. **No more!!**_This library avoids these issues by executing code on [GitHubActions](https://github.com/features/actions), uploading build artifacts (inthis case, executed Jupter notebooks), and then (only then!) triggering aRead the Docs build that can download the executed notebooks._There is still some work required to set up this workflow, but this library hasthree pieces that make it a bit easier:1. A GitHub action that can be used to trigger a build for the current branch on   Read the Docs.2. A Sphinx extension that interfaces with the GitHub API to download the   artifact produced for the target commit hash.3. Some documentation that shows you how to set all this up!## UsageThe following gives the detailed steps of the process of setting up a projectusing this workflow. But you can also see a fully functional example in thisrepository. The documentation source is the `docs` directory and the`.github/workflows` directory includes a workflow that is executed to build thedocs using this package. The rendered page is available at[rtds-action.readthedocs.io](https://rtds-action.readthedocs.io).### 1. Set up Read the Docs1. First, you'll need to import your project as usual. If you've already done   that, don't worry: this will also work with existing Read the Docs projects.2. Next, go to the admin page for your project on Read the Docs, click on   `Integrations` (the URL is something like   `https://readthedocs.org/dashboard/YOUR_PROJECT_NAME/integrations/`).3. Click `Add integration` and select `Generic API incoming webhook`.4. Take note of the webhook `URL` and `token` on this page for use later.You should also edit your webhook settings on GitHub by going to`https://github.com/USERNAME/REPONAME/settings/hooks` and clicking &quot;Edit&quot;next to the Read the Docs hook. On that page, you should un-check the `Pushes`option.### 2. Set up GitHub Actions workflowIn this example, we'll assume that we have tutorials written as Jupyternotebooks, saved as Python scripts using[Jupytext](https://jupytext.readthedocs.io/en/latest/introduction.html) (becausethat's probably what you should be doing anyways!) in a directory called`docs/tutorials`.First, you'll need to add the Read the Docs webhook URL and token that yourecorded above as &quot;secrets&quot; for your GitHub project by going to the URL`https://github.com/USERNAME/REPONAME/settings/secrets`. I'll call them`RTDS_WEBHOOK_URL` (include the `https`!) and `RTDS_WEBHOOK_TOKEN` respectively.For this use case, we can create the workflow `.github/workflows/docs.yml` asfollows:```yamlname: Docson: [push, release]jobs:  notebooks:    name: &quot;Build the notebooks for the docs&quot;    runs-on: ubuntu-latest    steps:      - uses: actions/checkout@v2      - name: Set up Python        uses: actions/setup-python@v2        with:          python-version: 3.8      - name: Install dependencies        run: |          python -m pip install -U pip          python -m pip install -r .github/workflows/requirements.txt      - name: Execute the notebooks        run: |          jupytext --to ipynb --execute docs/tutorials/*.py      - uses: actions/upload-artifact@v2        with:          name: notebooks-for-${{ github.sha }}          path: docs/tutorials      - name: Trigger RTDs build        uses: dfm/rtds-action@v1        with:          webhook_url: ${{ secrets.RTDS_WEBHOOK_URL }}          webhook_token: ${{ secrets.RTDS_WEBHOOK_TOKEN }}          commit_ref: ${{ github.ref }}```Here, we're also assuming that we've added a `pip` requirements file at`.github/workflows/requirements.txt` with the dependencies required to executethe notebooks. Also note that in the `upload-artifact` step we give our artifactthat depends on the hash of the current commit. This is crucial! We also need totake note of the `notebooks-for-` prefix because we'll use that later.It's worth emphasizing here that the only &quot;special&quot; steps in this workflow arethe last two. You can do whatever you want to generate your artifact in theprevious steps (for example, you could use `conda` instead of `pip`) becausethis workflow is not picky about how you get there!### 3. Set up SphinxFinally, you can edit the `conf.py` for your Sphinx documentation to add supportfor fetching the artifact produced by your action. Here is a minimal example:```pythonimport osextensions = [... &quot;rtds_action&quot;]# The name of your GitHub repositoryrtds_action_github_repo = &quot;USERNAME/REPONAME&quot;# The path where the artifact should be extracted# Note: this is relative to the conf.py file!rtds_action_path = &quot;tutorials&quot;# The &quot;prefix&quot; used in the `upload-artifact` step of the actionrtds_action_artifact_prefix = &quot;notebooks-for-&quot;# A GitHub personal access token is required, more info belowrtds_action_github_token = os.environ[&quot;GITHUB_TOKEN&quot;]# Whether or not to raise an error on Read the Docs if the# artifact containing the notebooks can't be downloaded (optional)rtds_action_error_if_missing = False```Where we have added the custom extension and set the required configurationparameters.You'll need to provide Read the Docs with a GitHub personal access token (it onlyneeds the `public_repo` scope if your repo is public). You can generate a newtoken by going to [your GitHub settingspage](https://github.com/settings/tokens). Then, save it as an environmentvariable (called `GITHUB_TOKEN` in this case) on Read the Docs.## DevelopmentFor now, just a note: if you edit `src/js/index.js`, you _must_ run `npm run package` to generate the compiled action source.</longdescription>
</pkgmetadata>