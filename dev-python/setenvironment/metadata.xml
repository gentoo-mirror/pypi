<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># setenvironment[![MacOS_Tests](https://github.com/zackees/setenvironment/actions/workflows/push_macos.yml/badge.svg)](https://github.com/zackees/setenvironment/actions/workflows/push_macos.yml)[![Win_Tests](https://github.com/zackees/setenvironment/actions/workflows/push_win.yml/badge.svg)](https://github.com/zackees/setenvironment/actions/workflows/push_win.yml)[![Ubuntu_Tests](https://github.com/zackees/setenvironment/actions/workflows/push_ubuntu.yml/badge.svg)](https://github.com/zackees/setenvironment/actions/workflows/push_ubuntu.yml)[![Linting](https://github.com/zackees/setenvironment/actions/workflows/lint.yml/badge.svg)](https://github.com/zackees/setenvironment/actions/workflows/lint.yml)Finally, a cross platform way to set system environment variables and paths that are persistant across reboots.Works with Windows, MacOS and Linux and github runners, see note below.Extensively tested.## Command line interface```bash# Setting environmental variablessetenvironment showsetenviornment bashrc  # unix only.setenvironment set foo barsetenvironment has foosetenvironment get foosetenvironment del foo# Path manipulation.setenvironment addpath /my/pathsetenvironment get PATHsetenvironment delpath /my/pathsetenvironment refresh &quot;echo this command is in a refreshed environment&quot;```## Python API```pythonfrom setenvironment import (    set_env_var, add_env_path, unset_env_var, remove_env_path, set_config_file, reload_environment, ...)# by default, ~/.bashrc is usedset_env_var(&quot;FOO&quot;, &quot;BAR&quot;)get_env_var(&quot;FOO&quot;) # returns BARadd_env_path(&quot;MYPATH&quot;)unset_env_var(&quot;FOO&quot;)remove_env_path(&quot;MYPATH&quot;)# use ~/.bash_profile instead (no op on Windows)set_config_file(&quot;~/.bash_profile&quot;)set_env_var(&quot;FOO&quot;, &quot;BAR&quot;)add_env_path(&quot;MYPATH&quot;)unset_env_var(&quot;FOO&quot;)remove_env_path(&quot;MYPATH&quot;)# Loads settings into the current environment. This reads the# registry on windows or the ~/.bashrc file on unix.reload_environment()# Path groups are usefull for uninstall programs. Each add# copies the path both into the PATH and also to the key.# When you want to remove paths you can query the key and selectively# remove paths that are in the set.add_to_path_group(&quot;MYPATHKEY&quot;, &quot;/path/to/dir&quot;)remove_to_path_group(&quot;MYPATHKEY&quot;, &quot;/path/to/dir&quot;)# Or else you can just remove ALL of the paths at once.remove_path_group(&quot;MYPATHKEY&quot;)```## GithubThese are designed to be compatible with github runners.Ubuntu MUST use the following to make this package work.```name: Ubuntu_Tests# Directs GitHub to run tests using ~/.bashrcdefaults:    run:      shell: bash -ieo pipefail {0}on: [push]```## WindowsPaths are set in the registery and the current os.environ  * writes to the registery  * broadcasts the new value (cmd.exe ignores this though) to all available processes  * paths like `/my/path` will be converted to `\\my\\path`## MacOS / LinuxPaths are set in either `~/.bash_aliases` or `~/.bash_profile` or `~/.bashrc` file or you can override it, see `set_config_file(...)` and the command line arguments if using the command line api.  * export the variable (so you can source the script)  * set the os.environ to the proper value  * write the value to the .bashrc file (make sure it's chmod +w)# Release Notes  * 2.0.3: Disables the refresh.cmd, since it doesn't work for subprocesses.  * 2.0.2: Re-enabled broadcast changes on win32, fixing new terminal launch.  * 2.0.1: Bug fix.  * 2.0.0: Rewrite. New command line api. Extensively tested on mac/win/ubuntu X github.</longdescription>
</pkgmetadata>