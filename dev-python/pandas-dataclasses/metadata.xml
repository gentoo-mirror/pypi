<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pandas-dataclasses[![Release](https://img.shields.io/pypi/v/pandas-dataclasses?label=Release&amp;color=cornflowerblue&amp;style=flat-square)](https://pypi.org/project/pandas-dataclasses/)[![Python](https://img.shields.io/pypi/pyversions/pandas-dataclasses?label=Python&amp;color=cornflowerblue&amp;style=flat-square)](https://pypi.org/project/pandas-dataclasses/)[![Downloads](https://img.shields.io/pypi/dm/pandas-dataclasses?label=Downloads&amp;color=cornflowerblue&amp;style=flat-square)](https://pepy.tech/project/pandas-dataclasses)[![DOI](https://img.shields.io/badge/DOI-10.5281/zenodo.6127352-cornflowerblue?style=flat-square)](https://doi.org/10.5281/zenodo.6127352)[![Tests](https://img.shields.io/github/actions/workflow/status/astropenguin/pandas-dataclasses/tests.yml?label=Tests&amp;style=flat-square)](https://github.com/astropenguin/pandas-dataclasses/actions)pandas data creation made easy by dataclass## Overviewpandas-dataclass makes it easy to create [pandas] data (DataFrame and Series) by specifying their data types, attributes, and names using the Python's dataclass:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonfrom dataclasses import dataclassfrom pandas_dataclasses import AsFrame, Data, Index```&lt;/details&gt;```python@dataclassclass Weather(AsFrame):    &quot;&quot;&quot;Weather information.&quot;&quot;&quot;    year: Index[int]    month: Index[int]    temp: Data[float]    wind: Data[float]df = Weather.new(    [2020, 2020, 2021, 2021, 2022],    [1, 7, 1, 7, 1],    [7.1, 24.3, 5.4, 25.9, 4.9],    [2.4, 3.1, 2.3, 2.4, 2.6],)```where `df` will become a DataFrame object like:```            temp  windyear month2020 1       7.1   2.4     7      24.3   3.12021 1       5.4   2.3     7      25.9   2.42022 1       4.9   2.6```### Features- Specifying data types and names of each element in pandas data- Specifying metadata stored in pandas data attributes (attrs)- Support for hierarchical index and columns- Support for custom factory for data creation- Support for full [dataclass] features- Support for static type check by [mypy] and [Pyright] ([Pylance])### Installation```bashpip install pandas-dataclasses```## How it workspandas-dataclasses provides you the following features:- Type hints for dataclass fields (`Attr`, `Data`, `Index`) to specify the data type and name of each element in pandas data- Mix-in classes for dataclasses (`As`, `AsFrame`, `AsSeries`) to create pandas data by a classmethod (`new`) that takes the same arguments as dataclass initializationWhen you call `new`, it will first create a dataclass object and then create a Series or DataFrame object from the dataclass object according the type hints and values in it.In the example above, `df = Weather.new(...)` is thus equivalent to:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonfrom pandas_dataclasses import asframe```&lt;/details&gt;```pythonobj = Weather([2020, ...], [1, ...], [7.1, ...], [2.4, ...])df = asframe(obj)```where `asframe` is a conversion function.pandas-dataclasses does not touch the dataclass object creation itself; this allows you to fully customize your dataclass before conversion by the dataclass features (`field`, `__post_init__`, ...).## Basic usage### DataFrame creationAs shown in the example above, a dataclass that has the `AsFrame` (or `AsDataFrame` as an alias) mix-in will create DataFrame objects:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonfrom dataclasses import dataclassfrom pandas_dataclasses import AsFrame, Data, Index```&lt;/details&gt;```python@dataclassclass Weather(AsFrame):    &quot;&quot;&quot;Weather information.&quot;&quot;&quot;    year: Index[int]    month: Index[int]    temp: Data[float]    wind: Data[float]df = Weather.new(...)```where fields typed by `Index` are *index fields*, each value of which will become an index or a part of a hierarchical index of a DataFrame object.Fields typed by `Data` are *data fields*, each value of which will become a data column of a DataFrame object.Fields typed by other types are just ignored in the DataFrame creation.Each data or index will be cast to the data type specified in a type hint like `Index[int]`.Use `Any` or `None` (like `Index[Any]`) if you do not want type casting.See also [data typing rules](#data-typing-rules) for more examples.By default, a field name (i.e. an argument name) is used for the name of corresponding data or index.See also [custom naming](#custom-naming) and [naming rules](#naming-rules) if you want customization.### Series creationA dataclass that has the `AsSeries` mix-in will create Series objects:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonfrom dataclasses import dataclassfrom pandas_dataclasses import AsSeries, Data, Index```&lt;/details&gt;```python@dataclassclass Weather(AsSeries):    &quot;&quot;&quot;Weather information.&quot;&quot;&quot;    year: Index[int]    month: Index[int]    temp: Data[float]ser = Weather.new(...)```Unlike `AsFrame`, the second and subsequent data fields are ignored in the Series creation even if they exist.Other rules are the same as for the DataFrame creation.## Advanced usage### Metadata storingFields typed by `Attr` are *attribute fields*, each value of which will become an item of attributes of a DataFrame or a Series object:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonfrom dataclasses import dataclassfrom pandas_dataclasses import AsFrame, Attr, Data, Index```&lt;/details&gt;```python@dataclassclass Weather(AsFrame):    &quot;&quot;&quot;Weather information.&quot;&quot;&quot;    year: Index[int]    month: Index[int]    temp: Data[float]    wind: Data[float]    loc: Attr[str] = &quot;Tokyo&quot;    lon: Attr[float] = 139.69167    lat: Attr[float] = 35.68944df = Weather.new(...)```where `df.attrs` will become like:```python{&quot;loc&quot;: &quot;Tokyo&quot;, &quot;lon&quot;: 139.69167, &quot;lat&quot;: 35.68944}```### Custom namingThe name of attribute, data, or index can be explicitly specified by adding a hashable annotation to the corresponding type:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonfrom dataclasses import dataclassfrom typing import Annotated as Annfrom pandas_dataclasses import AsFrame, Attr, Data, Index```&lt;/details&gt;```python@dataclassclass Weather(AsFrame):    &quot;&quot;&quot;Weather information.&quot;&quot;&quot;    year: Ann[Index[int], &quot;Year&quot;]    month: Ann[Index[int], &quot;Month&quot;]    temp: Ann[Data[float], &quot;Temperature (deg C)&quot;]    wind: Ann[Data[float], &quot;Wind speed (m/s)&quot;]    loc: Ann[Attr[str], &quot;Location&quot;] = &quot;Tokyo&quot;    lon: Ann[Attr[float], &quot;Longitude (deg)&quot;] = 139.69167    lat: Ann[Attr[float], &quot;Latitude (deg)&quot;] = 35.68944df = Weather.new(...)```where `df` and `df.attrs` will become like:```            Temperature (deg C)  Wind speed (m/s)Year Month2020 1                      7.1               2.4     7                     24.3               3.12021 1                      5.4               2.3     7                     25.9               2.42022 1                      4.9               2.6``````python{&quot;Location&quot;: &quot;Tokyo&quot;, &quot;Longitude (deg)&quot;: 139.69167, &quot;Latitude (deg)&quot;: 35.68944}```If an annotation is a [format string], it will be formatted by a dataclass object before the data creation:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonfrom dataclasses import dataclassfrom typing import Annotated as Annfrom pandas_dataclasses import AsFrame, Data, Index```&lt;/details&gt;```python@dataclassclass Weather(AsFrame):    &quot;&quot;&quot;Weather information.&quot;&quot;&quot;    year: Ann[Index[int], &quot;Year&quot;]    month: Ann[Index[int], &quot;Month&quot;]    temp: Ann[Data[float], &quot;Temperature ({.temp_unit})&quot;]    wind: Ann[Data[float], &quot;Wind speed ({.wind_unit})&quot;]    temp_unit: str = &quot;deg C&quot;    wind_unit: str = &quot;m/s&quot;df = Weather.new(..., temp_unit=&quot;deg F&quot;, wind_unit=&quot;km/h&quot;)```where units of the temperature and the wind speed will be dynamically updated (see also [naming rules](#naming-rules)).### Hierarchical columnsAdding tuple annotations to data fields will create DataFrame objects with hierarchical columns:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonfrom dataclasses import dataclassfrom typing import Annotated as Annfrom pandas_dataclasses import AsFrame, Data, Index```&lt;/details&gt;```python@dataclassclass Weather(AsFrame):    &quot;&quot;&quot;Weather information.&quot;&quot;&quot;    year: Ann[Index[int], &quot;Year&quot;]    month: Ann[Index[int], &quot;Month&quot;]    temp_avg: Ann[Data[float], (&quot;Temperature (deg C)&quot;, &quot;Average&quot;)]    temp_max: Ann[Data[float], (&quot;Temperature (deg C)&quot;, &quot;Maximum&quot;)]    wind_avg: Ann[Data[float], (&quot;Wind speed (m/s)&quot;, &quot;Average&quot;)]    wind_max: Ann[Data[float], (&quot;Wind speed (m/s)&quot;, &quot;Maximum&quot;)]df = Weather.new(...)```where `df` will become like:```           Temperature (deg C)         Wind speed (m/s)                       Average Maximum          Average MaximumYear Month2020 1                     7.1    11.1              2.4     8.8     7                    24.3    27.7              3.1    10.22021 1                     5.4    10.3              2.3    10.7     7                    25.9    30.3              2.4     9.02022 1                     4.9     9.4              2.6     8.8```Column names can be (explicitly) specified by dictionary annotations:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonfrom dataclasses import dataclassfrom typing import Annotated as Annfrom pandas_dataclasses import AsFrame, Data, Index```&lt;/details&gt;```pythondef name(meas: str, stat: str) -&gt; dict[str, str]:    &quot;&quot;&quot;Create a dictionary annotation for a column name.&quot;&quot;&quot;    return {&quot;Measurement&quot;: meas, &quot;Statistic&quot;: stat}@dataclassclass Weather(AsFrame):    &quot;&quot;&quot;Weather information.&quot;&quot;&quot;    year: Ann[Index[int], &quot;Year&quot;]    month: Ann[Index[int], &quot;Month&quot;]    temp_avg: Ann[Data[float], name(&quot;Temperature (deg C)&quot;, &quot;Average&quot;)]    temp_max: Ann[Data[float], name(&quot;Temperature (deg C)&quot;, &quot;Maximum&quot;)]    wind_avg: Ann[Data[float], name(&quot;Wind speed (m/s)&quot;, &quot;Average&quot;)]    wind_max: Ann[Data[float], name(&quot;Wind speed (m/s)&quot;, &quot;Maximum&quot;)]df = Weather.new(...)```where `df` will become like:```Measurement Temperature (deg C)         Wind speed (m/s)Statistic               Average Maximum          Average MaximumYear Month2020 1                      7.1    11.1              2.4     8.8     7                     24.3    27.7              3.1    10.22021 1                      5.4    10.3              2.3    10.7     7                     25.9    30.3              2.4     9.02022 1                      4.9     9.4              2.6     8.8```If a tuple or dictionary annotation has [format string]s, they will also be formatted by a dataclass object (see also [naming rules](#naming-rules)).### Multiple-item fieldsMultiple (and possibly extra) attributes, data, or indices can be added by fields with corresponding type hints wrapped by `Multiple`:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonfrom dataclasses import dataclassfrom pandas_dataclasses import AsFrame, Data, Index, Multiple```&lt;/details&gt;```python@dataclassclass Weather(AsFrame):    &quot;&quot;&quot;Weather information.&quot;&quot;&quot;    year: Index[int]    month: Index[int]    temp: Data[float]    wind: Data[float]    extra_index: Multiple[Index[int]]    extra_data: Multiple[Data[float]]df = Weather.new(    [2020, 2020, 2021, 2021, 2022],    [1, 7, 1, 7, 1],    [7.1, 24.3, 5.4, 25.9, 4.9],    [2.4, 3.1, 2.3, 2.4, 2.6],    extra_index={        &quot;day&quot;: [1, 1, 1, 1, 1],        &quot;week&quot;: [2, 2, 4, 3, 5],    },    extra_data={        &quot;humid&quot;: [65, 89, 57, 83, 52],        &quot;press&quot;: [1013.8, 1006.2, 1014.1, 1007.7, 1012.7],    },)```where `df` will become like:```                     temp  wind  humid   pressyear month day week2020 1     1   2      7.1   2.4   65.0  1013.8     7     1   2     24.3   3.1   89.0  1006.22021 1     1   4      5.4   2.3   57.0  1014.1     7     1   3     25.9   2.4   83.0  1007.72022 1     1   5      4.9   2.6   52.0  1012.7```If multiple items of the same name exist, the last-defined one will be finally used.For example, if the `extra_index` field contains `&quot;month&quot;: [2, 8, 2, 8, 2]`, the values given by the `month` field will be overwritten.### Custom pandas factoryA custom class can be specified as a factory for the Series or DataFrame creation by `As`, the generic version of `AsFrame` and `AsSeries`.Note that the custom class must be a subclass of either `pandas.Series` or `pandas.DataFrame`:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonimport pandas as pdfrom dataclasses import dataclassfrom pandas_dataclasses import As, Data, Index```&lt;/details&gt;```pythonclass CustomSeries(pd.Series):    &quot;&quot;&quot;Custom pandas Series.&quot;&quot;&quot;    pass@dataclassclass Temperature(As[CustomSeries]):    &quot;&quot;&quot;Temperature information.&quot;&quot;&quot;    year: Index[int]    month: Index[int]    temp: Data[float]ser = Temperature.new(...)```where `ser` is statically regarded as `CustomSeries` and will become a `CustomSeries` object.Generic Series type (`Series[T]`) is also supported, however, it is only for static the type check in the current pandas versions.In such cases, you can additionally give a factory that must work in runtime as a class argument:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonimport pandas as pdfrom dataclasses import dataclassfrom pandas_dataclasses import As, Data, Index```&lt;/details&gt;```python@dataclassclass Temperature(As[&quot;pd.Series[float]&quot;], factory=pd.Series):    &quot;&quot;&quot;Temperature information.&quot;&quot;&quot;    year: Index[int]    month: Index[int]    temp: Data[float]ser = Temperature.new(...)```where `ser` is statically regarded as `Series[float]` but will become a `Series` object in runtime.## Appendix### Data typing rulesThe data type (dtype) of data or index is determined from the first `Data` or `Index` type of the corresponding field, respectively.The following table shows how the data type is inferred:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonfrom typing import Any, Annotated as Ann, Literal as Lfrom pandas_dataclasses import Data```&lt;/details&gt;Type hint | Inferred data type--- | ---`Data[Any]` | `None` (no type casting)`Data[None]` | `None` (no type casting)`Data[int]` | `numpy.int64``Data[int \| str]` | `numpy.int64``Data[numpy.int32]` | `numpy.int32``Data[L[&quot;datetime64[ns]&quot;]]` | `numpy.dtype(&quot;&lt;M8[ns]&quot;)``Data[L[&quot;category&quot;]]` | `pandas.CategoricalDtype()``Data[int] \| str` | `numpy.int64``Data[int] \| Data[float]` | `numpy.int64``Ann[Data[int], &quot;spam&quot;]` | `numpy.int64``Data[Ann[int, &quot;spam&quot;]]` | `numpy.int64`### Naming rulesThe name of attribute, data, or index is determined from the first annotation of the first `Attr`, `Data`, or `Index` type of the corresponding field, respectively.If the annotation is a [format string] or a tuple that has [format string]s, it (they) will be formatted by a dataclass object before the data creation.Otherwise, the field name (i.e. argument name) will be used.The following table shows how the name is inferred:&lt;details&gt;&lt;summary&gt;Click to see all imports&lt;/summary&gt;```pythonfrom typing import Any, Annotated as Annfrom pandas_dataclasses import Data```&lt;/details&gt;Type hint | Inferred name--- | ---`Data[Any]` | (field name)`Ann[Data[Any], ..., &quot;spam&quot;]` | (field name)`Ann[Data[Any], &quot;spam&quot;]` | `&quot;spam&quot;``Ann[Data[Any], &quot;spam&quot;, &quot;ham&quot;]` | `&quot;spam&quot;``Ann[Data[Any], &quot;spam&quot;] \| Ann[str, &quot;ham&quot;]` | `&quot;spam&quot;``Ann[Data[Any], &quot;spam&quot;] \| Ann[Data[float], &quot;ham&quot;]` | `&quot;spam&quot;``Ann[Data[Any], &quot;{.name}&quot;` | `&quot;{.name}&quot;.format(obj)``Ann[Data[Any], (&quot;spam&quot;, &quot;ham&quot;)]` | `(&quot;spam&quot;, &quot;ham&quot;)``Ann[Data[Any], (&quot;{.name}&quot;, &quot;ham&quot;)]` | `(&quot;{.name}&quot;.format(obj), &quot;ham&quot;)`where `obj` is a dataclass object that is expected to have `obj.name`.### Development roadmapRelease version | Features--- | ---v0.5 | Support for dynamic namingv0.6 | Support for extension array and dtypev0.7 | Support for hierarchical columnsv0.8 | Support for mypy and callable pandas factoryv0.9 | Support for Ellipsis (`...`) as an alias of field namev0.10 | Support for union type in type hintsv0.11 | Support for Python 3.11 and drop support for Python 3.7v0.12 | Support for multiple items received in a single fieldv1.0 | Initial major release (freezing public features until v2.0)&lt;!-- References --&gt;[dataclass]: https://docs.python.org/3/library/dataclasses.html[format string]: https://docs.python.org/3/library/string.html#format-string-syntax[mypy]: http://www.mypy-lang.org[NumPy]: https://numpy.org[pandas]: https://pandas.pydata.org[Pylance]: https://github.com/microsoft/pylance-release[Pyright]: https://github.com/microsoft/pyright</longdescription>
</pkgmetadata>