<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===========troposphere===========.. image:: https://img.shields.io/pypi/v/troposphere.svg    :target: https://pypi.python.org/pypi/troposphere    :alt: PyPI Version.. image:: https://github.com/cloudtools/troposphere/actions/workflows/tests.yml/badge.svg    :target: https://github.com/cloudtools/troposphere/actions?query=branch%3Amain    :alt: Build Status.. image:: https://img.shields.io/pypi/l/troposphere.svg    :target: https://opensource.org/licenses/BSD-2-Clause    :alt: license: New BSD license.. image:: https://readthedocs.org/projects/troposphere/badge/?version=latest    :target: https://troposphere.readthedocs.io/en/latest/?badge=latest    :alt: Documentation StatusAbout=====troposphere - library to create `AWS CloudFormation`_ descriptionsThe troposphere library allows for easier creation of the `AWS CloudFormationJSON`_ by writing Python code to describe the AWS resources. troposphere alsoincludes some basic support for `OpenStack resources`_ via Heat.To facilitate catching CloudFormation or JSON errors early the library hasproperty and type checking built into the classes.Installation============troposphere can be installed using the pip distribution system for Python byissuing:.. code:: sh    $ pip install troposphereTo install troposphere with `awacs &lt;https://github.com/cloudtools/awacs&gt;`_(recommended soft dependency):.. code:: sh    $ pip install troposphere[policy]Alternatively, you can use `setup.py` to install by cloning this repositoryand issuing:.. code:: sh    $ python setup.py install  # you may need sudo depending on your python installationExamples========A simple example to create an instance would look like this:.. code:: python    &gt;&gt;&gt; from troposphere import Ref, Template    &gt;&gt;&gt; import troposphere.ec2 as ec2    &gt;&gt;&gt; t = Template()    &gt;&gt;&gt; instance = ec2.Instance(&quot;myinstance&quot;)    &gt;&gt;&gt; instance.ImageId = &quot;ami-951945d0&quot;    &gt;&gt;&gt; instance.InstanceType = &quot;t1.micro&quot;    &gt;&gt;&gt; t.add_resource(instance)    &lt;troposphere.ec2.Instance object at 0x101bf3390&gt;    &gt;&gt;&gt; print(t.to_json())    {        &quot;Resources&quot;: {            &quot;myinstance&quot;: {                &quot;Properties&quot;: {                    &quot;ImageId&quot;: &quot;ami-951945d0&quot;,                    &quot;InstanceType&quot;: &quot;t1.micro&quot;                },                &quot;Type&quot;: &quot;AWS::EC2::Instance&quot;            }        }    }    &gt;&gt;&gt; print(t.to_yaml())    Resources:        myinstance:            Properties:                ImageId: ami-951945d0                InstanceType: t1.micro            Type: AWS::EC2::InstanceAlternatively, parameters can be used instead of properties:.. code:: python    &gt;&gt;&gt; instance = ec2.Instance(&quot;myinstance&quot;, ImageId=&quot;ami-951945d0&quot;, InstanceType=&quot;t1.micro&quot;)    &gt;&gt;&gt; t.add_resource(instance)    &lt;troposphere.ec2.Instance object at 0x101bf3550&gt;And ``add_resource()`` returns the object to make it easy to use with ``Ref()``:.. code:: python    &gt;&gt;&gt; instance = t.add_resource(ec2.Instance(&quot;myinstance&quot;, ImageId=&quot;ami-951945d0&quot;, InstanceType=&quot;t1.micro&quot;))    &gt;&gt;&gt; Ref(instance)    &lt;troposphere.Ref object at 0x101bf3490&gt;---------------------------------------------------------------------Examples of the error checking (full tracebacks removed for clarity):---------------------------------------------------------------------Incorrect property being set on AWS resource:.. code:: python    &gt;&gt;&gt; import troposphere.ec2 as ec2    &gt;&gt;&gt; ec2.Instance(&quot;ec2instance&quot;, image=&quot;i-XXXX&quot;)    Traceback (most recent call last):    ...    AttributeError: AWS::EC2::Instance object does not support attribute imageIncorrect type for AWS resource property:.. code:: python    &gt;&gt;&gt; ec2.Instance(&quot;ec2instance&quot;, ImageId=1)    Traceback (most recent call last):    ...    TypeError: ImageId is &lt;type 'int'&gt;, expected &lt;type 'basestring'&gt;Missing required property for the AWS resource:.. code:: python    &gt;&gt;&gt; from troposphere import Template    &gt;&gt;&gt; import troposphere.ec2 as ec2    &gt;&gt;&gt; t = Template()    &gt;&gt;&gt; t.add_resource(ec2.Subnet(&quot;ec2subnet&quot;, VpcId=&quot;vpcid&quot;))    &lt;troposphere.ec2.Subnet object at 0x100830ed0&gt;    &gt;&gt;&gt; print(t.to_json())    Traceback (most recent call last):    ...    ValueError: Resource CidrBlock required in type AWS::EC2::Subnet (title: ec2subnet)Currently supported resource types======================================- `AWS Resource Types`_- `OpenStack Resource Types`_Duplicating a single instance sample would look like this=========================================================.. code:: python    # Converted from EC2InstanceSample.template located at:    # http://aws.amazon.com/cloudformation/aws-cloudformation-templates/    from troposphere import Base64, FindInMap, GetAtt    from troposphere import Parameter, Output, Ref, Template    import troposphere.ec2 as ec2    template = Template()    keyname_param = template.add_parameter(Parameter(        &quot;KeyName&quot;,        Description=&quot;Name of an existing EC2 KeyPair to enable SSH &quot;                    &quot;access to the instance&quot;,        Type=&quot;String&quot;,    ))    template.add_mapping('RegionMap', {        &quot;us-east-1&quot;:      {&quot;AMI&quot;: &quot;ami-7f418316&quot;},        &quot;us-west-1&quot;:      {&quot;AMI&quot;: &quot;ami-951945d0&quot;},        &quot;us-west-2&quot;:      {&quot;AMI&quot;: &quot;ami-16fd7026&quot;},        &quot;eu-west-1&quot;:      {&quot;AMI&quot;: &quot;ami-24506250&quot;},        &quot;sa-east-1&quot;:      {&quot;AMI&quot;: &quot;ami-3e3be423&quot;},        &quot;ap-southeast-1&quot;: {&quot;AMI&quot;: &quot;ami-74dda626&quot;},        &quot;ap-northeast-1&quot;: {&quot;AMI&quot;: &quot;ami-dcfa4edd&quot;}    })    ec2_instance = template.add_resource(ec2.Instance(        &quot;Ec2Instance&quot;,        ImageId=FindInMap(&quot;RegionMap&quot;, Ref(&quot;AWS::Region&quot;), &quot;AMI&quot;),        InstanceType=&quot;t1.micro&quot;,        KeyName=Ref(keyname_param),        SecurityGroups=[&quot;default&quot;],        UserData=Base64(&quot;80&quot;)    ))    template.add_output([        Output(            &quot;InstanceId&quot;,            Description=&quot;InstanceId of the newly created EC2 instance&quot;,            Value=Ref(ec2_instance),        ),        Output(            &quot;AZ&quot;,            Description=&quot;Availability Zone of the newly created EC2 instance&quot;,            Value=GetAtt(ec2_instance, &quot;AvailabilityZone&quot;),        ),        Output(            &quot;PublicIP&quot;,            Description=&quot;Public IP address of the newly created EC2 instance&quot;,            Value=GetAtt(ec2_instance, &quot;PublicIp&quot;),        ),        Output(            &quot;PrivateIP&quot;,            Description=&quot;Private IP address of the newly created EC2 instance&quot;,            Value=GetAtt(ec2_instance, &quot;PrivateIp&quot;),        ),        Output(            &quot;PublicDNS&quot;,            Description=&quot;Public DNSName of the newly created EC2 instance&quot;,            Value=GetAtt(ec2_instance, &quot;PublicDnsName&quot;),        ),        Output(            &quot;PrivateDNS&quot;,            Description=&quot;Private DNSName of the newly created EC2 instance&quot;,            Value=GetAtt(ec2_instance, &quot;PrivateDnsName&quot;),        ),    ])    print(template.to_json())Community=========We have a Google Group, cloudtools-dev_, where you can ask questions andengage with the troposphere community. Issues and pull requests are alwayswelcome!Licensing=========troposphere is licensed under the `BSD 2-Clause license`_.See `LICENSE`_ for the troposphere full license text... _`AWS CloudFormation`: http://aws.amazon.com/cloudformation.. _`AWS CloudFormation JSON`: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html.. _`OpenStack resources`: http://docs.openstack.org/developer/heat/template_guide/openstack.html.. _cloudtools-dev: https://groups.google.com/forum/#!forum/cloudtools-dev.. _`LICENSE`: https://github.com/cloudtools/troposphere/blob/master/LICENSE.. _`BSD 2-Clause license`: http://opensource.org/licenses/BSD-2-Clause.. _`AWS Resource Types`: https://github.com/cloudtools/troposphere/blob/master/resources_aws.md.. _`OpenStack Resource Types`: https://github.com/cloudtools/troposphere/blob/master/resources_openstack.md</longdescription>
</pkgmetadata>