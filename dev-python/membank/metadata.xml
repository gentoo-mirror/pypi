<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># membankPython library for storing data in persistent memory (sqlite, postgresql, berkeley db)## goalsProvide interface to database storage that automates heavy lifting of database setup, migration, table definition, query construction.## quick intro### add items to persistent storage```pythonimport dataclasses as data # Python standard libraryfrom membank import LoadMemory@data.dataclassclass Dog():    breed: str    color: str = &quot;black&quot;    weight: float = 0    data: dict = data.field(default_factory=dict)    picture: bytes = b''    aliases: list = data.field(default_factory=list)@data.dataclassclass DogWithID():    id: str = data.field(default=None, metadata={&quot;key&quot;: True})    breed: str    color: str = &quot;black&quot;    weight: float = 0    data: dict = data.field(default_factory=dict)    picture: bytes = b''    alive: bool = Truememory = LoadMemory() # defaults to sqlite memorymemory.put(Dog('Puli')) # stores object into databasedog = memory.get.dog() # retrieves first object foundassert dog.breed == 'Puli'dog.color = &quot;white&quot;memory.put(dog) # be carefull you store another dogdog = memory.put(DogWithID(&quot;AB1234&quot;, &quot;Puli&quot;))dog = memory.get.dogwithid(id=&quot;AB1234&quot;)dog.color = &quot;white&quot;memory.put(dog) # now you update existing dog```### retrieve those after```pythonmemory = LoadMemory() # to make this work in new process, don't use sqlite memorydog = memory.get.dog() # get first found or Noneassert dog.color == 'black'dogs = memory.get(&quot;dog&quot;) # always returns list (empty or with items)assert len(dogs) &gt;= 0```### editing returned objects```pythondog = memory.get.dog()dog.breed = 'Labdrador'memory.put(dog) # stores edited object back```### filter objects```pythondog = memory.get.dog(breed='Labdrador')assert dog.breed == 'Labrador'```</longdescription>
</pkgmetadata>