<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># multi-label-learnmlleran is a python library for multi-label classification bulti on scikit-learn and numpy.## ImplementationThe implementation is based on the paper [A Review on Multi-Label Learning Algorithms](https://ieeexplore.ieee.org/document/6471714/), and the implementated algorithms include:**Problem Transformation**- [x] Binary Relevance- [x] Classifier Chains- [x] Calibrated Label Ranking- [x] Random k-Labelsets**Algorithm Adaptation**- [x] Multi-Label k-Nearest Neighbor- [x] Multi-Label Decision Tree- [ ] Ranking Support Vector Machine- [ ] Collective Multi-Label Classifier## Installation```bashpip install mllearn```**Note: Support Python3 only.** ## Data FormatAll data type should be `ndarray`, especially y should be the binary format. For example, if your dataset totally have 5 labels and one of your samples has only first and last labels, then the corresponding output should be `[1, 0, 0, 0, 1]`.```pythonsamples, features = X_train.shapesamples, labels = y_train.shapesamples_test, features = X_test.shapesamples_test, labels = y_test.shape```You can also find multi-label dataset provided by Mulan [here](http://mulan.sourceforge.net/datasets-mlc.html).## Example UsageThis library includes 2 parts, algorithms and metrics.```pythonfrom mllearn.problem_transform import BinaryRelevanceclassif = BinaryRelevance()classif.fit(X_train, y_train)predictions = classif.predict(X_test)``````pythonfrom mllearn.metrics import subset_accacc = subset_acc(y_test, predictions)```</longdescription>
</pkgmetadata>