<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**This work has been overtaken by the `http3` project:** https://www.encode.io/http3/We now recommend using `http3.AsyncClient()` for async/await support with a requests-compatible API.**Note**: Use `ipython` to try this from the console, since it supports `await`.```python&gt;&gt;&gt; import http3&gt;&gt;&gt; client = http3.AsyncClient()&gt;&gt;&gt; r = await client.get('https://www.example.org/')&gt;&gt;&gt; r.status_code200&gt;&gt;&gt; r.text'&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Example Domain&lt;/title&gt;...'```---# requests-asyncBrings support for `async`/`await` syntax to Python's fabulous `requests` library.&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/encode/requests-async&quot;&gt;    &lt;img src=&quot;https://travis-ci.org/encode/requests-async.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/encode/requests-async&quot;&gt;    &lt;img src=&quot;https://codecov.io/gh/encode/requests-async/branch/master/graph/badge.svg&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/requests-async/&quot;&gt;    &lt;img src=&quot;https://badge.fury.io/py/requests-async.svg?cache0&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;/p&gt;## Requirements* Python 3.6+## Installation```shell$ pip install requests-async```## UsageJust use *the standard requests API*, but use `await` for making requests.**Note**: Use `ipython` to try this from the console, since it supports `await`.```pythonimport requests_async as requestsresponse = await requests.get('https://example.org')print(response.status_code)print(response.text)```Or use explicit sessions, with an async context manager.```pythonimport requests_async as requestsasync with requests.Session() as session:    response = await session.get('https://example.org')    print(response.status_code)    print(response.text)```The `requests_async` package subclasses `requests`, so you're getting all thestandard behavior and API you'd expect.## Streaming responses &amp; requestsThe `iter_content()` and `iter_lines()` methods are async iterators.```pythonresponse = await requests.get('https://example.org', stream=True)async for chunk in response.iter_content():    ...```The method signatures remain the same as the standard `requests` API:* `iter_content(chunk_size=1, decode_unicode=False)`* `iter_lines(chunk_size=512, decode_unicode=False, delimiter=None)`The methods will yield text if `decode_unicode` is set and the response includesan encoding. Otherwise the methods will yield bytes.You can also stream request bodies. To do this you should use an asynchronousgenerator that yields bytes.```pythonasync def stream_body():    ...response = await requests.post('https://example.org', data=stream_body())```## Mock RequestsIn some situations, such as when you're testing a web application, you maynot want to make actual outgoing network requests, but would prefer insteadto mock out the endpoints.You can do this using the `ASGISession`, which allows you to plug intoany ASGI application, instead of making actual network requests.```pythonimport requests_async# Create a mock service, with Starlette, Responder, Quart, FastAPI, Bocadillo,# or any other ASGI web framework.mock_app = ...if TESTING:    # Issue requests to the mocked application.    requests = requests_async.ASGISession(mock_app)else:    # Make live network requests.    requests = requests_async.Session()```## Test ClientYou can also use `ASGISession` as a test client for any ASGI application.You'll probably want to install `pytest` and `pytest-asyncio`, or somethingequivalent, to allow you to write `async` test cases.```pythonfrom requests_async import ASGISessionfrom myproject import appimport pytest@pytest.mark.asyncioasync def test_homepage():    client = ASGISession(app)    response = await client.get(&quot;/&quot;)    assert response.status_code == 200```## Alternatives* The [`http3` package][http3] both sync and async HTTP clients, with a requests-compatible API.* The [`aiohttp` package][aiohttp] provides an alternative client for making async HTTP requests.[issues]: https://github.com/encode/requests-async/issues[aiohttp]: https://docs.aiohttp.org/en/stable/client.html[http3]: https://github.com/encode/http3</longdescription>
</pkgmetadata>