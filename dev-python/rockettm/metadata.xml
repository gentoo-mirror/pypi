<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|pythonversions|Rocket task manager===================Asynchronous task manager in pythonInstall-------.. code:: bash    pip install rockettmLink pypi: https://pypi.python.org/pypi/rockettmExample-------Redis not is localhost~~~~~~~~~~~~~~~~~~~~~~.. code:: python    from rockettm import connect    # to run it, reconnect to Redis    connect(&quot;other_ip_or_domain&quot;)Configure logger in client~~~~~~~~~~~~~~~~~~~~~~~~~~Using standard logger in pythonhttps://docs.python.org/2/library/logging.html#logging.basicConfig.. code:: python    import logging    from rockettm import send_task    # 50 CRITICAL, 40 ERROR, 30 WARNING, 20 INFO, 10 DEBUG, 0 NOTSET    logging.basicConfig(level=20)    send_task(&quot;queue_name&quot;, &quot;name_task&quot;, &quot;Pepito&quot;)Configure logger in server~~~~~~~~~~~~~~~~~~~~~~~~~~in settings.py:.. code:: python    # filename (DEFAULT &quot;rockettm.log&quot;)    # level (DEFAULT 30)    # 50 CRITICAL, 40 ERROR, 30 WARNING, 20 INFO, 10 DEBUG, 0 NOTSET    logger = {'filename': &quot;rockettm.log&quot;,  # optional,                                           # is not defined print in console              'level': 10  # optional             }Send task~~~~~~~~~.. code:: python    # send task    from rockettm import send_task    send_task(&quot;queue_name&quot;, &quot;name_task&quot;, &quot;arg1&quot;, [&quot;arg2&quot;, &quot;2&quot;], {'args': 3}, ('arg', 4), example=&quot;ok&quot;)Declare new task~~~~~~~~~~~~~~~~Warning! if there are 2 tasks registered with the same name, will run 2!.. code:: python    # task example    from rockettm import task    @task('name_task')    def function1(*args, **kwargs):        return True    # max_time(timeout in seconds) example    @task('name_task2', max_time=10)    def long_call(*args, **kwargs):        return Truesettings.py example~~~~~~~~~~~~~~~~~~~.. code:: python    # settings.py example    ip = &quot;127.0.0.1&quot;    port = 5672    logger = {'filename': &quot;rockettm.log&quot;,  # optional,                                           # is not defined print in console              'level': 10  # optional              }    # search @task in imports    imports = ['examples.test1',               'examples.test2']    # support params    # name (mandatory), string    # concurrency (mandatory), int    # durable (optional), boolean    # max_time (in seconds) (optional), int    queues = [{'name': 'rocket1', 'durable': True, 'concurrency': 7},              {'name': 'rocket2', 'concurrency': 1},              {'name': 'rocket3', 'concurrency': 1, 'max_time': 10}]Run server.. code:: bash    rockettm_server file_settings.pyDocumentation-------------Functions~~~~~~~~~-  task(name\_task\_event)It is a decorator to create tasks-  send\_task(queue, name\_task, \*args)Send task-  add\_task(name\_task, func(object))Add manual task-  connect(ip\_or\_domain)connects to another server other than localhostBasicevents-----------rockettm currently used basicevents for noticificaciones the api. Youcan use basicevents as its official documentation \*-  Do not need to run(), rockettm up a common process for all workershttps://github.com/agalera/basicevents.. |pythonversions| image:: https://img.shields.io/pypi/pyversions/rockettm.svg   :target: https://pypi.python.org/pypi/rockettmCHANGELOG=========2.2.13 (2017-05-16)--------------------  remove prints ...2.2.12 (2017-05-16)--------------------  fix gevent incompatibility (timekiller)2.2.11 (2017-05-11)--------------------  fix gevent incompatibility2.2.10 (2017-04-24)--------------------  qsize support name and namespace arguments-  empty support name and namespace arguments2.2.9 (2017-04-19)-------------------  only support ujson-  fix serializer2.2.8 (2017-04-19)-------------------  fix import2.2.4 (2017-04-19)-------------------  fix dependencies2.2.3 (2017-04-07)-------------------  Graceful stop2.2.2 (2017-03-31)-------------------  support force exit2.2.1 (2017-03-31)-------------------  sigterm safe2.2.0 (2017-03-18)-------------------  callback is optional-  return callback to rabbitmq (queue results)-  Support return other results to basicevents (send(&quot;results&quot;, &quot;type&quot;,   &quot;data&quot;))2.1.11 (2016-12-12)--------------------  Fix dependencies conflict2.1.11 (2016-11-02)--------------------  Fix dependencies conflict2.1.10 (2016-10-20)--------------------  Clean code2.1.9 (2016-10-19)-------------------  prevent infinite callback2.1.6 (2016-09-29)-------------------  send return False with failed send2.1.5 (2016-09-29)-------------------  Fix name var2.1.4 (2016-09-29)-------------------  Support custom id2.1.3 (2016-09-28)-------------------  Supported basicevents2.1.2 (2016-09-28)-------------------  Fix dead MainThread in Python 3.4.22.1.1 (2016-09-21)-------------------  clean code2.1.0 (2016-09-21)-------------------  call api in init tasks and return status task2.0.6 (2016-09-20)-------------------  added support kwargs in tasks2.0.5 (2016-09-07)-------------------  Revert heartbeat2.0.4 (2016-09-07)-------------------  implemented heartbeat-  fix ack failed for loss connection2.0.3 (2016-09-07)-------------------  prevent relaunch finish task2.0.2 (2016-09-07)-------------------  Change prefetch to 12.0.1 (2016-09-06)-------------------  Reuse connection in send\_tasks2.0.0 (2016-09-06)-------------------  Migrate pika to kambu1.0.16 (2016-09-06)--------------------  Fix ack1.0.8 - 1.0.15 (2016-09-06)----------------------------  clean code1.0.8 - 1.0.13 (2016-09-05)----------------------------  fix timeouts and other exceptions1.0.7 (2016-09-05)-------------------  fix rabbitmq ack timeout1.0.6 (2016-08-26)-------------------  retry sending the message to the queue 5 times before returning an   exception-  When you add in the queue fails, now returns an exception1.0.5 (2016-08-26)-------------------  timekiller stop propagate-  fix inmortal server1.0.4 (2016-08-25)-------------------  run tasks in safe and isolated proccess1.0.3 (2016-08-25)-------------------  Solved multiple errors with disconnection with RabbitMQ-  Update python compatibility (py2.x no loger supported)1.0.2 (2016-08-23)-------------------  Fix automatic declare queues1.0.1 (2016-08-22)-------------------  send\_task now sends the set ip1.0.0 (2016-07-19)-------------------  Added callback support-  generate uuid for task-  all tasks get \_id in first attr-  if multiple tasks with the same name, if continued with the following   fails-  prevent connection closed to send\_task (automatic reconnect)0.2.6 (2016-07-15)-------------------  py3 compatibility-  fix hardcoding durable-  ignore not exists logger config0.2.5 (2016-07-15)-------------------  py3 compatibility0.2.4 (2016-07-15)-------------------  Fix automatic declare queue0.2.3 (2016-06-14)-------------------  Add new dependency (timekiller)0.2.2 (2016-06-14)-------------------  hotfix bad raise0.2.1 (2016-06-14)-------------------  Hotfix rabbitmq\_server command0.2.0 (2016-06-13)-------------------  add support timeout (tasks and queues)0.1.1 (2016-04-27)-------------------  Fix dependencies0.1.0 (2016-03-22)-------------------  Permit change log0.0.4 (2016-03-21)-------------------  Fix CHANGELOG-  Update README0.0.3 (2016-03-21)-------------------  Permit connect different rabbitmq server-  Prevent channel\_closed-  Support durable queues0.0.2 (2016-03-14)-------------------  Add documentation0.0.1 (2016-03-14)-------------------  initial version</longdescription>
</pkgmetadata>