<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-fsm-admin================Mixin and template tags to integrate django-fsm_ state transitions into theDjango Admin.Installation------------.. code:: sh   $ pip install django-fsm-adminOr from GitHub:.. code:: sh   $ pip install -e git://github.com/gadventures/django-fsm-admin.git#egg=django-fsm-adminUsage-----1. Add ``fsm_admin`` to your ``INSTALLED_APPS``.2. Ensure that you have ``&quot;django.core.context_processors.request&quot;`` in your   ``TEMPLATE_CONTEXT_PROCESSORS`` in Django settings. If the setting variable   is not yet defined, add:.. code:: python   from django.conf import settings   TEMPLATE_CONTEXT_PROCESSORS = settings.TEMPLATE_CONTEXT_PROCESSORS + (       &quot;django.core.context_processors.request&quot;,   )3. In your ``admin.py`` file, use ``FSMTransitionMixin`` to add behaviour to your   ModelAdmin. ``FSMTransitionMixin`` should be before ``ModelAdmin``, the order is   important.It assumes that your workflow state field is named ``state``, however you canoverride it or add additional workflow state fields with the attribute``fsm_field``... code:: python   from fsm_admin.mixins import FSMTransitionMixin   class YourModelAdmin(FSMTransitionMixin, admin.ModelAdmin):       # The name of one or more FSMFields on the model to transition       fsm_field = ['wf_state',]   admin.site.register(YourModel, YourModelAdmin)4. By adding ``custom=dict(admin=False)`` to the transition decorator, one can   disallow a transition to show up in the admin interface. This specially is   useful, if the transition method accepts parameters without default values,   since in **django-fsm-admin** no arguments can be passed into the transition   method... code:: python    @transition(       field='state',       source=['startstate'],       target='finalstate',       custom=dict(admin=False),    )    def do_something(self, param):       # will not add a button &quot;Do Something&quot; to your admin model interfaceBy adding ``FSM_ADMIN_FORCE_PERMIT = True`` to your configuration settings, theabove restriction becomes the default. Then one must explicitly allow that atransition method shows up in the admin interface... code:: python   @transition(       field='state',       source=['startstate'],       target='finalstate',       custom=dict(admin=True),   )   def proceed(self):       # will add a button &quot;Proceed&quot; to your admin model interfaceThis is useful, if most of your state transitions are handled by other means,such as external events communicating with the API of your application.Try the example---------------.. code:: sh   $ git clone git@github.com:gadventures/django-fsm-admin.git   $ cd django-fsm-admin   $ mkvirtualenv fsm_admin   $ pip install -r requirements.txt   $ python setup.py develop   $ cd example   $ python manage.py syncdb   $ python manage.py runserver.. _django-fsm: https://github.com/kmmbvnr/django-fsm</longdescription>
</pkgmetadata>