<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Goated Python LibraryA handy library to interacting with, sourcing information from and trading on the Goated Exchange.## Creating an authenticated Client to interact with the API using email and password```from goated.client import TradingClient# Create a Goated Client Object to interact with the APIclient = TradingClient.create_with_login(    url = &quot;https://api.goated.com&quot;,    email = &quot;YOUR_GOATED_EMAIL&quot;,    password = &quot;YOUR_GOATED_PASSWORD&quot;)```## Or using API Key and Secret (available from account tab)```from goated.client import TradingClient# Create a Goated Client Object to interact with the APIclient = TradingClient.create_with_api_key(    url = &quot;https://api.goated.com&quot;,    api_key = &quot;YOUR_GOATED_API_KEY&quot;,    api_secret = &quot;YOUR_GOATED_API_SECRET&quot;)```## Creating a State container, sourcing and loading some user information into the container```# Create a State Container object to hold relational statestate = Container()# Get balances response from APIbalances_response = client.get_balances()# Add/update it within the state containerstate.update_balances(balances_response)# Get positions response from APIpositions_response = client.get_positions() # Without any filters# Add/update it within the state containerstate.update_positions(positions_response)# Get orders response from APIorders_response = client.get_orders() # Without any filters# Add/update it within the state containerstate.update_orders(orders_response)print(state.__dict__)```## Sourcing information from the API ```# Get all categoriescategories = client.get_categories()  # Without any filtersprint('Categories:')print(categories)# Get subcategory record for first categorycategory_id = categories[0].get('id')subcategories = client.get_subcategories(    category_ids=[category_id]) if category_id != None else []print('Subcategories:')print(subcategories)# Get events in the first subcategorysubcategory_id = subcategories[0].get('id') if len(subcategories) &gt; 0 else Noneevents = client.get_events(    subcategory_ids=[subcategory_id]) if subcategory_id != None else []print('Events:')print(events)# Get all markets in the first eventevent_id = events[0].get('id') if len(events) &gt; 0 else Nonemarkets = client.get_markets(    event_id=[event_id]) if event_id != None else []print('Markets:')print(markets)```</longdescription>
</pkgmetadata>