<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>GitHub Pages Import===================[![CI status](https://github.com/davisp/ghp-import/workflows/CI/badge.svg)](https://github.com/davisp/ghp-import/actions?query=workflow%3Aci)[![CircleCI](https://circleci.com/gh/c-w/ghp-import/tree/master.svg?style=svg)](https://circleci.com/gh/c-w/ghp-import/tree/master)[![TravisCI](https://travis-ci.org/c-w/ghp-import.svg?branch=master)](https://travis-ci.org/c-w/ghp-import)[![License](https://img.shields.io/badge/License-Apache%202.0-green.svg)](https://opensource.org/licenses/Apache-2.0)[![Version](https://img.shields.io/pypi/v/ghp-import.svg)](https://pypi.org/project/ghp-import/)As part of [gunicorn][gunicorn], [Benoit Chesneau][benoit] and [Paul Davis][davisp]were looking at how to host documentation. There's the obvious method ofusing [GitHub's post-receive hook][github-post] to trigger doc builds and rsyncto a webserver, but we ended up wanting to try out github's hosting to make thewhole interface a bit more robust.[GitHub Pages][gh-pages] is a pretty awesome service that GitHub provides forhosting project documentation. The only thing is that it requires a`gh-pages` branch that is the site's document root. This means that keepingdocumentation sources in the branch with code is a bit difficult. And it reallyturns into a head scratcher for things like [Sphinx][sphinx] that want toaccess documentation sources and code sources at the same time.Then we stumbled across an interesting looking package called[github-tools][github-tools] that looked almost like what we wanted. It was a tadcomplicated and more involved than we wanted but it gave us an idea. Why notjust write a script that can copy a directory to the `gh-pages` branch of therepository. This saves us from even having to think about the branch andeverything becomes magical.This is what `ghp-import` was written for.[gunicorn]: http://www.gunicorn.com/ &quot;Gunicorn&quot;[benoit]: http://github.com/benoitc &quot;Beno√Æt Chesneau&quot;[davisp]: http://github.com/davisp &quot;Paul J. Davis&quot;[github-post]: https://help.github.com/articles/post-receive-hooks &quot;GitHub Post-Receive Hook&quot;[gh-pages]: http://pages.github.com/ &quot;GitHub Pages&quot;[sphinx]: http://sphinx.pocoo.org/ &quot;Sphinx Documentation&quot;[github-tools]: http://dinoboff.github.com/github-tools/ &quot;github-tools&quot;Big Fat Warning---------------This will **DESTROY** your `gh-pages` branch. If you love it, you'll want totake backups before playing with this. This script assumes that `gh-pages` is100% derivative. You should never edit files in your `gh-pages` branch by handif you're using this script because you will lose your work.When used with a prefix, only files below the set prefix will be destroyed, limiting theabove warning to just that directory and everything below it.Usage-----```Usage: ghp-import [OPTIONS] DIRECTORYOptions:  -n, --no-jekyll       Include a .nojekyll file in the branch.  -c CNAME, --cname=CNAME                        Write a CNAME file with the given CNAME.  -m MESG, --message=MESG                        The commit message to use on the target branch.  -p, --push            Push the branch to origin/{branch} after committing.  -x PREFIX, --prefix=PREFIX                        The prefix to add to each file that gets pushed to the                        remote. Only files below this prefix will be cleared                        out. [none]  -f, --force           Force the push to the repository.  -o, --no-history      Force new commit without parent history.  -r REMOTE, --remote=REMOTE                        The name of the remote to push to. [origin]  -b BRANCH, --branch=BRANCH                        Name of the branch to write to. [gh-pages]  -s, --shell           Use the shell when invoking Git. [False]  -l, --follow-links    Follow symlinks when adding files. [False]  -h, --help            show this help message and exit```Its pretty simple. Inside your repository just run `ghp-import $DOCS_DIR`where `$DOCS_DIR` is the path to the **built** documentation. This will write acommit to your `gh-pages` branch with the current documents in it.If you specify `-p` it will also attempt to push the `gh-pages` branch toGitHub. By default it'll just run `git push origin gh-pages`. You can specifya different remote using the `-r` flag.The `-o` option will discard any previous history and ensure that only asingle commit is always pushed to the `gh-pages` branch. This is useful toavoid bloating the repository size and is **highly recommended**.You can specify a different branch with `-b`. This is useful for user andorganization page, which are served from the `master` branch.Some Windows users report needing to pass Git commands through the shell which can be accomplished by passing `-s`.The `-l` option will cause the import to follow symlinks for users that have odd configurations that include symlinking outside of their documentation directory.Python Usage------------You can also call ghp_import directly from your Python code as a library. Thelibrary has one public function `ghp_import.ghp_import`, which accepts thefollowing arguments:* `srcdir`: The path to the **built** documentation (required).* `remote`: The name of the remote to push to. Default: `origin`.* `branch`: Name of the branch to write to. Default: `gh-pages`.* `mesg`: The commit message to use on the target branch. Default: `Update documentation`.* `push`: Push the branch to {remote}/{branch} after committing. Default: `False`.* `prefix`: The prefix to add to each file that gets pushed to the remote. Default: `None`.* `force`: Force the push to the repository. Default: `False`.* `no_history`: Force new commit without parent history. Default: `False`.* `use_shell`: Default: Use the shell when invoking Git. `False`.* `followlinks`: Follow symlinks when adding files. Default: `False`.* `cname`: Write a CNAME file with the given CNAME. Default: `None`.* `nojekyll`: Include a .nojekyll file in the branch. Default: `False`.With Python's current working directory (cwd) inside your repository, do thefollowing:```pythonfrom ghp_import import ghp_importghp_import('docs', push=True, cname='example.com')```</longdescription>
</pkgmetadata>