<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>RateLimitingFilter==================.. image:: https://travis-ci.org/wkeeling/ratelimitingfilter.svg?branch=master        :target: https://travis-ci.org/wkeeling/ratelimitingfilter.. image:: https://codecov.io/gh/wkeeling/ratelimitingfilter/branch/master/graph/badge.svg        :target: https://codecov.io/gh/wkeeling/ratelimitingfilter.. image:: https://img.shields.io/badge/python-2.7%2C%203.4%2C%203.5%2C%203.6%2C%203.7%2C%203.8%2C%203.9-blue.svg        :target: https://pypi.python.org/pypi/ratelimitingfilter.. image:: https://img.shields.io/pypi/v/ratelimitingfilter.svg        :target: https://pypi.python.org/pypi/ratelimitingfilter.. image:: https://img.shields.io/pypi/l/ratelimitingfilter.svg        :target: https://pypi.python.org/pypi/ratelimitingfilterThe ``RateLimitingFilter`` is a filter for the Python logging systemthat allows you to restrict the rate at which messages can pass throughyour logging handlers.The filter can be useful if you're using a handler such as Python's``logging.handlers.SMTPHandler`` to send error notification emails.Error notification emails provide a useful means of keeping an eye onthe health of a running system, but these emails have the potential tooverload a mailbox if they start arriving in quick succession due tosome kind of critical failure.The ``RateLimitingFilter`` can help prevent mailbox overload bythrottling messages based on a configurable rate, whilst allowing forperiodic bursts of messages which can be a useful indicator thatsomething somewhere has broken.Compatibility-------------* Python 2.7, 3.4+Installing----------::    $ pip install ratelimitingfilteror::    $ git clone https://github.com/wkeeling/ratelimitingfilter.git    $ cd ratelimitingfilter    $ python setup.py installUsage-----You can rate-limit a logging handler simply by creating a new instance of the``RateLimitingFilter`` and adding it to the handler:.. code:: python    from ratelimitingfilter import RateLimitingFilter    ...    ratelimit = RateLimitingFilter()    handler.addFilter(ratelimit)Creating an instance of the ``RateLimitingFilter`` without any argumentslike in the example above will restrict the flow of messages to 1 every30 seconds.You can customize the flow rate by supplying your own values for the``rate``, ``per`` and ``burst`` attributes. For example, to allow a rateof 1 message every 2 minutes with a periodic burst of up to 5 messages:.. code:: python    ratelimit = RateLimitingFilter(rate=1, per=120, burst=5)    handler.addFilter(ratelimit)SMTPHandler Example~~~~~~~~~~~~~~~~~~~A typical use case may be to throttle error notification emails sent bythe ``logging.handlers.SMTPHandler``.Here's an example of how you might set that up:.. code:: python    import logging.handlers    import time    from ratelimitingfilter import RateLimitingFilter    logger = logging.getLogger('throttled_smtp_example')    # Create an SMTPHandler    smtp = logging.handlers.SMTPHandler(        mailhost='smtp.example.com',        fromaddr='from@example.com',        toaddrs='to@example.com',        subject='An error has occurred'    )    smtp.setLevel(logging.ERROR)    # Create a formatter and set it on the handler    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')    smtp.setFormatter(formatter)    # Create an instance of the RateLimitingFilter, and add it to the handler    ratelimit = RateLimitingFilter()    smtp.addFilter(ratelimit)    # Add the handler to the logger    logger.addHandler(smtp)    # Logged errors will now be restricted to 1 every 30 seconds    while True:        logger.error('An error message')        time.sleep(2)Advanced Usage--------------It is possible to pass some additional configuration options to the``RateLimitingFilter`` initializer for further control over messagethrottling.Perhaps you want to selectively throttle particular error messageswhilst allowing other messages to pass through freely. This might be thecase if there is part of the application which you know can generatelarge volumes of errors, whilst the rest of the application is unlikelyto.One way to achieve this might be to use separate loggers, one configuredwith rate limiting, one without, for the different parts of theapplication. Alternatively, you can use a single logger and configurethe ``RateLimitingFilter`` to match only those messages that you want tothrottle.Applying selective rate limiting allows for constant visbility of lowervolume errors whilst keeping the higher volume errors in check.The ``RateLimitingFilter`` supports two ways to selectively throttlemessages:Substring based message throttling~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~You can pass a list of substrings to the ``RateLimitingFilter`` which itwill use to match messages to apply to... code:: python    config = {'match': ['some error', 'a different error']}    ratelimit = RateLimitingFilter(rate=1, per=60, burst=1, **config)    smtp.addFilter(ratelimit)    # Can be rate limited    logger.error('some error occurred')    # Can be rate limited    logger.error('a different error occurred')    # Will not be rate limited    logger.error('something completely different happened')Automatic message throttling~~~~~~~~~~~~~~~~~~~~~~~~~~~~*This is an experimental feature*.You can let the ``RateLimitingFilter`` automatically throttle messagesby setting the ``match`` option to ``auto``... code:: python    config = {'match': 'auto'}    ratelimit = RateLimitingFilter(rate=1, per=60, burst=1, **config)The filter will then attempt to identify messages based on their contentin order to figure out whether to throttle them or not. It will tolerateslight differences in content when identifying messages. So for example,if error messages are being rapidly logged that are the same apart froma timestamp, or perhaps an incrementing id, then these messages will betreated as the same as far as rate limiting is concerned.License-------MITContributing------------Feedback and improvements are more than welcome. Please submit a pullrequest!https://github.com/wkeeling/ratelimitingfilter</longdescription>
</pkgmetadata>