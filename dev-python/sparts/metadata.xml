<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>There is a lot of boilerplate and copypasta associated with buildingservices (or any other software that runs continuously and does things)sparts is a python library developed at Facebook that aims to eliminateas much of the skeleton code as possible, making it as dead simple towrite new services with little to no excess code.Design Goals============-  Be able to implement services with as little code as possible-  Support as many RPC transports as possible (thrift, http, dbus, etc)-  Make it painless to integrate services that require custom IO loops   (twisted, tornado, glib, etc)HOWTO=====A sparts service typically consists of two parts, the core &quot;service&quot;,and its &quot;tasks&quot;.  Background and offline processing is generally doneby tasks, while common or shared functionality belongs to the service.Service-------``sparts.vtask.VService`` - This is the core of any sparts service.Simply subclass VService for any custom service instance logic, andrun its initFromCLI() and you are done.For example, myservice.py:::    from sparts.vservice import VService    class MyService(VService):        pass    MyService.initFromCLI()Now, you can run this file with the -h option (to see the availableoptions), or run with: ``python myservice.py``This should emit something like the following output:::    DEBUG:VService:All tasks started``And pressing ^C will emit:::    ^CINFO:VService:KeyboardInterrupt Received!  Stopping Tasks...    INFO:VService:Instance shut down gracefullyThis simple service, by itself, is pretty damn useless. That's where Tasks come into playTasks-----``sparts.vtask.VTask`` - This is the base class for all tasksTasks are what trigger your program to take action. This action can beprocessing periodic events, handling HTTP requests, handling thriftrequests, working on items from a queue, waking up on an event,operating some ioloop, or whatever.Here's a simple example of a service with tasks (requires tornadoinstalled):::    from sparts.vservice import VService    from sparts.tasks.tornado import TornadoHTTPTask    TornadoHTTPTask.register()    VService.initFromCLI()Now running it emits:::    &gt; python myservice.py --http-port 8000    INFO:VService.TornadoHTTPTask:TornadoHTTPTask Server Started on 0.0.0.0 (port 8000)    INFO:VService.TornadoHTTPTask:TornadoHTTPTask Server Started on :: (port 8000)    DEBUG:MyService:All tasks startedAnd as you can see, you can curl the webserver:::    &gt; curl localhost:8000    Hello, worldTasks can be subclassed to do all kinds of things.  This one prints the current unixtimestamp every second:::    from sparts.tasks.periodic import PeriodicTask    class PrintClock(PeriodicTask):        INTERVAL = 1.0        def execute(self):            print time.time()    PrintClock.register()    from sparts.vservice import VService    VService.initFromCLI()And the result:::    DEBUG:VService:All tasks started    DEBUG:VService:VService Active.  Awaiting graceful shutdown.    1376081805.08    1376081806.08    1376081807.08    1376081808.08    1376081809.08    1376081810.08    1376081811.08HALP====If you have any questions, comments, feedback, suggestions, etc, pleasefeel free to contact me at any time.-  email: ruibalp@gmail.com-  twitter: http://twitter.com/fmoo-  irc.freenode: #sparts-  facebook: http://fb.me/ruibalpLicense=======sparts is BSD-licensed.  We also provide an additional patent grant.</longdescription>
</pkgmetadata>