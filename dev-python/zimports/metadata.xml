<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========zimports========Reformats Python imports so that they can pass flake8-import-order.  This isroughly:* one import per line* alphabetically sorted, with stylistic options for how dots, case sensitivity,  and dotted names are sorted* grouped by builtin / external library / current application (also  stylistically controllable)* unused imports removed, using pyflakes to match &quot;unused import&quot; warnings  to actual lines of code* duplicate imports removed (note this does not yet include duplicate symbol  names against different imports)* no star imports (e.g. ``from &lt;foo&gt; import *``); these are rewritten as  explicit names, by importing all the names from each target module and then  removing all the unused names* support for TYPE_CHECKING import blocks.The program currently bolts itself on top of `flake8-import-order&lt;https://github.com/PyCQA/flake8-import-order/&gt;`_, in order to reuse the importclassification and sorting styles that tool provides. Without options given,the script will look directly for a ``setup.cfg`` file with a ``[flake8]``section and will consume flake8-import-order parameters ``&quot;application-import-names&quot;``, ``&quot;application-package-names&quot;``, and ``&quot;import-order-style&quot;``, tosort imports exactly as this linter then expects to find them.   All of thesingle-line import styles, e.g. google, cryptography, pycharm, should justwork.Special classifications can be given to imports, as either a &quot;  # noqa&quot; commentindicating the import should not be removed, and optionallythe comment &quot;  # noqa nosort&quot; which will place the import into a special&quot;don't sort&quot; category, placing all of the &quot;nosort&quot; imports in the orderthey originally appeared, grouped after all the sorted imports.  This canbe used for special situations where a few imports have to be in a certainorder against each other (SQLAlchemy has two lines like this at the moment).The application also does not affect imports that are inside of conditionalsor defs, or otherwise indented in any way, with the exception of TYPE_CHECKINGimports.  This is also the behavior offlake8-import-order; only imports in column zero of the source file arecounted, although imports that are on lines below other definitions arecounted, which are moved up to the top section of the source file... note::  This application runs in **Python 3 only**.  It can reformat   imports for Python 2 code as well but internally it uses library   and language features only available in Python 3.zzzeek why are you writing one of these, there are a dozen pep8 import fixers=============================================================================I've just gone through a whole bunch.     I need one that:* works directly with flake8-import-order so we are guaranteed to have a match* has shell capability, not only a plugin for vim or sublime text (Python Fix  Imports, gratis)* Removes unused imports, not just reformats them (importanize)* Reformats imports, not just removes unused ones (autoflake)* Doesn't miss removing an import that isn't used just because it's on a  multiline import (autoflake)* Breaks up *all* imports into individual lines, not just if the line is &gt;80 char  (importanize)* Is still pretty simple (we're a bit beyond our original &quot;extremely&quot; simple  baseline, because all problems are ultimately not that simple) because (since  pyflakes and now flake8-import-order do most of the hard work) this is an  extremely simple job, there's (still) no  need for a giant application here.Usage=====The script can run without any configuration, options are as follows::  $ zimports --help  usage: zimports [-h] [-m APPLICATION_IMPORT_NAMES]                  [-p APPLICATION_PACKAGE_NAMES] [--style STYLE] [--multi-imports]                  [-k] [-kt] [--heuristic-unused HEURISTIC_UNUSED] [--statsonly]                  [-e] [--diff] [--stdout]                  filename [filename ...]  positional arguments:    filename              Python filename(s) or directories  optional arguments:    -h, --help            show this help message and exit    -m APPLICATION_IMPORT_NAMES, --application-import-names APPLICATION_IMPORT_NAMES                          comma separated list of names that should be                          considered local to the application. reads from                          [flake8] application-import-names by default.    -p APPLICATION_PACKAGE_NAMES, --application-package-names APPLICATION_PACKAGE_NAMES                          comma separated list of names that should be                          considered local to the organization. reads from                          [flake8] application-package-names by default.    --style STYLE         import order styling, reads from [flake8] import-                          order-style by default, or defaults to 'google'    --multi-imports       If set, multiple imports can exist on one line    -k, --keep-unused     keep unused imports even though detected as unused.                          Implies keep-unused-type-checking    -kt, --keep-unused-type-checking                          keep unused imports even though detected as unused in                          type checking blocks. zimports does not detect type usage                          in comments or when used as string    --heuristic-unused HEURISTIC_UNUSED                          Remove unused imports only if number of imports is                          less than &lt;HEURISTIC_UNUSED&gt; percent of the total                          lines of code. Ignored in type checking blocks    --statsonly           don't write or display anything except the file stats    -e, --expand-stars    Expand star imports into the names in the actual                          module, which can then have unused names removed.                          Requires modules can be imported    --diff                don't modify files, just dump out diffs    --stdout              dump file output to stdoutConfiguration is currently broken up between consumption of flake8 parametersfrom ``setup.cfg``, and then additional zimports parameters in``pyproject.toml`` (as of version 0.5.0) - unification of these two files willbe in a future release, possibly when flake8 adds toml support::    # setup.cfg    [flake8]    enable-extensions = G    ignore =        A003,        E203,E305,E711,E712,E721,E722,E741,        F841,        N801,N802,N806,        W503,W504    import-order-style = google    application-import-names = sqlalchemy,test    # pyproject.toml, integrated with black    [tool.black]    line-length = 79    target-version = ['py37']    [tool.zimports]    black-line-length = 79    keep-unused-type-checking = true    # other options:    # multi-imports = true    # keep-unused = trueThen, a typical run on a mostly clean source tree looks like::  $ zimports lib/  [Unchanged]     lib/sqlalchemy/inspection.py (in 0.0058 sec)  [Unchanged]     lib/sqlalchemy/log.py (in 0.0221 sec)  ...  [Unchanged]     lib/sqlalchemy/orm/attributes.py (in 0.2152 sec)  [Unchanged]     lib/sqlalchemy/orm/base.py (in 0.0363 sec)  [Writing]       lib/sqlalchemy/orm/relationships.py ([2% of lines are imports] [source +0L/-2L] [3 imports removed in 0.3287 sec])  [Unchanged]     lib/sqlalchemy/orm/strategies.py (in 0.2237 sec)The program has two general modes of usage.  One is that of day-to-day usagefor an application that already has clean imports.   Running zimports on thesource files of such an application should produce no changes, except forwhatever source files were recently edited, and may have some changes toimports that need to be placed into the correct order. This usage model issimilar to that of `Black &lt;https://github.com/ambv/black&gt;`_, where you can run&quot;zimports .&quot; and it will find whatever files need adjusting and leave the restalone.The other mode of usage is that of the up-front cleaning up of an applicationthat has  un- organized imports.   In this mode of usage, the goal is to getthe source files to be cleaned up so that ``zimports`` can be run straightwithout any modifications to the file needed, including that all necessaryimports are either used locally or marked as not to be removed.Problems that can occur during this phase are that some imports are unused andshould be removed, while other imports that are apparently unused are still infact imported by other parts of the program.   Another issue is that changingthe ordering of imports in complex cases may cause the application to no longerrun due to the creation of unresolvable import cycles.   Finally,  someprograms have use of ``import *``, pulling in a large list of names for  whichan unknown portion of them are needed by the application.  The options``--keep-unused``, ``--heuristic-unused`` and ``--expand-stars`` areprovided to assist in working through these issues until the  code can befully reformatted such that running ``zimports`` no longer produces changes.The issue of apparently unused imports that are externally imported  can beprominent in some applications.  In order to allow imports that aren't locallyused to remain in the source file, symbols that are part of``__all__`` will not be removed, as will imports that are followed by a ``  #noqa`` comment.  Either of these techniques should be applied to imports thatare used from other modules but not otherwise referenced within the immediatesource file.   For the less common case that a few imports really need a veryspecific import order for things to work, those imports can be followed by a ``# noqa nosort`` comment that will add these lines to a special group at the endof all imports, where they will not be removed and their order relative to eachother will be maintained.The program does currently require that you pass it at least one file ordirectory name as an argument.   It also does not have the file caching featurethat Black has, which can allow it to only look at files that have changedsince the last run.  The plan is to have it check that it's inside a gitrepository where it will run through files to be committed if no filenames  aregiven.Usage as a ``git`` hook=======================``zimports`` can be used with the pre-commit_ git hooks framework.  To addthe plugin, add the following to your ``.pre-commit-config.yaml``.  Notethe ``rev:`` attribute refers to a git tag or revision number ofzimports to be used, such as ``&quot;master&quot;`` or ``&quot;0.1.3&quot;``:.. code-block:: yaml    repos:    -   repo: https://github.com/sqlalchemyorg/zimports/        rev: v0.4.5        hooks:        -   id: zimports.. _pre-commit: https://pre-commit.com/</longdescription>
</pkgmetadata>