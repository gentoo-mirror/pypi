<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># EDWH Ghost ClientThis Client is compatible with v3 and v4 of the Ghost CMS [Admin](https://ghost.org/docs/admin-api)and [Content](https://ghost.org/docs/content-api/) API's.### Installation```bashpip install edwh-ghost```### UsageThe `GhostAdmin` class can be instantiated as follows:```pythonfrom ghost import GhostAdminfrom dotenv import dotenv_valuesconfig = dotenv_values(&quot;.env&quot;)# .env can be used, but config values can also be simply hardcodedga = GhostAdmin(    config[&quot;GHOST_SITE&quot;],    adminAPIKey=config[&quot;GHOST_ADMIN_KEY&quot;],    contentAPIKey=config[&quot;GHOST_CONTENT_KEY&quot;],    api_version=&quot;v4&quot;,  # works like a train)print(ga.site())```If no admin API key is available, the `GhostContent` class can be used, which has read-only access to public endpoints.After creating a `GhostClient` instance, the different Resources can be used:```pythonfrom ghost.resources import *posts: PostResource = ga.posts# READmultiple = posts(limit=5)  # Ghost Result Set# alias forposts.get(limit=5)  # Ghost Result Setsome_post = posts.get(&quot;some_id&quot;)  # Ghost Result for post in posts.paginate():    # iterate without limit    print(post)  # Ghost Result# UPDATEsome_post.update({...})  # response dict  # alias:posts.update(&quot;some_id&quot;, {...})  # response dict  # bulk:multiple.update({...})  # response dict # DELETEsome_post.delete()  # bool of success# alias:posts.delete(&quot;some_id&quot;)  # bool of success# bulk:multiple.delete()  # list of bools of success# CREATE# one:posts.create(title=&quot;...&quot;, etc=&quot;...&quot;)  # response dict# bulk:posts.create({...}, {...})  # list of response dicts# some resources are read only:authors: AuthorResource = ga.authorsauthors()  # Ghost Result Setauthors.delete()  # error```# Available Resources:| Resource Class[^1] | Ghost Path | Method[^2]                                     | Related Tests                                               | Admin?  | Content? ||--------------------|------------|------------------------------------------------|-------------------------------------------------------------|---------|----------|| Posts              | /posts     | ghost.posts(), ghost.post()                    | test_1_posts, test_10_ghost_content, test_11_ghost_paginate | &amp;check; | &amp;check;  || Pages              | /pages     | ghost.pages(), ghost.page()                    | test_2_pages                                                | &amp;check; | &amp;check;  || Authors            | /authors   | ghost.authors(), ghost.author()                | test_4_authors                                              | ~[^3]   | &amp;check;  || Tags               | /tags      | ghost.tags(), ghost.tag()                      | test_3_tags                                                 | &amp;check; | &amp;check;  || Members            | /members   | ghost.members(), ghost.member()                | test_9_members                                              | &amp;check; | &amp;cross;  || Images             | /images    | ghost.images.upload()                          | test_6_images                                               | &amp;check; | &amp;cross;  || Themes             | /themes    | ghost.themes.upload(), ghost.themes.activate() | test_7_themes                                               | &amp;check; | &amp;cross;  || Site               | /site      | ghost.site()                                   | test_8_site_and_settings                                    | &amp;check; | &amp;cross;  || Settings           | /settings  | ghost.settings()                               | test_8_site_and_settings                                    | ~[^3]   | &amp;check;  || Users              | /users     | ghost.user(), ghost.users()                    | test_12_users, test_13_users_content                        | &amp;check; | &amp;cross;  |[^1]: these classes live in `ghost.resources`[^2]: where `ghost` is an instance of a `GhostClient` subclass (`GhostContent` or `GhostAdmin`)[^3]: Content APIs are also accessible through the `GhostAdmin` client, they are however read-only## Unavailable Resources:| Resource Name | Ghost Path | Admin?  | Content? | Reason         ||---------------|------------|---------|----------|----------------|| Tiers         | /tiers     | &amp;check; | &amp;check;  | Testing Failed | &lt;!-- test_5_tiers --&gt;| Offers        | /offers    | &amp;check; | &amp;cross;  | Testing Failed || Webhooks      | /webhooks  | &amp;check; | &amp;cross;  | TODO           |</longdescription>
</pkgmetadata>