<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>*******TidyExc*******.. image:: https://img.shields.io/pypi/v/tidyexc.svg   :alt: Last release   :target: https://pypi.python.org/pypi/tidyexc.. image:: https://img.shields.io/pypi/pyversions/tidyexc.svg   :alt: Python version   :target: https://pypi.python.org/pypi/tidyexc.. image:: https://img.shields.io/readthedocs/tidyexc.svg   :alt: Documentation   :target: https://tidyexc.readthedocs.io/en/latest/?badge=latest.. image:: https://img.shields.io/github/workflow/status/kalekundert/tidyexc/Test%20and%20release/master   :alt: Test status   :target: https://github.com/kalekundert/tidyexc/actions.. image:: https://img.shields.io/coveralls/kalekundert/tidyexc.svg   :alt: Test coverage   :target: https://coveralls.io/github/kalekundert/tidyexc?branch=master.. image:: https://img.shields.io/github/last-commit/kalekundert/tidyexc?logo=github   :alt: Last commit   :target: https://github.com/kalekundert/tidyexcTidyExc provides an exception base class that makes it easy to raise rich, helpful exceptions:- *Rich*: Instead of simply storing an error message, TidyExc exceptions   separately store parameters and message templates.  This separation makes it   easier for exception handling code to access information describing the error   and to respond accordingly.- *Helpful*: TidyExc is inspired by the error message conventions promoted by   the `tidyverse style guide`__.  Briefly, these conventions state that an   error message should consist of a brief statement of the problem, followed by   a bullet-point list of relevant contextual information.  The bullet-point   format makes it easy to include lots of detail, without the detail becoming   overwhelming.__ https://style.tidyverse.org/error-messages.htmlThe following example shows TidyExc in action::  &gt;&gt;&gt; from tidyexc import Error  &gt;&gt;&gt; class CheeseShopError(Error):  ...     pass  ...  &gt;&gt;&gt; err = CheeseShopError(  ...         product_name=&quot;Red Leicester&quot;,  ...         num_requested=1,  ...         num_available=0,  ... )  &gt;&gt;&gt; err.brief = &quot;insufficient inventory to process request&quot;  &gt;&gt;&gt; err.info += &quot;{num_requested} {product_name} requested&quot;  &gt;&gt;&gt; err.blame += &quot;{num_available} available&quot;  &gt;&gt;&gt; raise err  Traceback (most recent call last):    ...  CheeseShopError: insufficient inventory to process request  • 1 Red Leicester requested  ✖ 0 available</longdescription>
</pkgmetadata>