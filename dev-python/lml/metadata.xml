<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================================================================================lml - Load me later. A lazy plugin management system.================================================================================.. image:: https://api.travis-ci.org/python-lml/lml.svg   :target: http://travis-ci.org/python-lml/lml.. image:: https://codecov.io/github/python-lml/lml/coverage.png   :target: https://codecov.io/github/python-lml/lml.. image:: https://badge.fury.io/py/lml.svg   :target: https://pypi.org/project/lml.. image:: https://pepy.tech/badge/lml/month   :target: https://pepy.tech/project/lml/month.. image:: https://img.shields.io/github/stars/python-lml/lml.svg?style=social&amp;maxAge=3600&amp;label=Star    :target: https://github.com/python-lml/lml/stargazers.. image:: https://img.shields.io/static/v1?label=continuous%20templating&amp;message=%E6%A8%A1%E7%89%88%E6%9B%B4%E6%96%B0&amp;color=blue&amp;style=flat-square    :target: https://moban.readthedocs.io/en/latest/#at-scale-continous-templating-for-open-source-projects.. image:: https://img.shields.io/static/v1?label=coding%20style&amp;message=black&amp;color=black&amp;style=flat-square    :target: https://github.com/psf/black.. image:: https://readthedocs.org/projects/lml/badge/?version=latest   :target: http://lml.readthedocs.org/en/latest/**lml** seamlessly finds the lml based plugins from your current pythonenvironment but loads your plugins on demand. It is designed to supportplugins that have external dependencies, especially bulky and/ormemory hungry ones. lml provides the plugin management system only and theplugin interface is on your shoulder.**lml** enabled applications helps your customers [#f1]_ in two ways:#. Your customers could cherry-pick the plugins from pypi per python environment.   They could remove a plugin using `pip uninstall` command.#. Only the plugins used at runtime gets loaded into computer memory.When you would use **lml** to refactor your existing code, it aims to flatten thecomplexity and to shrink the size of your bulky python library bydistributing the similar functionalities across its plugins. However, you asthe developer need to do the code refactoring by yourself and lml would lend you a hand... [#f1] the end developers who uses your library and packages achieve their         objectives.Quick start================================================================================The following code tries to get you started quickly with **non-lazy** loading... code-block:: python    from lml.plugin import PluginInfo, PluginManager    @PluginInfo(&quot;cuisine&quot;, tags=[&quot;Portable Battery&quot;])    class Boost(object):        def make(self, food=None, **keywords):            print(&quot;I can cook %s for robots&quot; % food)    class CuisineManager(PluginManager):        def __init__(self):            PluginManager.__init__(self, &quot;cuisine&quot;)        def get_a_plugin(self, food_name=None, **keywords):            return PluginManager.get_a_plugin(self, key=food_name, **keywords)    if __name__ == '__main__':        manager = CuisineManager()        chef = manager.get_a_plugin(&quot;Portable Battery&quot;)        chef.make()At a glance, above code simply replaces the Factory pattern should you writethem without lml. What's not obvious is, that once you got hands-on with it,you can start work on how to do **lazy** loading.Installation================================================================================You can install lml via pip:.. code-block:: bash    $ pip install lmlor clone it and install it:.. code-block:: bash    $ git clone https://github.com/python-lml/lml.git    $ cd lml    $ python setup.py installlml enabled project================================================================================Beyond the documentation above, here is a list of projects using lml:#. `pyexcel &lt;https://github.com/pyexcel/pyexcel&gt;`_#. `pyecharts &lt;https://github.com/pyecharts/pyecharts&gt;`_#. `moban &lt;https://github.com/moremoban/moban&gt;`_lml is available on these distributions:#. `ARCH linux &lt;https://aur.archlinux.org/packages/python-lml/&gt;`_#. `Conda forge &lt;https://anaconda.org/conda-forge/lml&gt;`_#. `OpenSuse &lt;https://build.opensuse.org/package/show/devel:languages:python/python-lml&gt;`_License================================================================================New BSDChange log================================================================================0.1.0 - 21/10/2020--------------------------------------------------------------------------------**Updated**#. non class object can be a plugin too#. `#20 &lt;https://github.com/python-lml/lml/issues/20&gt;`_: When a plugin was not   installed, it now calls raise_exception method0.0.9 - 7/1/2019--------------------------------------------------------------------------------**Updated**#. `#11 &lt;https://github.com/python-lml/lml/issues/11&gt;`_: more test contents for   OpenSuse package validation0.0.8 - 4/1/2019--------------------------------------------------------------------------------**Updated**#. `#9 &lt;https://github.com/python-lml/lml/issues/9&gt;`_: include tests, docs for   OpenSuse package validation0.0.7 - 17/11/2018--------------------------------------------------------------------------------**Fixed**#. `#8 &lt;https://github.com/python-lml/lml/issues/8&gt;`_: get_primary_key will fail   when a module is loaded later#. deprecated old style plugin scanner: scan_plugins0.0.6 - 07/11/2018--------------------------------------------------------------------------------**Fixed**#. Revert the version 0.0.5 changes. Raise Import error and log the exception0.0.5 - 06/11/2018--------------------------------------------------------------------------------**Fixed**#. `#6 &lt;https://github.com/python-lml/lml/issues/6&gt;`_: Catch and Ignore   ModuleNotFoundError0.0.4 - 07.08.2018--------------------------------------------------------------------------------**Added**#. `#4 &lt;https://github.com/python-lml/lml/issues/4&gt;`_: to find plugin names with   different naming patterns0.0.3 - 12/06/2018--------------------------------------------------------------------------------**Added**#. `dict` can be a pluggable type in addition to `function`, `class`#. get primary tag of your tag, helping you find out which category of plugins   your tag points to0.0.2 - 23/10/2017--------------------------------------------------------------------------------**Updated**#. `pyexcel#103 &lt;https://github.com/pyexcel/pyexcel/issues/103&gt;`_: include   LICENSE in tar ball0.0.1 - 30/05/2017--------------------------------------------------------------------------------**Added**#. First release</longdescription>
</pkgmetadata>