<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OArepo references[![](https://img.shields.io/github/license/oarepo/oarepo-references.svg)](https://github.com/oarepo/oarepo-references/blob/master/LICENSE)[![](https://img.shields.io/travis/oarepo/oarepo-references.svg)](https://travis-ci.com/oarepo/oarepo-references)[![](https://img.shields.io/coveralls/oarepo/oarepo-references.svg)](https://coveralls.io/r/oarepo/oarepo-references)[![](https://img.shields.io/pypi/v/oarepo-references.svg)](https://pypi.org/pypi/oarepo-references)OArepo module for tracking and updating references in Invenio records## InstallationTo use this module in your Invenio application, run the following in your virtual environment:```console    pip install oarepo-references```## Prerequisites- [oarepo-validate](https://github.com/oarepo/oarepo-validate)This module expects a `canonical_url` field present on your Record model. This fieldshould contain a full canonical url reference to the Record instance, e.g.```pythonclass Record(FilesRecord):    @property    def canonical_url(self):        return url_for('invenio_records_rest.recid_item',                       pid_value=self['pid'], _external=True)```## Types of referenceThis module considers the following two types of reference that can occurthe referencing objects:### Reference by linkReference to another object is represented in the referencingobject's metadata as a `canonical_url` of the referenced object, e.g:```json{...  &quot;links&quot;: {    &quot;attachments&quot;: &quot;https://example.org/objects/M249/attachments&quot;,    &quot;self&quot;: &quot;https://example.org/objects/M249&quot;,    &quot;works&quot;: &quot;https://example.org/objects/M249/works&quot;  }}```### Inlined referenceThe actual metadata content of the referenced object are inlinedinto the referencing object's metadata, e.g:```json{  ...    &quot;stylePeriod&quot;: {        &quot;id&quot;:123,        &quot;level&quot;: 1,        &quot;links&quot;: {…},        &quot;path&quot;: &quot;/novovek-moderni-doba&quot;,        &quot;slug&quot;:&quot;novovek-moderni-doba&quot;,        &quot;startYear&quot;: 1789,        &quot;title&quot;: […],        &quot;tooltip&quot;: &quot;&quot;    }}```In the example above, the complete metadata of a certain Taxonomic recordare inlined into the `stylePeriod` field of the referencing object.## UsageTo enable reference tracking on your data model objects, you will need todo the following:  - Tell Marshmallow, which fields of your marshmallow schema contain references    by link by inheriting `ReferenceByLinkFieldMixin`:```pythonclass URLReferenceField(ReferenceByLinkFieldMixin, URL):    &quot;&quot;&quot;URL reference marshmallow field.&quot;&quot;&quot;```  - If your Marshmallow Scheme holds *inlined* references, you    will need to define a custom nested schema for inlined reference    contents, that implements `ref_url` that returns an URL to be used    as a reference to the object and inherits from `InlineReferenceMixin`, like this:```pythonclass InlinedReferenceSchema(InlineReferenceMixin, Schema):    &quot;&quot;&quot;Inlined reference schema.&quot;&quot;&quot;    class Meta:        unknown = INCLUDE    def ref_url(self, data):        return data.get('links').get('self')    def ref_uuid(self, data):        return data.get('id', None)```  - Use the reference-enabled field in your Marshmallow schema:```pythonclass ExampleReferencesSchema(Schema):    &quot;&quot;&quot;Reference to other objects schema.&quot;&quot;&quot;    link = URLReferenceField()    inlined = Nested(InlinedReferenceSchema)```  - Inherit your Record model from the `ReferenceEnabledRecordMixin` and `MarshmallowValidatedRecordMixin`.    Doing so, will add support for automatic Record updates whenever some reference contained in Record metadata    changes:```pythonclass ExampleRecord(MarshmallowValidatedRecordMixin,                    ReferenceEnabledRecordMixin,                    Record):    &quot;&quot;&quot;References enabled example record class.&quot;&quot;&quot;    MARSHMALLOW_SCHEMA = ExampleReferencesSchema    VALIDATE_MARSHMALLOW = True    VALIDATE_PATCH = True    @property    def canonical_url(self):        return url_for('invenio_records_rest.recid_item',                       pid_value=self['pid'], _external=True)```## SignalsThis module will register the following signal handlers on the Invenio Records signals that handlemanaging of reference records whenever a Record changes:| Invenio Records signal | Registered [signal handler](https://github.com/oarepo/oarepo-references/blob/master/oarepo_references/signals.py) | Description ||------------------------|--------------------------|----------------------------------------------------------------------------------------------------------|| after_record_insert    | create_references_record | Finds all references to other objects in a Record and creates RecordReference entries for each reference || after_record_update    | update_references_record | Updates all RecordReferences that refer to the updated object and reindexes all referring Records || after_record_delete    | delete_references_record | Deletes all RecordReferences referring to the deleted Record |## Module APIYou can access all the API functions this module exposes through the `current_references` proxy.*For more info, see [api.py](https://github.com/oarepo/oarepo-references/blob/master/oarepo_references/api.py)*.## TasksAn asynchronous (Celery) tasks could be launched in a group on all objects referring to a certain Record like this:```pythonfrom oarepo_references.utils import run_task_on_referrersrun_task_on_referrers(referred,                      task.s(),                      success_task.s(),                      error_task.s())```Further documentation is available onhttps://oarepo-references.readthedocs.io/..    Copyright (C) 2019 Miroslav Bauer, CESNET.    oarepo-references is free software; you can redistribute it and/or    modify it under the terms of the MIT License; see LICENSE file for more    details.Changes=======Version 0.1.0 (released TBD)- Initial public release.</longdescription>
</pkgmetadata>