<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;&lt;i&gt;✨ ftea ✨ &lt;/i&gt;&lt;/h1&gt;&lt;h3 align=&quot;center&quot;&gt;The python binding for &lt;a href=&quot;https://github.com/synodriver/simple-crypto&quot;&gt;simple-crypto&lt;/a&gt; &lt;/h3&gt;[![pypi](https://img.shields.io/pypi/v/ftea.svg)](https://pypi.org/project/ftea/)![python](https://img.shields.io/pypi/pyversions/ftea)![implementation](https://img.shields.io/pypi/implementation/ftea)![wheel](https://img.shields.io/pypi/wheel/ftea)![license](https://img.shields.io/github/license/synodriver/ftea.svg)![action](https://img.shields.io/github/workflow/status/synodriver/ftea/build%20wheel)### 使用- 加密解密```pythonfrom ftea import TEAtea = TEA(bytes(16))encoded = tea.encrypt_qq(b&quot;haha&quot;)print(tea.decrypt_qq(encoded))```### 公开函数```pythonclass TEA:    key: bytes = ...    @classmethod    def __init__(self, key: bytes) -&gt; None: ...    def decrypt(self, text: bytes, sumtable: bytes) -&gt; bytes: ...    def decrypt_into(self, text: bytes, sumtable: bytes, out: bytearray) -&gt; int: ...    def decrypt_native_endian(self, text: bytes, sumtable: bytes) -&gt; bytes: ...    def decrypt_native_endian_into(self,text: bytes, sumtable: bytes, out: bytearray) -&gt; int: ...    def decrypt_qq(self, text: bytes) -&gt; bytes: ...    def decrypt_qq_into(self, text: bytes, out: bytearray) -&gt; int: ...    def encrypt(self, text: bytes, sumtable: bytes) -&gt; bytes: ...    def encrypt_into(self, text: bytes, sumtable: bytes, out: bytearray) -&gt; int: ...    def encrypt_native_endian(self, text: bytes, sumtable: bytes) -&gt; bytes: ...    def encrypt_native_endian_into(self, text: bytes, sumtable: bytes, out: bytearray) -&gt; int: ...    def encrypt_qq(self,  text: bytes) -&gt; bytes: ...    def encrypt_qq_into(self, text: bytes, out: bytearray) -&gt; int: ...def encrypt_len(src: int) -&gt; int: ...```</longdescription>
</pkgmetadata>