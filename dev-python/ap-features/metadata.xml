<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![image](https://img.shields.io/pypi/v/ap_features.svg)](https://pypi.python.org/pypi/ap_features)![CI](https://github.com/ComputationalPhysiology/ap_features/workflows/CI/badge.svg)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/ComputationalPhysiology/ap_features/main.svg)](https://results.pre-commit.ci/latest/github/ComputationalPhysiology/ap_features/main)[![github pages](https://github.com/ComputationalPhysiology/ap_features/actions/workflows/github-pages.yml/badge.svg)](https://github.com/ComputationalPhysiology/ap_features/actions/workflows/github-pages.yml)[![Build and upload to PyPI](https://github.com/ComputationalPhysiology/ap_features/actions/workflows/pypi.yml/badge.svg)](https://github.com/ComputationalPhysiology/ap_features/actions/workflows/pypi.yml)[![Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/finsberg/a7290de789564f03eb6b1ee122fce423/raw/ap_features-coverage.json)](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/finsberg/a7290de789564f03eb6b1ee122fce423/raw/ap_features-coverage.json)# Action Potential features`ap_features` is package for computing features of action potential traces. This includes chopping, background correction and feature calculations.Parts of this library is written in `numba` and is therefore highly performant. This is useful if you want to do feature calculations on a large number of traces.## Quick start```pythonimport matplotlib.pyplot as pltimport numpy as npfrom scipy.integrate import solve_ivpimport ap_features as apftime = np.linspace(0, 999, 1000)res = solve_ivp(    apf.testing.fitzhugh_nagumo,    [0, 1000],    [0.0, 0.0],    t_eval=time,)trace = apf.Beats(y=res.y[0, :], t=time)print(f&quot;Number of beats: {trace.num_beats}&quot;)print(f&quot;Beat rates: {trace.beat_rates}&quot;)# Get a list of beatsbeats = trace.beats# Pick out the second beatbeat = beats[1]# Compute featuresprint(f&quot;APD30: {beat.apd(30):.3f}s, APD80: {beat.apd(80):.3f}s&quot;)print(f&quot;cAPD30: {beat.capd(30):.3f}s, cAPD80: {beat.capd(80):.3f}s&quot;)print(f&quot;Time to peak: {beat.ttp():.3f}s&quot;)print(f&quot;Decay time from max to 90%: {beat.tau(a=0.1):.3f}s&quot;)``````Number of beats: 5Beat rates: [779.2207792207793, 769.2307692307693, 779.2207792207793, 759.493670886076]APD30: 37.823s, APD80: 56.564scAPD30: 88.525s, cAPD80: 132.387sTime to peak: 21.000sDecay time from max to 90%: 53.618s```## InstallInstall the package with pip```python -m pip install ap_features```See [installation instructions](https://computationalphysiology.github.io/ap_features/INSTALL.html) for more options.## Available featuresThe list of currently implemented features are as follows- Action potential duration (APD)- Corrected action potential duration (cAPD)- Decay time (Time for the signal amplitude to go from maximum to (1 - a) * 100 % of maximum)- Time to peak (ttp)- Upstroke time (time from (1-a)*100 % signal amplitude to peak)- Beating frequency- APD up (The duration between first intersections of two APD lines)- Maximum relative upstroke velocity- Maximum upstroke velocity- APD integral (integral of the signals above the APD line)## DocumentationDocumentation is hosted at GitHub pages: &lt;https://computationalphysiology.github.io/ap_features/&gt;Note that the documentation is written using [`jupyterbook`](https://jupyterbook.org) and contains an [interactive demo](https://computationalphysiology.github.io/ap_features/demo_fitzhugh_nagumo.html)## License* Free software: LGPLv2.1## Source Code* &lt;https://github.com/ComputationalPhysiology/ap_features&gt;</longdescription>
</pkgmetadata>