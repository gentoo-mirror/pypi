<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># FastAPI Simple Cache[![Tests](https://github.com/sebustam/fastapi-simple-cache/actions/workflows/tests.yaml/badge.svg)](https://github.com/sebustam/fastapi-simple-cache/actions/workflows/tests.yaml)[![Coverage](https://codecov.io/gh/sebustam/fastapi-simple-cache/branch/main/graph/badge.svg?token=6JPFPOQWX2)](https://codecov.io/gh/sebustam/fastapi-simple-cache)[![Package version](https://img.shields.io/pypi/v/fastapi-simple-cache?color=%2334D058)](https://pypi.org/project/fastapi-simple-cache)[![Supported Python versions](https://img.shields.io/pypi/pyversions/fastapi-simple-cache.svg?color=%2334D058)](https://pypi.org/project/fastapi-simple-cache)FastAPI Simple Cache will cache responses from a decorated endpoint if the responseis [JSON encodable](https://fastapi.tiangolo.com/tutorial/encoder/) ora [FastAPI `Response`](https://fastapi.tiangolo.com/advanced/response-directly/).&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;- [Quick start](#quick-start)- [Installation](#installation)- [Backends](#backends)  - [In memory](#in-memory)  - [Redis](#redis)  - [Firestore](#firestore)- [Features](#features)  - [Namespaces](#namespaces)  - [Multi backends](#multi-backends)  - [Valid status codes](#valid-status-codes)  - [No cache](#no-cache)- [License](#license)&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;## Quick start```pythonfrom fastapi import FastAPI, Requestapp = FastAPI()# Initialize in startup eventfrom fastapi_simple_cache import FastAPISimpleCachefrom fastapi_simple_cache.backends.inmemory import InMemoryBackend@app.on_event(&quot;startup&quot;)async def startup():    backend = InMemoryBackend()    FastAPISimpleCache.init(backend=backend)# Use the @cache decoratorfrom fastapi_simple_cache.decorator import cache@app.get(&quot;/&quot;)@cache(expire=3600)  # Set expiration in secondsdef root(request: Request):  # Add a Request typed parameter    return {&quot;datetime&quot;: datetime.utcnow()}```Check [here](examples/) for FastAPI application examples withdifferent [backends](#backends) and [features](#features).## InstallationThe installation depends on the backend.- In memory: `pip install fastapi-simple-cache`- Redis: `pip install &quot;fastapi-simple-cache[redis]&quot;`- Firestore: `pip install &quot;fastapi-simple-cache[firestore]&quot;`## Backends### In memoryThe `InMemoryBackend` class implements an in-memory backend.```pythonfrom fastapi_simple_cache.backends.inmemory import InMemoryBackend@app.on_event(&quot;startup&quot;)async def startup():    backend = InMemoryBackend()    FastAPISimpleCache.init(backend=backend)```### RedisThe `RedisBackend` class implements a Redis backend.```pythonfrom redis.asyncio import ConnectionPool, clientfrom fastapi_simple_cache.backends.redis import RedisBackend@app.on_event(&quot;startup&quot;)async def startup():    pool = ConnectionPool.from_url(url=&quot;redis://localhost:6379&quot;)    backend = RedisBackend(redis=client.Redis(connection_pool=pool))    FastAPISimpleCache.init(backend=backend)```### FirestoreThe `FirestoreBackend` class implements a Google Firestore backend.```pythonimport firebase_adminfrom firebase_admin import firestore, credentialsfrom fastapi_simple_cache.backends.firestore import FirestoreBackend@app.on_event(&quot;startup&quot;)async def startup():    cred = credentials.ApplicationDefault()    firebase_admin.initialize_app(cred, {&quot;projectId&quot;: &quot;gcp_project&quot;})    db = firestore.client()    collection = db.collection(&quot;cache_collection&quot;)    backend = FirestoreBackend(collection=collection)    FastAPISimpleCache.init(backend=backend)```## Features### NamespacesYou can add the parameter `namespace` on cache initialization to modifythe storage keys. Use this feature if you need to share same cacheenvironment with other applications but with different keys.```python@app.on_event(&quot;startup&quot;)async def startup():    backend = InMemoryBackend()    FastAPISimpleCache.init(        backend=backend,        namespace=&quot;my-app&quot;    )```### Multi backendsUse more than one backend to cache responses with the `backend` parameteron cache initialization. This feature is useful if you want to check anin-memory cache before an external cache.```pythonfrom fastapi_simple_cache.backends.inmemory import InMemoryBackendfrom fastapi_simple_cache.backends.redis import RedisBackend@app.on_event(&quot;startup&quot;)async def startup():    inmem_backend = InMemoryBackend()    redis_backend = RedisBackend(...)    FastAPISimpleCache.init(        backend=[inmem_backend, redis_backend]    )```### Valid status codesSet valid status codes to cache responses in the `@cache` parameter`status_codes` (defaults to `[200]`).```python@app.get(&quot;/&quot;)@cache(expire=3600, status_codes=[200, 201])def root(request: Request):    return {&quot;datetime&quot;: datetime.utcnow()}```### No cacheAvoid storing a request/response by adding the header`cache-control: no-cache` to the request. This works both for the clientand the server.## LicenseFastAPI Fire Cache is released under the GNU General Public License v3.0 orlater, see [here](https://choosealicense.com/licenses/gpl-3.0/) for adescription of this license, or see the [LICENSE](./LICENSE) file forthe full text.</longdescription>
</pkgmetadata>