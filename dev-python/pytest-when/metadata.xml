<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytest-whenPlugin provides a `when` fixture, which enables the following way of mockingthe python objects:```python(    when(some_object, &quot;attribute&quot;)    .called_with(1, 2, when.markers.any)    .then_return(&quot;mocked&quot;))```It is readable and gives you a way to enable the mock only for a specificargument's values. In this the attribute will be mocked, for specificfirst two arguments and any third argument.Inspired by &lt;https://github.com/mockito/mockito-scala&gt;`.called_with` method arguments are compared with thereal callable signature and gives additional protection againstchanging the real callable interface.## Installation```bashpip install pytest-when```## UsageAfter installing the package a new fixture `when` will be available.See the following example how to use it:```python# class which we're going to mock in the testclass Klass1:    def some_method(        self,        arg1: str,        arg2: int,        *,        kwarg1: str,        kwarg2: str,    ) -&gt; str:        return &quot;Not mocked&quot;def test_should_properly_patch_calls(when):    when(Klass1, &quot;some_method&quot;).called_with(        &quot;a&quot;,        when.markers.any,        kwarg1=&quot;b&quot;,        kwarg2=when.markers.any,    ).then_return(&quot;Mocked&quot;)    assert (        Klass1().some_method(            &quot;a&quot;,            1,            kwarg1=&quot;b&quot;,            kwarg2=&quot;c&quot;,        )        == &quot;Mocked&quot;    )    assert (        Klass1().some_method(            &quot;not mocked param&quot;,            1,            kwarg1=&quot;b&quot;,            kwarg2=&quot;c&quot;,        )        == &quot;Not mocked&quot;    )# if you need to patch a functiondef test_patch_a_function(when):    when(example_module, &quot;some_normal_function&quot;).called_with(        &quot;a&quot;,        when.markers.any,        kwarg1=&quot;b&quot;,        kwarg2=when.markers.any,    ).then_return(&quot;Mocked&quot;)    assert (            example_module.some_normal_function(                &quot;a&quot;,                1,                kwarg1=&quot;b&quot;,                kwarg2=&quot;c&quot;,            )            == &quot;Mocked&quot;    )    assert (            example_module.some_normal_function(                &quot;not mocked param&quot;,                1,                kwarg1=&quot;b&quot;,                kwarg2=&quot;c&quot;,            )            == &quot;Not mocked&quot;    )```It is possible to use 'when' with class methods and standalone functions(in this case cls parameter will become a python module).You can patch multiple times the same object with different &quot;called_with&quot;parameters in a single test.You can also patch multiple targets (cls, method)See more examples at:[test_integration](tests/test_integration.py)## Setup for local developementRequirements:1. pdm &lt;https://pdm.fming.dev/latest/#installation&gt;2. python3.8 (minimum supported by a tool)```bashpdm install```To run tests and linters use:```bashmake testmake lint```</longdescription>
</pkgmetadata>