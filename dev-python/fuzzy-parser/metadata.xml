<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;https://raw.githubusercontent.com/crgz/fuzzy_dates/master/.github/images/logo.svg&quot; width=&quot;25%&quot; align=&quot;right&quot; style=&quot;border:0px solid white&quot;&gt;&lt;h3 align=&quot;center&quot;&gt;Python Parser for Abbreviated Dates&lt;/h3&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pypi.python.org/pypi/fuzzy_parser&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/fuzzy_parser.svg&quot; alt=&quot;PypI - Version&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/crgz/fuzzy_dates/issues&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/issues/crgz/fuzzy_dates.svg&quot; alt=&quot;issues&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/crgz/fuzzy_dates/stargazers&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/stars/crgz/fuzzy_dates.svg&quot; alt=&quot;stars - stars&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/crgz/fuzzy_dates/graphs/contributors&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/contributors/crgz/fuzzy_dates.svg&quot; alt=&quot;stars - stars&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/crgz/fuzzy_dates/blob/master/CONTRIBUTING.md&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&quot; alt=&quot;contributions - contributions&quot;&gt;    &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;#user-content-key-features&quot;&gt;Key Features&lt;/a&gt; •    &lt;a href=&quot;#user-content-how-to-use&quot;&gt;How To Use&lt;/a&gt; •    &lt;a href=&quot;#user-content-how-it-works&quot;&gt;How it works&lt;/a&gt; •    &lt;a href=&quot;#user-content-common-use-cases&quot;&gt;Common use cases&lt;/a&gt; •    &lt;a href=&quot;#user-content-operations&quot;&gt;Operations&lt;/a&gt; •    &lt;a href=&quot;#user-content-roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/p&gt;Have you ever tried to understand a date like *11-09, št*? Is the *št* an abbreviation of a month or a weekday? Which ofthose numbers represent the month or the day? This library leverages on [Good Ol' FashionedAI](https://www.cambridge.org/core/books/abs/cambridge-handbook-of-artificial-intelligence/gofai/FCF7D6DD921658FE8AE9F2A2B0FECBDD)to parse abbreviated, ambiguous, and incomplete dates in multiple languages.## Key Features* Language auto-detection* Easily expandable into new languages (30 languages are currently supported)* Support for multiple date formats* Support for abbreviated weekdays* Support for abbreviated months* Support for ambiguous month/day numbers## How To UseThe most straightforward way to parse dates is to use the datetime.date() function, that wraps around most of thefunctionality of the module.  This example shows a basic usage of the library to parse the date: *&quot;11-09, št&quot;*:```pythonfrom datetime import datetimefrom fuzzy_parser.engine import Enginestart = datetime(2021, 4, 27).date()(semantic, _) = Engine(start).when('11-09, št')for single_date in semantic:    print(single_date.strftime(&quot;%Y-%m-%d&quot;))```The output will show the expected ```shell2021-09-11```## How it worksThe abbreviation &quot;št&quot; could stand for:- Šeštadienis which means in Saturday in Lithuanian- Štvrtok which means in Thursday in SlovakLithuanian is spoken in Lithuania and in Latvia. Slovak is spoken in Slovakia but also by a minority in the Czech Republic.These countries use different date representations: Czech Republic, Latvia and Slovakia have the day written first because ofthe &quot;little&quot; date endianness format used as the standard in the country. Lithuania, on the other hand, uses the &quot;big&quot; dateendianness format which means that the month is written first. The system factor in all these facts and is able to come withthe right answers:In the case of interpreting the abbreviation as a Saturday:-  9 of November 2024- 11 of September 2027In the case of interpreting the abbreviation as a Thursday:- 11 of September 2025For further details have a look at the underlying[implementation](https://github.com/crgz/abbreviated_dates/blob/main/prolog/abbreviated_dates.pl). In addition, the [unittests](https://github.com/crgz/abbreviated_dates/blob/main/prolog/abbreviated_dates.pl.plt) might give an impression on howto use this library.## Common use casesConsuming data from different sources:* Scraping: extract dates from different places with several formats and languages* IoT: consuming data coming from different sources with different date formats* Tooling: consuming dates from different logs / sources* Format transformations: when transforming dates coming from different files (PDF, CSV, etc.) to other formats (database, etc).## OperationsWe are leveraging GNU Make to automate frequent actions. Please use the following command will show the available recipesto use for operating the local development environment:```commandlinemake help```&lt;details&gt;  &lt;summary&gt;Click to see the available recipes&lt;/summary&gt;| Command     | Description                                                         ||-------------|---------------------------------------------------------------------|| help        | Print this help                                                     || synchronize | Switch to the main branch, fetch changes &amp; delete merged branches   || test        | Run the test suite                                                  || run-time    | Install the packages packs required for the development environment || install     | Install the latest library release                                  || uninstall   | Uninstall the latest library release                                || release     | Release recipe to be use from Github Actions                        || bump        | Increase the version number                                         || build       | Build and check distribution packages                               || publish     | Publish the diagrams                                                || workflow    | Creates the Diagrams                                                || remove-all  | Remove packages and packs                                           || clean       | Remove debris                                                       |The following command stores pypi.org token to &quot;Upload packages&quot; in the local key store to be used by the publish option:```bashsecret-tool store --label='https://pypi.org/manage/account/token/' user ${USER} domain pypi.org```&lt;/details&gt;### CompatibilityTested with SWI-Prolog version 8.2.4 on Ubuntu 20.04## LicenseDistributed under the MIT License. See `LICENSE` file for more information.</longdescription>
</pkgmetadata>