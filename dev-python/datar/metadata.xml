<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># datarA Grammar of Data Manipulation in python&lt;!-- badges --&gt;[![Pypi][6]][7] [![Github][8]][9] ![Building][10] [![Docs and API][11]][5] [![Codacy][12]][13] [![Codacy coverage][14]][13] [![Downloads][20]][7][Documentation][5] | [Reference Maps][15] | [Notebook Examples][16] | [API][17]`datar` is a re-imagining of APIs for data manipulation in python with multiple backends supported. Those APIs are aligned with tidyrverse packages in R as much as possible.## Installation```shellpip install -U datar# install with a backendpip install -U datar[pandas]# More backends support will be added in the future```&lt;!-- ## Maximum compatibility with R packages|Package|Version||-|-||[dplyr][21]|1.0.8| --&gt;## Backends|Repo|Badges||-|-||[datar-numpy][1]|![3] ![18]||[datar-pandas][2]|![4] ![19]|## Example usage```python# with pandas backendfrom datar import ffrom datar.dplyr import mutate, filter, if_elsefrom datar.tibble import tibble# or# from datar.all import f, mutate, filter, if_else, tibbledf = tibble(    x=range(4),  # or c[:4]  (from datar.base import c)    y=['zero', 'one', 'two', 'three'])df &gt;&gt; mutate(z=f.x)&quot;&quot;&quot;# output        x        y       z  &lt;int64&gt; &lt;object&gt; &lt;int64&gt;0       0     zero       01       1      one       12       2      two       23       3    three       3&quot;&quot;&quot;df &gt;&gt; mutate(z=if_else(f.x&gt;1, 1, 0))&quot;&quot;&quot;# output:        x        y       z  &lt;int64&gt; &lt;object&gt; &lt;int64&gt;0       0     zero       01       1      one       02       2      two       13       3    three       1&quot;&quot;&quot;df &gt;&gt; filter(f.x&gt;1)&quot;&quot;&quot;# output:        x        y  &lt;int64&gt; &lt;object&gt;0       2      two1       3    three&quot;&quot;&quot;df &gt;&gt; mutate(z=if_else(f.x&gt;1, 1, 0)) &gt;&gt; filter(f.z==1)&quot;&quot;&quot;# output:        x        y       z  &lt;int64&gt; &lt;object&gt; &lt;int64&gt;0       2      two       11       3    three       1&quot;&quot;&quot;``````python# works with plotnine# example grabbed from https://github.com/has2k1/plydataimport numpyfrom datar import ffrom datar.base import sin, pifrom datar.tibble import tibblefrom datar.dplyr import mutate, if_elsefrom plotnine import ggplot, aes, geom_line, theme_classicdf = tibble(x=numpy.linspace(0, 2 * pi, 500))(    df    &gt;&gt; mutate(y=sin(f.x), sign=if_else(f.y &gt;= 0, &quot;positive&quot;, &quot;negative&quot;))    &gt;&gt; ggplot(aes(x=&quot;x&quot;, y=&quot;y&quot;))    + theme_classic()    + geom_line(aes(color=&quot;sign&quot;), size=1.2))```![example](./example.png)```python# very easy to integrate with other libraries# for example: klibimport klibfrom pipda import register_verbfrom datar import ffrom datar.data import irisfrom datar.dplyr import pulldist_plot = register_verb(func=klib.dist_plot)iris &gt;&gt; pull(f.Sepal_Length) &gt;&gt; dist_plot()```![example](./example2.png)## Testimonials[@coforfe](https://github.com/coforfe):&gt; Thanks for your excellent package to port R (`dplyr`) flow of processing to Python. I have been using other alternatives, and yours is the one that offers the most extensive and equivalent to what is possible now with `dplyr`.[1]: https://github.com/pwwang/datar-numpy[2]: https://github.com/pwwang/datar-pandas[3]: https://img.shields.io/codacy/coverage/0a7519dad44246b6bab30576895f6766?style=flat-square[4]: https://img.shields.io/codacy/coverage/45f4ea84ae024f1a8cf84be54dd144f7?style=flat-square[5]: https://pwwang.github.io/datar/[6]: https://img.shields.io/pypi/v/datar?style=flat-square[7]: https://pypi.org/project/datar/[8]: https://img.shields.io/github/v/tag/pwwang/datar?style=flat-square[9]: https://github.com/pwwang/datar[10]: https://img.shields.io/github/actions/workflow/status/pwwang/datar/ci.yml?branch=master&amp;style=flat-square[11]: https://img.shields.io/github/actions/workflow/status/pwwang/datar/docs.yml?branch=master&amp;style=flat-square[12]: https://img.shields.io/codacy/grade/3d9bdff4d7a34bdfb9cd9e254184cb35?style=flat-square[13]: https://app.codacy.com/gh/pwwang/datar[14]: https://img.shields.io/codacy/coverage/3d9bdff4d7a34bdfb9cd9e254184cb35?style=flat-square[15]: https://pwwang.github.io/datar/reference-maps/ALL/[16]: https://pwwang.github.io/datar/notebooks/across/[17]: https://pwwang.github.io/datar/api/datar/[18]: https://img.shields.io/pypi/v/datar-numpy?style=flat-square[19]: https://img.shields.io/pypi/v/datar-pandas?style=flat-square[20]: https://img.shields.io/pypi/dm/datar?style=flat-square[21]: https://github.com/tidyverse/dplyr</longdescription>
</pkgmetadata>