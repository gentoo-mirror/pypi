<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># py-svg-hushpy-svg-hush is a Python package for sanitizing SVG files using the [svg-hush](https://github.com/cloudflare/svg-hush) Rust library.## Installationpy-svg-hush requires Python 3.7 or later. You can install it using pip:``` bashpip install py_svg_hush```## Usage``` pythonfrom py_svg_hush import filter_svgsvg_bytes = b&quot;&quot;&quot;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;    &lt;script&gt;alert('Malicious script')&lt;/script&gt;&lt;/svg&gt;&quot;&quot;&quot;keep_data_url_mime_types = {    &quot;image&quot;: [&quot;jpeg&quot;, &quot;png&quot;, &quot;gif&quot;],}sanitized_svg = filter_svg(svg_bytes, keep_data_url_mime_types)```### filter_svgThe `filter_svg` function sanitizes SVG data by removing potentially malicious elements and attributes, as well as restricting the allowed MIME types of data: URLs in the SVG. It is a simple wrapper around the underlying Rust function.#### Parameters- `svg (bytes)`: The SVG data to be filtered.- `keep_data_url_mime_types (Optional[Dict[str, List[str]]])`: A dictionary that maps MIME types to lists of allowed subtypes for data: URLs in the SVG. If a data: URL's MIME type and subtype are not in the dictionary it will be dropped. If this parameter is None, all data: URLs are dropped.#### Returns- `(bytes)`: The sanitized SVG data.#### Raises- `ValueError`: If there is an error processing the SVG data.- `TypeError`: If any of the arguments are of the wrong type.## DevelopmentTo set up a development environment for py-svg-hush, you can use the following steps:Clone the repository:``` bashgit clone git@github.com:jams2/py-svg-hush.git```Install development dependencies:``` bashpip install .[dev,testing]```Build the Rust library, resulting in a Python module:``` bashmaturin develop```Run tests:``` bashpytest```</longdescription>
</pkgmetadata>