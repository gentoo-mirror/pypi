<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># geojson-pydantic&lt;p align=&quot;center&quot;&gt;  &lt;em&gt; &lt;a href=&quot;https://pydantic-docs.helpmanual.io&quot; target=&quot;_blank&quot;&gt;Pydantic&lt;/a&gt; models for GeoJSON.&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/developmentseed/geojson-pydantic/actions?query=workflow%3ACI&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://github.com/developmentseed/geojson-pydantic/workflows/CI/badge.svg&quot; alt=&quot;Test&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://codecov.io/gh/developmentseed/geojson-pydantic&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://codecov.io/gh/developmentseed/geojson-pydantic/branch/main/graph/badge.svg&quot; alt=&quot;Coverage&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/geojson-pydantic&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://img.shields.io/pypi/v/geojson-pydantic?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypistats.org/packages/geojson-pydantic&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://img.shields.io/pypi/dm/geojson-pydantic.svg&quot; alt=&quot;Downloads&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://github.com/developmentseed/geojson-pydantic/blob/main/LICENSE&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://img.shields.io/github/license/developmentseed/geojson-pydantic.svg&quot; alt=&quot;License&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://anaconda.org/conda-forge/geojson-pydantic&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://anaconda.org/conda-forge/geojson-pydantic/badges/version.svg&quot; alt=&quot;Conda&quot;&gt;  &lt;/a&gt;&lt;/p&gt;## Description`geojson_pydantic` provides a suite of Pydantic models matching the GeoJSON specification [rfc7946](https://datatracker.ietf.org/doc/html/rfc7946). Those models can be used for creating or validating geojson data.## Install```bash$ python -m pip install -U pip$ python -m pip install geojson-pydantic```Or install from source:```bash$ python -m pip install -U pip$ python -m pip install git+https://github.com/developmentseed/geojson-pydantic.git```Install with conda from [`conda-forge`](https://anaconda.org/conda-forge/geojson-pydantic):```bash$ conda install -c conda-forge geojson-pydantic```## Usage```pythonfrom geojson_pydantic import Feature, FeatureCollection, Pointgeojson_feature = {    &quot;type&quot;: &quot;Feature&quot;,    &quot;geometry&quot;: {        &quot;type&quot;: &quot;Point&quot;,        &quot;coordinates&quot;: [13.38272, 52.46385],    },    &quot;properties&quot;: {        &quot;name&quot;: &quot;jeff&quot;,    },}feat = Feature(**geojson_feature)assert feat.type == &quot;Feature&quot;assert type(feat.geometry) == Pointassert feat.properties[&quot;name&quot;] == &quot;jeff&quot;fc = FeatureCollection(type=&quot;FeatureCollection&quot;, features=[geojson_feature, geojson_feature])assert fc.type == &quot;FeatureCollection&quot;assert len(fc) == 2assert type(fc.features[0].geometry) == Pointassert fc.features[0].properties[&quot;name&quot;] == &quot;jeff&quot;```### Advanced usageIn `geojson_pydantic` we've implemented pydantic's [Generic Models](https://pydantic-docs.helpmanual.io/usage/models/#generic-models) which allow the creation of more advanced models to validate either the geometry type or the properties.In order to make use of this generic typing, there are two steps: first create a new model, then use that model to validate your data. To create a model using a `Generic` type, you **HAVE TO** pass `Type definitions` to the `Feature` model in form of `Feature[Geometry Type, Properties Type]`. Then pass your data to this constructor.By default `Feature` and `FeatureCollections` are defined using `geojson_pydantic.geometries.Geometry` for the geometry and `typing.Dict` for the properties.Here's an example where we want to validate that GeoJSON features have Polygon types, but don't do any specific property validation.```pythonfrom typing import Dictfrom geojson_pydantic import Feature, Polygonfrom pydantic import BaseModelgeojson_feature = {    &quot;type&quot;: &quot;Feature&quot;,    &quot;geometry&quot;: {        &quot;type&quot;: &quot;Point&quot;,        &quot;coordinates&quot;: [13.38272, 52.46385],    },    &quot;properties&quot;: {        &quot;name&quot;: &quot;jeff&quot;,    },}# Define a Feature model with Geometry as `Polygon` and Properties as `Dict`MyPolygonFeatureModel = Feature[Polygon, Dict]feat = MyPolygonFeatureModel(**geojson_feature)  # should raise Validation Error because `geojson_feature` is a point&gt;&gt;&gt; ValidationError: 3 validation errors for Feature[Polygon, Dict]...geometry -&gt; type  unexpected value; permitted: 'Polygon' (type=value_error.const; given=Point; permitted=['Polygon'])geojson_feature = {    &quot;type&quot;: &quot;Feature&quot;,    &quot;geometry&quot;: {        &quot;type&quot;: &quot;Polygon&quot;,        &quot;coordinates&quot;: [            [                [13.38272, 52.46385],                [13.42786, 52.46385],                [13.42786, 52.48445],                [13.38272, 52.48445],                [13.38272, 52.46385],            ]        ],    },    &quot;properties&quot;: {        &quot;name&quot;: &quot;jeff&quot;,    },}feat = MyPolygonFeatureModel(**geojson_feature)assert type(feature.geometry) == Polygon```Or with optional geometry```pythonfrom geojson_pydantic import Feature, Pointfrom typing import OptionalMyPointFeatureModel = Feature[Optional[Point], Dict]assert MyPointFeatureModel(type=&quot;Feature&quot;, geometry=None, properties={}).geometry is Noneassert MyPointFeatureModel(type=&quot;Feature&quot;, geometry=Point(coordinates=(0,0)), properties={}).geometry is not None```And now with constrained properties```pythonfrom geojson_pydantic import Feature, Pointfrom pydantic import BaseModel, constr# Define a Feature model with Geometry as `Point` and Properties as a constrained Modelclass MyProps(BaseModel):    name: constr(regex=r'^(drew|vincent)$')MyPointFeatureModel = Feature[Point, MyProps]geojson_feature = {    &quot;type&quot;: &quot;Feature&quot;,    &quot;geometry&quot;: {        &quot;type&quot;: &quot;Point&quot;,        &quot;coordinates&quot;: [13.38272, 52.46385],    },    &quot;properties&quot;: {        &quot;name&quot;: &quot;jeff&quot;,    },}feat = MyPointFeatureModel(**geojson_feature)&gt;&gt;&gt; ValidationError: 1 validation error for Feature[Point, MyProps]properties -&gt; name  string does not match regex &quot;^(drew|vincent)$&quot; (type=value_error.str.regex; pattern=^(drew|vincent)$)geojson_feature[&quot;properties&quot;][&quot;name&quot;] = &quot;drew&quot;feat = MyPointFeatureModel(**geojson_feature)assert feat.properties.name == &quot;drew&quot;```## Enforced KeysStarting with version `0.6.0`, geojson-pydantic's classes will not define default keys such has `type`, `geometry` or `properties`.This is to make sure the library does well its first goal, which is `validating` GeoJSON object based on the [specification](https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.1)    o A GeoJSON object has a member with the name &quot;type&quot;.  The value of      the member MUST be one of the GeoJSON types.    o A Feature object HAS a &quot;type&quot; member with the value &quot;Feature&quot;.    o A Feature object HAS a member with the name &quot;geometry&quot;. The value    of the geometry member SHALL be either a Geometry object as    defined above or, in the case that the Feature is unlocated, a    JSON null value.    o A Feature object HAS a member with the name &quot;properties&quot;. The    value of the properties member is an object (any JSON object or a    JSON null value).```pythonfrom geojson_pydantic import Point## Before 0.6Point(coordinates=(0,0))&gt;&gt; Point(type='Point', coordinates=(0.0, 0.0), bbox=None)## After 0.6Point(coordinates=(0,0))&gt;&gt; ValidationError: 1 validation error for Point   type      field required (type=value_error.missing)Point(type=&quot;Point&quot;, coordinates=(0,0))&gt;&gt; Point(type='Point', coordinates=(0.0, 0.0), bbox=None)```## ContributingSee [CONTRIBUTING.md](CONTRIBUTING.md).## ChangesSee [CHANGES.md](https://github.com/developmentseed/geojson-pydantic/blob/main/CHANGELOG.md).## AuthorsInitial implementation by @geospatial-jeff; taken liberally from https://github.com/arturo-ai/stac-pydantic/See [contributors](hhttps://github.com/developmentseed/geojson-pydantic/graphs/contributors) for a listing of individual contributors.## LicenseSee [LICENSE](https://github.com/developmentseed/geojson-pydantic/blob/main/LICENSE)</longdescription>
</pkgmetadata>