<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://raw.githubusercontent.com/apriha/lineage/master/docs/images/lineage_banner.png|ci| |codecov| |docs| |pypi| |python| |downloads| |license| |black|lineage=======``lineage`` provides a framework for analyzing genotype (raw data) files from direct-to-consumer(DTC) DNA testing companies, primarily for the purposes of genetic genealogy.Capabilities------------- Find shared DNA and genes between individuals- Compute centiMorgans (cMs) of shared DNA using a variety of genetic maps (e.g., HapMap Phase II, 1000 Genomes Project)- Plot shared DNA between individuals- Find discordant SNPs between child and parent(s)- Read, write, merge, and remap SNPs for an individual via the `snps &lt;https://github.com/apriha/snps&gt;`_ packageSupported Genotype Files------------------------``lineage`` supports all genotype files supported by `snps &lt;https://github.com/apriha/snps&gt;`_.Installation------------``lineage`` is `available &lt;https://pypi.org/project/lineage/&gt;`_ on the`Python Package Index &lt;https://pypi.org&gt;`_. Install ``lineage`` (and its requiredPython dependencies) via ``pip``::    $ pip install lineageAlso see the `installation documentation &lt;https://lineage.readthedocs.io/en/stable/installation.html&gt;`_.Dependencies------------``lineage`` requires `Python &lt;https://www.python.org&gt;`_ 3.7.1+ and the following Python packages:- `numpy &lt;https://numpy.org&gt;`_- `pandas &lt;https://pandas.pydata.org&gt;`_- `matplotlib &lt;https://matplotlib.org&gt;`_- `atomicwrites &lt;https://github.com/untitaker/python-atomicwrites&gt;`_- `snps &lt;https://github.com/apriha/snps&gt;`_Examples--------Initialize the lineage Framework````````````````````````````````Import ``Lineage`` and instantiate a ``Lineage`` object:&gt;&gt;&gt; from lineage import Lineage&gt;&gt;&gt; l = Lineage()Download Example Data`````````````````````First, let's setup logging to get some helpful output:&gt;&gt;&gt; import logging, sys&gt;&gt;&gt; logger = logging.getLogger()&gt;&gt;&gt; logger.setLevel(logging.INFO)&gt;&gt;&gt; logger.addHandler(logging.StreamHandler(sys.stdout))Now we're ready to download some example data from `openSNP &lt;https://opensnp.org&gt;`_:&gt;&gt;&gt; paths = l.download_example_datasets()Downloading resources/662.23andme.340.txt.gzDownloading resources/662.ftdna-illumina.341.csv.gzDownloading resources/663.23andme.305.txt.gzDownloading resources/4583.ftdna-illumina.3482.csv.gzDownloading resources/4584.ftdna-illumina.3483.csv.gzWe'll call these datasets ``User662``, ``User663``, ``User4583``, and ``User4584``.Load Raw Data`````````````Create an ``Individual`` in the context of the ``lineage`` framework to interact with the``User662`` dataset:&gt;&gt;&gt; user662 = l.create_individual('User662', ['resources/662.23andme.340.txt.gz', 'resources/662.ftdna-illumina.341.csv.gz'])Loading SNPs('662.23andme.340.txt.gz')Merging SNPs('662.ftdna-illumina.341.csv.gz')SNPs('662.ftdna-illumina.341.csv.gz') has Build 36; remapping to Build 37Downloading resources/NCBI36_GRCh37.tar.gz27 SNP positions were discrepant; keeping original positions151 SNP genotypes were discrepant; marking those as nullHere we created ``user662`` with the name ``User662``. In the process, we merged two raw datafiles for this individual. Specifically:- ``662.23andme.340.txt.gz`` was loaded.- Then, ``662.ftdna-illumina.341.csv.gz`` was merged. In the process, it was found to have Build  36. So, it was automatically remapped to Build 37 (downloading the remapping data in the  process) to match the build of the SNPs already loaded. After this merge, 27 SNP positions and  151 SNP genotypes were found to be discrepant.``user662`` is represented by an ``Individual`` object, which inherits from ``snps.SNPs``.Therefore, all of the `properties and methods &lt;https://snps.readthedocs.io/en/stable/snps.html&gt;`_available to a ``SNPs`` object are available here; for example:&gt;&gt;&gt; len(user662.discrepant_merge_genotypes)151&gt;&gt;&gt; user662.build37&gt;&gt;&gt; user662.build_detectedTrue&gt;&gt;&gt; user662.assembly'GRCh37'&gt;&gt;&gt; user662.count1006960As such, SNPs can be saved, remapped, merged, etc. See the`snps &lt;https://github.com/apriha/snps&gt;`_ package for further examples.Compare Individuals```````````````````Let's create another ``Individual`` for the ``User663`` dataset:&gt;&gt;&gt; user663 = l.create_individual('User663', 'resources/663.23andme.305.txt.gz')Loading SNPs('663.23andme.305.txt.gz')Now we can perform some analysis between the ``User662`` and ``User663`` datasets.`Find Discordant SNPs &lt;https://lineage.readthedocs.io/en/stable/lineage.html#lineage.Lineage.find_discordant_snps&gt;`_''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''First, let's find discordant SNPs (i.e., SNP data that is not consistent with Mendelianinheritance):&gt;&gt;&gt; discordant_snps = l.find_discordant_snps(user662, user663, save_output=True)Saving output/discordant_snps_User662_User663_GRCh37.csvAll `output files &lt;https://lineage.readthedocs.io/en/stable/output_files.html&gt;`_ are saved tothe output directory (a parameter to ``Lineage``).This method also returns a ``pandas.DataFrame``, and it can be inspected interactively atthe prompt, although the same output is available in the CSV file.&gt;&gt;&gt; len(discordant_snps.loc[discordant_snps['chrom'] != 'MT'])37Not counting mtDNA SNPs, there are 37 discordant SNPs between these two datasets.`Find Shared DNA &lt;https://lineage.readthedocs.io/en/stable/lineage.html#lineage.Lineage.find_shared_dna&gt;`_''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''``lineage`` uses the probabilistic recombination rates throughout the human genome from the`International HapMap Project &lt;https://www.genome.gov/10001688/international-hapmap-project/&gt;`_and the `1000 Genomes Project &lt;https://www.internationalgenome.org&gt;`_ to compute the shared DNA(in centiMorgans) between two individuals. Additionally, ``lineage`` denotes when the shared DNAis shared on either one or both chromosomes in a pair. For example, when siblings share a segmentof DNA on both chromosomes, they inherited the same DNA from their mother and father for thatsegment.With that background, let's find the shared DNA between the ``User662`` and ``User663`` datasets,calculating the centiMorgans of shared DNA and plotting the results:&gt;&gt;&gt; results = l.find_shared_dna([user662, user663], cM_threshold=0.75, snp_threshold=1100)Downloading resources/genetic_map_HapMapII_GRCh37.tar.gzDownloading resources/cytoBand_hg19.txt.gzSaving output/shared_dna_User662_User663_0p75cM_1100snps_GRCh37_HapMap2.pngSaving output/shared_dna_one_chrom_User662_User663_0p75cM_1100snps_GRCh37_HapMap2.csvNotice that the centiMorgan and SNP thresholds for each DNA segment can be tuned. Additionally,notice that two files were downloaded to facilitate the analysis and plotting - future analyseswill use the downloaded files instead of downloading the files again. Finally, notice that a listof individuals is passed to ``find_shared_dna``... This list can contain an arbitrary number ofindividuals, and ``lineage`` will find shared DNA across all individuals in the list (i.e.,where all individuals share segments of DNA on either one or both chromosomes).Output is returned as a dictionary with the following keys (``pandas.DataFrame`` and``pandas.Index`` items):&gt;&gt;&gt; sorted(results.keys())['one_chrom_discrepant_snps', 'one_chrom_shared_dna', 'one_chrom_shared_genes', 'two_chrom_discrepant_snps', 'two_chrom_shared_dna', 'two_chrom_shared_genes']In this example, there are 27 segments of shared DNA:&gt;&gt;&gt; len(results['one_chrom_shared_dna'])27Also, `output files &lt;https://lineage.readthedocs.io/en/stable/output_files.html&gt;`_ arecreated; these files are detailed in the documentation and their generation can be disabled with a``save_output=False`` argument. In this example, the output files consist of a CSV file thatdetails the shared segments of DNA on one chromosome and a plot that illustrates the shared DNA:.. image:: https://raw.githubusercontent.com/apriha/lineage/master/docs/images/shared_dna_User662_User663_0p75cM_1100snps_GRCh37_HapMap2.png`Find Shared Genes &lt;https://lineage.readthedocs.io/en/stable/lineage.html#lineage.Lineage.find_shared_dna&gt;`_''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''The `Central Dogma of Molecular Biology &lt;https://en.wikipedia.org/wiki/Central_dogma_of_molecular_biology&gt;`_states that genetic information flows from DNA to mRNA to proteins: DNA is transcribed intomRNA, and mRNA is translated into a protein. It's more complicated than this (it's biologyafter all), but generally, one mRNA produces one protein, and the mRNA / protein is considered agene.Therefore, it would be interesting to understand not just what DNA is shared between individuals,but what *genes* are shared between individuals *with the same variations*. In other words,what genes are producing the *same* proteins? [*]_ Since ``lineage`` can determine the shared DNAbetween individuals, it can use that information to determine what genes are also shared oneither one or both chromosomes... [*] In theory, shared segments of DNA should be producing the same proteins, but there are many complexities, such as copy number variation (CNV), gene expression, etc.For this example, let's create two more ``Individuals`` for the ``User4583`` and ``User4584``datasets:&gt;&gt;&gt; user4583 = l.create_individual('User4583', 'resources/4583.ftdna-illumina.3482.csv.gz')Loading SNPs('4583.ftdna-illumina.3482.csv.gz')&gt;&gt;&gt; user4584 = l.create_individual('User4584', 'resources/4584.ftdna-illumina.3483.csv.gz')Loading SNPs('4584.ftdna-illumina.3483.csv.gz')Now let's find the shared genes, specifying a`population-specific &lt;https://www.internationalgenome.org/faq/which-populations-are-part-your-study/&gt;`_1000 Genomes Project genetic map (e.g., as predicted by `ezancestry &lt;https://github.com/arvkevi/ezancestry&gt;`_!):&gt;&gt;&gt; results = l.find_shared_dna([user4583, user4584], shared_genes=True, genetic_map=&quot;CEU&quot;)Downloading resources/CEU_omni_recombination_20130507.tarDownloading resources/knownGene_hg19.txt.gzDownloading resources/kgXref_hg19.txt.gzSaving output/shared_dna_User4583_User4584_0p75cM_1100snps_GRCh37_CEU.pngSaving output/shared_dna_one_chrom_User4583_User4584_0p75cM_1100snps_GRCh37_CEU.csvSaving output/shared_dna_two_chroms_User4583_User4584_0p75cM_1100snps_GRCh37_CEU.csvSaving output/shared_genes_one_chrom_User4583_User4584_0p75cM_1100snps_GRCh37_CEU.csvSaving output/shared_genes_two_chroms_User4583_User4584_0p75cM_1100snps_GRCh37_CEU.csvThe plot that illustrates the shared DNA is shown below. Note that in addition to outputting theshared DNA segments on either one or both chromosomes, the shared genes on either one or bothchromosomes are also output... note:: Shared DNA is not computed on the X chromosome with the 1000 Genomes Project genetic          maps since the X chromosome is not included in these genetic maps.In this example, there are 15,976 shared genes on both chromosomes transcribed from 36 segmentsof shared DNA:&gt;&gt;&gt; len(results['two_chrom_shared_genes'])15976&gt;&gt;&gt; len(results['two_chrom_shared_dna'])36.. image:: https://raw.githubusercontent.com/apriha/lineage/master/docs/images/shared_dna_User4583_User4584_0p75cM_1100snps_GRCh37_CEU.pngDocumentation-------------Documentation is available `here &lt;https://lineage.readthedocs.io/&gt;`_.Acknowledgements----------------Thanks to Whit Athey, Ryan Dale, Binh Bui, Jeff Gill, Gopal Vashishtha,`CS50 &lt;https://cs50.harvard.edu&gt;`_, and `openSNP &lt;https://opensnp.org&gt;`_... https://github.com/rtfd/readthedocs.org/blob/master/docs/badges.rst.. |ci| image:: https://github.com/apriha/lineage/actions/workflows/ci.yml/badge.svg?branch=master   :target: https://github.com/apriha/lineage/actions/workflows/ci.yml.. |codecov| image:: https://codecov.io/gh/apriha/lineage/branch/master/graph/badge.svg   :target: https://codecov.io/gh/apriha/lineage.. |docs| image:: https://readthedocs.org/projects/lineage/badge/?version=stable   :target: https://lineage.readthedocs.io/.. |pypi| image:: https://img.shields.io/pypi/v/lineage.svg   :target: https://pypi.python.org/pypi/lineage.. |python| image:: https://img.shields.io/pypi/pyversions/lineage.svg   :target: https://www.python.org.. |downloads| image:: https://pepy.tech/badge/lineage   :target: https://pepy.tech/project/lineage.. |license| image:: https://img.shields.io/pypi/l/lineage.svg   :target: https://github.com/apriha/lineage/blob/master/LICENSE.txt.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/psf/black</longdescription>
</pkgmetadata>