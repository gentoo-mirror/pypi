<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fastapi_frameworkA mvc framework used FastApiSimple and elegant use of FastApi in MVC mode[Demo](https://framework.2rails.cn/) ### deploy one click on vercel:[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fsmjkzsl%2Ffastapi-mvc-framework&amp;project-name=fastapi-mvc-framework&amp;repository-name=fastapi-mvc-framework)## usage:install:```shpip install fastapi-mvc-framework```controller:```pythonfrom fastapi_mvc_framework import api_router,api,Request,Response,BaseController,application,WebSocket,WebSocketDisconnect,UploadFile,Filefrom typing import Dict ,List application._public_auth_url = '/user/login'application._user_auth_url = '/user/login'@api_router(auth='public')class TestController(BaseController):     @api.get(&quot;/user/login&quot; )    def login(self):        &quot;&quot;&quot;:title Login&quot;&quot;&quot;          redirect = self.get_param('redirect') if self.get_param('redirect') else '/'         return self.view()     @api.post(&quot;/test/verity_user&quot;,auth=&quot;none&quot;)    async def verity_user(self):          username = self['username']        password = self['password']        redirect = self['redirect']        if username and password:            #do veritied            if username in ['bruce','alice'] and password:                return self._verity_successed(username,redirect)            else:                return self._verity_error()         return self._verity_error()        @api.get(&quot;/user/logout&quot;)    def logout(self):        return self._user_logout()        @api.post(&quot;/test/upload&quot;)    async def upload_test(self,files:List[UploadFile]=File(...)):        p = {}        for file in files:            path,url = await self.getUploadFile(file)            p[file.filename] = [path,url]        return {&quot;files&quot;:p}             @api.get(&quot;/&quot;,auth='none' )    def home(self,request:Request):         '''        :title Home        '''        c = self.session.get('home',1)        c = c+1          self.cookies[&quot;a&quot;] = c        if c&gt;10:            del self.cookies[&quot;a&quot;]            c = 0        self.session['home'] = c        text = &quot;Hello World! I'm in FastapiMvcFramework&quot;        routers_map = application.routers_map        routers = application.routes         return self.view()        @api.get(&quot;/xml&quot;,auth='user')    def get_legacy_data(self):        &quot;&quot;&quot;:title XML(only bruce)&quot;&quot;&quot;        data = &quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot;?&gt;        &lt;shampoo&gt;        &lt;Header&gt;            Apply shampoo here.        &lt;/Header&gt;        &lt;Body&gt;            You'll have to use soap here.        &lt;/Body&gt;        &lt;/shampoo&gt;        &quot;&quot;&quot;        return self.view(content=data,media_type=&quot;application/xml&quot;)              @api.get(&quot;/chatgpt&quot;,auth=&quot;user&quot;)    def chatgpt(self):        &quot;&quot;&quot;        :title Chat(only alice)        &quot;&quot;&quot;        return self.view()  websockets:Dict[str,WebSocket] = {}@api_router(path=&quot;/{controller}&quot;)class WSController(BaseController):      def __init__(self) -&gt; None:        super().__init__()            @api.get(&quot;/&quot; )    def ws_home(self):        &quot;&quot;&quot;:title WebSocketDemo&quot;&quot;&quot;        return self.view()    @api.websocket(&quot;/chat/{client_id}&quot;)    async def websocket_endpoint(self, websocket: WebSocket,client_id: int):        await websocket.accept()        websockets[client_id]=(websocket)        try:            while True:                data = await websocket.receive_text()                await websocket.send_text(f&quot;You wrote: {data}&quot; )                for clientid in websockets:                    if client_id!=clientid:                        await websockets[clientid].send_text(f&quot;Client #{client_id} says: {data}&quot;)                         except WebSocketDisconnect:            websockets.remove(websocket)            for connection in websockets:                await connection.send_text(f&quot;Client #{client_id} left the chat&quot;)             ```home.html:```html&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;FastApi MVC Framework&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;home.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;    &lt;header style=&quot;text-align:left;display: flex;&quot;&gt;        &lt;h1&gt;Python&lt;/h1&gt;        &lt;h4&gt;on FastApi&lt;/h4&gt;    &lt;/header&gt;    &lt;nav&gt;        {% for item in routers_map %} {% if 'GET' in routers_map[item]['methods'] %} {% if routers_map[item]['auth']=='none' or request.session['user'] %}        &lt;a href=&quot;{{routers_map[item]['path']}}&quot;&gt;{{routers_map[item]['doc']                and routers_map[item]['doc']['title'] or item}}&lt;/a&gt; {% endif %} {% endif %} {% endfor %}        &lt;a href=&quot;#&quot;&gt;About&lt;/a&gt;        &lt;a href=&quot;#&quot;&gt;Contact&lt;/a&gt; {% if request.session['user'] %}        &lt;a href=&quot;/user/logout&quot;&gt;&lt;b&gt;{{request.session['user']['username']}}&lt;/b&gt;                Logout&lt;/a&gt; {% endif %}    &lt;/nav&gt;    &lt;section&gt;        &lt;h2&gt;Welcome to my website&lt;/h2&gt;        &lt;p&gt;This is an example of a responsive design that works well on both desktop and mobile devices.&lt;/p&gt;        &lt;p&gt;here is the `text` variable in class method:{{text}}&lt;/p&gt;        &lt;p style=&quot;color:red&quot;&gt;&lt;b&gt;{{flash}}&lt;/b&gt;&lt;/p&gt;    &lt;/section&gt;    &lt;footer&gt;        &lt;p&gt;&amp;copy; 2023 My Website&lt;/p&gt;    &lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;```your project directory structrue like this:```dir\APP|   __init__.py|+---controllers|   |   test_controller.py|   |   __init__.py|   |+---models|   |   models.py|   |   __init__.py|   |+---services|   |   user_service.py|   |   __init__.py|   |+---tests|   |   test_test.py|   |+---views|   +---abc|   |   \---2.0|   |           css.css|   |           home.html|   ||   +---test|   |       chatgpt.css|   |       chatgpt.html|   |       chatgpt.js|   |       home.html|   |       home.js|   |       login.html|   ||   \---ws|           ws_home.html|```</longdescription>
</pkgmetadata>