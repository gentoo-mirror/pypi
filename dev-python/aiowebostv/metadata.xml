<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aiowebostvPython library to control LG webOS based TV devices.Based on:- `aiopylgtv` library at https://github.com/bendavid/aiopylgtv- `bscpylgtv` library at https://github.com/chros73/bscpylgtv## Requirements- Python &gt;= 3.9## Install```bashpip install aiowebostv```## Install from SourceRun the following command inside this folder```bashpip install --upgrade .```## Examples### Basic Example:```pythonimport asynciofrom aiowebostv import WebOsClientHOST = &quot;192.168.1.39&quot;# For first time pairing set key to NoneCLIENT_KEY = &quot;140cce792ae045920e14da4daa414582&quot;async def main():    &quot;&quot;&quot;Basic webOS client example.&quot;&quot;&quot;    client = WebOsClient(HOST, CLIENT_KEY)    await client.connect()    # Store this key for future use    print(f&quot;Client key: {client.client_key}&quot;)    apps = await client.get_apps_all()    for app in apps:        print(app)    await client.disconnect()if __name__ == &quot;__main__&quot;:    asyncio.run(main())```### Subscribed State Updates Example:```pythonimport asynciofrom aiowebostv import WebOsClientHOST = &quot;192.168.1.39&quot;# For first time pairing set key to NoneCLIENT_KEY = &quot;140cce792ae045920e14da4daa414582&quot;async def on_state_change(client):    &quot;&quot;&quot;State changed callback.&quot;&quot;&quot;    print(&quot;State changed:&quot;)    print(f&quot;System info: {client.system_info}&quot;)    print(f&quot;Software info: {client.software_info}&quot;)    print(f&quot;Hello info: {client.hello_info}&quot;)    print(f&quot;Channel info: {client.channel_info}&quot;)    print(f&quot;Apps: {client.apps}&quot;)    print(f&quot;Inputs: {client.inputs}&quot;)    print(f&quot;Powered on: {client.power_state}&quot;)    print(f&quot;App Id: {client.current_app_id}&quot;)    print(f&quot;Channels: {client.channels}&quot;)    print(f&quot;Current channel: {client.current_channel}&quot;)    print(f&quot;Muted: {client.muted}&quot;)    print(f&quot;Volume: {client.volume}&quot;)    print(f&quot;Sound output: {client.sound_output}&quot;)async def main():    &quot;&quot;&quot;Subscribed State Updates Example.&quot;&quot;&quot;    client = WebOsClient(HOST, CLIENT_KEY)    await client.register_state_update_callback(on_state_change)    await client.connect()    # Store this key for future use    print(f&quot;Client key: {client.client_key}&quot;)    # Change something using the remote during sleep period to get updates    await asyncio.sleep(30)    await client.disconnect()if __name__ == &quot;__main__&quot;:    asyncio.run(main())```Examples can be found in the `examples` folder</longdescription>
</pkgmetadata>