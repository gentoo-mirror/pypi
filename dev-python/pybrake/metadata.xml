<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python exception notifier for Airbrake![Build Status](https://github.com/airbrake/pybrake/workflows/pybrake/badge.svg)## Installationpybrake requires Python 3.6+.``` shellpip install -U pybrake```## ConfigurationYou **must** set both `project_id` &amp; `project_key`.To find your `project_id` and `project_key` navigate to your project's_Settings_ and copy the values from the right sidebar.![project-idkey]```pythonimport pybrakenotifier = pybrake.Notifier(project_id=123,                            project_key='FIXME',                            environment='production')```## Sending errors to Airbrake```pythontry:    raise ValueError('hello')except Exception as err:    notifier.notify(err)```### Sending errors synchronouslyBy default, the `notify` function sends errors asynchronously using`ThreadPoolExecutor` and returns a `concurrent.futures.Future`, a synchronousAPI is also made available with the `notify_sync` function:```pythonnotice = notifier.notify_sync(err)if 'id' in notice:    print(notice['id'])else:    print(notice['error'])```## Adding custom paramsTo set custom params you can build and send notice in separate steps:```pythonnotice = notifier.build_notice(err)notice['params']['myparam'] = 'myvalue'notifier.send_notice(notice)```You can also add custom params to every error notice before it's sent to Airbrakewith the `add_filter` function.```pythondef my_filter(notice):    notice['params']['myparam'] = 'myvalue'    return noticenotifier.add_filter(my_filter)```## Ignoring noticesThere may be some notices/errors thrown in your application that you're notinterested in sending to Airbrake, you can ignore these using the `add_filter`function.```pythondef my_filter(notice):    if notice['context']['environment'] == 'development':        # Ignore notices in development environment.        return None    return noticenotifier.add_filter(my_filter)```## Filtering keysWith `keys_blocklist` option you can specify list of keys containing sensitive information that must be filtered out, e.g.:```pythonnotifier = pybrake.Notifier(    ...    keys_blocklist=[        'password',           # exact match        re.compile('secret'), # regexp match    ],)```## Logging integrationpybrake provides a logging handler that sends your logs to Airbrake.```pythonimport loggingimport pybrakeairbrake_handler = pybrake.LoggingHandler(notifier=notifier,                                          level=logging.ERROR)logger = logging.getLogger('test')logger.addHandler(airbrake_handler)logger.error('something bad happened')```## Disabling pybrake logsThe pybrake logger can be silenced by setting the logging level to`logging.CRITICAL`.``` pythonimport logginglogging.getLogger(&quot;pybrake&quot;).setLevel(logging.CRITICAL)```## Sending route stats`notifier.routes.notify` allows sending route stats to Airbrake. The libraryprovides integrations with Django and Flask. (your routes are trackedautomatically). You can also use this API manually:```pyfrom pybrake import RouteMetricmetric = RouteMetric(method=request.method, route=route)metric.status_code = response.status_codemetric.content_type = response.headers.get(&quot;Content-Type&quot;)metric.end_time = time.time()notifier.routes.notify(metric)```## Sending route breakdowns`notifier.routes.breakdowns.notify` allows sending performance breakdown statsto Airbrake. You can use this API manually:```pyfrom pybrake import RouteMetricmetric = RouteMetric(    method=request.method,    route='/things/1',    status_code=200,    content_type=response.headers.get('Content-Type'))metric._groups = {'db': 12.34, 'view': 56.78}metric.end_time=time.time()notifier.routes.breakdowns.notify(metric)```## Sending query stats`notifier.queries.notify` allows sending SQL query stats to Airbrake. Thelibrary provides integration with Django (your queries are trackedautomatically). You can also use this API manually:```pynotifier.queries.notify(    query=&quot;SELECT * FROM foos&quot;,    method=request.method,    route=route,    function=&quot;test&quot;,    file=&quot;test&quot;,    line=10,    start_time=time.time(),    end_time=time.time(),)```## Sending queue stats`notifier.queues.notify` allows sending queue (job) stats to Airbrake. Thelibrary provides integration with Celery (your queues are trackedautomatically). You can also use this API manually:```pyfrom pybrake import QueueMetricmetric = QueueMetric(queue=&quot;foo_queue&quot;)metric._groups = {'redis': 24.0, 'sql': 0.4}notifier.queues.notify(metric)```## Framework IntegrationPybrake provides a ready-to-use solution with minimal configuration for python frameworks.* [AIOHTTP](https://docs.airbrake.io/docs/platforms/framework/python/aiohttp)* [BottlePy](https://docs.airbrake.io/docs/platforms/framework/python/bottle)* [Celery](https://docs.airbrake.io/docs/platforms/framework/python/celery)* [CherryPy](https://docs.airbrake.io/docs/platforms/framework/python/cherrypy)* [Django](https://docs.airbrake.io/docs/platforms/framework/python/django)* [FastAPI](https://docs.airbrake.io/docs/platforms/framework/python/fastapi)* [Falcon](https://docs.airbrake.io/docs/platforms/framework/python/falcon)* [Flask](https://docs.airbrake.io/docs/platforms/framework/python/flask)* [Hug](https://docs.airbrake.io/docs/platforms/framework/python/hug)* [Masonite](https://docs.airbrake.io/docs/platforms/framework/python/masonite)* [Pycnic](https://docs.airbrake.io/docs/platforms/framework/python/pycnic)* [Pyramid](https://docs.airbrake.io/docs/platforms/framework/python/pyramid)* [Sanic](https://docs.airbrake.io/docs/platforms/framework/python/sanic)* [Starlette](https://docs.airbrake.io//docs/platforms/framework/python/starlette)* [Tornado](https://docs.airbrake.io//docs/platforms/framework/python/tornado)* [Turbogears2](https://docs.airbrake.io//docs/platforms/framework/python/turbogears2)## Development### Running the tests```shellpip install -r requirements.txtpip install -r test-requirements.txtpytest```### Uploading to PyPI```shellpython setup.py sdist upload```### Remote configurationEvery 10 minutes the notifier issues an HTTP GET request to fetch remoteconfiguration. This might be undesirable while running tests. To suppress thisHTTP call, you need to pass `remote_config=False` to the notifier.[project-idkey]: https://s3.amazonaws.com/airbrake-github-assets/pybrake/project-id-key.png</longdescription>
</pkgmetadata>