<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================pytest-reportlog================|python| |version| |anaconda| |ci| |black|.. |version| image:: http://img.shields.io/pypi/v/pytest-reportlog.svg  :target: https://pypi.python.org/pypi/pytest-reportlog.. |anaconda| image:: https://img.shields.io/conda/vn/conda-forge/pytest-reportlog.svg    :target: https://anaconda.org/conda-forge/pytest-reportlog.. |ci| image:: https://github.com/pytest-dev/pytest-reportlog/workflows/test/badge.svg  :target: https://github.com/pytest-dev/pytest-reportlog/actions.. |python| image:: https://img.shields.io/pypi/pyversions/pytest-reportlog.svg  :target: https://pypi.python.org/pypi/pytest-reportlog/.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg  :target: https://github.com/ambv/blackReplacement for the ``--resultlog`` option, focused in simplicity and extensibility... note::    This plugin was created so developers can try out the candidate to replace the    `deprecated --resultlog &lt;https://docs.pytest.org/en/latest/deprecations.html#result-log-result-log&gt;`__ option.    If you use ``--resultlog``, please try out ``--report-log`` and provide feedback.Usage=====Install ``pytest-reportlog`` as a test requirement in your test environment.The ``--report-log=FILE`` option writes *report logs* into a file as the test session executes.Each line of the report log contains a self contained JSON object corresponding to a testing event,such as a collection or a test result report. The file is guaranteed to be flushed after writingeach line, so systems can read and process events in real-time.Each JSON object contains a special key ``$report_type``, which contains a unique identifier forthat kind of report object. For future compatibility, consumers of the file should ignore reportsthey don't recognize, as well as ignore unknown properties/keys in JSON objects that they do know,as future pytest versions might enrich the objects with more properties/keys.Example-------Consider this file:.. code-block:: python    # content of test_report_example.py    def test_ok():        assert 5 + 5 == 10    def test_fail():        assert 4 + 4 == 1::    $ pytest test_report_example.py -q --report-log=log.json    .F                                                                   [100%]    ================================= FAILURES =================================    ________________________________ test_fail _________________________________        def test_fail():    &gt;       assert 4 + 4 == 1    E       assert (4 + 4) == 1    test_report_example.py:8: AssertionError    ------------------- generated report log file: log.json --------------------    1 failed, 1 passed in 0.12sThe generated ``log.json`` will contain a JSON object per line:::    $ cat log.json    {&quot;pytest_version&quot;: &quot;5.2.2&quot;, &quot;$report_type&quot;: &quot;SessionStart&quot;}    {&quot;nodeid&quot;: &quot;&quot;, &quot;outcome&quot;: &quot;passed&quot;, &quot;longrepr&quot;: null, &quot;result&quot;: null, &quot;sections&quot;: [], &quot;$report_type&quot;: &quot;CollectReport&quot;}    {&quot;nodeid&quot;: &quot;test_report_example.py&quot;, &quot;outcome&quot;: &quot;passed&quot;, &quot;longrepr&quot;: null, &quot;result&quot;: null, &quot;sections&quot;: [], &quot;$report_type&quot;: &quot;CollectReport&quot;}    {&quot;nodeid&quot;: &quot;test_report_example.py::test_ok&quot;, &quot;location&quot;: [&quot;test_report_example.py&quot;, 0, &quot;test_ok&quot;], &quot;keywords&quot;: {&quot;test_ok&quot;: 1, &quot;pytest-reportlog&quot;: 1, &quot;test_report_example.py&quot;: 1}, &quot;outcome&quot;: &quot;passed&quot;, &quot;longrepr&quot;: null, &quot;when&quot;: &quot;setup&quot;, &quot;user_properties&quot;: [], &quot;sections&quot;: [], &quot;duration&quot;: 0.0, &quot;$report_type&quot;: &quot;TestReport&quot;}    {&quot;nodeid&quot;: &quot;test_report_example.py::test_ok&quot;, &quot;location&quot;: [&quot;test_report_example.py&quot;, 0, &quot;test_ok&quot;], &quot;keywords&quot;: {&quot;test_ok&quot;: 1, &quot;pytest-reportlog&quot;: 1, &quot;test_report_example.py&quot;: 1}, &quot;outcome&quot;: &quot;passed&quot;, &quot;longrepr&quot;: null, &quot;when&quot;: &quot;call&quot;, &quot;user_properties&quot;: [], &quot;sections&quot;: [], &quot;duration&quot;: 0.0, &quot;$report_type&quot;: &quot;TestReport&quot;}    {&quot;nodeid&quot;: &quot;test_report_example.py::test_ok&quot;, &quot;location&quot;: [&quot;test_report_example.py&quot;, 0, &quot;test_ok&quot;], &quot;keywords&quot;: {&quot;test_ok&quot;: 1, &quot;pytest-reportlog&quot;: 1, &quot;test_report_example.py&quot;: 1}, &quot;outcome&quot;: &quot;passed&quot;, &quot;longrepr&quot;: null, &quot;when&quot;: &quot;teardown&quot;, &quot;user_properties&quot;: [], &quot;sections&quot;: [], &quot;duration&quot;: 0.00099945068359375, &quot;$report_type&quot;: &quot;TestReport&quot;}    {&quot;nodeid&quot;: &quot;test_report_example.py::test_fail&quot;, &quot;location&quot;: [&quot;test_report_example.py&quot;, 4, &quot;test_fail&quot;], &quot;keywords&quot;: {&quot;test_fail&quot;: 1, &quot;pytest-reportlog&quot;: 1, &quot;test_report_example.py&quot;: 1}, &quot;outcome&quot;: &quot;passed&quot;, &quot;longrepr&quot;: null, &quot;when&quot;: &quot;setup&quot;, &quot;user_properties&quot;: [], &quot;sections&quot;: [], &quot;duration&quot;: 0.0, &quot;$report_type&quot;: &quot;TestReport&quot;}    {&quot;nodeid&quot;: &quot;test_report_example.py::test_fail&quot;, &quot;location&quot;: [&quot;test_report_example.py&quot;, 4, &quot;test_fail&quot;], &quot;keywords&quot;: {&quot;test_fail&quot;: 1, &quot;pytest-reportlog&quot;: 1, &quot;test_report_example.py&quot;: 1}, &quot;outcome&quot;: &quot;failed&quot;, &quot;longrepr&quot;: {&quot;reprcrash&quot;: {&quot;path&quot;: &quot;D:\\projects\\pytest-reportlog\\test_report_example.py&quot;, &quot;lineno&quot;: 6, &quot;message&quot;: &quot;assert (4 + 4) == 1&quot;}, &quot;reprtraceback&quot;: {&quot;reprentries&quot;: [{&quot;type&quot;: &quot;ReprEntry&quot;, &quot;data&quot;: {&quot;lines&quot;: [&quot;    def test_fail():&quot;, &quot;&gt;       assert 4 + 4 == 1&quot;, &quot;E       assert (4 + 4) == 1&quot;], &quot;reprfuncargs&quot;: {&quot;args&quot;: []}, &quot;reprlocals&quot;: null, &quot;reprfileloc&quot;: {&quot;path&quot;: &quot;test_report_example.py&quot;, &quot;lineno&quot;: 6, &quot;message&quot;: &quot;AssertionError&quot;}, &quot;style&quot;: &quot;long&quot;}}], &quot;extraline&quot;: null, &quot;style&quot;: &quot;long&quot;}, &quot;sections&quot;: [], &quot;chain&quot;: [[{&quot;reprentries&quot;: [{&quot;type&quot;: &quot;ReprEntry&quot;, &quot;data&quot;: {&quot;lines&quot;: [&quot;    def test_fail():&quot;, &quot;&gt;       assert 4 + 4 == 1&quot;, &quot;E       assert (4 + 4) == 1&quot;], &quot;reprfuncargs&quot;: {&quot;args&quot;: []}, &quot;reprlocals&quot;: null, &quot;reprfileloc&quot;: {&quot;path&quot;: &quot;test_report_example.py&quot;, &quot;lineno&quot;: 6, &quot;message&quot;: &quot;AssertionError&quot;}, &quot;style&quot;: &quot;long&quot;}}], &quot;extraline&quot;: null, &quot;style&quot;: &quot;long&quot;}, {&quot;path&quot;: &quot;D:\\projects\\pytest-reportlog\\test_report_example.py&quot;, &quot;lineno&quot;: 6, &quot;message&quot;: &quot;assert (4 + 4) == 1&quot;}, null]]}, &quot;when&quot;: &quot;call&quot;, &quot;user_properties&quot;: [], &quot;sections&quot;: [], &quot;duration&quot;: 0.0009992122650146484, &quot;$report_type&quot;: &quot;TestReport&quot;}    {&quot;nodeid&quot;: &quot;test_report_example.py::test_fail&quot;, &quot;location&quot;: [&quot;test_report_example.py&quot;, 4, &quot;test_fail&quot;], &quot;keywords&quot;: {&quot;test_fail&quot;: 1, &quot;pytest-reportlog&quot;: 1, &quot;test_report_example.py&quot;: 1}, &quot;outcome&quot;: &quot;passed&quot;, &quot;longrepr&quot;: null, &quot;when&quot;: &quot;teardown&quot;, &quot;user_properties&quot;: [], &quot;sections&quot;: [], &quot;duration&quot;: 0.0, &quot;$report_type&quot;: &quot;TestReport&quot;}    {&quot;exitstatus&quot;: 1, &quot;$report_type&quot;: &quot;SessionFinish&quot;}record_property---------------The ``record_property`` fixture allows to log additional information for a test, just like with JUnitXML format.Consider this test file:.. code-block:: python    def test_function(record_property):        record_property(&quot;price&quot;, 12.34)        record_property(&quot;fruit&quot;, &quot;banana&quot;)        assert TrueThis information will be recorded in the report JSON objects under the ``user_properties`` key as follows::    ..., &quot;user_properties&quot;: [[&quot;price&quot;, 12.34], [&quot;fruit&quot;, &quot;banana&quot;]], ...Note that this nested list construct is just the JSON representationof a list of tuples (name-value pairs).License=======Distributed under the terms of the `MIT`_ license... _MIT: https://github.com/pytest-dev/pytest-mock/blob/master/LICENSE</longdescription>
</pkgmetadata>