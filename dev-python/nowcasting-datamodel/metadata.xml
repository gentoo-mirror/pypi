<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># nowcasting_datamodel&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt;[![All Contributors](https://img.shields.io/badge/all_contributors-2-orange.svg?style=flat-square)](#contributors-)&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt;Datamodel for the nowcasting projectThe data model has been made using `sqlalchemy` with a mirrored model in `pydantic`.‚ö†Ô∏è Database tables are currently made automatically,but in the future there should be a migration processFuture: The data model could be moved, to be a more modular solution.## nowcasting_datamodel### models.pyAll models are in `nowcasting_datamodel.models.py`.The diagram below shows how the different tables are connected.![Models](diagram.png)![Models](diagram_pv.png)### connection.py`nowcasting_datamodel.connection.py` contains a connection class which can be used to make a sqlalchemy session.```pythonfrom nowcasting_datamodel.connection import DatabaseConnection# make connection objectdb_connection = DatabaseConnection(url='sqlite:///test.db')# make sessionswith db_connection.get_session() as session:    # do something with the database    pass```### üëì read.py`nowcasting_datamodel.read.py` contains functions to read the database.The idea is that these are easy to use functions that query the database in an efficient and easy way. - get_latest_forecast: Get the latest `Forecast` for a specific GSP. - get_all_gsp_ids_latest_forecast: Get the latest `Forecast` for all GSPs. - get_forecast_values: Gets the latest `ForecastValue` for a specific GSP - get_latest_national_forecast: Returns the latest national forecast - get_location: Gets a `Location` object```pythonfrom nowcasting_datamodel.connection import DatabaseConnectionfrom nowcasting_datamodel.read import get_latest_forecast# make connection objectdb_connection = DatabaseConnection(url='sqlite:///test.db')# make sessionswith db_connection.get_session() as session:    f = get_latest_forecast(session=session, gsp_id=1)```### üíæ save.py`nowcasting_datamodel.save.py` has one functions to save a list of `Forecast` to the database### üá¨üáß national.py`nowcasting_datamodel.fake.py` has a useful function for adding up forecasts for all GSPs into a national Forecast.### fake.py`nowcasting_datamodel.fake.py`Functions used to make fake model data.## ü©∫ TestingTests are run by using the following command```bashdocker stop $(docker ps -a -q)docker-compose -f test-docker-compose.yml builddocker-compose -f test-docker-compose.yml run tests```These sets up `postgres` in a docker container and runs the tests in another docker container.This slightly more complicated testing framework is needed (compared to running `pytest`)as some queries can not be fully tested on a `sqlite` database### Mac M1 usersAn upstream builds issue of libgp may cause the following error:`sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) SCRAM authentication requires libpq version 10 or above`As suggested in this [thread](https://stackoverflow.com/questions/62807717/how-can-i-solve-postgresql-scram-authentication-problem), a temporary fix is to set the env variable `DOCKER_DEFAULT_PLATFORM=linux/amd64` prior to building the test images - although this reportedly comes with performance penalties.## üõ†Ô∏è infrastructure`.github/workflows` contains a number of CI actions1. linters.yaml: Runs linting checks on the code2. release.yaml: Make and pushes docker files on a new code release3. test-docker.yaml': Runs tests on every pushThe docker file is in the folder `infrastructure/docker/`The version is bumped automatically for any push to `main`.## Environmental Variables- DB_URL: The database url which the forecasts will be saved too## Contributors ‚ú®Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt;&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable --&gt;&lt;table&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://lostcoding.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/20285369?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Brandon Ly&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Brandon Ly&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/openclimatefix/nowcasting_datamodel/commits?author=branberry&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt;      &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/lucasc896&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1273006?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Chris Lucas&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Chris Lucas&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/openclimatefix/nowcasting_datamodel/commits?author=lucasc896&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;!-- markdownlint-restore --&gt;&lt;!-- prettier-ignore-end --&gt;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt;This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!</longdescription>
</pkgmetadata>