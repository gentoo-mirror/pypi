<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![SageMaker](https://github.com/aws/sagemaker-training-toolkit/raw/master/branding/icon/sagemaker-banner.png)# SageMaker Training Toolkit[![Latest Version](https://img.shields.io/pypi/v/sagemaker-training.svg)](https://pypi.python.org/pypi/sagemaker-training) [![Supported Python Versions](https://img.shields.io/pypi/pyversions/sagemaker-training.svg)](https://pypi.python.org/pypi/sagemaker-training) [![Code Style: Black](https://img.shields.io/badge/code_style-black-000000.svg)](https://github.com/python/black)Train machine learning models within a Docker container using Amazon SageMaker.## :books: Background[Amazon SageMaker](https://aws.amazon.com/sagemaker/) is a fully managed service for data science and machine learning (ML) workflows.You can use Amazon SageMaker to simplify the process of building, training, and deploying ML models.To train a model, you can include your training script and dependencies in a [Docker container](https://www.docker.com/resources/what-container) that runs your training code.A container provides an effectively isolated environment, ensuring a consistent runtime and reliable training process. The **SageMaker Training Toolkit** can be easily added to any Docker container, making it compatible with SageMaker for [training models](https://aws.amazon.com/sagemaker/train/).If you use a [prebuilt SageMaker Docker image for training](https://docs.aws.amazon.com/sagemaker/latest/dg/pre-built-containers-frameworks-deep-learning.html), this library may already be included.For more information, see the Amazon SageMaker Developer Guide sections on [using Docker containers for training](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).## :hammer_and_wrench: InstallationTo install this library in your Docker image, add the following line to your [Dockerfile](https://docs.docker.com/engine/reference/builder/):``` dockerfileRUN pip3 install sagemaker-training```## :computer: UsageThe following are brief how-to guides.For complete, working examples of custom training containers built with the SageMaker Training Toolkit, please see [the example notebooks](https://github.com/awslabs/amazon-sagemaker-examples/tree/master/advanced_functionality/custom-training-containers).### Create a Docker image and train a model1. Write a training script (eg. `train.py`).2. [Define a container with a Dockerfile](https://docs.docker.com/get-started/part2/#define-a-container-with-dockerfile) that includes the training script and any dependencies.    The training script must be located in the `/opt/ml/code` directory.    The environment variable `SAGEMAKER_PROGRAM` defines which file inside the `/opt/ml/code` directory to use as the training entry point.    When training starts, the interpreter executes the entry point defined by `SAGEMAKER_PROGRAM`.    Python and shell scripts are both supported.        ``` docker    FROM yourbaseimage:tag      # install the SageMaker Training Toolkit     RUN pip3 install sagemaker-training    # copy the training script inside the container    COPY train.py /opt/ml/code/train.py    # define train.py as the script entry point    ENV SAGEMAKER_PROGRAM train.py    ```3. Build and tag the Docker image.    ``` shell    docker build -t custom-training-container .    ```4. Use the Docker image to start a training job using the [SageMaker Python SDK](https://github.com/aws/sagemaker-python-sdk).    ``` python    from sagemaker.estimator import Estimator    estimator = Estimator(image_name=&quot;custom-training-container&quot;,                          role=&quot;SageMakerRole&quot;,                          train_instance_count=1,                          train_instance_type=&quot;local&quot;)    estimator.fit()    ```        To train a model using the image on SageMaker, [push the image to ECR](https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-push-ecr-image.html) and start a SageMaker training job with the image URI.    ### Pass arguments to the entry point using hyperparametersAny hyperparameters provided by the training job are passed to the entry point as script arguments.The SageMaker Python SDK uses this feature to pass special hyperparameters to the training job, including `sagemaker_program` and `sagemaker_submit_directory`.The complete list of SageMaker hyperparameters is available [here](https://github.com/aws/sagemaker-training-toolkit/blob/master/src/sagemaker_training/params.py).1. Implement an argument parser in the entry point script. For example, in a Python script:    ``` python    import argparse    if __name__ == &quot;__main__&quot;:      parser = argparse.ArgumentParser()      parser.add_argument(&quot;--learning-rate&quot;, type=int, default=1)      parser.add_argument(&quot;--batch-size&quot;, type=int, default=64)      parser.add_argument(&quot;--communicator&quot;, type=str)      parser.add_argument(&quot;--frequency&quot;, type=int, default=20)      args = parser.parse_args()      ...    ```2. Start a training job with hyperparameters.    ``` python    {&quot;HyperParameters&quot;: {&quot;batch-size&quot;: 256, &quot;learning-rate&quot;: 0.0001, &quot;communicator&quot;: &quot;pure_nccl&quot;}}    ```### Read additional information using environment variablesAn entry point often needs additional information not available in `hyperparameters`.The SageMaker Training Toolkit writes this information as environment variables that are available from within the script.For example, this training job includes the channels `training` and `testing`:``` pythonfrom sagemaker.pytorch import PyTorchestimator = PyTorch(entry_point=&quot;train.py&quot;, ...)estimator.fit({&quot;training&quot;: &quot;s3://bucket/path/to/training/data&quot;,                &quot;testing&quot;: &quot;s3://bucket/path/to/testing/data&quot;})```The environment variables `SM_CHANNEL_TRAINING` and `SM_CHANNEL_TESTING` provide the paths to the channels:``` pythonimport argparseimport osif __name__ == &quot;__main__&quot;:  parser = argparse.ArgumentParser()  ...  # reads input channels training and testing from the environment variables  parser.add_argument(&quot;--training&quot;, type=str, default=os.environ[&quot;SM_CHANNEL_TRAINING&quot;])  parser.add_argument(&quot;--testing&quot;, type=str, default=os.environ[&quot;SM_CHANNEL_TESTING&quot;])  args = parser.parse_args()  ...```When training starts, SageMaker Training Toolkit will print all available environment variables. Please see the [reference on environment variables](https://github.com/aws/sagemaker-training-toolkit/blob/master/ENVIRONMENT_VARIABLES.md) for a full list of provided environment variables.### Get information about the container environmentTo get information about the container environment, initialize an `Environment` object.`Environment` provides access to aspects of the environment relevant to training jobs, including hyperparameters, system characteristics, filesystem locations, environment variables and configuration settings.It is a read-only snapshot of the container environment during training, and it doesn't contain any form of state.``` pythonfrom sagemaker_training import environmentenv = environment.Environment()# get the path of the channel &quot;training&quot; from the `inputdataconfig.json` filetraining_dir = env.channel_input_dirs[&quot;training&quot;]# get a the hyperparameter &quot;training_data_file&quot; from `hyperparameters.json` filefile_name = env.hyperparameters[&quot;training_data_file&quot;]# get the folder where the model should be savedmodel_dir = env.model_dir# train the modeldata = np.load(os.path.join(training_dir, file_name))x_train, y_train = data[&quot;features&quot;], keras.utils.to_categorical(data[&quot;labels&quot;])model = ResNet50(weights=&quot;imagenet&quot;)...model.fit(x_train, y_train)#save the model to the model_dir at the end of trainingmodel.save(os.path.join(model_dir, &quot;saved_model&quot;))```### Execute the entry pointTo execute the entry point, call `entry_point.run()`.``` pythonfrom sagemaker_training import entry_point, environmentenv = environment.Environment()# read hyperparameters as script argumentsargs = env.to_cmd_args()# get the environment variablesenv_vars = env.to_env_vars()# execute the entry pointentry_point.run(uri=env.module_dir,                user_entry_point=env.user_entry_point,                args=args,                env_vars=env_vars)```If the entry point execution fails, `trainer.train()` will write the error message to `/opt/ml/output/failure`. Otherwise, it will write to the file `/opt/ml/success`.## :scroll: LicenseThis library is licensed under the [Apache 2.0 License](http://aws.amazon.com/apache2.0/).For more details, please take a look at the [LICENSE](https://github.com/aws/sagemaker-training-toolkit/blob/master/LICENSE) file.## :handshake: ContributingContributions are welcome!Please read our [contributing guidelines](https://github.com/aws/sagemaker-training-toolkit/blob/master/CONTRIBUTING.md)if you'd like to open an issue or submit a pull request.</longdescription>
</pkgmetadata>