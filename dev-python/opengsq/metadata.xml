<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpenGSQ Python Library[![Python Package](https://github.com/opengsq/opengsq-python/actions/workflows/python-package.yml/badge.svg)](https://github.com/opengsq/opengsq-python/actions/workflows/python-package.yml)[![GitHub license](https://img.shields.io/github/license/opengsq/opengsq-python)](https://github.com/opengsq/opengsq-python/blob/main/LICENSE)[![](https://img.shields.io/pypi/v/opengsq.svg)](https://pypi.org/project/opengsq/)[![](https://img.shields.io/pypi/pyversions/opengsq.svg)](https://pypi.org/project/opengsq/)[![Downloads](https://pepy.tech/badge/opengsq)](https://pepy.tech/project/opengsq)The OpenGSQ Python library provides a convenient way to query serversfrom applications written in the Python language.## Supported Protocols```pyfrom opengsq.protocols.ase import ASEfrom opengsq.protocols.battlefield import Battlefieldfrom opengsq.protocols.doom3 import Doom3from opengsq.protocols.gamespy1 import GameSpy1from opengsq.protocols.gamespy2 import GameSpy2from opengsq.protocols.gamespy3 import GameSpy3from opengsq.protocols.gamespy4 import GameSpy4from opengsq.protocols.minecraft import Minecraftfrom opengsq.protocols.quake1 import Quake1from opengsq.protocols.quake2 import Quake2from opengsq.protocols.quake3 import Quake3from opengsq.protocols.raknet import Raknetfrom opengsq.protocols.samp import Sampfrom opengsq.protocols.satisfactory import Satisfactoryfrom opengsq.protocols.source import Sourcefrom opengsq.protocols.teamspeak3 import Teamspeak3from opengsq.protocols.unreal2 import Unreal2from opengsq.protocols.vcmp import Vcmpfrom opengsq.protocols.won import WON```## Requirements-   Python 3.6+## InstallationThe recommended installation method is using [pip](http://pip-installer.org/):```shpip install --upgrade opengsq```or, install from source manually with:```shpython setup.py install```## UsageQuery server using Source, example output: [tests/results/test_source/test_get_info.json](/tests/results/test_source/test_get_info.json)```pyimport asynciofrom opengsq.protocols import Sourceasync def main():    source = Source(address='45.147.5.5', query_port=27015)    info = await source.get_info()    print(info)asyncio.run(main())```Rcon server using Source Remote Console, example output: [tests/results/test_source/test_remote_console.txt](/tests/results/test_source/test_remote_console.txt)```pyimport asynciofrom opengsq.exceptions import AuthenticationExceptionfrom opengsq.protocols import Sourceasync def main():    with Source.RemoteConsole('123.123.123.123', 27015) as rcon:        try:            await rcon.authenticate('serverRconPassword')            result = await rcon.send_command('cvarlist')            print(result)        except AuthenticationException:            print('Fail to authenticate')asyncio.run(main())```### Command-line interfaceThis library additionally provides an `opengsq` command-line utilitywhich makes it easy to query game servers from your terminal. Run`opengsq -h` for usage.```sh# query server using source protocolopengsq source --address 123.123.123.123 --query_port 27015 --function get_info```## Tests and ResultsSee [tests/protocols](/tests/protocols) for the tests.See [tests/results](/tests/results) for tests outputs.</longdescription>
</pkgmetadata>