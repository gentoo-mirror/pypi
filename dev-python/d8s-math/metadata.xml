<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Democritus Math[![PyPI](https://img.shields.io/pypi/v/d8s-math.svg)](https://pypi.python.org/pypi/d8s-math)[![CI](https://github.com/democritus-project/d8s-math/workflows/CI/badge.svg)](https://github.com/democritus-project/d8s-math/actions)[![Lint](https://github.com/democritus-project/d8s-math/workflows/Lint/badge.svg)](https://github.com/democritus-project/d8s-math/actions)[![codecov](https://codecov.io/gh/democritus-project/d8s-math/branch/main/graph/badge.svg?token=V0WOIXRGMM)](https://codecov.io/gh/democritus-project/d8s-math)[![The Democritus Project uses semver version 2.0.0](https://img.shields.io/badge/-semver%20v2.0.0-22bfda)](https://semver.org/spec/v2.0.0.html)[![The Democritus Project uses black to format code](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://choosealicense.com/licenses/lgpl-3.0/)Democritus functions&lt;sup&gt;[1]&lt;/sup&gt; for working with math.[1] Democritus functions are &lt;i&gt;simple, effective, modular, well-tested, and well-documented&lt;/i&gt; Python functions.We use `d8s` (pronounced &quot;dee-eights&quot;) as an abbreviation for `democritus` (you can read more about this [here](https://github.com/democritus-project/roadmap#what-is-d8s)).## Installation```pip install d8s-math```## UsageYou import the library like:```pythonfrom d8s_math import *```Once imported, you can use any of the functions listed below.## Functions  - ```python    def fibonacci_sequence(n: int) -&gt; List[int]:        &quot;&quot;&quot;Return the first n digits of the fibonacci sequence.&quot;&quot;&quot;    ```  - ```python    def fibonacci(n: int) -&gt; int:        &quot;&quot;&quot;Return the value of the Fibonacci sequence at index n.&quot;&quot;&quot;    ```  - ```python    def number_closest(a, b, target):        &quot;&quot;&quot;Return a or b, whichever is closest to the target.&quot;&quot;&quot;    ```  - ```python    def number_furthest(a, b, target):        &quot;&quot;&quot;Return a or b, whichever is furthest to the target.&quot;&quot;&quot;    ```  - ```python    def cartesian_product(a: Any, *args: Any, repeat: int = 1):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def sympy_symbol(symbol_name: str):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def equation_solve(equation: str, symbols: List[str]):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def expression_explore(expression: str, symbol: str, start: int, end: int, step: int):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def one_cold_encode(items: list, *, reverse: bool = False) -&gt; List[list]:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def one_hot_encode(items: list, *, reverse: bool = False) -&gt; List[list]:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def is_integer_tuple(possible_integer_tuple: Any) -&gt; bool:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def string_to_number(string: str) -&gt; Union[int, float]:        &quot;&quot;&quot;Convert a number as a string into either an integer or float.&quot;&quot;&quot;    ```  - ```python    def first_arg_as_decimal(func):        &quot;&quot;&quot;Convert the first argument to a number (either integer or float).&quot;&quot;&quot;    ```  - ```python    def arguments_as_decimals(func):        &quot;&quot;&quot;Convert all arguments to numbers (either integers or floats).&quot;&quot;&quot;    ```  - ```python    def decimal_to_gray_code(num: Union[str, int, float]) -&gt; integerTupleType:        &quot;&quot;&quot;Convert the given number to a gray code. This function was inspired by the code here: https://en.wikipedia.org/wiki/Gray_code#Converting_to_and_from_Gray_code.&quot;&quot;&quot;    ```  - ```python    def gray_code_to_decimal(num: integerTupleType) -&gt; int:        &quot;&quot;&quot;Convert the given number to a gray code. This function was inspired by the code here: https://en.wikipedia.org/wiki/Gray_code#Converting_to_and_from_Gray_code.&quot;&quot;&quot;    ```  - ```python    def decimal_to_hex(decimal_number):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def hex_to_decimal(hex):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def roman_numeral_to_decimal(roman_numeral: str) -&gt; int:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def decimal_to_roman_numeral(decimal_number) -&gt; str:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def integer_tuple_to_decimal(integer_tuple: integerTupleType) -&gt; int:        &quot;&quot;&quot;Return the decimal form of the given number (represented as an integer tuple).&quot;&quot;&quot;    ```  - ```python    def integer_to_decimal(num: Union[str, int, float], base: int) -&gt; int:        &quot;&quot;&quot;Convert the number of the given base to a decimal number.&quot;&quot;&quot;    ```  - ```python    def decimal_to_base(decimal_number: Union[str, int, float], base: int):        &quot;&quot;&quot;Convert the decimal_number to the given base.&quot;&quot;&quot;    ```  - ```python    def outer_division():        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def outer_product(a: int, b: int, a_start: int = 1, b_start: int = 1):        &quot;&quot;&quot;Return a two-dimensional array with the results of range(a_start, a+1) multiplied by range(b_start, b+1).&quot;&quot;&quot;    ```  - ```python    def multiplication_table(a: int, b: int, a_start: int = 1, b_start: int = 1):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def number_evenly_divides(a, b):        &quot;&quot;&quot;Return True if a evenly divides b. Otherwise, return False.&quot;&quot;&quot;    ```  - ```python    def number_evenly_divided_by(a, b):        &quot;&quot;&quot;Return True if a is evenly divided by b. Otherwise, return False.&quot;&quot;&quot;    ```  - ```python    def fraction_examples(n=10, *, fractions_as_strings: bool = True):        &quot;&quot;&quot;Create n fractions.&quot;&quot;&quot;    ```  - ```python    def iterable_differences(iterable):        &quot;&quot;&quot;Find all of the possible differences of all possible orders of the given iterable.&quot;&quot;&quot;    ```  - ```python    def combinations(iterable, length=None):        &quot;&quot;&quot;Return all possible combinations of the given length which can be created from the given iterable. If no length is given, we will find all combinations of all lengths for the given iterable.&quot;&quot;&quot;    ```  - ```python    def combinations_with_replacement(iterable, length=None):        &quot;&quot;&quot;Return all possible combinations of the given length which can be created from the given iterable. If no length is given, we will find all combinations of all lengths for the given iterable.&quot;&quot;&quot;    ```  - ```python    def prod(iterable):        &quot;&quot;&quot;Get the product of the iterable.&quot;&quot;&quot;    ```  - ```python    def permutations(iterable, length=None):        &quot;&quot;&quot;Return all possible permutations of the given iterable. If no length is given, we will find all permutations of all lengths for the given iterable&quot;&quot;&quot;    ```  - ```python    def fraction_simplify(fraction_string):        &quot;&quot;&quot;Simplify the fraction represented as a string.&quot;&quot;&quot;    ```  - ```python    def remainder(dividend, divisor):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def floor(number):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def ceiling(number):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def factorial(number):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def fraction_complex_to_mixed_fraction(fraction_string):        &quot;&quot;&quot;Simplify the fraction represented as a string.&quot;&quot;&quot;    ```  - ```python    def fraction_mixed_to_complex_fraction(fraction_string):        &quot;&quot;&quot;Simplify the fraction represented as a string.&quot;&quot;&quot;    ```  - ```python    def dot_product(item_a, item_b):        &quot;&quot;&quot;Find the dot product for the two items. See https://en.wikipedia.org/wiki/Dot_product for more details.&quot;&quot;&quot;    ```  - ```python    def percent(ratio):        &quot;&quot;&quot;Return the ratio as a percentage.&quot;&quot;&quot;    ```  - ```python    def gcd(number1, number2):        &quot;&quot;&quot;Return the greatest common divisor.&quot;&quot;&quot;    ```  - ```python    def ratio(number1, number2):        &quot;&quot;&quot;Return the ratio of the two numbers in the form 1:2. For example, if given 5 and 10, this function would return &quot;1:2&quot;. If given 2 and 20, this function would return &quot;1:10&quot;.&quot;&quot;&quot;    ```  - ```python    def transpose(matrix):        &quot;&quot;&quot;Transpose the given matrix. See https://en.wikipedia.org/wiki/Transpose.&quot;&quot;&quot;    ```  - ```python    def number_line(value, min_, max_, interval: int = 1):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def number_zero_pad(num: StrOrNumberType, length: StrOrNumberType) -&gt; str:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def is_number(item):        &quot;&quot;&quot;Return whether or not the item is a number.&quot;&quot;&quot;    ```  - ```python    def number_is_even(number: StrOrNumberType):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def number_is_odd(number: StrOrNumberType):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def number_is_approx(number, approximate_value, *, relative_tolerance=1e-6):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def enumerate_range(range_string, range_split_string: str = '-'):        &quot;&quot;&quot;Enumerate the range specified by the string. For example, `1-3` returns `[1, 2, 3]`.&quot;&quot;&quot;    ```  - ```python    def hex_endiness_swap(hex_string):        &quot;&quot;&quot;Credit to: https://stackoverflow.com/questions/27506474/how-to-byte-swap-a-32-bit-integer-in-python.&quot;&quot;&quot;    ```  - ```python    def number_to_words(number):        &quot;&quot;&quot;Convert a number to its English representation (e.g. 100 =&gt; &quot;One Hundred&quot;).&quot;&quot;&quot;    ```  - ```python    def number_to_scientific_notation(number):        &quot;&quot;&quot;Convert the given number to scientific notation.&quot;&quot;&quot;    ```  - ```python    def number_to_engineering_notation(number):        &quot;&quot;&quot;Convert the given number to engineering notation.&quot;&quot;&quot;    ```## Development👋 &amp;nbsp;If you want to get involved in this project, we have some short, helpful guides below:- [contribute to this project 🥇][contributing]- [test it 🧪][local-dev]- [lint it 🧹][local-dev]- [explore it 🔭][local-dev]If you have any questions or there is anything we did not cover, please raise an issue and we'll be happy to help.## CreditsThis package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and Floyd Hightower's [Python project template](https://github.com/fhightower-templates/python-project-template).[contributing]: https://github.com/democritus-project/.github/blob/main/CONTRIBUTING.md#contributing-a-pr-[local-dev]: https://github.com/democritus-project/.github/blob/main/CONTRIBUTING.md#local-development-</longdescription>
</pkgmetadata>