<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fastapi-cache![pypi](https://img.shields.io/pypi/v/fastapi-cache2.svg?style=flat)![license](https://img.shields.io/github/license/long2ice/fastapi-cache)![workflows](https://github.com/long2ice/fastapi-cache/workflows/pypi/badge.svg)![workflows](https://github.com/long2ice/fastapi-cache/workflows/ci/badge.svg)## Introduction`fastapi-cache` is a tool to cache fastapi response and function result, with backends support `redis`, `memcache`,and `dynamodb`.## Features- Support `redis`, `memcache`, `dynamodb`, and `in-memory` backends.- Easily integration with `fastapi`.- Support http cache like `ETag` and `Cache-Control`.## Requirements- `asyncio` environment.- `redis` if use `RedisBackend`.- `memcache` if use `MemcacheBackend`.- `aiobotocore` if use `DynamoBackend`.## Install```shell&gt; pip install fastapi-cache2```or```shell&gt; pip install &quot;fastapi-cache2[redis]&quot;```or```shell&gt; pip install &quot;fastapi-cache2[memcache]&quot;```or```shell&gt; pip install &quot;fastapi-cache2[dynamodb]&quot;```## Usage### Quick Start```pythonfrom fastapi import FastAPIfrom starlette.requests import Requestfrom starlette.responses import Responsefrom fastapi_cache import FastAPICachefrom fastapi_cache.backends.redis import RedisBackendfrom fastapi_cache.decorator import cachefrom redis import asyncio as aioredisapp = FastAPI()@cache()async def get_cache():    return 1@app.get(&quot;/&quot;)@cache(expire=60)async def index():    return dict(hello=&quot;world&quot;)@app.on_event(&quot;startup&quot;)async def startup():    redis = aioredis.from_url(&quot;redis://localhost&quot;, encoding=&quot;utf8&quot;, decode_responses=True)    FastAPICache.init(RedisBackend(redis), prefix=&quot;fastapi-cache&quot;)```### InitializationFirstly you must call `FastAPICache.init` on startup event of `fastapi`, there are some global config you can pass in.### Use `cache` decoratorIf you want cache `fastapi` response transparently, you can use `cache` as decorator between router decorator and viewfunction and must pass `request` as param of view function.Parameter | type, description------------ | -------------expire | int, states a caching time in secondsnamespace | str, namespace to use to store certain cache itemscoder | which coder to use, e.g. JsonCoderkey_builder | which key builder to use, default to builtinYou can also use `cache` as decorator like other cache tools to cache common function result.### Custom coderBy default use `JsonCoder`, you can write custom coder to encode and decode cache result, just needinherit `fastapi_cache.coder.Coder`.```python@app.get(&quot;/&quot;)@cache(expire=60, coder=JsonCoder)async def index():    return dict(hello=&quot;world&quot;)```### Custom key builderBy default use builtin key builder, if you need, you can override this and pass in `cache` or `FastAPICache.init` totake effect globally.```pythondef my_key_builder(        func,        namespace: Optional[str] = &quot;&quot;,        request: Request = None,        response: Response = None,        *args,        **kwargs,):    prefix = FastAPICache.get_prefix()    cache_key = f&quot;{prefix}:{namespace}:{func.__module__}:{func.__name__}:{args}:{kwargs}&quot;    return cache_key@app.get(&quot;/&quot;)@cache(expire=60, coder=JsonCoder, key_builder=my_key_builder)async def index():    return dict(hello=&quot;world&quot;)```### InMemoryBackend`InMemoryBackend` store cache data in memory and use lazy delete, which mean if you don't access it after cached, itwill not delete automatically.## Tests and coverage```shellcoverage run -m pytestcoverage htmlxdg-open htmlcov/index.html```## LicenseThis project is licensed under the [Apache-2.0](https://github.com/long2ice/fastapi-cache/blob/master/LICENSE) License.</longdescription>
</pkgmetadata>