<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PySecVaultHashicorp Vault implementation in python software## Pre-requisitesTo use this software, you need to have a running instance of Hashicorp Vault.You can find the installation instructions [here](https://learn.hashicorp.com/vault/getting-started/install).Alternatively, you can use the docker image provided by Hashicorp [here](https://hub.docker.com/_/vault/).```bashdocker run --cap-add=IPC_LOCK \  -e 'VAULT_LOCAL_CONFIG={&quot;storage&quot;: {&quot;file&quot;: {&quot;path&quot;: &quot;/vault/file&quot;}}, &quot;listener&quot;: [{&quot;tcp&quot;: { &quot;address&quot;: &quot;0.0.0.0:8200&quot;, &quot;tls_disable&quot;: true}}], &quot;default_lease_ttl&quot;: &quot;168h&quot;, &quot;max_lease_ttl&quot;: &quot;720h&quot;, &quot;ui&quot;: true}' \  -p 8200:8200 vault server```After this command, you can access the vault UI at http://localhost:8200and follow the instructions to initialize the vault.## Installation```bashpip install py-sec-vault```## Usage```pythonfrom vault import Vaultvault = Vault(    host=&quot;http://localhost:8200/&quot;,    auth_method=&quot;approle&quot;,    engine_name=&quot;my_engine_name&quot;,    path=&quot;my_vault_path&quot;,    token=&quot;my_vault_token&quot;,)# Prints the keys in the vault, validating if the vault is initialized;print(vault.keys) # Retrieving a secret from the vault, or None if not foundmy_optional_secret = vault.get(&quot;MY_SECRET&quot;)# Retrieving a secret from the vault (and raising an exception if not found)my_secret = vault[&quot;MY_SECRET&quot;]```## Usage with environment variablesTo make the vault work with environment variables, you can use the following code:First, you need to set the environment variables for the vault:```export VAULT_HOST=http://localhost:8200/export VAULT_AUTH_METHOD=approle|tokenexport VAULT_ENGINE_NAME=&lt;my_engine_name&gt;export VAULT_ROLE_ID=&lt;my_vault_id&gt;export VAULT_SECRET_ID=&lt;my_vauld_secret&gt;export VAULT_PATH=&lt;my_vault_path&gt;```Second, you can use the following code to retrieve the secrets from the vault or environment variables:```pythonfrom vault import from_env_or_vault, from_vault# NB: These functions will instantiate a Vault object and retrieve the secret from the vault# resulting in a performance penalty if used in a loop. Alternatively, you can instantiate a Vault object# once and use the get method to retrieve the secrets (next example).# Retrieving a secret from the vault or environment variable or using a default valuefrom_env_or_vault(&quot;DB_PASSWORD&quot;, default=&quot;admin&quot;)# Retrieving a secret from the vault (and raising an exception if not found)from_vault(&quot;API_TOKEN&quot;)```To retrieve all secrets from the vault, you can use the following code:```pythonfrom vault import Vault, from_env_or_vault# This will connect to the vault based on the environment variables;vault = Vault()# Prints the keys in the vault, validating if the vault is initialized;print(vault.keys) # Retrieving a secret from the vault, or None if not foundmy_secret = vault.get(&quot;MY_SECRET&quot;)# Passing an instance of Vault to the from_env_or_vault function,# so it doesn't need to connect to the vault again;my_variable = from_env_or_vault(&quot;MY_VARIABLE&quot;, default=&quot;admin&quot;, vault=vault)```## Next steps- [ ] On init load multiple paths/engines- [ ] Add support for other auth methods- [ ] Phase out the use of hvac and use requests instead- [X] Make sure the vault is not initialized every time, but only when needed- [X] Implementation of from_vault_or_env</longdescription>
</pkgmetadata>