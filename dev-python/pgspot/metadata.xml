<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## pgspot&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/timescale/pgspot/actions&quot;&gt;&lt;img alt=&quot;Actions Status&quot; src=&quot;https://github.com/timescale/pgspot/workflows/Test/badge.svg&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/timescale/pgspot/blob/main/LICENSE&quot;&gt;&lt;img alt=&quot;License: PostgreSQL&quot; src=&quot;https://img.shields.io/github/license/timescale/pgspot&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/pgspot/&quot;&gt;&lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/pgspot&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://pepy.tech/project/pgspot&quot;&gt;&lt;img alt=&quot;Downloads&quot; src=&quot;https://pepy.tech/badge/pgspot&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;&lt;/p&gt;Spot vulnerabilities in PostgreSQL extension scripts.pgspot checks extension scripts for following PostgreSQL security bestpractices. In addition to checking extension scripts it can also beused to check security definer functions or any other PostgreSQL SQL code.pgspot checks for the following vulnerabilities:- search_path-based attacks- unsafe object creationConsult the [reference] for detailed documentation of the vulnerabilities whichpgspot detects, and their potential mitigations.[reference]: https://github.com/timescale/pgspot/blob/main/REFERENCE.md## Useful links- [PostgreSQL security recommendations for extensions](https://www.postgresql.org/docs/current/extend-extensions.html#EXTEND-EXTENSIONS-SECURITY)- [PostgreSQL security recommendations for SECURITY DEFINER functions](https://www.postgresql.org/docs/current/sql-createfunction.html#SQL-CREATEFUNCTION-SECURITY)## Installationpip install pgspot## Requirements- python &gt;= 3.10- [pglast == 5.0](https://github.com/lelit/pglast)- [libpg_query](https://github.com/pganalyze/libpg_query) (through pglast)To install the runtime requirements, use `pip -r requirements.txt`.### Usage```&gt; pgspot -husage: pgspot [-h] [-a] [--proc-without-search-path PROC] [--summary-only] [--plpgsql | --no-plpgsql] [--explain EXPLAIN] [--ignore IGNORE] [--sql-accepting SQL_FN] [FILE ...]Spot vulnerabilities in PostgreSQL SQL scriptspositional arguments:  FILE                  file to check for vulnerabilitiesoptions:  -h, --help            show this help message and exit  -a, --append          append files before checking  --proc-without-search-path PROC                        whitelist functions without explicit search_path  --summary-only        only print number of errors, warnings and unknowns  --plpgsql, --no-plpgsql                        Analyze PLpgSQL code (default: True)  --explain EXPLAIN     Describe an error/warning code  --ignore IGNORE       Ignore error or warning code  --sql-accepting SQL_FN                        Specify one or more sql-accepting functions``````&gt; pgspot --ignore PS017 &lt;&lt;&lt;&quot;CREATE TABLE IF NOT EXISTS foo();&quot;PS012: Unsafe table creation: fooErrors: 1 Warnings: 0 Unknown: 0```#### SQL-accepting functionsIt is a common pattern that SQL-accepting functions exist, which take astring-like argument which will be executed as SQL. This can &quot;hide&quot; some SQLfrom pgspot, as the string-like argument masks the SQL. With the`--sql-accepting` argument, pgspot can be told about such functions.Assuming a function named `execute_sql` which takes a SQL string as its firstargument, and executes it. With `pgspot --sql-accepting=execute_sql` we cantell pgspot `execute_sql` may accept SQL. pgspot will attempt to unpack andevaluate all arguments to that function as SQL.</longdescription>
</pkgmetadata>