<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PlagiatLibrary untuk memeriksa tingkat Plagiarisme atau *Similarity* menggunakan Bahasa Python. Secara default library ini akan menggunakan Algoritma Rabin Karp sebagai perhitungan utamanya.Pustaka ini dibuat hanya sebagai penunjang untuk membantu saya menguji-coba dan memahami semua konsep algoritma untuk menghitung similaritas.### Instalasi```pip install plagiat```### Cara Penggunaan#### Menggunakan File .txt```Pythonfrom plagiat.deteksi import Deteksifile_1 = '/content/kalimat-1.txt'file_2 = '/content/kalimat-2.txt'cek = Deteksi(file_1, file_2, url=True).hitung()print('Persentase plagiarisme = {0}%'.format(cek))```#### Menggunakan Text```Pythonfrom plagiat.deteksi import Deteksistring_1 = &quot;Aku sedang belajar kecerdasan buatan&quot;string_2 = &quot;Mahasiswa yang cerdas selalu siap menerima tantangan&quot;cek = Deteksi(string_1, string_2, text=True).hitung()print('Persentase plagiarisme = {0}%'.format(cek))```#### Menggunakan URL```Pythonfrom plagiat.deteksi import Deteksiteks_1 = 'https://raw.githubusercontent.com/novay/amikom/main/datasets/text/kalimat-1.txt'teks_2 = 'https://raw.githubusercontent.com/novay/amikom/main/datasets/text/kalimat-1.txt'cek = Deteksi(teks_1, teks_2, url=True).hitung()print('Persentase plagiarisme = {0}%'.format(cek))```#### Penggunaan Parameter```Pythonfrom plagiat.deteksi import DeteksiDeteksi(teks_1, teks_2, text=True, url=True, bahasa='english', method='Cosine').hitung()```**Penjelasan**&lt;br/&gt;- `text=True` digunakan untuk mendeteksi string&lt;br/&gt; default False- `url=True` digunakan untuk mendeteksi dokumen melalui URL&lt;br/&gt; default False- `bahasa='english'` digunakan untuk menentukan bahasa yang digunakan dalam proses stopwords&lt;br/&gt; default 'indonesian'- `method='Cosine'` digunakan untuk mengubah metode yang ingin digunakan&lt;br/&gt;default 'Rabin Karp', pilihan 'Rabin Karp', 'Cosine', 'Jaccard'### Referensi**Rabin Karp**:- **Ranti Eka Putri, Andysah Putera Utama Siahaan**&lt;br/&gt;https://www.researchgate.net/publication/319272358_Examination_of_Document_Similarity_Using_Rabin-Karp_Algorithm- **Andysah Putera Utama Siahaan, Mesran, Robbi Rahim, Dodi Siregar**&lt;br/&gt;https://www.ijstr.org/final-print/july2017/K-gram-As-A-Determinant-Of-Plagiarism-Level-In-Rabin-karp-Algorithm.pdf**Jaccard Similarity**:- https://en.wikipedia.org/wiki/Jaccard_index**Cosine Similarity**:- **Jiapeng Wang, Yihong Dong**&lt;br/&gt;https://www.researchgate.net/publication/344010599_Measurement_of_Text_Similarity_A_Survey### DisclaimerLibrary ini di buat hanya untuk keperluan pembuatan tugas Data Science.Output mungkin saja bisa berbeda dengan pustaka lain khususnya perhitungan Cosine, karena dalam implementasinya ada variasi dalam cara perhitungan vektor TF-IDF, tokenisasi kata, dan faktor-faktor lainnya. Agar hasil lebih maksimal, lebih baik handle dulu masalah stop word, n-gram, dan normalisasi secara mandiri karena perhitungan yang dilakukan dalam pustaka ini hanya melakukan normalisasi sederhana sebelum dieksekusi.Salam hormat,&lt;br/&gt;Novianto Rahmadi (22.55.2293)#### Credit- Paper Ranti Eka Putri, Andysah Putera Utama Siahaan, Mesran, Robbi Rahim &amp; Dodi Siregar- NLTK - corpus, tokenize, stem- Numpy- TheDhejavu - Rabin Karp Module &lt;br/&gt;https://gist.github.com/TheDhejavu/39d6cfec2b3f75a1ac111042cb8aebdb#file-rabin_karp-py- Jiapeng Wang, Yihong Dong (Cosine Similarity)</longdescription>
</pkgmetadata>