<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/algoo/hapic.svg?branch=master)](https://travis-ci.org/algoo/hapic)[![Coverage Status](https://coveralls.io/repos/github/algoo/hapic/badge.svg?branch=master)](https://coveralls.io/github/algoo/hapic?branch=master)# hapic in a nutshellhapic is a framework-agnostic library for coding professionnal REST APIs.# Philosophyhapic as been developed by algoo in the context of a large service oriented project. The lack of a tool allowing real auto-documentation of Rest API has decided us to develop hapic.target usage is not for &quot;quick and dirty&quot; stuff but for professionnal, maintainable, long-term targeted projects.The separation of concerns between REST APIs layer and business stuff layer is in the DNA of hapic.hapic is *just* the HTTP layer glue code over your business code.# Direct benefits of using hapicWhen you decide to base your development on hapic, you'll get direct benefits:## Ready-to-use- supports aiohttp, flask, pyramid and bottle - ready-to-use with your existing libraries- effortless mapping of exceptions to HTTP errors- serialisation based on marshmallow schemas or serpyco dataclasses## Full API documentation ready- your code *IS* the documentation- swagger generated documentation- embed the documentation in 1 line of code- supports python 3.5, 3.6 and 3.7 ## Professionnal and maintanable source code- separation of concerns between business logic and HTTP stuff- very fast when used in conjunction with both aiohttp and serpyco- extensible framework for supporting other web framework and serialisation libraries# Licencehapic is licenced under the MIT licence. You can use it in your projects, closed or open sourced.## status, contributionshapic source code is ready for production. Some refactoring are identified and required for maintainability, but public APIs are stable so you can rely on hapic for your developments.hapic is under active development, based on different professional projects. we will answer your questions and accept merge requests if you find bugs or want to include features.hapic is automatically tested on python 3.5, 3.6 and 3.7## TODO referencesTODOs in the code can include some `#xxx` - these are github issues references.## InstallationFor better performances with yaml module, you can install following (debian instruction):    sudo apt-get install libyaml-dev`libyaml-dev` package can be removed after hapic install.## From source code``` bashvirtualenv -p /usr/bin/python3 venvsource venv/bin/activatepython setup.py develop```To work with Marshmallow schemas, install necessary dependencies:    pip install -e &quot;.[marshmallow]&quot;To work with Serpyco dataclasses, install necessary dependencies:    pip install -e &quot;.[serpyco]&quot;To have full environment (for developpers):    pip install -e &quot;.[dev&quot;]## From pypiTo work with Marshmallow schemas, install necessary dependencies:    pip install hapic[marshmallow]To work with Serpyco dataclasses, install necessary dependencies:    pip install hapic[serpyco] ## Give it a try### short Flask example``` pythonfrom datetime import datetimeimport flaskimport marshmallowimport hapicfrom hapic.ext.flask import FlaskContextimport jsonhapic = hapic.Hapic()app = flask.Flask(__name__)class UriPathSchema(marshmallow.Schema):  # schema describing the URI and allowed values    name = marshmallow.fields.String(required=True)    age = marshmallow.fields.Integer(required=False)class HelloResponseSchema(marshmallow.Schema): # schema of the API response    name = marshmallow.fields.String(required=True)    now = marshmallow.fields.DateTime(required=False)    greetings = marshmallow.fields.String(required=False)@app.route('/hello/&lt;name&gt;')  # flask route. must always be before hapic decorators@hapic.with_api_doc()  # the first hapic decorator. Register the method for auto-documentation@hapic.input_path(UriPathSchema())  # validate the URI structure@hapic.output_body(HelloResponseSchema())  # define output structuredef hello(name='&lt;No name&gt;', hapic_data=None):    return {        'name': name,        'now': datetime.now(),        'dummy': { 'some': 'dummy' }  # will be ignored    }class UriPathSchemaWithAge(marshmallow.Schema):  # schema describing the URI and allowed values    name = marshmallow.fields.String(required=True)    age = marshmallow.fields.Integer(required=False)@app.route('/hello/&lt;name&gt;/age/&lt;age&gt;')@hapic.with_api_doc()@hapic.input_path(UriPathSchemaWithAge())@hapic.output_body(HelloResponseSchema())def hello2(name='&lt;No name&gt;', age=42, hapic_data=None):    return {        'name': name,        'age': age,        'greetings': 'Hello {name}, it looks like you are {age}'.format(            name=name,            age=age        ),        'now': datetime.now(),        'dummy': { 'some': 'dummy' }  # will be ignored    }hapic.set_context(FlaskContext(app))print(json.dumps(hapic.generate_doc(title='API Doc', description='doc desc.')))  # Generate the documentationapp.run('127.0.0.1', 8080, debug=True)```How to use it:Nominal cases:``` bash$ curl &quot;http://127.0.0.1:8080/hello/michel&quot;# {&quot;now&quot;: &quot;2017-12-18T12:37:10.751623+00:00&quot;, &quot;name&quot;: &quot;michel&quot;}`````` bash$ curl &quot;http://127.0.0.1:8080/hello/michel/age/17&quot;# {&quot;name&quot;: &quot;damien&quot;, &quot;greetings&quot;: &quot;Hello damien, it looks like you are 17&quot;, &quot;now&quot;: &quot;2017-12-18T12:41:58.229679+00:00&quot;}```Error case (returns a 400):``` bash$ curl &quot;http://127.0.0.1:8080/hello/michel/age/mistaken&quot;# {&quot;details&quot;: {&quot;age&quot;: [&quot;Not a valid integer.&quot;]}, &quot;message&quot;: &quot;Validation error of input data&quot;}```### A complete user APIIn the `example/usermanagement` directory you can find a complete example of an API allowing to manage users.Features are: - get list of all users- get detail of a given user- create a user- delete a userIn order to test it :Install the required dependencies:``` bashpip install bottle flask pyramid````Run the instance you wan to test (one of the three following lines):``` bashpython example/usermanagement/serve_bottle.pypython example/usermanagement/serve_flask.pypython example/usermanagement/serve_pyramid.py```Features shown :- auto-generation of the documentation- managing parameters in the uri path- managing input schemas- managing output schema- management of error cases (404, 500, etc)- nice exception handling- automatic dict/object serialization</longdescription>
</pkgmetadata>