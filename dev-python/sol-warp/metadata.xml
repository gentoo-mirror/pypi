<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;https://github.com/NethermindEth/warp/blob/develop/resources/WARP.svg&quot; width=&quot;900&quot; height=&quot;512&quot; /&gt;# WarpWarp brings Solidity to StarkNet, making it possible to transpile Ethereum smart contracts to Cairo, and use them on StarkNet.## Table of Contents :clipboard:- [NOTE](#note)- [Warp](#warp)  - [Table of Contents :clipboard:](#table-of-contents-clipboard)  - [Installation :gear:](#installation-gear)  - [Setting up autocompletion](#setting-up-autocompletion)  - [Usage :computer:](#usage-computer)  - [Solidity Constructs Currently Not Supported](#solidity-constructs-currently-not-supported)  - [Want to contribute? :thumbsup:](#want-to-contribute-thumbsup)  - [License](#license)## Installation :gear:Prerequisites:Make sure your Solidity compiler version is &gt;= 0.8.0Linux:```sudo apt updatesudo apt install software-properties-commonsudo add-apt-repository ppa:deadsnakes/ppasudo apt updatesudo apt install -y python3.7sudo apt install -y python3.7-devsudo apt install -y libgmp3-devsudo apt install -y libboost-all-devsudo apt-get install -y python3.7-venvpython3.7 -m venv ~/warpsource ~/warp/bin/activatepip install z3-solver```MacOs:```brew install python@3.7brew install gmpbrew install boostbrew install z3python3.7 -m venv ~/warpsource ~/warp/bin/activate```Install Warp:```pip install sol-warp```## Setting up autocompletionWarp comes with support for command line completion in bash, zsh, and fishfor bash:``` eval &quot;$(_WARP_COMPLETE=bash_source warp)&quot; &gt;&gt; ~/.bashrc```for zsh:``` eval &quot;$(_WARP_COMPLETE=zsh_source warp)&quot; &gt;&gt; ~/.zshrc```for fish:```_WARP_COMPLETE=fish_source warp &gt; ~/.config/fish/completions/warp.fish```## Usage :computer:You can transpile your Solidity contracts with:```warp transpile FILE_PATH CONTRACT_NAME```To see the cairo output of the transpilation process:```warp transpile FILE_PATH CONTRACT_NAME --cairo-output````CONTRACT_NAME` is the name of the primary contract (non-interface, non-library, non-abstract contract) that you wish to transpileTo deploy the transpiled program to Starknet use:```warp deploy CONTRACT.json```To invoke a public/external method use:```warp invoke --program CONTRACT.json --address ADDRESS --function FUNCTION_NAME --inputs 'INPUTS'```Here's an example that shows you the format of the inputs for `inputs`:Let's say we want to call the following Solidity function in a contract that we've transpiled &amp; deployed on StarkNet:```soliditystruct Person {    uint age;    uint height;}function validate(address _ownerCheck, Person calldata _person, uint _ownerCellNumberCheck)  public view returns (bool) {    return (owner == _ownerCheck &amp;&amp; ownerAge == _person.age        &amp;&amp; ownerCellNumber == _ownerCellNumberCheck);}```The command to call this function would be:```bashwarp invoke --program CONTRACT.json --address ADDRESS --function validate \        --inputs '[0x07964d2123425737cd3663bec47c68db37dc61d83fee74fc192d50a59fb7ab56,        (26, 200), 7432533831]'```The `--inputs` flag, if not empty, should always be an 'array'. As you can see, we havepassed the struct fields as a tuple, their order should be the same as theirdeclaration order (i.e `age` first, `person` second). If the first argument to the`validate` function was an array of uint's, then we'd pass it in as you'd expect:```bash--inputs = '[[42,1722,7], (26, 200), 7432533831]'```If you're passing in the `bytes` Solidity type as an argument, use the python syntax, for example:```bash--inputs = '[[10,20], b&quot;\x01\x02&quot;]'```You can check the status of your transaction with:```warp status TX_HASH```## Testing with WarpYou'll find an example of how to write tests in your solidity contract, and then call `warp test` to run them in `src/warp/test_tool/example`.For the tests to work, you'll need to run `warp test` from a parent directory where your solidity contracts are in a directory named `contracts`,as per the example mentioned above.## Solidity Constructs Currently Not Supported|         Support Status          |      Symbol       || :-----------------------------: | :---------------: || Will likely never be supported  |        :x:        ||     Support will land soon      | :hammer_and_pick: || Will be supported in the future |   :exclamation:   ||        Currently Unknown        |    :question:     |&lt;center&gt;|     Solidity      | Support Status || :---------------: | :------------: ||     try/catch     |   :question:   ||     msg.value     |      :x:       ||     tx.origin     | :exclamation:  ||    tx.gasprice    |   :question:   ||   block.basefee   |      :x:       ||   block.chainid   | :exclamation:  ||  block.coinbase   |   :question:   || block.difficulty  |      :x:       ||  block.gaslimit   |   :question:   ||     gasleft()     |   :question:   || functions as data |      :x:       ||    precompiles    | :exclamation:  ||  create/create2   | :exclamation:  ||   Selfdestruct    |      :x:       ||     BlockHash     | :exclamation:  ||     Yul      | Support Status || :----------: | :------------: || linkersymbol |   :question:   ||   codeCopy   |   :question:   ||   codeSize   |   :question:   |Run `solc --optimize --ir-optimized &lt;file&gt;` to see if your Solidity results inany of these YUL constructs.&lt;/center&gt;## Want to contribute? :thumbsup:Your contributions are always welcome, see [contribution guidelines](CONTRIBUTING.md).## License[Apache License](LICENSE) Version 2.0, January 2004.</longdescription>
</pkgmetadata>