<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># in2xl## About this projectIn the Python programming language, there exist various proficient toolsto write data to XLSX format. Two of the most commonly used tools are[XlsxWriter](https://pypi.org/project/XlsxWriter/) and[openpyxl](https://pypi.org/project/openpyxl). With these tools, one canconveniently create an Excel file or write data to an existing Excelfile. However, there are some limitations to be aware of when usingthese tools. Specifically,[XlsxWriter](https://pypi.org/project/XlsxWriter/) is capable ofcreating files but not modifying them, whereas[openpyxl](https://pypi.org/project/openpyxl) can modify files but doesnot retain all formatting.In the data science domain, such limitations can pose challenges,especially if employees have significantly edited Excel files and onlyrequire updated data. To address this issue, in2xl offers a simplisticand efficient solution. This tool enables users to transfer data anddata frames directly into an Excel file without affecting the existingformatting. Hence, in2xl can be a useful tool for data scientistsseeking to update data in pre-existing Excel files.## Installin2xl is available on pypi.org. Simply run `pip install in2xl` toinstall it.Requirements: \&gt;= Python 3.7Project dependencies installed by pip:&gt;     lxml&gt;     pandas&gt;     openpyxl&gt;     ruamel.std.zipfile&gt;     XlsxWriter## UsageThe names of the functions are intentionally adapted to[openpyxl](https://pypi.org/project/openpyxl) to make them easier to useand to adapt existing scripts.### Open a WorkbookIt is not possible to create new workbooks using in2xl. The intendedapproach is to open an existing Excel file (xlsx), insert data, and saveit. The opened file serves as a template, where a copy is generated andmodified to suit the requirements.*Example 1:*``` pythonfrom in2xl import Workbookwb = Workbook().load_workbook(path)```But this method is also possible:*Example 2:*``` pythonimport in2xl as ixwb = ix.load_workbook(path)```### Open a Worksheet``` pythonws = wb[sheetname]```Additionally you can check the names of all worksheets``` pythonprint(wb.sheetnames)```### Insert dataDifferent types of data can be inserted directly via `insert()```` pythonws.insert(df, 2, 3, header=False)```More detailed description of this function:*insert(data, row=1, column=1, axis=0, header=True, index=False)*&gt; Parameters:&gt;&gt;&gt;     data: Union(str, int, float, decimal, pd.DataFrame)&gt;&gt;         Besides strings and real numbers, DataFrames can also be&gt;         inserted directly.&gt;&gt;     row: int&gt;&gt;         The row in which the data is to be inserted. The default is&gt;         the first row.&gt;&gt;     column: int&gt;&gt;         The column in which the data is to be inserted. The default is&gt;         the first column.&gt;&gt;     axis: int&gt;&gt;         Specify whether the data is inserted in the original&gt;         orientation or a transposed direction. Default is 0&gt;         0 : If the data is in a vertical orientation, it will be inserted&gt;         vertically.&gt;         1 : If the data is in a vertical orientation, it will be inserted&gt;         horizontally.&gt;&gt;     header: bool&gt;&gt;         True to include headers in the data, False otherwise. Default&gt;         is True.&gt;&gt;     index: bool&gt;&gt;         True to include index in the data, False otherwise. Defaults&gt;         to False.&gt;&gt;     ignore_nan:  bool&gt;&gt;         True to include nan-values in the data, False otherwise. Defaults&gt;         to True.### Save &amp; Close``` pythonws.save(path)ws.close()```The file can be saved multiple times (under different names). As long asthe file has not been closed, the temporary Excel file exists. The closecommand deletes this temporary file.### Additional functionsTemplate files are sometimes created for multiple tasks/situations. Notall worksheets are always necessary for this. To be able to use thesefiles anyway, it is possible to hide these worksheets.``` pythonprint(wb.wb_state) # Returns the visibility status of all worksheetsprint(ws.state) # Returns the visibility status of the current worksheetws.state = 0 # Sets the visibility status to 'visible'.ws.state = 1 # Sets the visibility status to 'hidden'. User can make this worksheet visible again out of Excel via &quot;Unhide&quot;.ws.state = 2 # Sets the visibility status to 'veryHidden'. Worksheet is not visible under &quot;Unhide&quot; in Excel.```### Planned further functions-   Insert Data into tables / update range of the tables-   Refresh Data of a pivot table-   delete worksheets</longdescription>
</pkgmetadata>