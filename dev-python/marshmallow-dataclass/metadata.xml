<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># marshmallow-dataclass[![Test Workflow Status (master branch)](https://img.shields.io/github/actions/workflow/status/lovasoa/marshmallow_dataclass/python-package.yml?branch=master&amp;label=tests)](https://github.com/lovasoa/marshmallow_dataclass/actions/workflows/python-package.yml)[![PyPI version](https://badge.fury.io/py/marshmallow-dataclass.svg)](https://badge.fury.io/py/marshmallow-dataclass)[![marshmallow 3 compatible](https://badgen.net/badge/marshmallow/3)](https://marshmallow.readthedocs.io/en/latest/upgrading.html)[![download stats](https://img.shields.io/pypi/dm/marshmallow-dataclass.svg)](https://pypistats.org/packages/marshmallow-dataclass)Automatic generation of [marshmallow](https://marshmallow.readthedocs.io/) schemas from dataclasses.```pythonfrom dataclasses import dataclass, fieldfrom typing import List, Optionalimport marshmallow_dataclassimport marshmallow.validate@dataclassclass Building:    # field metadata is used to instantiate the marshmallow field    height: float = field(metadata={&quot;validate&quot;: marshmallow.validate.Range(min=0)})    name: str = field(default=&quot;anonymous&quot;)@dataclassclass City:    name: Optional[str]    buildings: List[Building] = field(default_factory=list)city_schema = marshmallow_dataclass.class_schema(City)()city = city_schema.load(    {&quot;name&quot;: &quot;Paris&quot;, &quot;buildings&quot;: [{&quot;name&quot;: &quot;Eiffel Tower&quot;, &quot;height&quot;: 324}]})# =&gt; City(name='Paris', buildings=[Building(height=324.0, name='Eiffel Tower')])city_dict = city_schema.dump(city)# =&gt; {'name': 'Paris', 'buildings': [{'name': 'Eiffel Tower', 'height': 324.0}]}```## WhyUsing schemas in Python often means having both a class to represent your data and a class to represent its schema, which results in duplicated code that could fall out of sync.As of Python 3.6, types can be defined for class members, which allows libraries to generate schemas automatically.Therefore, you can document your APIs in a way that allows you to statically check that the code matches the documentation.## InstallationThis package [is hosted on PyPI](https://pypi.org/project/marshmallow-dataclass/).```shellpip3 install marshmallow-dataclass```You may optionally install the following extras:- `enum` : enum support for marshmallow versions &lt;3.18 [marshmallow-enum](https://github.com/justanr/marshmallow_enum).- `union` : for translating python [`Union` types](https://docs.python.org/3/library/typing.html#typing.Union) to union fields.```shellpip3 install &quot;marshmallow-dataclass[enum,union]&quot;```### marshmallow 2 support`marshmallow-dataclass` no longer supports marshmallow 2.Install `marshmallow_dataclass&lt;6.0` if you need marshmallow 2 compatibility.## UsageUse the [`class_schema`](https://lovasoa.github.io/marshmallow_dataclass/html/marshmallow_dataclass.html#marshmallow_dataclass.class_schema)function to generate a marshmallow [Schema](https://marshmallow.readthedocs.io/en/latest/api_reference.html#marshmallow.Schema)class from a [`dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass).```pythonfrom dataclasses import dataclassfrom datetime import dateimport marshmallow_dataclass@dataclassclass Person:    name: str    birth: datePersonSchema = marshmallow_dataclass.class_schema(Person)```The type of your fields must be either basic [types supported by marshmallow](https://marshmallow.readthedocs.io/en/stable/api_reference.html#marshmallow.Schema.TYPE_MAPPING)(such as `float`, `str`, `bytes`, `datetime`, ...), `Union`, or other dataclasses.### Union (de)serialization coercion Typically the Union type; `Union[X, Y]` means—from a set theory perspective—either `X` or `Y`, i.e., an unordered set, howevever the order of the sub-types defines the precedence when attempting to ether deserialize or serialize the value per [here](https://github.com/lovasoa/marshmallow_dataclass/blob/master/marshmallow_dataclass/union_field.py). For example, ```pythonfrom typing import Unionfrom dataclasses import dataclass@dataclassclass Person:    name: str    age: Union[int, float]PersonSchema = marshmallow_dataclass.class_schema(Person)PersonSchema().load({&quot;name&quot;: &quot;jane&quot;, &quot;age&quot;: 50.0})# =&gt; Person(name=&quot;jane&quot;, age=50)```will first (sucessfully) try to coerce `50.0` to an `int`. If coercion is not desired the `Any` type can be used with the caveat that values will not be type checked without additional [validation](https://marshmallow.readthedocs.io/en/stable/marshmallow.validate.html).### Customizing generated fieldsTo pass arguments to the generated marshmallow fields (e.g., `validate`, `load_only`, `dump_only`, etc.),pass them to the `metadata` argument of the[`field`](https://docs.python.org/3/library/dataclasses.html#dataclasses.field) function.Note that starting with version 4, marshmallow will disallow passing arbitrary arguments, so anyadditional metadata should itself be put in its own `metadata` dict:```pythonfrom dataclasses import dataclass, fieldimport marshmallow_dataclassimport marshmallow.validate@dataclassclass Person:    name: str = field(        metadata=dict(            load_only=True, metadata=dict(description=&quot;The person's first name&quot;)        )    )    height: float = field(metadata=dict(validate=marshmallow.validate.Range(min=0)))PersonSchema = marshmallow_dataclass.class_schema(Person)```### `@dataclass` shortcut`marshmallow_dataclass` provides a `@dataclass` decorator that behaves like the standard library's `@dataclasses.dataclass` and adds a `Schema` attribute with the generated marshmallow[Schema](https://marshmallow.readthedocs.io/en/2.x-line/api_reference.html#marshmallow.Schema).```python# Use marshmallow_dataclass's @dataclass shortcutfrom marshmallow_dataclass import dataclass@dataclassclass Point:    x: float    y: floatPoint.Schema().dump(Point(4, 2))# =&gt; {'x': 4, 'y': 2}```Note: Since the `.Schema` property is added dynamically, it can confuse type checkers.To avoid that, you can declare `Schema` as a [`ClassVar`](https://docs.python.org/3/library/typing.html#typing.ClassVar).```pythonfrom typing import ClassVar, Typefrom marshmallow_dataclass import dataclassfrom marshmallow import Schema@dataclassclass Point:    x: float    y: float    Schema: ClassVar[Type[Schema]] = Schema```### Customizing the base SchemaIt is also possible to derive all schemas from your own base Schema class(see [marshmallow's documentation about extending `Schema`](https://marshmallow.readthedocs.io/en/stable/extending.html)).This allows you to implement custom (de)serializationbehavior, for instance specifying a custom mapping between your classes and marshmallow fields,or renaming fields on serialization.#### Custom mapping between classes and fields```pythonclass BaseSchema(marshmallow.Schema):    TYPE_MAPPING = {CustomType: CustomField, List: CustomListField}class Sample:    my_custom: CustomType    my_custom_list: List[int]SampleSchema = marshmallow_dataclass.class_schema(Sample, base_schema=BaseSchema)# SampleSchema now serializes my_custom using the CustomField marshmallow field# and serializes my_custom_list using the CustomListField marshmallow field```#### Renaming fields on serialization```pythonimport marshmallowimport marshmallow_dataclassclass UppercaseSchema(marshmallow.Schema):    &quot;&quot;&quot;A Schema that marshals data with uppercased keys.&quot;&quot;&quot;    def on_bind_field(self, field_name, field_obj):        field_obj.data_key = (field_obj.data_key or field_name).upper()class Sample:    my_text: str    my_int: intSampleSchema = marshmallow_dataclass.class_schema(Sample, base_schema=UppercaseSchema)SampleSchema().dump(Sample(my_text=&quot;warm words&quot;, my_int=1))# -&gt; {&quot;MY_TEXT&quot;: &quot;warm words&quot;, &quot;MY_INT&quot;: 1}```You can also pass `base_schema` to `marshmallow_dataclass.dataclass`.```python@marshmallow_dataclass.dataclass(base_schema=UppercaseSchema)class Sample:    my_text: str    my_int: int```See [marshmallow's documentation about extending `Schema`](https://marshmallow.readthedocs.io/en/stable/extending.html).### Custom NewType declarationsThis library exports a `NewType` function to create types that generate [customized marshmallow fields](https://marshmallow.readthedocs.io/en/stable/custom_fields.html#creating-a-field-class).Keyword arguments to `NewType` are passed to the marshmallow field constructor.```pythonimport marshmallow.validatefrom marshmallow_dataclass import NewTypeIPv4 = NewType(    &quot;IPv4&quot;, str, validate=marshmallow.validate.Regexp(r&quot;^([0-9]{1,3}\\.){3}[0-9]{1,3}$&quot;))```You can also pass a marshmallow field to `NewType`.```pythonimport marshmallowfrom marshmallow_dataclass import NewTypeEmail = NewType(&quot;Email&quot;, str, field=marshmallow.fields.Email)```For convenience, some custom types are provided:```pythonfrom marshmallow_dataclass.typing import Email, Url```Note: if you are using `mypy`, you will notice that `mypy` throws an error if a variable defined with`NewType` is used in a type annotation. To resolve this, add the `marshmallow_dataclass.mypy` pluginto your `mypy` configuration, e.g.:```ini[mypy]plugins = marshmallow_dataclass.mypy# ...```### `Meta` options[`Meta` options](https://marshmallow.readthedocs.io/en/stable/api_reference.html#marshmallow.Schema.Meta) are set the same way as a marshmallow `Schema`.```pythonfrom marshmallow_dataclass import dataclass@dataclassclass Point:    x: float    y: float    class Meta:        ordered = True```## DocumentationThe project documentation is hosted on GitHub Pages: https://lovasoa.github.io/marshmallow_dataclass/## ContributingTo install this project and make changes to it locally, follow the instructions in [`CONTRIBUTING.md`](./CONTRIBUTING.md).</longdescription>
</pkgmetadata>