<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PV_RecorderA cross platform audio recorder to read one channel and 16kHz samples.## Requirements- Python 3## Compatibility- Windows (amd64)- macOS     - x86_64    - arm64- Linux (x86_64)- Raspberry Pi:    - Zero    - 2    - 3 (32 and 64 bit)    - 4 (32 and 64 bit)- NVIDIA Jetson Nano- BeagleBone## Installationpip3 install pvrecorder## UsageGetting the list of input devices does not require an instance:```pythonfrom pvrecorder import PVRecorderdevices = PVRecorder.get_audio_devices()```To start recording initialize the instance and run start:```pythonfrom pvrecorder import PvRecorderrecorder = PvRecorder(device_index=-1, frame_length=512)recorder.start()```Get the pcm frames by calling the read function:```pythonpcm = recorder.read()# do something with pcm```To stop recording just run stop on the instance:```pythonrecorder.stop()```Once you are done, free the used resources. You do not have to call stop before delete:```pythonrecorder.delete()```### DemoFor more detailed information on how to use the pv_recorder python sdk, please that a look at [demo.py](demo/demo.js).In the following instructions, we will refer to  `{AUDIO_DEVICE_INDEX}` as the index of the audio device to use, and `{OUTPUT_PATH}` as the path to save the audio data in `wav` format.`{AUDIO_DEVICE_INDEX}` defaults to -1 and `{OUTPUT_PATH}` can be empty if you wish to not save any data.To show the available audio devices run:```consolepython3 demo.py --show_audio_devices```To run audio recorder run:```consolepython3 demo.py --audio_device_index {AUDIO_DEVICE_INDEX} --output_path {OUTPUT_PATH}```</longdescription>
</pkgmetadata>