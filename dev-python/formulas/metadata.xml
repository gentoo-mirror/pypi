<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. _start-intro:What is formulas?*******************formulas** implements an interpreter for Excel formulas, whichparses and compile Excel formulas expressions.Moreover, it compiles Excel workbooks to python and executes withoutusing the Excel COM server. Hence, **Excel is not needed**.Installation************To install it use (with root privileges):.. code:: console   $ pip install formulasOr download the last git version and use (with root privileges):.. code:: console   $ python setup.py installInstall extras==============Some additional functionality is enabled installing the followingextras:*  excel: enables to compile Excel workbooks to python and execute   using: ``ExcelModel``.*  plot: enables to plot the formula ast and the Excel model.To install formulas and all extras, do:.. code:: console   $ pip install formulas[all]Development version===================To help with the testing and the development of *formulas*, you caninstall the development version:.. code:: console   $ pip install https://github.com/vinci1it2000/formulas/archive/dev.zip.. _end-quick:Basic Examples**************The following sections will show how to:*  parse a Excel formulas;*  load, compile, and execute a Excel workbook;*  extract a sub-model from a Excel workbook;*  add a custom function.Parsing formula===============An example how to parse and execute an Excel formula is the following:&gt;&gt;&gt; import formulas&gt;&gt;&gt; func = formulas.Parser().ast('=(1 + 1) + B3 / A2')[1].compile()To visualize formula model and get the input order you can do thefollowing:&gt;&gt;&gt; list(func.inputs)['A2', 'B3']&gt;&gt;&gt; func.plot(view=False)  # Set view=True to plot in the default browser.SiteMap([(=((1 + 1) + (B3 / A2)), SiteMap())])[graph]Finally to execute the formula and plot the workflow:&gt;&gt;&gt; func(1, 5)Array(7.0, dtype=object)&gt;&gt;&gt; func.plot(workflow=True, view=False)  # Set view=True to plot in the default browser.SiteMap([(=((1 + 1) + (B3 / A2)), SiteMap())])[graph]Excel workbook==============An example how to load, calculate, and write an Excel workbook is thefollowing:::   &gt;&gt;&gt; import formulas   &gt;&gt;&gt; fpath, dir_output = 'excel.xlsx', 'output'     &gt;&gt;&gt; xl_model = formulas.ExcelModel().loads(fpath).finish()   &gt;&gt;&gt; xl_model.calculate()   Solution(...)   &gt;&gt;&gt; xl_model.write(dirpath=dir_output)   {'EXCEL.XLSX': {Book: &lt;openpyxl.workbook.workbook.Workbook ...&gt;}}Tip: If you have or could have **circular references**, add   *circular=True* to *finish* method.To plot the dependency graph that depict relationships between Excelcells:&gt;&gt;&gt; dsp = xl_model.dsp&gt;&gt;&gt; dsp.plot(view=False)  # Set view=True to plot in the default browser.SiteMap([(ExcelModel, SiteMap(...))])[graph]To overwrite the default inputs that are defined by the excel file orto impose some value to a specific cell:&gt;&gt;&gt; xl_model.calculate(...     inputs={...         &quot;'[excel.xlsx]'!INPUT_A&quot;: 3,  # To overwrite the default value....         &quot;'[excel.xlsx]DATA'!B3&quot;: 1  # To impose a value to B3 cell....     },...     outputs=[...        &quot;'[excel.xlsx]DATA'!C2&quot;, &quot;'[excel.xlsx]DATA'!C4&quot;...     ] # To define the outputs that you want to calculate.... )Solution([(&quot;'[excel.xlsx]'!INPUT_A&quot;, &lt;Ranges&gt;('[excel.xlsx]DATA'!A2)=[[3]]),          (&quot;'[excel.xlsx]DATA'!B3&quot;, &lt;Ranges&gt;('[excel.xlsx]DATA'!B3)=[[1]]),          (&quot;'[excel.xlsx]DATA'!A2&quot;, &lt;Ranges&gt;('[excel.xlsx]DATA'!A2)=[[3]]),          (&quot;'[excel.xlsx]DATA'!A3&quot;, &lt;Ranges&gt;('[excel.xlsx]DATA'!A3)=[[6]]),          (&quot;'[excel.xlsx]DATA'!D2&quot;, &lt;Ranges&gt;('[excel.xlsx]DATA'!D2)=[[1]]),          (&quot;'[excel.xlsx]'!INPUT_B&quot;, &lt;Ranges&gt;('[excel.xlsx]DATA'!A3)=[[6]]),          (&quot;'[excel.xlsx]DATA'!B2&quot;, &lt;Ranges&gt;('[excel.xlsx]DATA'!B2)=[[9.0]]),          (&quot;'[excel.xlsx]DATA'!D3&quot;, &lt;Ranges&gt;('[excel.xlsx]DATA'!D3)=[[2.0]]),          (&quot;'[excel.xlsx]DATA'!C2&quot;, &lt;Ranges&gt;('[excel.xlsx]DATA'!C2)=[[10.0]]),          (&quot;'[excel.xlsx]DATA'!D4&quot;, &lt;Ranges&gt;('[excel.xlsx]DATA'!D4)=[[3.0]]),          (&quot;'[excel.xlsx]DATA'!C4&quot;, &lt;Ranges&gt;('[excel.xlsx]DATA'!C4)=[[4.0]])])To build a single function out of an excel model with fixed inputs andoutputs, you can use the *compile* method of the *ExcelModel* thatreturns a `DispatchPipe&lt;https://schedula.readthedocs.io/en/master/_build/schedula/utils/dsp/schedula.utils.dsp.DispatchPipe.html#schedula.utils.dsp.DispatchPipe&gt;`_.This is a function where the inputs and outputs are defined by thedata node ids (i.e., cell references).&gt;&gt;&gt; func = xl_model.compile(...     inputs=[...         &quot;'[excel.xlsx]'!INPUT_A&quot;,  # First argument of the function....         &quot;'[excel.xlsx]DATA'!B3&quot;   # Second argument of the function....     ], # To define function inputs....     outputs=[...         &quot;'[excel.xlsx]DATA'!C2&quot;, &quot;'[excel.xlsx]DATA'!C4&quot;...     ] # To define function outputs.... )&gt;&gt;&gt; func&lt;schedula.utils.dsp.DispatchPipe object at ...&gt;&gt;&gt;&gt; [v.value[0, 0] for v in func(3, 1)]  # To retrieve the data.[10.0, 4.0]&gt;&gt;&gt; func.plot(view=False)  # Set view=True to plot in the default browser.SiteMap([(ExcelModel, SiteMap(...))])[graph]Alternatively, to load a partial excel model from the output cells,you can use the *from_ranges* method of the *ExcelModel*:&gt;&gt;&gt; xl = formulas.ExcelModel().from_ranges(...     &quot;'[%s]DATA'!C2:D2&quot; % fpath,  # Output range....     &quot;'[%s]DATA'!B4&quot; % fpath,  # Output cell.... )&gt;&gt;&gt; dsp = xl.dsp&gt;&gt;&gt; sorted(dsp.data_nodes)[&quot;'[excel.xlsx]'!INPUT_A&quot;, &quot;'[excel.xlsx]'!INPUT_B&quot;, &quot;'[excel.xlsx]'!INPUT_C&quot;, &quot;'[excel.xlsx]DATA'!A2&quot;, &quot;'[excel.xlsx]DATA'!A3&quot;, &quot;'[excel.xlsx]DATA'!A3:A4&quot;, &quot;'[excel.xlsx]DATA'!A4&quot;, &quot;'[excel.xlsx]DATA'!B2&quot;, &quot;'[excel.xlsx]DATA'!B3&quot;, &quot;'[excel.xlsx]DATA'!B4&quot;, &quot;'[excel.xlsx]DATA'!C2&quot;, &quot;'[excel.xlsx]DATA'!D2&quot;][graph]JSON export/import------------------The *ExcelModel* can be exported/imported to/from a readable JSONformat. The reason of this functionality is to have format that can beeasily maintained (e.g. using version control programs like *git*).Follows an example on how to export/import to/from JSON an*ExcelModel*:::   &gt;&gt;&gt; import json   &gt;&gt;&gt; xl_dict = xl_model.to_dict()  # To JSON-able dict.   &gt;&gt;&gt; xl_dict  # Exported format.    {    &quot;'[excel.xlsx]DATA'!A1&quot;: &quot;inputs&quot;,    &quot;'[excel.xlsx]DATA'!B1&quot;: &quot;Intermediate&quot;,    &quot;'[excel.xlsx]DATA'!C1&quot;: &quot;outputs&quot;,    &quot;'[excel.xlsx]DATA'!D1&quot;: &quot;defaults&quot;,    &quot;'[excel.xlsx]DATA'!A2&quot;: 2,    &quot;'[excel.xlsx]DATA'!D2&quot;: 1,    &quot;'[excel.xlsx]DATA'!A3&quot;: 6,    &quot;'[excel.xlsx]DATA'!A4&quot;: 5,    &quot;'[excel.xlsx]DATA'!B2&quot;: &quot;=('[excel.xlsx]DATA'!A2 + '[excel.xlsx]DATA'!A3)&quot;,    &quot;'[excel.xlsx]DATA'!C2&quot;: &quot;=(('[excel.xlsx]DATA'!B2 / '[excel.xlsx]DATA'!B3) + '[excel.xlsx]DATA'!D2)&quot;,    &quot;'[excel.xlsx]DATA'!B3&quot;: &quot;=('[excel.xlsx]DATA'!B2 - '[excel.xlsx]DATA'!A3)&quot;,    &quot;'[excel.xlsx]DATA'!C3&quot;: &quot;=(('[excel.xlsx]DATA'!C2 * '[excel.xlsx]DATA'!A2) + '[excel.xlsx]DATA'!D3)&quot;,    &quot;'[excel.xlsx]DATA'!D3&quot;: &quot;=(1 + '[excel.xlsx]DATA'!D2)&quot;,    &quot;'[excel.xlsx]DATA'!B4&quot;: &quot;=MAX('[excel.xlsx]DATA'!A3:A4, '[excel.xlsx]DATA'!B2)&quot;,    &quot;'[excel.xlsx]DATA'!C4&quot;: &quot;=(('[excel.xlsx]DATA'!B3 ^ '[excel.xlsx]DATA'!C2) + '[excel.xlsx]DATA'!D4)&quot;,    &quot;'[excel.xlsx]DATA'!D4&quot;: &quot;=(1 + '[excel.xlsx]DATA'!D3)&quot;   }   &gt;&gt;&gt; xl_json = json.dumps(xl_dict, indent=True)  # To JSON.   &gt;&gt;&gt; xl_model = formulas.ExcelModel().from_dict(json.loads(xl_json))  # From JSON.Custom functions================An example how to add a custom function to the formula parser is thefollowing:&gt;&gt;&gt; import formulas&gt;&gt;&gt; FUNCTIONS = formulas.get_functions()&gt;&gt;&gt; FUNCTIONS['MYFUNC'] = lambda x, y: 1 + y + x&gt;&gt;&gt; func = formulas.Parser().ast('=MYFUNC(1, 2)')[1].compile()&gt;&gt;&gt; func()4</longdescription>
</pkgmetadata>