<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ASGI-Sessions#############.. _description:**asgi-sessions** -- Cookie-Based HTTP sessions for ASGI applications (Asyncio_ / Trio_, / Curio_).. _badges:.. image:: https://github.com/klen/asgi-sessions/workflows/tests/badge.svg    :target: https://github.com/klen/asgi-sessions/actions    :alt: Tests Status.. image:: https://img.shields.io/pypi/v/asgi-sessions    :target: https://pypi.org/project/asgi-sessions/    :alt: PYPI Version.. image:: https://img.shields.io/pypi/pyversions/asgi-sessions    :target: https://pypi.org/project/asgi-sessions/    :alt: Python Versions.. _contents:.. contents::Features========* Supports base64 sessions* Supports ``JWT`` signed sessions* Supports ``Fernet`` encrypted sessions.. _requirements:Requirements=============- python &gt;= 3.7.. _installation:Installation=============**asgi-sessions** should be installed using pip: ::    pip install asgi-sessionsTo install optional ``JWT``, ``Fernet`` support: ::    pip install asgi-sessions[jwt]    pip install asgi-sessions[fernet].. _usage:Usage=====Common ASGI applications:.. code:: python    from asgi_sessions import SessionMiddleware    async def my_app(scope, receive, send):        &quot;&quot;&quot;Read session and get the current user data from it or from request query.&quot;&quot;&quot;        # The middleware puts a session into scope['session]        session = scope['session']        status, headers = 200, []        if scope['query_string']:            # Store any information inside the session            session['user'] = scope['query_string'].decode()            status, headers = 307, [(b&quot;location&quot;, b&quot;/&quot;)]        # Read a stored info from the session        user = (session.get('user') or 'anonymous').title().encode()        await send({&quot;type&quot;: &quot;http.response.start&quot;, &quot;status&quot;: status, &quot;headers&quot;: headers})        await send({&quot;type&quot;: &quot;http.response.body&quot;, &quot;body&quot;: b&quot;Hello %s&quot; % user})    app = SessionMiddleware(my_app, session_type='jwt', secret_key=&quot;sessions-secret&quot;)    # http GET / -&gt; Hello Anonymous    # http GET /?tom -&gt; Hello Tom    # http GET / -&gt; Hello TomAs ASGI-Tools Internal middleware.. code:: python    from asgi_tools import App    from asgi_sessions import SessionMiddleware    app = App()    app.middleware(SessionMiddleware.setup(session_type='jwt', secret_key='SESSION-SECRET'))    @app.route('/')    async def index(request):        user = request.session.get('user', 'Anonymous')        return 'Hello %s' % user.title()    @app.route('/login/{user}')    async def login(request):        request.session['user'] = request.path_params.get('user', 'Anonymous')        return 'Done'    @app.route('/logout')    async def logout(request, *args):        del request.session['user']        return 'Done'    # http GET / -&gt; Hello Anonymous    # http GET /login/tom -&gt; Done    # http GET / -&gt; Hello Tom    # http GET /logout -&gt; Done    # http GET / -&gt; Hello AnonymousOptions========.. code:: python   from asgi_sessions import SessionMiddleware   app = SessionMiddleware(        # Your ASGI application        app,        # Session type (base64|jwt|fernet)        session_type=&quot;base64&quot;,        # Secret Key for the session (required for JWT/Fernet sessions)        secret_key=None,        # Cookie name to keep the session (optional)        cookie_name='session',        # Cookie max age (in seconds) (optional)        max_age=14 * 24 * 3600,        # Cookie samesite (optional)  # Python 3.8+ only        samesite='lax',        # Cookie secure (https only) (optional)        secure=False,   ).. _bugtracker:Bug tracker===========If you have any suggestions, bug reports orannoyances please report them to the issue trackerat https://github.com/klen/asgi-sessions/issues.. _contributing:Contributing============Development of the project happens at: https://github.com/klen/asgi-sessions.. _license:License========Licensed under a `MIT license`_... _links:.. _MIT license: http://opensource.org/licenses/MIT.. _Asyncio: https://docs.python.org/3/library/asyncio.html.. _klen: https://github.com/klen.. _Trio: https://trio.readthedocs.io/en/stable/.. _Curio: https://curio.readthedocs.io/en/latest/</longdescription>
</pkgmetadata>