<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build][build-image]]()[![Status][status-image]][pypi-project-url][![Stable Version][stable-ver-image]][pypi-project-url][![Coverage][coverage-image]]()[![Python][python-ver-image]][pypi-project-url][![License][bsd3-image]][bsd3-url]# thconfig## OverviewTangledHub library for config with a focus on asynchronous functions## Licensingthconfig is licensed under the BSD license. Check the [LICENSE](https://opensource.org/licenses/BSD-3-Clause) for details## Installation```bashpip install thconfig```---## Testing```bashdocker-compose build thconfig-test ; docker-compose run --rm thconfig-test```## Building```bashdocker-compose build thconfig-build ; docker-compose run --rm thconfig-build```## Publish```bashdocker-compose build thconfig-publish ; docker-compose run --rm -e PYPI_USERNAME=__token__ -e PYPI_PASSWORD=__SECRET__ thconfig-publish```## THCONFIG supported in this library...## Testing```pythondocker-compose build thconfig-test ; docker-compose run --rm thconfig-test```## Usage### File Configuration from file #### setup```python'''A class to handle reading and writing configuration data from file'''# you need to provide file with data { configuration }config_path = 'example_1.json'# create instance of FileConfigconfig = FileConfig(config_path)```#### fetch```python'''Reads config data from file'''# you need to provide file with data { configuration }config_path = 'example_1.json'# create instance of FileConfigconfig = FileConfig(config_path)# load data from configuration file if successres: bool = (await config.fetch()).unwrap()```#### commit```python'''Write config data to file'''# you need to provide file with data { configuration }config_path = 'example_1.json'# create instance of FileConfigconfig = FileConfig(config_path)# set titleconfig['title'] = 'Config Example'config.title2 = 'Config Example'# this function change title in file(await config.commit()).unwrap()```### CouchConfig Configuration from couchdb #### setup```python'''A class to handle reading and writing configuration data from couchdbinstantiate CouchConfig:        parameters:            uri: str'''# this is url for couchdb where are configuration data URI = 'http://tangledhub:tangledhub@couchdb-test:5984/thconfig-test/test_couch_config'# create intance CouchConfig and set URI propertyconfig = CouchConfig(URI)```#### fetchFetching configuration document from couchdb```python'''Fetching document and store data in self._stateSync couchdb -&gt; self._statehttps://docs.couchdb.org/en/stable/api/document/common.html#get--db-docidFetch:    parameters:        self: CouchConfig'''# this is url for couchdb where are configuration data URI = 'http://tangledhub:tangledhub@couchdb-test:5984/thconfig-test/test_couch_config'# create intance CouchConfig and set URI propertyconfig = CouchConfig(URI)# fetching data from databasefetched_data = (await config.fetch()).unwrap()```#### commitCommit changes in configuration data in documment in couchdb```python'''Commit document, save data from self._state to couchdbSync self._state -&gt; couchdbhttps://docs.couchdb.org/en/stable/api/document/common.html#put--db-docidCommit:    parameters:        self: CouchConfig'''# this is url for couchdb where are configuration data URI = 'http://tangledhub:tangledhub@couchdb-test:5984/thconfig-test/test_couch_config_commit_changes'# create intance CouchConfig and set URI propertyconfig = CouchConfig(URI)title = 'Couch Config Example'database = {'server': '192.168.1.1'}# set title and databaseconfig['title'] = titleconfig['database'] = database# commitcommit_0 = (await config.commit()).unwrap()```### EtcdConfig Configuration from EtcdConfig #### setup```python'''A class to handle reading and writing configuration data from etcdinstantiate EtcdConfig:    parameters:        HOST: str        PORT: int'''# you need to provide host and portHOST = 'etcd-test'PORT = 2379# create instance of EtcdConfigconfig = EtcdConfig(host = HOST, port = PORT)```#### fetchFetching configuration document from etcd```python'''Fetching document and store data in self._stateSync etcd -&gt; self._statehttps://aetcd3.readthedocs.io/en/latest/reference/client.html#aetcd3.client.Etcd3Client.get_allFetch:    parameters:        self: EtcdConfig'''# you need to provide host and portHOST = 'etcd-test'PORT = 2379# create instance of EtcdConfigconfig = EtcdConfig(host = HOST, port = PORT)# fetching data from etcdfetched_data = (await config.fetch()).unwrap()```#### commitCommit changes in configuration data to etcd```python'''Commit document, save data from self._state to etcdSync self._state -&gt; etcdhttps://aetcd3.readthedocs.io/en/latest/reference/client.html#aetcd3.client.Etcd3Client.putcommit changes:    parameters:        self: EtcdConfig'''# you need to provide host and portHOST = 'etcd-test'PORT = 2379# create instance of EtcdConfigconfig = EtcdConfig(host = HOST, port = PORT)title = 'Couch Config Example'database = {'server': '192.168.1.1'}# set title and databaseconfig['title'] = titleconfig['database'] = database# commitcommit_0 = (await config.commit()).unwrap()```&lt;!-- Links --&gt;&lt;!-- Badges --&gt;[bsd3-image]: https://img.shields.io/badge/License-BSD_3--Clause-blue.svg[bsd3-url]: https://opensource.org/licenses/BSD-3-Clause[build-image]: https://img.shields.io/badge/build-success-brightgreen[coverage-image]: https://img.shields.io/badge/Coverage-100%25-green[pypi-project-url]: https://pypi.org/project/thquickjs/[stable-ver-image]: https://img.shields.io/pypi/v/thquickjs?label=stable[python-ver-image]: https://img.shields.io/pypi/pyversions/thquickjs.svg?logo=python&amp;logoColor=FBE072[status-image]: https://img.shields.io/pypi/status/thquickjs.svg</longdescription>
</pkgmetadata>