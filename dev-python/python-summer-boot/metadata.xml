<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># summer-boot #After spring it comes the summer.## Installation ##```bashpip install python-summer-boot```## Inversion of control ##summer-boot provides an easy dependency injection by splitting classes between services and injectors.A service is a dependency and an injector is a class that consumes dependencies.You can discover services with the ```disvover_services``` function.It is recommended to create a setup file located in your sources root and call discover services function there, once. Here you have an example:```pythonimport osfrom summer.inversion_of_control.service_locator import get_executable_parent_path, discover_servicesexecutable_parent_path = get_executable_parent_path(os.getcwd())def setup():    discover_services(executable_parent_path)```**⚠️ Remember to call setup function before use any injection. ⚠️**You can define services using the ```@service``` decorator at class level.```pythonfrom summer.inversion_of_control.dependencies import servicefrom src.mock_entity.core.i_repository import IRepository@service()class PostgreRepository(IRepository):    def custom_method(self):        return &quot;Postgre repository&quot;```Here the code of ```IRepository```:```pythonfrom abc import ABC, abstractmethodclass IRepository(ABC):    @abstractmethod    def custom_method(self) -&gt; str:        raise NotImplementedError```Finally, you can consume injected dependencies with the ```@autowired``` decorator, upside the function that needs dependencies. In most of the cases it will be the ```__init__``` function:```pythonfrom summer.inversion_of_control.dependencies import autowiredfrom src.mock_entity.core.i_repository import IRepositoryclass UseCase:    @autowired    def __init__(self, repository: IRepository):        self.repository = repository    def my_use_case(self) -&gt; str:        return self.repository.custom_method()```## Models ##**⚠️ It is necessary to install pydantic in order to use this module. ⚠️**SummerBoot implements some models using inheritance from pydantic.### CamelModel ###A model which every attribute is represented as camelCase perhaps is coded as snake_case. I.e.:```pythonfrom summer.models.camel.camel_model import CamelModelclass MockCamelModel(CamelModel):    mock_attribute: str = &quot;mock&quot;```</longdescription>
</pkgmetadata>