<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![PyPI](https://img.shields.io/pypi/v/ndx-sound?color=blue)# ndx-sound Extension for NWBNWB extension for sounds.## Installation```shellpip install ndx-sound```## Usage## Python### Add to an NWB file```pythonfrom pynwb import NWBFilefrom scipy.io import wavfilefrom ndx_sound import AcousticWaveformSeries# The file path to the audio filefile_path = &quot;audio_data.wav&quot;# Read the audio file to get the rate of the recording and the waveformsampling_rate, samples = wavfile.read(file_path)# Create an AcousticWaveformSeries object with a given name and descriptionacoustic_waveform_series = AcousticWaveformSeries(    name=&quot;acoustic_stimulus&quot;,    data=samples,    rate=sampling_rate,    description=&quot;acoustic stimulus&quot;,)# Create an NWBFile object where this AcousticWaveformSeries can be added tonwbfile = NWBFile(    session_description=...,    identifier=...,    session_start_time=...,)# If a recording of behavior, add to acquisitionnwbfile.add_acquisition(acoustic_waveform_series)# If a stimulus, add to stimulusnwbfile.add_stimulus(acoustic_waveform_series)```### Visualization#### Static widgetsUse `plot_sound` to visualize the waveform series and the spectrogram.For longer recordings, specify the `time_window` argument for the start and end timeof the recording to be shown.```pythonfrom ndx_sound.widgets import plot_soundplot_sound(nwbfile.stimulus[&quot;acoustic_stimulus&quot;])# Show only from 5 to 15 secondsplot_sound(nwbfile.stimulus[&quot;acoustic_stimulus&quot;], time_window=(5, 15))```![](ndx_sound_plot_timewindow.png)Use `acoustic_waveform_widget` to include an Audio element that plays the sound.```pythonfrom ndx_sound.widgets import acoustic_waveform_widgetacoustic_waveform_widget(nwbfile.stimulus[&quot;acoustic_stimulus&quot;], time_window=(5, 15))```![](acoustic_waveform_widget_timewindow.png)#### Interactive widgetsUse `AcousticWaveformWidget` to use a slider for interactively scrolling through therecording and a button for changing the duration of the sound that is being shown.```pythonfrom ndx_sound.widgets import AcousticWaveformWidgetAcousticWaveformWidget(nwbfile.stimulus[&quot;acoustic_stimulus&quot;])```![](interactive_widget.png)### nwbwidgetsUse `load_widgets` to load the interactive sound widget into `nwb2widget`.```pythonfrom ndx_sound.widgets import load_widgetsfrom nwbwidgets import nwb2widgetload_widgets()nwb2widget(nwbfile)```![](ndx_sound_in_nwbwidgets.png)#### nwbwidgets and HDF5IOWhen using `nwb2widget` with an NWB file that is read from disk, make sure to have`load_widgets` imported within the same Jupyter cell where your data is being loaded.```pythonfrom pynwb import NWBHDF5IOfrom ndx_sound.widgets import load_widgetsfrom nwbwidgets import nwb2widgetload_widgets()io = NWBHDF5IO(&quot;audio.nwb&quot;, mode=&quot;r&quot;, load_namespaces=True)nwbfile = io.read()nwb2widget(nwbfile)```---This extension was created using [ndx-template](https://github.com/nwb-extensions/ndx-template).</longdescription>
</pkgmetadata>