<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Manabi```  ┌───────────┐             ┌───────────┐  │           │   Token     │           │  │   Manabi  ├────────────►│    API    │  │           │   Hook      │           │  └───────────┘             └─────┬─────┘        ▲                         │        │                         │ doc APIWebDAV  │  PUT                    │        │                   Token │        │  Token                  ▼ ┌──────┴──────┐           ┌─────────────┐ │             │   Token   │             │ │  Word / LO  │◄──────────┤  Frontend   │ │             │    Link   │             │ └─────────────┘           └─────────────┘```**Case:** Users should have the capability to edit documents in Word andLibreOffice.**Problem**: We need to ensure the integrity and authenticity of the WebDAV linkpassed to Word/LO, confirming that it has not been tampered with or generated byan unauthorized third party.**Solution:**- The API generates an ephemeral branca token. This token is a temporary and  short-lived cryptographic token that contains the file-path as an encrypted  payload.- Both the API and Manabi share a key. In a symmetric shared-key scenario,  encryption can also be employed to verify the data.- The frontend displays a link that includes the ephemeral token along with  the document, allowing users to easily edit it in Word/LO.- When the user clicks the link, the document opens in Word/LO.- Manabi retrieves the token from the request URI, checks its validity, and  proceeds to open the document if the token is verified.- The token is updated and stored as a cookie within Word/LO for future reference.- Due to the ephemeral WebDAV lock, Word/LO must regularly contact Manabi to  refresh the lock. Consequently, we leverage this mechanism to also refresh the  token.**cb_hook_config**: We provide an optional write-hooks/callbacks feature thatenhances the API's capabilities by adding a versioning system. The pre-write-hook/callback is invoked with the token as an argument **prior** to the documentbeing saved using WebDAV-PUT. The API has the ability to verify this token andsubsequently create a new version of the document. Once the hook operation issuccessfully completed, Manabi takes over and saves the document. Manabi thencontinues and invokes the post-write-hook/callback.## InstallMake sure libsodium exists on the system, for example execute:```bashapk add --no-cache libsodiumapt-get install -y libsodium23```## ConfigCall `manabi-keygen` and add the key to `config[&quot;manabi&quot;][&quot;key&quot;]`. The key isshared between the caluma/alexandria backend and the WebDAV server.`mount_path`Prefix that gets passed to wsgidav, if URL rewrites remove any prefixes use `&quot;/&quot;``lock_storage`The ManabiLockLockStorage forces the WebDav log-timeout to `token-refresh-time / 2``provider_mapping`Extends the FilesystemProvider any will only serve files if the token is valid`pre_write_hook`A hook to enhance the API's capabilities, for example versioning of documents.`middleware_stack`Based on the default middleware_stack but HTTPAuthenticator is replace byManabiAuthenticator, which validates the tokens.`manabi.key`Shared-key between the server that creates tokens to grant access and wsgi-dav`manabi.refresh`How often tokens are refreshed in seconds, we recommend 10 minutes: `600``manabi.initial`The time from the token being generated till it has to be refreshed the firsttime, we recommend 1 minues: `60`. In case tokens leak, for example via cache ona computer, tokens should be expired by the time an adversary gets them.```pythonfrom manabi import ManabiDAVApp# All hooks and callbacks are optionalcb_hook_config = CallbackHookConfig(    pre_write_hook=_pre_write_hook,    pre_write_callback=_pre_write_callback,    post_write_hook=_post_write_hook,    post_write_callback=_post_write_callback,)postgres_dsn = &quot;dbname=manabi user=manabi host=localhost password=manabi&quot;config = {    &quot;mount_path&quot;: &quot;/dav&quot;,    &quot;lock_storage&quot;: ManabiDbLockStorage(refresh, postgres_dsn),    &quot;provider_mapping&quot;: {        &quot;/&quot;: ManabiProvider(settings.MEDIA_ROOT, cb_hook_config=cb_hook_config),    },    &quot;middleware_stack&quot;: [        WsgiDavDebugFilter,        ErrorPrinter,        ManabiAuthenticator,        WsgiDavDirBrowser,        RequestResolver,    ],    &quot;manabi&quot;: {        &quot;key&quot;: key,        &quot;refresh&quot;: refresh,        &quot;initial&quot;: settings.MANABI_TOKEN_ACTIVATE_TIMEOUT,    },}dav_app = ManabiDAVApp(config)```# DevEnable dev-env:```bashpyenv install 3.11.4poetry env use $HOME/.pyenv/versions/3.11.4/bin/python3.11poetry installpoetry run python -m manabi.mypy_fixpoetry shelldocker-compose up -d db(cd manabi_django &amp;&amp; ./manage.py migrate manabi_migrations)```## Typing rulesMy typing rules for this project (there are no company rules):- In tests `# type: ignore` is allowed if fixing the issue does not help production-code- In production-code `# type: ignore` is allowed if a manual check happens or  we can guarantee some runtime behavior. For example we guarantee that a  weakref is always valid. Similar to `unsafe` in rust.</longdescription>
</pkgmetadata>