<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>volkanic========Interface with config files and shell prompts easily and elegantly.To install (add `sudo` if necessary)    python3 -m pip install volkanic### GlobalInterface and config fileExample:`GlobalInterface` is defined in `example/environ.py` as:```pythonimport volkanicclass GlobalInterface(volkanic.GlobalInterface):    # you should always define `package_name`    package_name = 'example'```Configuration file `config.json5`:```json5{    &quot;upstram_prefix&quot;: &quot;http://127.0.0.1:9100&quot;,    &quot;sqlite&quot;: &quot;/data/local/example/db.sqlite&quot;}```This `config.json5` is at one of the follow locations:- Under your project directory in a development enviornment- `~/.example/config.json5`- `/etc/example/config.json5`- `/example/config.json5`Access config:```&gt;&gt;&gt; from example.environ import GlobalInterface &gt;&gt;&gt; gi = GlobalInterface()  # note that GlobalInterface is a sington class&gt;&gt;&gt; print(gi.conf){'upstram_prefix': 'http://127.0.0.1:9100', 'sqlite': '/data/local/example/db.sqlite'}```Note that `GlobalInterface` is a singlon class, which means that `GlobalInterface()` will always return the same object:```&gt;&gt;&gt; GlobalInterface() is GlobalInterface()True```The recommended usage of `GlobalInterface()` is to create instanciate it at the top each module:```pythonfrom example.environ import GlobalInterface  # noqafrom example.tools import your_funny_tool  # noqagi = GlobalInterface()def find_funny_things():    url = gi.conf['upstram_prefix'] + '/funny-api'    path = gi.under_package_dir('asset/funny.json')    # more code here ...```-------------------------------------------------------------------------### AccessoriesList sub-commands    $ volk    availabe commands:    - a    - o    - runconf    - whereLocate a Python package directory with `volk where`:    $ volk where requests    requests/usr/local/lib/python3.6/site-packages/requestsYou can open a file or URL with default application with `volk o`.To open current directory with default file manager (Finder / explorer.exe / ...)    $ volk o .Show `sys.argv`:    $ volk a \; &quot;hello world&quot; hello python    0'/usr/local/bin/volk'    1'a'    2';'    3'hello world'    4'hello'    5'python'-------------------------------------------------------------------------### Sub-command protocalSay you have a package named `mypkg`    mypkg/    ├── MANIFEST.in    ├── docs/    ├── mypkg/    │    ├── __init__.py    │    ├── algors.py    │    ├── formatters.py    │    ├── main.py    │    └── parsers.py    ├── requirements.txt    ├── setup.py    └── tests/In one of your functional modules, e.g. `mypkg/mypkg/formatter.py`,provide a entry function which takes exactly 2 arguments:```pythonimport argparsedef process_file(path):    # actual code here    returndef run(prog=None, args=None):    desc = 'human readable formatter'    parser = argparse.ArgumentParser(prog=prog, description=desc)    add = parser.add_argument    add('-i', '--input-file', help='path to your input file')    ns = parser.parse_args(args)    process_file(ns.input_file)```Sub-command registry in `mypkg/mypkg/main.py`:```pythonimport volkaniccommands = {    &quot;fmt&quot;: &quot;mypkg.formatter&quot;,    &quot;yml&quot;: &quot;mypkg.parsers:run_yml_parser&quot;,    &quot;ini&quot;: &quot;mypkg.parsers:run_ini_parser&quot;,}registry = volkanic.CommandRegistry(commands)```Note that `mypkg.formatter` is a shorthand for `mypkg.formatter:run`.Configure top level command in `mypkg/setup.py`:```pythonfrom setuptools import setupsetup(    name=&quot;mypkg&quot;,    entry_points={&quot;console_scripts&quot;: [&quot;mycmd = mypkg.main:registry&quot;]},    # more arguments here)```Install package `mypkg` or link with `python3 setup.py develop`.Now you have command `mycmd`:    $ mycmd    availabe commands:    - fmt    - ini    - ymlRun with sub-command `fmt`:    $ mycmd fmt -h</longdescription>
</pkgmetadata>