<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Esmerald&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://esmerald.dymmond.com&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dymmond/image/upload/v1673619342/esmerald/img/logo-gr_z1ot8o.png&quot; alt='Esmerald'&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;ðŸš€ Highly scalable, performant, easy to learn, easy to code and for every application. ðŸš€&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/dymmond/esmerald/workflows/Test%20Suite/badge.svg?event=push&amp;branch=main&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/dymmond/esmerald/workflows/Test%20Suite/badge.svg?event=push&amp;branch=main&quot; alt=&quot;Test Suite&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/esmerald&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/esmerald?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/esmerald&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/esmerald.svg?color=%2334D058&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;---**Documentation**: [https://esmerald.dev](https://www.esmerald.dev) ðŸ“š**Source Code**: [https://github.com/dymmond/esmerald](https://github.com/dymmond/esmerald)---Esmerald is a modern, powerful, flexible, high performant, web framework designed to build not only APIsbut also full scalable applications from the smallest to enterprise level.Esmerald is designed to build with python 3.8+ and based on standard python type hints and on the top ofthe heavily known [Starlette](https://github.com/encode/starlette) and [Pydantic](https://github.com/samuelcolvin/pydantic).Check out the [Esmerald documentation ðŸ“š](https://esmerald.dymmond.com)## MotivationThere are great frameworks out there like FastAPI, Starlite, Flama, Flask, Django... All of them solving majorityof the current day-to-day problems of 99% of the applications but leaving the 1% that is usually around structureand design/business without to much to do.Esmerald got the inspiration from those great frameworks out there and was built with all the known amazingfeatures but with business in mind as well. Starlite, for example, gave the inspiration for the transformers and for the Signature models,something very useful that helped Esmerald integerating with pydantic.FastAPI gave the inspiration for API designing, Django for the permissions, Flask for the simplicity, NestJS for thecontrollers and the list goes on.For a job to be done properly, usually it is never done alone and there is always a driver and inspiration to it.## Requirements* python 3.8+Esmerald wouldn't be possible without two colossals:* &lt;a href=&quot;https://www.starlette.io/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Starlette&lt;/a&gt;* &lt;a href=&quot;https://pydantic-docs.helpmanual.io/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Pydantic&lt;/a&gt;## Installation```shellpip install esmerald```An ASGI server is also needed to run in production, we recommend [Uvicorn](https://www.uvicorn.org) but it is entirelyup to you.```shellpip install uvicorn```If you want install esmerald with specifics:**Support for template system such as jinja2 and mako**:```shellpip install esmerald[templates]```**Support for the internal scheduler**:```shellpip install esmerald[schedulers]```**Support for the jwt used internally by Esmerald**:```shellpip install esmerald[jwt]```**Support for ORJSON and UJSON**:```shellpip install esmerald[encoders]```**If you want to use the esmerald testing client**:```shellpip install esmerald[test]```### Start a project using directivesIf you wish to start an Esmerald project with a default suggested structure.```esmerald createproject &lt;YOUR-PROJECT-NAME&gt;```This will generate a scaffold for your project with some pre-defined files in a simple fashion.This will also generate a file for the tests using the EsmeraldTestClient, so make sure you run:```shellpip install esmerald[test]```Or you can jump this step if you don't want to use the EsmeraldTestClient.You can find [more information](https://esmerald.dymmond.com/management/directives) about this directive and how touse it.## Key Features* **Fluid and Fast**: Thanks to Starlette and Pydantic.* **Fast to develop**: Thanks to the simplicity of design, the development times can be reduced exponentially.* **Intuitive**: If you are used to the other frameworks, Esmerald is a no brainer to develop.* **Easy**: Developed with design in mind and easy learning.* **Short**: With the OOP available natively there is no need for code duplication. SOLID.* **Ready**: Get your application up and running with production-ready code.* **OOP and Functional**: Design APIs in any desired way. OOP or Functional is available.* **Async and Sync**: Do you prefer sync or async? You can have both.* **Middleware**: Apply middlewares on the application level or API level.* **Exception Handlers**: Apply exception handlers on any desired level.* **Permissions**: Apply specific rules and permissions on each API.* **Interceptors**: Intercept requests and add logic before reaching the endpoint.* **Pluggables**: Create plugins for Esmerald and hook them into any application and/ordistribute them.* **DAO and AsyncDAO**: Avoid database calls directly from the APIs. Use business objects instead.* **Saffier ORM**: Native support for [Saffier ORM](./databases/saffier/motivation.md).* **APIView**: Class Based endpoints for your beloved OOP design.* **JSON serialization/deserialization**: Both UJSON and ORJON support.* **Lifespan**: Support for the newly lifespan and on_start/on_shutdown events.* **Scheduler**: Yes, that's right, it comes with a scheduler for those automated tasks.* **Dependency Injection**: Like any other great framework out there.* **Simplicity from settings**: Yes, we have a way to make the code even cleaner by introducing settingsbased systems.* **Database**: Out of the box support for async databases.## Relation to Starlette and other frameworksEsmerald uses Starlette under the hood. The reason behind this decison comes with the fact that performance is thereand no issues with routing.Once the application is up, all the routes are mounted and therefore the url paths are defined.Esmerald encourages standard practices and design in mind which means that any application, big or small,custom or enterprise, fits within Esmerald ecosystem without scalability issues.## SettingsLike every other framework, when starting an application, a lot of [settings](./application/settings.md) can/need to bepassed to the main object and this can be very dauting and hugly to maintain and see.Esmerald comes with the[settings](./application/settings.md) in mind. A set of defaults that can be overridden by your very own settingsmodule but not limited to it as you can still use the classic approach of passing everything into aEsmerald instance directly when instantiating.**Example of classic approach**:```pythonfrom example import ExampleObject# ExampleObject is an instance of another application# and it serves only for exampleapp = ExampleObject(setting_one=..., setting_two=..., setting_three=...)```Inspired by the great [Django](https://www.djangoproject.com/) and using pydantic, Esmerald has a default objectready to be used out-of-the-box.**Esmerald**:```pythonfrom esmerald import Esmeraldapp = Esmerald()```And that's it! All the default settings are loaded! This is simple of course but can you overrideinside the object as well? Yes!```pythonfrom esmerald import Esmeraldapp = Esmerald(app_name='My App', title='My title')```Same as the classics.So how does Esmerald know about the default settings? Enters [Esmerald settings module](#esmerald-settings-module).### Esmerald Settings ModuleThis is the way Esmerald defaults the values. When starting an application, the system looks for a`ESMERALD_SETTINGS_MODULE` environment variable. If no variable is supplied then the system will default to`EsmeraldAPISettings` settings and start.### Custom SettingsSeparation of settings by enviromment is a must have these days and starting with default of Esmerald will not beenough for any application.The settings are pydantic standard settings and therefore compatible with Esmerald.The system brings some defaults that can be used out-of-the-box but it's not mandatory to be used.The environment defaults to **production**.```pythonfrom esmerald import EsmeraldAPISettingsfrom esmerald.conf.enums import EnvironmentTypeclass Development(EsmeraldAPISettings):    app_name: bool = 'My app in dev'    environment: str = EnvironmentType.DEVELOPMENT```**Load the settings into your Esmerald application**:Assuming your Esmerald app is inside an `src/app.py`.```consoleESMERALD_SETTINGS_MODULE='myapp.settings.Development' python -m src.app.py```## Gateway, WebSocketGateway and IncludeStarlette offers the Route classes for simple path assignments but this is also very limiting if something morecomplex in mind. Esmerald extends that functionality and adds some `flair` and levels up by having theGateway, WebSocketGateway and Include.Those are special objects that allow all the magic of Esmerald to happen.For a classic, direct, one file single approach.**In a nutshell**:```python title='src/app.py'from esmerald import Esmerald, get, status, Request, UJSONResponse, Gateway, WebSocketGateway, Websocket@get(status_code=status.HTTP_200_OK)async def home() -&gt; UJSONResponse:    return UJSONResponse({        &quot;detail&quot;: &quot;Hello world&quot;    })@get()async def another(request: Request) -&gt; dict:    return {        &quot;detail&quot;: &quot;Another world!&quot;    }@websocket(path=&quot;/{path_param:str}&quot;)async def world_socket(socket: Websocket) -&gt; None:    await socket.accept()    msg = await socket.receive_json()    assert msg    assert socket    await socket.close(app = Esmerald(routes=[    Gateway(handler=home),    Gateway(handler=another),    WebSocketGateway(handler=world_socket),])```## Design in mindGood design is always encouraged and Esmerald allows complex routing on any level.### The handlers (views)```python title=&quot;myapp/accounts/views.py&quot;from esmerald import get, post, put, status, websocket, APIView, Request, JSONResponse, Response, WebSocketfrom pydantic import BaseModelclass Product(BaseModel):    name: str    sku: str    price: float@put('/product/{product_id}')def update_product(product_id: int, data: Product) -&gt; dict:    return {&quot;product_id&quot;: product_id, &quot;product_name&quot;: product.name }@get(status_code=status.HTTP_200_OK)async def home() -&gt; JSONResponse:    return JSONResponse({        &quot;detail&quot;: &quot;Hello world&quot;    })@get()async def another(request: Request) -&gt; dict:    return {        &quot;detail&quot;: &quot;Another world!&quot;    }@websocket(path=&quot;/{path_param:str}&quot;)async def world_socket(socket: Websocket) -&gt; None:    await socket.accept()    msg = await socket.receive_json()    assert msg    assert socket    await socket.close()class World(APIView):    @get(path='/{url}')    async def home(request: Request, url: str) -&gt; Response:        return Response(f&quot;URL: {url}&quot;)    @post(path='/{url}', status_code=status.HTTP_201_CREATED)    async def mars(request: Request, url: str) -&gt; JSONResponse:        ...        @websocket(path=&quot;/{path_param:str}&quot;)    async def pluto(self, socket: Websocket) -&gt; None:        await socket.accept()        msg = await socket.receive_json()        assert msg        assert socket        await socket.close()```If a `path` is not provided, defaults to `/`.### The gateways (urls)```python title=&quot;myapp/accounts/urls.py&quot;from esmerald import Gateway, WebSocketGatewayfrom .views import home, another, world_socket, Worldroute_patterns = [    Gateway(handler=update_product),    Gateway(handler=home),    Gateway(handler=another),    Gateway(handler=World),    WebSocketGateway(handler=world_socket),]```If a `path` is not provided, defaults to `/`.### The IncludeThis is a very special object that allows the import of any route from anywhere in the application.`Include` accepts the import via `namespace` or via `routes` list but not both.When using a `namespace`, the `Include` will look for the default `route_patterns` object list in the importednamespace unless a different `pattern` is specified.The pattern only works if the imports are done via `namespace` and not via `routes`.**Importing using namespace**:```python title='myapp/urls.py'from esmerald import Includeroute_patterns = [    Include(namespace='myapp.accounts.urls')]```**Importing using routes**:```python title='src/myapp/urls.py'from esmerald import Includefrom myapp.accounts import urlsroute_patterns = [    Include(routes=urls.route_patterns)]```If a `path` is not provided, defaults to `/`.#### Using a different pattern```python title=&quot;src/myapp/accounts/urls.py&quot;from esmerald import Gateway, WebSocketGatewayfrom .views import home, another, world_socket, Worldmy_urls = [    Gateway(handler=update_product),    Gateway(handler=home),    Gateway(handler=another),    Gateway(handler=World),    WebSocketGateway(handler=world_socket),]```**Importing using namespace**:```python title='src/myapp/urls.py'from esmerald import Includeroute_patterns = [    Include(namespace='myapp.accounts.urls', pattern='my_urls')]```## Include and EsmeraldThe `Include` can be very helpful mostly when the goal is to avoid a lot of imports and massive listof objects to be passed into one single object. This can be particulary useful to make a Esmerald instance.**Example**:```python title='src/urls.py'from esmerald import Includeroute_patterns = [    Include(namespace='myapp.accounts.urls', pattern='my_urls')]``````python title='src/app.py'from esmerald import Esmerald, Includeapp = Esmerald(routes=[Include('src.urls')])```## Run the applicationAs mentioned before, we recomment uvicorn for production but it's not mandatory.**Using uvicorn**:```shelluvicorn src:app --reloadINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)INFO:     Started reloader process [28720]INFO:     Started server process [28722]INFO:     Waiting for application startup.INFO:     Application startup complete.```## Run the application with custom settings**Using uvicorn**:```shellESMERALD_SETTINGS_MODULE=myapp.AppSettings uvicorn src:app --reloadINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)INFO:     Started reloader process [28720]INFO:     Started server process [28722]INFO:     Waiting for application startup.INFO:     Application startup complete.```## NotesThis is just a very high-level demonstration of how to start quickly and what Esmerald can do.There are plenty more things you can do with Esmerald. Enjoy! ðŸ˜Š## SponsorsCurrently there are no sponsors of Esmerald but you can financially help and support the author though[GitHub sponsors](https://github.com/sponsors/tarsil) and become a **Special one** or a **Legend**.</longdescription>
</pkgmetadata>