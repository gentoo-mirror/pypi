<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=====parts=====Minimal library that enables partitioning of iterable objects in a concise manner.|pypi| |readthedocs| |actions| |coveralls|.. |pypi| image:: https://badge.fury.io/py/parts.svg   :target: https://badge.fury.io/py/parts   :alt: PyPI version and link... |readthedocs| image:: https://readthedocs.org/projects/parts/badge/?version=latest   :target: https://parts.readthedocs.io/en/latest/?badge=latest   :alt: Read the Docs documentation status... |actions| image:: https://github.com/lapets/parts/workflows/lint-test-cover-docs/badge.svg   :target: https://github.com/lapets/parts/actions/workflows/lint-test-cover-docs.yml   :alt: GitHub Actions status... |coveralls| image:: https://coveralls.io/repos/github/lapets/parts/badge.svg?branch=main   :target: https://coveralls.io/github/lapets/parts?branch=main   :alt: Coveralls test coverage summary.Purpose-------This library provides a function for partitioning `iterable &lt;https://docs.python.org/3/glossary.html#term-iterable&gt;`__ data structure instances. When the number of parts is specified explicitly, it is treated as a strict requirement and an exception is raised when it cannot be satisfied. When a length for all parts (or each part) is specified explicitly, a best-effort approach is used: as many parts of the specified length are retrieved as possible, with the possibility that some parts at the end of the partition sequence have a shorter (but still non-zero) length.Installation and Usage----------------------This library is available as a `package on PyPI &lt;https://pypi.org/project/parts&gt;`__::    python -m pip install partsThe library can be imported in the usual manner::    import parts    from parts import partsExamples^^^^^^^^Several examples are presented below::    &gt;&gt;&gt; list(parts([1, 2, 3, 4, 5, 6, 7], length=2))    [[1, 2], [3, 4], [5, 6], [7]]        &gt;&gt;&gt; list(parts([1, 2, 3, 4, 5, 6, 7], length=4))    [[1, 2, 3, 4], [5, 6, 7]]        &gt;&gt;&gt; list(parts([1, 2, 3, 4, 5, 6, 7], number=1))    [[1, 2, 3, 4, 5, 6, 7]]        &gt;&gt;&gt; list(parts([1, 2, 3, 4, 5, 6, 7], 5))    [[1], [2], [3], [4, 5], [6, 7]]        &gt;&gt;&gt; list(parts([1, 2, 3, 4, 5, 6], 2, 3))    [[1, 2, 3], [4, 5, 6]]        &gt;&gt;&gt; list(parts([1, 2, 3, 4, 5, 6], number=3, length=2))    [[1, 2], [3, 4], [5, 6]]        &gt;&gt;&gt; list(parts([1, 2, 3, 4, 5, 6, 7], 7, [1, 1, 1, 1, 1, 1, 1]))    [[1], [2], [3], [4], [5], [6], [7]]        &gt;&gt;&gt; list(parts([1, 2, 3, 4, 5, 6], length=[2, 2, 2]))    [[1, 2], [3, 4], [5, 6]]        &gt;&gt;&gt; list(parts([1, 2, 3, 4, 5, 6], length=[1, 2, 3]))    [[1], [2, 3], [4, 5, 6]]        &gt;&gt;&gt; list(parts([1, 2, 3, 4, 5, 6, 7], number=3, length=2))    Traceback (most recent call last):      ...    ValueError: cannot retrieve 3 parts from object given part length parameter of 2Development-----------All installation and development dependencies are fully specified in ``pyproject.toml``. The ``project.optional-dependencies`` object is used to `specify optional requirements &lt;https://peps.python.org/pep-0621&gt;`__ for various development tasks. This makes it possible to specify additional options (such as ``docs``, ``lint``, and so on) when performing installation using `pip &lt;https://pypi.org/project/pip&gt;`__::    python -m pip install .[docs,lint]Documentation^^^^^^^^^^^^^The documentation can be generated automatically from the source files using `Sphinx &lt;https://www.sphinx-doc.org&gt;`__::    python -m pip install .[docs]    cd docs    sphinx-apidoc -f -E --templatedir=_templates -o _source .. &amp;&amp; make htmlTesting and Conventions^^^^^^^^^^^^^^^^^^^^^^^All unit tests are executed and their coverage is measured when using `pytest &lt;https://docs.pytest.org&gt;`__ (see the ``pyproject.toml`` file for configuration details)::    python -m pip install .[test]    python -m pytestAlternatively, all unit tests are included in the module itself and can be executed using `doctest &lt;https://docs.python.org/3/library/doctest.html&gt;`__::    python src/parts/parts.py -vStyle conventions are enforced using `Pylint &lt;https://pylint.pycqa.org&gt;`__::    python -m pip install .[lint]    python -m pylint src/partsContributions^^^^^^^^^^^^^In order to contribute to the source code, open an issue or submit a pull request on the `GitHub page &lt;https://github.com/lapets/parts&gt;`__ for this library.Versioning^^^^^^^^^^Beginning with version 0.2.0, the version number format for this library and the changes to the library associated with version number increments conform with `Semantic Versioning 2.0.0 &lt;https://semver.org/#semantic-versioning-200&gt;`__.Publishing^^^^^^^^^^This library can be published as a `package on PyPI &lt;https://pypi.org/project/parts&gt;`__ by a package maintainer. First, install the dependencies required for packaging and publishing::    python -m pip install .[publish]Ensure that the correct version number appears in ``pyproject.toml``, and that any links in this README document to the Read the Docs documentation of this package (or its dependencies) have appropriate version numbers. Also ensure that the Read the Docs project for this library has an `automation rule &lt;https://docs.readthedocs.io/en/stable/automation-rules.html&gt;`__ that activates and sets as the default all tagged versions. Create and push a tag for this version (replacing ``?.?.?`` with the version number)::    git tag ?.?.?    git push origin ?.?.?Remove any old build/distribution files. Then, package the source into a distribution archive::    rm -rf build dist src/*.egg-info    python -m build --sdist --wheel .Finally, upload the package distribution archive to `PyPI &lt;https://pypi.org&gt;`__::    python -m twine upload dist/*</longdescription>
</pkgmetadata>