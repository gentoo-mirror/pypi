<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.com/janehmueller/python-json-config.svg?token=tGKCTy4zTZfGNfjpEgEX&amp;branch=master)](https://travis-ci.com/janehmueller/python-json-config)![License](https://img.shields.io/pypi/l/python-json-config.svg)[![Version](https://img.shields.io/pypi/v/python-json-config.svg)](https://pypi.python.org/pypi/python-json-config/)# OverviewThis library allows to load json configs and access the values like members (i.e., `config.server.port`instead of `config['server']['port']`), validate the data types of fields and transform the values of fields.# Installing```pip install python-json-config```# Usage```from python_json_config import ConfigBuilder# create config parserbuilder = ConfigBuilder()# parse configconfig = builder.parse_config('path/to/config.json')# access elementshost = config.server.hostport = config.server.portmyfield = config.myfield```## Validate field types```builder.validate_field_type('server.ip', str)builder.validate_field_type('server.port', int)builder.validate_field_type('jwt.access_token_expires', str)```## Validate field values```from python_json_config.validators import is_unreserved_port, is_ipv4_address, is_timedelta# use provided methodsbuilder.validate_field_value('server.ip', is_ipv4_address)builder.validate_field_value('server.port', is_unreserved_port)builder.validate_field_value('jwt.access_token_expires', is_timedelta)# use custom validation functionbuilder.validate_field_value('server.ip', lambda ip: ip != '0.0.0.0')# return custom error messages in your lambdabuilder.validate_field_value('server.ip', lambda ip: (ip != '0.0.0.0', 'IP is unroutable.'))# chain validation functionsbuilder.validate_field_value('server.ip', [lambda ip: ip != 'localhost', lambda ip: ip != '127.0.0.1'])```## Transform field values```from python_json_config.transformers import to_timedelta# use provided methodsbuilder.transform_field_value('jwt.access_token_expires', to_timedelta)from datetime import datetime# parse a timedelta (e.g., Jun 1 2005) into a datetime objectbuilder.transform_field_value('important_date', lambda date: datetime.strptime(date, '%b %d %Y'))```## Define field access settings```# required means an error is thrown if a non-existing field is accessed builder.set_field_access_required()# return None for the following fields instead of throwing an errorbuilder.add_optional_field('server.host')builder.add_optional_fields(['cache.ttl', 'server.path'])# optional means None is returned if a non-existing field is accessed builder.set_field_access_optional()# throw an error for the following fields instead of returning Nonebuilder.add_required_field('server.user')builder.add_required_fields(['cache.backend', 'server.password'])```## Access config values```port = config.server.portassert port &gt; 1023ip = config.server.ipassert ip not in ['0.0.0.0', 'localhost', '127.0.0.1']important_date = config.important_dateassert isinstance(important_date, datetime)jwt_access_token_expires = config.jwt.access_token_expiresassert isinstance(jwt_access_token_expires, timedelta)```## Change config values```config = ConfigBuilder().parse_config({&quot;server.port&quot;: 1024})config.add(&quot;server.host&quot;, &quot;localhost&quot;)assert config.server.host == &quot;localhost&quot;config.add(&quot;cache&quot;, &quot;redis&quot;)assert config.cache == &quot;redis&quot;config.update(&quot;server.port&quot;, 1025)assert config.server.port == 1025config.update(&quot;server.user&quot;, &quot;user&quot;, upsert=True)assert config.server.user == &quot;user&quot;```## Overwrite fields with environment variablesFirst, set environment variables (e.g., via bash):```$ MYPROJECT_SERVER_HOST=&quot;localhost&quot;$ MYPROJECT_CACHE=&quot;redis&quot;$ MYPYTHONPROJECTS_USER=&quot;user&quot;```Escape underscores in names of variables with another underscore:```$ MYPYTHONPROJECTS_LOG__FILE=&quot;project.log&quot;```Then just tell the builder, which prefixes should be merged:```builder = ConfigBuilder()# you can also just pass a single prefix (builder.merge_with_env_variables(&quot;MYPROJECT&quot;)builder.merge_with_env_variables([&quot;MYPROJECT&quot;, &quot;MYPYTHONPROJECTS&quot;])config = builder.parse_config({&quot;server.host&quot;: &quot;0.0.0.0&quot;})assert config.server.host == &quot;localhost&quot;assert config.cache == &quot;redis&quot;assert config.user == &quot;user&quot;assert config.log_file == &quot;project.log&quot;```Alternatively you can also do the merging after creating the config object:```builder = ConfigBuilder()config = builder.parse_config({&quot;server.host&quot;: &quot;0.0.0.0&quot;})config.merge_with_env_variables([&quot;MYPROJECT&quot;, &quot;MYPYTHONPROJECTS&quot;])assert config.server.host == &quot;localhost&quot;assert config.cache == &quot;redis&quot;assert config.user == &quot;user&quot;```## SerializationThe config can be serialized to a dictionary, json or binary (via pickle or msgpack).```builder = ConfigBuilder()config = builder.parse_config({&quot;server.host&quot;: &quot;0.0.0.0&quot;})import picklepickle_config = pickle.loads(pickle.dumps(config))dict_config = builder.parse_config(config.to_dict())import jsonjson_config = builder.parse_config(config.to_json())import msgpackmsgpack_config = Config.from_msgpack(config.to_msgpack())```**Important note:** serializing via json or msgpack will stringify any non-serializable value (e.g., datetime objects).</longdescription>
</pkgmetadata>