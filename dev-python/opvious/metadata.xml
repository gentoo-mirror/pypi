<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Opvious Python SDK  [![CI](https://github.com/opvious/sdk.py/actions/workflows/ci.yml/badge.svg)](https://github.com/opvious/sdk.py/actions/workflows/ci.yml) [![Pypi badge](https://badge.fury.io/py/opvious.svg)](https://pypi.python.org/pypi/opvious/)An SDK for solving linear, mixed-integer, and quadratic optimization models viathe [Opvious](https://www.opvious.io) API.## Highlights### Declarative modeling API+ Extensive static validations+ Exportable to LaTeX+ Extensible support for high-level patterns (activation variables, masks, ...)```pythonimport opvious.modeling as omclass BinPacking(om.Model):  items = om.Dimension()  # All items to bin  weight = om.Parameter.non_negative(items)  # Weight per item  bins = om.interval(1, om.size(items), name=&quot;B&quot;)  # Available bins  max_weight = om.Parameter.non_negative()  # Maximum weight for each bin  assigned = om.Variable.indicator(bins, items)  # Bin to item assignment  used = om.fragments.ActivationVariable(assigned, projection=1)  # 1 if a bin is used  @om.constraint  def each_item_is_assigned_once(self):    for i in self.items:      yield om.total(self.assigned(b, i) for b in self.bins) == 1  @om.constraint  def bin_weights_are_below_max(self):    for b in self.bins:      bin_weight = om.total(self.weight(i) * self.assigned(b, i) for i in self.items)      yield bin_weight &lt;= self.max_weight()  @om.objective  def minimize_bins_used(self):    return om.total(self.used(b) for b in self.bins)```Auto-generated specification:&lt;p align=&quot;center&quot;&gt;  &lt;img alt=&quot;Bin package LaTeX specification&quot; src=&quot;resources/images/bin-packing-specification.png&quot; width=&quot;600px&quot;&gt;&lt;/p&gt;### Transparent remote solves+ No local solver installation required+ Real-time progress notifications+ Seamless data import/export via native support for `pandas`+ Flexible multi-objective support: weighted sums, epsilon constraints, ...+ Built-in debugging capabilities: relaxations, fully annotated LP formatting,  ...```pythonimport opviousclient = opvious.Client.default()solution = await client.solve(  opvious.Problem(    specification=BinPacking().specification(),    parameters={      &quot;weight&quot;: {&quot;a&quot;: 10.5, &quot;b&quot;: 22, &quot;c&quot;: 48},      &quot;binMaxWeight&quot;: 50,    },  ),)assignments = solution.outputs.variable(&quot;assigned&quot;) # Optimal values```Take a look at https://opvious.readthedocs.io for the full documentation or[these notebooks][notebooks] to see the SDK in action.[notebooks]: https://github.com/opvious/examples/tree/main/notebooks</longdescription>
</pkgmetadata>