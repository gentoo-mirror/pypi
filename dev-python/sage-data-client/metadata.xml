<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Sage Data API ClientThis is the official Sage Python data API client. Its main goal is to make writing queries and working with the results easy. It does this by:1. Providing a simple query function which talks to the data API.2. Providing the results in an easy to use [Pandas](https://pandas.pydata.org) data frame.## Installation```shpip install sage-data-client```## Usage Examples### Query API```pythonimport sage_data_client# query and load data into pandas data framedf = sage_data_client.query(    start=&quot;-1h&quot;,    filter={        &quot;name&quot;: &quot;env.temperature&quot;,    })# print results in data frameprint(df)# meta columns are expanded into meta.fieldname. for example, here we print the unique nodesprint(df[&quot;meta.vsn&quot;].unique())# print stats of the temperature data grouped by node + sensor.print(df.groupby([&quot;meta.vsn&quot;, &quot;meta.sensor&quot;]).value.agg([&quot;size&quot;, &quot;min&quot;, &quot;max&quot;, &quot;mean&quot;]))``````pythonimport sage_data_client# query and load data into pandas data framedf = sage_data_client.query(    start=&quot;-1h&quot;,    filter={        &quot;name&quot;: &quot;env.raingauge.*&quot;,    })# print number of results of each nameprint(df.groupby([&quot;meta.vsn&quot;, &quot;name&quot;]).size())```### Load results from fileIf we have saved the results of a query to a file `data.json`, we can also load using the `load` function as follows:```pythonimport sage_data_client# load results from local filedf = sage_data_client.load(&quot;data.json&quot;)# print number of results of each nameprint(df.groupby([&quot;meta.vsn&quot;, &quot;name&quot;]).size())```### Integration with NotebooksSince we leverage the fantastic work provided by the Pandas library, performing things like looking at dataframes or creating plots is easy.A basic example of querying and plotting data can be found [here](https://github.com/sagecontinuum/sage-data-client/blob/main/examples/plotting_example.ipynb).### Additional ExamplesAdditional code examples can be found in the [examples](https://github.com/sagecontinuum/sage-data-client/tree/main/examples) directory.If you're interested in contributing your own examples, feel free to add them to [examples/contrib](https://github.com/sagecontinuum/sage-data-client/tree/main/examples/contrib) and open a PR!## ReferenceThe `query` function accepts the following arguments:* `start`. Absolute or relative start timestamp. (**required**)* `end`. Absolute or relative end timestamp.* `head`. Limit results to `head` earliest values per series. (Only one of `head` or `tail` can be provided.)* `tail`. Limit results to `tail` latest values per series. (Only one of `head` or `tail` can be provided.)* `filter`. Key-value patterns to filter data on.</longdescription>
</pkgmetadata>