<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Rest Framework Complex Filter[![codecov](https://codecov.io/gh/kit-oz/drf-complex-filter/branch/main/graph/badge.svg?token=B6Z1LWBXOP)](https://codecov.io/gh/kit-oz/drf-complex-filter)DRF filter for complex queries## InstallingFor installing use ``pip`````bash    pip install drf-complex-filter```## UsageAdd ``ComplexQueryFilter`` to ``filter_backends``:```python  from drf_complex_filter.filters import ComplexQueryFilter  class UserViewSet(ModelViewSet):      queryset = User.objects.all()      serializer_class = UserSerializer      filter_backends = [ComplexQueryFilter]```And get some records```HTTP  GET /users?filters={&quot;type&quot;:&quot;operator&quot;,&quot;data&quot;:{&quot;attribute&quot;:&quot;first_name&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;value&quot;:&quot;John&quot;}}```## Filter operatorOperator may be one of three types```python  # Will return Q(field_name=value_for_compare)  operator_filter = {    &quot;type&quot;: &quot;operator&quot;,    &quot;data&quot;: {      &quot;attribute&quot;: &quot;field_name&quot;,      &quot;operator&quot;: &quot;=&quot;,      &quot;value&quot;: &quot;value_for_compare&quot;,    }  }  # Will combine through AND all operators passed in &quot;data&quot;  and_filter = {    &quot;type&quot;: &quot;and&quot;,    &quot;data&quot;: []  }  # Will combine through OR all operators passed in &quot;data&quot;  or_filter = {    &quot;type&quot;: &quot;or&quot;,    &quot;data&quot;: []  }```## Lookup operatorsThere are several basic operators in the package, but you are free to replace or expand this list.### Existing operatorsOperator label | Query operator-------------- | --------------Is | =Is not | !=Case-insensitive contains | *Case-insensitive not contains | !Greater | &gt;Greater than or is | &gt;=Less | &lt;Less than or is | &lt;=Value in list | inValue not in list | not_inCurrent user | meNot current user | not_me### Adding operatorsFirst, create a class containing your operators. It should contain at least a &quot;get_operators&quot; method that returns a dictionary with your operators.```pythonclass YourClassWithOperators:    def get_operators(self):        return {            &quot;simple_operator&quot;: lambda f, v, r, m: Q(**{f&quot;{f}&quot;: v}),            &quot;complex_operator&quot;: self.complex_operator,        }    @staticmethod    def complex_operator(field: str, value=None, request=None, model: Model = None)        return Q(**{f&quot;{field}&quot;: value})```Next, specify this class in the configuration.```pythonCOMPLEX_FILTER_SETTINGS = {    &quot;COMPARISON_CLASSES&quot;: [        &quot;drf_complex_filter.comparisons.CommonComparison&quot;,        &quot;drf_complex_filter.comparisons.DynamicComparison&quot;,        &quot;path.to.your.module.YourClassWithOperators&quot;,    ],}```You can now use these operators to filter models.## Computed valueSometimes you need to get the value dynamically on the server side instead of writing it directly to the filter.To do this, you can create a class containing the &quot;get_functions&quot; method.```pythonclass YourClassWithFunctions:    def get_functions(self):        return {            &quot;calculate_value&quot;: self.calculate_value,        }    @staticmethod    def calculate_value(request, model, my_arg):        return str(my_arg)```Then register this class in settings.```pythonCOMPLEX_FILTER_SETTINGS = {    &quot;VALUE_FUNCTIONS&quot;: [        &quot;drf_complex_filter.functions.DateFunctions&quot;,        &quot;path.to.your.module.YourClassWithFunctions&quot;,    ],}```And create an operator with a value like this:```python  value = {    &quot;func&quot;: &quot;name_of_func&quot;,    &quot;kwargs&quot;: { &quot;my_arg&quot;: &quot;value_of_my_arg&quot; },  }  operator_filter = {    &quot;type&quot;: &quot;operator&quot;,    &quot;data&quot;: {      &quot;attribute&quot;: &quot;field_name&quot;,      &quot;operator&quot;: &quot;=&quot;,      &quot;value&quot;: value,    }  }```Where:* __func__ - the name of the method to call* __kwargs__ - a dictionary with arguments to pass to the methodThe value will be calculated before being passed to the operator. That allows you to use the value obtained in this way with any operator that can correctly process it## Subquery calculationIf you have one big query that needs to be done in chunks (not one big execution, just few small execution in related models),You can add construction `RelatedModelName___` to your attribute name in operator,After that, this construction is executed in a separate request. ```python  operator_filter = {    &quot;type&quot;: &quot;operator&quot;,    &quot;data&quot;: {      &quot;attribute&quot;: &quot;RelatedModelName___field_name&quot;,      &quot;operator&quot;: &quot;=&quot;,      &quot;value&quot;: &quot;value_for_compare&quot;,    }  }    # if this RelatedModelName.objects.filter(field_name=&quot;value_for_compare&quot;) return objects with ids `2, 5, 9`,  # so this `operator_filter` is equivalent to    new_filter = {    &quot;type&quot;: &quot;operator&quot;,    &quot;data&quot;: {      &quot;attribute&quot;: &quot;RelatedModelNameField_id&quot;,      &quot;operator&quot;: &quot;in&quot;,      &quot;value&quot;: [2, 5, 9],    }  }    # and have two selects in DB:  # `select id from RelatedModelNameField where field_name = 'value_for_compare'`  # and `select * from MainTable where RelatedModelNameField_id in (2, 5, 9)````</longdescription>
</pkgmetadata>