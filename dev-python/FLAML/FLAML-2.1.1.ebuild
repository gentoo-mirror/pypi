# automatically generated by g-sorcery
# please do not edit this file

EAPI=8

REALNAME="${PN}"
LITERALNAME="${PN}"
REALVERSION="${PV}"
DIGEST_SOURCES="yes"
PYTHON_COMPAT=( python{3_10,3_11,3_12} )
DISTUTILS_USE_PEP517=standalone

inherit python-r1 gs-pypi

DESCRIPTION="A fast library for automated machine learning and tuning"

HOMEPAGE="https://github.com/microsoft/FLAML"
LICENSE=""
SRC_URI="https://files.pythonhosted.org/packages/source/${REALNAME::1}/${REALNAME}/${REALNAME}-${REALVERSION}.tar.gz"
SOURCEFILE="${REALNAME}-${REALVERSION}.tar.gz"
RESTRICT="test"

SLOT="0"
KEYWORDS="~amd64 ~x86"

IUSE="autogen automl autozero azureml benchmark blendsearch catboost forecast hf mathchat nlp nni notebook openai ray retrievechat spark synapse test ts_forecast vw"
DEPENDENCIES=">=dev-python/numpy-1.17.0_rc1[${PYTHON_USEDEP}]
	autogen? ( dev-python/openai[${PYTHON_USEDEP}] )
	autogen? ( dev-python/diskcache[${PYTHON_USEDEP}] )
	autogen? ( dev-python/termcolor[${PYTHON_USEDEP}] )
	automl? ( dev-python/lightgbm[${PYTHON_USEDEP}] )
	automl? ( dev-python/xgboost[${PYTHON_USEDEP}] )
	automl? ( >=dev-python/scipy-1.4.1[${PYTHON_USEDEP}] )
	automl? ( >=dev-python/pandas-1.1.4[${PYTHON_USEDEP}] )
	automl? ( dev-python/scikit-learn[${PYTHON_USEDEP}] )
	autozero? ( dev-python/scikit-learn[${PYTHON_USEDEP}] )
	autozero? ( dev-python/pandas[${PYTHON_USEDEP}] )
	autozero? ( dev-python/packaging[${PYTHON_USEDEP}] )
	azureml? ( dev-python/azureml-mlflow[${PYTHON_USEDEP}] )
	benchmark? ( dev-python/catboost[${PYTHON_USEDEP}] )
	benchmark? ( ~dev-python/psutil-5.8.0[${PYTHON_USEDEP}] )
	benchmark? ( dev-python/xgboost[${PYTHON_USEDEP}] )
	benchmark? ( ~dev-python/pandas-1.1.4[${PYTHON_USEDEP}] )
	blendsearch? ( dev-python/optuna[${PYTHON_USEDEP}] )
	blendsearch? ( dev-python/packaging[${PYTHON_USEDEP}] )
	catboost? ( dev-python/catboost[${PYTHON_USEDEP}] )
	forecast? ( dev-python/holidays[${PYTHON_USEDEP}] )
	forecast? ( dev-python/prophet[${PYTHON_USEDEP}] )
	forecast? ( >=dev-python/statsmodels-0.12.2[${PYTHON_USEDEP}] )
	forecast? ( dev-python/hcrystalball[${PYTHON_USEDEP}] )
	forecast? ( dev-python/pytorch-forecasting[${PYTHON_USEDEP}] )
	forecast? ( dev-python/pytorch-lightning[${PYTHON_USEDEP}] )
	forecast? ( dev-python/tensorboardX[${PYTHON_USEDEP}] )
	hf? ( dev-python/transformers[${PYTHON_USEDEP}] )
	hf? ( dev-python/datasets[${PYTHON_USEDEP}] )
	hf? ( dev-python/nltk[${PYTHON_USEDEP}] )
	hf? ( dev-python/rouge-score[${PYTHON_USEDEP}] )
	hf? ( dev-python/seqeval[${PYTHON_USEDEP}] )
	mathchat? ( dev-python/openai[${PYTHON_USEDEP}] )
	mathchat? ( dev-python/diskcache[${PYTHON_USEDEP}] )
	mathchat? ( dev-python/termcolor[${PYTHON_USEDEP}] )
	mathchat? ( dev-python/sympy[${PYTHON_USEDEP}] )
	mathchat? ( ~dev-python/pydantic-1.10.9[${PYTHON_USEDEP}] )
	mathchat? ( dev-python/wolframalpha[${PYTHON_USEDEP}] )
	nlp? ( dev-python/transformers[${PYTHON_USEDEP}] )
	nlp? ( dev-python/datasets[${PYTHON_USEDEP}] )
	nlp? ( dev-python/nltk[${PYTHON_USEDEP}] )
	nlp? ( dev-python/rouge-score[${PYTHON_USEDEP}] )
	nlp? ( dev-python/seqeval[${PYTHON_USEDEP}] )
	nni? ( dev-python/nni[${PYTHON_USEDEP}] )
	notebook? ( dev-python/jupyter[${PYTHON_USEDEP}] )
	openai? ( dev-python/openai[${PYTHON_USEDEP}] )
	openai? ( dev-python/diskcache[${PYTHON_USEDEP}] )
	ray? ( dev-python/ray[${PYTHON_USEDEP}] )
	retrievechat? ( dev-python/openai[${PYTHON_USEDEP}] )
	retrievechat? ( dev-python/diskcache[${PYTHON_USEDEP}] )
	retrievechat? ( dev-python/termcolor[${PYTHON_USEDEP}] )
	retrievechat? ( dev-python/chromadb[${PYTHON_USEDEP}] )
	retrievechat? ( dev-python/tiktoken[${PYTHON_USEDEP}] )
	retrievechat? ( dev-python/sentence-transformers[${PYTHON_USEDEP}] )
	spark? ( dev-python/pyspark[${PYTHON_USEDEP}] )
	spark? ( dev-python/joblibspark[${PYTHON_USEDEP}] )
	spark? ( <dev-python/joblib-1.3.0[${PYTHON_USEDEP}] )
	synapse? ( dev-python/joblibspark[${PYTHON_USEDEP}] )
	synapse? ( dev-python/optuna[${PYTHON_USEDEP}] )
	synapse? ( dev-python/pyspark[${PYTHON_USEDEP}] )
	synapse? ( <dev-python/joblib-1.3.0[${PYTHON_USEDEP}] )
	test? ( dev-python/lightgbm[${PYTHON_USEDEP}] )
	test? ( dev-python/xgboost[${PYTHON_USEDEP}] )
	test? ( >=dev-python/scipy-1.4.1[${PYTHON_USEDEP}] )
	test? ( >=dev-python/pandas-1.1.4[${PYTHON_USEDEP}] )
	test? ( dev-python/scikit-learn[${PYTHON_USEDEP}] )
	test? ( dev-python/thop[${PYTHON_USEDEP}] )
	test? ( >=dev-python/pytest-6.1.1[${PYTHON_USEDEP}] )
	test? ( >=dev-python/coverage-5.3[${PYTHON_USEDEP}] )
	test? ( dev-python/pre-commit[${PYTHON_USEDEP}] )
	test? ( dev-python/torch[${PYTHON_USEDEP}] )
	test? ( dev-python/torchvision[${PYTHON_USEDEP}] )
	test? ( dev-python/catboost[${PYTHON_USEDEP}] )
	test? ( dev-python/rgf-python[${PYTHON_USEDEP}] )
	test? ( dev-python/optuna[${PYTHON_USEDEP}] )
	test? ( dev-python/openml[${PYTHON_USEDEP}] )
	test? ( >=dev-python/statsmodels-0.12.2[${PYTHON_USEDEP}] )
	test? ( ~dev-python/psutil-5.8.0[${PYTHON_USEDEP}] )
	test? ( dev-python/dataclasses[${PYTHON_USEDEP}] )
	test? ( dev-python/transformers[${PYTHON_USEDEP}] )
	test? ( dev-python/datasets[${PYTHON_USEDEP}] )
	test? ( dev-python/nltk[${PYTHON_USEDEP}] )
	test? ( dev-python/rouge-score[${PYTHON_USEDEP}] )
	test? ( dev-python/hcrystalball[${PYTHON_USEDEP}] )
	test? ( dev-python/seqeval[${PYTHON_USEDEP}] )
	test? ( dev-python/pytorch-forecasting[${PYTHON_USEDEP}] )
	test? ( dev-python/mlflow[${PYTHON_USEDEP}] )
	test? ( dev-python/pyspark[${PYTHON_USEDEP}] )
	test? ( dev-python/joblibspark[${PYTHON_USEDEP}] )
	test? ( dev-python/nbconvert[${PYTHON_USEDEP}] )
	test? ( dev-python/nbformat[${PYTHON_USEDEP}] )
	test? ( dev-python/ipykernel[${PYTHON_USEDEP}] )
	test? ( dev-python/pytorch-lightning[${PYTHON_USEDEP}] )
	test? ( dev-python/tensorboardX[${PYTHON_USEDEP}] )
	test? ( <dev-python/requests-2.29.0[${PYTHON_USEDEP}] )
	test? ( dev-python/packaging[${PYTHON_USEDEP}] )
	test? ( ~dev-python/pydantic-1.10.9[${PYTHON_USEDEP}] )
	test? ( dev-python/sympy[${PYTHON_USEDEP}] )
	test? ( dev-python/wolframalpha[${PYTHON_USEDEP}] )
	test? ( <dev-python/joblib-1.3.0[${PYTHON_USEDEP}] )
	ts_forecast? ( dev-python/holidays[${PYTHON_USEDEP}] )
	ts_forecast? ( dev-python/prophet[${PYTHON_USEDEP}] )
	ts_forecast? ( >=dev-python/statsmodels-0.12.2[${PYTHON_USEDEP}] )
	ts_forecast? ( dev-python/hcrystalball[${PYTHON_USEDEP}] )
	vw? ( dev-python/vowpalwabbit[${PYTHON_USEDEP}] )
	vw? ( dev-python/scikit-learn[${PYTHON_USEDEP}] )"
BDEPEND="${DEPENDENCIES}"
RDEPEND="${DEPENDENCIES}"
