<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Complete documentation is available at https://fudge.readthedocs.org/en/latest/Fudge is a Python module for using fake objects (mocks and stubs) to test real ones.In readable Python code, you declare what methods are available on your fake andhow they should be called. Then you inject that into your application and starttesting. This declarative approach means you don't have to record and playbackactions and you don't have to inspect your fakes after running code. If the fakeobject was used incorrectly then you'll see an informative exception messagewith a traceback that points to the culprit.Here is a quick preview of how you can test code that sendsemail without actually sending email::    @fudge.patch('smtplib.SMTP')    def test_mailer(FakeSMTP):        # Declare how the SMTP class should be used:        (FakeSMTP.expects_call()                 .expects('connect')                 .expects('sendmail').with_arg_count(3))        # Run production code:        send_mail()        # ...expectations are verified automatically at the end of the test</longdescription>
</pkgmetadata>