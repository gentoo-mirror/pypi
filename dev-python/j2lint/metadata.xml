<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![GitHub license](https://badgen.net/github/license/aristanetworks/j2lint)](https://github.com/aristanetworks/j2lint/blob/devel/LICENSE)[![PyPI version fury.io](https://badge.fury.io/py/j2lint.svg)](https://pypi.python.org/pypi/j2lint/)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/j2lint.svg)](https://pypi.python.org/pypi/j2lint/)[![PyPI status](https://img.shields.io/pypi/status/j2lint.svg)](https://pypi.python.org/pypi/j2lint/)[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/aristanetworks/j2lint/graphs/commit-activity)# Jinja2-LinterAVD Ecosystem - Jinja2 Linter## Project GoalsBuild a Jinja2 linter that will provide the following capabilities:- Validate syntax according to [AVD style guide](https://avd.sh/en/stable/docs/contribution/style-guide.html).- Capability to run as part of a CI pipeline to enforce j2lint rules.- Develop an extension that works with VSCode and potentially other IDEs i.e PyCharm.## Syntax and code style issues| Code | Short Description | Description ||------|-------------------|-------------|| S0   | `jinja-syntax-error`            | Jinja2 syntax should be correct || S1   | `single-space-decorator`        | A single space should be added between Jinja2 curly brackets and a variable's name || S2   | `operator-enclosed-by-spaces`   | When variables are used in combination with an operator, the operator shall be enclosed by space || S3   | `jinja-statements-indentation`  | Nested jinja code block should follow next rules:&lt;br&gt;- All J2 statements must be enclosed by 1 space&lt;br&gt;- All J2 statements must be indented by 4 more spaces within jinja delimiter&lt;br&gt;- To close a control, end tag must have same indentation level || S4   | `jinja-statements-single-space` | Jinja statement should have at least a single space after '{%' and a single space before '%}' || S5   | `jinja-statements-no-tabs`      | Indentation should not use tabulation but 4 spaces || S6   | `jinja-statements-delimiter`    | Jinja statements should not have {%- or {%+ or -%} as delimiters || S7   | `single-statement-per-line`     | Jinja statements should be on separate lines || V1   | `jinja-variable-lower-case`     | All variables should use lower case || V2   | `jinja-variable-format`         | If variable is multi-words, underscore `_` should be used as a separator |## Getting Started### RequirementsPython version 3.8+### Install with pipTo get started, you can use Python pip to install j2lint:**Install the latest stable version:**```bashpip3 install j2lint```**Install the latest development version:**```bashpip3 install git+https://github.com/aristanetworks/j2lint.git```## Running the linter```bashj2lint &lt;path-to-directory-of-templates&gt;```### Running the linter on a specific file```bashj2lint &lt;path-to-directory-of-templates&gt;/template.j2```### Listing linting rules```bashj2lint --list```### Running the linter with verbose linter error output```bashj2lint &lt;path-to-directory-of-templates&gt; --verbose```### Running the linter with logs enabled. Logs saved in jinja2-linter.log in the current directory```bashj2lint &lt;path-to-directory-of-templates&gt; --log```To enable debug logs, use both options:```bashj2lint &lt;path-to-directory-of-templates&gt; --log --debug```### Running the linter with JSON format for linter error output```bashj2lint &lt;path-to-directory-of-templates&gt; --json```### Ignoring rules1. The --ignore option can have one or more of these values: syntax-error, single-space-decorator, filter-enclosed-by-spaces, jinja-statement-single-space, jinja-statements-indentation, no-tabs, single-statement-per-line, jinja-delimiter, jinja-variable-lower-case, jinja-variable-format.2. If multiple rules are to be ignored, use the --ignore option along with rule descriptions separated by space.    ```bash    j2lint &lt;path-to-directory-of-templates&gt; --ignore &lt;rule_description1&gt; &lt;rule_desc&gt;    ```&gt; **Note**&gt; This runs the custom linting rules in addition to the default linting rules.&gt; When using the `-i/--ignore` or `-w/--warn` options, the arguments MUST either:&gt; * Be entered at the end of the CLI as in the example above&gt; * Be entered as the last options before the `&lt;path-to-directory-of-templates&gt;`&gt;   with `--` separator.  e.g.&gt;   ```bash&gt;   j2lint --ignore &lt;rule_description1&gt; &lt;rule_desc&gt; -- &lt;path-to-directory-of-templates&gt;&gt;   ```3. If one or more linting rules are to be ignored only for a specific jinja template file, add a Jinja comment at the top of the file. The rule can be disabled using the short description of the rule or the id of the rule.    ```jinja2    {# j2lint: disable=S6}    # OR    {# j2lint: disable=jinja-delimiter #}    ```4. Disabling multiple rules    ```jinja2    {# j2lint: disable=jinja-delimiter j2lint: disable=S1 #}    ```### Adding custom rules1. Create a new rules directory under j2lint folder.2. Add custom rule classes which are similar to classes in j2lint/rules directory:    The file name of rules should be in snake_case and the class name should be the PascalCase version of the file name. For example:    - File name: `jinja_operator_has_spaces_rule.py`    - Class name: `JinjaOperatorHasSpacesRule`3. Run the jinja2 linter using --rules-dir option    ```bash    j2lint &lt;path-to-directory-of-templates&gt; --rules-dir &lt;custom-rules-directory&gt;    ```&gt; **Note**&gt; This runs the custom linting rules in addition to the default linting rules.### Running jinja2 linter help command```bashj2lint --help```### Running jinja2 linter on STDIN template. This option can be used with VS Code.```bashj2lint --stdin```### Using j2lint as a pre-commit-hook1. Add j2lint pre-commit hook inside your repository in .pre-commit-config.yaml.    ```bash    - repo: https://github.com/aristanetworks/j2lint.git        rev: &lt;release_tag/sha&gt;        hooks:        - id: j2lint    ```2. Run pre-commit -&gt; `pre-commit run --all-files`&gt; **Note**&gt; When using `-i/--ignore` or `-w/--warn` argument in pre-commit, use the&gt; following syntax&gt;&gt; ```bash&gt; - repo: https://github.com/aristanetworks/j2lint.git&gt;     rev: &lt;release_tag/sha&gt;&gt;     hooks:&gt;     - id: j2lint&gt;     # Using -- to separate the end of ignore from the positional arguments&gt;     # passed to j2lint&gt;       args: [--ignore, S3, jinja-statements-single-space, --]&gt; ```## AcknowledgmentsThis project is based on [salt-lint](https://github.com/warpnet/salt-lint) and [jinjalint](https://github.com/motet-a/jinjalint)</longdescription>
</pkgmetadata>