<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Build Status| |Coverage Status| |Known Vulnerabilities| |PYUP| |OpenSSF Best Practices|Open Broker API===============A Python package for building Service Brokers supporting API version 2.13+.Following `Open Service BrokerAPI Spec &lt;https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md&gt;`__ and `OpenService Broker API &lt;https://www.openservicebrokerapi.org/&gt;`__Check out the documentation_... _documentation: http://openbrokerapi.readthedocs.io/en/latest/To find out more about Platform Compatibility for OSBAPI versions, check out`Platform Compatibility for OSBAPI &lt;https://github.com/openservicebrokerapi/servicebroker/blob/master/compatibility.md&gt;`__ Not all features are supported with this library due to conflicting features.Installation------------This package is available for Python 3.8+... code:: bash    pip3 install openbrokerapi    # including gevent as server    pip3 install openbrokerapi[gevent]        # recommended production setup    pip3 install openbrokerapi[gunicorn]Or install the development version from github:.. code:: bash    pip3 install git+https://github.com/eruvanos/openbrokerapi.gitUsage-----You can start with a `skeleton project &lt;https://github.com/eruvanos/openbrokerapi-skeleton&gt;`__ or just from scratch... code:: python    from typing import Union, List    import openbrokerapi    from openbrokerapi import api    from openbrokerapi.api import ServiceBroker    from openbrokerapi.catalog import ServicePlan    from openbrokerapi.service_broker import (        Service,        ProvisionDetails,        ProvisionedServiceSpec,        DeprovisionDetails,        DeprovisionServiceSpec    )    class MyServiceBroker(ServiceBroker):        def catalog(self) -&gt; Union[Service, List[Service]]:            return Service(                id='service id',                name='service name',                description='service description',                bindable=False,                plans=[                    ServicePlan(                        id='plan id',                        name='plan name',                        description='plan description',                    )                ]            )        def provision(self,                      instance_id: str,                      details: ProvisionDetails,                      async_allowed: bool,                      **kwargs) -&gt; ProvisionedServiceSpec:            # Create service instance            # ...            return ProvisionedServiceSpec()        def deprovision(self,                        instance_id: str,                        details: DeprovisionDetails,                        async_allowed: bool,                        **kwargs) -&gt; DeprovisionServiceSpec:            # Delete service instance            # ...            return DeprovisionServiceSpec(is_async=False)    print('Start server on 127.0.0.1:5000')    print('Check the catalog at:')    print('&gt; curl 127.0.0.1:5000/v2/catalog -H &quot;X-Broker-API-Version: 2.14&quot;')    api.serve(MyServiceBroker(), None)    # Simply start the server    # api.serve(ExampleServiceBroker(), api.BrokerCredentials(&quot;&quot;, &quot;&quot;))    # or start the server without authentication    # api.serve(ExampleServiceBroker(), None)    # or start the server with multiple authentication    # api.serve(ExampleServiceBroker(), [api.BrokerCredentials(&quot;&quot;, &quot;&quot;), api.BrokerCredentials(&quot;&quot;, &quot;&quot;)])    # or with multiple service brokers and multiple credentials    # api.serve_multiple([ExampleServiceBroker(), ExampleServiceBroker()], [api.BrokerCredentials(&quot;&quot;, &quot;&quot;), api.BrokerCredentials(&quot;&quot;, &quot;&quot;)])    # or register blueprint to your own FlaskApp instance    # app = Flask(__name__)    # logger = basic_config()  # Use root logger with a basic configuration provided by openbrokerapi.log_util    # openbroker_bp = api.get_blueprint(ExampleServiceBroker(), api.BrokerCredentials(&quot;&quot;, &quot;&quot;), logger)    # app.register_blueprint(openbroker_bp)    # app.run(&quot;0.0.0.0&quot;)Deployment----------The included :code:`api.serve` function provides a server setup for **local usage only**.For productive deployments use the blueprint from :code:`api.get_blueprint` tosetup a production ready server like `Waitress &lt;https://docs.pylonsproject.org/projects/waitress/en/latest/&gt;`__or other mentioned in `Flask Deployment Docs &lt;http://flask.pocoo.org/docs/dev/deploying/wsgi-standalone/&gt;`__Error Types-----------Openbrokerapi defines a handful of error types in errors.py for somecommon error cases that your service broker may encounter. Raise thesefrom your ServiceBroker methods where appropriate, and openbrokerapiwill do the &quot;right thing&quot; (â„¢), and give Cloud Foundry an appropriatestatus code, as per the Service Broker API specification.Bugs or Issues--------------Please report bugs, issues or feature requests to `GithubIssues`_How to contribute-----------------You want to contribute, I really appreciate!So let us check how you can contribute:- Create an issue in the `Github Issues`_. Please provide all information that you think are usefull to solve it.- Use the `Github Issues`_ to create a feature request, so we can discuss and find a good interface for that feature.- Create a Pull Request. There are some things that will make it easier to review your Pull Request:    - Use a new branch for every Pull Request    - Include just related commits in this branch    - Less commits are better, one would be the best (You can squash them.)    - Always add tests for your feature, if you are not familiar with writing tests, ask for help.    - Hint: To update your fork with the newest changes, follow `these instructions &lt;https://stackoverflow.com/a/7244456/2947505&gt;`_... _Github Issues: https://github.com/eruvanos/openbrokerapi/issues.. |Build Status| image:: https://github.com/eruvanos/openbrokerapi/actions/workflows/python-test.yml/badge.svg    :target: https://github.com/eruvanos/openbrokerapi/actions/workflows/python-test.yml.. |Coverage Status| image:: https://coveralls.io/repos/github/eruvanos/openbrokerapi/badge.svg?branch=master   :target: https://coveralls.io/github/eruvanos/openbrokerapi?branch=main.. |Known Vulnerabilities| image:: https://github.com/eruvanos/openbrokerapi/actions/workflows/codeql.yml/badge.svg   :target: https://github.com/eruvanos/openbrokerapi/actions/workflows/codeql.yml.. |PYUP| image:: https://pyup.io/repos/github/eruvanos/openbrokerapi/shield.svg     :target: https://pyup.io/repos/github/eruvanos/openbrokerapi/.. |OpenSSF Best Practices| image:: https://bestpractices.coreinfrastructure.org/projects/7220/badge     :target: https://bestpractices.coreinfrastructure.org/projects/7220/badge)](https://bestpractices.coreinfrastructure.org/projects/7220</longdescription>
</pkgmetadata>