<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Hipo DRF Exceptions[![hipo](https://img.shields.io/badge/hipo-red.svg)](https://hipolabs.com) [![Build Status](https://travis-ci.org/Hipo/hipo-drf-exceptions.svg?branch=master)](https://travis-ci.org/Hipo/hipo-drf-exceptions) [![pypi](https://img.shields.io/pypi/v/hipo-drf-exceptions.svg)](https://pypi.org/project/hipo-drf-exceptions/)A [Django](https://www.djangoproject.com) app for returning consistent, verbose and easy to parse error messages on [Django Rest Framework](https://www.django-rest-framework.org/) backends.Parsing error messages generated by DRF is a bit of pain for client developers. They need to try-catch different possible error formats. When you add errors raised at the business logic level, the error parsing becomes even more difficult. This package unifies the output format of DRF in the &quot;Hipo Error Protocol&quot;. *No more &quot;An error occured.&quot; errors.*This package also provides the &quot;fallback message&quot;, a text string that always contains a human readable error summary. This way, client developers can always fallback and show this message when the client receives an error that is not handled.&gt; Sounds cool! Can client devs just use this field all the time?In our past experience, we noticed that some _lazy_ client developers tend to use this message and avoid writing any code to parse the error bundle. However, the message in this field is automatically generated and may not always be suitable for end users. In order to make clear that this is a *fallback*  message, we named this field &quot;fallback_message&quot;## Table of Contents- [Installation](#installation)- [Usage](#usage)- [Client SDKs](#client-sdks)- [Support](#support)- [Contributing](#contributing)## InstallationYou can get stable version of Hipo Excepitons by using pip, pipenv or poetry:```pip install hipo-drf-exceptions```## Usage### HandlerYou will need to set `EXCEPTION_HANDLER` of the `REST_FRAMEWORK` setting of your Django project settings.py file.```REST_FRAMEWORK = {    ..    'EXCEPTION_HANDLER': 'hipo_drf_exceptions.handler',}```### Example Error Responses#### Field ErrorYou can make validations on model level and raise `ValidationError` when it is required.```pythonfrom django.core.exceptions import ValidationErrorclass Invitation(models.Model):    email = models.EmailField(unique=True)    def save(self, *args, **kwargs):        if User.objects.filter(email=self.email).exists():            raise ValidationError({&quot;email&quot;: _(&quot;Email is already registered.&quot;)})                    super().save(*args, **kwargs)```If the view or serializer encounters with the `ValidationError`, The response will be like:```json{    &quot;type&quot;: &quot;ValidationError&quot;,    &quot;detail&quot;: {        &quot;email&quot;: [            &quot;Email is already registered.&quot;        ]    },    &quot;fallback_message&quot;: &quot;Email is already registered.&quot;}```#### Non Field ErrorImplement your own error classes.```pythonfrom hipo_drf_exceptions import BaseAPIExceptionclass ProfileCredentialError(BaseAPIException):    default_detail = _('Profile credentials are not correct.')```Raise error when it is required.```pythonclass AuthenticationView(GenericAPIView):    def post(self, request, *args, **kwargs):        ..        if not profile.check_password(password):            raise ProfileCredentialError()        ..```The response will be like:```json{    &quot;type&quot;: &quot;ProfileCredentialError&quot;,    &quot;detail&quot;: {        &quot;non_field_errors&quot;: [            &quot;Profile credentials are not correct.&quot;        ]    },    &quot;fallback_message&quot;: &quot;Profile credentials are not correct.&quot;}```## SettingsYou can set default key for Django's non field errors key (it is `&quot;__all__&quot;`) by adding this to your Django settings:```HIPO_DRF_EXCEPTIONS_SETTINGS = {    &quot;DJANGO_NON_FIELD_ERRORS_KEY&quot;: &quot;field_free_errors&quot;  # by default it's &quot;non_field_errors&quot; to be consistent with DRF.}```## TestingInstall dependencies via poetry.```poetry install```Run tests.```pytest test_project```## Client SDKsWe have SDKs for client side.- [`hipo-exceptions-js`](https://github.com/Hipo/hipo-exceptions-js) is for JS.- [`hipo-exceptions-android`](https://github.com/Hipo/hipo-exceptions-android) is for Android.## SupportPlease [open an issue](https://github.com/hipo/hipo-drf-exceptions/issues/new) for support.## ContributingPlease contribute using [Github Flow](https://guides.github.com/introduction/flow/). Create a branch, add commits, and [open a pull request](https://github.com/hipo/hipo-drf-exceptions/compare/).</longdescription>
</pkgmetadata>