<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- codecov badge --&gt;[![codecov](https://codecov.io/gh/cgarciae/simple-pytree/branch/main/graph/badge.svg?token=3IKEUAU3C8)](https://codecov.io/gh/cgarciae/simple-pytree)# Simple PytreeA _dead simple_ Python package for creating custom JAX pytree objects.* Strives to be minimal, the implementation is just ~100 lines of code* Has no dependencies other than JAX* Its compatible with both `dataclasses` and regular classes* It has no intention of supporting Neural Network use cases (e.g. partitioning)## Installation```bashpip install simple-pytree```## Usage```pythonimport jaxfrom simple_pytree import Pytreeclass Foo(Pytree):    def __init__(self, x, y):        self.x = x        self.y = yfoo = Foo(1, 2)foo = jax.tree_map(lambda x: -x, foo)assert foo.x == -1 and foo.y == -2```### Static fieldsYou can mark fields as static by assigning `static_field()` to a class attribute with the same name as the instance attribute:```pythonimport jaxfrom simple_pytree import Pytree, static_fieldclass Foo(Pytree):    y = static_field()        def __init__(self, x, y):        self.x = x        self.y = yfoo = Foo(1, 2)foo = jax.tree_map(lambda x: -x, foo) # y is not modifiedassert foo.x == -1 and foo.y == 2```Static fields are not included in the pytree leaves, theyare passed as pytree metadata instead.### Dataclasses`simple_pytree` provides a `dataclass` decorator you can use with classesthat contain `static_field`s:```pythonimport jaxfrom simple_pytree import Pytree, dataclass, static_field@dataclassclass Foo(Pytree):    x: int    y: int = static_field(default=2)    foo = Foo(1)foo = jax.tree_map(lambda x: -x, foo) # y is not modifiedassert foo.x == -1 and foo.y == 2````simple_pytree.dataclass` is just a wrapper around `dataclasses.dataclass` butwhen used static analysis tools and IDEs will understand that `static_field` is a field specifier just like `dataclasses.field`.### Mutability`Pytree` objects are immutable by default after `__init__`:```pythonfrom simple_pytree import Pytree, static_fieldclass Foo(Pytree):    y = static_field()        def __init__(self, x, y):        self.x = x        self.y = yfoo = Foo(1, 2)foo.x = 3 # AttributeError```If you want to make them mutable, you can use the `mutable` argument in class definition:```pythonfrom simple_pytree import Pytree, static_fieldclass Foo(Pytree, mutable=True):    y = static_field()        def __init__(self, x, y):        self.x = x        self.y = yfoo = Foo(1, 2)foo.x = 3 # OK```### Replacing fieldsIf you want to make a copy of a `Pytree` object with some fields modified, you can use the `.replace()` method:```pythonfrom simple_pytree import Pytree, static_fieldclass Foo(Pytree):    y = static_field()        def __init__(self, x, y):        self.x = x        self.y = yfoo = Foo(1, 2)foo = foo.replace(x=10)assert foo.x == 10 and foo.y == 2````replace` works for both mutable and immutable `Pytree` objects. If the classis a `dataclass`, `replace` internally use `dataclasses.replace`.</longdescription>
</pkgmetadata>