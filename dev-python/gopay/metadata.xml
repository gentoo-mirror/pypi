<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GoPay's Python SDK for Payments REST API[![Build Status](https://travis-ci.org/gopaycommunity/gopay-python-api.svg?branch=master)](https://travis-ci.org/gopaycommunity/gopay-python-api)## Requirements- Python &gt;= 3.8.1- dependencies:  - [`requests`](https://github.com/kennethreitz/requests)  - [`deprecated`](https://github.com/tantale/deprecated)## InstallationThe simplest way to install SDK is to use [PIP](https://docs.python.org/3/installing/):```bashpip install gopay```## Basic usage```pythonimport gopayfrom gopay.enums import TokenScope, Language# minimal configurationpayments = gopay.payments({    &quot;goid&quot;: &quot;{{YOUR-GOID}}&quot;,    &quot;client_id&quot;: &quot;{{YOUR-CLIENT-ID}}&quot;,    &quot;client_secret&quot;: &quot;{{YOUR-CLIENT-SECRET}}&quot;,    &quot;gateway_url&quot;: 'https://gw.sandbox.gopay.com/api'})# full configurationpayments = gopay.payments({    &quot;goid&quot;: &quot;{{YOUR-GOID}}&quot;,    &quot;client_id&quot;: &quot;{{YOUR-CLIENT-ID}}&quot;,    &quot;client_secret&quot;: &quot;{{YOUR-CLIENT-SECRET}}&quot;,    &quot;gateway_url&quot;: 'https://gw.sandbox.gopay.com/api'    &quot;scope&quot;: TokenScope.ALL,    &quot;language&quot;: Language.CZECH})# Sandbox URL: https://gw.sandbox.gopay.com/api# Production URL: https://gate.gopay.cz/api```### Configuration#### Required fieldsRequired field | Data type | Documentation |-------------- | --------- | ----------- |`goid` | string | GoID assigned by GoPay (production or sandbox) |`client_id` | string | Client ID assigned by GoPay (production or sandbox) |`client_secret` | string | Client Secret assigned by GoPay (production or sandbox) |`gateway_url` | string | URL of the environment - production or sandbox (see [Docs](https://doc.gopay.com)) |#### Optional fieldsOptional field | Data type | Default value | Documentation |-------------- | --------- | ------------- | ------------- |`scope` | string | [`gopay.enums.TokenScope.ALL`](gopay/enums.py) | &lt;https://doc.gopay.com/#access-token&gt; |`language` | string | [`gopay.enums.Language.ENGLISH`](gopay/enums.py) | default language to use + [localization of errors](https://doc.gopay.com/#error)### Available methodsAPI | SDK method |--- | ---------- |[Create a payment](https://doc.gopay.com#payment-creation) | `payments.create_payment(payment: dict)` |[Get status of a payment](https://doc.gopay.com#payment-inquiry) | `payments.get_status(payment_id: str \| int)` |[Refund a payment](https://doc.gopay.com#payment-refund) | `payments.refund_payment(payment_id: int \| str, amount: int)` |[Create a recurring payment](https://doc.gopay.com#creating-a-recurrence) | `payments.create_recurrence(payment_id: int \| str, payment: dict)` |[Cancel a recurring payment](https://doc.gopay.com#void-a-recurring-payment) | `payments.void_recurrence(payment_id: int \| str)` |[Capture a preauthorized payment](https://doc.gopay.com#capturing-a-preauthorized-payment) | `payments.capture_authorization(payment_id: int \| str)` |[Capture a preauthorized payment partially](https://doc.gopay.com#partially-capturing-a-preauthorized-payment) | `payments.capture_authorization_partial(payment_id: int \| str, payment: dict)` |[Void a preauthorized payment](https://doc.gopay.com#voiding-a-preauthorized-payment) | `payments.void_authorization(payment_id: int \| str)` |[Get payment card details](https://doc.gopay.com#payment-card-inquiry) | `payments.get_card_details(card_id: int \| str)` |[Delete a saved card](https://doc.gopay.com#payment-card-deletion) | `payments.delete_card(card_id: int \| str)` |[Get allowed payment methods for a currency](https://doc.gopay.com#available-payment-methods-for-a-currency) | `payments.get_payment_instruments(goid: int \| str, currency: gopay.enums.Currency)` |[Get all allowed payment methods](https://doc.gopay.com#all-available-payment-methods) | `payments.get_payment_instruments_all(goid: int \| str)` |[Generate an account statement](https://doc.gopay.com#account-statement) | `payments.get_account_statement(statement_request: dict)`### SDK response? Has my call succeed?SDK returns wrapped API response. Every method returns[`gopay.http.Response` object](gopay/http.py). Structure of the `json`should be same as in [documentation](https://doc.gopay.com).SDK throws no exception. Please create an issue if you catch one.```pythonresponse = payments.create_payment(...)if response.success:    print(f&quot;Hooray, API returned {response}&quot;)    return response.json[&quot;gw_url&quot;] # url for initiation of gatewayelse:    # errors format: https://doc.gopay.com#HTTP-result-codes    print(f&quot;Oops, API returned  {response.status_code}: {response}&quot;)```Property/Method | Description |------ | ---------- |`response.success` | Checks if API call was successful |`response.json` | decoded response, returned objects are converted into a dictionary if possiblem |`response.status_code` | HTTP status code |`response.raw_body` | raw bytes of the reponse content### Are required fields and allowed values validated?**Not yet.** API [validates fields](https://doc.gopay.com/#error) pretty extensivelyso there is no need to duplicate validation in SDK. That's why SDK just calls API whichbehavior is well documented in [doc.gopay.com](https://doc.gopay.com).In the future, we might use Pydantic for parsing and validation.*****## Advanced usage### Initiation of the payment gateway```python# create payment and pass url to template (e.g. Flask, Django)response = payments.create_payment(...)if response.has_succeed():    context = {        'gateway_url': response.json['gw_url'],        'embedjs_url': payments.get_embedjs_url    }    # render template```#### [Inline gateway](https://doc.gopay.com#inline)```jinja&lt;form action=&quot;{{ gateway_url }}&quot; method=&quot;post&quot; id=&quot;gopay-payment-button&quot;&gt;  &lt;button name=&quot;pay&quot; type=&quot;submit&quot;&gt;Pay&lt;/button&gt;  &lt;script type=&quot;text/javascript&quot; src=&quot;{{ embedjs_url }}&quot;&gt;&lt;/script&gt;&lt;/form&gt;```#### [Redirect gateway](https://doc.gopay.com#redirect)```jinja&lt;form action=&quot;{{ gateway_url }}&quot; method=&quot;post&quot;&gt;  &lt;button name=&quot;pay&quot; type=&quot;submit&quot;&gt;Pay&lt;/button&gt;&lt;/form&gt;```#### [Asynchronous initialization using JavaScript](https://doc.gopay.com#inline)### [Enums](https://doc.gopay.com#enums)Instead of hardcoding bank codes string you can use predefined enums.Check using enums in  [create-payment example](/examples/create_payment.py)Type | Description |---- | ----------- |[Language](/gopay/enums.py) | Payment language, localization of error messages |[Token scope](/gopay/enums.py) | Authorization scope for [OAuth2](https://doc.gopay.com/en/#oauth) |[Payment enums](/gopay/enums.py) | Enums for creating payment |[Response enums](/gopay/enums.py) | Result of creating payment, executing payment operations |### Cache access tokenAccess token expires after 30 minutes it's expensive to use new token for every request.By default, tokens are stored in memory [`gopay.services.DefaultCache`](/gopay/services.py) so they are reused as long as the object exists.But you can implement your cache and store tokens in Memcache, Redis, files, ... It's up to you.Your cache should inherit from [`gopay.services.AbstractCache`](/gopay/services.py) and implement its methods `get_token` and `set_token`.Be aware that there are two [scopes](https://doc.gopay.com/#access-token) (`TokenScope`) andSDK can be used for different clients (`client_id`, `gateway_url`). So `key` passed to methods is unique identifier (`str`) that is built for current environment.Below you can see example implementation of caching tokens in memory:```pythonfrom gopay.services import AbstractCachefrom gopay.http import AccessTokenclass MyCache(AbstractCache):    def __init__(self):        self.tokens: dict[str, AccessToken] = {}    def get_token(self, key: str) -&gt; AccessToken | None:        return self.tokens.get(key) # return None if token doesn't exist    def set_token(self, key: str, token: AccessToken) -&gt; None:        self.tokens[key] = token# register cache in optional service configurationpayments = gopay.payments(    {...}, # your config    {&quot;cache&quot;: MyCache()})```### Log HTTP communicationYou can log every request and response from communication with API. Check available loggers below.Or you can implement your own logger, just implement function that matches the following signature:```pythondef logger(gopay.http.Request, gopay.http.Response) -&gt; Any: ...# orCallable[[gopay.http.Response, gopay.http.Request], Any]```For example:```pythonfrom gopay.http import Request, Responsedef my_logger(request: Request, response: Response) -&gt; None:    print(vars(request))    print(vars(response))# register logger in optional service configurationpayments = gopay.payments(    {...}, # your config    {&quot;logger&quot;: my_logger})```The default logger uses `logging.debug` to log the responses and requests.## ContributingContributions from others would be very much appreciated! Send[pull request](https://github.com/gopaycommunity/gopay-python-api/pulls)/[issue](https://github.com/gopaycommunity/gopay-python-api/issues). Thanks!## LicenseCopyright (c) 2023 GoPay.com. MIT Licensed,see [LICENSE](https://github.com/gopaycommunity/gopay-python-api/blob/master/LICENSE) for details.</longdescription>
</pkgmetadata>