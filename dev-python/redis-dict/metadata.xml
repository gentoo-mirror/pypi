<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Redis-dict[![Build Status](https://travis-ci.com/Attumm/redis-dict.svg?branch=main)](https://travis-ci.com/Attumm/redis-dict)[![Downloads](https://pepy.tech/badge/redis-dict)](https://pepy.tech/project/redis-dict)RedisDict is a Python library that provides a convenient and familiar interface for interacting with Redis as if it were a Python dictionary. This simple yet powerful library enables you to manage key-value pairs in Redis using native Python syntax. It supports various data types, including strings, integers, floats, booleans, lists, and dictionaries, and includes additional utility functions for more complex use cases.By leveraging Redis for efficient key-value storage, RedisDict allows for high-performance data management and is particularly useful for handling large datasets that may exceed local memory capacity.## Features* Dictionary-like interface: Use familiar Python dictionary syntax to interact with Redis.* Data Type Support: Comprehensive support for various data types, including strings, integers, floats, booleans, lists, dictionaries, sets, and tuples.* Pipelining support: Use pipelines for batch operations to improve performance.* Expiration support: Set expiration times for keys using context managers.* Efficiency and Scalability: RedisDict is designed for use with large datasets and is optimized for efficiency. It retrieves only the data needed for a particular operation, ensuring efficient memory usage and fast performance.* Namespace Management: Provides simple and efficient namespace handling to help organize and manage data in Redis, streamlining data access and manipulation.* Distributed Computing: With its ability to seamlessly connect to other instances or servers with access to the same Redis instance, RedisDict enables easy distributed computing.* Custom data types: Add custom types and transformations to suit your specific needs.## ExampleRedis is an exceptionally fast database when used appropriately. RedisDict leverages Redis for efficient key-value storage, enabling high-performance data management.```pythonfrom redis_dict import RedisDictdic = RedisDict(namespace='bar')dic['foo'] = 42print(dic['foo'])  # Output: 42print('foo' in dic)  # Output: Truedic[&quot;baz&quot;] = &quot;hello world&quot;print(dic)  # Output: {'foo': 42, 'baz': 'hello world'}```In Redis our example looks like this.```127.0.0.1:6379&gt; KEYS &quot;*&quot;1) &quot;bar:foo&quot;2) &quot;bar:baz&quot;127.0.0.1:6379&gt; GET &quot;bar:foo&quot;&quot;int:42&quot;127.0.0.1:6379&gt; GET &quot;bar:baz&quot;&quot;str:hello world&quot;```### NamespacesRedisDict employs namespaces by default, providing an organized and efficient way to manage data across multiple projects. By using a dedicated RedisDict instance for each project, you can easily identify which data belongs to which application when inspecting Redis directly.This approach also minimizes the risk of key collisions between different applications, preventing hard-to-debug issues. By leveraging namespaces, RedisDict ensures a cleaner and more maintainable data management experience for developers working on multiple projects.## Advanced Features### ExpirationRedis provides a valuable feature that enables keys to expire. RedisDict supports this feature in the following ways:1. Set a default expiration time when creating a RedisDict instance. In this example, the keys will have a default expiration time of 10 seconds.```pythondic = RedisDict(namespace='app_name', expire=10)dic['gone'] = 'in ten seconds'```2. Temporarily set the default expiration time within the scope using a context manager. In this example, the key 'gone' will expire after 60 seconds. The default expiration time for other keys outside the context manager remains unchanged.```pythonfrom redis_dict import RedisDictdic = RedisDict(namespace='bar')seconds = 60with dic.expire_at(seconds):    dic['gone'] = 'in sixty seconds'```### BatchingEfficiently batch your requests using the Pipeline feature, which can be easily utilized with a context manager.```pythondic = RedisDict(namespace=&quot;example&quot;)# one round trip to rediswith dic.pipeline():    for index in range(100):        dic[str(index)] = index```### Distributed computingYou can use RedisDict for distributed computing by starting multiple RedisDict instances on different servers or instances that have access to the same Redis instance:```python# On server 1dic = RedisDict(namespace=&quot;example&quot;)dic[&quot;foo&quot;] = &quot;bar&quot;# On server 2from redis_dict import RedisDictdic = RedisDict(namespace=&quot;example&quot;)print(dic[&quot;foo&quot;]) # outputs &quot;bar&quot;```## More Examples### Caching made simple```pythonimport timefrom redis_dict import RedisDictdef expensive_function(x):    time.sleep(2)    return x * 2cache = RedisDict(namespace=&quot;cache&quot;, expire=10)def cached_expensive_function(x):    if x not in cache:        cache[x] = expensive_function(x)    return cache[x]start_time = time.time()print(cached_expensive_function(5))  # Takes around 2 seconds to compute and caches the result.print(f&quot;Time taken: {time.time() - start_time:.2f} seconds&quot;)start_time = time.time()print(cached_expensive_function(5))  # Fetches the result from the cache, taking almost no time.print(f&quot;Time taken: {time.time() - start_time:.2f} seconds&quot;)```### Redis-dict as dictionary```pythonfrom redis_dict import RedisDict# Create a RedisDict instance with a namespacedic = RedisDict(namespace=&quot;example&quot;)# Set key-value pairsdic[&quot;name&quot;] = &quot;John Doe&quot;dic[&quot;age&quot;] = 32dic[&quot;city&quot;] = &quot;Amsterdam&quot;# Get value by keyprint(dic[&quot;name&quot;])  # Output: John Doe# Update value by key, got a year olderdic[&quot;age&quot;] = 33# Check if key existsprint(&quot;name&quot; in dic)  # Output: Trueprint(&quot;country&quot; in dic)  # Output: False# Get value with a default value if the key doesn't existprint(dic.get(&quot;country&quot;, &quot;NL&quot;))  # Output: NL# Get the length (number of keys) of the RedisDictprint(len(dic))  # Output: 3# Iterate over keysfor key in dic:    print(key, dic[key])# Delete a key-value pairdel dic[&quot;city&quot;]# Clear all key-value pairs in the RedisDictdic.clear()# Get the length (number of keys) of the RedisDictprint(len(dic))  # Output: 0# Update RedisDict with multiple key-value pairsdic.update({&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: 3})# Use methods of a normal dictprint(list(dic.keys()))   # Output: ['a', 'b', 'c']print(list(dic.values()))  # Output: [1, 2, 3]print(list(dic.items()))  # Output: [('a', 1), ('b', 2), ('c', 3)]# Using pop() and popitem() methodsvalue = dic.pop(&quot;a&quot;)print(value)  # Output: 1key, value = dic.popitem()print(key, value)  # Output: 'c' 3 (example)# Using setdefault() methoddic.setdefault(&quot;d&quot;, 4)print(dic[&quot;d&quot;])  # Output: 4```### Additional ExamplesFor more advanced examples of RedisDict, please refer to the unit-test files in the repository. All features and functionalities are thoroughly tested in [unit tests (here)](https://github.com/Attumm/redis-dict/blob/main/tests.py#L1) Or take a look at load test for batching [load test](https://github.com/Attumm/redis-dict/blob/main/load_test.py.py#L1).The unit-tests can be as used as a starting point.### TestsThe RedisDict library includes a comprehensive suite of tests that ensure its correctness and resilience. The test suite covers various data types, edge cases, and error handling scenarios. It also employs the Hypothesis library for property-based testing, which provides fuzz testing to evaluate the implementation## Installation```shpip install redis-dict```### Note* Please be aware that this project is currently being utilized by various organizations in their production environments. If you have any questions or concerns, feel free to raise issues* This project only uses redis as dependency</longdescription>
</pkgmetadata>