<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>RunStats: Computing Statistics and Regression in One Pass=========================================================`RunStats`_ is an Apache2 licensed Python module for online statistics andonline regression. Statistics and regression summaries are computed in a singlepass. Previous values are not recorded in summaries.Long running systems often generate numbers summarizing performance. It couldbe the latency of a response or the time between requests. It's often useful touse these numbers in summary statistics like the arithmetic mean, minimum,standard deviation, etc. When many values are generated, computing thesesummaries can be computationally intensive. It may even be infeasible to keepevery recorded value. In such cases computing online statistics and onlineregression is necessary.In other cases, you may only have one opportunity to observe all the recordedvalues. Python's generators work exactly this way. Traditional methods forcalculating the variance and other higher moments requires multiple passes overthe data. With generators, this is not possible and so computing statistics ina single pass is necessary.There are also scenarios where a user is not interested in a complete summaryof the entire stream of data but rather wants to observe the current state ofthe system based on the recent past. In these cases exponential statistics areused. Instead of weighting all values uniformly in the statistics computation,an exponential decay weight is applied to older values. The decay rate isconfigurable and provides a mechanism for balancing recent values with pastvalues.The Python `RunStats`_ module was designed for these cases by providing classesfor computing online summary statistics and online linear regression in asingle pass. Summary objects work on sequences which may be larger than memoryor disk space permit. They may also be efficiently combined together to createaggregate summaries.Features--------- Pure-Python- Fully Documented- 100% Test Coverage- Numerically Stable- Optional Cython-optimized Extension (5-100 times faster)- Statistics summary computes mean, variance, standard deviation, skewness,  kurtosis, minimum and maximum.- Regression summary computes slope, intercept and correlation.- Developed on Python 3.9- Tested on CPython 3.6, 3.7, 3.8, 3.9- Tested on Linux, Mac OS X, and Windows- Tested using GitHub Actions.. image:: https://github.com/grantjenks/python-runstats/workflows/integration/badge.svg   :target: http://www.grantjenks.com/docs/runstats/Quickstart----------Installing `RunStats`_ is simple with `pip &lt;http://www.pip-installer.org/&gt;`_::  $ pip install runstatsYou can access documentation in the interpreter with Python's built-in helpfunction:.. code-block:: python   &gt;&gt;&gt; import runstats   &gt;&gt;&gt; help(runstats)                             # doctest: +SKIP   &gt;&gt;&gt; help(runstats.Statistics)                  # doctest: +SKIP   &gt;&gt;&gt; help(runstats.Regression)                  # doctest: +SKIP   &gt;&gt;&gt; help(runstats.ExponentialStatistics)       # doctest: +SKIPTutorial--------The Python `RunStats`_ module provides three types for computing runningstatistics: Statistics, ExponentialStatistics and Regression.The Regressionobject leverages Statistics internally for its calculations. Each can beinitialized without arguments:.. code-block:: python   &gt;&gt;&gt; from runstats import Statistics, Regression, ExponentialStatistics   &gt;&gt;&gt; stats = Statistics()   &gt;&gt;&gt; regr = Regression()   &gt;&gt;&gt; exp_stats = ExponentialStatistics()Statistics objects support four methods for modification. Use `push` to addvalues to the summary, `clear` to reset the summary, sum to combine Statisticssummaries and multiply to weight summary Statistics by a scalar... code-block:: python   &gt;&gt;&gt; for num in range(10):   ...     stats.push(float(num))   &gt;&gt;&gt; stats.mean()   4.5   &gt;&gt;&gt; stats.maximum()   9.0   &gt;&gt;&gt; stats += stats   &gt;&gt;&gt; stats.mean()   4.5   &gt;&gt;&gt; stats.variance()   8.68421052631579   &gt;&gt;&gt; len(stats)   20   &gt;&gt;&gt; stats *= 2   &gt;&gt;&gt; len(stats)   40   &gt;&gt;&gt; stats.clear()   &gt;&gt;&gt; len(stats)   0   &gt;&gt;&gt; stats.minimum()   nanUse the Python built-in `len` for the number of pushed values. Unfortunatelythe Python `min` and `max` built-ins may not be used for the minimum andmaximum as sequences are expected instead. Therefore, there are `minimum` and`maximum` methods provided for that purpose:.. code-block:: python   &gt;&gt;&gt; import random   &gt;&gt;&gt; random.seed(0)   &gt;&gt;&gt; for __ in range(1000):   ...     stats.push(random.random())   &gt;&gt;&gt; len(stats)   1000   &gt;&gt;&gt; min(stats)   Traceback (most recent call last):       ...   TypeError: ...   &gt;&gt;&gt; stats.minimum()   0.00024069652516689466   &gt;&gt;&gt; stats.maximum()   0.9996851255769114Statistics summaries provide five measures of a series: mean, variance,standard deviation, skewness and kurtosis:.. code-block:: python   &gt;&gt;&gt; stats = Statistics([1, 2, 5, 12, 5, 2, 1])   &gt;&gt;&gt; stats.mean()   4.0   &gt;&gt;&gt; stats.variance()   15.33333333333333   &gt;&gt;&gt; stats.stddev()   3.915780041490243   &gt;&gt;&gt; stats.skewness()   1.33122127314735   &gt;&gt;&gt; stats.kurtosis()   0.5496219281663506All internal calculations use Python's `float` type.Like Statistics, the Regression type supports some methods for modification:`push`, `clear` and sum:.. code-block:: python   &gt;&gt;&gt; regr.clear()   &gt;&gt;&gt; len(regr)   0   &gt;&gt;&gt; for num in range(10):   ...     regr.push(num, num + 5)   &gt;&gt;&gt; len(regr)   10   &gt;&gt;&gt; regr.slope()   1.0   &gt;&gt;&gt; more = Regression((num, num + 5) for num in range(10, 20))   &gt;&gt;&gt; total = regr + more   &gt;&gt;&gt; len(total)   20   &gt;&gt;&gt; total.slope()   1.0   &gt;&gt;&gt; total.intercept()   5.0   &gt;&gt;&gt; total.correlation()   1.0Regression summaries provide three measures of a series of pairs: slope,intercept and correlation. Note that, as a regression, the points need notexactly lie on a line:.. code-block:: python   &gt;&gt;&gt; regr = Regression([(1.2, 1.9), (3, 5.1), (4.9, 8.1), (7, 11)])   &gt;&gt;&gt; regr.slope()   1.5668320150154176   &gt;&gt;&gt; regr.intercept()   0.21850113956294415   &gt;&gt;&gt; regr.correlation()   0.9983810791694997Both constructors accept an optional iterable that is consumed and pushed intothe summary. Note that you may pass a generator as an iterable and thegenerator will be entirely consumed.The ExponentialStatistics are constructed by providing a decay rate, initialmean, and initial variance. The decay rate has default 0.9 and must be between0 and 1. The initial mean and variance default to zero... code-block:: python   &gt;&gt;&gt; exp_stats = ExponentialStatistics()   &gt;&gt;&gt; exp_stats.decay   0.9   &gt;&gt;&gt; exp_stats.mean()   0.0   &gt;&gt;&gt; exp_stats.variance()   0.0The decay rate is the weight by which the current statistics are discountedby. Consequently, (1 - decay) is the weight of the new value. Like the `Statistics` class,there are four methods for modification: `push`, `clear`, sum andmultiply... code-block:: python   &gt;&gt;&gt; for num in range(10):   ...     exp_stats.push(num)   &gt;&gt;&gt; exp_stats.mean()   3.486784400999999   &gt;&gt;&gt; exp_stats.variance()   11.593430921943071   &gt;&gt;&gt; exp_stats.stddev()   3.4049127627507683The decay of the exponential statistics can also be changed. The value must bebetween 0 and 1... code-block:: python   &gt;&gt;&gt; exp_stats.decay   0.9   &gt;&gt;&gt; exp_stats.decay = 0.5   &gt;&gt;&gt; exp_stats.decay   0.5   &gt;&gt;&gt; exp_stats.decay = 10   Traceback (most recent call last):     ...   ValueError: decay must be between 0 and 1The clear method allows to optionally set a new mean, new variance and newdecay. If none are provided mean and variance reset to zero, while the decay isnot changed... code-block:: python   &gt;&gt;&gt; exp_stats.clear()   &gt;&gt;&gt; exp_stats.decay   0.5   &gt;&gt;&gt; exp_stats.mean()   0.0   &gt;&gt;&gt; exp_stats.variance()   0.0Combining `ExponentialStatistics` is done by adding them together. The mean andvariance are simply added to create a new object. To weight each`ExponentialStatistics`, multiply them by a constant factor. If two`ExponentialStatistics` are added then the leftmost decay is used for the newobject. The `len` method is not supported... code-block:: python   &gt;&gt;&gt; alpha_stats = ExponentialStatistics(iterable=range(10))   &gt;&gt;&gt; beta_stats = ExponentialStatistics(decay=0.1)   &gt;&gt;&gt; for num in range(10):   ...     beta_stats.push(num)   &gt;&gt;&gt; exp_stats = beta_stats * 0.5 + alpha_stats * 0.5   &gt;&gt;&gt; exp_stats.decay   0.1   &gt;&gt;&gt; exp_stats.mean()   6.187836645All internal calculations of the Statistics and Regression classes are basedentirely on the C++ code by John Cook as posted in a couple of articles:* `Computing Skewness and Kurtosis in One Pass`_* `Computing Linear Regression in One Pass`_.. _`Computing Skewness and Kurtosis in One Pass`: http://www.johndcook.com/blog/skewness_kurtosis/.. _`Computing Linear Regression in One Pass`: http://www.johndcook.com/blog/running_regression/The ExponentialStatistics implementation is based on:* Finch, 2009, Incremental Calculation of Weighted Mean and VarianceThe pure-Python version of `RunStats`_ is directly available if preferred... code-block:: python   &gt;&gt;&gt; import runstats.core   # Pure-Python   &gt;&gt;&gt; runstats.core.Statistics   &lt;class 'runstats.core.Statistics'&gt;When importing from `runstats` the Cython-optimized version `_core` ispreferred and the `core` version is used as fallback. Micro-benchmarkingStatistics and Regression by calling `push` repeatedly shows theCython-optimized extension as 20-40 times faster than the pure-Pythonextension... _`RunStats`: http://www.grantjenks.com/docs/runstats/Reference and Indices---------------------* `RunStats Documentation`_* `RunStats API Reference`_* `RunStats at PyPI`_* `RunStats at GitHub`_* `RunStats Issue Tracker`_.. _`RunStats Documentation`: http://www.grantjenks.com/docs/runstats/.. _`RunStats API Reference`: http://www.grantjenks.com/docs/runstats/api.html.. _`RunStats at PyPI`: https://pypi.python.org/pypi/runstats/.. _`RunStats at GitHub`: https://github.com/grantjenks/python-runstats/.. _`RunStats Issue Tracker`: https://github.com/grantjenks/python-runstats/issues/License-------Copyright 2013-2021 Grant JenksLicensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not usethis file except in compliance with the License.  You may obtain a copy of theLicense at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, software distributedunder the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES ORCONDITIONS OF ANY KIND, either express or implied.  See the License for thespecific language governing permissions and limitations under the License.</longdescription>
</pkgmetadata>