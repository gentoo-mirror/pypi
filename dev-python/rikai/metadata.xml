<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Apache License](https://img.shields.io/github/license/eto-ai/rikai?style=for-the-badge)[![Read The Doc](https://img.shields.io/readthedocs/rikai?style=for-the-badge)](https://rikai.readthedocs.io/)[![javadoc](https://javadoc.io/badge2/ai.eto/rikai_2.12/javadoc.svg?style=for-the-badge)](https://javadoc.io/doc/ai.eto/rikai_2.12)![Pypi version](https://img.shields.io/pypi/v/rikai?style=for-the-badge)![Github Action](https://img.shields.io/github/workflow/status/eto-ai/rikai/Python?style=for-the-badge)![stability-experimental](https://img.shields.io/badge/stability-experimental-orange.svg?style=for-the-badge)Join the community:[![Join the chat at https://gitter.im/rikaidev/community](https://img.shields.io/badge/chat-on%20gitter-green?style=for-the-badge)](https://gitter.im/rikaidev/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge)&gt; :heavy_exclamation_mark: This repository is still experimental. No API-compatibility is guaranteed.# RikaiRikai is a framework specifically designed for AI workflows focused around large scale unstructured datasets(e.g., images, videos, sensor data (future), text (future), and more).Through every stage of the AI modeling workflow,Rikai strives to offer a great developer experience when working with real-world AI datasets.The quality of an AI dataset can make or break an AI project, but tooling for AI data is sorely lacking in ergonomics.As a result, practitioners must spend most of their time and effort wrestling with their data instead of innovating on the models and use cases.Rikai alleviates the pain that AI practitioners experience on a daily basis dealing with the myriad of tedious data tasks,so they can focus again on model-building and problem solving.To start trying Rikai right away, checkout the [Quickstart Guide](https://rikai.readthedocs.io/en/latest/quickstart.html).## Main Features### Data formatThe core of Rikai is a data format (&quot;rikai format&quot;) based on [Apache Parquet](https://parquet.apache.org/).Rikai augments parquet with a rich collection of semantic types design specifically for unstructured data and annotations.### IntegrationsRikai comes with an extensive set of I/O connectors. For ETL, Rikai is able to consume popular formats like ROS bags and Coco.For analysis, it's easy to read Rikai data into pandas/spark DataFrames (Rikai handles serde for the semantic types).And for training, Rikai allows direct creation of Pytorch/Tensorflow datasets without manual conversion.### SQL-ML EngineRikai extends Spark SQL with ML capability which allows users to analyze Rikai datasets using own models with SQL(&quot;Bring your own model&quot;)### VisualizationCarefully crafted data-visualization embedded with semantic types, especially in Jupyter notebooks,to help you visualize and inspect your AI data without having to remember complicated raw image manipulations.## Roadmap1. Improved video support2. Text / sensors / geospatial support3. Versioning support built into the dataset4. Better Rikai UDT-support5. Declarative annotation API (think vega-lite for annotating images/videos)6. Integrations into dbt and BI tools## Example```pythonfrom pyspark.sql import Rowfrom pyspark.ml.linalg import DenseMatrixfrom rikai.types import Image, Box2dfrom rikai.numpy import wrapimport numpy as npdf = spark.createDataFrame(    [        {            &quot;id&quot;: 1,            &quot;mat&quot;: DenseMatrix(2, 2, range(4)),            &quot;image&quot;: Image(&quot;s3://foo/bar/1.png&quot;),            &quot;annotations&quot;: [                Row(                    label=&quot;cat&quot;,                    mask=wrap(np.random.rand(256, 256)),                    bbox=Box2d(xmin=1.0, ymin=2.0, xmax=3.0, ymax=4.0),                )            ],        }    ])df.write.format(&quot;rikai&quot;).save(&quot;s3://path/to/features&quot;)```Train dataset in `Pytorch````pythonfrom torch.utils.data import DataLoaderfrom torchvision import transforms as Tfrom rikai.pytorch.vision import Datasettransform = T.Compose([   T.Resize(640),   T.ToTensor(),   T.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))])dataset = Dataset(   &quot;s3://path/to/features&quot;,   image_column=&quot;image&quot;,   transform=transform)loader = DataLoader(    dataset,    batch_size=32,    num_workers=8,)for batch in loader:    predicts = model(batch.to(&quot;cuda&quot;))```Using a ML model in Spark SQL (**experiemental**)```sqlCREATE MODEL yolo5OPTIONS (min_confidence=0.3, device=&quot;gpu&quot;, batch_size=32)USING &quot;s3://bucket/to/yolo5_spec.yaml&quot;;SELECT id, ML_PREDICT(yolo5, image) FROM my_datasetWHERE split = &quot;train&quot; LIMIT 100;```Rikai can use MLflow as its model registry. This allows you to automatically pickup the latestmodel version if you're using the mlflow model registry. Here is a list of supported model flavors:+ PyTorch (pytorch)+ Tensorflow (tensorflow)+ Scikit-learn (sklearn)```sqlCREATE MODEL yolo5OPTIONS (min_confidence=0.3, device=&quot;gpu&quot;, batch_size=32)USING &quot;mlflow:///yolo5_model/&quot;;SELECT id, ML_PREDICT(yolo5, image) FROM my_datasetWHERE split = &quot;train&quot; LIMIT 100;```For more details on the model spec, see [SQL-ML documentation](https://rikai.readthedocs.io/en/latest/sqlml.html)## Getting StartedCurrently Rikai is maintained for &lt;a name=&quot;VersionMatrix&quot;&gt;&lt;/a&gt;Scala 2.12 and Python 3.7, 3.8, 3.9There are multiple ways to install Rikai:1. Try it using the included [Dockerfile](#Docker).2. Install via pip `pip install rikai`, with   [extras for gcp, pytorch/tf, and others](#Extras).3. Install from [source](#Source)Note: if you want to use Rikai with your own pyspark, please consult[rikai documentation](https://rikai.readthedocs.io/en/latest/spark.html) for tips.### &lt;a name=&quot;Docker&quot;&gt;&lt;/a&gt;DockerThe included Dockerfile creates a standalone demo image withJupyter, Pytorch, Spark, and rikai preinstalled with notebooks for youto play with the capabilities of the rikai feature store.To build and run the docker image from the current directory:```bash# Clone the repogit clone git@github.com:eto-ai/rikai rikai# Build the docker imagedocker build --tag rikai --network host .# Run the imagedocker run -p 0.0.0.0:8888:8888/tcp rikai:latest jupyter lab -ip 0.0.0.0 --port 8888```If successful, the console should then print out a clickable link to JupyterLab. You can alsoopen a browser tab and go to `localhost:8888`.### &lt;a name=&quot;Extras&quot;&gt;&lt;/a&gt;Install from pypiBase rikai library can be installed with just `pip install rikai`. Dependencies for supportingpytorch (pytorch and torchvision), jupyter (matplotlib and jupyterlab) are all part ofoptional extras. Many open-source datasets also use Youtube videos so we've also added pafy andyoutube-dl as optional extras as well.For example, if you want to use pytorch in Jupyter to train models on rikai datasets in s3containing Youtube videos you would run:`pip install rikai[pytorch,jupyter,youtube]`If you're not sure what you need and don't mind installing some extra dependencies, you cansimply install everything:`pip install rikai[all]`### &lt;a name=&quot;Source&quot;&gt;&lt;/a&gt;Install from sourceTo build from source you'll need python as well as Scala with sbt installed:```bash# Clone the repogit clone git@github.com:eto-ai/rikai rikai# Build the jarsbt publishLocal# Install python packagecd pythonpip install -e . # pip install -e .[all] to install all optional extras (see &quot;Install from pypi&quot;)```### Utilities[pre-commit](https://pre-commit.com/) can be helpful in keep consistent code format with the repository. It can trigger reformat and extra things in your local machine before the CI force you to do it.If you want it, install and enable `pre-commit````bashpip install pre-commitpre-commit install #in your local development directory#pre-commit installed at .git/hooks/pre-commit```If you want to uninstall it, it would be easy, too.```pre-commit uninstall```</longdescription>
</pkgmetadata>