<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Rhino Speech-to-Intent Engine DemosMade in Vancouver, Canada by [Picovoice](https://picovoice.ai)This package contains demos and commandline utilities for processing real-time audio (i.e. microphone) and audio filesusing Rhino Speech-to-Intent engine.## RhinoRhino is Picovoice's Speech-to-Intent engine. It directly infers intent from spoken commands within a given context ofinterest, in real-time. For example, given a spoken command&gt;Can I have a small double-shot espresso?Rhino infers that the user and emits the following inference result:```json{  &quot;isUnderstood&quot;: &quot;true&quot;,  &quot;intent&quot;: &quot;orderBeverage&quot;,  &quot;slots&quot;: {    &quot;beverage&quot;: &quot;espresso&quot;,    &quot;size&quot;: &quot;small&quot;,    &quot;numberOfShots&quot;: &quot;2&quot;  }}```Rhino is:- using deep neural networks trained in real-world environments.- compact and computationally-efficient. It is perfect for IoT.- self-service. Developers can train custom models using [Picovoice Console](https://console.picovoice.ai/).## Compatibility- Python 3.5+- Runs on Linux (x86_64), Mac (x86_64, arm64), Windows (x86_64), Raspberry Pi (all variants), NVIDIA Jetson Nano and BeagleBone.## Installation```consolesudo pip3 install pvrhinodemo```## AccessKeyRhino requires a valid Picovoice `AccessKey` at initialization. `AccessKey` acts as your credentials when using Rhino SDKs.You can get your `AccessKey` for free. Make sure to keep your `AccessKey` secret.Signup or Login to [Picovoice Console](https://console.picovoice.ai/) to get your `AccessKey`.## Usage### File DemoIt allows testing Rhino on a corpus of audio files. The demo is mainly useful for quantitative performancebenchmarking. It accepts 16kHz audio files. Rhino processes a single-channel audio stream if a stereo file isprovided it only processes the first (left) channel. Note that only the relevant spoken command should be present in thefile and no other speech. There also needs to be at least one second of silence at the end of the file.```consolerhino_demo_file --wav_path ${AUDIO_PATH} --access_key ${ACCESS_KEY} --context_path ${CONTEXT_PATH} ```### Microphone DemoIt opens an audio stream from a microphone and performs inference in spoken commands:```consolerhino_demo_mic --access_key ${ACCESS_KEY} --context_path ${CONTEXT_PATH}```It is possible that the default audio input device recognized by the demo is not the one being used. There are a couple of debugging facilities baked into the demo application to solve this. First, type the following into the console:```consolerhino_demo_mic --show_audio_devices```It provides information about various audio input devices on the box. On a Linux box, this is the console output```index: 0, device name: USB Audio Deviceindex: 1, device name: MacBook Air Microphone``` You can use the device index to specify which microphone to use for the demo. For instance, if you want to use the USB Audio Devicein the above example, you can invoke the demo application as below:```consolerhino_demo_mic --access_key ${ACCESS_KEY} --context_path ${CONTEXT_PATH} --audio_device_index 0```If a problem occurs, we suggest storing the recorded audio into a file for inspection. This can be achieved by:```consolerhino_demo_mic --access_key ${ACCESS_KEY} --context_path ${CONTEXT_PATH} --audio_device_index 0 --output_path ~/test.wav```</longdescription>
</pkgmetadata>