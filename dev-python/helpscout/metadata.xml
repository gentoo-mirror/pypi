<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|License MIT| | |PyPi Package| | |PyPi Versions||Build Status| | |Test Coverage| | |Code Climate|=========HelpScout=========This library allows you to interact with HelpScout using Python.* `Read The API Documentation &lt;https://laslabs.github.io/python-helpscout&gt;`_.. contents:: Table of Contents============Installation============Installation is easiest using Pip and PyPi::   pip install helpscoutIf you would like to contribute, or prefer Git::   git clone https://github.com/LasLabs/python-helpscout.git   cd python-helpscout   pip install -r requirements.txt   pip install .=====Usage=====The `HelpScout object &lt;https://laslabs.github.io/python-helpscout/helpscout.html#helpscout.HelpScout&gt;`_is the primary point of interaction with the HelpScout API.Connection==========Connecting to the HelpScout API will require an API Key, which is generated fromwithin your HelpScout account. In the below example, our key is ``API_KEY``... code-block:: python   from helpscout import HelpScout   hs = HelpScout('API_KEY')API Endpoints=============The HelpScout API endpoints are exposed as variables on the instantiated ``HelpScout``object. The available endpoints are:* `Conversations Endpoint &lt;https://laslabs.github.io/python-helpscout/helpscout.apis.html#module-helpscout.apis.conversations&gt;`_* `Customers Endpoint &lt;https://laslabs.github.io/python-helpscout/helpscout.apis.html#module-helpscout.apis.customers&gt;`_* `Mailboxes Endpoint &lt;https://laslabs.github.io/python-helpscout/helpscout.apis.html#module-helpscout.apis.mailboxes&gt;`_* `Tags Endpoint &lt;https://laslabs.github.io/python-helpscout/helpscout.apis.html#module-helpscout.apis.tags&gt;`_* `Teams Endpoint &lt;https://laslabs.github.io/python-helpscout/helpscout.apis.html#module-helpscout.apis.teams&gt;`_* `Users Endpoint &lt;https://laslabs.github.io/python-helpscout/helpscout.apis.html#module-helpscout.apis.users&gt;`_* `WebHook Endpoint &lt;https://laslabs.github.io/python-helpscout/helpscout.apis.html#module-helpscout.apis.web_hook&gt;`_They can also be viewed from the ``__apis__`` property of ``HelpScout``::   &gt;&gt;&gt; hs.__apis__   {'Conversations': &lt;helpscout.auth_proxy.AuthProxy object at 0x10783ddd0&gt;,    'Customers': &lt;helpscout.auth_proxy.AuthProxy object at 0x10783dd90&gt;,    'Mailboxes': &lt;helpscout.auth_proxy.AuthProxy object at 0x10783ded0&gt;,    'Users': &lt;helpscout.auth_proxy.AuthProxy object at 0x10783df50&gt;,    'Teams': &lt;helpscout.auth_proxy.AuthProxy object at 0x10783df10&gt;,    }API usage is as simple as calling the method with the required parameters anditerating the results:.. code-block:: python   for customer in hs.Customers.list(first_name='Help', last_name='Scout'):       print(customer)       print(customer.serialize())The output from the above would look something like the below when using theHelpScout demo data:.. code-block:: python   # This is the customer object itself (first print)   &lt;helpscout.models.customer.Customer object at 0x10783df10&gt;   # This is the serialized form of the customer (second print)   {'chats': [],    'social_profiles': [],    'first_name': u'Help',    'last_name': u'Scout',    'phones': [],    'created_at': '2017-09-16T18:38:37Z',    'modified_at': '2017-09-16T18:38:37Z',    u'__class__': 'Customer',    'websites': [],    'id': 143161083,    'location': u'Boston, MA',    'full_name': u'Help Scout',    'gender': 'unknown',    'photo_type': 'gravatar',    'type': 'customer',    'emails': [],    'photo_url': u'https://secure.gravatar.com/avatar/7d599977ec288a9141317b352c04d497'}In some instances, such as in the case of browsing for a record by its ID, asingleton is expected. In these instances, the singleton is directly usedinstead of iterated.. code-block:: python   &gt;&gt;&gt; customer = hs.Customers.get(143161083)   &gt;&gt;&gt; customer   &lt;helpscout.models.customer.Customer object at 0x101723e50&gt;   &gt;&gt;&gt; from pprint import pprint   &gt;&gt;&gt; pprint(customer.serialize())   {u'__class__': 'Customer',    'address': {u'__class__': 'Address',                'city': u'Boston',                'country': u'US',                'created_at': '2017-09-16T18:38:37Z',                'id': 4996350,                'lines': [u'131 Tremont Street', u'3rd Floor'],                'postal_code': u'02111-1338',                'state': u'MA'},    'chats': [],    'created_at': '2017-09-16T18:38:37Z',    'emails': [{u'__class__': 'Email',                'id': 189240662,                'location': 'work',                'value': u'help@helpscout.net'}],    'first_name': u'Help',    'full_name': u'Help Scout',    'gender': 'unknown',    'id': 143161083,    'last_name': u'Scout',    'location': u'Boston, MA',    'modified_at': '2017-09-16T18:38:37Z',    'phones': [{u'__class__': 'Phone',                'id': 189240668,                'location': 'work',                'value': u'855-435-7726'}],    'photo_type': 'gravatar',    'photo_url': u'https://secure.gravatar.com/avatar/7d599977ec288a9141317b352c04d497',    'social_profiles': [{u'__class__': 'SocialProfile',                         'id': 189240667,                         'type': 'twitter',                         'value': u'http://twitter.com/helpscout'},                        {u'__class__': 'SocialProfile',                         'id': 189240663,                         'type': 'twitter',                         'value': u'https://twitter.com/helpscout'},                        {u'__class__': 'SocialProfile',                         'id': 189240664,                         'type': 'twitter',                         'value': u'https://twitter.com/HelpScoutDev'}],    'type': 'customer',    'websites': [{u'__class__': 'Website',                  'id': 189240670,                  'value': u'http://developer.helpscout.net'},                 {u'__class__': 'Website',                  'id': 189240665,                  'value': u'http://status.helpscout.net/'},                 {u'__class__': 'Website',                  'id': 189240666,                  'value': u'http://www.helpscout.com'},                 {u'__class__': 'Website',                  'id': 189240671,                  'value': u'http://www.helpscout.net'}]}Note that all of the API responses will be parsed, with proper objects beingcreated from the results. The objects are all defined in the `helpscout.modelspackage &lt;https://laslabs.github.io/python-helpscout/helpscout.models.html&gt;`_.Searching=========The ``.search()`` method is implemented for the following endpoints:* `Conversations Search  &lt;https://laslabs.github.io/python-helpscout/helpscout.apis.html#helpscout.  apis.conversations.Conversations.search&gt;`_* `Customers Search  &lt;https://laslabs.github.io/python-helpscout/helpscout.apis.html#helpscout.  apis.customers.Customers.search&gt;`_Search accepts either an instantiated `Domain &lt;https://laslabs.github.io/python-helpscout/helpscout.domain.html#helpscout.domain.Domain&gt;`_, or an`iterator of queries &lt;https://laslabs.github.io/python-helpscout/helpscout.domain.html#helpscout.domain.Domain.from_tuple&gt;`_:.. code-block:: python   [('subject', 'Test1'),    'OR',    ('subject', 'Test2')',    ('subject', 'Test3')',    ]The above is equivalent to a HelpScout query string of::   (subject:'Test1' OR subject:'Test2' OR subject:'Test3')Following is a usage example:.. code-block:: python   &gt;&gt;&gt; res = hs.Conversations.search([('subject', 'Learning')])   &gt;&gt;&gt; for r in res:   &gt;&gt;&gt;     r.serialize()   {'status': 'active', 'customer_email': u'help@helpscout.net', 'thread_count': 0, 'modified_at': '2017-09-16T18:38:37Z', 'number': 150, 'subject': u'Learning the basics', u'__class__': 'SearchConversation', 'has_attachments': False, 'mailbox_id': 122867, 'preview': u'Hey Dave, Above this message is what we call the Conversation Toolbar. From there you can take all sorts of actions on a Conversation. Hover your mouse over each of the icons to see what you can do....', 'id': 432907900, 'customer_name': u'Help Scout'}Web Hooks=========`Web Hooks &lt;https://laslabs.github.io/python-helpscout/helpscout.web_hook.html#helpscout.web_hook.web_hook.HelpScoutWebHook&gt;`_ can be received byinstantiating a ``HelpScoutWebHook`` usingthe secret key that was configured while setting up the hook in yourHelpScout account:.. code-block:: python   from helpscout import HelpScoutWebHook   hook = HelpScoutWebHook('your secret key')In order to actually receive the request, call the `receive method&lt;https://laslabs.github.io/python-helpscout/helpscout.web_hook.html#helpscout.web_hook.web_hook.HelpScoutWebHook.receive&gt;`_ on the instantiated``HelpScoutWebHook``:.. code-block:: python   signature = '2iFmnzC8SCNVF/iNiMnSe19yceU=\n'  # (``X-HelpScout-Signature`` Header)   event_type = 'customer.created'  # (``X-HelpScout-Event`` Header)   request_body = '{&quot;firstName&quot;:&quot;Jackie&quot;,&quot;lastName&quot;:&quot;Chan&quot;,' \                  '&quot;email&quot;:&quot;jackie.chan@somewhere.com&quot;,' \                  '&quot;gender&quot;:&quot;male&quot;}'   event = web_hook.receive(       event_type, signature, request_body,   )The ``WebHookEvent`` that is returned contains two properties:* ``event_type`` (*str*): The type of event that is being represented* ``record`` (*helpscout.BaseModel*): The parsed data record for this requestGiven the above example:.. code-block:: python   &gt;&gt;&gt; event.event_type   'customer.created'   &gt;&gt;&gt; event.record   &lt;helpscout.models.customer.Customer object at 0x101723e50&gt;You create a web hook using the standard endpoint create:.. code-block:: python   from helpscout.models import HelpScoutWebHook   hook = HelpScoutWebHook(      url='https://example.com/my/web/hook/'      secret_key='SuperSecretRandomizedString'      events=[         'customer.created',      ],   )   hs.WebHook.create(hook)The above example will create a hook for the ``customer.created`` event usingthe pre-authenticated ``HelpScout`` object from above examples (``hs``).======================Known Issues / RoadMap======================* Add better validations (like regexes for emails)* Verify required attributes, particularly when creating for API instead of  receiving* Attachment handling in Conversations (Create/Delete Attachment)* Raw email source handling in Conversations (Get Thread Source)* Implement List Customers by Mailbox* Implement Workflows* Implement index lookup for the RequestPaginator (currently only response  iteration is supported)* Make the domain add syntax more robust (right now AND + OR don't combine well)* Docs API is not implemented=======Credits=======Contributors============* Dave Lasley &lt;dave@laslabs.com&gt;* Brent Hughes &lt;brent.hughes@laslabs.com&gt;Maintainer==========.. image:: https://laslabs.com/logo.png   :alt: LasLabs Inc.   :target: https://laslabs.comThis module is maintained by LasLabs Inc... |Build Status| image:: https://img.shields.io/travis/LasLabs/python-helpscout/master.svg   :target: https://travis-ci.org/LasLabs/python-helpscout.. |Test Coverage| image:: https://img.shields.io/codecov/c/github/LasLabs/python-helpscout/master.svg   :target: https://codecov.io/gh/LasLabs/python-helpscout.. |Code Climate| image:: https://img.shields.io/codeclimate/github/LasLabs/python-helpscout.svg   :target: https://codeclimate.com/github/LasLabs/python-helpscout.. |License MIT| image:: https://img.shields.io/github/license/laslabs/python-helpscout.svg   :target: https://opensource.org/licenses/MIT   :alt: License: MIT.. |PyPi Package| image:: https://img.shields.io/pypi/v/helpscout.svg   :target: https://pypi.python.org/pypi/helpscout   :alt: PyPi Package.. |PyPi Versions| image:: https://img.shields.io/pypi/pyversions/helpscout.svg   :target: https://pypi.python.org/pypi/helpscout   :alt: PyPi Versions</longdescription>
</pkgmetadata>