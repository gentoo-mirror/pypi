<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pdpatch================&lt;!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --&gt;`pdpatch` adds methods to [pandas](https://pandas.pydata.org/)â€™`DataFrame` and `Series` for a faster data science pipeline. It alsodefines drop-in replacements for `seaborn` and `plotly.express` thatautomatically label axes with nicer titles. We use[nbdev](https://nbdev.fast.ai/) to build this project.## Install`pip install pdpatch`## How to use``` pythonfrom pdpatch.all import *```### Interactive Method `.less()`![Alt Text](less15_360.gif)### Automatically Rename snake_case columns in `plotly.express` and `seaborn```` pythonimport pandas as pdfrom pdpatch.express import *df = pd.DataFrame({'time__s__': range(10), 'position__m__': [i**1.3 for i in range(10)], 'speed__m/s__': 10*[1]})#df = pd.DataFrame({'time__s__': range(10), 'position__m__': range(10)})px.scatter(df, x='time__s__', y='position__m__').show('png')```![](index_files/figure-gfm/cell-3-output-1.png)``` pythonfrom pdpatch.seaborn import snssns.scatterplot(data=df, x='time__s__', y='position__m__');```![](index_files/figure-gfm/cell-4-output-1.png)### Add Altair-like Operation to plotly Figures``` pythonfig = px.scatter(df,x='time__s__', y='time__s__') | px.scatter(df,x='time__s__', y=['position__m__', 'speed__m/s__'])fig.show('png')```![](index_files/figure-gfm/cell-5-output-1.png)``` pythonfig = px.scatter(df,x='time__s__', y='time__s__') / px.scatter(df,x='time__s__', y=['position__m__', 'speed__m/s__'])fig.show('png')```![](index_files/figure-gfm/cell-6-output-1.png)``` pythonfig = px.scatter(df,x='time__s__', y='time__s__') | px.scatter(df,x='time__s__', y=['position__m__', 'speed__m/s__'])(fig / fig).show('png')```![](index_files/figure-gfm/cell-7-output-1.png)### Shorter methods`df.rename(columns={'col_1': 'new_name'})`-\&gt;`df.renamec('col_1', 'new_name')```` pythondf = dummydf()df.renamec('col_1', 'new_name').to_html()```&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr style=&quot;text-align: right;&quot;&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;new_name&lt;/th&gt;&lt;th&gt;col_2&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;0&lt;/th&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;a&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;&lt;td&gt;101&lt;/td&gt;&lt;td&gt;b&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;&lt;td&gt;102&lt;/td&gt;&lt;td&gt;c&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;&lt;td&gt;103&lt;/td&gt;&lt;td&gt;d&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;&lt;td&gt;104&lt;/td&gt;&lt;td&gt;e&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;### Functions as methods``` pythondf.len()```    5### New methods``` pythondf.col_1.minmax```    (100, 104)### Utility functions``` pythondf = dummydf()df.to_html()```&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr style=&quot;text-align: right;&quot;&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;col_1&lt;/th&gt;&lt;th&gt;col_2&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;0&lt;/th&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;a&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;&lt;td&gt;101&lt;/td&gt;&lt;td&gt;b&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;&lt;td&gt;102&lt;/td&gt;&lt;td&gt;c&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;&lt;td&gt;103&lt;/td&gt;&lt;td&gt;d&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;&lt;td&gt;104&lt;/td&gt;&lt;td&gt;e&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</longdescription>
</pkgmetadata>