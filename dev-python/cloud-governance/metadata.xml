<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI Latest Release](https://img.shields.io/pypi/v/cloud-governance.svg)](https://pypi.org/project/cloud-governance/)[![Container Repository on Quay](https://quay.io/repository/projectquay/quay/status &quot;Container Repository on Quay&quot;)](https://quay.io/repository/ebattat/cloud-governance?tab=tags)[![Actions Status](https://github.com/redhat-performance/cloud-governance/actions/workflows/Build.yml/badge.svg)](https://github.com/redhat-performance/cloud-governance/actions)[![Coverage Status](https://coveralls.io/repos/github/redhat-performance/cloud-governance/badge.svg?branch=main)](https://coveralls.io/github/redhat-performance/cloud-governance?branch=main)[![Documentation Status](https://readthedocs.org/projects/cloud-governance/badge/?version=latest)](https://cloud-governance.readthedocs.io/en/latest/?badge=latest)[![python](https://img.shields.io/pypi/pyversions/cloud-governance.svg?color=%2334D058)](https://pypi.org/project/cloud-governance)[![License](https://img.shields.io/pypi/l/cloud-governance.svg)](https://github.com/redhat-performance/cloud-governance/blob/main/LICENSE)# Cloud Governance![](images/cloud_governance.png)## What is it?**Cloud Governance** tool provides a lightweight and flexible framework for deploying cloud management policies focusing on cost optimize and security.This tool support the following policies:[policy](cloud_governance/policy)[AWS Polices](cloud_governance/policy/aws)* Real time Openshift Cluster cost, User cost* [ec2_idle](cloud_governance/policy/aws/ec2_idle.py): idle ec2 in last 4 days, cpu &lt; 2% &amp; network &lt; 5mb.* [ec2_run](cloud_governance/policy/aws/ec2_run.py): running ec2.* [ebs_unattached](cloud_governance/policy/aws/ebs_unattached.py): volumes that did not connect to instance, volume in available status.* [ebs_in_use](cloud_governance/policy/aws/ebs_in_use.py): in use volumes.* [tag_resources](cloud_governance/policy/policy_operations/aws/tag_cluster): Update cluster and non cluster resource tags fetching from the user tags or from the mandatory tags* [zombie_cluster_resource](cloud_governance/policy/aws/zombie_cluster_resource.py): Delete cluster's zombie resources* [tag_non_cluster](cloud_governance/policy/policy_operations/aws/tag_non_cluster): tag ec2 resources (instance, volume, ami, snapshot) by instance name* [tag_iam_user](cloud_governance/policy/policy_operations/aws/tag_user): update the user tags from the csv file* [cost_explorer](cloud_governance/policy/aws/cost_explorer.py): Get data from cost explorer and upload to ElasticSearch* [ip_unattached](cloud_governance/policy/aws/ip_unattached.py): Get the unattached IP and delete it after 7 days.* [s3_inactive](cloud_governance/policy/aws/s3_inactive.py): Get the inactive/empty buckets and delete them after 7 days.* [empty_roles](cloud_governance/policy/aws/empty_roles.py): Get empty roles and delete it after 7 days.* [zombie_snapshots](cloud_governance/policy/aws/zombie_snapshots.py): Get the zombie snapshots and delete it after 7 days.* [unused_nat_gateway](cloud_governance/policy/aws/unused_nat_gateway.py): Get the unused nat gateways and deletes it after 7 days.* gitleaks: scan Github repository git leak (security scan)  * [cost_over_usage](cloud_governance/policy/aws/cost_over_usage.py): send mail to aws user if over usage cost[IBM policies](cloud_governance/policy/ibm)* [tag_baremetal](cloud_governance/policy/ibm/tag_baremetal.py): Tag IBM baremetal machines* [tag_vm](cloud_governance/policy/ibm/tag_vm.py): Tga IBM Virtual Machines machines** You can write your own policy using [Cloud-Custodian](https://cloudcustodian.io/docs/quickstart/index.html)   and run it (see 'custom cloud custodian policy' in [Policy workflows](#policy-workloads)).![](images/cloud_governance1.png)![](images/demo.gif)![](images/cloud_governance2.png)Reference:* The cloud-governance package is placed in [PyPi](https://pypi.org/project/cloud-governance/)* The cloud-governance container image is placed in [Quay.io](https://quay.io/repository/ebattat/cloud-governance)* The cloud-governance readthedocs link is [ReadTheDocs](https://cloud-governance.readthedocs.io/en/latest/)![](images/cloud_governance3.png)_**Table of Contents**_&lt;!-- TOC --&gt;- [Installation](#installation)- [Configuration](#configuration)- [Run AWS Policy Using Podman](#run-aws-policy-using-podman)- [Run IBM Policy Using Podman](#run-ibm-policy-using-podman)- [Run Policy Using Pod](#run-policy-using-pod)- [Pytest](#pytest)- [Post Installation](#post-installation)&lt;!-- /TOC --&gt;## Installation#### Download cloud-governance image from quay.io```sh# Need to run it with root privilegessudo podman pull quay.io/ebattat/cloud-governance```#### Environment variables description:(mandatory)AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID(mandatory)AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY##### Policy name:(mandatory)policy=ec2_idle / ec2_run / ebs_unattached / ebs_in_use / tag_cluster_resource / zombie_cluster_resource / tag_ec2_resource##### Policy logs output(mandatory)policy_output=s3://redhat-cloud-governance/logs##### Cluster or instance name:(mandatory policy:tag_cluster_resource)resource_name=ocs-test##### Cluster or instance tags:(mandatory policy:tag_cluster_resource)mandatory_tags=&quot;{'Owner': 'Name','Email': 'name@redhat.com','Purpose': 'test'}&quot;##### gitleaks(mandatory policy: gitleaks)git_access_token=$git_access_token(mandatory policy: gitleaks)git_repo=https://github.com/redhat-performance/cloud-governance(optional policy: gitleaks)several_repos=yes/no (default = no)##### Choose a specific region or all for all the regions, default : us-east-2(optional)AWS_DEFAULT_REGION=us-east-2/all (default = us-east-2)##### Choose dry run or not, default yes(optional)dry_run=yes/no (default = yes)##### Choose log level, default INFO(optional)log_level=INFO (default = INFO)#### LDAP hostname to fetch mail recordsLDAP_HOST_NAME=ldap.example.com#### Enable Google Drive API in console and create Service accountGOOGLE_APPLICATION_CREDENTIALS=$pwd/service_account.json# Configuration### AWS Configuration#### Create a user and a bucket* Create user with IAM [iam](iam/clouds)* Create a logs bucket [create_bucket.sh](iam/cloud/aws/create_bucket.sh)### IBM Configuration* Create classic infrastructure API key## Run AWS Policy Using Podman ```sh# policy=ec2_idlesudo podman run --rm --name cloud-governance -e policy=&quot;ec2_idle&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e AWS_DEFAULT_REGION=&quot;us-east-2&quot; -e dry_run=&quot;yes&quot; -e policy_output=&quot;s3://bucket/logs&quot; -e log_level=&quot;INFO&quot; &quot;quay.io/ebattat/cloud-governance&quot;# policy=ec2_runsudo podman run --rm --name cloud-governance -e policy=&quot;ec2_run&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e AWS_DEFAULT_REGION=&quot;us-east-2&quot; -e dry_run=&quot;yes&quot; -e policy_output=&quot;s3://bucket/logs&quot; -e log_level=&quot;INFO&quot; &quot;quay.io/ebattat/cloud-governance&quot;# select policy ['ec2_stop', 's3_inactive', 'empty_roles', 'ip_unattached', 'unused_nat_gateway', 'zombie_snapshots']sudo podman run --rm --name cloud-governance -e policy=&quot;policy&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e AWS_DEFAULT_REGION=&quot;us-east-2&quot; -e dry_run=&quot;yes&quot;  -e log_level=&quot;INFO&quot; &quot;quay.io/ebattat/cloud-governance&quot;# policy=ebs_unattachedsudo podman run --rm --name cloud-governance -e policy=&quot;ebs_unattached&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e AWS_DEFAULT_REGION=&quot;us-east-2&quot; -e dry_run=&quot;yes&quot; -e policy_output=&quot;s3://bucket/logs&quot; -e log_level=&quot;INFO&quot; &quot;quay.io/ebattat/cloud-governance&quot;# policy=ebs_in_usesudo podman run --rm --name cloud-governance -e policy=&quot;ebs_in_use&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e AWS_DEFAULT_REGION=&quot;us-east-2&quot; -e dry_run=&quot;yes&quot; -e policy_output=&quot;s3://bucket/logs&quot; -e log_level=&quot;INFO&quot; &quot;quay.io/ebattat/cloud-governance&quot;# policy=zombie_cluster_resourcesudo podman run --rm --name cloud-governance -e policy=&quot;zombie_cluster_resource&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e AWS_DEFAULT_REGION=&quot;us-east-2&quot; -e dry_run=&quot;yes&quot; -e resource=&quot;zombie_cluster_elastic_ip&quot; -e cluster_tag=&quot;kubernetes.io/cluster/test-pd9qq&quot; -e log_level=&quot;INFO&quot; &quot;quay.io/ebattat/cloud-governance&quot;# policy=tag_resourcessudo podman run --rm --name cloud-governance -e policy=&quot;tag_resources&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e AWS_DEFAULT_REGION=&quot;us-east-2&quot; -e tag_operation=&quot;read/update/delete&quot; -e mandatory_tags=&quot;{'Owner': 'Name','Email': 'name@redhat.com','Purpose': 'test'}&quot; -e log_level=&quot;INFO&quot; -v &quot;/etc/localtime&quot;:&quot;/etc/localtime&quot; &quot;quay.io/ebattat/cloud-governance&quot;# policy=tag_non_clustersudo podman run --rm --name cloud-governance -e policy=&quot;tag_non_cluster&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e AWS_DEFAULT_REGION=&quot;us-east-2&quot; -e tag_operation=&quot;read/update/delete&quot; -e mandatory_tags=&quot;{'Owner': 'Name','Email': 'name@redhat.com','Purpose': 'test'}&quot; -e log_level=&quot;INFO&quot; -v &quot;/etc/localtime&quot;:&quot;/etc/localtime&quot; &quot;quay.io/ebattat/cloud-governance&quot;# policy=tag_iam_usersudo podman run --rm --name cloud-governance -e policy=&quot;tag_iam_user&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e user_tag_operation=&quot;read/update/delete&quot; -e remove_tags=&quot;['Environment', 'Test']&quot; -e username=&quot;test_username&quot; -e file_name=&quot;tag_user.csv&quot;  -e log_level=&quot;INFO&quot; -v &quot;/home/user/tag_user.csv&quot;:&quot;/tmp/tag_user.csv&quot; --privileged &quot;quay.io/ebattat/cloud-governance&quot;# policy=cost_explorersudo podman run --rm --name cloud-governance -e policy=&quot;cost_explorer&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e es_host=&quot;$elasticsearch_host&quot; -e es_port=&quot;$elasticsearch_port&quot; -e es_index=&quot;$elasticsearch_index&quot; -e cost_metric=UnblendedCost -e start_date=&quot;$start_date&quot; -e end_date=&quot;$end_date&quot; -e granularity=&quot;DAILY&quot; -e cost_explorer_tags=&quot;['User', 'Budget', 'Project', 'Manager', 'Owner', 'LaunchTime', 'Name', 'Email']&quot; -e log_level=&quot;INFO&quot; &quot;quay.io/ebattat/cloud-governance:latest&quot;sudo podman run --rm --name cloud-governance -e policy=&quot;cost_explorer&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e es_index=&quot;elasticsearch_index&quot; -e cost_metric=&quot;UnblendedCost&quot; -e start_date=&quot;$start_date&quot; -e end_date=&quot;$end_date&quot; -e granularity=&quot;DAILY&quot; -e cost_explorer_tags=&quot;['User', 'Budget', 'Project', 'Manager', 'Owner', 'LaunchTime', 'Name', 'Email']&quot; -e file_name=&quot;cost_explorer.txt&quot; -v &quot;/home/cost_explorer.txt&quot;:&quot;/tmp/cost_explorer.txt&quot; -e log_level=&quot;INFO&quot; &quot;quay.io/ebattat/cloud-governance:latest&quot;# policy=validate_iam_user_tagssudo podman run --rm --name cloud-governance  -e policy=&quot;validate_iam_user_tags&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e validate_type=&quot;spaces/tags&quot; -e user_tags=&quot;['Budget', 'User', 'Owner', 'Manager', 'Environment', 'Project']&quot;   -e log_level=&quot;INFO&quot; &quot;quay.io/ebattat/cloud-governance:latest&quot;# policy=gitleakssudo podman run --rm --name cloud-governance -e policy=&quot;gitleaks&quot; -e git_access_token=&quot;$git_access_token&quot; -e git_repo=&quot;https://github.com/redhat-performance/cloud-governance&quot; -e several_repos=&quot;no&quot; -e log_level=&quot;INFO&quot; &quot;quay.io/ebattat/cloud-governance&quot;# custom cloud custodian policy (path for custom policy: -v /home/user/custodian_policy:/custodian_policy)sudo podman run --rm --name cloud-governance -e policy=&quot;/custodian_policy/policy.yml&quot; -e AWS_ACCESS_KEY_ID=&quot;$AWS_ACCESS_KEY_ID&quot; -e AWS_SECRET_ACCESS_KEY=&quot;$AWS_SECRET_ACCESS_KEY&quot; -e AWS_DEFAULT_REGION=&quot;us-east-2&quot; -e dry_run=&quot;yes&quot; -e policy_output=&quot;s3://bucket/logs&quot; -e log_level=&quot;INFO&quot; -v &quot;/home/user/custodian_policy&quot;:&quot;/custodian_policy&quot; --privileged &quot;quay.io/ebattat/cloud-governance&quot;```## Run IBM Policy Using Podman```sh# policy=tag_baremetalpodman run --rm --name cloud-governance -e policy=&quot;tag_baremetal&quot; -e account=&quot;$account&quot; -e IBM_API_USERNAME=&quot;$IBM_API_USERNAME&quot; -e IBM_API_KEY=&quot;$IBM_API_KEY&quot; -e SPREADSHEET_ID=&quot;$SPREADSHEET_ID&quot; -e GOOGLE_APPLICATION_CREDENTIALS=&quot;$GOOGLE_APPLICATION_CREDENTIALS&quot; -v $GOOGLE_APPLICATION_CREDENTIALS:$GOOGLE_APPLICATION_CREDENTIALS -e LDAP_USER_HOST=&quot;$LDAP_USER_HOST&quot; -e tag_operation=&quot;update&quot; -e log_level=&quot;INFO&quot; -v &quot;/etc/localtime&quot;:&quot;/etc/localtime&quot; &quot;quay.io/ebattat/cloud-governance:latest&quot;# tag=tab_vmpodman run --rm --name cloud-governance -e policy=&quot;tag_vm&quot; -e account=&quot;$account&quot; -e IBM_API_USERNAME=&quot;$IBM_API_USERNAME&quot; -e IBM_API_KEY=&quot;$IBM_API_KEY&quot; -e SPREADSHEET_ID=&quot;$SPREADSHEET_ID&quot; -e GOOGLE_APPLICATION_CREDENTIALS=&quot;$GOOGLE_APPLICATION_CREDENTIALS&quot; -v $GOOGLE_APPLICATION_CREDENTIALS:$GOOGLE_APPLICATION_CREDENTIALS -e LDAP_USER_HOST=&quot;$LDAP_USER_HOST&quot; -e tag_operation=&quot;update&quot; -e log_level=&quot;INFO&quot; -v &quot;/etc/localtime&quot;:&quot;/etc/localtime&quot; &quot;quay.io/ebattat/cloud-governance:latest&quot;```## Run Policy Using Pod#### Run as a pod job via OpenShiftJob Pod: [cloud-governance.yaml](pod_yaml/cloud-governance.yaml)Configmaps: [cloud_governance_configmap.yaml](pod_yaml/cloud_governance_configmap.yaml)Quay.io Secret: [quayio_secret.sh](pod_yaml/quayio_secret.sh)AWS Secret: [cloud_governance_secret.yaml](pod_yaml/cloud_governance_secret.yaml)    * Need to convert secret key to base64 [run_base64.py](pod_yaml/run_base64.py)## Pytest##### Cloud-governance integration tests using pytest```shpython3 -m venv governancesource governance/bin/activate(governance) $ python -m pip install --upgrade pip(governance) $ pip install coverage(governance) $ pip install pytest(governance) $ git clone https://github.com/redhat-performance/cloud-governance(governance) $ cd cloud-governance(governance) $ coverage run -m pytest(governance) $ deactivaterm -rf *governance*```## Post Installation#### Delete cloud-governance image```shsudo podman rmi quay.io/ebattat/cloud-governance```</longdescription>
</pkgmetadata>