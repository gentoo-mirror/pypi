<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Blazetest## IntroductionCLI tool which allows developers to deploy their _pytest_ tests to AWS Lambda and run them in parallel.&lt;br&gt;&lt;br&gt;It automates the deployment process and makes it easier to run tests on the number of Lambda function instances in an **efficient and cost-effective manner**. &lt;br&gt;&lt;br&gt;CLI supports parallel execution of tests, as well as customizing the number of concurrent Lambda functions that can be used for your tests (up to 1000 unreserved concurrency). &lt;br&gt;&lt;br&gt; Additionally, it provides real-time feedback on the progress of your tests, making it easy to know when the tests have finished running.&lt;br&gt;&lt;br&gt;Whenever the testing have been finished, you can get your ```junit-xml``` reports in the S3 bucket, allowing you to easily integrate it with any CI/CD workflow.## InstallationIn order to install the CLI, use pip:`pip install blazetest`Installation requires following packages to be installed:```clickpytestPyYAMLtomldaciteboto3licensingpyopenssl&gt;=23.0.0; python_version &gt;= '3.7'python-logging-loki```## ConfigurationIn order to configure the CLI, the TOML file is used. By default, `blazetest` uses _blazetest.toml_ file located at the project root. However, any location can be used with specifying `--config-path` option while running CLI. Example:`blazetest --config-path /path/to/toml/file.toml -v -s`Here you can see the example `blazetest.toml` file:```license_key = &quot;ASDSA-ASDSA-ASDSA-ASDSA&quot; # optional, license key to use when using blazetest CLIfailed_test_retry = 1 # optional and given by special license, number of retries for failed tests[aws]region = &quot;eu-west-1&quot; # required, AWS region, which is used to deploy the application ecr_repository_name = &quot;my-example-repository&quot; # optional, ECR repository name, used to create ECR repository, where the Docker image with tests is deployed, otherwise &quot;blazetest-repo&quot; will be usedstack_name = &quot;example-stack-name&quot; # optional, CloudFormation stack name, which is used for deployment, will be part of the names of the created stacks, otherwise &quot;blazetest-stack&quot; will be useds3_bucket = &quot;example-bucket&quot; # optional, S3 Bucket which will be used for deploying AWS Lambda, otherwise &quot;blazetest-s3&quot; will be used[pytest]collection_args = [&quot;tests/module1&quot;, &quot;-m&quot;, &quot;feature1&quot;] # these are the arguments which will be used to collect tests, such as the folder name /tests/module1/ and marker feature1execution_args = [&quot;-s&quot;, &quot;-vv&quot;, &quot;--durations=10&quot;] # these are the arguments which will be used to execute the tests on Lambda, such as durations, -s for seeing output and verbosity```For pytest args, please see the usage examples in the pytest documentation: https://docs.pytest.org/en/6.2.x/usage.html. &lt;br&gt;_You don't need to indicate `--junitxml` flag as it will be defined automatically._### To run the CLI tool, AWS credentials should be configured.The CLI tool uses following AWS services:**AWS Lambda** (creates and invokes Lambda)&lt;br&gt;**AWS S3** (creates buckets and uploads files)&lt;br&gt;**AWS ECR** (creates repository and uses it for Lambda invocations)&lt;br&gt;## UsageIn order to use the CLI tool, following format should be used:`blazetest [OPTIONS]`For example:`blazetest --config-path --license-key license-key-1234 /path/to/toml/file.toml`**_Available options:_**`--config-path`: configuration file path, defaults to blazetest.toml file which is located at project root folder.&lt;br&gt;`--license-key`: license key, should be set if license-file not specified&lt;br&gt;`--license-file`: license file, should be set if license-key not specified&lt;br&gt;`--aws-access-key-id`: AWS access key ID&lt;br&gt;`--aws-secret-access-key`: AWS secret access key&lt;br&gt;## WorkflowWhole workflow consists of five main parts: **build, deployment, collecting tests, AWS Lambda parallel invocation, collecting results**.1) The Docker image is built, local project files copied to image. [1]2) Image is deployed to ECR repository. AWS Lambda function, S3 bucket (for test reports) are created using Pulumi.3) Tests are collected locally.4) Each test invokes separate AWS Lambda function in parallel.5) All test XML reports are saved to S3 bucket.[1] - Local projects are collected at the root folder of the project. Every file and folder will be copied. If you don't want certain files to be deployed to Lambda, please include them in `.dockerignore` in the root directory![workflow](https://i.ibb.co/f8kqH8G/Web-App-Reference-Architecture-4.png)![workflow](https://i.ibb.co/CwX292h/2-2.png)_There is 1000 unreserved concurrency by default in AWS Lambda, so we can have 1000 AWS Lambda instances running at the same time by default. To gain more concurrent runs, you can:_&lt;br&gt;1) Visit https://console.aws.amazon.com/servicequotas/home2) Go to AWS Lambda -&gt; Concurrent executions -&gt; Request quota increase3) For more information: https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html## Selenium and WebDriverTo initialize webdriver, please use the indicated binary location and flags.```options = webdriver.ChromeOptions()options.binary_location = &quot;/usr/bin/chromium-1033/chrome-linux/chrome&quot;options.add_argument(&quot;--no-sandbox&quot;)options.add_argument(&quot;--headless&quot;)options.add_argument(&quot;--disable-dev-shm-usage&quot;)options.add_argument(&quot;--single-process&quot;)web_driver = webdriver.Chrome(options=options)```Above mentioned flags are required to have tests using selenium run smoothly on AWS Lambda instance.</longdescription>
</pkgmetadata>