<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================================xarray Datasets from CASA Tables================================.. image:: https://img.shields.io/pypi/v/dask-ms.svg        :target: https://pypi.python.org/pypi/dask-ms.. image:: https://github.com/ratt-ru/dask-ms/actions/workflows/ci.yml/badge.svg        :target: https://github.com/ratt-ru/dask-ms/actions/workflows/ci.yml.. image:: https://readthedocs.org/projects/dask-ms/badge/?version=latest        :target: https://dask-ms.readthedocs.io/en/latest/?badge=latest        :alt: Documentation StatusConstructs xarray_ ``Datasets`` from CASA Tables via python-casacore_.The ``Variables`` contained in the ``Dataset`` are dask_ arrays backed bydeferred calls to :code:`pyrap.tables.table.getcol`.Supports writing ``Variables`` back to the respective column in the Table.The intention behind this package is to support the Measurement Set asa data source and sink for the purposes of writing parallel, distributedRadio Astronomy algorithms.Installation============To install with xarray_ support:.. code-block:: bash  $ pip install dask-ms[xarray]Without xarray_ similar, but reduced Dataset functionality is replicatedin dask-ms itself. Expert users may wish to use this option to reducepython package dependencies... code-block:: bash  $ pip install dask-msDocumentation=============https://dask-ms.readthedocs.ioGitter Page===========https://gitter.im/dask-ms/communityExample Usage=============.. code-block:: python    import dask.array as da    from daskms import xds_from_table, xds_to_table    # Create xarray datasets from Measurement Set &quot;WSRT.MS&quot;    ds = xds_from_table(&quot;WSRT.MS&quot;)    # Set the flag Variable on first Dataset to it's inverse    ds[0]['flag'] = (ds[0].flag.dims, da.logical_not(ds[0].flag))    # Write the flag column back to the Measurement Set    xds_to_table(ds, &quot;WSRT.MS&quot;, &quot;FLAG&quot;).compute()    print ds  [&lt;xarray.Dataset&gt;   Dimensions:         (chan: 64, corr: 4, row: 6552, uvw: 3)   Coordinates:       ROWID           (row) int32 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;   Dimensions without coordinates: chan, corr, row, uvw   Data variables:       IMAGING_WEIGHT  (row, chan) float32 dask.array&lt;shape=(6552, 64), chunksize=(6552, 64)&gt;       ANTENNA1        (row) int32 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       STATE_ID        (row) int32 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       EXPOSURE        (row) float64 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       MODEL_DATA      (row, chan, corr) complex64 dask.array&lt;shape=(6552, 64, 4), chunksize=(6552, 64, 4)&gt;       FLAG_ROW        (row) bool dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       CORRECTED_DATA  (row, chan, corr) complex64 dask.array&lt;shape=(6552, 64, 4), chunksize=(6552, 64, 4)&gt;       PROCESSOR_ID    (row) int32 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       WEIGHT          (row, corr) float32 dask.array&lt;shape=(6552, 4), chunksize=(6552, 4)&gt;       FLAG            (row, chan, corr) bool dask.array&lt;shape=(6552, 64, 4), chunksize=(6552, 64, 4)&gt;       TIME            (row) float64 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       SIGMA           (row, corr) float32 dask.array&lt;shape=(6552, 4), chunksize=(6552, 4)&gt;       SCAN_NUMBER     (row) int32 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       INTERVAL        (row) float64 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       OBSERVATION_ID  (row) int32 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       TIME_CENTROID   (row) float64 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       ARRAY_ID        (row) int32 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       ANTENNA2        (row) int32 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       DATA            (row, chan, corr) complex64 dask.array&lt;shape=(6552, 64, 4), chunksize=(6552, 64, 4)&gt;       FEED1           (row) int32 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       FEED2           (row) int32 dask.array&lt;shape=(6552,), chunksize=(6552,)&gt;       UVW             (row, uvw) float64 dask.array&lt;shape=(6552, 3), chunksize=(6552, 3)&gt;   Attributes:       FIELD_ID:      0       DATA_DESC_ID:  0]-----------Limitations-----------1. Many Measurement Sets columns are defined as variably shaped,   but the actual data is fixed.   dask-ms_ will infer the shape of the   data from the first row and must be consistent   with that of other rows.   For example, this may be issue where multiple Spectral Windows   are present in the Measurement Set with differing channels   per SPW.   dask-ms_ works around this by partitioning the   Measurement Set into multiple datasets.   The first row's shape is used to infer the shape of the partition.   Thus, in the case of multiple Spectral Window's, we can partition   the Measurement Set by DATA_DESC_ID to create a dataset for   each Spectral Window... _dask: https://dask.pydata.org.. _dask-ms: https://github.com/ska-sa/dask-ms.. _xarray: https://xarray.pydata.org.. _python-casacore: https://github.com/casacore/python-casacore</longdescription>
</pkgmetadata>