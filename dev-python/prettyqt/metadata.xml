<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># prettyqt: Pythonic layer on top of PyQt6 / PySide6[![PyPI Latest Release](https://img.shields.io/pypi/v/prettyqt.svg)](https://pypi.org/project/prettyqt/)[![Package Status](https://img.shields.io/pypi/status/prettyqt.svg)](https://pypi.org/project/prettyqt/)[![License](https://img.shields.io/pypi/l/prettyqt.svg)](https://github.com/phil65/PrettyQt/blob/master/LICENSE)[![CodeCov](https://codecov.io/gh/phil65/PrettyQt/branch/master/graph/badge.svg)](https://codecov.io/gh/phil65/PrettyQt)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![PyUp](https://pyup.io/repos/github/phil65/PrettyQt/shield.svg)](https://pyup.io/repos/github/phil65/PrettyQt/)## What is it?**PrettyQt** is a Python package that provides a pythonic layer on top of the GUI frameworks PyQt6 / PySide6.## Main Features  - Large parts of the Qt API are available in a **PEP-8**-compliant way.  - Pre-defined widgets for common use cases  - Large set of validators, syntax highlighters, models and much more.PrettyQt basically is a wrapper for the whole Qt API (either on top of PySide6 or PyQt6).The library contains a tree of mixins, with one mixin for each Qt class.These mixins also inherit from each other and are applied to the Qt classes.That way each class gets all helper methods from all sub-mixins.Example: The class &quot;TreeView&quot; inherits from original Qt Class &quot;QTreeView&quot; and gets helper methodsfrom &quot;TreeViewMxin&quot;, &quot;AbstractItemViewMixin&quot;, &quot;AbstractScrollAreaMixin&quot;,&quot;FrameMixin&quot;, &quot;WidgetMixin&quot; and &quot;ObjectMixin&quot;.To illustrate this, we will use our included models:    from prettyqt import custom_models, widgets    app = widgets.app()    widget_1 = widgets.TreeView()    widget_2 = widgets.TreeView()    model_1 = custom_models.SubClassTreeModel(core.ObjectMixin)  # our base mixin.    model_2 = custom_models.SubClassTreeModel(core.QObject)  # this is QtCore.QObject    widget.set_model(model)    widget.show()You can see a comparison here between Our mixin tree and the original Qt Tree.As you can notice, every Qt class with Subclasses has a corresponding Mixin.To show what this leads to, we will look at another example:    from prettyqt import custom_models, widgets    app = widgets.app()    widget = widgets.TreeView()    model = custom_models.ParentClassTreeModel(widgets.TreeWidget)    widget.set_model(model)    widget.show()Main objective is to make Qt feel &quot;pythonic&quot;. Qt is originally a C++ Framework,and using it can be quite cumbersome for Python developers. (it´s statically typed,very OOP-centric, lot of enum use, snakeCase naming etc.) PrettyQt aims to improve this by:- adding more powerful methods to the classes, which accept more types and have more options- points, sizes and rectangles can also be passed to all important methods as tuples.- all enum getters/setters also work with strings. Everything typed with Litarals for an excellent IDE experience.- python regex patterns (re.Pattern) also possible for lot of methods.- adding a lot of __dunder__ methods to the classes to make them behave like good python citizens.    match core.Point(a, 1)Apart from the 3D related modules (Qt3D, QtDataVizualization), QtXml and QtSql,almost every class from Qt is covered.## The covered modules right now are:- QtBluetooth (-&gt; prettyqt.bluetooth)- QtCharts (-&gt; prettyqt.charts)- QtCore (-&gt; prettyqt.core)- QtDesigner (-&gt; prettyqt.designer)- QtGui (-&gt; prettyqt.gui)- QtLocation (-&gt; prettyqt.location)- QtMultimedia (-&gt; prettyqt.multimedia)- QtMultimediaWidgets (-&gt; prettyqt.multimediawidgets)- QtNetwork (-&gt; prettyqt.network)- QtOpenGLWidgets (-&gt; prettyqt.openglwidgets)- QtPdf (-&gt; prettyqt.pdf)- QtPdfWidgets (-&gt; prettyqt.pdfwidgets)- QtPositioning (-&gt; prettyqt.positioning)- QtPrintSupport (-&gt; prettyqt.printsupport)- QtQml (-&gt; prettyqt.qml)- QtHelp (-&gt; prettyqt.qthelp) (prepended &quot;qt&quot; to avoid name clashing)- QtQuick (-&gt; prettyqt.quick)- QtQuickWidgets (-&gt; prettyqt.quickwidgets)- QScintilla (-&gt; prettyqt.scintilla)- QtScXml (-&gt; prettyqt.scxml)- QtStateMachine (-&gt; prettyqt.statemachine)- QtSvg (-&gt; prettyqt.svg)- QtSvgWidgets (-&gt; prettyqt.svgwidgets)- QtTextToSpeech (-&gt; prettyqt.texttospeech)- QtWebChannel (-&gt; prettyqt.webchannel)- QtWebEngineCore (-&gt; prettyqt.webenginecore)- QtWebEngineWidgets (-&gt; prettyqt.webenginewidgets)- QtWidgets (-&gt; prettyqt.widgets)All subclassed Qt classes in mentioned modules are called exactly like theQt-Counterpart, except that the leading Q is missing.### Examples:- QtWidgets.QWidget -&gt; widgets.Widget- QtCore.QObject -&gt; core.ObjectApart from the mentioned mixin tree and the corresponding classes, this library alsocontains a lot of custom widgets, delegates, eventfilters, validators,syntaxhighlighters, layouts, models, proxy models and much more.Converting to PrettyQt should be very straightforward since the original behaviour of theQt classes didnt change for the largest parts and all methods from base Qt modulesare still available. (There might be a few constructors with slightly different behaviour though.)Interested? Take a look at the documentation! (even though it totally sucks in its current state.)## Where to get itThe source code is currently hosted on GitHub at:https://github.com/phil65/PrettyQtThe latest released version are available at the [Pythonpackage index](https://pypi.org/project/prettyqt).```sh# or PyPIpip install prettyqt```## Required dependencies- [bidict](https://pypi.org/project/bidict)- [regex](https://pypi.org/project/regex)- [docutils](https://pypi.org/project/docutils)- [pygments](https://pypi.org/project/pygments)- [qstylizer](https://pypi.org/project/qstylizer)- [typing_extensions](https://pypi.org/project/typing_extensions)# And one of...- [pyside6](https://pypi.org/project/pyside6)- [pyqt6](https://pypi.org/project/pyqt6)Note: Only Qt 6.5+ is supported.## Optional dependencies- [orjson](https://pypi.org/project/orjson)- [numpy](https://pypi.org/project/numpy)- [ipython](https://pypi.org/project/ipython)- [qtconsole](https://pypi.org/project/qtconsole)- [pillow](https://pypi.org/project/pillow)- [fsspec](https://pypi.org/project/fsspec)## Installation from sourcesThis project uses poetry for dependency management and packaging. Install this first.In the `prettyqt` directory (same one where you found this file aftercloning the git repo), execute:```shpoetry install```## License[MIT](LICENSE)## DocumentationThe official documentation is hosted on Github Pages: https://phil65.github.io/PrettyQt/## Contributing to prettyqt [![Open Source Helpers](https://www.codetriage.com/phil65/prettyqt/badges/users.svg)](https://www.codetriage.com/phil65/prettyqt)All contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome.Or maybe through using PrettyQt you have an idea of your own or are looking for something in the documentation and thinking ‘this can be improved’...you can do something about it!</longdescription>
</pkgmetadata>