<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;    &lt;strong&gt;flake8-fastapi&lt;/strong&gt;&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/Kludex/flake8-fastapi&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/last-commit/Kludex/flake8-fastapi&quot; alt=&quot;Latest Commit&quot;&gt;    &lt;/a&gt;        &lt;img src=&quot;https://img.shields.io/github/workflow/status/Kludex/flake8-fastapi/Test&quot;&gt;        &lt;img src=&quot;https://img.shields.io/codecov/c/github/Kludex/flake8-fastapi&quot;&gt;    &lt;br /&gt;    &lt;a href=&quot;https://pypi.org/project/flake8-fastapi&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/flake8-fastapi&quot; alt=&quot;Package version&quot;&gt;    &lt;/a&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/flake8-fastapi&quot;&gt;    &lt;img src=&quot;https://img.shields.io/github/license/Kludex/flake8-fastapi&quot;&gt;&lt;/p&gt;A [flake8](https://flake8.pycqa.org/en/latest/index.html) plugin that helps you avoid simple FastAPI mistakes.## InstallationFirst, install the package:``` bashpip install flake8-fastapi```Then, check if the plugin is installed using `flake8`:``` bash$ flake8 --version3.9.2 (flake8-fastapi: 0.2.0, mccabe: 0.6.1, pycodestyle: 2.7.0, pyflakes: 2.3.1) CPython 3.8.11 on Linux```## Rules&lt;!-- prettier-ignore-start --&gt;  - [CF001 - Route Decorator Error](#cf001---route-decorator-error)  - [CF002 - Router Prefix Error](#cf002---router-prefix-error)  - [CF008 - CORSMiddleware Order](#cf008---corsmiddleware-order)  - [CF009 - Undocumented HTTPException](#cf009---undocumented-httpexception)  - [CF011 - No Content Response](#cf011---no-content-response)&lt;!-- prettier-ignore-end --&gt;### CF001 - Route Decorator ErrorDevelopers that were used to [flask](https://flask.palletsprojects.com/en/2.0.x/) can be persuaded or want to use the same pattern in FastAPI:```pythonfrom fastapi import FastAPIapp = FastAPI()@app.route(&quot;/&quot;, methods=[&quot;GET&quot;])def home():    return &quot;Hello world!&quot;```But on FastAPI, we have a simpler way to define this (and is the most known way to create endpoints):```pythonfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)def home():    return &quot;Hello world!&quot;```### CF002 - Router Prefix ErrorOn old FastAPI versions, we were able to add a prefix only on the `include_router` method:```pythonfrom fastapi import APIRouter, FastAPIrouter = APIRouter()@router.get(&quot;/&quot;)def home():    ...app = FastAPI()app.include_router(router, prefix=&quot;/prefix&quot;)```Now, it's possible to add in the `Router` initialization:```pythonfrom fastapi import APIRouter, FastAPIrouter = APIRouter(prefix=&quot;/prefix&quot;)@router.get(&quot;/&quot;)def home():    ...app = FastAPI()app.include_router(router)```### CF008 - CORSMiddleware OrderThere's a [tricky issue](https://github.com/tiangolo/fastapi/issues/1663) about [CORSMiddleware](https://www.starlette.io/middleware/#corsmiddleware) that people are usually unaware. Which is that this middleware should be the last one on the middleware stack. You can read more about it [here](https://github.com/tiangolo/fastapi/issues/1663).Let's see an example of what doesn't work:```pythonfrom fastapi import FastAPIapp = FastAPI()app.add_middleware(    CORSMiddleware,    allow_origins=['*'],    allow_credentials=True,    allow_methods=['*'],    allow_headers=['*'])app.add_middleware(GZipMiddleware)```As you see, the last middleware added is not `CORSMiddleware`, so it will not work as expected. On the other hand, if you change the order, it will:```pythonfrom fastapi import FastAPIapp = FastAPI()app.add_middleware(GZipMiddleware)app.add_middleware(    CORSMiddleware,    allow_origins=['*'],    allow_credentials=True,    allow_methods=['*'],    allow_headers=['*'])```### CF009 - Undocumented HTTPExceptionCurrently, there's no automatic solution to document the `HTTPException`s, besides the experimental package [`fastapi-responses`](https://github.com/Kludex/fastapi-responses).For that reason, it's easy to forget the documentation, and have a lot of undocumented endpoints. Let's see an example:```pythonfrom fastapi import FastAPI, HTTPExceptionapp = FastAPI()@app.get(&quot;/&quot;)def home():    raise HTTPException(status_code=400, detail=&quot;Bad Request&quot;)```The above endpoint doesn't have a `responses` field, even if it's clear that the response will have a `400` status code.### CF011 - No Content ResponseCurrently, if you try to send a response with no content (204), FastAPI will send a 204 status with a non-empty body.It will send a body content-length being 4 bytes.You can verify this statement running the following code:```python# main.pyfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;, status_code=204)def home():    ...```Now feel free to run with your favorite server implementation:```bashuvicorn main:app```Then use curl or any other tool to send a request:```bash$ curl localhost:8000*   Trying 127.0.0.1:8000...* TCP_NODELAY set* Connected to localhost (127.0.0.1) port 8000 (#0)&gt; GET / HTTP/1.1&gt; Host: localhost:8000&gt; User-Agent: curl/7.68.0&gt; Accept: */*&gt;* Mark bundle as not supporting multiuse&lt; HTTP/1.1 204 No Content&lt; date: Sat, 24 Jul 2021 19:21:24 GMT&lt; server: uvicorn&lt; content-length: 4&lt; content-type: application/json&lt;* Connection #0 to host localhost left intact```This goes against the [RFC](https://tools.ietf.org/html/rfc7231#section-6.3.5), which specifies that a 204 response should have no body.## LicenseThis project is licensed under the terms of the MIT license.</longdescription>
</pkgmetadata>