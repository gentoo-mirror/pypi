<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- DO NOT EDIT THIS FILE DIRECTLY. INSTEAD EDIT THE `readme_template.md` OR `guides/1)getting_started/1)quickstart.md` TEMPLATES AND THEN RUN `render_readme.py` SCRIPT. --&gt;&lt;div align=&quot;center&quot;&gt;[&lt;img src=&quot;https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/gradio.svg&quot; alt=&quot;gradio&quot; width=400&gt;](https://gradio.app)&lt;br&gt;&lt;em&gt;Build &amp; share delightful machine learning apps easily&lt;/em&gt;[![gradio-backend](https://github.com/gradio-app/gradio/actions/workflows/backend.yml/badge.svg)](https://github.com/gradio-app/gradio/actions/workflows/backend.yml)[![gradio-ui](https://github.com/gradio-app/gradio/actions/workflows/ui.yml/badge.svg)](https://github.com/gradio-app/gradio/actions/workflows/ui.yml)   [![PyPI](https://img.shields.io/pypi/v/gradio)](https://pypi.org/project/gradio/)[![PyPI downloads](https://img.shields.io/pypi/dm/gradio)](https://pypi.org/project/gradio/)![Python version](https://img.shields.io/badge/python-3.8+-important)[![Twitter follow](https://img.shields.io/twitter/follow/gradio?style=social&amp;label=follow)](https://twitter.com/gradio)[Website](https://gradio.app)| [Documentation](https://gradio.app/docs/)| [Guides](https://gradio.app/guides/)| [Getting Started](https://gradio.app/getting_started/)| [Examples](demo/)| [ä¸­æ–‡](https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/zh-cn#readme)&lt;/div&gt;# Gradio: Build Machine Learning Web Apps â€” in PythonGradio is an open-source Python library that is used to build machine learning and data science demos and web applications.With Gradio, you can quickly create a beautiful user interface around your machine learning models or data science workflow and let people &quot;try it out&quot; by dragging-and-dropping in their own images,pasting text, recording their own voice, and interacting with your demo, all through the browser.![Interface montage](https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/header-image.jpg)Gradio is useful for:- **Demoing** your machine learning models for clients/collaborators/users/students.- **Deploying** your models quickly with automatic shareable links and getting feedback on model performance.- **Debugging** your model interactively during development using built-in input manipulation tools tools.## Quickstart**Prerequisite**: Gradio requires Python 3.8 or higher, that's all!### What Does Gradio Do?One of the _best ways to share_ your machine learning model, API, or data science workflow with others is to create an **interactive app** that allows your users or colleagues to try out the demo in their browsers.Gradio allows you to **build demos and share them, all in Python.** And usually in just a few lines of code! So let's get started.### Hello, WorldTo get Gradio running with a simple &quot;Hello, World&quot; example, follow these three steps:1\. Install Gradio using pip:```bashpip install gradio```2\. Run the code below as a Python script or in a Jupyter Notebook (or [Google Colab](https://colab.research.google.com/drive/18ODkJvyxHutTN0P5APWyGFO_xwNcgHDZ?usp=sharing)):```pythonimport gradio as grdef greet(name):    return &quot;Hello &quot; + name + &quot;!&quot;demo = gr.Interface(fn=greet, inputs=&quot;text&quot;, outputs=&quot;text&quot;)    demo.launch()```We shorten the imported name to `gr` for better readability of code using Gradio. This is a widely adopted convention that you should follow so that anyone working with your code can easily understand it.3\. The demo below will appear automatically within the Jupyter Notebook, or pop in a browser on [http://localhost:7860](http://localhost:7860) if running from a script:![`hello_world` demo](https://raw.githubusercontent.com/gradio-app/gradio/main/demo/hello_world/screenshot.gif)When developing locally, if you want to run the code as a Python script, you can use the Gradio CLI to launch the application **in reload mode**, which will provide seamless and fast development. Learn more about reloading in the [Auto-Reloading Guide](https://gradio.app/developing-faster-with-reload-mode/).```bashgradio app.py```Note: you can also do `python app.py`, but it won't provide the automatic reload mechanism.### The `Interface` ClassYou'll notice that in order to make the demo, we created a `gr.Interface`. This `Interface` class can wrap any Python function with a user interface. In the example above, we saw a simple text-based function, but the function could be anything from music generator to a tax calculator to the prediction function of a pretrained machine learning model.The core `Interface` class is initialized with three required parameters:- `fn`: the function to wrap a UI around- `inputs`: which component(s) to use for the input (e.g. `&quot;text&quot;`, `&quot;image&quot;` or `&quot;audio&quot;`)- `outputs`: which component(s) to use for the output (e.g. `&quot;text&quot;`, `&quot;image&quot;` or `&quot;label&quot;`)Let's take a closer look at these components used to provide input and output.### Components AttributesWe saw some simple `Textbox` components in the previous examples, but what if you want to change how the UI components look or behave?Let's say you want to customize the input text field â€” for example, you wanted it to be larger and have a text placeholder. If we use the actual class for `Textbox` instead of using the string shortcut, you have access to much more customizability through component attributes.```pythonimport gradio as grdef greet(name):    return &quot;Hello &quot; + name + &quot;!&quot;demo = gr.Interface(    fn=greet,    inputs=gr.Textbox(lines=2, placeholder=&quot;Name Here...&quot;),    outputs=&quot;text&quot;,)demo.launch()```![`hello_world_2` demo](https://raw.githubusercontent.com/gradio-app/gradio/main/demo/hello_world_2/screenshot.gif)### Multiple Input and Output ComponentsSuppose you had a more complex function, with multiple inputs and outputs. In the example below, we define a function that takes a string, boolean, and number, and returns a string and number. Take a look how you pass a list of input and output components.```pythonimport gradio as grdef greet(name, is_morning, temperature):    salutation = &quot;Good morning&quot; if is_morning else &quot;Good evening&quot;    greeting = f&quot;{salutation} {name}. It is {temperature} degrees today&quot;    celsius = (temperature - 32) * 5 / 9    return greeting, round(celsius, 2)demo = gr.Interface(    fn=greet,    inputs=[&quot;text&quot;, &quot;checkbox&quot;, gr.Slider(0, 100)],    outputs=[&quot;text&quot;, &quot;number&quot;],)demo.launch()```![`hello_world_3` demo](https://raw.githubusercontent.com/gradio-app/gradio/main/demo/hello_world_3/screenshot.gif)You simply wrap the components in a list. Each component in the `inputs` list corresponds to one of the parameters of the function, in order. Each component in the `outputs` list corresponds to one of the values returned by the function, again in order.### An Image ExampleGradio supports many types of components, such as `Image`, `DataFrame`, `Video`, or `Label`. Let's try an image-to-image function to get a feel for these!```pythonimport numpy as npimport gradio as grdef sepia(input_img):    sepia_filter = np.array([        [0.393, 0.769, 0.189],         [0.349, 0.686, 0.168],         [0.272, 0.534, 0.131]    ])    sepia_img = input_img.dot(sepia_filter.T)    sepia_img /= sepia_img.max()    return sepia_imgdemo = gr.Interface(sepia, gr.Image(width=200, height=200), &quot;image&quot;)demo.launch()```![`sepia_filter` demo](https://raw.githubusercontent.com/gradio-app/gradio/main/demo/sepia_filter/screenshot.gif)When using the `Image` component as input, your function will receive a NumPy array with the shape `(height, width, 3)`, where the last dimension represents the RGB values. We'll return an image as well in the form of a NumPy array.You can also set the datatype used by the component with the `type=` keyword argument. For example, if you wanted your function to take a file path to an image instead of a NumPy array, the input `Image` component could be written as:```pythongr.Image(type=&quot;filepath&quot;, shape=...)```Also note that our input `Image` component comes with an edit button ðŸ–‰, which allows for cropping and zooming into images. Manipulating images in this way can help reveal biases or hidden flaws in a machine learning model!You can read more about the many components and how to use them in the [Gradio docs](https://gradio.app/docs).### ChatbotsGradio includes a high-level class, `gr.ChatInterface`, which is similar to `gr.Interface`, but is specifically designed for chatbot UIs. The `gr.ChatInterface` class also wraps a function but this function must have a specific signature. The function should take two arguments: `message` and then `history` (the arguments can be named anything, but must be in this order)- `message`: a `str` representing the user's input- `history`: a `list` of `list` representing the conversations up until that point. Each inner list consists of two `str` representing a pair: `[user input, bot response]`.Your function should return a single string response, which is the bot's response to the particular user input `message`.Other than that, `gr.ChatInterface` has no required parameters (though several are available for customization of the UI).Here's a toy example:```pythonimport randomimport gradio as grdef random_response(message, history):    return random.choice([&quot;Yes&quot;, &quot;No&quot;])demo = gr.ChatInterface(random_response)demo.launch()```![`chatinterface_random_response` demo](https://raw.githubusercontent.com/gradio-app/gradio/main/demo/chatinterface_random_response/screenshot.gif)You can [read more about `gr.ChatInterface` here](https://gradio.app/guides/creating-a-chatbot-fast).### Blocks: More Flexibility and ControlGradio offers two approaches to build apps:1\. **Interface** and **ChatInterface**, which provide a high-level abstraction for creating demos that we've been discussing so far.2\. **Blocks**, a low-level API for designing web apps with more flexible layouts and data flows. Blocks allows you to do things like feature multiple data flows and demos, control where components appear on the page, handle complex data flows (e.g. outputs can serve as inputs to other functions), and update properties/visibility of components based on user interaction â€” still all in Python. If this customizability is what you need, try `Blocks` instead!### Hello, BlocksLet's take a look at a simple example. Note how the API here differs from `Interface`.```pythonimport gradio as grdef greet(name):    return &quot;Hello &quot; + name + &quot;!&quot;with gr.Blocks() as demo:    name = gr.Textbox(label=&quot;Name&quot;)    output = gr.Textbox(label=&quot;Output Box&quot;)    greet_btn = gr.Button(&quot;Greet&quot;)    greet_btn.click(fn=greet, inputs=name, outputs=output, api_name=&quot;greet&quot;)demo.launch()```![`hello_blocks` demo](https://raw.githubusercontent.com/gradio-app/gradio/main/demo/hello_blocks/screenshot.gif)Things to note:- `Blocks` are made with a `with` clause, and any component created inside this clause is automatically added to the app.- Components appear vertically in the app in the order they are created. (Later we will cover customizing layouts!)- A `Button` was created, and then a `click` event-listener was added to this button. The API for this should look familiar! Like an `Interface`, the `click` method takes a Python function, input components, and output components.### More ComplexityHere's an app to give you a taste of what's possible with `Blocks`:```pythonimport numpy as npimport gradio as grdef flip_text(x):    return x[::-1]def flip_image(x):    return np.fliplr(x)with gr.Blocks() as demo:    gr.Markdown(&quot;Flip text or image files using this demo.&quot;)    with gr.Tab(&quot;Flip Text&quot;):        text_input = gr.Textbox()        text_output = gr.Textbox()        text_button = gr.Button(&quot;Flip&quot;)    with gr.Tab(&quot;Flip Image&quot;):        with gr.Row():            image_input = gr.Image()            image_output = gr.Image()        image_button = gr.Button(&quot;Flip&quot;)    with gr.Accordion(&quot;Open for More!&quot;):        gr.Markdown(&quot;Look at me...&quot;)    text_button.click(flip_text, inputs=text_input, outputs=text_output)    image_button.click(flip_image, inputs=image_input, outputs=image_output)demo.launch()```![`blocks_flipper` demo](https://raw.githubusercontent.com/gradio-app/gradio/main/demo/blocks_flipper/screenshot.gif)A lot more going on here! We'll cover how to create complex `Blocks` apps like this in the [building with blocks](https://gradio.app/blocks-and-event-listeners) section for you.Congrats, you're now familiar with the basics of Gradio! ðŸ¥³ Go to our [next guide](https://gradio.app/key_features) to learn more about the key features of Gradio.## Open Source StackGradio is built with many wonderful open-source libraries, please support them as well![&lt;img src=&quot;https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/huggingface_mini.svg&quot; alt=&quot;huggingface&quot; height=40&gt;](https://huggingface.co)[&lt;img src=&quot;https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/python.svg&quot; alt=&quot;python&quot; height=40&gt;](https://www.python.org)[&lt;img src=&quot;https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/fastapi.svg&quot; alt=&quot;fastapi&quot; height=40&gt;](https://fastapi.tiangolo.com)[&lt;img src=&quot;https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/encode.svg&quot; alt=&quot;encode&quot; height=40&gt;](https://www.encode.io)[&lt;img src=&quot;https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/svelte.svg&quot; alt=&quot;svelte&quot; height=40&gt;](https://svelte.dev)[&lt;img src=&quot;https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/vite.svg&quot; alt=&quot;vite&quot; height=40&gt;](https://vitejs.dev)[&lt;img src=&quot;https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/pnpm.svg&quot; alt=&quot;pnpm&quot; height=40&gt;](https://pnpm.io)[&lt;img src=&quot;https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/tailwind.svg&quot; alt=&quot;tailwind&quot; height=40&gt;](https://tailwindcss.com)[&lt;img src=&quot;https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/storybook.svg&quot; alt=&quot;storybook&quot; height=40&gt;](https://storybook.js.org/)[&lt;img src=&quot;https://raw.githubusercontent.com/gradio-app/gradio/main/readme_files/chromatic.svg&quot; alt=&quot;chromatic&quot; height=40&gt;](https://www.chromatic.com/)## LicenseGradio is licensed under the Apache License 2.0 found in the [LICENSE](LICENSE) file in the root directory of this repository.## CitationAlso check out the paper _[Gradio: Hassle-Free Sharing and Testing of ML Models in the Wild](https://arxiv.org/abs/1906.02569), ICML HILL 2019_, and please cite it if you use Gradio in your work.```@article{abid2019gradio,  title = {Gradio: Hassle-Free Sharing and Testing of ML Models in the Wild},  author = {Abid, Abubakar and Abdalla, Ali and Abid, Ali and Khan, Dawood and Alfozan, Abdulrahman and Zou, James},  journal = {arXiv preprint arXiv:1906.02569},  year = {2019},}```</longdescription>
</pkgmetadata>