<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aesara-theano-fallbackStriving towards backwards compatibility as[Theano](https://github.com/theano/theano) is replaced by[Aesara](https://github.com/pymc-devs/aesara) by the [PyMC3project](https://docs.pymc.io). The idea is to provide a nearly drop inreplacement for importing `aesara` that will fall back onto `theano` when`aesara` is not installed. This was specifically designed to support the[exoplanet](https://github.com/exoplanet-dev/exoplanet) and[starry](https://github.com/rodluger/starry) projects so it might not supportall of the features that you need. If you find something that isn't supported,please submit a pull request!## InstallaionThis library can be installed using pip:```bashpython -m pip install aesara-theano-fallback```## UsageThe syntax is designed to mostly follow `aesara`, so things like the following will often work:```pythonimport aesara_theano_fallback.tensor as aet```For top-level access, use```pythonfrom aesara_theano_fallback import aesara```One place where the syntax has changed significantly between Theano and Aesarais the `theano.gof` module was re-named to `aesara.graph` and the contents weremoved around a little bit. For exoplanet and starry, we define a few custom `Op`sand you can use this library to do that as follows:```pythonfrom aesara_theano_fallback.graph import basic, opclass MyPythonOp(op.Op):    def make_node(self, *args):        # ...        return basic.Apply(self, in_args, out_args)class MyCOp(op.ExternalCOp):    func_file = &quot;./cpp_impl.cc&quot;    func_name = &quot;APPLY_SPECIFIC(my_op_name)&quot;    # ...```</longdescription>
</pkgmetadata>