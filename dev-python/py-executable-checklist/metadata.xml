<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Executable Workflow[![PyPI](https://img.shields.io/pypi/v/py-executable-checklist?style=flat-square)](https://pypi.python.org/pypi/py-executable-checklist/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/py-executable-checklist?style=flat-square)](https://pypi.python.org/pypi/py-executable-checklist/)[![PyPI - License](https://img.shields.io/pypi/l/py-executable-checklist?style=flat-square)](https://pypi.python.org/pypi/py-executable-checklist/)---**Documentation**: [https://namuan.github.io/py-executable-checklist](https://namuan.github.io/py-executable-checklist)**Source Code**: [https://github.com/namuan/py-executable-checklist](https://github.com/namuan/py-executable-checklist)**PyPI**: [https://pypi.org/project/py-executable-checklist/](https://pypi.org/project/py-executable-checklist/)---Helper classes to develop executable workflow scripts## Installation```shpip install py-executable-checklist```## Example Usage```pythonimport loggingfrom argparse import ArgumentParser, RawDescriptionHelpFormatterfrom py_executable_checklist.workflow import run_workflow, WorkflowBase# Common functions across steps# Workflow stepsclass DoSomething(WorkflowBase):    &quot;&quot;&quot;    Go to this page    Copy the command    Run the command    Copy the output and paste it into the email    &quot;&quot;&quot;    username: str    def execute(self):        logging.info(f&quot;Hello {self.username}&quot;)        # output        return {&quot;greetings&quot;: f&quot;Hello {self.username}&quot;}# Workflow definitiondef workflow():    return [        DoSomething,    ]# Boilerplatedef parse_args():    parser = ArgumentParser(        description=__doc__, formatter_class=RawDescriptionHelpFormatter    )    parser.add_argument(&quot;-u&quot;, &quot;--username&quot;, type=str, required=True, help=&quot;User name&quot;)    parser.add_argument(        &quot;-v&quot;,        &quot;--verbose&quot;,        action=&quot;store_true&quot;,        default=False,        dest=&quot;verbose&quot;,        help=&quot;Display context variables at each step&quot;,    )    return parser.parse_args()def main(args):    context = args.__dict__    run_workflow(context, workflow())if __name__ == &quot;__main__&quot;:    args = parse_args()    main(args)```## Development* Clone this repository* Requirements:    * [Poetry](https://python-poetry.org/)    * Python 3.7+* Create a virtual environment and install the dependencies```shpoetry install```* Activate the virtual environment```shpoetry shell```### Validating build```shmake build```### Release processA release is automatically published when a new version is bumped using `make bump`. See `.github/workflows/build.yml`for more details. Once the release is published, `.github/workflows/publish.yml` will automatically publish it to PyPI.</longdescription>
</pkgmetadata>