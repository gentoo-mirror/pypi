<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. vim: ft=rst sts=2 sw=2 tw=70.. default-role:: literal.. This file is marked up using reStructuredText.   Lines beginning with &quot;..&quot; are reST directives.   &quot;foo_&quot; or &quot;`foo bar`_&quot; is a link, defined at &quot;.. _foo&quot; or   &quot;.. _foo bar&quot;.   &quot;::&quot; introduces a literal block (usually some form of code).   &quot;`foo`&quot; is some kind of identifier.   Suspicious backslashes in the text (&quot;`std::string`\s&quot;) are required   for reST to recognize the preceding character as syntax.======================================================================                              py-impala======================================================================----------------------------------------------------------------------   Import packages and modules from arbitrary directories and files----------------------------------------------------------------------:Author: Roman Neuhauser:Contact: neuhauser@sigpipe.cz:Copyright: This document is in the public domain.Overview========Impala is a PEP302_ protocol (`sys.meta_path` hook for the `import`statement) implementation allowing the user to import packages andmodules from arbitrarily named directories and files... _PEP302: http://www.python.org/dev/peps/pep-0302/Motivation==========* Comfort and freedom in development* Installed interface available without installationLet's say I'm developing a Python package called `pyoneer`.  I want tolay the source code out like this: ::  README.txt  src/    __init__.py    some.py    more.py  tests/    ...The question then is, how do I `import pyoneer` in the test files(`&lt;workdir&gt;/tests/...`) and have it load `&lt;workdir&gt;/src/__init__.py`?The default `import` mechanism requires packages to live in eponymousdirectories.What's the fuss about, you ask?  I should simply rename the `src`directory to `pyoneer` or maybe `src/pyoneer`, no?Indeed, this would be tolerable, at least with top-level packages.However, if I'm working on something that will be available as`foo.bar.baz` after installation, I certainly don't want to wadethrough the desolate `src/foo/bar` to get to the source code.Maybe I could `import src` in the tests instead?  Well, tests area form of documentation, and doubly so with `doctest`_.  &quot;Proper&quot;documentation (README.txt, etc) can also contain snippets whichshould be verifiable without the CUT being installed.*Impala* to the rescue!::  from os.path import abspath, dirname  import impala  root = abspath(dirname(__file__))  impala.register(dict(    pyoneer = '%s/src' % root  ))  import pyoneer.. _doctest: http://docs.python.org/2/library/doctest.htmlDescription===========`impala.register(aliases)`++++++++++++++++++++++++++`aliases` is a `dict` mapping from fully-qualified module/packagenames to paths to load from.  To import a package `p` from path`/a/b/c`, `aliases` must include the key `p` with associated value`/a/b/c`, and `/a/b/c/__init__.py` must be a valid package entrypoint.  To import a module `m` from path `/f/g/h.py`, `aliases` mustinclude the key `m` with associated value `/f/g/h.py`.Example: ::  from os.path import abspath, dirname  import impala  r = dirname(abspath(__file__))  impala.register({    'p': '%s/a/b/c' % r,    'p.q': '%s/f/g/h' % r,    'p.q.m': '%s/k.py' % r,  })  import p  import p.q  import p.q.mLicense=======*py-impala* is distributed under the `MIT license`_.  See `LICENSE`for details... _MIT license: http://opensource.org/licenses/MITInstallation============Using `pip` from PyPI_, the Python Package Index: ::  pip install impalaFrom a checkout_ or extracted tarball: ::  python setup.py install.. _PyPI:     http://pypi.python.org/pypi.. _checkout: https://github.com/roman-neuhauser/py-impala.gitDevelopment===========Source code and issue tracker are at Github:  https://github.com/roman-neuhauser/py-impala</longdescription>
</pkgmetadata>