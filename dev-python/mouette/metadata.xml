<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Mouette is a small python library for handling point clouds, polylines, surface and volume meshes. It also contains various geometry processing algorithm, like shortest-paths, old-school parametrization or frame field computations.Mouette (French for seagull) stands for _Maillages, OUtils Et Traitement auTomatique de la géométriE_ (French for &quot;Meshes, Tools and Geometry Processing&quot;).## InstallationUsing pip: ```pip install mouette```## OverviewMouette allows to easily load data from various file format and access geometrical primitives#### Import and Export made simple```pythonimport mouette as Mmesh = M.mesh.load(&quot;path/to/my/mesh/mesh.obj&quot;)print(mesh.vertices[0])print(mesh.faces[2])M.mesh.save(mesh,&quot;path/to/export/mesh.obj&quot;)```#### Define quantities over meshes and work with itIt is possible to define any quantity on mesh elements```pythonmy_v_attribute = mesh.vertices.create_attribute(&quot;my_attribute&quot;, float) # an attribute storing one floating-point number per vertexmy_v_attribute[3] = 4.my_f_attribute = mesh.faces.create_attribute(&quot;my_attribute&quot;, 2, int) # an attribute storing two integers per facem_f_attribute[2] = [1,3]```Attributes can store booleans, integers, floating-point numbers, complex numbers and strings, using the provided python types `bool`, `int`, `float`, `complex` and `str`.#### Call Geometry Processing Algorithms```pythonff = M.processing.framefield.FrameField2DVertices(mesh)ff.run()ffmesh = ff.export_as_mesh()M.mesh.save(ffmesh, &quot;framefield.mesh&quot;)```#### And much moreSee full documentation at https://gcoiffier.github.io/mouette/ (still a Work in Progress)### Run tests`python -m pytest tests/`</longdescription>
</pkgmetadata>