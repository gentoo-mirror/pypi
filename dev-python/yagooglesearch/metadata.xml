<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># yagooglesearch - Yet another googlesearch## Overview`yagooglesearch` is a Python library for executing intelligent, realistic-looking, and tunable Google searches.  Itsimulates real human Google search behavior to prevent rate limiting by Google (the dreaded HTTP 429 response), and ifHTTP 429 blocked by Google, logic to back off and continue trying.  The library does not use the Google API and isheavily based off the [googlesearch](https://github.com/MarioVilas/googlesearch) library.  The features include:* Tunable search client attributes mid searching* Returning a list of URLs instead of a generator* HTTP 429 / rate-limit detection (Google is blocking your IP for making too many search requests) and recovery* Randomizing delay times between retrieving paged search results (i.e., clicking on page 2 for more results)* HTTP(S) and SOCKS5 proxy support* Leveraging `requests` library for HTTP requests and cookie management* Adds &quot;&amp;filter=0&quot; by default to search URLs to prevent any omission or filtering of search results by Google* Console and file logging* Python 3.6+## Terms and ConditionsThis code is supplied as-is and you are fully responsible for how it is used.  Scraping Google Search results mayviolate their [Terms of Service](https://policies.google.com/terms).  Another Python Google search library had someinteresting information/discussion on it:* [Original issue](https://github.com/aviaryan/python-gsearch/issues/1)* [A response](https://github.com/aviaryan/python-gsearch/issues/1#issuecomment-365581431&gt;)* Author created a separate [Terms and Conditions](https://github.com/aviaryan/python-gsearch/blob/master/T_AND_C.md)* ...that contained link to this [blog](https://benbernardblog.com/web-scraping-and-crawling-are-perfectly-legal-right/)Google's preferred method is to use their [API](https://developers.google.com/custom-search/v1/overview).## Installation## pip```bashpip install yagooglesearch```## &lt;span&gt;setup.py&lt;/span&gt;```bashgit clone https://github.com/opsdisk/yagooglesearchcd yagooglesearchvirtualenv -p python3.7 .venv  # If using a virtual environment.source .venv/bin/activate  # If using a virtual environment.python setup.py install```## Usage```pythonimport yagooglesearchquery = &quot;site:github.com&quot;client = yagooglesearch.SearchClient(    query,    tbs=&quot;li:1&quot;,    max_search_result_urls_to_return=100,    http_429_cool_off_time_in_minutes=45,    http_429_cool_off_factor=1.5,    # proxy=&quot;socks5h://127.0.0.1:9050&quot;,    verbosity=5,    verbose_output=True,  # False (only URLs) or True (rank, title, description, and URL))client.assign_random_user_agent()urls = client.search()len(urls)for url in urls:    print(url)```## Google is blocking me!Low and slow is the strategy when executing Google searches using `yagooglesearch`.  If you start getting HTTP 429responses, Google has rightfully detected you as a bot and will block your IP for a set period of time. `yagooglesearch`is not able to bypass CAPTCHA, but you can do this manually by performing a Google search from a browser and proving youare a human.The criteria and thresholds to getting blocked is unknown, but in general, randomizing the user agent, waiting enoughtime between paged search results (7-17 seconds), and waiting enough time between different Google searches (30-60seconds) should suffice.  Your mileage will definitely vary though.  Using this library with Tor will likely get youblocked quickly.## HTTP 429 detection and recovery (optional)If `yagooglesearch` detects an HTTP 429 response from Google, it will sleep for `http_429_cool_off_time_in_minutes`minutes and then try again.  Each time an HTTP 429 is detected, it increases the wait time by a factor of`http_429_cool_off_factor`.The goal is to have `yagooglesearch` worry about HTTP 429 detection and recovery and not put the burden on the scriptusing it.If you do not want `yagooglesearch` to handle HTTP 429s and would rather handle it yourself, pass`yagooglesearch_manages_http_429s=False` when instantiating the yagooglesearch object.  If an HTTP 429 is detected, thestring &quot;HTTP_429_DETECTED&quot; is added to a list object that will be returned, and it's up to you on what the next stepshould be.  The list object will contain any URLs found before the HTTP 429 was detected.```pythonimport yagooglesearchquery = &quot;site:twitter.com&quot;client = yagooglesearch.SearchClient(    query,    tbs=&quot;li:1&quot;,    verbosity=4,    num=10,    max_search_result_urls_to_return=1000,    minimum_delay_between_paged_results_in_seconds=1,    yagooglesearch_manages_http_429s=False,  # Add to manage HTTP 429s.)client.assign_random_user_agent()urls = client.search()if &quot;HTTP_429_DETECTED&quot; in urls:    print(&quot;HTTP 429 detected...it's up to you to modify your search.&quot;)    # Remove HTTP_429_DETECTED from list.    urls.remove(&quot;HTTP_429_DETECTED&quot;)    print(&quot;URLs found before HTTP 429 detected...&quot;)    for url in urls:        print(url)```![http429_detection_string_in_returned_list.png](img/http429_detection_string_in_returned_list.png)## HTTP and SOCKS5 proxy support`yagooglesearch` supports the use of a proxy.  The provided proxy is used for the entire life cycle of the search tomake it look more human, instead of rotating through various proxies for different portions of the search.  The generalsearch life cycle is:1) Simulated &quot;browsing&quot; to `google.com`2) Executing the search and retrieving the first page of results3) Simulated clicking through the remaining paged (page 2, page 3, etc.) search resultsTo use a proxy, provide a proxy string when initializing a `yagooglesearch.SearchClient` object:```pythonclient = yagooglesearch.SearchClient(    &quot;site:github.com&quot;,    proxy=&quot;socks5h://127.0.0.1:9050&quot;,)```Supported proxy schemes are based off those supported in the Python `requests` library(&lt;https://docs.python-requests.org/en/master/user/advanced/#proxies&gt;):* `http`* `https`* `socks5` - &quot;causes the DNS resolution to happen on the client, rather than on the proxy server.&quot;  You likely **do  not** want this since all DNS lookups would source from where `yagooglesearch` is being run instead of the proxy.* `socks5h` - &quot;If you want to resolve the domains on the proxy server, use socks5h as the scheme.&quot;  This is the **best**  option if you are using SOCKS because the DNS lookup and Google search is sourced from the proxy IP address.## HTTPS proxies and SSL/TLS certificatesIf you are using a self-signed certificate for an HTTPS proxy, you will likely need to disable SSL/TLS verification wheneither:1) Instantiating the `yagooglesearch.SearchClient` object:```pythonimport yagooglesearchquery = &quot;site:github.com&quot;client = yagooglesearch.SearchClient(    query,    proxy=&quot;http://127.0.0.1:8080&quot;,    verify_ssl=False,    verbosity=5,)```2) or after instantiation:```pythonquery = &quot;site:github.com&quot;client = yagooglesearch.SearchClient(    query,    proxy=&quot;http://127.0.0.1:8080&quot;,    verbosity=5,)client.verify_ssl = False```## Multiple proxiesIf you want to use multiple proxies, that burden is on the script utilizing the `yagooglesearch` library to instantiatea new `yagooglesearch.SearchClient` object with the different proxy. Below is an example of looping through a list ofproxies:```pythonimport yagooglesearchproxies = [    &quot;socks5h://127.0.0.1:9050&quot;,    &quot;socks5h://127.0.0.1:9051&quot;,    &quot;http://127.0.0.1:9052&quot;,  # HTTPS proxy with a self-signed SSL/TLS certificate.]search_queries = [    &quot;python&quot;,    &quot;site:github.com pagodo&quot;,    &quot;peanut butter toast&quot;,    &quot;are dragons real?&quot;,    &quot;ssh tunneling&quot;,]proxy_rotation_index = 0for search_query in search_queries:    # Rotate through the list of proxies using modulus to ensure the index is in the proxies list.    proxy_index = proxy_rotation_index % len(proxies)    client = yagooglesearch.SearchClient(        search_query,        proxy=proxies[proxy_index],    )    # Only disable SSL/TLS verification for the HTTPS proxy using a self-signed certificate.    if proxies[proxy_index].startswith(&quot;http://&quot;):        client.verify_ssl = False    urls_list = client.search()    print(urls_list)    proxy_rotation_index += 1```## GOOGLE_ABUSE_EXEMPTION cookieIf you have a `GOOGLE_ABUSE_EXEMPTION` cookie value, it can be passed into `google_exemption` when instantiating the`SearchClient` object.## &amp;tbs= URL filter clarificationThe `&amp;tbs=` parameter is used to specify either verbatim or time-based filters.### Verbatim search```none&amp;tbs=li:1```![verbatim.png](./img/verbatim.png)### time-based filters| Time filter | &amp;tbs= URL parameter                   | Notes                                 || ----------- | ------------------------------------- | ------------------------------------- || Past hour   | qdr:h                                 |                                       || Past day    | qdr:d                                 | Past 24 hours                         || Past week   | qdr:w                                 |                                       || Past month  | qdr:m                                 |                                       || Past year   | qdr:y                                 |                                       || Custom      | cdr:1,cd_min:1/1/2021,cd_max:6/1/2021 | See yagooglesearch.get_tbs() function |![time_filters.png](./img/time_filters.png)## LimitationsCurrently, the `.filter_search_result_urls()` function will remove any url with the word &quot;google&quot; in it.  This is toprevent the returned search URLs from being polluted with Google URLs.  Note this if you are trying to explicitly searchfor results that may have &quot;google&quot; in the URL, such as `site:google.com computer`## LicenseDistributed under the BSD 3-Clause License. See [LICENSE](./LICENSE) for more information.## Contact[@opsdisk](https://twitter.com/opsdisk)Project Link: [https://github.com/opsdisk/yagooglesearch](https://github.com/opsdisk/yagooglesearch)## Acknowledgements* [Mario Vilas](https://github.com/MarioVilas) for his amazing work on the original  [googlesearch](https://github.com/MarioVilas/googlesearch) library.## Contributors* [KennBro](https://github.com/KennBro) - &lt;https://github.com/opsdisk/yagooglesearch/pull/9&gt;* [ArshansGithub](https://github.com/ArshansGithub) - &lt;https://github.com/opsdisk/yagooglesearch/pull/21&gt;</longdescription>
</pkgmetadata>