<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Watson Developer Cloud Python SDK=================================|Build Status| |Slack| |Latest Stable Version| |CLA assistant|Python client library to quickly get started with the various `WatsonAPIs &lt;http://www.ibm.com/watson/developercloud/&gt;`__ services. Table of Contents-  `Before you begin &lt;#before-you-begin&gt;`__-  `Installation &lt;#installation&gt;`__-  `Examples &lt;#examples&gt;`__-  `Running in IBM Cloud &lt;#running-in-ibm-cloud&gt;`__-  `Authentication &lt;#authentication&gt;`__   -  `Getting credentials &lt;#getting-credentials&gt;`__   -  `IAM &lt;#iam&gt;`__   -  `Username and password &lt;#username-and-password&gt;`__-  `Python version &lt;#python-version&gt;`__-  `Changes for v1.0 &lt;#changes-for-v10&gt;`__-  `Changes for v2.0 &lt;#changes-for-v20&gt;`__-  `Migration &lt;#migration&gt;`__-  `Configuring the http   client &lt;#configuring-the-http-client-supported-from-v110&gt;`__-  `Disable SSL certificate   verification &lt;#disable-ssl-certificate-verification&gt;`__-  `Sending request headers &lt;#sending-request-headers&gt;`__-  `Parsing HTTP response info &lt;#parsing-http-response-info&gt;`__-  `Dependencies &lt;#dependencies&gt;`__-  `License &lt;#license&gt;`__-  `Contributing &lt;#contributing&gt;`__Before you begin-----------------  You need an `IBM   Cloud &lt;http://console.bluemix.net/registration?target=/developer/watson&amp;cm_sp=WatsonPlatform-WatsonServices-_-OnPageNavLink-IBMWatson_SDKs-_-Python&gt;`__   account.Installation------------Note: We are moving to ``ibm-watson``. All versions prior to v3.0.0 canstill be found in ``watson-developer-cloud``To install, use ``pip`` or ``easy_install``:.. code:: bash    pip install --upgrade watson-developer-cloudor.. code:: bash    easy_install --upgrade watson-developer-cloudNote the following:a) If you run into permission issues try:.. code:: bash    sudo -H pip install --ignore-installed six watson-developer-cloudFor more details see`#225 &lt;https://github.com/watson-developer-cloud/python-sdk/issues/225&gt;`__b) In case you run into problems installing the SDK in DSX, try   ::       !pip install --upgrade pip   Restarting the kernelFor more details see`#405 &lt;https://github.com/watson-developer-cloud/python-sdk/issues/405&gt;`__Examples--------The`examples &lt;https://github.com/watson-developer-cloud/python-sdk/tree/master/examples&gt;`__folder has basic and advanced examples. The examples within each serviceassume that you already have `servicecredentials &lt;#getting-credentials&gt;`__.Running in IBM Cloud--------------------If you run your app in IBM Cloud, the SDK gets credentials from the```VCAP_SERVICES`` &lt;https://console.bluemix.net/docs/services/watson/getting-started-variables.html&gt;`__environment variable.Authentication--------------Watson services are migrating to token-based Identity and AccessManagement (IAM) authentication.-  With some service instances, you authenticate to the API by using   **`IAM &lt;#iam&gt;`__**.-  In other instances, you authenticate by providing the **`username and   password &lt;#username-and-password&gt;`__** for the service instance.**Note:** Authenticating with the X-Watson-Authorization-Token header isdeprecated. The token continues to work with Cloud Foundry services, butis not supported for services that use Identity and Access Management(IAM) authentication. See `here &lt;#iam&gt;`__ for details.Getting credentials~~~~~~~~~~~~~~~~~~~To find out which authentication to use, view the service credentials.You find the service credentials for authentication the same way for allWatson services:1. Go to the IBM Cloud `Dashboard &lt;https://cloud.ibm.com/&gt;`__ page.2. Either click an existing Watson service instance in your `resource   list &lt;https://cloud.ibm.com/resources&gt;`__ or click `**Create resource   &gt; AI** &lt;https://cloud.ibm.com/catalog?category=ai&gt;`__ and create a   service instance.3. Click on the **Manage** item in the left nav bar of your service   instance.On this page, you should be able to see your credentials for accessingyour service instance.Supplying credentials~~~~~~~~~~~~~~~~~~~~~There are two ways to supply the credentials you found above to the SDKfor authentication.Credential file (easier!)^^^^^^^^^^^^^^^^^^^^^^^^^With a credential file, you just need to put the file in the right placeand the SDK will do the work of parsing and authenticating. You can getthis file by clicking the **Download** button for the credentials in the**Manage** tab of your service instance.The file downloaded will be called ``ibm-credentials.env``. This is thename the SDK will search for and **must** be preserved unless you wantto configure the file path (more on that later). The SDK will look foryour ``ibm-credentials.env`` file in the following places (in order):-  Your system's home directory-  The top-level directory of the project you're using the SDK inAs long as you set that up correctly, you don't have to worry aboutsetting any authentication options in your code. So, for example, if youcreated and downloaded the credential file for your Discovery instance,you just need to do the following:.. code:: python    discovery = DiscoveryV1(version='2018-08-01')And that's it!If you're using more than one service at a time in your code and get twodifferent ``ibm-credentials.env`` files, just put the contents togetherin one ``ibm-credentials.env`` file and the SDK will handle assigningcredentials to their appropriate services.If you would like to configure the location/name of your credentialfile, you can set an environment variable called``IBM_CREDENTIALS_FILE``. **This will take precedence over the locationsspecified above.** Here's how you can do that:.. code:: bash    export IBM_CREDENTIALS_FILE=&quot;&lt;path&gt;&quot;where ``&lt;path&gt;`` is something like``/home/user/Downloads/&lt;file_name&gt;.env``.Manually^^^^^^^^If you'd prefer to set authentication values manually in your code, theSDK supports that as well. The way you'll do this depends on what typeof credentials your service instance gives you.IAM~~~IBM Cloud is migrating to token-based Identity and Access Management(IAM) authentication. IAM authentication uses a service API key to getan access token that is passed with the call. Access tokens are validfor approximately one hour and must be regenerated.You supply either an IAM service **API key** or an **access token**:-  Use the API key to have the SDK manage the lifecycle of the access   token. The SDK requests an access token, ensures that the access   token is valid, and refreshes it if necessary.-  Use the access token if you want to manage the lifecycle yourself.   For details, see `Authenticating with IAM   tokens &lt;https://console.bluemix.net/docs/services/watson/getting-started-iam.html&gt;`__.Supplying the IAM API key^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    # In the constructor, letting the SDK manage the IAM token    discovery = DiscoveryV1(version='2018-08-01',                            url='&lt;url_as_per_region&gt;',                            iam_apikey='&lt;iam_apikey&gt;',                            iam_url='&lt;iam_url&gt;') # optional - the default value is https://iam.bluemix.net/identity/token.. code:: python    # after instantiation, letting the SDK manage the IAM token    discovery = DiscoveryV1(version='2018-08-01', url='&lt;url_as_per_region&gt;')    discovery.set_iam_apikey('&lt;iam_apikey&gt;')Supplying the access token^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    # in the constructor, assuming control of managing IAM token    discovery = DiscoveryV1(version='2018-08-01',                            url='&lt;url_as_per_region&gt;',                            iam_access_token='&lt;iam_access_token&gt;').. code:: python    # after instantiation, assuming control of managing IAM token    discovery = DiscoveryV1(version='2018-08-01', url='&lt;url_as_per_region&gt;')    discovery.set_iam_access_token('&lt;access_token&gt;')Username and password~~~~~~~~~~~~~~~~~~~~~.. code:: python    from watson_developer_cloud import DiscoveryV1    # In the constructor    discovery = DiscoveryV1(version='2018-08-01', url='&lt;url_as_per_region&gt;', username='&lt;username&gt;', password='&lt;password&gt;').. code:: python    # After instantiation    discovery = DiscoveryV1(version='2018-08-01', url='&lt;url_as_per_region&gt;')    discovery.set_username_and_password('&lt;username&gt;', '&lt;password&gt;')Python version--------------Tested on Python 2.7, 3.4, 3.5, and 3.6.Changes for v1.0----------------Version 1.0 focuses on the move to programmatically-generated code formany of the services. See the`changelog &lt;https://github.com/watson-developer-cloud/python-sdk/wiki/Changelog&gt;`__for the details.Changes for v2.0----------------``DetailedResponse`` which contains the result, headers and HTTP statuscode is now the default response for all methods... code:: python    from watson_developer_cloud import AssistantV1    assistant = AssistantV1(        username='xxx',        password='yyy',        url='&lt;url_as_per_region&gt;',        version='2018-07-10')    response = assistant.list_workspaces(headers={'Custom-Header': 'custom_value'})    print(response.get_result())    print(response.get_headers())    print(response.get_status_code())See the`changelog &lt;https://github.com/watson-developer-cloud/python-sdk/wiki/Changelog&gt;`__for the details.Migration---------This version includes many breaking changes as a result of standardizingbehavior across the new generated services. Full details on migrationfrom previous versions can be found`here &lt;https://github.com/watson-developer-cloud/python-sdk/wiki/Migration&gt;`__.Configuring the http client (Supported from v1.1.0)---------------------------------------------------To set client configs like timeout use the ``with_http_config()``function and pass it a dictionary of configs... code:: python    from watson_developer_cloud import AssistantV1    assistant = AssistantV1(        username='xxx',        password='yyy',        url='&lt;url_as_per_region&gt;',        version='2018-07-10')    assistant.set_http_config({'timeout': 100})    response = assistant.message(workspace_id=workspace_id, input={        'text': 'What\'s the weather like?'}).get_result()    print(json.dumps(response, indent=2))Disable SSL certificate verification------------------------------------For ICP(IBM Cloud Private), you can disable the SSL certificateverification by:.. code:: python    service.disable_SSL_verification()Sending request headers-----------------------Custom headers can be passed in any request in the form of a ``dict``as:.. code:: python    headers = {        'Custom-Header': 'custom_value'    }For example, to send a header called ``Custom-Header`` to a call inWatson Assistant, pass the headers parameter as:.. code:: python    from watson_developer_cloud import AssistantV1    assistant = AssistantV1(        username='xxx',        password='yyy',        url='&lt;url_as_per_region&gt;',        version='2018-07-10')    response = assistant.list_workspaces(headers={'Custom-Header': 'custom_value'}).get_result()Parsing HTTP response info--------------------------If you would like access to some HTTP response information along withthe response model, you can set the ``set_detailed_response()`` to``True``. Since Python SDK ``v2.0``, it is set to ``True``.. code:: python    from watson_developer_cloud import AssistantV1    assistant = AssistantV1(        username='xxx',        password='yyy',        url='&lt;url_as_per_region&gt;',        version='2018-07-10')    assistant.set_detailed_response(True)    response = assistant.list_workspaces(headers={'Custom-Header': 'custom_value'}).get_result()    print(response)This would give an output of ``DetailedResponse`` having the structure:.. code:: python    {        'result': &lt;response returned by service&gt;,        'headers': { &lt;http response headers&gt; },        'status_code': &lt;http status code&gt;    }You can use the ``get_result()``, ``get_headers()`` andget\_status\_code() to return the result, headers and status coderespectively.Using Websockets----------------The Text to Speech service supports synthesizing text to spoken audiousing web sockets with the ``synthesize_using_websocket``. The Speech toText service supports recognizing speech to text using web sockets withthe ``recognize_using_websocket``. These methods need a custom callbackclass to listen to events. Below is an example of``synthesize_using_websocket``. Note: The service accepts one requestper connection... code:: py    from watson_developer_cloud.websocket import SynthesizeCallback    class MySynthesizeCallback(SynthesizeCallback):        def __init__(self):            SynthesizeCallback.__init__(self)        def on_audio_stream(self, audio_stream):            return audio_stream        def on_data(self, data):            return data    my_callback = MySynthesizeCallback()    service.synthesize_using_websocket('I like to pet dogs',                                       my_callback,                                       accept='audio/wav',                                       voice='en-US_AllisonVoice'                                      )Dependencies-------------  `requests &lt;http://docs.python-requests.org/en/latest/&gt;`__-  ``python_dateutil`` &gt;= 2.5.3-  `responses &lt;https://github.com/getsentry/responses&gt;`__ for testing-  Following for web sockets support in speech to text-  ``websocket-client`` 0.48.0Contributing------------See`CONTRIBUTING.md &lt;https://github.com/watson-developer-cloud/python-sdk/blob/master/CONTRIBUTING.md&gt;`__.License-------This library is licensed under the `Apache 2.0license &lt;http://www.apache.org/licenses/LICENSE-2.0&gt;`__... |Build Status| image:: https://travis-ci.org/watson-developer-cloud/python-sdk.svg?branch=master   :target: https://travis-ci.org/watson-developer-cloud/python-sdk.. |Slack| image:: https://wdc-slack-inviter.mybluemix.net/badge.svg   :target: https://wdc-slack-inviter.mybluemix.net.. |Latest Stable Version| image:: https://img.shields.io/pypi/v/watson-developer-cloud.svg   :target: https://pypi.python.org/pypi/watson-developer-cloud.. |CLA assistant| image:: https://cla-assistant.io/readme/badge/watson-developer-cloud/python-sdk   :target: https://cla-assistant.io/watson-developer-cloud/python-sdk</longdescription>
</pkgmetadata>