<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MUI Data GridThis is an unofficial toolbox to make integrating a Python web application with Material UI's data grid simpler.## Documentation- [Material-UI Data Grid](https://mui.com/x/react-data-grid/)## Requirements- Python 3.8.1+## Features- Grid Sort Model support- Grid Filter Model support (partial: missing quick filter support)- Grid Pagination Model support (LIMIT / OFFSET based, cursor not currently supported)- Flask integration- SQLAlchemy integration## Installation### Pip```shpython -m pip install -U 'mui-data-grid'```or with extras:```shpython -m pip install -U 'mui-data-grid[flask]'python -m pip install -U 'mui-data-grid[sqlalchemy]'python -m pip install -U 'mui-data-grid[flask, sqlalchemy]'```### Poetry```shpoetry add mui-data-grid```## Usage### Integrations#### Flask```python#!/usr/bin/env python# examples/main.pyfrom flask import Flask, jsonifyfrom flask.wrappers import Responsefrom mui.v5.integrations.flask import get_grid_models_from_request# for v6 support, replace this import with:# from mui.v6.integrations.flask import get_grid_models_from_requestapp = Flask(__name__)FILTER_MODEL_KEY = &quot;filter_model&quot;SORT_MODEL_KEY = &quot;sort_model[]&quot;PAGINATION_MODEL_KEY = None  # stored inline in the query string, not encoded as an obj@app.route(&quot;/&quot;)def print_sorted_details() -&gt; Response:    # models will return default values if the keys don't exist,    # so you can choose what features you integrate, and when.    models = get_grid_models_from_request(        filter_model_key=FILTER_MODEL_KEY,        pagination_model_key=PAGINATION_MODEL_KEY,        sort_model_key=SORT_MODEL_KEY,    )    return jsonify(        {            # sort_model is a list[GridSortItem]            SORT_MODEL_KEY: [model.model_dump() for model in models.sort_model],            # filter_model is GridFilterModel            FILTER_MODEL_KEY: models.filter_model.model_dump(),            # pagination_model is a GridPaginationModel            # providing a consistent interface to pagination parameters            PAGINATION_MODEL_KEY: models.pagination_model,        }    )if __name__ == &quot;__main__&quot;:    app.run()```#### SQLAlchemy```python    # please see examples/main.py for the full code    models = get_grid_models_from_request(        filter_model_key=FILTER_MODEL_KEY,        pagination_model_key=PAGINATION_MODEL_KEY,        sort_model_key=SORT_MODEL_KEY,    )    session = Session()    try:        base_query = session.query(ExampleModel)        dg_query = apply_request_grid_models_to_query(            query=base_query,            request_model=models,            column_resolver=example_model_resolver,        )        # we calculate total separately so that we can re-use the result        # rather than have .pages() fire off an additional db query.        total = dg_query.total()        def item_factory(item: ExampleModel) -&gt; Dict[str, int]:            return item.model_dump()        return jsonify(            {                &quot;items&quot;: dg_query.items(factory=item_factory),                &quot;page&quot;: dg_query.page,                &quot;pageSize&quot;: dg_query.page_size,                &quot;pages&quot;: dg_query.pages(total=total),                &quot;total&quot;: total,            }        )    finally:        session.close()```</longdescription>
</pkgmetadata>