<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PythonSupport][1]][1l] [![License][2]][2l] [![PyPI version][3]][3l]# python-powerdns -- PowerDNS web api python client and interface**Contact:** Denis 'jawa' Pompilio &lt;denis.pompilio@gmail.com&gt;**Sources:** &lt;https://github.com/outini/python-powerdns&gt;## AboutThis package provides intuitive and easy to use python client and interfacefor the PowerDNS web API.## Installation```bashpython setup.py install```or```bashpip install python-powerdns```## Helpers### pdns-zone-creator```bashusage: pdns-create-zone [-h] -A API -K APIKEY -z ZONE -o ORIGIN -c ZONE -d DNS                        [-t TIMERS]PowerDNS zone creatoroptional arguments:  -h, --help            show this help message and exit  -A API, --api API     PowerDNS api (eg. https://api.domain.tld/api/v1  -K APIKEY, --key APIKEY                        PowerDNS api key  -z ZONE, --zone ZONE  Zone name (canonical)  -o ORIGIN, --origin ORIGIN                        Zone origin (for SOA)  -c ZONE, --contact ZONE                        Zone contact (for SOA)  -d DNS, --dns DNS     Zone nameservers comma separated  -t TIMERS, --timers TIMERS                        Zone timers (eg. '28800 7200 604800 86400')``````bash./bin/pdns-create-zone -A &quot;https://api.domain.tld/api/v1&quot; -K &quot;xxxxxxxxx&quot; \                       -z &quot;myzone.domain.tld.&quot; \                       -o &quot;ns01.domain.tld.&quot; -c &quot;admin.domain.tld.&quot; \                       -d &quot;nsd01.domain.tld.,nsd02.domain.tld.&quot;powerdns.interface INFO: listing available PowerDNS serverspowerdns.interface INFO: getting available servers from APIpowerdns.client INFO: request: GET https://api.domain.tld/api/v1/serverspowerdns.client INFO: request response code: 200powerdns.interface INFO: 1 server(s) listedpowerdns.interface INFO: creation of zone: myzone.domain.tld.powerdns.client INFO: request: POST https://api.domain.tld/api/v1/servers/localhost/zonespowerdns.client INFO: request response code: 201powerdns.interface INFO: zone myzone.domain.tld. successfully created```## Examples### Basic initialization```pythonimport powerdnsPDNS_API = &quot;https://my.pdns.api.domain.tld/api/v1&quot;PDNS_KEY = &quot;mysupersecretbase64key&quot;api_client = powerdns.PDNSApiClient(api_endpoint=PDNS_API, api_key=PDNS_KEY)api = powerdns.PDNSEndpoint(api_client)```### Creation and deletion of zones```pythonfrom datetime import date# Creating new zone on first PowerDNS serverserial = date.today().strftime(&quot;%Y%m%d00&quot;)soa = &quot;ns0.domain.tld. admin.domain.tld. %s 28800 7200 604800 86400&quot; % serialsoa_r = powerdns.RRSet(name='test.python-powerdns.domain.tld.',                       rtype=&quot;SOA&quot;,                       records=[(soa, False)],                       ttl=86400)zone = api.servers[0].create_zone(name=&quot;test.python-powerdns.domain.tld.&quot;,                                  kind=&quot;Native&quot;,                                  rrsets=[soa_r],                                  nameservers=[&quot;ns1.domain.tld.&quot;,                                               &quot;ns2.domain.tld.&quot;])# Getting new zone infoprint(zone)print(zone.details)# Deleting newly created zoneapi.servers[0].delete_zone(zone.name)```### Creation and deletion of DNS records```pythonzone = api.servers[0].get_zone(&quot;test.python-powerdns.domain.tld.&quot;)comments = [powerdns.Comment(&quot;test comment&quot;, &quot;admin&quot;)]zone.create_records([    powerdns.RRSet('a', 'A', [('1.1.1.1', False)], comments=comments),    powerdns.RRSet('b', 'A', ['1.1.1.2', '1.1.1.3']),    powerdns.RRSet('c', 'A', [('1.1.1.4', False)]),    powerdns.RRSet('d', 'CNAME', ['a'])])zone.delete_records([    powerdns.RRSet('a', 'A', [('1.1.1.1', False)]),    powerdns.RRSet('d', 'CNAME', ['a'])])```Where (for the first RRSet):* `a` is the NAME of the record* `A` is the TYPE of the record* `[('1.1.1.1', False)]` is a list of RDATA entries (tuples or just strings), where:  * `'1.1.1.1'` is the RDATA  * `False` tells that this RDATA entry is NOT disabled### Backup and restoration of zones```python# Backup every zone of every PowerDNS serverfor server in api.servers:    backup_dir = &quot;backups/%s&quot; % server.id    for zone in server.zones:        zone.backup(backup_dir)# Restore a single zone on first PowerDNS serverzone_file = &quot;backups/pdns-server-01/my.domain.tld.json&quot;api.servers[0].restore_zone(zone_file)```## Tests### PowerDNS serviceA simple [Dockerfile] is provided to spawn a basic powerdns service for testspurposes. The container is built using:```bashdocker build --tag pdns .```And started using:```bashdocker run --rm -it pdns```### Python Unit-TestsPython unit-tests are available in the [tests] directory. Based on [unittests],those are run using `coverage run -m unittest discover` or integrated in yourIDE for development purposes. Those tests require a PDNS service to connect to(see _PowerDNS service_ section above).Those tests are very limited at the moment and will be improved in the future.## LicenseMIT LICENSE *(see LICENSE file)*## Miscellaneous```    ╚⊙ ⊙╝  ╚═(███)═╝ ╚═(███)═╝╚═(███)═╝ ╚═(███)═╝  ╚═(███)═╝   ╚═(███)═╝```[1]: https://img.shields.io/badge/python-2.7,3.4+-blue.svg[1l]: https://github.com/outini/python-powerdns[2]: https://img.shields.io/badge/license-MIT-blue.svg[2l]: https://github.com/outini/python-powerdns[3]: https://badge.fury.io/py/python-powerdns.svg[3l]: https://pypi.org/project/python-powerdns[Dockerfile]: files/Dockerfile[tests]: tests[unittests]: https://docs.python.org/3/library/unittest.html</longdescription>
</pkgmetadata>