<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======PyERFA======|PyPI Status| |Zenodo| |CI Status| |Documentation Status|PyERFA is the Python_ wrapper for the ERFA_ library (Essential Routines forFundamental Astronomy), a C library containing key algorithms for astronomy,which is based on the SOFA library published by the International AstronomicalUnion (IAU).  All C routines are wrapped as Numpy_ `universal functions&lt;https://numpy.org/devdocs/reference/ufuncs.html&gt;`_, so that they can becalled with scalar or array inputs.The project is a split of ``astropy._erfa`` module, developed in thecontext of Astropy_ project, into a standalone package.  It containsthe ERFA_ C source code as a git submodule.  The wrapping is donewith help of the Jinja2_ template engine.If you use this package in your research, please cita it via DOI`10.5281/zenodo.3940699 &lt;https://doi.org/10.5281/zenodo.3940699&gt;`_... InstallationInstallation instructions-------------------------The package can be installed from the package directory using a simple::  $ pip install .and similarly a wheel_ can be created with::  $ pip wheel ... note:: If you already have the C library ``liberfa`` on your  system, you can use that by setting environment variable  ``PYERFA_USE_SYSTEM_LIBERFA=1``... _wheel: https://github.com/pypa/wheelThe package can be obtained from PyPI_ or directly from the git repository::  $ git clone --recursive https://github.com/liberfa/pyerfa/Testing-------For testing, one can install the packages together with its testingdependencies and then test it with::  $ pip install .[test]  $ pytestAlternatively, one can use ``tox``, which will set up a separate testingenvironment for you, with::  $ tox -e testUsage-----The package can be imported as ``erfa`` which has all ERFA_ ufuncs wrapped withpython code that tallies errors and warnings.  Also exposed are the constantsdefined by ERFA_ in `erfam.h&lt;https://github.com/liberfa/erfa/blob/master/src/erfam.h&gt;`_, as wellas `numpy.dtype` corresponding to structures used by ERFA_.  Examples::  &gt;&gt;&gt; import erfa  &gt;&gt;&gt; erfa.jd2cal(2460000., [0, 1, 2, 3])  (array([2023, 2023, 2023, 2023], dtype=int32),   array([2, 2, 2, 2], dtype=int32),   array([24, 25, 26, 27], dtype=int32),   array([0.5, 0.5, 0.5, 0.5]))  &gt;&gt;&gt; erfa.plan94(2460000., [0, 1, 2, 3], 1)  array([([ 0.09083713, -0.39041392, -0.21797389], [0.02192341, 0.00705449, 0.00149618]),         ([ 0.11260694, -0.38275202, -0.21613731], [0.02160375, 0.00826891, 0.00217806]),         ([ 0.13401992, -0.37387798, -0.21361622], [0.0212094 , 0.00947838, 0.00286503]),         ([ 0.15500031, -0.36379788, -0.21040601], [0.02073822, 0.01068061, 0.0035561 ])],        dtype={'names': ['p', 'v'], 'formats': [('&lt;f8', (3,)), ('&lt;f8', (3,))], 'offsets': [0, 24], 'itemsize': 48, 'aligned': True})  &gt;&gt;&gt; erfa.dt_pv  dtype([('p', '&lt;f8', (3,)), ('v', '&lt;f8', (3,))], align=True)  &gt;&gt;&gt; erfa.dt_eraLDBODY  dtype([('bm', '&lt;f8'), ('dl', '&lt;f8'), ('pv', [('p', '&lt;f8', (3,)), ('v', '&lt;f8', (3,))])], align=True)  &gt;&gt;&gt; erfa.DAYSEC  86400.0It is also possible to use the ufuncs directly, though then one has todeal with the warning and error states explicitly.  For instance, compare::  &gt;&gt;&gt; erfa.jd2cal(-600000., [0, 1, 2, 3])  Traceback (most recent call last):  ...  ErfaError: ERFA function &quot;jd2cal&quot; yielded 4 of &quot;unacceptable date (Note 1)&quot;  &gt;&gt;&gt; erfa.ufunc.jd2cal(-600000., [0, 1, 2, 3])  (array([-1, -1, -1, -1], dtype=int32),   ...,   array([-1, -1, -1, -1], dtype=int32))License-------PyERFA is licensed under a 3-clause BSD style license - see the`LICENSE.rst &lt;LICENSE.rst&gt;`_ file... References.. _Python: https://www.python.org/.. _ERFA: https://github.com/liberfa/erfa.. _Numpy: https://numpy.org/.. _Astropy: https://www.astropy.org.. _PyPI: https://pypi.org/project/pyerfa/.. _Jinja2: https://palletsprojects.com/p/jinja/.. |PyPI Status| image:: https://img.shields.io/pypi/v/pyerfa.svg    :target: https://pypi.python.org/pypi/pyerfa    :alt: PyPI Status.. |Zenodo| image:: https://zenodo.org/badge/261332899.svg   :target: https://zenodo.org/badge/latestdoi/261332899   :alt: DOI 10.5281/zenodo.3940699.. |CI Status| image:: https://github.com/liberfa/pyerfa/workflows/CI/badge.svg    :target: https://github.com/liberfa/pyerfa/actions    :alt: GitHub Actions CI Status.. |Documentation Status| image:: https://img.shields.io/readthedocs/pyerfa/latest.svg?logo=read%20the%20docs&amp;logoColor=white&amp;label=Docs&amp;version=stable    :target: https://pyerfa.readthedocs.io/en/stable/?badge=stable    :alt: Documentation Status</longdescription>
</pkgmetadata>