<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============yahoofinancials===============A python module that returns stock, cryptocurrency, forex, mutual fund, commodity futures, ETF, and US Treasury financial data from Yahoo Finance... image:: https://github.com/JECSand/yahoofinancials/actions/workflows/test.yml/badge.svg?branch=master    :target: https://github.com/JECSand/yahoofinancials/actions/workflows/test.yml.. image:: https://static.pepy.tech/badge/yahoofinancials    :target: https://pepy.tech/project/yahoofinancials.. image:: https://static.pepy.tech/badge/yahoofinancials/month    :target: https://pepy.tech/project/yahoofinancials.. image:: https://static.pepy.tech/badge/yahoofinancials/week    :target: https://pepy.tech/project/yahoofinancialsCurrent Version: v1.15Version Released: 06/21/2023Report any bugs by opening an issue here: https://github.com/JECSand/yahoofinancials/issuesOverview--------A powerful financial data module used for pulling both fundamental and technical data from Yahoo Finance.- As of Version 1.9, YahooFinancials supports optional parameters for asynchronous execution, proxies, and international requests... code-block:: python    from yahoofinancials import YahooFinancials    tickers = ['AAPL', 'GOOG', 'C']    yahoo_financials = YahooFinancials(tickers, concurrent=True, max_workers=8, country=&quot;US&quot;)    balance_sheet_data_qt = yahoo_financials.get_financial_stmts('quarterly', 'balance')    print(balance_sheet_data_qt)    proxy_addresses = [ &quot;mysuperproxy.com:5000&quot;, &quot;mysuperproxy.com:5001&quot;]    yahoo_financials = YahooFinancials(tickers, concurrent=True, proxies=proxy_addresses)    balance_sheet_data_qt = yahoo_financials.get_financial_stmts('quarterly', 'balance')    print(balance_sheet_data_qt)- New methods in Version 1.13:    - get_esg_score_data()Installation-------------- yahoofinancials runs on Python 3.7, 3.8, 3.9, 3.10, and 3.11.- This package depends on pytz &amp; requests to work.1. Installation using pip:- Linux/Mac:.. code-block:: bash    $ pip install yahoofinancials- Windows (If python doesn't work for you in cmd, try running the following command with just py):.. code-block::    &gt; python -m pip install yahoofinancials2. Installation using github (Mac/Linux):.. code-block:: bash    $ git clone https://github.com/JECSand/yahoofinancials.git    $ cd yahoofinancials    $ python setup.py install3. Demo using the included demo script:.. code-block:: bash    $ cd yahoofinancials    $ python demo.py -h    $ python demo.py    $ python demo.py WFC C BAC4. Test using the included unit testing script:.. code-block:: bash    $ cd yahoofinancials    $ python test/test_yahoofinancials.pyModule Methods--------------- The financial data from all methods is returned as JSON.- You can run multiple symbols at once using an inputted array or run an individual symbol using an inputted string.- YahooFinancials works with Python 3.6, 3.7, 3.8, 3.9, 3.10, and 3.11 and runs on all operating systems. (Windows, Mac, Linux).Featured Methods^^^^^^^^^^^^^^^^1. get_financial_stmts(frequency, statement_type, reformat=True)   - frequency can be either 'annual' or 'quarterly'.   - statement_type can be 'income', 'balance', 'cash' or a list of several.   - reformat optional value defaulted to true. Enter False for unprocessed raw data from Yahoo Finance.2. get_stock_price_data(reformat=True)3. get_stock_earnings_data()   - reformat optional value defaulted to true. Enter False for unprocessed raw data from Yahoo Finance.4. get_summary_data(reformat=True)   - Returns financial summary data for cryptocurrencies, stocks, currencies, ETFs, mutual funds, U.S. Treasuries, commodity futures, and indexes.   - reformat optional value defaulted to true. Enter False for unprocessed raw data from Yahoo Finance.5. get_stock_quote_type_data()6. get_historical_price_data(start_date, end_date, time_interval)   - This method will pull historical pricing data for stocks, currencies, ETFs, mutual funds, U.S. Treasuries, cryptocurrencies, commodities, and indexes.   - start_date should be entered in the 'YYYY-MM-DD' format and is the first day that data will be pulled for.   - end_date should be entered in the 'YYYY-MM-DD' format and is the last day that data will be pulled for.   - time_interval can be either 'daily', 'weekly', or 'monthly'. This variable determines the time period interval for your pull.   - Data response includes relevant pricing event data such as dividends and stock splits.7. get_num_shares_outstanding(price_type='current')   - price_type can also be set to 'average' to calculate the shares outstanding with the daily average price.Additional Module Methods^^^^^^^^^^^^^^^^^^^^^^^^^- get_daily_dividend_data(start_date, end_date)- get_stock_profile_data()- get_financial_data()- get_interest_expense()- get_operating_income()- get_total_operating_expense()- get_total_revenue()- get_cost_of_revenue()- get_income_before_tax()- get_income_tax_expense()- get_gross_profit()- get_net_income_from_continuing_ops()- get_research_and_development()- get_current_price()- get_current_change()- get_current_percent_change()- get_current_volume()- get_prev_close_price()- get_open_price()- get_ten_day_avg_daily_volume()- get_stock_exchange()- get_market_cap()- get_daily_low()- get_daily_high()- get_currency()- get_yearly_high()- get_yearly_low()- get_dividend_yield()- get_annual_avg_div_yield()- get_five_yr_avg_div_yield()- get_dividend_rate()- get_annual_avg_div_rate()- get_50day_moving_avg()- get_200day_moving_avg()- get_beta()- get_payout_ratio()- get_pe_ratio()- get_price_to_sales()- get_exdividend_date()- get_book_value()- get_ebit()- get_net_income()- get_earnings_per_share()- get_key_statistics_data()- get_stock_profile_data()- get_financial_data()Usage Examples--------------- The class constructor can take either a single ticker or a list of tickers as it's parameter.- This makes it easy to initiate multiple classes for different groupings of financial assets.- Quarterly statement data returns the last 4 periods of data, while annual returns the last 3.Single Ticker Example^^^^^^^^^^^^^^^^^^^^^.. code-block:: python    from yahoofinancials import YahooFinancials    ticker = 'AAPL'    yahoo_financials = YahooFinancials(ticker)    balance_sheet_data_qt = yahoo_financials.get_financial_stmts('quarterly', 'balance')    income_statement_data_qt = yahoo_financials.get_financial_stmts('quarterly', 'income')    all_statement_data_qt =  yahoo_financials.get_financial_stmts('quarterly', ['income', 'cash', 'balance'])    apple_earnings_data = yahoo_financials.get_stock_earnings_data()    apple_net_income = yahoo_financials.get_net_income()    historical_stock_prices = yahoo_financials.get_historical_price_data('2008-09-15', '2018-09-15', 'weekly')Lists of Tickers Example^^^^^^^^^^^^^^^^^^^^^^^^.. code-block:: python    from yahoofinancials import YahooFinancials    tech_stocks = ['AAPL', 'MSFT', 'INTC']    bank_stocks = ['WFC', 'BAC', 'C']    commodity_futures = ['GC=F', 'SI=F', 'CL=F']    cryptocurrencies = ['BTC-USD', 'ETH-USD', 'XRP-USD']    currencies = ['EURUSD=X', 'JPY=X', 'GBPUSD=X']    mutual_funds = ['PRLAX', 'QASGX', 'HISFX']    us_treasuries = ['^TNX', '^IRX', '^TYX']    yahoo_financials_tech = YahooFinancials(tech_stocks)    yahoo_financials_banks = YahooFinancials(bank_stocks)    yahoo_financials_commodities = YahooFinancials(commodity_futures)    yahoo_financials_cryptocurrencies = YahooFinancials(cryptocurrencies)    yahoo_financials_currencies = YahooFinancials(currencies)    yahoo_financials_mutualfunds = YahooFinancials(mutual_funds)    yahoo_financials_treasuries = YahooFinancials(us_treasuries)    tech_cash_flow_data_an = yahoo_financials_tech.get_financial_stmts('annual', 'cash')    bank_cash_flow_data_an = yahoo_financials_banks.get_financial_stmts('annual', 'cash')    banks_net_ebit = yahoo_financials_banks.get_ebit()    tech_stock_price_data = yahoo_financials_tech.get_stock_price_data()    daily_bank_stock_prices = yahoo_financials_banks.get_historical_price_data('2008-09-15', '2018-09-15', 'daily')    daily_commodity_prices = yahoo_financials_commodities.get_historical_price_data('2008-09-15', '2018-09-15', 'daily')    daily_crypto_prices = yahoo_financials_cryptocurrencies.get_historical_price_data('2008-09-15', '2018-09-15', 'daily')    daily_currency_prices = yahoo_financials_currencies.get_historical_price_data('2008-09-15', '2018-09-15', 'daily')    daily_mutualfund_prices = yahoo_financials_mutualfunds.get_historical_price_data('2008-09-15', '2018-09-15', 'daily')    daily_treasury_prices = yahoo_financials_treasuries.get_historical_price_data('2008-09-15', '2018-09-15', 'daily')Examples of Returned JSON Data------------------------------1. Annual Income Statement Data for Apple:.. code-block:: python    yahoo_financials = YahooFinancials('AAPL')    print(yahoo_financials.get_financial_stmts('annual', 'income')).. code-block:: javascript    {        &quot;incomeStatementHistory&quot;: {            &quot;AAPL&quot;: [                {                    &quot;2016-09-24&quot;: {                        &quot;minorityInterest&quot;: null,                        &quot;otherOperatingExpenses&quot;: null,                        &quot;netIncomeFromContinuingOps&quot;: 45687000000,                        &quot;totalRevenue&quot;: 215639000000,                        &quot;totalOtherIncomeExpenseNet&quot;: 1348000000,                        &quot;discontinuedOperations&quot;: null,                        &quot;incomeTaxExpense&quot;: 15685000000,                        &quot;extraordinaryItems&quot;: null,                        &quot;grossProfit&quot;: 84263000000,                        &quot;netIncome&quot;: 45687000000,                        &quot;sellingGeneralAdministrative&quot;: 14194000000,                        &quot;interestExpense&quot;: null,                        &quot;costOfRevenue&quot;: 131376000000,                        &quot;researchDevelopment&quot;: 10045000000,                        &quot;netIncomeApplicableToCommonShares&quot;: 45687000000,                        &quot;effectOfAccountingCharges&quot;: null,                        &quot;incomeBeforeTax&quot;: 61372000000,                        &quot;otherItems&quot;: null,                        &quot;operatingIncome&quot;: 60024000000,                        &quot;ebit&quot;: 61372000000,                        &quot;nonRecurring&quot;: null,                        &quot;totalOperatingExpenses&quot;: 0                    }                }            ]        }    }2. Annual Balance Sheet Data for Apple:.. code-block:: python    yahoo_financials = YahooFinancials('AAPL')    print(yahoo_financials.get_financial_stmts('annual', 'balance')).. code-block:: javascript    {        &quot;balanceSheetHistory&quot;: {            &quot;AAPL&quot;: [                {                    &quot;2016-09-24&quot;: {                        &quot;otherCurrentLiab&quot;: 8080000000,                        &quot;otherCurrentAssets&quot;: 8283000000,                        &quot;goodWill&quot;: 5414000000,                        &quot;shortTermInvestments&quot;: 46671000000,                        &quot;longTermInvestments&quot;: 170430000000,                        &quot;cash&quot;: 20484000000,                        &quot;netTangibleAssets&quot;: 119629000000,                        &quot;totalAssets&quot;: 321686000000,                        &quot;otherLiab&quot;: 36074000000,                        &quot;totalStockholderEquity&quot;: 128249000000,                        &quot;inventory&quot;: 2132000000,                        &quot;retainedEarnings&quot;: 96364000000,                        &quot;intangibleAssets&quot;: 3206000000,                        &quot;totalCurrentAssets&quot;: 106869000000,                        &quot;otherStockholderEquity&quot;: 634000000,                        &quot;shortLongTermDebt&quot;: 11605000000,                        &quot;propertyPlantEquipment&quot;: 27010000000,                        &quot;deferredLongTermLiab&quot;: 2930000000,                        &quot;netReceivables&quot;: 29299000000,                        &quot;otherAssets&quot;: 8757000000,                        &quot;longTermDebt&quot;: 75427000000,                        &quot;totalLiab&quot;: 193437000000,                        &quot;commonStock&quot;: 31251000000,                        &quot;accountsPayable&quot;: 59321000000,                        &quot;totalCurrentLiabilities&quot;: 79006000000                    }                }            ]        }    }3. Quarterly Cash Flow Statement Data for Citigroup:.. code-block:: python    yahoo_financials = YahooFinancials('C')    print(yahoo_financials.get_financial_stmts('quarterly', 'cash')).. code-block:: javascript    {        &quot;cashflowStatementHistoryQuarterly&quot;: {            &quot;C&quot;: [                {                    &quot;2017-06-30&quot;: {                        &quot;totalCashFromOperatingActivities&quot;: -18505000000,                        &quot;effectOfExchangeRate&quot;: -117000000,                        &quot;totalCashFromFinancingActivities&quot;: 39798000000,                        &quot;netIncome&quot;: 3872000000,                        &quot;dividendsPaid&quot;: -760000000,                        &quot;salePurchaseOfStock&quot;: -1781000000,                        &quot;capitalExpenditures&quot;: -861000000,                        &quot;changeToLiabilities&quot;: -7626000000,                        &quot;otherCashflowsFromInvestingActivities&quot;: 82000000,                        &quot;totalCashflowsFromInvestingActivities&quot;: -22508000000,                        &quot;netBorrowings&quot;: 33586000000,                        &quot;depreciation&quot;: 901000000,                        &quot;changeInCash&quot;: -1332000000,                        &quot;changeToNetincome&quot;: 1444000000,                        &quot;otherCashflowsFromFinancingActivities&quot;: 8753000000,                        &quot;changeToOperatingActivities&quot;: -17096000000,                        &quot;investments&quot;: -23224000000                    }                }            ]        }    }4. Monthly Historical Stock Price Data for Wells Fargo:.. code-block:: python    yahoo_financials = YahooFinancials('WFC')    print(yahoo_financials.get_historical_price_data(&quot;2018-07-10&quot;, &quot;2018-08-10&quot;, &quot;monthly&quot;)).. code-block:: javascript    {        &quot;WFC&quot;: {            &quot;currency&quot;: &quot;USD&quot;,            &quot;eventsData&quot;: {                &quot;dividends&quot;: {                    &quot;2018-08-01&quot;: {                        &quot;amount&quot;: 0.43,                        &quot;date&quot;: 1533821400,                        &quot;formatted_date&quot;: &quot;2018-08-09&quot;                    }                }            },            &quot;firstTradeDate&quot;: {                &quot;date&quot;: 76233600,                &quot;formatted_date&quot;: &quot;1972-06-01&quot;            },            &quot;instrumentType&quot;: &quot;EQUITY&quot;,            &quot;prices&quot;: [                {                    &quot;adjclose&quot;: 57.19147872924805,                    &quot;close&quot;: 57.61000061035156,                    &quot;date&quot;: 1533096000,                    &quot;formatted_date&quot;: &quot;2018-08-01&quot;,                    &quot;high&quot;: 59.5,                    &quot;low&quot;: 57.08000183105469,                    &quot;open&quot;: 57.959999084472656,                    &quot;volume&quot;: 138922900                }            ],            &quot;timeZone&quot;: {                &quot;gmtOffset&quot;: -14400            }        }    }5. Monthly Historical Price Data for EURUSD:.. code-block:: python    yahoo_financials = YahooFinancials('EURUSD=X')    print(yahoo_financials.get_historical_price_data(&quot;2018-07-10&quot;, &quot;2018-08-10&quot;, &quot;monthly&quot;)).. code-block:: javascript    {        &quot;EURUSD=X&quot;: {            &quot;currency&quot;: &quot;USD&quot;,            &quot;eventsData&quot;: {},            &quot;firstTradeDate&quot;: {                &quot;date&quot;: 1070236800,                &quot;formatted_date&quot;: &quot;2003-12-01&quot;            },            &quot;instrumentType&quot;: &quot;CURRENCY&quot;,            &quot;prices&quot;: [                {                    &quot;adjclose&quot;: 1.1394712924957275,                    &quot;close&quot;: 1.1394712924957275,                    &quot;date&quot;: 1533078000,                    &quot;formatted_date&quot;: &quot;2018-07-31&quot;,                    &quot;high&quot;: 1.169864296913147,                    &quot;low&quot;: 1.1365960836410522,                    &quot;open&quot;: 1.168961763381958,                    &quot;volume&quot;: 0                }            ],            &quot;timeZone&quot;: {                &quot;gmtOffset&quot;: 3600            }        }    }6. Monthly Historical Price Data for BTC-USD:.. code-block:: python    yahoo_financials = YahooFinancials('BTC-USD')    print(yahoo_financials.get_historical_price_data(&quot;2018-07-10&quot;, &quot;2018-08-10&quot;, &quot;monthly&quot;)).. code-block:: javascript    {        &quot;BTC-USD&quot;: {            &quot;currency&quot;: &quot;USD&quot;,            &quot;eventsData&quot;: {},            &quot;firstTradeDate&quot;: {                &quot;date&quot;: 1279321200,                &quot;formatted_date&quot;: &quot;2010-07-16&quot;            },            &quot;instrumentType&quot;: &quot;CRYPTOCURRENCY&quot;,            &quot;prices&quot;: [                {                    &quot;adjclose&quot;: 6285.02001953125,                    &quot;close&quot;: 6285.02001953125,                    &quot;date&quot;: 1533078000,                    &quot;formatted_date&quot;: &quot;2018-07-31&quot;,                    &quot;high&quot;: 7760.740234375,                    &quot;low&quot;: 6133.02978515625,                    &quot;open&quot;: 7736.25,                    &quot;volume&quot;: 4334347882                }            ],            &quot;timeZone&quot;: {                &quot;gmtOffset&quot;: 3600            }        }    }7. Weekly Historical Price Data for Crude Oil Futures:.. code-block:: python    yahoo_financials = YahooFinancials('CL=F')    print(yahoo_financials.get_historical_price_data(&quot;2018-08-01&quot;, &quot;2018-08-10&quot;, &quot;weekly&quot;)).. code-block:: javascript    {        &quot;CL=F&quot;: {            &quot;currency&quot;: &quot;USD&quot;,            &quot;eventsData&quot;: {},            &quot;firstTradeDate&quot;: {                &quot;date&quot;: 1522555200,                &quot;formatted_date&quot;: &quot;2018-04-01&quot;            },            &quot;instrumentType&quot;: &quot;FUTURE&quot;,            &quot;prices&quot;: [                {                    &quot;adjclose&quot;: 68.58999633789062,                    &quot;close&quot;: 68.58999633789062,                    &quot;date&quot;: 1532923200,                    &quot;formatted_date&quot;: &quot;2018-07-30&quot;,                    &quot;high&quot;: 69.3499984741211,                    &quot;low&quot;: 66.91999816894531,                    &quot;open&quot;: 68.37000274658203,                    &quot;volume&quot;: 683048039                },                {                    &quot;adjclose&quot;: 67.75,                    &quot;close&quot;: 67.75,                    &quot;date&quot;: 1533528000,                    &quot;formatted_date&quot;: &quot;2018-08-06&quot;,                    &quot;high&quot;: 69.91999816894531,                    &quot;low&quot;: 66.13999938964844,                    &quot;open&quot;: 68.76000213623047,                    &quot;volume&quot;: 1102357981                }            ],            &quot;timeZone&quot;: {                &quot;gmtOffset&quot;: -14400            }        }    }8. Apple Stock Quote Data:.. code-block:: python    yahoo_financials = YahooFinancials('AAPL')    print(yahoo_financials.get_stock_quote_type_data()).. code-block:: javascript    {        &quot;AAPL&quot;: {            &quot;underlyingExchangeSymbol&quot;: null,            &quot;exchangeTimezoneName&quot;: &quot;America/New_York&quot;,            &quot;underlyingSymbol&quot;: null,            &quot;headSymbol&quot;: null,            &quot;shortName&quot;: &quot;Apple Inc.&quot;,            &quot;symbol&quot;: &quot;AAPL&quot;,            &quot;uuid&quot;: &quot;8b10e4ae-9eeb-3684-921a-9ab27e4d87aa&quot;,            &quot;gmtOffSetMilliseconds&quot;: &quot;-14400000&quot;,            &quot;exchange&quot;: &quot;NMS&quot;,            &quot;exchangeTimezoneShortName&quot;: &quot;EDT&quot;,            &quot;messageBoardId&quot;: &quot;finmb_24937&quot;,            &quot;longName&quot;: &quot;Apple Inc.&quot;,            &quot;market&quot;: &quot;us_market&quot;,            &quot;quoteType&quot;: &quot;EQUITY&quot;        }    }9. U.S. Treasury Current Pricing Data:.. code-block:: python    yahoo_financials = YahooFinancials(['^TNX', '^IRX', '^TYX'])    print(yahoo_financials.get_current_price()).. code-block:: javascript    {        &quot;^IRX&quot;: 2.033,        &quot;^TNX&quot;: 2.895,        &quot;^TYX&quot;: 3.062    }10. BTC-USD Summary Data:.. code-block:: python    yahoo_financials = YahooFinancials('BTC-USD')    print(yahoo_financials.get_summary_data()).. code-block:: javascript    {        &quot;BTC-USD&quot;: {            &quot;algorithm&quot;: &quot;SHA256&quot;,            &quot;ask&quot;: null,            &quot;askSize&quot;: null,            &quot;averageDailyVolume10Day&quot;: 545573809,            &quot;averageVolume&quot;: 496761640,            &quot;averageVolume10days&quot;: 545573809,            &quot;beta&quot;: null,            &quot;bid&quot;: null,            &quot;bidSize&quot;: null,            &quot;circulatingSupply&quot;: 17209812,            &quot;currency&quot;: &quot;USD&quot;,            &quot;dayHigh&quot;: 6266.5,            &quot;dayLow&quot;: 5891.87,            &quot;dividendRate&quot;: null,            &quot;dividendYield&quot;: null,            &quot;exDividendDate&quot;: &quot;-&quot;,            &quot;expireDate&quot;: &quot;-&quot;,            &quot;fiftyDayAverage&quot;: 6989.074,            &quot;fiftyTwoWeekHigh&quot;: 19870.62,            &quot;fiftyTwoWeekLow&quot;: 2979.88,            &quot;fiveYearAvgDividendYield&quot;: null,            &quot;forwardPE&quot;: null,            &quot;fromCurrency&quot;: &quot;BTC&quot;,            &quot;lastMarket&quot;: &quot;CCCAGG&quot;,            &quot;marketCap&quot;: 106325663744,            &quot;maxAge&quot;: 1,            &quot;maxSupply&quot;: 21000000,            &quot;navPrice&quot;: null,            &quot;open&quot;: 6263.2,            &quot;openInterest&quot;: null,            &quot;payoutRatio&quot;: null,            &quot;previousClose&quot;: 6263.2,            &quot;priceHint&quot;: 2,            &quot;priceToSalesTrailing12Months&quot;: null,            &quot;regularMarketDayHigh&quot;: 6266.5,            &quot;regularMarketDayLow&quot;: 5891.87,            &quot;regularMarketOpen&quot;: 6263.2,            &quot;regularMarketPreviousClose&quot;: 6263.2,            &quot;regularMarketVolume&quot;: 755834368,            &quot;startDate&quot;: &quot;2009-01-03&quot;,            &quot;strikePrice&quot;: null,            &quot;totalAssets&quot;: null,            &quot;tradeable&quot;: false,            &quot;trailingAnnualDividendRate&quot;: null,            &quot;trailingAnnualDividendYield&quot;: null,            &quot;twoHundredDayAverage&quot;: 8165.154,            &quot;volume&quot;: 755834368,            &quot;volume24Hr&quot;: 750196480,            &quot;volumeAllCurrencies&quot;: 2673437184,            &quot;yield&quot;: null,            &quot;ytdReturn&quot;: null        }    }11. Apple Key Statistics Data:.. code-block:: python    yahoo_financials = YahooFinancials('AAPL')    print(yahoo_financials.get_key_statistics_data()).. code-block:: javascript    {        &quot;AAPL&quot;: {            &quot;annualHoldingsTurnover&quot;: null,            &quot;enterpriseToRevenue&quot;: 2.973,            &quot;beta3Year&quot;: null,            &quot;profitMargins&quot;: 0.22413999,            &quot;enterpriseToEbitda&quot;: 9.652,            &quot;52WeekChange&quot;: -0.12707871,            &quot;morningStarRiskRating&quot;: null,            &quot;forwardEps&quot;: 13.49,            &quot;revenueQuarterlyGrowth&quot;: null,            &quot;sharesOutstanding&quot;: 4729800192,            &quot;fundInceptionDate&quot;: &quot;-&quot;,            &quot;annualReportExpenseRatio&quot;: null,            &quot;totalAssets&quot;: null,            &quot;bookValue&quot;: 22.534,            &quot;sharesShort&quot;: 44915125,            &quot;sharesPercentSharesOut&quot;: 0.0095,            &quot;fundFamily&quot;: null,            &quot;lastFiscalYearEnd&quot;: 1538179200,            &quot;heldPercentInstitutions&quot;: 0.61208,            &quot;netIncomeToCommon&quot;: 59531001856,            &quot;trailingEps&quot;: 11.91,            &quot;lastDividendValue&quot;: null,            &quot;SandP52WeekChange&quot;: -0.06475246,            &quot;priceToBook&quot;: 6.7582316,            &quot;heldPercentInsiders&quot;: 0.00072999997,            &quot;nextFiscalYearEnd&quot;: 1601337600,            &quot;yield&quot;: null,            &quot;mostRecentQuarter&quot;: 1538179200,            &quot;shortRatio&quot;: 1,            &quot;sharesShortPreviousMonthDate&quot;: &quot;2018-10-31&quot;,            &quot;floatShares&quot;: 4489763410,            &quot;beta&quot;: 1.127094,            &quot;enterpriseValue&quot;: 789555511296,            &quot;priceHint&quot;: 2,            &quot;threeYearAverageReturn&quot;: null,            &quot;lastSplitDate&quot;: &quot;2014-06-09&quot;,            &quot;lastSplitFactor&quot;: &quot;1/7&quot;,            &quot;legalType&quot;: null,            &quot;morningStarOverallRating&quot;: null,            &quot;earningsQuarterlyGrowth&quot;: 0.318,            &quot;priceToSalesTrailing12Months&quot;: null,            &quot;dateShortInterest&quot;: 1543536000,            &quot;pegRatio&quot;: 0.98,            &quot;ytdReturn&quot;: null,            &quot;forwardPE&quot;: 11.289103,            &quot;maxAge&quot;: 1,            &quot;lastCapGain&quot;: null,            &quot;shortPercentOfFloat&quot;: 0.0088,            &quot;sharesShortPriorMonth&quot;: 36469092,            &quot;category&quot;: null,            &quot;fiveYearAverageReturn&quot;: null        }    }12. Apple and Wells Fargo Daily Dividend Data:.. code-block:: python    start_date = '1987-09-15'    end_date = '1988-09-15'    yahoo_financials = YahooFinancials(['AAPL', 'WFC'])    print(yahoo_financials.get_daily_dividend_data(start_date, end_date)).. code-block:: javascript    {        &quot;AAPL&quot;: [            {                &quot;date&quot;: 564157800,                &quot;formatted_date&quot;: &quot;1987-11-17&quot;,                &quot;amount&quot;: 0.08            },            {                &quot;date&quot;: 571674600,                &quot;formatted_date&quot;: &quot;1988-02-12&quot;,                &quot;amount&quot;: 0.08            },            {                &quot;date&quot;: 579792600,                &quot;formatted_date&quot;: &quot;1988-05-16&quot;,                &quot;amount&quot;: 0.08            },            {                &quot;date&quot;: 587655000,                &quot;formatted_date&quot;: &quot;1988-08-15&quot;,                &quot;amount&quot;: 0.08            }        ],        &quot;WFC&quot;: [            {                &quot;date&quot;: 562861800,                &quot;formatted_date&quot;: &quot;1987-11-02&quot;,                &quot;amount&quot;: 0.3008            },            {                &quot;date&quot;: 570724200,                &quot;formatted_date&quot;: &quot;1988-02-01&quot;,                &quot;amount&quot;: 0.3008            },            {                &quot;date&quot;: 578583000,                &quot;formatted_date&quot;: &quot;1988-05-02&quot;,                &quot;amount&quot;: 0.3344            },            {                &quot;date&quot;: 586445400,                &quot;formatted_date&quot;: &quot;1988-08-01&quot;,                &quot;amount&quot;: 0.3344            }        ]    }13. Apple key Financial Data:.. code-block:: python    yahoo_financials = YahooFinancials(&quot;AAPL&quot;)    print(yahoo_financials.get_financial_data()).. code-block:: javascript    {        'AAPL': {            'ebitdaMargins': 0.29395,            'profitMargins': 0.21238,            'grossMargins': 0.37818,            'operatingCashflow': 69390999552,            'revenueGrowth': 0.018,            'operatingMargins': 0.24572,            'ebitda': 76476997632,            'targetLowPrice': 150,            'recommendationKey': 'buy',            'grossProfits': 98392000000,            'freeCashflow': 42914250752,            'targetMedianPrice': 270,            'currentPrice': 261.78,            'earningsGrowth': 0.039,            'currentRatio': 1.54,            'returnOnAssets': 0.11347,            'numberOfAnalystOpinions': 40,            'targetMeanPrice': 255.51,            'debtToEquity': 119.405,            'returnOnEquity': 0.55917,            'targetHighPrice': 300,            'totalCash': 100556996608,            'totalDebt': 108046999552,            'totalRevenue': 260174004224,            'totalCashPerShare': 22.631,            'financialCurrency': 'USD',            'maxAge': 86400,            'revenuePerShare': 56.341,            'quickRatio': 1.384,            'recommendationMean': 2.2        }    }</longdescription>
</pkgmetadata>