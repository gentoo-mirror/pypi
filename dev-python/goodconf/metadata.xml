<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Goodconf========.. image:: https://github.com/lincolnloop/goodconf/actions/workflows/test.yml/badge.svg?branch=main&amp;event=push    :target: https://github.com/lincolnloop/goodconf/actions/workflows/test.yml?query=branch%3Amain+event%3Apush.. image:: https://results.pre-commit.ci/badge/github/lincolnloop/goodconf/main.svg    :target: https://results.pre-commit.ci/latest/github/lincolnloop/goodconf/main    :alt: pre-commit.ci status.. image:: https://img.shields.io/codecov/c/github/lincolnloop/goodconf.svg    :target: https://codecov.io/gh/lincolnloop/goodconf.. image:: https://img.shields.io/pypi/v/goodconf.svg    :target: https://pypi.python.org/pypi/goodconf.. image:: https://img.shields.io/pypi/pyversions/goodconf.svg    :target: https://pypi.python.org/pypi/goodconfA thin wrapper over `Pydantic's settings management &lt;https://pydantic-docs.helpmanual.io/usage/settings/&gt;`__.Allows you to define configuration variables and load them from environment or JSON/YAMLfile. Also generates initial configuration files and documentation for yourdefined configuration.Installation------------``pip install goodconf`` or ``pip install goodconf[yaml]`` /``pip install goodconf[toml]`` if parsing/generating YAML/TOMLfiles is required.Quick Start-----------Let's use configurable Django settings as an example.First, create a ``conf.py`` file in your project's directory, next to``settings.py``:.. code:: python    import base64    import os    from goodconf import GoodConf, Field    from pydantic import PostgresDsn    class AppConfig(GoodConf):        &quot;Configuration for My App&quot;        DEBUG: bool        DATABASE_URL: PostgresDsn = &quot;postgres://localhost:5432/mydb&quot;        SECRET_KEY: str = Field(            initial=lambda: base64.b64encode(os.urandom(60)).decode(),            description=&quot;Used for cryptographic signing. &quot;            &quot;https://docs.djangoproject.com/en/2.0/ref/settings/#secret-key&quot;)        class Config:            default_files = [&quot;/etc/myproject/myproject.yaml&quot;, &quot;myproject.yaml&quot;]    config = AppConfig()Next, use the config in your ``settings.py`` file:.. code:: python    import dj_database_url    from .conf import config    config.load()    DEBUG = config.DEBUG    SECRET_KEY = config.SECRET_KEY    DATABASES = {&quot;default&quot;: dj_database_url.parse(config.DATABASE_URL)}In your initial developer installation instructions, give some advice such as:.. code:: shell    python -c &quot;import myproject; print(myproject.conf.config.generate_yaml(DEBUG=True))&quot; &gt; myproject.yamlBetter yet, make it a function and `entry point &lt;https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-script-creation&gt;`__ so you can installyour project and run something like ``generate-config &gt; myproject.yaml``.Usage-----``GoodConf``^^^^^^^^^^^^Your subclassed ``GoodConf`` object can include a ``Config`` class with the followingattributes:``file_env_var``  The name of an environment variable which can be used for  the name of the configuration file to load.``default_files``  If no file is passed to the ``load`` method, try to load a  configuration from these files in order.It also has one method:``load``  Trigger the load method during instantiation. Defaults to False.Use plain-text docstring for use as a header when generating a configurationfile.Environment variables always take precedence over variables in the configuration files.See Pydantic's docs for examples of loading:* `Dotenv (.env) files &lt;https://pydantic-docs.helpmanual.io/usage/settings/#dotenv-env-support&gt;`_* `Docker secrets &lt;https://pydantic-docs.helpmanual.io/usage/settings/#secret-support&gt;`_Fields^^^^^^Declare configuration values by subclassing ``GoodConf`` and defining classattributes which are standard Python type definitions or Pydantic ``FieldInfo``instances generated by the ``Field`` function.Goodconf can use one extra argument provided to the ``Field`` to define an functionwhich can generate an initial value for the field:``initial``  Callable to use for initial value when generating a configDjango Usage------------A helper is provided which monkey-patches Django's management commands toaccept a ``--config`` argument. Replace your ``manage.py`` with the following:.. code:: python    # Define your GoodConf in `myproject/conf.py`    from myproject.conf import config    if __name__ == '__main__':        config.django_manage()Why?----I took inspiration from `logan &lt;https://github.com/dcramer/logan&gt;`__ (used bySentry) and `derpconf &lt;https://github.com/globocom/derpconf&gt;`__ (used byThumbor). Both, however used Python files for configuration. I wanted a saferformat and one that was easier to serialize data into from a configurationmanagement system.Environment Variables^^^^^^^^^^^^^^^^^^^^^I don't like working with environment variables. First, there are potentialsecurity issues:1. Accidental leaks via logging or error reporting services.2. Child process inheritance (see `ImageTragick &lt;https://imagetragick.com/&gt;`__   for an idea why this could be bad).Second, in practice on deployment environments, environment variables end upgetting written to a number of files (cron, bash profile, service definitions,web server config, etc.). Not only is it cumbersome, but also increases thepossibility of leaks via incorrect file permissions.I prefer a single structured file which is explicitly read by the application.I also want it to be easy to run my applications on services like Herokuwhere environment variables are the preferred configuration method.This module let's me do things the way I prefer in environments I control, butstill run them with environment variables on environments I don't control withminimal fuss.Contribute----------Create virtual environment and install package and dependencies... code:: shell    pip install -e &quot;.[tests]&quot;Run tests.. code:: shell    pytest</longdescription>
</pkgmetadata>