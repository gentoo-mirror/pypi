<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- omit in toc --&gt;# Xendit Python LibraryThis library is the abstraction of Xendit API for access from applications written with Python.&lt;!-- omit in toc --&gt;## Table of Contents&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;- [API Documentation](#api-documentation)- [Requirements](#requirements)- [Installation](#installation)- [Usage](#usage)  - [API Key](#api-key)    - [Global Variable](#global-variable)    - [Use Xendit Instance](#use-xendit-instance)  - [Headers](#headers)  - [Object Creation](#object-creation)  - [Using Custom HTTP Client](#using-custom-http-client)  - [Balance Service](#balance-service)    - [Get Balance](#get-balance)  - [Credit Card Service](#credit-card-service)    - [Create Authorization](#create-authorization)    - [Reverse Authorization](#reverse-authorization)    - [Create Charge](#create-charge)    - [Capture Charge](#capture-charge)    - [Get Charge](#get-charge)    - [Create Refund](#create-refund)    - [Create Promotion](#create-promotion)  - [eWallets Service](#ewallets-service)    - [Create OVO Payment](#create-ovo-payment)    - [Create DANA Payment](#create-dana-payment)    - [Create LinkAja Payment](#create-linkaja-payment)    - [Get Payment Status](#get-payment-status)  - [Cardless Credit Service](#cardless-credit-service)    - [Create Payment / Generate Checkout URL](#create-payment--generate-checkout-url)    - [Calculate Payment Types](#calculate-payment-types)  - [QR Codes Service](#qr-codes-service)    - [Create QR Code](#create-qr-code)    - [Get QR Code by External ID](#get-qr-code-by-external-id)  - [Direct Debit Service](#direct-debit-service)    - [Create Customer](#create-customer)    - [Get Customer by Reference ID](#get-customer-by-reference-id)    - [Initialize Linked Account Tokenization](#initialize-linked-account-tokenization)    - [Validate OTP for Linked Account Token](#validate-otp-for-linked-account-token)    - [Retrieve Accessible Accounts by Linked Account Token](#retrieve-accessible-accounts-by-linked-account-token)    - [Create Payment Method](#create-payment-method)    - [Get Payment Methods by Customer ID](#get-payment-methods-by-customer-id)    - [Create Direct Debit Payment](#create-direct-debit-payment)    - [Create Recurring Payment with Direct Debit](#create-recurring-payment-with-direct-debit)    - [Validate OTP for Direct Debit Payment](#validate-otp-for-direct-debit-payment)    - [Get Direct Debit Payment Status by ID](#get-direct-debit-payment-status-by-id)    - [Get Direct Debit Payment Status by Reference ID](#get-direct-debit-payment-status-by-reference-id)  - [Virtual Account Service](#virtual-account-service)    - [Create Virtual Account](#create-virtual-account)    - [Get Virtual Account Banks](#get-virtual-account-banks)    - [Get Virtual Account](#get-virtual-account)    - [Update Virtual Account](#update-virtual-account)    - [Get Virtual Account Payment](#get-virtual-account-payment)  - [Retail Outlet Service](#retail-outlet-service)    - [Create Fixed Payment Code](#create-fixed-payment-code)    - [Update Fixed Payment Code](#update-fixed-payment-code)    - [Get Fixed Payment Code](#get-fixed-payment-code)  - [Invoice Service](#invoice-service)    - [Create Invoice](#create-invoice)    - [Get Invoice](#get-invoice)    - [Expire Invoice](#expire-invoice)    - [List All Invoice](#list-all-invoice)  - [Recurring Payment Service](#recurring-payment-service)    - [Create Recurring Payment](#create-recurring-payment)    - [Get Recurring Payment](#get-recurring-payment)    - [Edit Recurring Payment](#edit-recurring-payment)    - [Stop Recurring Payment](#stop-recurring-payment)    - [Pause Recurring Payment](#pause-recurring-payment)    - [Resume Recurring Payment](#resume-recurring-payment)  - [Payout Service](#payout-service)    - [Create Payout](#create-payout)    - [Get Payout](#get-payout)    - [Void a Payout](#void-a-payout)  - [Disbursement Service](#disbursement-service)    - [Create Disbursement](#create-disbursement)    - [Get Disbursement by ID](#get-disbursement-by-id)    - [Get Disbursement by External ID](#get-disbursement-by-external-id)    - [Get Available Banks](#get-available-banks)  - [Batch Disbursement Service](#batch-disbursement-service)    - [Create Batch Disbursement](#create-batch-disbursement)    - [Get Batch Disbursement Available Banks](#get-batch-disbursement-available-banks)  - [xenPlatform Service](#xenplatform-service)    - [Create Account](#create-account)    - [Set Callback URLs](#set-callback-urls)    - [Transfers](#transfers)  - [Payment Methods](#payment-methods)    - [Create Payment Method](#create-payment-method-1)    - [Get Payment Method](#get-payment-method)    - [Update Payment Method](#update-payment-method)    - [Expire Payment Method](#expire-payment-method)    - [List Payment Methods](#expire-payment-method)    - [Authorize Payment Method](#authorize-a-payment-method)    - [List Payments](#list-payments)  - [Payment Requests](#payment-requests)    - [Create Payment Request](#create-payment-request)    - [Get Payment Request](#get-payment-request)    - [Create Payment Request](#create-payment-request)    - [Confirm Payment Request](#confirm-payment-request)    - [Resend Auth for Payment Request](#resend-auth-for-payment-request)    - [List Payment Request](#list-payment-request)  - [Refunds](#refunds)    - [Create Refund](#create-refund)    - [Get Refund](#get-refund)    - [List Refund](#list-refunds)- [Contributing](#contributing)  - [Tests](#tests)    - [Running the Test](#running-the-test)&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;## API DocumentationPlease check [Xendit API Reference](https://xendit.github.io/apireference/).## RequirementsPython 3.7 or later## InstallationTo use the package, run ```pip install xendit-python```## Usage### API KeyTo add API Key, you have 2 option: Use global variable or use Xendit instance#### Global Variable```pythonimport xenditxendit.api_key = &quot;test-key123&quot;# Then just run each class as staticfrom xendit import BalanceBalance.get()```#### Use Xendit Instance```pythonimport xenditx = xendit.Xendit(api_key=&quot;test-key123&quot;)# Then access each class from x attributeBalance = x.BalanceBalance.get()```### HeadersYou can add headers by using the following keyword parameters- X-IDEMPOTENCY-KEY: `x_idempotency_key````VirtualAccount.create(x_idempotency_key=&quot;your-idemp-key&quot;)```- for-user-id: `for_user_id````Balance.get(for_user_id='subaccount-user-id')```- X-API-VERSION: `x_api_version````Balance.get(x_api_version='2020-01-01')```### Object CreationIf an API need an object as its parameter, you can use either dictionary for that class or a helper method e.g:```pythonitems = []item = {    id: &quot;123123&quot;,    name: &quot;Phone Case&quot;,    price: 100000,    quantity: 1}items.append(item)EWallet.create_linkaja_payment(    external_id=&quot;linkaja-ewallet-test-1593663498&quot;,    phone=&quot;089911111111&quot;,    items=items,    amount=300000,    callback_url=&quot;https://my-shop.com/callbacks&quot;,    redirect_url=&quot;https://xendit.co/&quot;,)```is equivalent with```pythonitems = []item = EWallet.helper_create_linkaja_item(    id=&quot;123123&quot;, name=&quot;Phone Case&quot;, price=100000, quantity=1)items.append(item)EWallet.create_linkaja_payment(    external_id=&quot;linkaja-ewallet-test-1593663498&quot;,    phone=&quot;089911111111&quot;,    items=items,    amount=300000,    callback_url=&quot;https://my-shop.com/callbacks&quot;,    redirect_url=&quot;https://xendit.co/&quot;,)```### Using Custom HTTP ClientTo use your own HTTP Client, you can do it as long as your http client adhere to HTTP client interface at `xendit/network/http_client_interface.py`. For example, [requests](https://github.com/psf/requests) library are compatible with that interface, so we can freely use it in our library. To attach it to your instance, add it to your xendit parameter.```pythonimport xenditxendit_instance =  xendit.Xendit(api_key='', http_client=YourHTTPClientClass)```### Balance Service#### Get BalanceThe `account_type` parameter is optional.```pythonfrom xendit import BalanceBalance.get()Balance.AccountType(    account_type=BalanceAccountType.CASH,)```Usage example:```pythonfrom xendit import Balance, BalanceAccountTypeBalance balance = Balance.get(    account_type=BalanceAccountType.CASH,)# To get the JSON viewprint(balance)# To get only the valueprint(balance.balance)``` Will return```{'balance': 1000000000}1000000000```### Credit Card Service#### Create Authorization```pythonfrom xendit import CreditCardcharge = CreditCard.create_authorization(    token_id=&quot;5f0410898bcf7a001a00879d&quot;,    external_id=&quot;card_preAuth-1594106356&quot;,    amount=75000,    card_cvn=&quot;123&quot;,    metadata={        &quot;meta&quot;: &quot;data&quot;,    },)print(charge)```Will return```{    &quot;status&quot;: &quot;AUTHORIZED&quot;,    &quot;authorized_amount&quot;: 75000,    &quot;capture_amount&quot;: 0,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;business_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;merchant_id&quot;: &quot;xendit_ctv_agg&quot;,    &quot;merchant_reference_code&quot;: &quot;5f0421faa98815a4f4c92a0d&quot;,    &quot;external_id&quot;: &quot;card_preAuth-1594106356&quot;,    &quot;eci&quot;: &quot;07&quot;,    &quot;charge_type&quot;: &quot;MULTIPLE_USE_TOKEN&quot;,    &quot;masked_card_number&quot;: &quot;400000XXXXXX0002&quot;,    &quot;card_brand&quot;: &quot;VISA&quot;,    &quot;card_type&quot;: &quot;CREDIT&quot;,    &quot;descriptor&quot;: &quot;XENDIT*XENDIT&amp;AMP;#X27;S INTERN&quot;,    &quot;bank_reconciliation_id&quot;: &quot;5941063625146828103011&quot;,    &quot;approval_code&quot;: &quot;831000&quot;,    &quot;created&quot;: &quot;2020-07-07T07:19:22.921Z&quot;,    &quot;id&quot;: &quot;5f0421fa8cc1e8001973a1d6&quot;,    &quot;metadata&quot;: {        &quot;meta&quot;: &quot;data&quot;    }}```#### Reverse Authorization```pythonfrom xendit import CreditCardreverse_authorization = CreditCard.reverse_authorizatiton(    credit_card_charge_id=&quot;5f0421fa8cc1e8001973a1d6&quot;,    external_id=&quot;reverse-authorization-1594106387&quot;,)print(reverse_authorization)```Will return```{    &quot;status&quot;: &quot;SUCCEEDED&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;credit_card_charge_id&quot;: &quot;5f0421fa8cc1e8001973a1d6&quot;,    &quot;business_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;card_preAuth-1594106356&quot;,    &quot;amount&quot;: 75000,    &quot;created&quot;: &quot;2020-07-07T07:19:48.896Z&quot;,    &quot;id&quot;: &quot;5f0422148cc1e8001973a1dc&quot;}```#### Create Charge```pythonfrom xendit import CreditCardcharge = CreditCard.create_charge(    token_id=&quot;5f0410898bcf7a001a00879d&quot;,    external_id=&quot;card_charge-1594106478&quot;,    amount=75000,    card_cvn=&quot;123&quot;,    metadata={        &quot;meta&quot;: &quot;data&quot;,    },)print(charge)```Will return```{    &quot;status&quot;: &quot;CAPTURED&quot;,    &quot;authorized_amount&quot;: 75000,    &quot;capture_amount&quot;: 75000,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;business_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;merchant_id&quot;: &quot;xendit_ctv_agg&quot;,    &quot;merchant_reference_code&quot;: &quot;5f0422746fc1d25bd222df2e&quot;,    &quot;external_id&quot;: &quot;card_charge-1594106478&quot;,    &quot;eci&quot;: &quot;07&quot;,    &quot;charge_type&quot;: &quot;MULTIPLE_USE_TOKEN&quot;,    &quot;masked_card_number&quot;: &quot;400000XXXXXX0002&quot;,    &quot;card_brand&quot;: &quot;VISA&quot;,    &quot;card_type&quot;: &quot;CREDIT&quot;,    &quot;descriptor&quot;: &quot;XENDIT*XENDIT&amp;AMP;#X27;S INTERN&quot;,    &quot;bank_reconciliation_id&quot;: &quot;5941064846646923303008&quot;,    &quot;approval_code&quot;: &quot;831000&quot;,    &quot;created&quot;: &quot;2020-07-07T07:21:25.027Z&quot;,    &quot;id&quot;: &quot;5f0422752bbbe50019a368b5&quot;,    &quot;metadata&quot;: {        &quot;meta&quot;: &quot;data&quot;    }}```#### Capture Charge```pythonfrom xendit import CreditCardcharge = CreditCard.capture_charge(    credit_card_charge_id=&quot;5f0422aa2bbbe50019a368c2&quot;,    amount=75000,)print(charge)```Will return```{    &quot;status&quot;: &quot;CAPTURED&quot;,    &quot;authorized_amount&quot;: 75000,    &quot;capture_amount&quot;: 75000,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;created&quot;: &quot;2020-07-07T07:22:18.719Z&quot;,    &quot;business_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;merchant_id&quot;: &quot;xendit_ctv_agg&quot;,    &quot;merchant_reference_code&quot;: &quot;5f0422aa6fc1d25bd222df32&quot;,    &quot;external_id&quot;: &quot;card_preAuth-1594106532&quot;,    &quot;eci&quot;: &quot;07&quot;,    &quot;charge_type&quot;: &quot;MULTIPLE_USE_TOKEN&quot;,    &quot;masked_card_number&quot;: &quot;400000XXXXXX0002&quot;,    &quot;card_brand&quot;: &quot;VISA&quot;,    &quot;card_type&quot;: &quot;CREDIT&quot;,    &quot;descriptor&quot;: &quot;XENDIT*XENDIT&amp;AMP;#X27;S INTERN&quot;,    &quot;bank_reconciliation_id&quot;: &quot;5941065383296525603007&quot;,    &quot;approval_code&quot;: &quot;831000&quot;,    &quot;mid_label&quot;: &quot;CTV_TEST&quot;,    &quot;id&quot;: &quot;5f0422aa2bbbe50019a368c2&quot;}```#### Get Charge```pythonfrom xendit import CreditCardcharge = CreditCard.get_charge(    credit_card_charge_id=&quot;5f0422aa2bbbe50019a368c2&quot;,)print(charge)```Will return```{    &quot;status&quot;: &quot;CAPTURED&quot;,    &quot;authorized_amount&quot;: 75000,    &quot;capture_amount&quot;: 75000,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;created&quot;: &quot;2020-07-07T07:22:18.719Z&quot;,    &quot;business_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;merchant_id&quot;: &quot;xendit_ctv_agg&quot;,    &quot;merchant_reference_code&quot;: &quot;5f0422aa6fc1d25bd222df32&quot;,    &quot;external_id&quot;: &quot;card_preAuth-1594106532&quot;,    &quot;eci&quot;: &quot;07&quot;,    &quot;charge_type&quot;: &quot;MULTIPLE_USE_TOKEN&quot;,    &quot;masked_card_number&quot;: &quot;400000XXXXXX0002&quot;,    &quot;card_brand&quot;: &quot;VISA&quot;,    &quot;card_type&quot;: &quot;CREDIT&quot;,    &quot;descriptor&quot;: &quot;XENDIT*XENDIT&amp;AMP;#X27;S INTERN&quot;,    &quot;bank_reconciliation_id&quot;: &quot;5941065383296525603007&quot;,    &quot;approval_code&quot;: &quot;831000&quot;,    &quot;mid_label&quot;: &quot;CTV_TEST&quot;,    &quot;metadata&quot;: {},    &quot;id&quot;: &quot;5f0422aa2bbbe50019a368c2&quot;}```#### Create Refund```pythonfrom xendit import CreditCardrefund = CreditCard.create_refund(    credit_card_charge_id=&quot;5f0422aa2bbbe50019a368c2&quot;,    amount=10000,    external_id=&quot;card_refund-1594106755&quot;,)print(refund)```Will return```{    &quot;status&quot;: &quot;REQUESTED&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;credit_card_charge_id&quot;: &quot;5f0422aa2bbbe50019a368c2&quot;,    &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;amount&quot;: 10000,    &quot;external_id&quot;: &quot;card_refund-1594106755&quot;,    &quot;created&quot;: &quot;2020-07-07T07:25:56.872Z&quot;,    &quot;updated&quot;: &quot;2020-07-07T07:25:57.740Z&quot;,    &quot;id&quot;: &quot;5f0423848bb8da600c57c44f&quot;,    &quot;fee_refund_amount&quot;: 290}```#### Create Promotion```pythonfrom xendit import CreditCardpromotion = CreditCard.create_promotion(    reference_id=&quot;BRI_20_JAN-1594176600&quot;,    description=&quot;20% discount applied for all BRI cards&quot;,    discount_amount=10000,    bin_list=['400000', '460000'],    start_time=&quot;2020-01-01T00:00:00.000Z&quot;,    end_time=&quot;2021-01-01T00:00:00.000Z&quot;,)print(promotion)```Will return```{    &quot;business_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;reference_id&quot;: &quot;BRI_20_JAN-1594176600&quot;,    &quot;description&quot;: &quot;20% discount applied for all BRI cards&quot;,    &quot;start_time&quot;: &quot;2020-01-01T00:00:00.000Z&quot;,    &quot;end_time&quot;: &quot;2021-01-01T00:00:00.000Z&quot;,    &quot;type&quot;: &quot;CARD_BIN&quot;,    &quot;discount_amount&quot;: 10000,    &quot;bin_list&quot;: [        &quot;400000&quot;,        &quot;460000&quot;    ],    &quot;currency&quot;: &quot;IDR&quot;,    &quot;id&quot;: &quot;c65a2ae7-ce75-4a15-bbec-55d076f46bd0&quot;,    &quot;created&quot;: &quot;2020-07-08T02:50:02.296Z&quot;,    &quot;status&quot;: &quot;ACTIVE&quot;}```### eWallets Service#### Create E-Wallet Charge```pythonfrom xendit import EWalletbasket = []basket_item = EWallet.helper_create_basket_item(    reference_id = &quot;basket-product-ref-id&quot;,    name = &quot;product_name&quot;,    category = &quot;product_category&quot;,    currency = &quot;IDR&quot;,    price = 50000,    quantity = 5,    type = &quot;product_type&quot;,    sub_category = &quot;product_sub_category&quot;,    metadata = {        &quot;meta&quot;: &quot;data&quot;    })basket.append(basket_item)ewallet_charge = EWallet.create_ewallet_charge(    reference_id=&quot;basket-product-ref-id&quot;,    currency=&quot;IDR&quot;,    amount=10000,    checkout_method=&quot;ONE_TIME_PAYMENT&quot;,    channel_code=&quot;ID_SHOPEEPAY&quot;,    channel_properties={        &quot;success_redirect_url&quot;: &quot;https://yourwebsite.com/order/123&quot;,    },    basket=basket,)```Will return```json{    &quot;id&quot;: &quot;ewc_f3925450-5c54-4777-98c1-fcf22b0d1e1c&quot;,    &quot;business_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;reference_id&quot;: &quot;basket-product-ref-id&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;charge_amount&quot;: 10000,    &quot;capture_amount&quot;: 10000,    &quot;checkout_method&quot;: &quot;ONE_TIME_PAYMENT&quot;,    &quot;channel_code&quot;: &quot;ID_SHOPEEPAY&quot;,    &quot;channel_properties&quot;: {        &quot;success_redirect_url&quot;: &quot;https://yourwebsite.com/order/123&quot;,    },    &quot;actions&quot;: {        &quot;desktop_web_checkout_url&quot;: null,        &quot;mobile_web_checkout_url&quot;: null,        &quot;mobile_deeplink_checkout_url&quot;: &quot;https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ZjQyOGIzMGVlNGFjOWJhNTE2YWQ3NGQyN2RiMTIwODg6ZTY2YjA2YjQ1ZjJlZWI0NDA4OGNjODg2NGFlYzQ2N2U5YTI5MjM3ODUzODViYzljNjQyYWYwOGExMjU4MzdmMTc3NDFlMWZmYjcxN2MzOWZiYmMyNjY4N2ViNmMxM2ZkMjg1ZmIzZDM5ZmZiZDYzM2ViNGMyMDRkOWM3ZTUzNWUyMDBlOWUzMzdhZTkwZjllZjQwZjQyMjExOTkyNWQ2MTg2YzgzZTQ3N2JhYWZkNDFhN2U0MWM1ZDMzMGJmMmNhNzhiMjhmMmY5ZDBjZDQ4MjlkODA3MjE5YWQzYTlhNTE0YmM1NjUzYjljMmZlOWU1YjMwM2FmNTZiNmViNGVlZDIxODQzNzdjNDJmYjRmNzBmZDZlZDhlM2MyMGM4YmExY2RmNTVkOTdjZmU3MWYxMWVmMDYzMmQzNGE1ZTFmMzE=&quot;,        &quot;qr_checkout_string&quot;: &quot;test-qr-string&quot;,    },    &quot;is_redirect_required&quot;: true,    &quot;callback_url&quot;: &quot;https://yourwebsite.com/order/123&quot;,    &quot;created&quot;: &quot;2021-02-09T06:22:35.064408Z&quot;,    &quot;updated&quot;: &quot;2021-02-09T06:22:35.064408Z&quot;,    &quot;voided_at&quot;: null,    &quot;capture_now&quot;: true,    &quot;customer_id&quot;: null,    &quot;payment_method_id&quot;: null,    &quot;failure_code&quot;: null,    &quot;basket&quot;: [        {            &quot;reference_id&quot;: &quot;basket-product-ref-id&quot;,            &quot;name&quot;: &quot;product_name&quot;,            &quot;category&quot;: &quot;product_category&quot;,            &quot;currency&quot;: &quot;IDR&quot;,            &quot;price&quot;: 50000,            &quot;quantity&quot;: 5,            &quot;type&quot;: &quot;product_type&quot;,            &quot;url&quot;: &quot;&quot;,            &quot;description&quot;: &quot;&quot;,            &quot;sub_category&quot;: &quot;product_sub_category&quot;,            &quot;metadata&quot;: {                &quot;meta&quot;: &quot;data&quot;            }        }    ],    &quot;metadata&quot;: null,}```#### Get E-Wallet Charge Status```pythonfrom xendit import EWalletewallet_charge = EWallet.get_ewallet_charge_status(    charge_id=&quot;ewc_f3925450-5c54-4777-98c1-fcf22b0d1e1c&quot;,)```Will return```json{    &quot;id&quot;: &quot;ewc_f3925450-5c54-4777-98c1-fcf22b0d1e1c&quot;,    &quot;business_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;reference_id&quot;: &quot;basket-product-ref-id&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;charge_amount&quot;: 10000,    &quot;capture_amount&quot;: 10000,    &quot;checkout_method&quot;: &quot;ONE_TIME_PAYMENT&quot;,    &quot;channel_code&quot;: &quot;ID_SHOPEEPAY&quot;,    &quot;channel_properties&quot;: {        &quot;success_redirect_url&quot;: &quot;https://yourwebsite.com/order/123&quot;,    },    &quot;actions&quot;: {        &quot;desktop_web_checkout_url&quot;: null,        &quot;mobile_web_checkout_url&quot;: null,        &quot;mobile_deeplink_checkout_url&quot;: &quot;https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ZjQyOGIzMGVlNGFjOWJhNTE2YWQ3NGQyN2RiMTIwODg6ZTY2YjA2YjQ1ZjJlZWI0NDA4OGNjODg2NGFlYzQ2N2U5YTI5MjM3ODUzODViYzljNjQyYWYwOGExMjU4MzdmMTc3NDFlMWZmYjcxN2MzOWZiYmMyNjY4N2ViNmMxM2ZkMjg1ZmIzZDM5ZmZiZDYzM2ViNGMyMDRkOWM3ZTUzNWUyMDBlOWUzMzdhZTkwZjllZjQwZjQyMjExOTkyNWQ2MTg2YzgzZTQ3N2JhYWZkNDFhN2U0MWM1ZDMzMGJmMmNhNzhiMjhmMmY5ZDBjZDQ4MjlkODA3MjE5YWQzYTlhNTE0YmM1NjUzYjljMmZlOWU1YjMwM2FmNTZiNmViNGVlZDIxODQzNzdjNDJmYjRmNzBmZDZlZDhlM2MyMGM4YmExY2RmNTVkOTdjZmU3MWYxMWVmMDYzMmQzNGE1ZTFmMzE=&quot;,        &quot;qr_checkout_string&quot;: &quot;test-qr-string&quot;,    },    &quot;is_redirect_required&quot;: true,    &quot;callback_url&quot;: &quot;https://yourwebsite.com/order/123&quot;,    &quot;created&quot;: &quot;2021-02-09T06:22:35.064408Z&quot;,    &quot;updated&quot;: &quot;2021-02-09T06:22:35.064408Z&quot;,    &quot;voided_at&quot;: null,    &quot;capture_now&quot;: true,    &quot;customer_id&quot;: null,    &quot;payment_method_id&quot;: null,    &quot;failure_code&quot;: null,    &quot;basket&quot;: [        {            &quot;reference_id&quot;: &quot;basket-product-ref-id&quot;,            &quot;name&quot;: &quot;product_name&quot;,            &quot;category&quot;: &quot;product_category&quot;,            &quot;currency&quot;: &quot;IDR&quot;,            &quot;price&quot;: 50000,            &quot;quantity&quot;: 5,            &quot;type&quot;: &quot;product_type&quot;,            &quot;url&quot;: &quot;&quot;,            &quot;description&quot;: &quot;&quot;,            &quot;sub_category&quot;: &quot;product_sub_category&quot;,            &quot;metadata&quot;: {                &quot;meta&quot;: &quot;data&quot;            }        }    ],    &quot;metadata&quot;: null,}```### Cardless Credit Service#### Create Payment / Generate Checkout URL```pythonfrom xendit import CardlessCredit, CardlessCreditTypecardless_credit_items = []cardless_credit_items.append(    CardlessCredit.helper_create_item(        id=&quot;item-123&quot;,        name=&quot;Phone Case&quot;,        price=200000,        type=&quot;Smartphone&quot;,        url=&quot;http://example.com/phone/phone_case&quot;,        quantity=2,    ))customer_details = CardlessCredit.helper_create_customer_details(    first_name=&quot;customer first name&quot;,    last_name=&quot;customer last name&quot;,    email=&quot;customer@email.com&quot;,    phone=&quot;0812332145&quot;,)shipping_address = CardlessCredit.helper_create_shipping_address(    first_name=&quot;first name&quot;,    last_name=&quot;last name&quot;,    address=&quot;Jl Teknologi No. 12&quot;,    city=&quot;Jakarta&quot;,    postal_code=&quot;12345&quot;,    phone=&quot;081513114262&quot;,    country_code=&quot;IDN&quot;,)cardless_credit_payment = CardlessCredit.create_payment(    cardless_credit_type=CardlessCreditType.KREDIVO,    external_id=&quot;id-1595923113&quot;,    amount=10000,    payment_type=&quot;3_months&quot;,    items=cardless_credit_items,    customer_details=customer_details,    shipping_address=shipping_address,    redirect_url=&quot;https://my-shop.com/home&quot;,    callback_url=&quot;https://my-shop.com/callback&quot;,)print(cardless_credit_payment)```Will return```{    &quot;redirect_url&quot;: &quot;https://pay-sandbox.kredivo.com/signIn?tk=26458cdf-660c-4491-a1de-bb6e63312d8a&quot;,    &quot;order_id&quot;: &quot;e8ae4066-7980-499f-b92c-eb3a587782c1&quot;,    &quot;external_id&quot;: &quot;id-1595923113&quot;,    &quot;cardless_credit_type&quot;: &quot;KREDIVO&quot;}```#### Calculate Payment Types```pythonfrom xendit import CardlessCredit, CardlessCreditTypecardless_credit_items = []cardless_credit_items.append(    CardlessCredit.helper_create_item(        id=&quot;item-123&quot;,        name=&quot;Phone Case&quot;,        price=200000,        type=&quot;Smartphone&quot;,        url=&quot;http://example.com/phone/phone_case&quot;,        quantity=2,    ))cardless_credit_payment_types = CardlessCredit.calculate_payment_type(    cardless_credit_type=CardlessCreditType.KREDIVO,    amount=10000,    items=cardless_credit_items,)print(cardless_credit_payment_types)```Will return```{    &quot;message&quot;: &quot;Available payment types are listed.&quot;,    &quot;payments&quot;: [        {            &quot;raw_monthly_installment&quot;: 401000,            &quot;name&quot;: &quot;Bayar dalam 30 hari&quot;,            &quot;amount&quot;: 401000,            &quot;installment_amount&quot;: 401000,            &quot;raw_amount&quot;: 401000,            &quot;rate&quot;: 0,            &quot;down_payment&quot;: 0,            &quot;monthly_installment&quot;: 401000,            &quot;discounted_monthly_installment&quot;: 0,            &quot;tenure&quot;: 1,            &quot;id&quot;: &quot;30_days&quot;        }    ]}```### QR Codes Service#### Create QR Code```pythonfrom xendit import QRCode, QRCodeTypeqrcode = QRCode.create(    external_id=&quot;qrcode-id-1594794038&quot;,    type=QRCodeType.DYNAMIC,    callback_url=&quot;https://webhook.site&quot;,    amount=4000,)print(qrcode)```Will return```{    &quot;id&quot;: &quot;qr_13c31ddd-9d58-449b-9f52-1bf5123a45b5&quot;,    &quot;external_id&quot;: &quot;qrcode-id-1594794038&quot;,    &quot;amount&quot;: 4000,    &quot;qr_string&quot;: &quot;00020101021226660014ID.LINKAJA.WWW011893600911002411480002152004230411480010303UME51450015ID.OR.GPNQR.WWW02150000000000000000303UME520454995802ID5920Placeholder merchant6007Jakarta610612345662380115wLoc6DRGwAOgSkZ0715wLoc6DRGwAOgSkZ53033605404400063047668&quot;,    &quot;callback_url&quot;: &quot;https://webhook.site&quot;,    &quot;type&quot;: &quot;DYNAMIC&quot;,    &quot;status&quot;: &quot;ACTIVE&quot;,    &quot;created&quot;: &quot;2020-07-15T06:20:40.636Z&quot;,    &quot;updated&quot;: &quot;2020-07-15T06:20:40.636Z&quot;}```#### Get QR Code by External ID```pythonfrom xendit import QRCodeqrcode = QRCode.get_by_ext_id(    external_id=&quot;qrcode-id-1594794038&quot;,)print(qrcode)```Will return```{    &quot;id&quot;: &quot;qr_13c31ddd-9d58-449b-9f52-1bf5123a45b5&quot;,    &quot;external_id&quot;: &quot;qrcode-id-1594794038&quot;,    &quot;amount&quot;: 4000,    &quot;qr_string&quot;: &quot;00020101021226660014ID.LINKAJA.WWW011893600911002411480002152004230411480010303UME51450015ID.OR.GPNQR.WWW02150000000000000000303UME520454995802ID5920Placeholder merchant6007Jakarta610612345662380115wLoc6DRGwAOgSkZ0715wLoc6DRGwAOgSkZ53033605404400063047668&quot;,    &quot;callback_url&quot;: &quot;https://webhook.site&quot;,    &quot;type&quot;: &quot;DYNAMIC&quot;,    &quot;status&quot;: &quot;ACTIVE&quot;,    &quot;created&quot;: &quot;2020-07-15T06:20:40.636Z&quot;,    &quot;updated&quot;: &quot;2020-07-15T06:20:40.636Z&quot;}```### Direct Debit Service#### Create Customer```pythonfrom xendit import DirectDebitcustomer = DirectDebit.create_customer(    reference_id=&quot;merc-1594279037&quot;,    email=&quot;t@x.co&quot;,    given_names=&quot;Adyaksa&quot;,)print(customer)```Will return```{    &quot;id&quot;: &quot;ed20b5db-df04-41fc-8018-8ea4ac4d1030&quot;,    &quot;reference_id&quot;: &quot;merc-1594279037&quot;,    &quot;description&quot;: null,    &quot;given_names&quot;: &quot;Adyaksa&quot;,    &quot;middle_name&quot;: null,    &quot;surname&quot;: null,    &quot;mobile_number&quot;: null,    &quot;phone_number&quot;: null,    &quot;email&quot;: &quot;t@x.co&quot;,    &quot;nationality&quot;: null,    &quot;addresses&quot;: null,    &quot;date_of_birth&quot;: null,    &quot;employment&quot;: null,    &quot;source_of_wealth&quot;: null,    &quot;metadata&quot;: null}```#### Get Customer by Reference ID```pythonfrom xendit import DirectDebitcustomer = DirectDebit.get_customer_by_ref_id(    reference_id=&quot;merc-1594279037&quot;,)print(customer)```Will return```[{    &quot;id&quot;: &quot;ed20b5db-df04-41fc-8018-8ea4ac4d1030&quot;,    &quot;reference_id&quot;: &quot;merc-1594279037&quot;,    &quot;description&quot;: null,    &quot;given_names&quot;: &quot;Adyaksa&quot;,    &quot;middle_name&quot;: null,    &quot;surname&quot;: null,    &quot;mobile_number&quot;: null,    &quot;phone_number&quot;: null,    &quot;email&quot;: &quot;t@x.co&quot;,    &quot;nationality&quot;: null,    &quot;addresses&quot;: null,    &quot;date_of_birth&quot;: null,    &quot;employment&quot;: null,    &quot;source_of_wealth&quot;: null,    &quot;metadata&quot;: null}]```#### Initialize Linked Account Tokenization```pythonfrom xendit import DirectDebitcard_linking = DirectDebit.helper_create_card_link(    account_mobile_number=&quot;+62818555988&quot;,    card_last_four=&quot;8888&quot;,    card_expiry=&quot;06/24&quot;,    account_email=&quot;test.email@xendit.co&quot;,)linked_account = DirectDebit.initialize_tokenization(    customer_id=&quot;ed20b5db-df04-41fc-8018-8ea4ac4d1030&quot;,    channel_code=&quot;DC_BRI&quot;,    properties=card_linking,   )print(linked_account)```Will return```{    &quot;id&quot;: &quot;lat-f325b757-0aae-4c24-92c5-3661e299e154&quot;,    &quot;customer_id&quot;: &quot;ed20b5db-df04-41fc-8018-8ea4ac4d1030&quot;,    &quot;channel_code&quot;: &quot;DC_BRI&quot;,    &quot;authorizer_url&quot;: null,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;metadata&quot;: null}```#### Validate OTP for Linked Account Token```pythonfrom xendit import DirectDebitlinked_account = DirectDebit.validate_token_otp(    linked_account_token_id=&quot;lat-f325b757-0aae-4c24-92c5-3661e299e154&quot;,    otp_code=&quot;333000&quot;,)print(linked_account)```Will return```{    &quot;id&quot;: &quot;lat-f325b757-0aae-4c24-92c5-3661e299e154&quot;,    &quot;customer_id&quot;: &quot;ed20b5db-df04-41fc-8018-8ea4ac4d1030&quot;,    &quot;channel_code&quot;: &quot;DC_BRI&quot;,    &quot;status&quot;: &quot;SUCCESS&quot;,    &quot;metadata&quot;: null}```#### Retrieve Accessible Accounts by Linked Account Token```pythonfrom xendit import DirectDebitaccessible_accounts = DirectDebit.get_accessible_account_by_token(    linked_account_token_id=&quot;lat-f325b757-0aae-4c24-92c5-3661e299e154&quot;,)print(accessible_accounts)```Will return```[{    &quot;channel_code&quot;: &quot;DC_BRI&quot;,    &quot;id&quot;: &quot;la-08b089e8-7035-4f5f-bdd9-94edd9dc9480&quot;,    &quot;properties&quot;: {        &quot;card_expiry&quot;: &quot;06/24&quot;,        &quot;card_last_four&quot;: &quot;8888&quot;,        &quot;currency&quot;: &quot;IDR&quot;,        &quot;description&quot;: &quot;&quot;    },    &quot;type&quot;: &quot;DEBIT_CARD&quot;}]```#### Create Payment Method```pythonfrom xendit import DirectDebit, DirectDebitPaymentMethodTypepayment_method = DirectDebit.create_payment_method(    customer_id=&quot;ed20b5db-df04-41fc-8018-8ea4ac4d1030&quot;,    type=DirectDebitPaymentMethodType.DEBIT_CARD,    properties={'id': 'la-fac7e744-ab40-4100-a447-cbbb16f29ded'},)print(payment_method)```Will return```{    &quot;customer_id&quot;: &quot;ed20b5db-df04-41fc-8018-8ea4ac4d1030&quot;,    &quot;type&quot;: &quot;DEBIT_CARD&quot;,    &quot;properties&quot;: {        &quot;id&quot;: &quot;la-fac7e744-ab40-4100-a447-cbbb16f29ded&quot;,        &quot;currency&quot;: &quot;IDR&quot;,        &quot;card_expiry&quot;: &quot;06/24&quot;,        &quot;description&quot;: &quot;&quot;,        &quot;channel_code&quot;: &quot;DC_BRI&quot;,        &quot;card_last_four&quot;: &quot;8888&quot;    },    &quot;status&quot;: &quot;ACTIVE&quot;,    &quot;metadata&quot;: {},    &quot;id&quot;: &quot;pm-b6116aea-8c23-42d0-a1e6-33227b52fccd&quot;,    &quot;created&quot;: &quot;2020-07-13T07:28:57.716Z&quot;,    &quot;updated&quot;: &quot;2020-07-13T07:28:57.716Z&quot;}```#### Get Payment Methods by Customer ID```pythonfrom xendit import DirectDebitpayment_methods = DirectDebit.get_payment_methods_by_customer_id(    customer_id=&quot;ed20b5db-df04-41fc-8018-8ea4ac4d1030&quot;,)print(payment_methods)```Will return```[{    &quot;id&quot;: &quot;pm-b6116aea-8c23-42d0-a1e6-33227b52fccd&quot;,    &quot;customer_id&quot;: &quot;ed20b5db-df04-41fc-8018-8ea4ac4d1030&quot;,    &quot;status&quot;: &quot;ACTIVE&quot;,    &quot;type&quot;: &quot;DEBIT_CARD&quot;,    &quot;properties&quot;: {        &quot;id&quot;: &quot;la-fac7e744-ab40-4100-a447-cbbb16f29ded&quot;,        &quot;currency&quot;: &quot;IDR&quot;,        &quot;card_expiry&quot;: &quot;06/24&quot;,        &quot;description&quot;: &quot;&quot;,        &quot;channel_code&quot;: &quot;DC_BRI&quot;,        &quot;card_last_four&quot;: &quot;8888&quot;    },    &quot;metadata&quot;: {},    &quot;created&quot;: &quot;2020-07-13T07:28:57.716Z&quot;,    &quot;updated&quot;: &quot;2020-07-13T07:28:57.716Z&quot;}]```#### Create Direct Debit Payment```pythonfrom xendit import DirectDebitpayment = DirectDebit.create_payment(    reference_id=&quot;direct-debit-ref-1594718940&quot;,    payment_method_id=&quot;pm-b6116aea-8c23-42d0-a1e6-33227b52fccd&quot;,    currency=&quot;IDR&quot;,    amount=&quot;60000&quot;,    callback_url=&quot;http://webhook.site/&quot;,    enable_otp=True,    idempotency_key=&quot;idemp_key-1594718940&quot;,)print(payment)```Will return```{    &quot;failure_code&quot;: null,    &quot;otp_mobile_number&quot;: null,    &quot;otp_expiration_timestamp&quot;: null,    &quot;id&quot;: &quot;ddpy-eaa093b6-b669-401a-ba2e-61ac644b2aff&quot;,    &quot;reference_id&quot;: &quot;direct-debit-ref-1594718940&quot;,    &quot;payment_method_id&quot;: &quot;pm-b6116aea-8c23-42d0-a1e6-33227b52fccd&quot;,    &quot;channel_code&quot;: &quot;DC_BRI&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;amount&quot;: 60000,    &quot;is_otp_required&quot;: true,    &quot;basket&quot;: null,    &quot;description&quot;: &quot;&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;metadata&quot;: null,    &quot;created&quot;: &quot;2020-07-14T09:29:02.614443Z&quot;,    &quot;updated&quot;: &quot;2020-07-14T09:29:02.614443Z&quot;}```#### Create Recurring Payment with Direct DebitYou can use [Create Recurring Payment](#create-recurring-payment) to use this feature.#### Validate OTP for Direct Debit Payment```pythonfrom xendit import DirectDebitpayment = DirectDebit.validate_payment_otp(    direct_debit_id=&quot;ddpy-eaa093b6-b669-401a-ba2e-61ac644b2aff&quot;,    otp_code=&quot;222000&quot;,)print(payment)```Will return```{    &quot;failure_code&quot;: null,    &quot;otp_mobile_number&quot;: null,    &quot;otp_expiration_timestamp&quot;: null,    &quot;id&quot;: &quot;ddpy-eaa093b6-b669-401a-ba2e-61ac644b2aff&quot;,    &quot;reference_id&quot;: &quot;direct-debit-ref-1594718940&quot;,    &quot;payment_method_id&quot;: &quot;pm-b6116aea-8c23-42d0-a1e6-33227b52fccd&quot;,    &quot;channel_code&quot;: &quot;DC_BRI&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;amount&quot;: 60000,    &quot;is_otp_required&quot;: true,    &quot;basket&quot;: null,    &quot;description&quot;: &quot;&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;metadata&quot;: null,    &quot;created&quot;: &quot;2020-07-14T09:29:02.614443Z&quot;,    &quot;updated&quot;: &quot;2020-07-14T09:29:02.614443Z&quot;}```#### Get Direct Debit Payment Status by ID```pythonfrom xendit import DirectDebitpayment = DirectDebit.get_payment_status(    direct_debit_id=&quot;ddpy-38ef50a8-00f0-4019-8b28-9bca81f2cbf1&quot;,)print(payment)```Will return```{    &quot;failure_code&quot;: null,    &quot;otp_mobile_number&quot;: null,    &quot;otp_expiration_timestamp&quot;: null,    &quot;id&quot;: &quot;ddpy-38ef50a8-00f0-4019-8b28-9bca81f2cbf1&quot;,    &quot;reference_id&quot;: &quot;direct-debit-ref-1594717458&quot;,    &quot;payment_method_id&quot;: &quot;pm-b6116aea-8c23-42d0-a1e6-33227b52fccd&quot;,    &quot;channel_code&quot;: &quot;DC_BRI&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;amount&quot;: 60000,    &quot;is_otp_required&quot;: false,    &quot;basket&quot;: null,    &quot;description&quot;: &quot;&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;metadata&quot;: null,    &quot;created&quot;: &quot;2020-07-14T09:04:20.031451Z&quot;,    &quot;updated&quot;: &quot;2020-07-14T09:04:20.031451Z&quot;}```#### Get Direct Debit Payment Status by Reference ID```pythonfrom xendit import DirectDebitpayments = DirectDebit.get_payment_status_by_ref_id(    reference_id=&quot;direct-debit-ref-1594717458&quot;,)print(payments)```Will return```[{    &quot;amount&quot;: 60000,    &quot;basket&quot;: null,    &quot;channel_code&quot;: &quot;DC_BRI&quot;,    &quot;created&quot;: &quot;2020-07-14T09:04:20.031451Z&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;description&quot;: &quot;&quot;,    &quot;failure_code&quot;: null,    &quot;id&quot;: &quot;ddpy-38ef50a8-00f0-4019-8b28-9bca81f2cbf1&quot;,    &quot;is_otp_required&quot;: false,    &quot;metadata&quot;: null,    &quot;otp_expiration_timestamp&quot;: null,    &quot;otp_mobile_number&quot;: null,    &quot;payment_method_id&quot;: &quot;pm-b6116aea-8c23-42d0-a1e6-33227b52fccd&quot;,    &quot;reference_id&quot;: &quot;direct-debit-ref-1594717458&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;updated&quot;: &quot;2020-07-14T09:04:20.031451Z&quot;}]```### Virtual Account Service#### Create Virtual Account```pythonfrom xendit import VirtualAccountvirtual_account = VirtualAccount.create(    external_id=&quot;demo_1475459775872&quot;,    bank_code=&quot;BNI&quot;,    name=&quot;Rika Sutanto&quot;,)print(virtual_account)```Will return```{    &quot;owner_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;demo_1475459775872&quot;,    &quot;bank_code&quot;: &quot;BNI&quot;,    &quot;merchant_code&quot;: &quot;8808&quot;,    &quot;name&quot;: &quot;Rika Sutanto&quot;,    &quot;account_number&quot;: &quot;8808999956275653&quot;,    &quot;is_single_use&quot;: false,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;expiration_date&quot;: &quot;2051-06-22T17:00:00.000Z&quot;,    &quot;is_closed&quot;: false,    &quot;id&quot;: &quot;5ef174c48dd9ea2fc97d6a1e&quot;}```#### Get Virtual Account Banks```pythonfrom xendit import VirtualAccountvirtual_account_banks = VirtualAccount.get_banks()print(virtual_account_banks)```Will return```[{    &quot;name&quot;: &quot;Bank Mandiri&quot;,    &quot;code&quot;: &quot;MANDIRI&quot;}, {    &quot;name&quot;: &quot;Bank Negara Indonesia&quot;,    &quot;code&quot;: &quot;BNI&quot;}, {    &quot;name&quot;: &quot;Bank Rakyat Indonesia&quot;,    &quot;code&quot;: &quot;BRI&quot;}, {    &quot;name&quot;: &quot;Bank Permata&quot;,    &quot;code&quot;: &quot;PERMATA&quot;}, {    &quot;name&quot;: &quot;Bank Central Asia&quot;,    &quot;code&quot;: &quot;BCA&quot;}]```#### Get Virtual Account```pythonfrom xendit import VirtualAccountvirtual_account = VirtualAccount.get(    id=&quot;5eec3a3e8dd9ea2fc97d6728&quot;,)print(virtual_account)```Will return```{    &quot;owner_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;demo_1475459775872&quot;,    &quot;bank_code&quot;: &quot;BNI&quot;,    &quot;merchant_code&quot;: &quot;8808&quot;,    &quot;name&quot;: &quot;Rika Sutanto&quot;,    &quot;account_number&quot;: &quot;8808999917965673&quot;,    &quot;is_single_use&quot;: true,    &quot;status&quot;: &quot;ACTIVE&quot;,    &quot;expiration_date&quot;: &quot;2051-06-18T17:00:00.000Z&quot;,    &quot;is_closed&quot;: false,    &quot;id&quot;: &quot;5eec3a3e8dd9ea2fc97d6728&quot;}```#### Update Virtual Account```pythonfrom xendit import VirtualAccountvirtual_account = VirtualAccount.update(    id=&quot;5eec3a3e8dd9ea2fc97d6728&quot;,    is_single_use=True,)print(virtual_account)```Will return```{    &quot;owner_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;demo_1475459775872&quot;,    &quot;bank_code&quot;: &quot;BNI&quot;,    &quot;merchant_code&quot;: &quot;8808&quot;,    &quot;name&quot;: &quot;Rika Sutanto&quot;,    &quot;account_number&quot;: &quot;8808999917965673&quot;,    &quot;is_single_use&quot;: true,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;expiration_date&quot;: &quot;2051-06-18T17:00:00.000Z&quot;,    &quot;is_closed&quot;: false,    &quot;id&quot;: &quot;5eec3a3e8dd9ea2fc97d6728&quot;}```#### Get Virtual Account Payment```pythonfrom xendit import VirtualAccountvirtual_account_payment = VirtualAccount.get_payment(    payment_id=&quot;5ef18efca7d10d1b4d61fb52&quot;,)print(virtual_account_payment)```Will return```{    &quot;id&quot;: &quot;5ef18efcf9ce3b5f8e188ee4&quot;,    &quot;payment_id&quot;: &quot;5ef18efca7d10d1b4d61fb52&quot;,    &quot;callback_virtual_account_id&quot;: &quot;5ef18ece8dd9ea2fc97d6a84&quot;,    &quot;external_id&quot;: &quot;VA_fixed-1592889038&quot;,    &quot;merchant_code&quot;: &quot;88608&quot;,    &quot;account_number&quot;: &quot;9999317837&quot;,    &quot;bank_code&quot;: &quot;MANDIRI&quot;,    &quot;amount&quot;: 50000,    &quot;transaction_timestamp&quot;: &quot;2020-06-23T05:11:24.000Z&quot;}```### Retail Outlet Service#### Create Fixed Payment Code```pythonfrom xendit import RetailOutletretail_outlet = RetailOutlet.create_fixed_payment_code(    external_id=&quot;demo_fixed_payment_code_123&quot;,    retail_outlet_name=&quot;ALFAMART&quot;,    name=&quot;Rika Sutanto&quot;,    expected_amount=10000,)print(retail_outlet)```Will return```{    &quot;owner_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;demo_fixed_payment_code_123&quot;,    &quot;retail_outlet_name&quot;: &quot;ALFAMART&quot;,    &quot;prefix&quot;: &quot;TEST&quot;,    &quot;name&quot;: &quot;Rika Sutanto&quot;,    &quot;payment_code&quot;: &quot;TEST56147&quot;,    &quot;expected_amount&quot;: 10000,    &quot;is_single_use&quot;: False,    &quot;expiration_date&quot;: &quot;2051-06-23T17:00:00.000Z&quot;,    &quot;id&quot;: &quot;5ef2f0f8e7f5c14077275493&quot;,}```#### Update Fixed Payment Code```pythonfrom xendit import RetailOutletretail_outlet = RetailOutlet.update_fixed_payment_code(    fixed_payment_code_id=&quot;5ef2f0f8e7f5c14077275493&quot;,    name=&quot;Joe Contini&quot;,)print(retail_outlet)```Will return```{    &quot;owner_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;demo_fixed_payment_code_123&quot;,    &quot;retail_outlet_name&quot;: &quot;ALFAMART&quot;,    &quot;prefix&quot;: &quot;TEST&quot;,    &quot;name&quot;: &quot;Joe Contini&quot;,    &quot;payment_code&quot;: &quot;TEST56147&quot;,    &quot;expected_amount&quot;: 10000,    &quot;is_single_use&quot;: False,    &quot;expiration_date&quot;: &quot;2051-06-23T17:00:00.000Z&quot;,    &quot;id&quot;: &quot;5ef2f0f8e7f5c14077275493&quot;,}```#### Get Fixed Payment Code```pythonfrom xendit import RetailOutletretail_outlet = RetailOutlet.get_fixed_payment_code(    fixed_payment_code_id=&quot;5ef2f0f8e7f5c14077275493&quot;,)print(retail_outlet)```Will return```{    &quot;owner_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;demo_fixed_payment_code_123&quot;,    &quot;retail_outlet_name&quot;: &quot;ALFAMART&quot;,    &quot;prefix&quot;: &quot;TEST&quot;,    &quot;name&quot;: &quot;Rika Sutanto&quot;,    &quot;payment_code&quot;: &quot;TEST56147&quot;,    &quot;expected_amount&quot;: 10000,    &quot;is_single_use&quot;: False,    &quot;expiration_date&quot;: &quot;2051-06-23T17:00:00.000Z&quot;,    &quot;id&quot;: &quot;5ef2f0f8e7f5c14077275493&quot;,}```### Invoice Service#### Create Invoice```pythonfrom xendit import Invoiceinvoice = Invoice.create(    external_id=&quot;invoice-1593684000&quot;,    amount=20000,    payer_email=&quot;customer@domain.com&quot;,    description=&quot;Invoice Demo #123&quot;,)print(invoice)```Will return```{    &quot;id&quot;: &quot;5efdb0210425db620ec35fb3&quot;,    &quot;external_id&quot;: &quot;invoice-1593684000&quot;,    &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;merchant_name&quot;: &quot;Xendit&amp;amp;#x27;s Intern&quot;,    &quot;merchant_profile_picture_url&quot;: &quot;https://xnd-companies.s3.amazonaws.com/prod/1591169469152_279.png&quot;,    &quot;amount&quot;: 20000,    &quot;payer_email&quot;: &quot;customer@domain.com&quot;,    &quot;description&quot;: &quot;Invoice Demo #123&quot;,    &quot;expiry_date&quot;: &quot;2020-07-03T10:00:01.148Z&quot;,    &quot;invoice_url&quot;: &quot;https://invoice-staging.xendit.co/web/invoices/5efdb0210425db620ec35fb3&quot;,    &quot;available_banks&quot;: [        {            &quot;bank_code&quot;: &quot;MANDIRI&quot;,            &quot;collection_type&quot;: &quot;POOL&quot;,            &quot;bank_account_number&quot;: &quot;8860846854335&quot;,            &quot;transfer_amount&quot;: 20000,            &quot;bank_branch&quot;: &quot;Virtual Account&quot;,            &quot;account_holder_name&quot;: &quot;XENDIT&amp;AMP;#X27;S INTERN&quot;,            &quot;identity_amount&quot;: 0        },        {            &quot;bank_code&quot;: &quot;BRI&quot;,            &quot;collection_type&quot;: &quot;POOL&quot;,            &quot;bank_account_number&quot;: &quot;2621554807492&quot;,            &quot;transfer_amount&quot;: 20000,            &quot;bank_branch&quot;: &quot;Virtual Account&quot;,            &quot;account_holder_name&quot;: &quot;XENDIT&amp;AMP;#X27;S INTERN&quot;,            &quot;identity_amount&quot;: 0        },        {            &quot;bank_code&quot;: &quot;BNI&quot;,            &quot;collection_type&quot;: &quot;POOL&quot;,            &quot;bank_account_number&quot;: &quot;880854597383&quot;,            &quot;transfer_amount&quot;: 20000,            &quot;bank_branch&quot;: &quot;Virtual Account&quot;,            &quot;account_holder_name&quot;: &quot;XENDIT&amp;AMP;#X27;S INTERN&quot;,            &quot;identity_amount&quot;: 0        },        {            &quot;bank_code&quot;: &quot;PERMATA&quot;,            &quot;collection_type&quot;: &quot;POOL&quot;,            &quot;bank_account_number&quot;: &quot;821456659745&quot;,            &quot;transfer_amount&quot;: 20000,            &quot;bank_branch&quot;: &quot;Virtual Account&quot;,            &quot;account_holder_name&quot;: &quot;XENDIT&amp;AMP;#X27;S INTERN&quot;,            &quot;identity_amount&quot;: 0        },        {            &quot;bank_code&quot;: &quot;BCA&quot;,            &quot;collection_type&quot;: &quot;POOL&quot;,            &quot;bank_account_number&quot;: &quot;1076619844859&quot;,            &quot;transfer_amount&quot;: 20000,            &quot;bank_branch&quot;: &quot;Virtual Account&quot;,            &quot;account_holder_name&quot;: &quot;XENDIT&amp;AMP;#X27;S INTERN&quot;,            &quot;identity_amount&quot;: 0        }    ],    &quot;available_retail_outlets&quot;: [        {            &quot;retail_outlet_name&quot;: &quot;ALFAMART&quot;,            &quot;payment_code&quot;: &quot;TEST34956&quot;,            &quot;transfer_amount&quot;: 20000        }    ],    &quot;available_ewallets&quot;: [],    &quot;should_exclude_credit_card&quot;: false,    &quot;should_send_email&quot;: false,    &quot;created&quot;: &quot;2020-07-02T10:00:01.285Z&quot;,    &quot;updated&quot;: &quot;2020-07-02T10:00:01.285Z&quot;,    &quot;currency&quot;: &quot;IDR&quot;}```#### Get Invoice```pythonfrom xendit import Invoiceinvoice = Invoice.get(    invoice_id=&quot;5efda8a20425db620ec35f43&quot;,)print(invoice)```Will return```{    &quot;id&quot;: &quot;5efda8a20425db620ec35f43&quot;,    &quot;external_id&quot;: &quot;invoice-1593682080&quot;,    &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;status&quot;: &quot;EXPIRED&quot;,    &quot;merchant_name&quot;: &quot;Xendit&amp;amp;#x27;s Intern&quot;,    &quot;merchant_profile_picture_url&quot;: &quot;https://xnd-companies.s3.amazonaws.com/prod/1591169469152_279.png&quot;,    &quot;amount&quot;: 20000,    &quot;payer_email&quot;: &quot;customer@domain.com&quot;,    &quot;description&quot;: &quot;Invoice Demo #123&quot;,    &quot;expiry_date&quot;: &quot;2020-07-02T09:55:47.794Z&quot;,    &quot;invoice_url&quot;: &quot;https://invoice-staging.xendit.co/web/invoices/5efda8a20425db620ec35f43&quot;,    &quot;available_banks&quot;: [        {            &quot;bank_code&quot;: &quot;MANDIRI&quot;,            &quot;collection_type&quot;: &quot;POOL&quot;,            &quot;bank_account_number&quot;: &quot;8860846853111&quot;,            &quot;transfer_amount&quot;: 20000,            &quot;bank_branch&quot;: &quot;Virtual Account&quot;,            &quot;account_holder_name&quot;: &quot;XENDIT&amp;AMP;#X27;S INTERN&quot;,            &quot;identity_amount&quot;: 0        },        {            &quot;bank_code&quot;: &quot;BRI&quot;,            &quot;collection_type&quot;: &quot;POOL&quot;,            &quot;bank_account_number&quot;: &quot;2621554806292&quot;,            &quot;transfer_amount&quot;: 20000,            &quot;bank_branch&quot;: &quot;Virtual Account&quot;,            &quot;account_holder_name&quot;: &quot;XENDIT&amp;AMP;#X27;S INTERN&quot;,            &quot;identity_amount&quot;: 0        }    ],    &quot;available_retail_outlets&quot;: [        {            &quot;retail_outlet_name&quot;: &quot;ALFAMART&quot;,            &quot;payment_code&quot;: &quot;TEST34950&quot;,            &quot;transfer_amount&quot;: 20000        }    ],    &quot;available_ewallets&quot;: [],    &quot;should_exclude_credit_card&quot;: false,    &quot;should_send_email&quot;: false,    &quot;created&quot;: &quot;2020-07-02T09:28:02.191Z&quot;,    &quot;updated&quot;: &quot;2020-07-02T09:55:47.794Z&quot;,    &quot;currency&quot;: &quot;IDR&quot;}```#### Expire Invoice```pythonfrom xendit import Invoiceinvoice = Invoice.expire(    invoice_id=&quot;5efda8a20425db620ec35f43&quot;,)print(invoice)```Will return```{    &quot;id&quot;: &quot;5efda8a20425db620ec35f43&quot;,    &quot;external_id&quot;: &quot;invoice-1593682080&quot;,    &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;status&quot;: &quot;EXPIRED&quot;,    &quot;merchant_name&quot;: &quot;Xendit&amp;amp;#x27;s Intern&quot;,    &quot;merchant_profile_picture_url&quot;: &quot;https://xnd-companies.s3.amazonaws.com/prod/1591169469152_279.png&quot;,    &quot;amount&quot;: 20000,    &quot;payer_email&quot;: &quot;customer@domain.com&quot;,    &quot;description&quot;: &quot;Invoice Demo #123&quot;,    &quot;expiry_date&quot;: &quot;2020-07-02T09:55:47.794Z&quot;,    &quot;invoice_url&quot;: &quot;https://invoice-staging.xendit.co/web/invoices/5efda8a20425db620ec35f43&quot;,    &quot;available_banks&quot;: [        {            &quot;bank_code&quot;: &quot;MANDIRI&quot;,            &quot;collection_type&quot;: &quot;POOL&quot;,            &quot;bank_account_number&quot;: &quot;8860846853111&quot;,            &quot;transfer_amount&quot;: 20000,            &quot;bank_branch&quot;: &quot;Virtual Account&quot;,            &quot;account_holder_name&quot;: &quot;XENDIT&amp;AMP;#X27;S INTERN&quot;,            &quot;identity_amount&quot;: 0        },        {            &quot;bank_code&quot;: &quot;BRI&quot;,            &quot;collection_type&quot;: &quot;POOL&quot;,            &quot;bank_account_number&quot;: &quot;2621554806292&quot;,            &quot;transfer_amount&quot;: 20000,            &quot;bank_branch&quot;: &quot;Virtual Account&quot;,            &quot;account_holder_name&quot;: &quot;XENDIT&amp;AMP;#X27;S INTERN&quot;,            &quot;identity_amount&quot;: 0        }    &quot;available_retail_outlets&quot;: [        {            &quot;retail_outlet_name&quot;: &quot;ALFAMART&quot;,            &quot;payment_code&quot;: &quot;TEST34950&quot;,            &quot;transfer_amount&quot;: 20000        }    ],    &quot;available_ewallets&quot;: [],    &quot;should_exclude_credit_card&quot;: false,    &quot;should_send_email&quot;: false,    &quot;created&quot;: &quot;2020-07-02T09:28:02.191Z&quot;,    &quot;updated&quot;: &quot;2020-07-02T09:55:47.794Z&quot;,    &quot;currency&quot;: &quot;IDR&quot;}```#### List All Invoice```pythonfrom xendit import Invoiceinvoices = Invoice.list_all(    limit=3,)print(invoices)```Will return```[    ...    {        &quot;id&quot;: &quot;5efda8a20425db620ec35f43&quot;,        &quot;external_id&quot;: &quot;invoice-1593682080&quot;,        &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,        &quot;status&quot;: &quot;EXPIRED&quot;,        &quot;merchant_name&quot;: &quot;Xendit&amp;amp;#x27;s Intern&quot;,        &quot;merchant_profile_picture_url&quot;: &quot;https://xnd-companies.s3.amazonaws.com/prod/1591169469152_279.png&quot;,        &quot;amount&quot;: 20000,        &quot;payer_email&quot;: &quot;customer@domain.com&quot;,        &quot;description&quot;: &quot;Invoice Demo #123&quot;,        &quot;expiry_date&quot;: &quot;2020-07-02T09:55:47.794Z&quot;,        &quot;invoice_url&quot;: &quot;https://invoice-staging.xendit.co/web/invoices/5efda8a20425db620ec35f43&quot;,        &quot;available_banks&quot;: [            {                &quot;bank_code&quot;: &quot;MANDIRI&quot;,                &quot;collection_type&quot;: &quot;POOL&quot;,                &quot;bank_account_number&quot;: &quot;8860846853111&quot;,                &quot;transfer_amount&quot;: 20000,                &quot;bank_branch&quot;: &quot;Virtual Account&quot;,                &quot;account_holder_name&quot;: &quot;XENDIT&amp;AMP;#X27;S INTERN&quot;,                &quot;identity_amount&quot;: 0            },            {                &quot;bank_code&quot;: &quot;BRI&quot;,                &quot;collection_type&quot;: &quot;POOL&quot;,                &quot;bank_account_number&quot;: &quot;2621554806292&quot;,                &quot;transfer_amount&quot;: 20000,                &quot;bank_branch&quot;: &quot;Virtual Account&quot;,                &quot;account_holder_name&quot;: &quot;XENDIT&amp;AMP;#X27;S INTERN&quot;,                &quot;identity_amount&quot;: 0            }        &quot;available_retail_outlets&quot;: [            {                &quot;retail_outlet_name&quot;: &quot;ALFAMART&quot;,                &quot;payment_code&quot;: &quot;TEST34950&quot;,                &quot;transfer_amount&quot;: 20000            }        ],        &quot;available_ewallets&quot;: [],        &quot;should_exclude_credit_card&quot;: false,        &quot;should_send_email&quot;: false,        &quot;created&quot;: &quot;2020-07-02T09:28:02.191Z&quot;,        &quot;updated&quot;: &quot;2020-07-02T09:55:47.794Z&quot;,        &quot;currency&quot;: &quot;IDR&quot;    }    ...]```### Recurring Payment Service#### Create Recurring Payment```pythonfrom xendit import RecurringPaymentrecurring_payment = RecurringPayment.create(    external_id=&quot;recurring_12345&quot;,    payer_email=&quot;test@x.co&quot;,    description=&quot;Test Curring Payment&quot;,    amount=100000,    interval=&quot;MONTH&quot;,    interval_count=1,)print(recurring_payment)```Will return```{    &quot;status&quot;: &quot;ACTIVE&quot;,    &quot;should_send_email&quot;: false,    &quot;missed_payment_action&quot;: &quot;IGNORE&quot;,    &quot;recurrence_progress&quot;: 1,    &quot;recharge&quot;: true,    &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;recurring_12345&quot;,    &quot;payer_email&quot;: &quot;test@x.co&quot;,    &quot;description&quot;: &quot;Test Curring Payment&quot;,    &quot;amount&quot;: 100000,    &quot;interval&quot;: &quot;MONTH&quot;,    &quot;interval_count&quot;: 1,    &quot;start_date&quot;: &quot;2020-07-08T08:22:55.815Z&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;created&quot;: &quot;2020-07-08T08:22:55.817Z&quot;,    &quot;updated&quot;: &quot;2020-07-08T08:22:55.994Z&quot;,    &quot;id&quot;: &quot;5f05825ff9f52d3ed204c687&quot;,    &quot;last_created_invoice_url&quot;: &quot;https://invoice-staging.xendit.co/web/invoices/5f05825ff9f52d3ed204c688&quot;}```#### Get Recurring Payment```pythonfrom xendit import RecurringPaymentrecurring_payment = RecurringPayment.get(    id=&quot;5f05825ff9f52d3ed204c687&quot;,)print(recurring_payment)```Will return```{    &quot;status&quot;: &quot;ACTIVE&quot;,    &quot;should_send_email&quot;: false,    &quot;missed_payment_action&quot;: &quot;IGNORE&quot;,    &quot;recurrence_progress&quot;: 1,    &quot;recharge&quot;: true,    &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;recurring_12345&quot;,    &quot;payer_email&quot;: &quot;test@x.co&quot;,    &quot;description&quot;: &quot;Test Curring Payment&quot;,    &quot;amount&quot;: 100000,    &quot;interval&quot;: &quot;MONTH&quot;,    &quot;interval_count&quot;: 1,    &quot;start_date&quot;: &quot;2020-07-08T08:22:55.815Z&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;created&quot;: &quot;2020-07-08T08:22:55.817Z&quot;,    &quot;updated&quot;: &quot;2020-07-08T08:22:55.994Z&quot;,    &quot;id&quot;: &quot;5f05825ff9f52d3ed204c687&quot;,    &quot;last_created_invoice_url&quot;: &quot;https://invoice-staging.xendit.co/web/invoices/5f05825ff9f52d3ed204c688&quot;}```#### Edit Recurring Payment```pythonfrom xendit import RecurringPaymentrecurring_payment = RecurringPayment.edit(    id=&quot;5f05825ff9f52d3ed204c687&quot;,    interval_count=2,)print(recurring_payment)```Will return```{    &quot;status&quot;: &quot;ACTIVE&quot;,    &quot;should_send_email&quot;: false,    &quot;missed_payment_action&quot;: &quot;IGNORE&quot;,    &quot;recurrence_progress&quot;: 1,    &quot;recharge&quot;: true,    &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;recurring_12345&quot;,    &quot;payer_email&quot;: &quot;test@x.co&quot;,    &quot;description&quot;: &quot;Test Curring Payment&quot;,    &quot;amount&quot;: 100000,    &quot;interval&quot;: &quot;MONTH&quot;,    &quot;interval_count&quot;: 2,    &quot;start_date&quot;: &quot;2020-07-08T08:22:55.815Z&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;created&quot;: &quot;2020-07-08T08:22:55.817Z&quot;,    &quot;updated&quot;: &quot;2020-07-08T08:24:58.295Z&quot;,    &quot;id&quot;: &quot;5f05825ff9f52d3ed204c687&quot;}```#### Stop Recurring Payment```pythonfrom xendit import RecurringPaymentrecurring_payment = RecurringPayment.stop(    id=&quot;5f05825ff9f52d3ed204c687&quot;,)print(recurring_payment)```Will return```{    &quot;status&quot;: &quot;STOPPED&quot;,    &quot;should_send_email&quot;: false,    &quot;missed_payment_action&quot;: &quot;IGNORE&quot;,    &quot;recurrence_progress&quot;: 1,    &quot;recharge&quot;: true,    &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;recurring_12345&quot;,    &quot;payer_email&quot;: &quot;test@x.co&quot;,    &quot;description&quot;: &quot;Test Curring Payment&quot;,    &quot;amount&quot;: 100000,    &quot;interval&quot;: &quot;MONTH&quot;,    &quot;interval_count&quot;: 2,    &quot;start_date&quot;: &quot;2020-07-08T08:22:55.815Z&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;created&quot;: &quot;2020-07-08T08:22:55.817Z&quot;,    &quot;updated&quot;: &quot;2020-07-08T08:26:32.464Z&quot;,    &quot;id&quot;: &quot;5f05825ff9f52d3ed204c687&quot;}```#### Pause Recurring Payment```pythonfrom xendit import RecurringPaymentrecurring_payment = RecurringPayment.pause(    id=&quot;5f05825ff9f52d3ed204c687&quot;,)print(recurring_payment)```Will return```{    &quot;status&quot;: &quot;PAUSED&quot;,    &quot;should_send_email&quot;: false,    &quot;missed_payment_action&quot;: &quot;IGNORE&quot;,    &quot;recurrence_progress&quot;: 1,    &quot;recharge&quot;: true,    &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;recurring_12345&quot;,    &quot;payer_email&quot;: &quot;test@x.co&quot;,    &quot;description&quot;: &quot;Test Curring Payment&quot;,    &quot;amount&quot;: 100000,    &quot;interval&quot;: &quot;MONTH&quot;,    &quot;interval_count&quot;: 2,    &quot;start_date&quot;: &quot;2020-07-08T08:22:55.815Z&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;created&quot;: &quot;2020-07-08T08:22:55.817Z&quot;,    &quot;updated&quot;: &quot;2020-07-08T08:25:44.580Z&quot;,    &quot;id&quot;: &quot;5f05825ff9f52d3ed204c687&quot;}```#### Resume Recurring Payment```pythonfrom xendit import RecurringPaymentrecurring_payment = RecurringPayment.resume(    id=&quot;5f05825ff9f52d3ed204c687&quot;,)print(recurring_payment)```Will return```{    &quot;status&quot;: &quot;ACTIVE&quot;,    &quot;should_send_email&quot;: false,    &quot;missed_payment_action&quot;: &quot;IGNORE&quot;,    &quot;recurrence_progress&quot;: 1,    &quot;recharge&quot;: true,    &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;recurring_12345&quot;,    &quot;payer_email&quot;: &quot;test@x.co&quot;,    &quot;description&quot;: &quot;Test Curring Payment&quot;,    &quot;amount&quot;: 100000,    &quot;interval&quot;: &quot;MONTH&quot;,    &quot;interval_count&quot;: 2,    &quot;start_date&quot;: &quot;2020-07-08T08:22:55.815Z&quot;,    &quot;currency&quot;: &quot;IDR&quot;,    &quot;created&quot;: &quot;2020-07-08T08:22:55.817Z&quot;,    &quot;updated&quot;: &quot;2020-07-08T08:26:03.082Z&quot;,    &quot;id&quot;: &quot;5f05825ff9f52d3ed204c687&quot;}```### Payout Service#### Create Payout```pythonfrom xendit import Payoutpayout = Payout.create(    external_id=&quot;payout-1595405117&quot;,    amount=50000,    email=&quot;test@email.co&quot;,)print(payout)```Will return```{    &quot;id&quot;: &quot;a6ee1bf1-ffcd-4bda-a7ab-99c1d5cd0472&quot;,    &quot;external_id&quot;: &quot;payout-1595405117&quot;,    &quot;amount&quot;: 50000,    &quot;merchant_name&quot;: &quot;Xendit&amp;amp;#x27;s Intern&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;expiration_timestamp&quot;: &quot;2020-07-23T08:05:19.815Z&quot;,    &quot;created&quot;: &quot;2020-07-22T08:05:18.421Z&quot;,    &quot;email&quot;: &quot;test@email.co&quot;,    &quot;payout_url&quot;: &quot;https://payout-staging.xendit.co/web/a6ee1bf1-ffcd-4bda-a7ab-99c1d5cd0472&quot;}```#### Get Payout```pythonfrom xendit import Payoutpayout = Payout.get(    id=&quot;a6ee1bf1-ffcd-4bda-a7ab-99c1d5cd0472&quot;,)print(payout)```Will return```{    &quot;id&quot;: &quot;a6ee1bf1-ffcd-4bda-a7ab-99c1d5cd0472&quot;,    &quot;external_id&quot;: &quot;payout-1595405117&quot;,    &quot;amount&quot;: 50000,    &quot;merchant_name&quot;: &quot;Xendit&amp;amp;#x27;s Intern&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;expiration_timestamp&quot;: &quot;2020-07-23T08:05:19.815Z&quot;,    &quot;created&quot;: &quot;2020-07-22T08:05:18.421Z&quot;,    &quot;email&quot;: &quot;test@email.co&quot;,    &quot;payout_url&quot;: &quot;https://payout-staging.xendit.co/web/a6ee1bf1-ffcd-4bda-a7ab-99c1d5cd0472&quot;}```#### Void a Payout```pythonfrom xendit import Payoutpayout = Payout.void(    id=&quot;a6ee1bf1-ffcd-4bda-a7ab-99c1d5cd0472&quot;,)print(payout)```Will return```{    &quot;id&quot;: &quot;a6ee1bf1-ffcd-4bda-a7ab-99c1d5cd0472&quot;,    &quot;external_id&quot;: &quot;payout-1595405117&quot;,    &quot;amount&quot;: 50000,    &quot;merchant_name&quot;: &quot;Xendit&amp;amp;#x27;s Intern&quot;,    &quot;status&quot;: &quot;VOIDED&quot;,    &quot;expiration_timestamp&quot;: &quot;2020-07-23T08:05:19.815Z&quot;,    &quot;created&quot;: &quot;2020-07-22T08:05:18.421Z&quot;,    &quot;email&quot;: &quot;test@email.co&quot;}```### Disbursement Service#### Create Disbursement```pythonfrom xendit import Disbursementdisbursement = Disbursement.create(    external_id=&quot;demo_1475459775872&quot;,    bank_code=&quot;BCA&quot;,    account_holder_name=&quot;Bob Jones&quot;,    account_number=&quot;1231242311&quot;,    description=&quot;Reimbursement for shoes&quot;,    amount=17000,)print(disbursement)```Will return```{    &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;demo_1475459775872&quot;,    &quot;amount&quot;: 17000,    &quot;bank_code&quot;: &quot;BCA&quot;,    &quot;account_holder_name&quot;: &quot;Bob Jones&quot;,    &quot;disbursement_description&quot;: &quot;Reimbursement for shoes&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;id&quot;: &quot;5ef1c4f40c2e150017ce3b96&quot;,}```#### Get Disbursement by ID```pythonfrom xendit import Disbursementdisbursement = Disbursement.get(    id=&quot;5ef1befeecb16100179e1d05&quot;,)print(disbursement)```Will return```{    &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,    &quot;external_id&quot;: &quot;demo_1475459775872&quot;,    &quot;amount&quot;: 17000,    &quot;bank_code&quot;: &quot;BCA&quot;,    &quot;account_holder_name&quot;: &quot;Bob Jones&quot;,    &quot;disbursement_description&quot;: &quot;Disbursement from Postman&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;id&quot;: &quot;5ef1befeecb16100179e1d05&quot;}```#### Get Disbursement by External ID```pythonfrom xendit import Disbursementdisbursement_list = Disbursement.get_by_ext_id(    external_id=&quot;demo_1475459775872&quot;,)print(disbursement_list)```Will return```[    {        &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,        &quot;external_id&quot;: &quot;demo_1475459775872&quot;,        &quot;amount&quot;: 17000,        &quot;bank_code&quot;: &quot;BCA&quot;,        &quot;account_holder_name&quot;: &quot;Bob Jones&quot;,        &quot;disbursement_description&quot;: &quot;Reimbursement for shoes&quot;,        &quot;status&quot;: &quot;PENDING&quot;,        &quot;id&quot;: &quot;5ef1c4f40c2e150017ce3b96&quot;,    },    {        &quot;user_id&quot;: &quot;5ed75086a883856178afc12e&quot;,        &quot;external_id&quot;: &quot;demo_1475459775872&quot;,        &quot;amount&quot;: 17000,        &quot;bank_code&quot;: &quot;BCA&quot;,        &quot;account_holder_name&quot;: &quot;Bob Jones&quot;,        &quot;disbursement_description&quot;: &quot;Disbursement from Postman&quot;,        &quot;status&quot;: &quot;PENDING&quot;,        &quot;id&quot;: &quot;5ef1befeecb16100179e1d05&quot;,    },    ...]```#### Get Available Banks```pythonfrom xendit import Disbursementdisbursement_banks = Disbursement.get_available_banks()print(disbursement_banks)```Will return```[    ...    {        &quot;name&quot;: &quot;Mandiri Taspen Pos (formerly Bank Sinar Harapan Bali)&quot;,        &quot;code&quot;: &quot;MANDIRI_TASPEN&quot;,        &quot;can_disburse&quot;: True,        &quot;can_name_validate&quot;: True,    },    {        &quot;name&quot;: &quot;Bank QNB Indonesia (formerly Bank QNB Kesawan)&quot;,        &quot;code&quot;: &quot;QNB_INDONESIA&quot;,        &quot;can_disburse&quot;: True,        &quot;can_name_validate&quot;: True,    }]```### Batch Disbursement Service#### Create Batch Disbursement```pythonfrom xendit import BatchDisbursementbatch_disbursement_items = []batch_disbursement_items.append(    BatchDisbursement.helper_create_batch_item(        amount=10000,        bank_code=&quot;BCA&quot;,        bank_account_name=&quot;Adyaksa W&quot;,        bank_account_number=&quot;12345678&quot;,        description=&quot;Sample Batch Disbursement&quot;,        external_id=f&quot;batch-disbursement-item-12345&quot;    ))batch_disbursement = BatchDisbursement.create(    reference=&quot;batch_disbursement-1595326225&quot;,    disbursements=batch_disbursement_items,)print(batch_disbursement)```Will return```{    &quot;status&quot;: &quot;UPLOADING&quot;,    &quot;reference&quot;: &quot;batch_disbursement-1595326225&quot;,    &quot;total_uploaded_amount&quot;: 10000,    &quot;total_uploaded_count&quot;: 1,    &quot;created&quot;: &quot;2020-07-21T10:10:35.782Z&quot;,    &quot;id&quot;: &quot;5f16bf1bfc70de0017b858bf&quot;}```#### Get Batch Disbursement Available BanksYou can use [Get Available Banks](#get-available-banks) to use this feature.### xenPlatform Service#### Create Account```pythonfrom xendit import XenPlatform, XenPlatformAccountTypexenplatform_account = XenPlatform.create_account(    account_email=&quot;test-xenplatform@pythonxendit.co&quot;,    type=XenPlatformAccountType.OWNED,    business_profile={'business_name': 'python-xendit'},)print(xenplatform_account)```Will return```{    &quot;account_email&quot;: &quot;test-xenplatform@pythonxendit.co&quot;,    &quot;user_id&quot;: &quot;5f2132ed172cd67992c402d6&quot;,    &quot;created&quot;: &quot;2020-07-29T08:27:25.346Z&quot;,    &quot;status&quot;: &quot;SUCCESSFUL&quot;,    &quot;type&quot;: &quot;OWNED&quot;}```#### Set Callback URLs```pythonfrom xendit import XenPlatform, XenPlatformURLTypexenplatform_callback_url = XenPlatform.set_callback_url(    type=XenPlatformURLType.INVOICE,    url=&quot;https://test-url-invoice.com&quot;,)print(xenplatform_callback_url)```Will return```{    &quot;status&quot;: &quot;SUCCESSFUL&quot;,    &quot;user_id&quot;: &quot;5e6b30d967627b957de8c123&quot;,    &quot;url&quot;: &quot;https://test-url-invoice.com&quot;,    &quot;environment&quot;: &quot;TEST&quot;,    &quot;callback_token&quot;: &quot;66a6680348e1c33ed2b9053a8eb9291b9e2230ff4f4d3057c9f4ac26405d2123&quot;}```#### Transfers```pythonfrom xendit import XenPlatformxenplatform_transfers = XenPlatform.transfers(    reference=&quot;transfer001&quot;,    amount=10000,    source_user_id=&quot;54afeb170a2b18519b1b8768&quot;,    destination_user_id=&quot;5cafeb170a2b1851246b8768&quot;,)print(xenplatform_transfers)```Will return```{    &quot;created&quot;: &quot;2020-01-01T08:51:44.484Z&quot;,    &quot;transfer_id&quot;: &quot;60b9d810-d9a3-456c-abbf-2786ec7a9651&quot;,    &quot;reference&quot;: &quot;transfer001&quot;,    &quot;source_user_id&quot;: &quot;54afeb170a2b18519b1b8768&quot;,    &quot;destination_user_id&quot;: &quot;5cafeb170a2b1851246b8768&quot;,    &quot;status&quot;: &quot;SUCCESSFUL&quot;,    &quot;amount&quot;: 10000}```### Payment Methods#### Create Payment Method```pythonfrom xendit import PaymentMethodfrom xendit.models.paymentmethod import ewalletpayment_method = PaymentMethod.create(    type=&quot;EWALLET&quot;,    reusability=&quot;ONE_TIME_USE&quot;,    ewallet=ewallet.EWallet.Query(        channel_code=&quot;PAYMAYA&quot;,            channel_properties=ewallet.ChannelProperties.Query(                success_return_url=&quot;https://mock-test.co&quot;,                failure_return_url=&quot;https://mock-test.co&quot;,                cancel_return_url=&quot;https://mock-test.co&quot;,            ),    ))print(payment_method)```Will return```{    &quot;id&quot;: &quot;pm-9cee5b23-5f70-49f0-8b2c-82cae820c380&quot;,    &quot;type&quot;: &quot;EWALLET&quot;,    &quot;country&quot;: &quot;PH&quot;,    &quot;business_id&quot;: &quot;5f9a3fbd571a1c4068aa40ce&quot;,    &quot;customer_id&quot;: null,    &quot;reference_id&quot;: &quot;729aaf53-69bc-4be5-b232-8ad16c092c71&quot;,    &quot;reusability&quot;: &quot;ONE_TIME_USE&quot;,    &quot;status&quot;: &quot;ACTIVE&quot;,    &quot;actions&quot;: [],    &quot;description&quot;: null,    &quot;created&quot;: &quot;2022-11-04T02:14:02.830773203Z&quot;,    &quot;updated&quot;: &quot;2022-11-04T02:14:02.830773203Z&quot;,    &quot;metadata&quot;: null,    &quot;billing_information&quot;: null,    &quot;failure_code&quot;: null,    &quot;ewallet&quot;: {        &quot;channel_code&quot;: &quot;PAYMAYA&quot;,        &quot;channel_properties&quot;: {            &quot;cancel_return_url&quot;: &quot;https://mock-test.co&quot;,            &quot;failure_return_url&quot;: &quot;https://mock-test.co&quot;,            &quot;success_return_url&quot;: &quot;https://mock-test.co&quot;        },        &quot;account&quot;: {            &quot;name&quot;: null,            &quot;account_details&quot;: null,            &quot;balance&quot;: null,            &quot;point_balance&quot;: null        }    },    &quot;direct_bank_transfer&quot;: null,    &quot;direct_debit&quot;: null,    &quot;card&quot;: null,    &quot;over_the_counter&quot;: null,    &quot;qr_code&quot;: null,    &quot;virtual_account&quot;: null}```#### Get Payment Method```pythonfrom xendit import PaymentMethodpayment_method = PaymentMethod.get(    payment_method_id=&quot;pm-9cee5b23-5f70-49f0-8b2c-82cae820c380&quot;)print(payment_method)```Will return```{    &quot;id&quot;: &quot;pm-9cee5b23-5f70-49f0-8b2c-82cae820c380&quot;,    &quot;type&quot;: &quot;EWALLET&quot;,    &quot;country&quot;: &quot;PH&quot;,    &quot;business_id&quot;: &quot;5f9a3fbd571a1c4068aa40ce&quot;,    &quot;customer_id&quot;: null,    &quot;reference_id&quot;: &quot;729aaf53-69bc-4be5-b232-8ad16c092c71&quot;,    &quot;reusability&quot;: &quot;ONE_TIME_USE&quot;,    &quot;status&quot;: &quot;ACTIVE&quot;,    &quot;actions&quot;: [],    &quot;description&quot;: null,    &quot;created&quot;: &quot;2022-11-04T02:14:02.830773203Z&quot;,    &quot;updated&quot;: &quot;2022-11-04T02:14:02.830773203Z&quot;,    &quot;metadata&quot;: null,    &quot;billing_information&quot;: null,    &quot;failure_code&quot;: null,    &quot;ewallet&quot;: {        &quot;channel_code&quot;: &quot;PAYMAYA&quot;,        &quot;channel_properties&quot;: {            &quot;cancel_return_url&quot;: &quot;https://mock-test.co&quot;,            &quot;failure_return_url&quot;: &quot;https://mock-test.co&quot;,            &quot;success_return_url&quot;: &quot;https://mock-test.co&quot;        },        &quot;account&quot;: {            &quot;name&quot;: null,            &quot;account_details&quot;: null,            &quot;balance&quot;: null,            &quot;point_balance&quot;: null        }    },    &quot;direct_bank_transfer&quot;: null,    &quot;direct_debit&quot;: null,    &quot;card&quot;: null,    &quot;over_the_counter&quot;: null,    &quot;qr_code&quot;: null,    &quot;virtual_account&quot;: null}```#### Update Payment Method```pythonfrom xendit import PaymentMethodpayment_method = PaymentMethod.update(    payment_method_id=&quot;pm-9cee5b23-5f70-49f0-8b2c-82cae820c380&quot;,    status=&quot;INACTIVE&quot;)print(payment_method)```Will return```{    &quot;id&quot;: &quot;pm-9cee5b23-5f70-49f0-8b2c-82cae820c380&quot;,    &quot;type&quot;: &quot;EWALLET&quot;,    &quot;country&quot;: &quot;PH&quot;,    &quot;business_id&quot;: &quot;5f9a3fbd571a1c4068aa40ce&quot;,    &quot;customer_id&quot;: null,    &quot;reference_id&quot;: &quot;729aaf53-69bc-4be5-b232-8ad16c092c71&quot;,    &quot;reusability&quot;: &quot;ONE_TIME_USE&quot;,    &quot;status&quot;: &quot;INACTIVE&quot;,    &quot;actions&quot;: [],    &quot;description&quot;: null,    &quot;created&quot;: &quot;2022-11-04T02:14:02.830773Z&quot;,    &quot;updated&quot;: &quot;2022-11-04T02:32:42.982673023Z&quot;,    &quot;metadata&quot;: null,    &quot;billing_information&quot;: null,    &quot;failure_code&quot;: null,    &quot;ewallet&quot;: {        &quot;channel_code&quot;: &quot;PAYMAYA&quot;,        &quot;channel_properties&quot;: {            &quot;cancel_return_url&quot;: &quot;https://mock-test.co&quot;,            &quot;failure_return_url&quot;: &quot;https://mock-test.co&quot;,            &quot;success_return_url&quot;: &quot;https://mock-test.co&quot;        },        &quot;account&quot;: {            &quot;name&quot;: null,            &quot;account_details&quot;: null,            &quot;balance&quot;: null,            &quot;point_balance&quot;: null        }    },    &quot;direct_bank_transfer&quot;: null,    &quot;direct_debit&quot;: null,    &quot;card&quot;: null,    &quot;over_the_counter&quot;: null,    &quot;qr_code&quot;: null,    &quot;virtual_account&quot;: null}```#### Expire Payment Method```pythonfrom xendit import PaymentMethodpayment_method = PaymentMethod.expire(    payment_method_id=&quot;pm-9cee5b23-5f70-49f0-8b2c-82cae820c380&quot;)print(payment_method)```Will return```{    &quot;id&quot;: &quot;pm-9cee5b23-5f70-49f0-8b2c-82cae820c380&quot;,    &quot;type&quot;: &quot;EWALLET&quot;,    &quot;country&quot;: &quot;PH&quot;,    &quot;business_id&quot;: &quot;5f9a3fbd571a1c4068aa40ce&quot;,    &quot;customer_id&quot;: null,    &quot;reference_id&quot;: &quot;729aaf53-69bc-4be5-b232-8ad16c092c71&quot;,    &quot;reusability&quot;: &quot;ONE_TIME_USE&quot;,    &quot;status&quot;: &quot;EXPIRED&quot;,    &quot;actions&quot;: [],    &quot;description&quot;: null,    &quot;created&quot;: &quot;2022-11-04T02:14:02.830773Z&quot;,    &quot;updated&quot;: &quot;2022-11-04T02:32:42.982673023Z&quot;,    &quot;metadata&quot;: null,    &quot;billing_information&quot;: null,    &quot;failure_code&quot;: null,    &quot;ewallet&quot;: {        &quot;channel_code&quot;: &quot;PAYMAYA&quot;,        &quot;channel_properties&quot;: {            &quot;cancel_return_url&quot;: &quot;https://mock-test.co&quot;,            &quot;failure_return_url&quot;: &quot;https://mock-test.co&quot;,            &quot;success_return_url&quot;: &quot;https://mock-test.co&quot;        },        &quot;account&quot;: {            &quot;name&quot;: null,            &quot;account_details&quot;: null,            &quot;balance&quot;: null,            &quot;point_balance&quot;: null        }    },    &quot;direct_bank_transfer&quot;: null,    &quot;direct_debit&quot;: null,    &quot;card&quot;: null,    &quot;over_the_counter&quot;: null,    &quot;qr_code&quot;: null,    &quot;virtual_account&quot;: null}```#### List Payment Methods```pythonfrom xendit import PaymentMethodpayment_methods = PaymentMethod.list()print(payment_methods)```Will return```{    &quot;has_more&quot;: false,    &quot;data&quot;: [{        &quot;id&quot;: &quot;pm-9cee5b23-5f70-49f0-8b2c-82cae820c380&quot;,        &quot;type&quot;: &quot;EWALLET&quot;,        &quot;country&quot;: &quot;PH&quot;,        &quot;business_id&quot;: &quot;5f9a3fbd571a1c4068aa40ce&quot;,        &quot;customer_id&quot;: null,        &quot;reference_id&quot;: &quot;729aaf53-69bc-4be5-b232-8ad16c092c71&quot;,        &quot;reusability&quot;: &quot;ONE_TIME_USE&quot;,        &quot;status&quot;: &quot;INACTIVE&quot;,        &quot;actions&quot;: [],        &quot;description&quot;: null,        &quot;created&quot;: &quot;2022-11-04T02:14:02.830773Z&quot;,        &quot;updated&quot;: &quot;2022-11-04T02:32:42.982673023Z&quot;,        &quot;metadata&quot;: null,        &quot;billing_information&quot;: null,        &quot;failure_code&quot;: null,        &quot;ewallet&quot;: {            &quot;channel_code&quot;: &quot;PAYMAYA&quot;,            &quot;channel_properties&quot;: {                &quot;cancel_return_url&quot;: &quot;https://mock-test.co&quot;,                &quot;failure_return_url&quot;: &quot;https://mock-test.co&quot;,                &quot;success_return_url&quot;: &quot;https://mock-test.co&quot;            },            &quot;account&quot;: {                &quot;name&quot;: null,                &quot;account_details&quot;: null,                &quot;balance&quot;: null,                &quot;point_balance&quot;: null            }        },        &quot;direct_bank_transfer&quot;: null,        &quot;direct_debit&quot;: null,        &quot;card&quot;: null,        &quot;over_the_counter&quot;: null,        &quot;qr_code&quot;: null,        &quot;virtual_account&quot;: null    }]}```#### Authorize a Payment MethodThis endpoint only applies to BRI Direct Debit. This is used when an additional authorization (ex. OTP Validation) is required in order to successfully activate a payment method. This is equivalent to the POST - AUTH action provided when a Payment Method has the status REQUIRES_ACTION.```pythonfrom xendit import PaymentMethodpayment_method = PaymentMethod.authorize(    payment_method_id=&quot;pm-6ff0b6f2-f5de-457f-b08f-bc98fbae485a&quot;,    auth_code=&quot;123456&quot;)print(payment_method)```Will return```{    &quot;id&quot;: &quot;pm-6ff0b6f2-f5de-457f-b08f-bc98fbae485a&quot;,    &quot;card&quot;: null,    &quot;type&quot;: &quot;DIRECT_DEBIT&quot;,    &quot;status&quot;: &quot;ACTIVE&quot;,    &quot;actions&quot;: [],    &quot;country&quot;: &quot;ID&quot;,    &quot;created&quot;: &quot;2022-08-12T13:30:26.579048Z&quot;,    &quot;ewallet&quot;: null,    &quot;qr_code&quot;: null,    &quot;updated&quot;: &quot;2022-08-12T13:30:58.908220358Z&quot;,    &quot;metadata&quot;: null,    &quot;customer_id&quot;: &quot;e2878b4c-d57e-4a2c-922d-c0313c2800a3&quot;,    &quot;description&quot;: null,    &quot;reusability&quot;: &quot;MULTIPLE_USE&quot;,    &quot;direct_debit&quot;: {        &quot;type&quot;: &quot;DEBIT_CARD&quot;,        &quot;debit_card&quot;: {            &quot;mobile_number&quot;: &quot;+62818555988&quot;,                &quot;card_last_four&quot;: &quot;8888&quot;,                &quot;card_expiry&quot;: &quot;06/24&quot;,                &quot;email&quot;: &quot;email@email.com&quot;        },        &quot;bank_account&quot;: null,        &quot;channel_code&quot;: &quot;BRI&quot;,        &quot;channel_properties&quot;: {            &quot;mobile_number&quot;: &quot;+62818555988&quot;,            &quot;card_last_four&quot;: &quot;8888&quot;,            &quot;card_expiry&quot;: &quot;06/24&quot;,            &quot;email&quot;: &quot;test.email@xendit.co&quot;        }    },    &quot;failure_code&quot;: null,    &quot;reference_id&quot;: &quot;620b9df4-fe69-4bfd-b9d4-5cba6861db8a&quot;,    &quot;virtual_account&quot;: null,    &quot;over_the_counter&quot;: null,    &quot;billing_information&quot;: null,    &quot;direct_bank_transfer&quot;: null,    &quot;business_id&quot;: &quot;5f27a14a9bf05c73dd040bc8&quot;}```#### List Payments```pythonfrom xendit import PaymentMethodpayments = PaymentMethod.list_payments(    payment_method_id=&quot;pm-62605ad7-3fbd-462c-9fd4-193e5a9e77b6&quot;)print(payments)```Will return```{    &quot;has_more&quot;: false,    &quot;data&quot;: [        {            &quot;amount&quot;: 100,            &quot;business_id&quot;: &quot;61371058772b574041bc5ee2&quot;,            &quot;channel_code&quot;: &quot;RCBC&quot;,            &quot;country&quot;: &quot;PH&quot;,            &quot;created&quot;: &quot;2022-09-22T09:05:30.484Z&quot;,            &quot;currency&quot;: &quot;PHP&quot;,            &quot;id&quot;: &quot;pymt-c025b648-bd51-4138-8cf1-94b48bc1a9f8&quot;,            &quot;instrument_id&quot;: &quot;qrpy_fe3c2e20-f885-4a68-b841-0973121e20d4&quot;,            &quot;payment_detail&quot;: {                &quot;issuer_name&quot;: &quot;&quot;,                &quot;receipt_id&quot;: &quot;&quot;            },            &quot;payment_method&quot;: {                &quot;card&quot;: {},                &quot;created&quot;: &quot;2022-09-22T09:03:39.197475Z&quot;,                &quot;direct_bank_transfer&quot;: null,                &quot;direct_debit&quot;: null,                &quot;ewallet&quot;: null,                &quot;id&quot;: &quot;pm-62605ad7-3fbd-462c-9fd4-193e5a9e77b6&quot;,                &quot;over_the_counter&quot;: null,                &quot;qr_code&quot;: {                    &quot;channel_code&quot;: &quot;RCBC&quot;,                    &quot;channel_properties&quot;: {                        &quot;qr_string&quot;: &quot;some-random-qr-string&quot;                    }                },                &quot;reference_id&quot;: &quot;a4486137-7624-4b34-b879-16cbbfc1a032&quot;,                &quot;reusability&quot;: &quot;ONE_TIME_USE&quot;,                &quot;status&quot;: &quot;EXPIRED&quot;,                &quot;type&quot;: &quot;QR_CODE&quot;,                &quot;updated&quot;: &quot;2022-09-22T09:05:30.409211Z&quot;,                &quot;virtual_account&quot;: null            },            &quot;payment_request_id&quot;: &quot;pr-b33ecb15-c8e6-455c-9b1b-84612b6fd13b&quot;,            &quot;reference_id&quot;: &quot;a4486137-7624-4b34-b879-16cbbfc1a032&quot;,            &quot;status&quot;: &quot;SUCCEEDED&quot;,            &quot;type&quot;: &quot;QR_CODE&quot;,            &quot;updated&quot;: &quot;2022-09-22T09:05:30.484Z&quot;        }    ]}```### Payment Requests#### Create Payment Request#### With Payment Method ID```pythonfrom xendit import PaymentRequestpayment_request = PaymentRequest.create(    amount=50,    currency=&quot;PHP&quot;,    payment_method_id=&quot;pm-64eedc01-702e-439c-9a96-b3b665caeb05&quot;)print(payment_request)```Will return```{    &quot;id&quot;: &quot;ddpy-74ebdd86-e052-42e8-8b53-d84255ab7004&quot;,    &quot;reference_id&quot;: &quot;7200b7ce-4634-489e-976b-269d641e4343&quot;,    &quot;business_id&quot;: &quot;5f9a3fbd571a1c4068aa40ce&quot;,    &quot;currency&quot;: &quot;PHP&quot;,    &quot;amount&quot;: 50,    &quot;country&quot;: &quot;PH&quot;,    &quot;payment_method&quot;: {        &quot;id&quot;: &quot;pm-64eedc01-702e-439c-9a96-b3b665caeb05&quot;,        &quot;type&quot;: &quot;DIRECT_DEBIT&quot;,        &quot;reference_id&quot;: &quot;9c511ec0-a9b7-4eee-9cb5-b91085edbdd3&quot;,        &quot;description&quot;: null,        &quot;created&quot;: &quot;2022-11-04T04:43:04.259281Z&quot;,        &quot;updated&quot;: &quot;2022-11-04T04:43:29.063919Z&quot;,        &quot;card&quot;: null,        &quot;ewallet&quot;: null,        &quot;direct_debit&quot;: {            &quot;channel_code&quot;: &quot;BPI&quot;,            &quot;channel_properties&quot;: {                &quot;success_return_url&quot;: &quot;https://mock-test.co&quot;,                &quot;failure_return_url&quot;: &quot;https://mock-test.co&quot;            },            &quot;type&quot;: &quot;BANK_ACCOUNT&quot;,            &quot;bank_account&quot;: {                &quot;masked_bank_account_number&quot;: &quot;XXX1631&quot;,                &quot;bank_account_hash&quot;: &quot;8f06b7dc684aa57a283adf49b2f67bdb11750ac04300f3996d97c7412ac5ca48&quot;            },            &quot;debit_card&quot;: null        },        &quot;direct_bank_transfer&quot;: null,        &quot;over_the_counter&quot;: null,        &quot;virtual_account&quot;: null,        &quot;qr_code&quot;: null,        &quot;metadata&quot;: null,        &quot;reusability&quot;: &quot;MULTIPLE_USE&quot;,        &quot;status&quot;: &quot;ACTIVE&quot;    },    &quot;description&quot;: null,    &quot;metadata&quot;: null,    &quot;customer_id&quot;: &quot;fa8f36a4-60e4-4a49-a040-adf953539f71&quot;,    &quot;created&quot;: &quot;2022-11-04T04:44:39.220981439Z&quot;,    &quot;updated&quot;: &quot;2022-11-04T04:44:39.220981439Z&quot;,    &quot;status&quot;: &quot;REQUIRES_ACTION&quot;,    &quot;actions&quot;: [        {            &quot;action&quot;: &quot;AUTH&quot;,            &quot;url&quot;: &quot;https://direct-debit-web-dev.xendit.co/direct_debits/ddpy-74ebdd86-e052-42e8-8b53-d84255ab7004/checkout?failure_redirect_url=https%3A%2F%2Fredirect.me%2Fbadstuff&amp;payment_redirect_delay=10&quot;,            &quot;url_type&quot;: &quot;WEB&quot;,            &quot;method&quot;: &quot;GET&quot;,            &quot;qr_code&quot;: null        },        {            &quot;action&quot;: &quot;AUTH&quot;,            &quot;url&quot;: &quot;https://api.xendit.co/payment_requests/ddpy-74ebdd86-e052-42e8-8b53-d84255ab7004/auth&quot;,            &quot;url_type&quot;: &quot;API&quot;,            &quot;method&quot;: &quot;POST&quot;,            &quot;qr_code&quot;: null        }    ],    &quot;failure_code&quot;: null,    &quot;capture_method&quot;: &quot;AUTOMATIC&quot;,    &quot;initiator&quot;: null,    &quot;card_verification_results&quot;: null,    &quot;channel_properties&quot;: null,    &quot;shipping_information&quot;: null,    &quot;items&quot;: null}```##### With Payment Method Object```pythonfrom xendit import PaymentRequestfrom xendit.models.paymentmethod import direct_debit, PaymentMethodpayment_request = PaymentRequest.create(    amount=50,    currency=&quot;PHP&quot;,    customer_id=&quot;fa8f36a4-60e4-4a49-a040-adf953539f71&quot;,    payment_method=PaymentMethod.Query(        type=&quot;DIRECT_DEBIT&quot;,        reusability=&quot;MULTIPLE_USE&quot;,        direct_debit=direct_debit.DirectDebit.Query(            channel_code=&quot;BPI&quot;,            channel_properties=direct_debit.ChannelProperties.Query(                success_return_url=&quot;https://mock-test.co&quot;,                failure_return_url=&quot;https://mock-test.co&quot;            )        )    ))print(payment_request)```Will return```{    &quot;id&quot;: &quot;pr-db958a53-cf92-4c1f-99d2-dcf2401211d2&quot;,    &quot;reference_id&quot;: &quot;e192b1c2-8814-4e71-a203-ecd43b7af808&quot;,    &quot;business_id&quot;: &quot;5f9a3fbd571a1c4068aa40ce&quot;,    &quot;currency&quot;: &quot;PHP&quot;,    &quot;amount&quot;: 50,    &quot;country&quot;: &quot;PH&quot;,    &quot;payment_method&quot;: {        &quot;id&quot;: &quot;pm-b8c93e5c-0bc9-44ef-869a-ca5eb73f1ad0&quot;,        &quot;type&quot;: &quot;DIRECT_DEBIT&quot;,        &quot;reference_id&quot;: &quot;9b1841a2-e4a4-4ab7-ab7a-ca7d78b4ce07&quot;,        &quot;description&quot;: null,        &quot;created&quot;: &quot;2022-11-04T04:51:28.284694454Z&quot;,        &quot;updated&quot;: &quot;2022-11-04T04:51:28.284694454Z&quot;,        &quot;card&quot;: null,        &quot;ewallet&quot;: null,        &quot;direct_debit&quot;: {            &quot;channel_code&quot;: &quot;BPI&quot;,            &quot;channel_properties&quot;: {                &quot;success_return_url&quot;: &quot;https://mock-test.co&quot;,                &quot;failure_return_url&quot;: &quot;https://mock-test.co&quot;            },            &quot;type&quot;: &quot;BANK_ACCOUNT&quot;,            &quot;bank_account&quot;: {                &quot;masked_bank_account_number&quot;: null,                &quot;bank_account_hash&quot;: null            },            &quot;debit_card&quot;: null        },        &quot;direct_bank_transfer&quot;: null,        &quot;over_the_counter&quot;: null,        &quot;virtual_account&quot;: null,        &quot;qr_code&quot;: null,        &quot;metadata&quot;: null,        &quot;reusability&quot;: &quot;MULTIPLE_USE&quot;,        &quot;status&quot;: &quot;PENDING&quot;    },    &quot;description&quot;: null,    &quot;metadata&quot;: null,    &quot;customer_id&quot;: &quot;fa8f36a4-60e4-4a49-a040-adf953539f71&quot;,    &quot;created&quot;: &quot;2022-11-04T04:51:28.157374805Z&quot;,    &quot;updated&quot;: &quot;2022-11-04T04:51:28.157374805Z&quot;,    &quot;status&quot;: &quot;REQUIRES_ACTION&quot;,    &quot;actions&quot;: [        {            &quot;action&quot;: &quot;AUTH&quot;,            &quot;url&quot;: &quot;https://link-web-staging.xendit.co/oauth/lat-c752e0e0-c4eb-4e4f-9fc8-fbfb12a8d095/confirm&quot;,            &quot;url_type&quot;: &quot;WEB&quot;,            &quot;method&quot;: &quot;GET&quot;,            &quot;qr_code&quot;: null        }    ],    &quot;failure_code&quot;: null,    &quot;capture_method&quot;: &quot;AUTOMATIC&quot;,    &quot;initiator&quot;: null,    &quot;card_verification_results&quot;: null,    &quot;channel_properties&quot;: null,    &quot;shipping_information&quot;: null,    &quot;items&quot;: null}```#### Get Payment Request```pythonfrom xendit import PaymentRequestpayment_request = PaymentRequest.get(    payment_request_id=&quot;pr-db958a53-cf92-4c1f-99d2-dcf2401211d2&quot;)print(payment_request)```Will return```{    &quot;id&quot;: &quot;pr-db958a53-cf92-4c1f-99d2-dcf2401211d2&quot;,    &quot;reference_id&quot;: &quot;e192b1c2-8814-4e71-a203-ecd43b7af808&quot;,    &quot;business_id&quot;: &quot;5f9a3fbd571a1c4068aa40ce&quot;,    &quot;currency&quot;: &quot;PHP&quot;,    &quot;amount&quot;: 50,    &quot;country&quot;: &quot;PH&quot;,    &quot;payment_method&quot;: {        &quot;id&quot;: &quot;pm-b8c93e5c-0bc9-44ef-869a-ca5eb73f1ad0&quot;,        &quot;type&quot;: &quot;DIRECT_DEBIT&quot;,        &quot;reference_id&quot;: &quot;9b1841a2-e4a4-4ab7-ab7a-ca7d78b4ce07&quot;,        &quot;description&quot;: null,        &quot;created&quot;: &quot;2022-11-04T04:51:28.284694454Z&quot;,        &quot;updated&quot;: &quot;2022-11-04T04:51:28.284694454Z&quot;,        &quot;card&quot;: null,        &quot;ewallet&quot;: null,        &quot;direct_debit&quot;: {            &quot;channel_code&quot;: &quot;BPI&quot;,            &quot;channel_properties&quot;: {                &quot;success_return_url&quot;: &quot;https://mock-test.co&quot;,                &quot;failure_return_url&quot;: &quot;https://mock-test.co&quot;            },            &quot;type&quot;: &quot;BANK_ACCOUNT&quot;,            &quot;bank_account&quot;: {                &quot;masked_bank_account_number&quot;: null,                &quot;bank_account_hash&quot;: null            },            &quot;debit_card&quot;: null        },        &quot;direct_bank_transfer&quot;: null,        &quot;over_the_counter&quot;: null,        &quot;virtual_account&quot;: null,        &quot;qr_code&quot;: null,        &quot;metadata&quot;: null,        &quot;reusability&quot;: &quot;MULTIPLE_USE&quot;,        &quot;status&quot;: &quot;PENDING&quot;    },    &quot;description&quot;: null,    &quot;metadata&quot;: null,    &quot;customer_id&quot;: &quot;fa8f36a4-60e4-4a49-a040-adf953539f71&quot;,    &quot;created&quot;: &quot;2022-11-04T04:51:28.157374805Z&quot;,    &quot;updated&quot;: &quot;2022-11-04T04:51:28.157374805Z&quot;,    &quot;status&quot;: &quot;REQUIRES_ACTION&quot;,    &quot;actions&quot;: [        {            &quot;action&quot;: &quot;AUTH&quot;,            &quot;url&quot;: &quot;https://link-web-staging.xendit.co/oauth/lat-c752e0e0-c4eb-4e4f-9fc8-fbfb12a8d095/confirm&quot;,            &quot;url_type&quot;: &quot;WEB&quot;,            &quot;method&quot;: &quot;GET&quot;,            &quot;qr_code&quot;: null        }    ],    &quot;failure_code&quot;: null,    &quot;capture_method&quot;: &quot;AUTOMATIC&quot;,    &quot;initiator&quot;: null,    &quot;card_verification_results&quot;: null,    &quot;channel_properties&quot;: null,    &quot;shipping_information&quot;: null,    &quot;items&quot;: null}```#### Confirm Payment Request```pythonfrom xendit import PaymentRequestpayment_request = PaymentRequest.confirm(    payment_request_id=&quot;pr-db958a53-cf92-4c1f-99d2-dcf2401211d2&quot;,    auth_code=&quot;123456&quot;)print(payment_request)```Will return```{    &quot;id&quot;: &quot;pr-db958a53-cf92-4c1f-99d2-dcf2401211d2&quot;,    &quot;reference_id&quot;: &quot;e192b1c2-8814-4e71-a203-ecd43b7af808&quot;,    &quot;business_id&quot;: &quot;5f9a3fbd571a1c4068aa40ce&quot;,    &quot;currency&quot;: &quot;PHP&quot;,    &quot;amount&quot;: 50,    &quot;country&quot;: &quot;PH&quot;,    &quot;payment_method&quot;: {        &quot;id&quot;: &quot;pm-b8c93e5c-0bc9-44ef-869a-ca5eb73f1ad0&quot;,        &quot;type&quot;: &quot;DIRECT_DEBIT&quot;,        &quot;reference_id&quot;: &quot;9b1841a2-e4a4-4ab7-ab7a-ca7d78b4ce07&quot;,        &quot;description&quot;: null,        &quot;created&quot;: &quot;2022-11-04T04:51:28.284694454Z&quot;,        &quot;updated&quot;: &quot;2022-11-04T04:51:28.284694454Z&quot;,        &quot;card&quot;: null,        &quot;ewallet&quot;: null,        &quot;direct_debit&quot;: {            &quot;channel_code&quot;: &quot;RCBC&quot;,            &quot;channel_properties&quot;: {                &quot;success_return_url&quot;: &quot;https://mock-test.co&quot;,                &quot;failure_return_url&quot;: &quot;https://mock-test.co&quot;            },            &quot;type&quot;: &quot;BANK_ACCOUNT&quot;,            &quot;bank_account&quot;: {                &quot;masked_bank_account_number&quot;: &quot;11111111111&quot;,                &quot;bank_account_hash&quot;: &quot;loremipman&quot;            },            &quot;debit_card&quot;: null        },        &quot;direct_bank_transfer&quot;: null,        &quot;over_the_counter&quot;: null,        &quot;virtual_account&quot;: null,        &quot;qr_code&quot;: null,        &quot;metadata&quot;: null,        &quot;reusability&quot;: &quot;MULTIPLE_USE&quot;,        &quot;status&quot;: &quot;PENDING&quot;    },    &quot;description&quot;: null,    &quot;metadata&quot;: null,    &quot;customer_id&quot;: &quot;fa8f36a4-60e4-4a49-a040-adf953539f71&quot;,    &quot;created&quot;: &quot;2022-11-04T04:51:28.157374805Z&quot;,    &quot;updated&quot;: &quot;2022-11-04T04:51:28.157374805Z&quot;,    &quot;status&quot;: &quot;SUCCEEDED&quot;,    &quot;actions&quot;: [],    &quot;failure_code&quot;: null,    &quot;capture_method&quot;: &quot;AUTOMATIC&quot;,    &quot;initiator&quot;: null,    &quot;card_verification_results&quot;: null,    &quot;channel_properties&quot;: null,    &quot;shipping_information&quot;: null,    &quot;items&quot;: null}```#### Resend Auth for Payment Request ```pythonfrom xendit import PaymentRequestpayment_request = PaymentRequest.resend_auth(payment_request_id=&quot;ddpy-a310d9c2-ed99-4031-a3bf-fb4d8e384f45&quot;)print(payment_request)```Will return```{    &quot;id&quot;: &quot;ddpy-a310d9c2-ed99-4031-a3bf-fb4d8e384f45&quot;,    &quot;reference_id&quot;: &quot;3abc9ab4-294e-4f9d-994c-f755b5b87a2a&quot;,    &quot;business_id&quot;: &quot;5f9a3fbd571a1c4068aa40ce&quot;,    &quot;currency&quot;: &quot;PHP&quot;,    &quot;amount&quot;: 500,    &quot;country&quot;: &quot;PH&quot;,    &quot;payment_method&quot;: {        &quot;id&quot;: &quot;pm-3d15aa4f-7b08-4355-a4ab-94187151d33c&quot;,        &quot;type&quot;: &quot;DIRECT_DEBIT&quot;,        &quot;reference_id&quot;: &quot;b869964d-37b7-4fc2-9915-386c12a48791&quot;,        &quot;description&quot;: null,        &quot;created&quot;: &quot;2022-11-04T05:50:27.446274Z&quot;,        &quot;updated&quot;: &quot;2022-11-04T05:50:49.865006Z&quot;,        &quot;card&quot;: null,        &quot;ewallet&quot;: null,        &quot;direct_debit&quot;: {            &quot;channel_code&quot;: &quot;BPI&quot;,            &quot;channel_properties&quot;: {                &quot;success_return_url&quot;: &quot;https://redirect.me/goodstuff&quot;,                &quot;failure_return_url&quot;: &quot;https://redirect.me/badstuff&quot;            },            &quot;type&quot;: &quot;BANK_ACCOUNT&quot;,            &quot;bank_account&quot;: {                &quot;masked_bank_account_number&quot;: &quot;XXX1631&quot;,                &quot;bank_account_hash&quot;: &quot;8f06b7dc684aa57a283adf49b2f67bdb11750ac04300f3996d97c7412ac5ca48&quot;            },            &quot;debit_card&quot;: null        },        &quot;direct_bank_transfer&quot;: null,        &quot;over_the_counter&quot;: null,        &quot;virtual_account&quot;: null,        &quot;qr_code&quot;: null,        &quot;metadata&quot;: null,        &quot;reusability&quot;: &quot;MULTIPLE_USE&quot;,        &quot;status&quot;: &quot;ACTIVE&quot;    },    &quot;description&quot;: null,    &quot;metadata&quot;: null,    &quot;customer_id&quot;: &quot;96f2bab4-4a59-4a80-8da4-1e086c200512&quot;,    &quot;created&quot;: &quot;2022-11-04T05:54:35.703988Z&quot;,    &quot;updated&quot;: &quot;2022-11-04T05:54:35.942271Z&quot;,    &quot;status&quot;: &quot;REQUIRES_ACTION&quot;,    &quot;actions&quot;: [        {            &quot;action&quot;: &quot;AUTH&quot;,            &quot;url&quot;: &quot;https://direct-debit-web-dev.xendit.co/direct_debits/ddpy-a310d9c2-ed99-4031-a3bf-fb4d8e384f45/checkout?failure_redirect_url=https%3A%2F%2Fredirect.me%2Fbadstuff&amp;payment_redirect_delay=10&quot;,            &quot;url_type&quot;: &quot;WEB&quot;,            &quot;method&quot;: &quot;GET&quot;,            &quot;qr_code&quot;: null        },        {            &quot;action&quot;: &quot;AUTH&quot;,            &quot;url&quot;: &quot;https://api.xendit.co/payment_requests/ddpy-a310d9c2-ed99-4031-a3bf-fb4d8e384f45/auth&quot;,            &quot;url_type&quot;: &quot;API&quot;,            &quot;method&quot;: &quot;POST&quot;,            &quot;qr_code&quot;: null        }    ],    &quot;failure_code&quot;: null,    &quot;capture_method&quot;: &quot;AUTOMATIC&quot;,    &quot;initiator&quot;: null,    &quot;card_verification_results&quot;: null,    &quot;channel_properties&quot;: null,    &quot;shipping_information&quot;: null,    &quot;items&quot;: null}```#### List Payment Requests```pythonfrom xendit import PaymentRequestpayment_requests = PaymentRequest.list()print(payment_requests)```Will return```{    &quot;has_more&quot;: false,    &quot;data&quot;: [        {            &quot;id&quot;: &quot;pr-ba8a686b-57d7-4d93-aa50-2753af90e889&quot;,            &quot;reference_id&quot;: &quot;48e11a9f-025d-4c6b-bc7d-7cec7d91c3ea&quot;,            &quot;business_id&quot;: &quot;5ed75086a883856178afc12e&quot;,            &quot;currency&quot;: &quot;PHP&quot;,            &quot;amount&quot;: 1500,            &quot;country&quot;: &quot;PH&quot;,            &quot;payment_method&quot;: {                &quot;id&quot;: &quot;pm-193fff85-e457-41f8-adcd-da8b61525d2e&quot;,                &quot;type&quot;: &quot;EWALLET&quot;,                &quot;reference_id&quot;: &quot;1c376b0a-bbf0-4c7d-89e4-88d63443a955&quot;,                &quot;description&quot;: null,                &quot;created&quot;: &quot;2022-10-21T03:42:11.602144Z&quot;,                &quot;updated&quot;: &quot;2022-10-21T03:42:11.602144Z&quot;,                &quot;card&quot;: null,                &quot;ewallet&quot;: {                    &quot;channel_code&quot;: &quot;PAYMAYA&quot;,                    &quot;channel_properties&quot;: {                        &quot;cancel_return_url&quot;: &quot;https://redirect.me/nostuff&quot;,                        &quot;failure_return_url&quot;: &quot;https://redirect.me/badstuff&quot;,                        &quot;success_return_url&quot;: &quot;https://redirect.me/goodstuff&quot;                    },                    &quot;account&quot;: {                        &quot;name&quot;: null,                        &quot;account_details&quot;: null,                        &quot;balance&quot;: null,                        &quot;point_balance&quot;: null                    }                },                &quot;direct_debit&quot;: null,                &quot;direct_bank_transfer&quot;: null,                &quot;over_the_counter&quot;: null,                &quot;virtual_account&quot;: null,                &quot;qr_code&quot;: null,                &quot;metadata&quot;: null,                &quot;reusability&quot;: &quot;ONE_TIME_USE&quot;,                &quot;status&quot;: &quot;ACTIVE&quot;            },            &quot;description&quot;: null,            &quot;metadata&quot;: null,            &quot;customer_id&quot;: null,            &quot;created&quot;: &quot;2022-10-21T03:42:11.617507Z&quot;,            &quot;updated&quot;: &quot;2022-10-21T03:42:11.617507Z&quot;,            &quot;status&quot;: &quot;UNKNOWN&quot;,            &quot;actions&quot;: [],            &quot;failure_code&quot;: null,            &quot;capture_method&quot;: &quot;AUTOMATIC&quot;,            &quot;initiator&quot;: null,            &quot;card_verification_results&quot;: null,            &quot;channel_properties&quot;: null,            &quot;shipping_information&quot;: null,            &quot;items&quot;: null        }    ]}```### Refunds#### Create Refund```pythonfrom xendit import Refundrefund = Refund.create(    payment_request_id=&quot;ewc_0b98b8c6-2f5f-4355-87f1-d3afe372495b&quot;)print(refund)```Will return```{    &quot;id&quot;: &quot;rfd-107ac068-0737-4c85-8aaf-61f908e3c136&quot;,    &quot;payment_id&quot;: &quot;ewc_0b98b8c6-2f5f-4355-87f1-d3afe372495b&quot;,    &quot;invoice_id&quot;: &quot;&quot;,    &quot;amount&quot;: 1500,    &quot;payment_method_type&quot;: &quot;EWALLET&quot;,    &quot;channel_code&quot;: &quot;GRABPAY&quot;,    &quot;country&quot;: &quot;PH&quot;,    &quot;currency&quot;: &quot;PHP&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;reason&quot;: &quot;&quot;,    &quot;reference_id&quot;: &quot;&quot;,    &quot;failure_code&quot;: null,    &quot;refund_fee_amount&quot;: null,    &quot;created&quot;: &quot;2022-11-04T06:21:35.213018123Z&quot;,    &quot;updated&quot;: &quot;2022-11-04T06:21:35.213018243Z&quot;,    &quot;metadata&quot;: null,    &quot;refund_method&quot;: &quot;DIRECT&quot;,    &quot;payout_link_properties&quot;: null,    &quot;actions&quot;: null}```#### Get Refund```pythonfrom xendit import Refundrefund = Refund.get(    refund_id=&quot;rfd-107ac068-0737-4c85-8aaf-61f908e3c136&quot;)print(refund)```Will return```{    &quot;id&quot;: &quot;rfd-107ac068-0737-4c85-8aaf-61f908e3c136&quot;,    &quot;payment_id&quot;: &quot;ewc_0b98b8c6-2f5f-4355-87f1-d3afe372495b&quot;,    &quot;invoice_id&quot;: &quot;&quot;,    &quot;amount&quot;: 1500,    &quot;payment_method_type&quot;: &quot;EWALLET&quot;,    &quot;channel_code&quot;: &quot;GRABPAY&quot;,    &quot;country&quot;: &quot;PH&quot;,    &quot;currency&quot;: &quot;PHP&quot;,    &quot;status&quot;: &quot;PENDING&quot;,    &quot;reason&quot;: &quot;&quot;,    &quot;reference_id&quot;: &quot;&quot;,    &quot;failure_code&quot;: null,    &quot;refund_fee_amount&quot;: null,    &quot;created&quot;: &quot;2022-11-04T06:21:35.213018123Z&quot;,    &quot;updated&quot;: &quot;2022-11-04T06:21:35.213018243Z&quot;,    &quot;metadata&quot;: null,    &quot;refund_method&quot;: &quot;DIRECT&quot;,    &quot;payout_link_properties&quot;: null,    &quot;actions&quot;: null}```#### List Refunds```pythonfrom xendit import Refundrefunds = Refund.list()print(refunds)```Will return```{    &quot;has_more&quot;: true,    &quot;data&quot;: [{        &quot;id&quot;: &quot;rfd-107ac068-0737-4c85-8aaf-61f908e3c136&quot;,        &quot;payment_id&quot;: &quot;ewc_0b98b8c6-2f5f-4355-87f1-d3afe372495b&quot;,        &quot;invoice_id&quot;: &quot;&quot;,        &quot;amount&quot;: 1500,        &quot;payment_method_type&quot;: &quot;EWALLET&quot;,        &quot;channel_code&quot;: &quot;GRABPAY&quot;,        &quot;country&quot;: &quot;PH&quot;,        &quot;currency&quot;: &quot;PHP&quot;,        &quot;status&quot;: &quot;PENDING&quot;,        &quot;reason&quot;: &quot;&quot;,        &quot;reference_id&quot;: &quot;&quot;,        &quot;failure_code&quot;: null,        &quot;refund_fee_amount&quot;: null,        &quot;created&quot;: &quot;2022-11-04T06:21:35.213018123Z&quot;,        &quot;updated&quot;: &quot;2022-11-04T06:21:35.213018243Z&quot;,        &quot;metadata&quot;: null,        &quot;refund_method&quot;: &quot;DIRECT&quot;,        &quot;payout_link_properties&quot;: null,        &quot;actions&quot;: null    }]}```## ContributingFor any requests, bugs, or comments, please open an [issue](https://github.com/xendit/xendit-python/issues) or [submit a pull request](https://github.com/xendit/xendit-python/pulls).To start developing on this repository, you need to have Poetry installed for package dependency. After that, you can run ```poetry install``` to install the dependency. To enter the environment, run ```poetry shell```### Tests#### Running the TestMake sure the the code passes all tests.Run the test:```python -m pytest tests/```Run with coverage:```python -m pytest tests/ --cov=xendit/```</longdescription>
</pkgmetadata>