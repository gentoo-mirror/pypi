<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======================pyramid_dogpile_cache2======================.. image:: https://travis-ci.org/ZeitOnline/pyramid_dogpile_cache2.png   :target: https://travis-ci.org/ZeitOnline/pyramid_dogpile_cache2Small `dogpile.cache`_ configuration and access package. It is inspired by`pyramid_dogpile_cache`_, which we found unusable since it insists onconfiguring the cache regions in its ``get_region()`` API -- but if you want touse the ``@cache_on_arguments`` decorator, that is at **import time**, where noconfiguration exists yet. Our package wants to perform the configuration duringthe WSGI application setup instead.This package is compatible with Python version &gt;=3.6... _`dogpile.cache`: https://pypi.python.org/pypi/dogpile.cache.. _`pyramid_dogpile_cache`: https://pypi.python.org/pypi/pyramid_dogpile_cacheUsage=====The package offers only one API function; it returns a dogpile.cache``CacheRegion``::    from pyramid_dogpile_cache import get_region    region = get_region('foo')As said above, this is safe to call at import time, so you can go on like this::    @region.cache_on_arguments()    def expensive_function(one, two, three):        # compute stuffSetup / Pyramid===============Include the package, either in code::    config = Configurator(...)    config.include('pyramid_dogpile_cache2')or in the ini file::    pyramid.includes = pyramid_dogpile_cache2Setup / Paste=============For non-Pyramid WSGI applications that use a paste.ini file, you need to call::    def my_paste_app_factory(global_conf, **local_conf):        pyramid_dogpile_cache2.configure_dogpile_cache(local_conf)        return my_wsgi_callableSettings========The settings support of pyramid_dogpile_cache unfortunately is quite incomplete(e.g. it does not even convert ``expiration_time`` to ``int``). The support ofthis packages is a little better, but still very much incomplete: we supportthe in-memory and memcached backends (pylibmc to be precise), and only the samebackend and configuration for all cache regions.The following settings are supported:``dogpile_cache.regions``    A list of region names that should be configured (separated by either    spaces or commas).``dogpile_cache.backend``    The default backend for cache regions (e.g. ``'dogpile.cache.memory'``,    ``dogpile.cache.pylibmc``, etc.).``dogpile_cache.REGION.backend``   Backend for the given region.``dogpile_cache.expiration_time``    The default expiration time. Can be overridden for individual regions (in    seconds). Omit to set no expiration.``dogpile_cache.REGION.expiration_time``    The expiration time for the given cache region (in seconds).    If omitted, uses the global expiration_time setting.``dogpile_cache.arguments.*``    Defaults for backend arguments. Can be overridden for individual regions.``dogpile_cache.REGION.arguments.*``    Backend arguments for the given cache region.Backend arguments work only for strings, thus we support some custom treatment:``dogpile_cache.pylibmc_url``    A list of memcached servers, separated by ``;``.``dogpile_cache.pylibmc_behavior.*``    Set `pylibmc behaviours`_, see `coerce_memached_behaviors`_ for which    subkeys are supported... _`pylibmc behaviours`: http://sendapatch.se/projects/pylibmc/behaviors.html.. _`coerce_memached_behaviors`: https://github.com/bbangert/beaker/blob/master/beaker/util.py#L343Note: As opposed to pyramid_dogpile_cache we don't support overriding thekey_generator or key_mangler functions yet; we preconfigure them with enhancedversions of dogpile.cache that support non-ascii function arguments andgenerating cache keys for methods that include the class name.=====================================Developing pyramid_dogpile_cache2=====================================:Author:    `Zeit Online &lt;zon-backend@zeit.de&gt;`_:PyPI page:    https://pypi.python.org/pypi/pyramid_dogpile_cache2:Issues:    `report by e-mail &lt;zon-backend@zeit.de&gt;`_:Source code:    https://github.com/zeitonline/pyramid_dogpile_cache2:Current change log:    https://github.com/zeitonline/pyramid_dogpile_cache2/blob/master/CHANGES.txt=====================================Change log for pyramid_dogpile_cache2=====================================1.1.2 (2022-07-15)==================- Clear internal `_actual_backend` during configure,  to improve test isolation1.1.1 (2020-09-11)==================- Ignore empty `pylibmc_url` setting1.1.0 (2020-07-28)==================- Drop Python-2 compatibility, update to dogpile.cache&gt;=1.01.0.6 (2019-11-08)==================- Allow configuring no expiration time at all1.0.5 (2018-12-14)==================- Clarify Python-3 compatiblity (it's &gt;=3.4, not _just_ 3.4)1.0.4 (2018-11-21)==================- Support caching functions with type annotations on Python 3  (see PR #5).1.0.3 (2017-02-14)==================- Fix packaging issue (see PR #2).1.0.2 (2016-08-01)==================- Update API compatibility to dogpile.cache-0.6.0.1.0.1 (2016-01-20)==================- Actually include the class name in the cache key for methods.1.0.0 (2016-01-19)==================- Initial release.</longdescription>
</pkgmetadata>