<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># XGBoost runtime for MLServerThis package provides a MLServer runtime compatible with XGBoost.## UsageYou can install the runtime, alongside `mlserver`, as:```bashpip install mlserver mlserver-xgboost```For further information on how to use MLServer with XGBoost, you can check outthis [worked out example](../../docs/examples/xgboost/README.md).## XGBoost Artifact TypeThe XGBoost inference runtime will expect that your model is serialised via oneof the following methods:| Extension | Docs                                                                                                                 | Example                            || --------- | -------------------------------------------------------------------------------------------------------------------- | ---------------------------------- || `*.json`  | [JSON Format](https://xgboost.readthedocs.io/en/stable/tutorials/saving_model.html#introduction-to-model-io)         | `booster.save_model(&quot;model.json&quot;)` || `*.ubj`   | [Binary JSON Format](https://xgboost.readthedocs.io/en/stable/tutorials/saving_model.html#introduction-to-model-io)  | `booster.save_model(&quot;model.ubj&quot;)`  || `*.bst`   | [(Old) Binary Format](https://xgboost.readthedocs.io/en/stable/tutorials/saving_model.html#introduction-to-model-io) | `booster.save_model(&quot;model.bst&quot;)`  |````{note}By default, the runtime will look for a file called `model.[json | ubj | bst]`.However, this can be modified through the `parameters.uri` field of your{class}`ModelSettings &lt;mlserver.settings.ModelSettings&gt;` config (see thesection on [Model Settings](../../docs/reference/model-settings.md) for moredetails).```{code-block} json---emphasize-lines: 3-5---{  &quot;name&quot;: &quot;foo&quot;,  &quot;parameters&quot;: {    &quot;uri&quot;: &quot;./my-own-model-filename.json&quot;  }}```````## Content TypesIf no [content type](../../docs/user-guide/content-type) is present on therequest or metadata, the XGBoost runtime will try to decode the payload as a[NumPy Array](../../docs/user-guide/content-type).To avoid this, either send a different content type explicitly, or define thecorrect one as part of your [model'smetadata](../../docs/reference/model-settings).## Model OutputsThe XGBoost inference runtime exposes a number of outputs depending on themodel type.These outputs match to the `predict` and `predict_proba` methods of the XGBoostmodel.| Output          | Returned By Default | Availability                                                          || --------------- | ------------------- | --------------------------------------------------------------------- || `predict`       | ✅                  | Available on all XGBoost models.                                      || `predict_proba` | ❌                  | Only available on non-regressor models (i.e. `XGBClassifier` models). |By default, the runtime will only return the output of `predict`.However, you are able to control which outputs you want back through the`outputs` field of your {class}`InferenceRequest&lt;mlserver.types.InferenceRequest&gt;` payload.For example, to only return the model's `predict_proba` output, you coulddefine a payload such as:```{code-block} json---emphasize-lines: 10-12---{  &quot;inputs&quot;: [    {      &quot;name&quot;: &quot;my-input&quot;,      &quot;datatype&quot;: &quot;INT32&quot;,      &quot;shape&quot;: [2, 2],      &quot;data&quot;: [1, 2, 3, 4]    }  ],  &quot;outputs&quot;: [    { &quot;name&quot;: &quot;predict_proba&quot; }  ]}```</longdescription>
</pkgmetadata>