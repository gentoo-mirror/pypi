<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># RGBPRINT 4.0.1![rgbprint-in-rainbow-gradient-color](https://qu.ax/taDN.png)![rgbprint-blue-purple](https://qu.ax/JLnS.gif)![rgbprint-blue-purple](https://qu.ax/pKpa.gif)## Print gradients and colors on your terminal.## Components:&gt;&gt; see below for details.&gt; &gt; - functions&gt; &gt;   - rgbprint&gt;   - gradient_print&gt;   - gradient_scroll&gt;   - gradient_change&gt;&gt; - classes&gt;   - Color# Basic examples:&gt; #### use rgbprint:&gt; ```python&gt; from rgbprint import rgbprint&gt; rgbprint(&quot;[+] successfully connected to database&quot;, color=&quot;green&quot;)&gt; ```&gt; ![rgbprint-green](https://qu.ax/bqVd.png)&gt; &gt; #### inject colors in strings:&gt; ```python&gt; from rgbprint import Color&gt; print(f&quot;[{Color.red}CRITICAL{Color.reset}] encountered error in the program&quot;)&gt; ```&gt; ![inject-color](https://qu.ax/RQOn.png)&gt; &gt; #### print gradients&gt; ```python&gt; from rgbprint import gradient_print, Color&gt; gradient_print(&gt;     &quot;[CRITICAL] system failure, program can't open file in location C:/foo/bar/baz.tgz&quot;, &gt;     start_color=Color.yellow_green, &gt;     end_color=Color.dark_magenta&gt; )&gt; ```&gt; ![gradient-print](https://qu.ax/snQA.png)&gt; &gt; #### scroll gradients&gt; ```python&gt; from rgbprint import gradient_scroll, Color&gt; gradient_scroll(&gt;     &quot;[CRITICAL] system failure, program can't open file in location C:/foo/bar/baz.tgz&quot;, &gt;     start_color=0x4BBEE3, &gt;     end_color=Color.medium_violet_red&gt; )&gt; ```&gt; ![gradient-scroll](https://qu.ax/uyo.gif)&gt; &gt; #### change gradients&gt; ```python&gt; from rgbprint import gradient_change, Color&gt; gradient_change(&gt;     &quot;[CRITICAL] system failure, program can't open file in location C:/foo/bar/baz.tgz&quot;, &gt;     start_color=0x4BBEE3, &gt;     end_color=Color.medium_violet_red&gt; )&gt; ```&gt; ![gradient-scroll](https://qu.ax/uegj.gif)# Basic Results![chimera](https://qu.ax/FMFZ.png)![ninetails-email-spoofer](https://qu.ax/Cxcj.png)# Functions:## rgbprint![rgbprint-green](https://qu.ax/bqVd.png)&gt; print but with color keyword argument support.&gt; &gt; Prints the values to sys.stdout.&gt; &gt; the color argument gets converted to a `Color` object before getting printed, thus it must be an instance of `ColorType`&gt; &gt; ```python&gt; rgbprint(&gt;       *values, &gt;       sep: str = &quot; &quot;,&gt;       end: str = &quot;\n&quot;, &gt;       color: Optional[ColorType] = None,&gt; ) -&gt; None&gt; ```&gt; ### Args:&gt; - *values (`Any`): values to print.&gt; - color (`ColorType`): `optional` color. see examples down below for supported formats.&gt; - sep (`str`): `optional`, string inserted between values, default a space.&gt; - end (`str`): `optional`, string appended after the last value, default a newline.&gt; ### Examples:&gt; import the package&gt; ```python&gt; from rgbprint import rgbprint &gt; from rgbprint import Color &gt; ```&gt; basic colored print&gt; ```python&gt; user = &quot;john smith&quot;&gt; rgbprint(&quot;welcome&quot;, user, &quot;you are&quot;, 25, &quot;years old&quot;, color=Color.forest_green)&gt; ```&gt; similar functionality to the built-in `print` function, support for unpacking iterables.&gt; ```python&gt; rgbprint(*[&quot;orange&quot;, &quot;apple&quot;, &quot;banana&quot;], sep=&quot;_&quot;, color=&quot;yellow&quot;)&gt; ```&gt; all supported color formats&gt; ```python&gt; rgbprint(&quot;hello&quot;, color=&quot;red&quot;)&gt; rgbprint(&quot;hello&quot;, color=0xff00ff)&gt; rgbprint(&quot;hello&quot;, color=&quot;#ff00ff&quot;)&gt; rgbprint(&quot;hello&quot;, color=&quot;ff00ff&quot;)&gt; rgbprint(&quot;hello&quot;, color=[255, 0, 255])&gt; rgbprint(&quot;hello&quot;, color=(255, 0, 255))&gt; rgbprint(&quot;hello&quot;, color=(255, 0, 0xFF))&gt; rgbprint(&quot;hello&quot;, color=Color.red)&gt; rgbprint(&quot;hello&quot;, color=Color.random)&gt; rgbprint(&quot;hello&quot;, color=Color(255, 0, 127))&gt; ```&gt; ### Raises:&gt; - ValueError: if the color is in an unsupported format, or is out of range of 0-16777215 (0x000000-0xFFFFFF).&gt; - TypeError: if the color is of unsupported type. or some other error.## gradient_print![gradient-print](https://qu.ax/snQA.png)&gt; print gradients on your terminal&gt; ```python&gt; gradient_print(&gt;       *values, &gt;       start_color: Optional[ColorType] = None, &gt;       end_color: Optional[ColorType] = None, &gt;       sep: str = &quot; &quot;, &gt;       end: str = &quot;\n&quot;&gt; ) -&gt; None&gt; ```&gt; ### Args:&gt; - *values (`Any`): values to print.&gt; - start_color (`ColorType`): start_color. see examples down below for supported formats.&gt; - end_color (`ColorType`): end_color. see examples down below for supported formats.&gt; - sep (`str`): `optional`, string inserted between values, default a space.&gt; - end (`str`): `optional`, string appended after the last value, default a newline.&gt; ### Examples:&gt; import the package&gt; ```python&gt; from rgbprint import gradient_print&gt; from rgbprint import Color &gt; ```&gt; basic gradient scroll&gt; ```python&gt; user = &quot;john smith&quot;&gt; gradient_print(&quot;welcome&quot;, user, &quot;you are&quot;, 25, &quot;years old&quot;, start_color=&quot;red, end_color=&quot;yellow&quot;)&gt; ```&gt; more examples&gt; ```python&gt; username = &quot;john doe&quot;&gt; gradient_print(&quot;hello&quot;, start_color=&quot;red&quot;, end_color=&quot;yellow&quot;)&gt; gradient_print(&quot;hello&quot;, username, &quot;welcome to the app&quot;, start_color=Color.forest_green, end_color=0xFF00FF)&gt; gradient_print(&quot;[+] loading data, please wait...&quot;, start_color=Color.aqua_marine, end_color=Color.peach_puff)&gt; ```&gt; similar functionality to the built-in `print` function, support for unpacking iterables.&gt; ```python&gt; gradient_print(*[&quot;orange&quot;, &quot;apple&quot;, &quot;banana&quot;], sep=&quot;_&quot;, start_color=&quot;yellow&quot;, end_color=&quot;red&quot;)&gt; ```&gt; all supported color formats&gt; ```python&gt; gradient_print(&quot;hello&quot;, start_color=&quot;red&quot;,              end_color=&quot;red&quot;)&gt; gradient_print(&quot;hello&quot;, start_color=0xff00ff,           end_color=0xff00ff)&gt; gradient_print(&quot;hello&quot;, start_color=&quot;#ff00ff&quot;,          end_color=&quot;#ff00ff&quot;)&gt; gradient_print(&quot;hello&quot;, start_color=&quot;ff00ff&quot;,           end_color=&quot;ff00ff&quot;)&gt; gradient_print(&quot;hello&quot;, start_color=[255, 0, 255],      end_color=[255, 0, 255])&gt; gradient_print(&quot;hello&quot;, start_color=(255, 0, 255),      end_color=(255, 0, 255))&gt; gradient_print(&quot;hello&quot;, start_color=(255, 0, 0xFF),     end_color=(255, 0, 0xFF))&gt; gradient_print(&quot;hello&quot;, start_color=Color.red,          end_color=Color.red)&gt; gradient_print(&quot;hello&quot;, start_color=Color.random,       end_color=Color.random)&gt; gradient_print(&quot;hello&quot;, start_color=Color(255, 0, 127), end_color=Color(255, 0, 127))&gt; ```&gt; ### Raises:&gt; - ValueError: if the color is in an unsupported format, or is out of range of 0-16777215 (0x000000-0xFFFFFF).&gt; - TypeError: if the color is of unsupported type, or the function is missing arguments.## gradient_scroll![gradient-scroll](https://qu.ax/uyo.gif)&gt; scroll gradients on your terminal&gt; ```python&gt; gradient_scroll(&gt;       *values, &gt;       start_color: Optional[ColorType] = None, &gt;       end_color: Optional[ColorType] = None,&gt;       delay: float = 0.03,&gt;       times: int = 4,&gt;       reverse: bool = False,&gt;       sep: str = &quot; &quot;, &gt;       end: str = &quot;\n&quot;,&gt; ) -&gt; None&gt; ```&gt; ### Args:&gt; - *values (`Any`): values to print.&gt; - start_color (`ColorType`): start_color. see examples down below for supported formats.&gt; - end_color (`ColorType`): end_color. see examples down below for supported formats.&gt; - delay (`float`): `optional`, the delay between the change of the gradient, recommended range: .05 - .1&gt; - times (`int`): `optional`, the amount of times to change the gradient in place.&gt; - reverse (`bool`): `optional` whether to start with the end color or not.&gt; - sep (`str`): `optional`, string inserted between values, default a space.&gt; - end (`str`): `optional`, string appended after the last value, default a newline.&gt; ### Examples:&gt; import the package&gt; ```python&gt; from rgbprint import gradient_scroll&gt; from rgbprint import Color &gt; ```&gt; basic gradient print&gt; ```python&gt; user = &quot;john smith&quot;&gt; gradient_scroll(&quot;welcome&quot;, user, &quot;you are&quot;, 25, &quot;years old&quot;, start_color=&quot;red, end_color=&quot;yellow&quot;)&gt; ```&gt; more examples&gt; ```python&gt; username = &quot;john doe&quot;&gt; gradient_scroll(&quot;hello&quot;, start_color=&quot;red&quot;, end_color=&quot;yellow&quot;)&gt; gradient_scroll(&quot;hello&quot;, start_color=&quot;red&quot;, end_color=&quot;yellow&quot;, delay=0.1)&gt; gradient_scroll(&quot;hello&quot;, start_color=&quot;red&quot;, end_color=&quot;yellow&quot;, delay=0.1, times=10)&gt; gradient_scroll(&quot;hello&quot;, start_color=&quot;red&quot;, end_color=&quot;yellow&quot;, delay=0.1, times=10, reverse=True)&gt; gradient_scroll(&quot;hello&quot;, username, &quot;welcome to the app&quot;, start_color=Color.forest_green, end_color=0xFF00FF)&gt; gradient_scroll(&quot;[+] loading data, please wait...&quot;, start_color=Color.aqua_marine, end_color=Color.peach_puff)&gt; ```&gt; similar functionality to the built-in `print` function, support for unpacking iterables.&gt; ```python&gt; gradient_scroll(*[&quot;orange&quot;, &quot;apple&quot;, &quot;banana&quot;], sep=&quot;_&quot;, start_color=&quot;yellow&quot;, end_color=&quot;red&quot;)&gt; ```&gt; all supported color formats&gt; ```python&gt; gradient_scroll(&quot;hello&quot;, start_color=&quot;red&quot;,              end_color=&quot;red&quot;)&gt; gradient_scroll(&quot;hello&quot;, start_color=0xff00ff,           end_color=0xff00ff)&gt; gradient_scroll(&quot;hello&quot;, start_color=&quot;#ff00ff&quot;,          end_color=&quot;#ff00ff&quot;)&gt; gradient_scroll(&quot;hello&quot;, start_color=&quot;ff00ff&quot;,           end_color=&quot;ff00ff&quot;)&gt; gradient_scroll(&quot;hello&quot;, start_color=[255, 0, 255],      end_color=[255, 0, 255])&gt; gradient_scroll(&quot;hello&quot;, start_color=(255, 0, 255),      end_color=(255, 0, 255))&gt; gradient_scroll(&quot;hello&quot;, start_color=(255, 0, 0xFF),     end_color=(255, 0, 0xFF))&gt; gradient_scroll(&quot;hello&quot;, start_color=Color.red,          end_color=Color.red)&gt; gradient_scroll(&quot;hello&quot;, start_color=Color.random,       end_color=Color.random)&gt; gradient_scroll(&quot;hello&quot;, start_color=Color(255, 0, 127), end_color=Color(255, 0, 127))&gt; ```&gt; ### Raises:&gt; - ValueError: if the color is in an unsupported format, or is out of range of 0-16777215 (0x000000-0xFFFFFF).&gt; - TypeError: if the color is of unsupported type, or the function is missing arguments.## gradient_change![gradient-scroll](https://qu.ax/uegj.gif)&gt; change gradients in place on your terminal&gt; this function is very similar to `gradient_scroll` almost identical.&gt; ```python&gt; gradient_change(&gt;       *values, &gt;       start_color: Optional[ColorType] = None, &gt;       end_color: Optional[ColorType] = None,&gt;       delay: float = 0.03,&gt;       times: int = 4,&gt;       reverse: bool = False,&gt;       sep: str = &quot; &quot;, &gt;       end: str = &quot;\n&quot;,&gt; ) -&gt; None&gt; ```&gt; ### Args:&gt; - *values (`Any`): values to print.&gt; - start_color (`ColorType`): start_color. see examples down below for supported formats.&gt; - end_color (`ColorType`): end_color. see examples down below for supported formats.&gt; - delay (`float`): `optional`, the delay between the change of the gradient, recommended range: .05 - .1&gt; - times (`int`): `optional`, the amount of times to change the gradient in place.&gt; - reverse (`bool`): `optional` whether to start with the end color or not.&gt; - sep (`str`): `optional`, string inserted between values, default a space.&gt; - end (`str`): `optional`, string appended after the last value, default a newline.&gt; ### Examples:&gt; import the package&gt; ```python&gt; from rgbprint import gradient_change&gt; from rgbprint import Color &gt; ```&gt; basic gradient print&gt; ```python&gt; user = &quot;john smith&quot;&gt; gradient_change(&quot;welcome&quot;, user, &quot;you are&quot;, 25, &quot;years old&quot;, start_color=&quot;red, end_color=&quot;yellow&quot;)&gt; ```&gt; more examples&gt; ```python&gt; username = &quot;john doe&quot;&gt; gradient_change(&quot;hello&quot;, start_color=&quot;red&quot;, end_color=&quot;yellow&quot;)&gt; gradient_change(&quot;hello&quot;, start_color=&quot;red&quot;, end_color=&quot;yellow&quot;, delay=0.1)&gt; gradient_change(&quot;hello&quot;, start_color=&quot;red&quot;, end_color=&quot;yellow&quot;, delay=0.1, times=10)&gt; gradient_change(&quot;hello&quot;, start_color=&quot;red&quot;, end_color=&quot;yellow&quot;, delay=0.1, times=10, reverse=True)&gt; gradient_change(&quot;hello&quot;, username, &quot;welcome to the app&quot;, start_color=Color.forest_green, end_color=0xFF00FF)&gt; gradient_change(&quot;[+] loading data, please wait...&quot;, start_color=Color.aqua_marine, end_color=Color.peach_puff)&gt; ```&gt; similar functionality to the built-in `print` function, support for unpacking iterables.&gt; ```python&gt; gradient_change(*[&quot;orange&quot;, &quot;apple&quot;, &quot;banana&quot;], sep=&quot;_&quot;, start_color=&quot;yellow&quot;, end_color=&quot;red&quot;)&gt; ```&gt; all supported color formats&gt; ```python&gt; gradient_change(&quot;hello&quot;, start_color=&quot;red&quot;,              end_color=&quot;red&quot;)&gt; gradient_change(&quot;hello&quot;, start_color=0xff00ff,           end_color=0xff00ff)&gt; gradient_change(&quot;hello&quot;, start_color=&quot;#ff00ff&quot;,          end_color=&quot;#ff00ff&quot;)&gt; gradient_change(&quot;hello&quot;, start_color=&quot;ff00ff&quot;,           end_color=&quot;ff00ff&quot;)&gt; gradient_change(&quot;hello&quot;, start_color=[255, 0, 255],      end_color=[255, 0, 255])&gt; gradient_change(&quot;hello&quot;, start_color=(255, 0, 255),      end_color=(255, 0, 255))&gt; gradient_change(&quot;hello&quot;, start_color=(255, 0, 0xFF),     end_color=(255, 0, 0xFF))&gt; gradient_change(&quot;hello&quot;, start_color=Color.red,          end_color=Color.red)&gt; gradient_change(&quot;hello&quot;, start_color=Color.random,       end_color=Color.random)&gt; gradient_change(&quot;hello&quot;, start_color=Color(255, 0, 127), end_color=Color(255, 0, 127))&gt; ```&gt; ### Raises:&gt; - ValueError: if the color is in an unsupported format, or is out of range of 0-16777215 (0x000000-0xFFFFFF).&gt; - TypeError: if the color is of unsupported type, or the function is missing arguments.# Classes:## Color&gt; Color class, to represent a 8bit ANSI colors&gt; &gt; instances of this class are printable, when you print them, they change the color of your terminal.&gt; ```python&gt; Color(r, g, b)&gt; ```&gt; ## Slots:&gt; &gt; - r: (`int` in `0..256`): red value of the color&gt; - g: (`int` in `0..256`): green value of the color&gt; - b: (`int` in `0..256`): blue value of the color&gt; ## Initialization: &gt; all the ways below are valid to initialize a color:&gt; ```python&gt; Color(0xff00ff)&gt; Color(&quot;#ff00ff&quot;)&gt; Color(&quot;ff00ff&quot;)&gt; Color([255, 0, 255])&gt; Color(255, 0, 255)&gt; Color(255, 0, 0xFF)&gt; Color(Color.red)&gt; Color(Color.random)&gt; ```&gt; ## Different ways to initialize colors: &gt; colors can be initialized in many ways:&gt; - `Color(int, int, int)` &gt;   - `Color(255, 0, 255)` &gt;   - `Color(0x4B, 0xBB, 0xE3)` &gt;   - `Color(*(127, 127, 127))` &gt;&gt; &gt; - `Color(str)`&gt;   - `Color(&quot;#FF00FF&quot;)` &gt;   - `Color(&quot;FF00FF&quot;)` &gt;   - `Color(&quot;red)` &gt;   - `Color(&quot;green&quot;)`&gt;&gt; &gt; - `Color(int)`&gt;   - `Color(0x4BBEE3)` &gt;   - `Color(16777215)`&gt; &gt; &gt; - `Color(Color)`&gt;   - `red = Color.red; Color(red)`&gt; &gt; &gt; - `Color(Tuple[int, int, int] | List[int, int, int])`&gt;   - `Color((100, 255, 16))`&gt;   - `Color([100, 255, 16])` &gt; ## Destruction&gt; you can destruct colors into its red, green, blue components like so:&gt; ```python&gt; r, g, b = Color.red&gt; assert r == 255&gt; assert g == 0&gt; assert b == 0&gt; &gt; rgb = tuple(Color(&quot;FF00FF&quot;))&gt; assert isinstance(rgb, tuple)&gt; assert rgb == (255, 0, 255)&gt; ```&gt; ## Dunder/magic method implementations:&gt; the color class has some dunder magic methods implemented.&gt; &gt; - `__iter__` to destruct the colors.&gt; - `__str__` to print the colors&gt; - `__repr__` to represent colors for debugging purposes.&gt; - `__eq__` to compare 2 colors, and see if they are the same color.</longdescription>
</pkgmetadata>