<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Aiohttp-cache![aiohttp-cache logo](https://raw.githubusercontent.com/cr0hn/aiohttp-cache/master/aiohttp-cache-128x128.png)# What's aiohttp-cache`aiohttp-cache` is a plugin for aiohttp.web server that allow to use acache system to improve the performance of your site.# How to use it## With in-memory backend```pythonimport asynciofrom aiohttp import webfrom aiohttp_cache import (  # noqa    setup_cache,    cache,)PAYLOAD = {&quot;hello&quot;: &quot;aiohttp_cache&quot;}WAIT_TIME = 2@cache()async def some_long_running_view(    request: web.Request,) -&gt; web.Response:    await asyncio.sleep(WAIT_TIME)    payload = await request.json()    return web.json_response(payload)app = web.Application()setup_cache(app)app.router.add_post(&quot;/&quot;, some_long_running_view)web.run_app(app)```## With redis backend**Note**: redis should be available at `$CACHE_URL` env variable or`redis://localhost:6379/0````pythonimport asyncioimport yarlfrom aiohttp import webfrom envparse import envfrom aiohttp_cache import (  # noqa    setup_cache,    cache,    RedisConfig,)PAYLOAD = {&quot;hello&quot;: &quot;aiohttp_cache&quot;}WAIT_TIME = 2@cache()async def some_long_running_view(    request: web.Request,) -&gt; web.Response:    await asyncio.sleep(WAIT_TIME)    payload = await request.json()    return web.json_response(payload)app = web.Application()url = yarl.URL(    env.str(&quot;CACHE_URL&quot;, default=&quot;redis://localhost:6379/0&quot;))setup_cache(    app,    cache_type=&quot;redis&quot;,    backend_config=RedisConfig(        db=int(url.path[1:]), host=url.host, port=url.port    ),)app.router.add_post(&quot;/&quot;, some_long_running_view)web.run_app(app)```## Example with a custom cache keyLet's say you would like to cache the requests just by the method andjson payload, then you can setup this as per the follwing example.**Note** default key_pattern is:```pythonDEFAULT_KEY_PATTERN = (    AvailableKeys.method,    AvailableKeys.host,    AvailableKeys.path,    AvailableKeys.postdata,    AvailableKeys.ctype,)``````pythonimport asynciofrom aiohttp import webfrom aiohttp_cache import (    setup_cache,    cache,    AvailableKeys,)  # noqaPAYLOAD = {&quot;hello&quot;: &quot;aiohttp_cache&quot;}WAIT_TIME = 2@cache()async def some_long_running_view(    request: web.Request,) -&gt; web.Response:    await asyncio.sleep(WAIT_TIME)    payload = await request.json()    return web.json_response(payload)custom_cache_key = (AvailableKeys.method, AvailableKeys.json)app = web.Application()setup_cache(app, key_pattern=custom_cache_key)app.router.add_post(&quot;/&quot;, some_long_running_view)web.run_app(app)```## Parametrize the cache decorator```pythonimport asynciofrom aiohttp import webfrom aiohttp_cache import (  # noqa    setup_cache,    cache,)PAYLOAD = {&quot;hello&quot;: &quot;aiohttp_cache&quot;}WAIT_TIME = 2@cache(    expires=1 * 24 * 3600,  # in seconds    unless=False,  # anything what returns a bool. if True - skips cache)async def some_long_running_view(    request: web.Request,) -&gt; web.Response:    await asyncio.sleep(WAIT_TIME)    payload = await request.json()    return web.json_response(payload)app = web.Application()setup_cache(app)app.router.add_post(&quot;/&quot;, some_long_running_view)web.run_app(app)```# LicenseThis project is released under BSD license. Feel free# Source CodeThe latest developer version is available in a github repository:&lt;https://github.com/cr0hn/aiohttp-cache&gt;# Development environment1.  docker-compose run tests</longdescription>
</pkgmetadata>