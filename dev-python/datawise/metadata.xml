<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DataWise### AI Assistant for Python Data Analytics| Capabilities                                      | Limitations                                 ||---------------------------------------------------|---------------------------------------------|| Use SQL to transform Pandas dataframes            | May occasionally generate incorrect results || Use English to visualize Pandas dataframes (beta) |                                             |[Get your API Key](https://wisedata.app/)## üîç DemoTry out DataWise in your browser:[![Open in Colab](https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667)](https://colab.research.google.com/drive/1onQI_V6NrAnEDY-o6N068xLyvsFojynf?usp=sharing)## üîß Quick installInstall DataWise client first:```bashpip install datawise```Configure with your account's API key.Either set it as `DATAWISE_API_KEY` environment variable before using the library:```bashexport DATAWISE_API_KEY=sk-...```Or set `api_key` to its value:```pythonfrom datawise import DataWisedw = DataWise(api_key=&quot;you_api_key_here&quot;)```## Use SQL to transform Pandas dataframesYou need to install `pandas` and `numpy` packages as pre-requisites for SQL query.```bashpip install pandas numpy```To transform, simply call `sql` function. You can use SQLite style SQL query to transform Pandas dataframes.```pythonfrom datawise import DataWiseimport pandas as pdcountries = pd.DataFrame({    &quot;country&quot;: [&quot;United States&quot;, &quot;United Kingdom&quot;, &quot;France&quot;, &quot;Germany&quot;, &quot;Italy&quot;, &quot;Spain&quot;, &quot;Canada&quot;, &quot;Australia&quot;, &quot;Japan&quot;, &quot;China&quot;],    &quot;gdp&quot;: [19294482071552, 2891615567872, 2411255037952, 3435817336832, 1745433788416, 1181205135360, 1607402389504, 1490967855104, 4380756541440, 14631844184064],    &quot;happiness_index&quot;: [6.94, 7.16, 6.66, 7.07, 6.38, 6.4, 7.23, 7.22, 5.87, 5.12]})dw = DataWise(api_key=&quot;you_api_key_here&quot;)df = dw.sql(&quot;SELECT COUNT(country) FROM countries&quot;, {  &quot;countries&quot;: countries})print(df)```The above code will return the following dataframe:```        count0          10```You can also do joins of multiple dataframes:```pythonfrom datawise import DataWiseimport pandas as pdcountries = pd.DataFrame({    &quot;country&quot;: [&quot;United States&quot;, &quot;United Kingdom&quot;, &quot;France&quot;, &quot;Germany&quot;, &quot;Italy&quot;, &quot;Spain&quot;, &quot;Canada&quot;, &quot;Australia&quot;, &quot;Japan&quot;, &quot;China&quot;],    &quot;gdp&quot;: [19294482071552, 2891615567872, 2411255037952, 3435817336832, 1745433788416, 1181205135360, 1607402389504, 1490967855104, 4380756541440, 14631844184064],    &quot;happiness_index&quot;: [6.94, 7.16, 6.66, 7.07, 6.38, 6.4, 7.23, 7.22, 5.87, 5.12]})country_populations = pd.DataFrame({    &quot;country&quot;: [&quot;United States&quot;, &quot;United Kingdom&quot;, &quot;France&quot;, &quot;Germany&quot;, &quot;Italy&quot;, &quot;Spain&quot;, &quot;Canada&quot;, &quot;Australia&quot;, &quot;Japan&quot;, &quot;China&quot;],    &quot;population&quot;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],})dw = DataWise(api_key=&quot;you_api_key_here&quot;)df = dw.sql(&quot;SELECT * FROM countries LEFT JOIN country_populations ON countries.country = country_populations.country&quot;, {  &quot;countries&quot;: countries,  &quot;country_populations&quot;: country_populations})print(df)```The above code will return the following dataframe:```          country             gdp  happiness_index  population0   United States  19294482071552             6.94           11  United Kingdom   2891615567872             7.16           22          France   2411255037952             6.66           33         Germany   3435817336832             7.07           44           Italy   1745433788416             6.38           55           Spain   1181205135360             6.40           66          Canada   1607402389504             7.23           77       Australia   1490967855104             7.22           88           Japan   4380756541440             5.87           99           China  14631844184064             5.12          10```### Limitations of using SQL to transform Pandas dataframes* May occasionally generate incorrect results* Ordering of rows is not strict unless ORDER BY clause is specified* No support for Window functions: https://www.sqlite.org/windowfunctions.html* If SQL query contains WHERE clause with `LIKE` operator, incorrect result might be generated## Use English to visualize Pandas dataframes (beta)You can write English to describe how you want to visualize your dataframe.This feature is available as beta feature so accurate result is not guaranteed.You need to install `matplotlib` and `seaborn` packages as pre-requisites for SQL query.```bashpip install matplotlib seaborn```To visualize, simply call `viz` function.```pythonfrom datawise import DataWisedw = DataWise(api_key=&quot;you_api_key_here&quot;)tips = sns.load_dataset(&quot;tips&quot;)dw.viz(&quot;Show me relationship between total bill and tip. Each day should have different colour. Title is: Total Bill vs Tip&quot;, { &quot;tips&quot;: tips })```## Printing out translated codeYou can ask DataWise to print translated code to console using `code=True` flag.```pythonimport loggingimport sysroot = logging.getLogger()root.setLevel(logging.INFO)handler = logging.StreamHandler(sys.stdout)handler.setLevel(logging.INFO)root.addHandler(handler)...df = dw.sql(&quot;SELECT COUNT(country) FROM countries&quot;, {  &quot;countries&quot;: countries}, code=True)```## Error HandlingErrors could happen if we cannot translate the SQL query. Consider the following example:```pythonfrom datawise import DataWiseimport pandas as pdcountries = pd.DataFrame({    &quot;country&quot;: [&quot;United States&quot;, &quot;United Kingdom&quot;, &quot;France&quot;, &quot;Germany&quot;, &quot;Italy&quot;, &quot;Spain&quot;, &quot;Canada&quot;, &quot;Australia&quot;, &quot;Japan&quot;, &quot;China&quot;],    &quot;gdp&quot;: [19294482071552, 2891615567872, 2411255037952, 3435817336832, 1745433788416, 1181205135360, 1607402389504, 1490967855104, 4380756541440, 14631844184064],    &quot;happiness_index&quot;: [6.94, 7.16, 6.66, 7.07, 6.38, 6.4, 7.23, 7.22, 5.87, 5.12]})dw = DataWise(api_key=&quot;you_api_key_here&quot;)dw.sql(&quot;SELECT bad_column FROM bad_table&quot;, {  &quot;countries&quot;: countries})```The above code will give following error message:```ERROR    root:__init__.py:47 We couldn't translate your query. Here is python code we attempted to generate: return_df = bad_table['bad_column']```You can modify the SQL query so that it works based on the code we attempted to generate.You can also take the translated code and use it after modifying it to work.## üìú LicenseDataWise is licensed under the Apache 2.0 License. See the LICENSE file for more details.## ü§ù Acknowledgements- This project is leverages [pandas](https://github.com/pandas-dev/pandas) library by independent contributors, but it's in no way affiliated with the pandas project.</longdescription>
</pkgmetadata>