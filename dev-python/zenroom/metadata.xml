<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Use Zenroom in Python3&lt;p align=&quot;center&quot;&gt;  &lt;br/&gt;  &lt;a href=&quot;https://dev.zenroom.org/&quot;&gt;    &lt;img src=&quot;https://dev.zenroom.org/_media/images/zenroom_logo.png&quot; height=&quot;140&quot; alt=&quot;Zenroom&quot;&gt;  &lt;/a&gt;  &lt;h2 align=&quot;center&quot;&gt;    zenroom.py üêç    &lt;br&gt;    &lt;sub&gt;A Python3 wrapper of &lt;a href=&quot;https://zenroom.org&quot;&gt;Zenroom&lt;/a&gt;, a secure and small virtual machine for crypto language processing&lt;/sub&gt; &lt;/h2&gt;  &lt;br&gt;&lt;br&gt;  &lt;a href=&quot;https://travis-ci.com/dyne/zenroom-py&quot;&gt;    &lt;img src=&quot;https://travis-ci.com/dyne/zenroom-py.svg?branch=master&quot; alt=&quot;Build status&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://codecov.io/gh/dyne/zenroom-py&quot;&gt;    &lt;img src=&quot;https://codecov.io/gh/dyne/zenroom-py/branch/master/graph/badge.svg&quot; alt=&quot;Code coverage&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/zenroom/&quot;&gt;    &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/zenroom.svg&quot; alt=&quot;Latest release&quot;&gt;  &lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;This library attempts to provide a very simple wrapper around the Zenroom(https://zenroom.dyne.org/) crypto virtual machine developed as part of theDECODE project (https://decodeproject.eu/), that aims to make the Zenroomvirtual machine easier to call from normal Python code.Zenroom itself does have good cross platform functionality, so if you areinterested in finding out more about the functionalities offered by Zenroom,then please visit the website linked to above to find out more.***## üíæ Installation```bashpip install zenroom```**NOTE** - the above command attempts to install the zenroom package, pulling inthe Zenroom VM as a precompiled binary, so will only work on Linux and macOSmachines.for the edge (syn to the latest commit on master) version please run:```bashpip install zenroom --pre```The `zenroom` package is just a wrapper around the `zencode-exec` utility.You also need to install `zencode-exec`, you can download if from the official [releases on github](https://github.com/dyne/Zenroom/releases/)When after downloading you have to move it somewhere in your path:```sudo cp zencode-exec /usr/local/bin/```Warning: on Mac OS, the executable is `zencode-exec.command` and you have to symlink it to `zencode-exec````sudo cp zencode-exec.command /usr/local/bin/cd /usr/local/binsudo ln -s zencode-exec.command zencode-exec```***## üéÆ UsageTwo main calls are exposed, one to run `zencode` and one for `zenroom scripts`.If you don't know what `zencode` is, you can start with this blogposthttps://decodeproject.eu/blog/smart-contracts-english-speakerThe official documentation is available on [https://dev.zenroom.org/zencode/](https://dev.zenroom.org/zencode/)A good set of examples of `zencode` contracts could be found on* [zencode simple tests](https://github.com/dyne/Zenroom/tree/master/test/zencode_simple)* [zencode coconut tests](https://github.com/dyne/Zenroom/tree/master/test/zencode_coconut)### üêç Python wrapperthe wrapper exposes two simple calls:* `zenroom_exec`* `zencode_exec`as the names suggest are the two methods to execute zenroom (lua scripts) and zencode.#### argsBoth functions accept the same arguments:- `script` **[string](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)** the lua script or the zencode script to be executed- `keys` **[string](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)** the optional keys string to pass in execution as documented in zenroom docs [here](https://dev.zenroom.org/wiki/how-to-exec/#keys-string)- `data` **[string](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)** the optional data string to pass in execution as documented in zenroom docs [here](https://dev.zenroom.org/wiki/how-to-exec/#data-string)- `conf` **[string](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)** the optional conf string to pass according to zen_config [here](https://github.com/dyne/Zenroom/blob/master/src/zen_config.c#L99-L104)#### returnBoth functions return the same object result `ZenResult` that have two attributes:- `stdout` **[string](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)** holds the stdout of the script execution- `stderr` **[string](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)** holds the stderr of the script execution##### ExamplesExample usage of `zencode_exec(script, keys=None, data=None, conf=None)````pythonfrom zenroom import zenroomcontract = &quot;&quot;&quot;Scenario ecdh: Create a keypair&quot;Given that I am known as 'identifier'When I create the keypairThen print my data&quot;&quot;&quot;result = zenroom.zencode_exec(contract)print(result.output)```Example usage of `zenroom_exec(script, keys=None, data=None, conf=None)````pythonfrom zenroom import zenroomscript = &quot;print('Hello world')&quot;result = zenroom.zenroom_exec(script)print(result.output)```The same arguments and the same result are applied as the `zencode_exec` call.***## üìã TestingTests are made with pytests, just run `python setup.py test`in [`zenroom_test.py`](https://github.com/dyne/Zenroom/blob/master/bindings/python3/tests/test_all.py) file you'll find more usage examples of the wrapper***## üåê Linkshttps://decodeproject.eu/https://zenroom.org/https://dev.zenroom.org/## üòç AcknowledgementsCopyright (C) 2018-2022 by [Dyne.org](https://www.dyne.org) foundation, AmsterdamOriginally designed and written by Sam Mulube.Designed, written and maintained by Puria Nafisi Azizi Rewritten by Danilo Spinella and David Dashyan&lt;img src=&quot;https://ec.europa.eu/cefdigital/wiki/download/attachments/289112547/logo-cef-digital-2021.png&quot; width=&quot;310&quot; alt=&quot;Project funded by the European Commission&quot;&gt;This project is receiving funding from the European Union‚Äôs Horizon 2020 research and innovation programme under grant agreement nr. 732546 (DECODE).***## üë• ContributingPlease first take a look at the [Dyne.org - Contributor License Agreement](CONTRIBUTING.md) then1.  üîÄ [FORK IT](https://github.com/dyne/Zenroom//fork)2.  Create your feature branch `git checkout -b feature/branch`3.  Commit your changes `git commit -am 'Add some fooBar'`4.  Push to the branch `git push origin feature/branch`5.  Create a new Pull Request `gh pr create -f`6.  üôè Thank you***## üíº License      Zenroom.py - a python wrapper of zenroom      Copyright (c) 2018-2022 Dyne.org foundation, Amsterdam      This program is free software: you can redistribute it and/or modify      it under the terms of the GNU Affero General Public License as      published by the Free Software Foundation, either version 3 of the      License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,      but WITHOUT ANY WARRANTY; without even the implied warranty of      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License      along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</longdescription>
</pkgmetadata>