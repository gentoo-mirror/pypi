<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Histopathology Models and Workflows## Models on public dataThis repository contains a set of models built on and for public datasets (PANDA, TCGA). Detailed instructions toon-board the datasets and run the models are provided [onreadthedocs](https://hi-ml.readthedocs.io/en/latest/histopathology.html).## Getting started### Setting up PythonFor working on the histopathology folder, please create a separate Conda environment.```shellcd hi-ml-cpathmake env```You can then activate the environment via `conda activate HimlHisto`. Set VSCode to use this Conda environment, by choosing &quot;Python: Select Interpreter&quot;from the command palette.If the dependencies need to be updated, please modify `hi-ml-cpath/primary_deps.yml`, and then run the script`hi-ml-cpath/create_and_lock_environment.sh`. This will create a full &quot;locked&quot; environment specification with pinnedversions of all depdencies.### Setting up AzureMLIn addition, please download an AzureML workspace configuration file for the workspace that you wish to use:* In the browser, navigate to the workspace in question* Click on the drop-down menu on upper right of the page, to the left of your account picture.* Select &quot;Download config file&quot;.* Save that file into the the repository root.Once that config file is in place, all Python runs that you start inside the `hi-ml-cpath` folder will automatically use this config file.## Running histopathology modelsTo test your setup, please execute in the `hi-ml-cpath` folder:```shellconda activate HimlHistopython ../hi-ml/src/health_ml/runner.py --model health_cpath.TcgaCrckImageNetMIL  --cluster=training-nd24```This should start an AzureML job in the AzureML workspace that you configured above via `config.json`. You may need to adjust the name ofthe compute cluster (`training-nd24` in the above example).### Conda environmentIf you start your jobs in the `hi-ml-cpath` folder, they will automatically pick up the Conda environment file that is present in that folder.If you start your jobs in a different folder, you need to add the `--conda_env` option to point to the file `&lt;repo_root&gt;/hi-ml-cpath/environment.yml`.## Running histopathology testsIn the `hi-ml-cpath` folder, run```shellmake call_pytest```Inside of VSCode, all tests in the repository should be picked up automatically. You can exclude the tests for the `hi-ml` and `hi-ml-azure` packages bymodifying `python.testing.pytestArgs` in the VSCode `.vscode/settings.json` file.## Tests that require a GPUThe test pipeline for the histopathology folder contains a run of `pytest` on a machine with 2 GPUs. Only tests that aremarked with the `pytest` mark `gpu` are executed on that GPU machine. Note that all tests that bear the `gpu` mark will_also_ be executed when running on a CPU machine. You need to manually add a `skipif` flag for tests that are meant toexclusively run on GPU machines. This also helps to ensure that the test suite can pass when executed outside of thebuild agents.* Tests that run only on a CPU machine: Provide no `pytest` marks```pythondef test_my_code() -&gt; None:    pass```* Tests that run on both on a CPU and on a GPU machine: Add `@pytest.mark.gpu````python@pytest.mark.gpudef test_my_code() -&gt; None:    pass```* Tests that run only on a GPU machine:```pythonfrom health_ml.utils.common_utils import is_gpu_availableno_gpu = not is_gpu_available()@pytest.mark.skipif(no_gpu, reason=&quot;Test requires GPU&quot;)@pytest.mark.gpudef test_my_code() -&gt; None:    pass```</longdescription>
</pkgmetadata>