<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. Badges|License|TemplatedData=============.. contents::   :local:Introduction------------TemplatedData is Robot Framework library for dynamically generated test data using robot variables and Jinja templating.Requirements------------Python 3.6+ and Robot Framework 3.2.1+.TemplatedData will most likely work on other versions but it's not tested on them.Installation------------You can install TemplateData by running::    pip install robotframework-templateddataUsage--------You need to import TemplatedData as library first::    *** Settings ***    Library    TemplatedDataTemplatedData will replace all occurences of robot variables (${var}) in file or variable using current robot contextand scopes. All test data in below examples are saved under 'test_data.txt' filesTest data::    my variable is ${var}Robot code::    ${var}     Set Variable    ${10}    ${data}    Get Templated Data From Path    test_data.txt    Log    ${data} # it should print `my variable is 10`Default values~~~~~~~~~~~~~~~~~~If the variable is not found it will be replaced with empty string. You can override that behaviour::    ${data}    Get Templated Data From Path    test_data.txt    default_empty=${5}    Log    ${data} # it should print `my variable is 5`You can also set default value of variable with `:` symbol.Test data::    my variable is ${var} and ${var2:some string}Robot code::    ${var}     Set Variable    ${10}    ${data}    Get Templated Data From Path    test_data.txt    Log    ${data} # it should print `my variable is 10 and some string`Return value type~~~~~~~~~~~~~~~~~~Return value can be either text/string (default) or json.Test data::    { &quot;key&quot;: &quot;${var}&quot; }Robot code::    ${data}    Get Templated Data From Path    test_data.txt    var=value    return_type=json    Log    ${data} # it should print `{ &quot;key&quot;: &quot;value&quot; }` and ${data} will be of type json   Jinja templating~~~~~~~~~~~~~~~~~~TemplatedData can also render the Jinja templates using Robot Framework variables. To enable Jinja template pass ``jinja_template`` as argument to library import or method call::    *** Settings ***   Library    TemplatedData  jinja_template=${True}      OR      *** Keywords ***   Load Data       ${data}    Get Templated Data From Path    data.template    jinja_template=${True}Test data (Jinja template)::   {       &quot;accounts&quot;: [           { &quot;id&quot;: {{ ${account_id:5} }} },           { &quot;id2&quot;: &quot;{{ ${account_id2} }}&quot; }           ],       &quot;users&quot;: [   {%- for user, amount in ${users.items()} %}         {           &quot;name&quot;: &quot;{{ user }}&quot;,           &quot;amount&quot;: {{ amount }}         }{{ &quot;,&quot; if not loop.last }}   {%- endfor %}       ]   }Robot code::     ${data}    Get Templated Data From Path    data.template    jinja_template=${True}    Example data output::     {       &quot;accounts&quot;: [           { &quot;id&quot;: 10 },           { &quot;id2&quot;: &quot;10&quot; }           ],       &quot;users&quot;: [         {           &quot;name&quot;: &quot;bartek&quot;,           &quot;amount&quot;: 5         },         {           &quot;name&quot;: &quot;tymoteusz&quot;,           &quot;amount&quot;: 10         },         {           &quot;name&quot;: &quot;pawel&quot;,           &quot;amount&quot;: -1         }       ]   }.. Badges links.. |License|   image:: https://img.shields.io/pypi/l/robotframework-robocop   :alt: PyPI - License</longdescription>
</pkgmetadata>