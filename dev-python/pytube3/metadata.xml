<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;  &lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://pypi.org/project/pytube3/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/pytube3.svg&quot; alt=&quot;pypi&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://pypi.python.org/pypi/pytube3/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/pytube3.svg&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;https://travis-ci.com/hbmartin/pytube3/&quot;&gt;&lt;img src=&quot;https://travis-ci.org/hbmartin/pytube3.svg?branch=master&quot; /&gt;&lt;/a&gt;  &lt;a href='https://pytube3.readthedocs.io/en/latest/?badge=latest'&gt;&lt;img src='https://readthedocs.org/projects/pytube3/badge/?version=latest' alt='Documentation Status' /&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/hbmartin/pytube3&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/hbmartin/pytube3/branch/master/graph/badge.svg&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;https://www.codefactor.io/repository/github/hbmartin/pytube3/overview/master&quot;&gt;&lt;img src=&quot;https://www.codefactor.io/repository/github/hbmartin/pytube3/badge/master&quot; alt=&quot;CodeFactor&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/ambv/black&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;https://twitter.com/hmartin&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/twitter-@hmartin-blue.svg?style=flat&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;&lt;/div&gt;# pytube3## Table of Contents  * [Installation](#installation)  * [Quick start](#quick-start)  * [Features](#features)  * [Usage](#usage)  * [Command-line interface](#command-line-interface)  * [Development](#development)  * [GUIs and other libraries](#guis-and-other-libraries)## InstallationDownload using pip via pypi.```bash$ pip install pytube3 --upgrade```(Mac/homebrew users may need to use ``pip3``)## Quick start```python &gt;&gt;&gt; from pytube import YouTube &gt;&gt;&gt; YouTube('https://youtu.be/9bZkp7q19f0').streams.get_highest_resolution().download() &gt;&gt;&gt; &gt;&gt;&gt; yt = YouTube('http://youtube.com/watch?v=9bZkp7q19f0') &gt;&gt;&gt; yt.streams  ... .filter(progressive=True, file_extension='mp4')  ... .order_by('resolution')[-1]  ... .download()```A GUI frontend for pytube3 is available at [YouTubeDownload](https://github.com/YouTubeDownload/YouTubeDownload)## Features  * Support for Both Progressive &amp; DASH Streams  * Support for downloading complete playlist  * Easily Register ``on_download_progress`` &amp; ``on_download_complete`` callbacks  * Command-line Interfaced Included  * Caption Track Support  * Outputs Caption Tracks to .srt format (SubRip Subtitle)  * Ability to Capture Thumbnail URL.  * Extensively Documented Source Code  * No Third-Party Dependencies## UsageLet's begin with showing how easy it is to download a video with pytube:```python&gt;&gt;&gt; from pytube import YouTube&gt;&gt;&gt; YouTube('http://youtube.com/watch?v=9bZkp7q19f0').streams[0].download()```This example will download the highest quality progressive download stream available.Next, let's explore how we would view what video streams are available:```python&gt;&gt;&gt; yt = YouTube('http://youtube.com/watch?v=9bZkp7q19f0')&gt;&gt;&gt; print(yt.streams) [&lt;Stream: itag=&quot;22&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.64001F&quot; acodec=&quot;mp4a.40.2&quot;&gt;, &lt;Stream: itag=&quot;43&quot; mime_type=&quot;video/webm&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp8.0&quot; acodec=&quot;vorbis&quot;&gt;, &lt;Stream: itag=&quot;18&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.42001E&quot; acodec=&quot;mp4a.40.2&quot;&gt;, &lt;Stream: itag=&quot;36&quot; mime_type=&quot;video/3gpp&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;mp4v.20.3&quot; acodec=&quot;mp4a.40.2&quot;&gt;, &lt;Stream: itag=&quot;17&quot; mime_type=&quot;video/3gpp&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;mp4v.20.3&quot; acodec=&quot;mp4a.40.2&quot;&gt;, &lt;Stream: itag=&quot;137&quot; mime_type=&quot;video/mp4&quot; res=&quot;1080p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.640028&quot;&gt;, &lt;Stream: itag=&quot;248&quot; mime_type=&quot;video/webm&quot; res=&quot;1080p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;, &lt;Stream: itag=&quot;136&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401f&quot;&gt;, &lt;Stream: itag=&quot;247&quot; mime_type=&quot;video/webm&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;, &lt;Stream: itag=&quot;135&quot; mime_type=&quot;video/mp4&quot; res=&quot;480p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401e&quot;&gt;, &lt;Stream: itag=&quot;244&quot; mime_type=&quot;video/webm&quot; res=&quot;480p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;, &lt;Stream: itag=&quot;134&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401e&quot;&gt;, &lt;Stream: itag=&quot;243&quot; mime_type=&quot;video/webm&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;, &lt;Stream: itag=&quot;133&quot; mime_type=&quot;video/mp4&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d4015&quot;&gt;, &lt;Stream: itag=&quot;242&quot; mime_type=&quot;video/webm&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;, &lt;Stream: itag=&quot;160&quot; mime_type=&quot;video/mp4&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d400c&quot;&gt;, &lt;Stream: itag=&quot;278&quot; mime_type=&quot;video/webm&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;, &lt;Stream: itag=&quot;140&quot; mime_type=&quot;audio/mp4&quot; abr=&quot;128kbps&quot; acodec=&quot;mp4a.40.2&quot;&gt;, &lt;Stream: itag=&quot;171&quot; mime_type=&quot;audio/webm&quot; abr=&quot;128kbps&quot; acodec=&quot;vorbis&quot;&gt;, &lt;Stream: itag=&quot;249&quot; mime_type=&quot;audio/webm&quot; abr=&quot;50kbps&quot; acodec=&quot;opus&quot;&gt;, &lt;Stream: itag=&quot;250&quot; mime_type=&quot;audio/webm&quot; abr=&quot;70kbps&quot; acodec=&quot;opus&quot;&gt;, &lt;Stream: itag=&quot;251&quot; mime_type=&quot;audio/webm&quot; abr=&quot;160kbps&quot; acodec=&quot;opus&quot;&gt;]```### Selecting an itagYou may notice that some streams listed have both a video codec and audio codec, while others have just video or just audio, this is a result of YouTube supporting a streaming technique called Dynamic Adaptive Streaming over HTTP (DASH).In the context of pytube, the implications are for the highest quality streams; you now need to download both the audio and video tracks and then post-process them with software like FFmpeg to merge them.The legacy streams that contain the audio and video in a single file (referred to as &quot;progressive download&quot;) are still available, but only for resolutions 720p and below.To only view these progressive download streams:```python &gt;&gt;&gt; yt.streams.filter(progressive=True)  [&lt;Stream: itag=&quot;22&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.64001F&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;43&quot; mime_type=&quot;video/webm&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp8.0&quot; acodec=&quot;vorbis&quot;&gt;,  &lt;Stream: itag=&quot;18&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.42001E&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;36&quot; mime_type=&quot;video/3gpp&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;mp4v.20.3&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;17&quot; mime_type=&quot;video/3gpp&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;mp4v.20.3&quot; acodec=&quot;mp4a.40.2&quot;&gt;]```Conversely, if you only want to see the DASH streams (also referred to as &quot;adaptive&quot;) you can do:```python&gt;&gt;&gt; yt.streams.filter(adaptive=True) [&lt;Stream: itag=&quot;137&quot; mime_type=&quot;video/mp4&quot; res=&quot;1080p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.640028&quot;&gt;,  &lt;Stream: itag=&quot;248&quot; mime_type=&quot;video/webm&quot; res=&quot;1080p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;,  &lt;Stream: itag=&quot;136&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401f&quot;&gt;,  &lt;Stream: itag=&quot;247&quot; mime_type=&quot;video/webm&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;,  &lt;Stream: itag=&quot;135&quot; mime_type=&quot;video/mp4&quot; res=&quot;480p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401e&quot;&gt;,  &lt;Stream: itag=&quot;244&quot; mime_type=&quot;video/webm&quot; res=&quot;480p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;,  &lt;Stream: itag=&quot;134&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401e&quot;&gt;,  &lt;Stream: itag=&quot;243&quot; mime_type=&quot;video/webm&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;,  &lt;Stream: itag=&quot;133&quot; mime_type=&quot;video/mp4&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d4015&quot;&gt;,  &lt;Stream: itag=&quot;242&quot; mime_type=&quot;video/webm&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;,  &lt;Stream: itag=&quot;160&quot; mime_type=&quot;video/mp4&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d400c&quot;&gt;,  &lt;Stream: itag=&quot;278&quot; mime_type=&quot;video/webm&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;,  &lt;Stream: itag=&quot;140&quot; mime_type=&quot;audio/mp4&quot; abr=&quot;128kbps&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;171&quot; mime_type=&quot;audio/webm&quot; abr=&quot;128kbps&quot; acodec=&quot;vorbis&quot;&gt;,  &lt;Stream: itag=&quot;249&quot; mime_type=&quot;audio/webm&quot; abr=&quot;50kbps&quot; acodec=&quot;opus&quot;&gt;,  &lt;Stream: itag=&quot;250&quot; mime_type=&quot;audio/webm&quot; abr=&quot;70kbps&quot; acodec=&quot;opus&quot;&gt;,  &lt;Stream: itag=&quot;251&quot; mime_type=&quot;audio/webm&quot; abr=&quot;160kbps&quot; acodec=&quot;opus&quot;&gt;]```### PlaylistsYou can also download a complete Youtube playlist:```python&gt;&gt;&gt; from pytube import Playlist&gt;&gt;&gt; playlist = Playlist(&quot;https://www.youtube.com/playlist?list=PLynhp4cZEpTbRs_PYISQ8v_uwO0_mDg_X&quot;)&gt;&gt;&gt; for video in playlist:&gt;&gt;&gt; video.streams.get_highest_resolution().download()```This will download the highest progressive stream available (generally 720p) from the given playlist.### FilteringPytube allows you to filter on every property available (see the documentation for the complete list), let's take a look at some of the most useful ones.To list the audio only streams:```python&gt;&gt;&gt; yt.streams.filter(only_audio=True)  [&lt;Stream: itag=&quot;140&quot; mime_type=&quot;audio/mp4&quot; abr=&quot;128kbps&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;171&quot; mime_type=&quot;audio/webm&quot; abr=&quot;128kbps&quot; acodec=&quot;vorbis&quot;&gt;,  &lt;Stream: itag=&quot;249&quot; mime_type=&quot;audio/webm&quot; abr=&quot;50kbps&quot; acodec=&quot;opus&quot;&gt;,  &lt;Stream: itag=&quot;250&quot; mime_type=&quot;audio/webm&quot; abr=&quot;70kbps&quot; acodec=&quot;opus&quot;&gt;,  &lt;Stream: itag=&quot;251&quot; mime_type=&quot;audio/webm&quot; abr=&quot;160kbps&quot; acodec=&quot;opus&quot;&gt;]```To list only ``mp4`` streams:```python&gt;&gt;&gt; yt.streams.filter(subtype='mp4') [&lt;Stream: itag=&quot;22&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.64001F&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;18&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.42001E&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;137&quot; mime_type=&quot;video/mp4&quot; res=&quot;1080p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.640028&quot;&gt;,  &lt;Stream: itag=&quot;136&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401f&quot;&gt;,  &lt;Stream: itag=&quot;135&quot; mime_type=&quot;video/mp4&quot; res=&quot;480p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401e&quot;&gt;,  &lt;Stream: itag=&quot;134&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401e&quot;&gt;,  &lt;Stream: itag=&quot;133&quot; mime_type=&quot;video/mp4&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d4015&quot;&gt;,  &lt;Stream: itag=&quot;160&quot; mime_type=&quot;video/mp4&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d400c&quot;&gt;,  &lt;Stream: itag=&quot;140&quot; mime_type=&quot;audio/mp4&quot; abr=&quot;128kbps&quot; acodec=&quot;mp4a.40.2&quot;&gt;]```Multiple filters can also be specified:```python&gt;&gt;&gt; yt.streams.filter(subtype='mp4', progressive=True)&gt;&gt;&gt; # this can also be expressed as:&gt;&gt;&gt; yt.streams.filter(subtype='mp4').filter(progressive=True)  [&lt;Stream: itag=&quot;22&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.64001F&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;18&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.42001E&quot; acodec=&quot;mp4a.40.2&quot;&gt;]```You also have an interface to select streams by their itag, without needing to filter:```python&gt;&gt;&gt; yt.streams.get_by_itag(22)  &lt;Stream: itag=&quot;22&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.64001F&quot; acodec=&quot;mp4a.40.2&quot;&gt;```If you need to optimize for a specific feature, such as the &quot;highest resolution&quot; or &quot;lowest average bitrate&quot;:```python&gt;&gt;&gt; yt.streams.filter(progressive=True).order_by('resolution').desc()```Note: Using ``order_by`` on a given attribute will filter out all streams missing that attribute.### CallbacksIf your application requires post-processing logic, pytube allows you to specify an &quot;on download complete&quot; callback function:```python &gt;&gt;&gt; def convert_to_aac(stream, file_handler):         return  # do work &gt;&gt;&gt; yt.register_on_complete_callback(convert_to_aac)```Similarly, if your application requires on-download progress logic, pytube exposes a callback for this as well:```python &gt;&gt;&gt; def show_progress_bar(stream, chunk, file_handler, bytes_remaining):         return  # do work &gt;&gt;&gt; yt.register_on_progress_callback(show_progress_bar)```## Command-line interfacepytube3 ships with a simple CLI interface for downloading videos, playlists, and captions.Let's start with downloading:```bash$ pytube3 http://youtube.com/watch?v=9bZkp7q19f0 --itag=18```To view available streams:```bash$ pytube3 http://youtube.com/watch?v=9bZkp7q19f0 --list```The complete set of flags are:```usage: pytube3 [-h] [--version] [--itag ITAG] [-r RESOLUTION] [-l] [-v]               [--build-playback-report] [-c [CAPTION_CODE]] [-t TARGET]               [-a [AUDIO]] [-f [FFMPEG]]               [url]Command line application to download youtube videos.positional arguments:  url                   The YouTube /watch or /playlist urloptional arguments:  -h, --help            show this help message and exit  --version             show program's version number and exit  --itag ITAG           The itag for the desired stream  -r RESOLUTION, --resolution RESOLUTION                        The resolution for the desired stream  -l, --list            The list option causes pytube cli to return a list of                        streams available to download  -v, --verbose         Verbosity level, use up to 4 to increase logging -vvvv  --build-playback-report                        Save the html and js to disk  -c [CAPTION_CODE], --caption-code [CAPTION_CODE]                        Download srt captions for given language code. Prints                        available language codes if no argument given  -t TARGET, --target TARGET                        The output directory for the downloaded stream.                        Default is current working directory  -a [AUDIO], --audio [AUDIO]                        Download the audio for a given URL at the highest                        bitrate availableDefaults to mp4 format if none is                        specified  -f [FFMPEG], --ffmpeg [FFMPEG]                        Downloads the audio and video stream for resolution                        providedIf no resolution is provided, downloads the                        best resolutionRuns the command line program ffmpeg to                        combine the audio and video```## Development&lt;a href=&quot;https://deepsource.io/gh/hbmartin/pytube3/?ref=repository-badge&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;DeepSource&quot; title=&quot;DeepSource&quot; src=&quot;https://static.deepsource.io/deepsource-badge-light-mini.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codacy.com/manual/hbmartin/pytube3?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=hbmartin/pytube3&amp;amp;utm_campaign=Badge_Grade&quot;&gt;&lt;img src=&quot;https://api.codacy.com/project/badge/Grade/53794f06983a46829620b3284c6a5596&quot;/&gt;&lt;/a&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.To run code checking before a PR use ``make test``#### Virtual environmentVirtual environment is setup with [pipenv](https://pipenv-fork.readthedocs.io/en/latest/) and can be automatically activated with [direnv](https://direnv.net/docs/installation.html)#### Code FormattingThis project is linted with [pyflakes](https://github.com/PyCQA/pyflakes), formatted with [black](https://github.com/ambv/black), and typed with [mypy](https://mypy.readthedocs.io/en/latest/introduction.html)#### Code of ConductTreat other people with helpfulness, gratitude, and consideration! See the [Python Community Code of Conduct](https://www.python.org/psf/codeofconduct/).## GUIs and other libraries* [YouTubeDownload](https://github.com/YouTubeDownload/YouTubeDownload) - Featured GUI frontend for pytube3* [Pytube-GUI](https://github.com/GAO23/Pytube-GUI) - Simple GUI frontend for pytube3* [StackOverflow questions](https://stackoverflow.com/questions/tagged/pytube)* [PySlackers](https://pyslackers.com/web) - Python Slack group</longdescription>
</pkgmetadata>