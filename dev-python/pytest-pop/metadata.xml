<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**********PYTEST-POP************A pytest plugin to help with testing pop projects**INSTALLATION============Install with pip::    pip install pytest-popDEVELOPMENT INSTALLATION========================Clone the `pytest-pop` repo and install with pip::    git clone https://gitlab.com/saltstack/pop/pytest-pop.git    pip install -e pytest-popGetting the Hub===============Extend the `hub` fixture in your conftest.py so that it includes your subs::    @pytest.fixture(scope=&quot;function&quot;)    def hub(hub):        # TODO Add dynes that will be used for your tests        for dyne in (&quot;exec&quot;, &quot;states&quot;):            hub.pop.sub.add(dyne_name=dyne)            if dyne in (&quot;corn&quot;, &quot;exec&quot;, &quot;states&quot;):                hub.pop.sub.load_subdirs(getattr(hub, dyne), recurse=True)        args = [            # TODO patch in whatever cli args are necessary to run your test        ]        with mock.patch(&quot;sys.argv&quot;, [&quot;pytest-pop&quot;] + args):            hub.pop.config.load([&quot;pytest_pop&quot;], &quot;pytest_pop&quot;)        yield hub        # TODO Hub cleanup        passMarkers=======Make use of pytest markers from `pytest-salt-factoroies &lt;https://github.com/saltstack/pytest-salt-factories/blob/master/saltfactories/plugins/markers.py&gt;`_root----Marks a test as needing elevated privileges.On UNIX-like systems the test will be skipped if the user running the tests is not root.On Windows systems the test will be skipped if the tests aren't run with admin privileges.Example::    @pytest.mark.skip_if_not_root    def test_root(hub):        passexpensive---------Marks a test as being expensive.Run pytest with the '--run-expensive' flag or set the `EXPENSIVE_TESTS` environment variable to &quot;True&quot; to run these tests.By default they will be skippedExample::    @pytest.mark.expensive_test    def test_expensive(hub):        passdestructive-----------Marks a test as being destructive.Run pytest with the '--run-destructive' flag or set the `DESTRUCTIVE_TESTS` environment variable to &quot;True&quot; to run these tests.By default they will be skippedExample::    @pytest.mark.destructive_test    def test_destructive(hub):        passLogging=======You can use the hub to log without setting up a logger in every single file that uses a hubExample::    hub.log.debug(&quot;debug message&quot;)Be sure to run pytest with '--cli-log-level=10' in order to see debug messagesMocking=======Get access to a fully mocked/autospecced version of the hub with::    mock_hub = hub.pop.testing.mock_hub()A mock_hub fixture with common substitutions of real plugins is available as a fixture::    def test_thing(mock_hub):        passExtend the mock hub in your own fixture::    # Scope the mock_hub to a function so that the autospec gets reset after each use.    @pytest.fixture(scope=&quot;function&quot;)    def mock_hub(mock_hub, hub):        # replace mocked functions with necessary real ones        # extend this on a per-module or per-function basis if necessary        mock_hub.sub.func = hub.sub.func        yield mock_hubYou can now do autospec assertions on contracted functions::    import project.sub.plugin as plugin    def test_cmd_run(mock_hub):        plugin.func(mock_hub, &quot;arg&quot;)        mock_hub.sub.plugin.func.assert_called_with(&quot;arg&quot;)ACCT====Some projects, specifically `idem-cloud` need credentials from idem's ctx generator.A ctx fixture exists, but it won't work unless you override the `acct_file` and `acct_profile` fixtures::    @pytest.fixture    def acct_subs() -&gt; List[str]:        return [&quot;azurerm&quot;, &quot;vultr&quot;]    @pytest.fixture    def acct_profile() -&gt; str:        return &quot;test_development_idem_cloud&quot;Once these fixtures are overridden, the `ctx` fixture will become available to your test::    test_cloud_instance_present(hub, ctx):        hub.state.cloud.present(ctx, &quot;instance_name&quot;)Examples========Mock a hub exec function::    with patch.object(mock_hub.exec, 'dummy', return_value=&quot;some result&quot;) as mock_exec:        passSet return value for mock_hub function::    mock_hub.sub.function.return_value = &quot;Pass&quot;Mock hub assert called with::    mock_hub.sub.function.assert_called_with(&quot;myinput&quot;, True)</longdescription>
</pkgmetadata>