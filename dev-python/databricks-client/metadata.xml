<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># databricks-client## AboutA REST client for the [Databricks REST API](https://docs.databricks.com/dev-tools/api/latest/index.html).This module is a thin layer allowing to build HTTP [Requests](https://requests.readthedocs.io/en/master/).It does not expose API operations as distinct methods, but rather exposes generic methods allowingto build API calls.The Databricks API sometimes returns 200 error codes and HTML content when the request is notproperly authenticated. The client intercepts such occurrences (detecting non-JSON returned content)and wraps them into an exception._This open-source project is not developed by nor affiliated with Databricks._## Installing```pip install databricks-client```## Usage```pythonimport databricks_clientclient = databricks_client.create(&quot;https://northeurope.azuredatabricks.net/api/2.0&quot;)client.auth_pat_token(pat_token)client.ensure_available()clusters_list = client.get('clusters/list')for cluster in clusters_list[&quot;clusters&quot;]:    print(cluster)```## Usage with a newly provisioned workspaceIf using this module as part of a provisioning job, you need to call `client.ensure_available()`.When the first user logs it to a new Databricks workspace, workspace provisioning is triggered,and the API is not available until that job has completed (that usually takes under a minute,but could take longer depending on the network configuration). In that case you would get anerror such as the following when calling the API:```&quot;Succeeded{&quot;error_code&quot;:&quot;INVALID_PARAMETER_VALUE&quot;,&quot;message&quot;:&quot;Unknown worker environment WorkerEnvId(workerenv-4312344789891641)&quot;}```The method `client.ensure_available(url=&quot;instance-pools/list&quot;, retries=100, delay_seconds=6)`prevents this error by attempting toconnect to the provided URL and retries as long as the workspace is in provisioningstate, or until the given number of retries has elapsed.## Usage with Azure Active DirectoryNote: Azure AD authentication for Databricks is currently in preview.The client generates short-lived Azure AD tokens. If you need to use your client for longerthan the lifetime (typically 30 minutes), rerun `client.auth_azuread` periodically.### Azure AD authentication with Azure CLI[Install the Azure CLI](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest).```pip install databricks-client[azurecli]az login``````pythonimport databricks_clientclient = databricks_client.create(&quot;https://northeurope.azuredatabricks.net/api/2.0&quot;)client.auth_azuread(&quot;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/my-rg/providers/Microsoft.Databricks/workspaces/my-workspace&quot;)# or client.auth_azuread(resource_group=&quot;my-rg&quot;, workspace_name=&quot;my-workspace&quot;)client.ensure_available()clusters_list = client.get('clusters/list')for cluster in clusters_list[&quot;clusters&quot;]:    print(cluster)```This is recommended with Azure DevOps Pipelines using the [Azure CLI task](https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-cli?view=azure-devops).### Azure AD authentication with ADAL```pip install databricks-clientpip install adal``````pythonimport databricks_clientimport adalauthority_host_uri = 'https://login.microsoftonline.com'authority_uri = authority_host_uri + '/' + tenant_idcontext = adal.AuthenticationContext(authority_uri)def token_callback(resource):    return context.acquire_token_with_client_credentials(resource, client_id, client_secret)[&quot;accessToken&quot;]client = databricks_client.create(&quot;https://northeurope.azuredatabricks.net/api/2.0&quot;)client.auth_azuread(&quot;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/my-rg/providers/Microsoft.Databricks/workspaces/my-workspace&quot;, token_callback)# or client.auth_azuread(resource_group=&quot;my-rg&quot;, workspace_name=&quot;my-workspace&quot;, token_callback=token_callback)client.ensure_available()clusters_list = client.get('clusters/list')for cluster in clusters_list[&quot;clusters&quot;]:    print(cluster)```## Example usages### Generating a PAT token```pythonresponse = client.post(    'token/create',    json={&quot;lifetime_seconds&quot;: 60, &quot;comment&quot;: &quot;Unit Test Token&quot;})pat_token = response['token_value']```### Uploading a notebook```pythonimport base64with open(notebook_file, &quot;rb&quot;) as f:    file_content = f.read()client.post(    'workspace/import',    json={        &quot;content&quot;: base64.b64encode(file_content).decode('ascii'),        &quot;path&quot;: notebook_path,        &quot;overwrite&quot;: False,        &quot;language&quot;: &quot;PYTHON&quot;,        &quot;format&quot;: &quot;SOURCE&quot;    })```</longdescription>
</pkgmetadata>