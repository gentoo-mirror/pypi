<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;  &lt;h1&gt;Cherche&lt;/h1&gt;  &lt;p&gt;Neural search&lt;/p&gt;&lt;/div&gt;&lt;p align=&quot;center&quot;&gt;&lt;img width=300 src=&quot;docs/img/logo.png&quot;/&gt;&lt;/p&gt;&lt;div align=&quot;center&quot;&gt;  &lt;!-- Documentation --&gt;  &lt;a href=&quot;https://raphaelsty.github.io/cherche/&quot;&gt;&lt;img src=&quot;https://img.shields.io/website?label=docs&amp;style=flat-square&amp;url=https%3A%2F%2Fraphaelsty.github.io/cherche/%2F&quot; alt=&quot;documentation&quot;&gt;&lt;/a&gt;  &lt;!-- Demo --&gt;  &lt;a href=&quot;https://raphaelsty.github.io/knowledge/?query=cherche%20neural%20search&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/demo-running-blueviolet?style=flat-square&quot; alt=&quot;Demo&quot;&gt;&lt;/a&gt;  &lt;!-- License --&gt;  &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square&quot; alt=&quot;license&quot;&gt;&lt;/a&gt;&lt;/div&gt;Cherche enables the development of a neural search pipeline that employs retrievers and pre-trained language models both as retrievers and rankers. The primary advantage of Cherche lies in its capacity to construct end-to-end pipelines. Additionally, Cherche is well-suited for offline semantic search due to its compatibility with batch computation.[Live demo of a NLP search engine powered by Cherche](https://raphaelsty.github.io/knowledge/?query=cherche%20neural%20search)![Alt text](docs/img/explain.png)## Installation ü§ñTo install Cherche for use with a simple retriever on CPU, such as TfIdf, Flash, Lunr, Fuzz, use the following command:```shpip install cherche```To install Cherche for use with any semantic retriever or ranker on CPU, use the following command:```shpip install &quot;cherche[cpu]&quot;```Finally, if you plan to use any semantic retriever or ranker on GPU, use the following command:```shpip install &quot;cherche[gpu]&quot;```By following these installation instructions, you will be able to use Cherche with the appropriate requirements for your needs.### DocumentationDocumentation is available [here](https://raphaelsty.github.io/cherche/). It provides detailsabout retrievers, rankers, pipelines and examples.## QuickStart üìë### DocumentsCherche allows findings the right document within a list of objects. Here is an example of a corpus.```pythonfrom cherche import datadocuments = data.load_towns()documents[:3][{'id': 0,  'title': 'Paris',  'url': 'https://en.wikipedia.org/wiki/Paris',  'article': 'Paris is the capital and most populous city of France.'}, {'id': 1,  'title': 'Paris',  'url': 'https://en.wikipedia.org/wiki/Paris',  'article': &quot;Since the 17th century, Paris has been one of Europe's major centres of science, and arts.&quot;}, {'id': 2,  'title': 'Paris',  'url': 'https://en.wikipedia.org/wiki/Paris',  'article': 'The City of Paris is the centre and seat of government of the region and province of √éle-de-France.'  }]```### Retriever rankerHere is an example of a neural search pipeline composed of a TF-IDF that quickly retrieves documents, followed by a ranking model. The ranking model sorts the documents produced by the retriever based on the semantic similarity between the query and the documents. We can call the pipeline using a list of queries and get relevant documents for each query.```pythonfrom cherche import data, retrieve, rankfrom sentence_transformers import SentenceTransformer# List of dictsdocuments = data.load_towns()# Retrieve on fields title and articleretriever = retrieve.TfIdf(key=&quot;id&quot;, on=[&quot;title&quot;, &quot;article&quot;], documents=documents, k=30)# Rank on fields title and articleranker = rank.Encoder(    key = &quot;id&quot;,    on = [&quot;title&quot;, &quot;article&quot;],    encoder = SentenceTransformer(&quot;sentence-transformers/all-mpnet-base-v2&quot;).encode,    k = 3,)# Pipeline creationsearch = retriever + rankersearch.add(documents=documents)# Search documents for 3 queries.search([&quot;Bordeaux&quot;, &quot;Paris&quot;, &quot;Toulouse&quot;])[[{'id': 57, 'similarity': 0.69513524},  {'id': 63, 'similarity': 0.6214994},  {'id': 65, 'similarity': 0.61809087}], [{'id': 16, 'similarity': 0.59158516},  {'id': 0, 'similarity': 0.58217555},  {'id': 1, 'similarity': 0.57944715}], [{'id': 26, 'similarity': 0.6925601},  {'id': 37, 'similarity': 0.63977146},  {'id': 28, 'similarity': 0.62772334}]]```We can map the index to the documents to access their contents using pipelines:```pythonsearch += documentssearch([&quot;Bordeaux&quot;, &quot;Paris&quot;, &quot;Toulouse&quot;])[[{'id': 57,   'title': 'Bordeaux',   'url': 'https://en.wikipedia.org/wiki/Bordeaux',   'similarity': 0.69513524},  {'id': 63,   'title': 'Bordeaux',   'similarity': 0.6214994},  {'id': 65,   'title': 'Bordeaux',   'url': 'https://en.wikipedia.org/wiki/Bordeaux',   'similarity': 0.61809087}], [{'id': 16,   'title': 'Paris',   'url': 'https://en.wikipedia.org/wiki/Paris',   'article': 'Paris received 12.',   'similarity': 0.59158516},  {'id': 0,   'title': 'Paris',   'url': 'https://en.wikipedia.org/wiki/Paris',   'similarity': 0.58217555},  {'id': 1,   'title': 'Paris',   'url': 'https://en.wikipedia.org/wiki/Paris',   'similarity': 0.57944715}], [{'id': 26,   'title': 'Toulouse',   'url': 'https://en.wikipedia.org/wiki/Toulouse',   'similarity': 0.6925601},  {'id': 37,   'title': 'Toulouse',   'url': 'https://en.wikipedia.org/wiki/Toulouse',   'similarity': 0.63977146},  {'id': 28,   'title': 'Toulouse',   'url': 'https://en.wikipedia.org/wiki/Toulouse',   'similarity': 0.62772334}]]```## RetrieveCherche provides [retrievers](https://raphaelsty.github.io/cherche/retrieve/retrieve/) that filter input documents based on a query.- retrieve.TfIdf- retrieve.Lunr- retrieve.Flash- retrieve.Encoder- retrieve.DPR- retrieve.Fuzz- retrieve.Embedding## RankCherche provides [rankers](https://raphaelsty.github.io/cherche/rank/rank/) that filter documents in output of retrievers.Cherche rankers are compatible with [SentenceTransformers](https://www.sbert.net/docs/pretrained_models.html) models which are available on [Hugging Face hub](https://huggingface.co/models?pipeline_tag=zero-shot-classification&amp;sort=downloads).- rank.Encoder- rank.DPR- rank.CrossEncoder- rank.Embedding## Question answeringCherche provides modules dedicated to question answering. These modules are compatible with Hugging Face's pre-trained models and fully integrated into neural search pipelines.## Contributors ü§ùCherche was created for/by Renault and is now available to all.We welcome all contributions.&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;docs/img/renault.jpg&quot;/&gt;&lt;/p&gt;## Acknowledgements üëèTfIdf retriever is a wrapper around [scikit-learn's TfidfVectorizer](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html). Lunr retriever is a wrapper around [Lunr.py](https://github.com/yeraydiazdiaz/lunr.py). Flash retriever is a wrapper around [FlashText](https://github.com/vi3k6i5/flashtext). DPR, Encode and CrossEncoder rankers are wrappers dedicated to the use of the pre-trained models of [SentenceTransformers](https://www.sbert.net/docs/pretrained_models.html) in a neural search pipeline.## CitationsIf you use cherche to produce results for your scientific publication, please refer to our SIGIR paper:```bibtex@inproceedings{Sourty2022sigir,    author = {Raphael Sourty and Jose G. Moreno and Lynda Tamine and Francois-Paul Servant},    title = {CHERCHE: A new tool to rapidly implement pipelines in information retrieval},    booktitle = {Proceedings of SIGIR 2022},    year = {2022}}```## Dev Team üíæThe Cherche dev team is made up of [Rapha√´l Sourty](https://github.com/raphaelsty), [Fran√ßois-Paul Servant](https://github.com/fpservant), [Nicolas Bizzozzero](https://github.com/NicolasBizzozzero), [Jose G Moreno](https://scholar.google.com/citations?user=4BZFUw8AAAAJ&amp;hl=fr). ü•≥</longdescription>
</pkgmetadata>