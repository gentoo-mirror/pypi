<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## OpenSTF+Appium Client for test automation[![Unit tests](https://github.com/OpenTMI/stf-appium-python-client/actions/workflows/test.yml/badge.svg)](https://github.com/OpenTMI/stf-appium-python-client/actions/workflows/test.yml)[![Coverage Status](https://coveralls.io/repos/github/OpenTMI/stf-appium-python-client/badge.svg?branch=main&amp;t=CQV17G)](https://coveralls.io/github/OpenTMI/stf-appium-python-client?branch=main)[![PyPI version](https://badge.fury.io/py/stf-appium-client.svg)](https://badge.fury.io/py/stf-appium-client)Library provides basic functionality for test automation which allows allocatingphone from [OpenSTF](https://github.com/DeviceFarmer/stf) server using [python stf-client](https://pypi.org/project/stf-client/), initialise adb connection to it and start [appium][https://github.com/appium/python-client] server for it.Basic idea is to run tests against remote openstf device farm with minimumrequirements.### Flow```stf-appium-client      --find/allocate--&gt; OpenSTF(device)stf-appium-client      --remoteConnect--&gt; OpenSTF(device)stf-appium-client(ADB) &lt;----------------&gt; OpenSTF(ADB)stf-appium-client(AppiumServer(ADB))stf-appium-client(AppiumClient(AppiumServer))..appium tests..```### Getting StartedThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.### Prerequisites* openstf server and access token * python &gt;=3.7* adb* appium (`npm install appium`)  Library expects that appium is located to PATH  * appium 2 (`npm install appium@next`)    * remember to install appium drivers, e.g. `appium driver install uiautomator2`  * appium 1  * note that appium server and client need to be compatible with each other!### Installing* `pip install stf-appium-client`  or for development purpose:* `pip install -e .`### Running the tests`make test`CI runs tests against following environments:|      | ubuntu-latest | macos-latest | windows-latest ||------| ------------- | ------------- | ------------- || 3.7  | ✓  | ✓  | ✓  || 3.8  | ✓  | ✓  | ✓  || 3.9  | ✓  | ✓  | ✓  || 3.10 | ✓  | ✓  | ✓  |### DeploymentThis pip package could be installed together with test frameworkand utilise using CLI interface or via python interface. See more usage examples below.### usage#### Python Library```client = StfClient(host=environ.get('STF_HOST'))client.connect(token=environ.get('STF_TOKEN'))with client.allocation_context(        requirements=dict(version='10')) as device:    print('phone is now allocated and remote connected')    with AdbServer(device['remote_adb_url']) as adb_port:        print('adb server started with port: {adb_port}')            with AppiumServer() as appium:                print(&quot;Phone is ready for test automation..&quot;)                # appium is running and ready for usage                with AppiumClient() as driver:                   print(driver)```See examples from [examples](examples) -folder.##### LoggingLibrary utilise python native logging module. Logger name is `StfAppiumClient`. By default it configure default console handler for logger with `INFO` level.`STF_APPIUM_LOGGING` env variable can be used to use `DEBUG` logging level.If any handlers for this logger is configured before `StfClient` instance creation no default handlers are added.#### CLI```shell scriptstf --token 123456 --requirements &quot;{\&quot;version\&quot;: \&quot;9\&quot;}&quot; &quot;echo $DEV1_SERIAL&quot;```Call robot framework```shell scriptstf --token 123456 --requirements &quot;{\&quot;version\&quot;: \&quot;9\&quot;}&quot; &quot;robot phone/suite&quot; ``````shell script$ stf --helpusage: stf [-h] --token TOKEN [--host HOST] [--requirements R] [--list]           [command [command ...]]STF client with appium.Tool allocate phone, create adb and appium server and call user given command with generated env variables:DEV1_ADB_PORT      ADB PORT that appium utilize.DEV1_APPIUM_HOST   appium host where user given command can connect, e.g. robot frameworkDEV1_SERIAL        device details..DEV1_VERSIONDEV1_REQUIREMENTS  user given requirementsDEV1_INFO          phone detailsExample: stf --token 123 -- echo \$DEV1_SERIALpositional arguments:  command           Command to be execute during device allocationoptional arguments:  -h, --help          show this help message and exit  --token TOKEN       openstf access token  --host HOST         openstf host  --list              list only requirements, filtered on given requirements  --requirements R    requirements as json string  --timeout t         allocation timeout  --wait_timeout w    max wait time for suitable device allocation  --verbose           appium logs to console. WARNING: this mix console prints  --appium-logs file  appium logs to file```LicenseThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details</longdescription>
</pkgmetadata>