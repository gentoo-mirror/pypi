<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-libzim`libzim` module allows you to read and write [ZIMfiles](https://openzim.org) in Python. It provides a shallow pythoninterface on top of the [C++ `libzim` library](https://github.com/openzim/libzim).It is primarily used in [openZIM](https://github.com/openzim/) scrapers like [`sotoki`](https://github.com/openzim/sotoki) or [`youtube2zim`](https://github.com/openzim/youtube).[![Build Status](https://github.com/openzim/python-libzim/workflows/test/badge.svg?query=branch%3Amain)](https://github.com/openzim/python-libzim/actions?query=branch%3Amain)[![CodeFactor](https://www.codefactor.io/repository/github/openzim/python-libzim/badge)](https://www.codefactor.io/repository/github/openzim/python-libzim)[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)[![PyPI version shields.io](https://img.shields.io/pypi/v/libzim.svg)](https://pypi.org/project/libzim/)[![codecov](https://codecov.io/gh/openzim/python-libzim/branch/main/graph/badge.svg)](https://codecov.io/gh/openzim/python-libzim)## Installation```shpip install libzim```Our [PyPI wheels](https://pypi.org/project/libzim/) bundle a [recent release](https://download.openzim.org/release/libzim/) of the C++ libzim and are available for the following platforms:- macOS for `x86_64` and `arm64`- GNU/Linux for `x86_64`, `armhf` and `aarch64`- Linux+musl for `x86_64` and `aarch64`Wheels are available for both CPython and PyPy.Users on other platforms can install the source distribution (see [Building](#Building) below). ## Contributions```shgit clone git@github.com:openzim/python-libzim.git &amp;&amp; cd python-libzim# python -m venv env &amp;&amp; source env/bin/activatepip install -U setuptools invokeinvoke download-libzim install-dev build-ext test# invoke --list for available development helpers```See [CONTRIBUTING.md](./CONTRIBUTING.md) for additional details then [Open a ticket](https://github.com/openzim/python-libzim/issues/new) or submit a Pull Request on Github ðŸ¤—!## Usage### Read a ZIM file```pythonfrom libzim.reader import Archivefrom libzim.search import Query, Searcherfrom libzim.suggestion import SuggestionSearcherzim = Archive(&quot;test.zim&quot;)print(f&quot;Main entry is at {zim.main_entry.get_item().path}&quot;)entry = zim.get_entry_by_path(&quot;home/fr&quot;)print(f&quot;Entry {entry.title} at {entry.path} is {entry.get_item().size}b.&quot;)print(bytes(entry.get_item().content).decode(&quot;UTF-8&quot;))# searching using full-text indexsearch_string = &quot;Welcome&quot;query = Query().set_query(search_string)searcher = Searcher(zim)search = searcher.search(query)search_count = search.getEstimatedMatches()print(f&quot;there are {search_count} matches for {search_string}&quot;)print(list(search.getResults(0, search_count)))# accessing suggestionssearch_string = &quot;kiwix&quot;suggestion_searcher = SuggestionSearcher(zim)suggestion = suggestion_searcher.suggest(search_string)suggestion_count = suggestion.getEstimatedMatches()print(f&quot;there are {suggestion_count} matches for {search_string}&quot;)print(list(suggestion.getResults(0, suggestion_count)))```### Write a ZIM file```pyfrom libzim.writer import Creator, Item, StringProvider, FileProvider, Hintclass MyItem(Item):    def __init__(self, title, path, content = &quot;&quot;, fpath = None):        super().__init__()        self.path = path        self.title = title        self.content = content        self.fpath = fpath    def get_path(self):        return self.path    def get_title(self):        return self.title    def get_mimetype(self):        return &quot;text/html&quot;    def get_contentprovider(self):        if self.fpath is not None:            return FileProvider(self.fpath)        return StringProvider(self.content)    def get_hints(self):        return {Hint.FRONT_ARTICLE: True}content = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Web Page Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to this ZIM&lt;/h1&gt;&lt;p&gt;Kiwix&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;item = MyItem(&quot;Hello Kiwix&quot;, &quot;home&quot;, content)item2 = MyItem(&quot;Bonjour Kiwix&quot;, &quot;home/fr&quot;, None, &quot;home-fr.html&quot;)with Creator(&quot;test.zim&quot;).config_indexing(True, &quot;eng&quot;) as creator:    creator.set_mainpath(&quot;home&quot;)    creator.add_item(item)    creator.add_item(item2)    for name, value in {        &quot;creator&quot;: &quot;python-libzim&quot;,        &quot;description&quot;: &quot;Created in python&quot;,        &quot;name&quot;: &quot;my-zim&quot;,        &quot;publisher&quot;: &quot;You&quot;,        &quot;title&quot;: &quot;Test ZIM&quot;,    }.items():        creator.add_metadata(name.title(), value)```## Building`libzim` package building offers different behaviors via environment variables| Variable                         | Example                                  | Use case || -------------------------------- | ---------------------------------------- | -------- || `LIBZIM_DL_VERSION`              | `8.1.1` or `2023-04-14`                     | Specify the C++ libzim binary version to download and bundle. Either a release version string or a date, in which case it downloads a nightly || `USE_SYSTEM_LIBZIM`              | `1`                                      | Uses `LDFLAG` and `CFLAGS` to find the libzim to link against. Resulting wheel won't bundle C++ libzim. || `DONT_DOWNLOAD_LIBZIM`           | `1`                                      | Disable downloading of C++ libzim. Place headers in `include/` and libzim dylib/so in `libzim/` if no using system libzim. It will be bundled in wheel. || `PROFILE`                        | `1`                                      | Enable profile tracing in Cython extension. Required for Cython code coverage reporting. || `SIGN_APPLE`                     | `1`                                      | Set to sign and notarize the extension for macOS. Requires following informations || `APPLE_SIGNING_IDENTITY`         | `Developer ID Application: OrgName (ID)` | Required for signing on macOS || `APPLE_SIGNING_KEYCHAIN_PATH`    | `/tmp/build.keychain`                    | Path to the Keychain containing the certificate to sign for macOS with || `APPLE_SIGNING_KEYCHAIN_PROFILE` | `build`                                  | Name of the profile in the specified Keychain |### Examples##### Default: downloading and bundling most appropriate libzim release binary```shpython3 -m build```#### Using system libzim (brew, debian or manually installed) - not bundled```sh# using system-installed C++ libzimbrew install libzim  # macOSapt-get install libzim-devel  # debiandnf install libzim-dev  # fedoraUSE_SYSTEM_LIBZIM=1 python3 -m build --wheel# using a specific C++ libzimUSE_SYSTEM_LIBZIM=1 \CFLAGS=&quot;-I/usr/local/include&quot; \LDFLAGS=&quot;-L/usr/local/lib&quot;DYLD_LIBRARY_PATH=&quot;/usr/local/lib&quot; \LD_LIBRARY_PATH=&quot;/usr/local/lib&quot; \python3 -m build --wheel```#### Other platformsOn platforms for which there is no [official binary](https://download.openzim.org/release/libzim/) available, you'd have to [compile C++ libzim from source](https://github.com/openzim/libzim) first then either use `DONT_DOWNLOAD_LIBZIM` or `USE_SYSTEM_LIBZIM`.## License[GPLv3](https://www.gnu.org/licenses/gpl-3.0) or later, see[LICENSE](LICENSE) for more details.</longdescription>
</pkgmetadata>