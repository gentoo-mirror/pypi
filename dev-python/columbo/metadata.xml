<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CI pipeline status](https://github.com/wayfair-incubator/columbo/workflows/CI/badge.svg?branch=main)][ci][![PyPI](https://img.shields.io/pypi/v/columbo)][pypi][![PyPI - Python Version](https://img.shields.io/pypi/pyversions/columbo)][pypi][![codecov](https://codecov.io/gh/wayfair-incubator/columbo/branch/main/graph/badge.svg)][codecov][![Checked with mypy](https://img.shields.io/badge/mypy-checked-blue)][mypy-home][![Code style: black](https://img.shields.io/badge/code%20style-black-black.svg)][black-home]# ColumboSpecify a dynamic set of questions to ask a user and get their answers.`columbo`'s feature set allows a program to:* Ask multiple types of questions:    * Yes or No    * Multiple choice    * Open-ended* Validate the response provided by the user.* Use answers from earlier questions:    * As part of the text of a question    * As part of the text of a default value    * To decide if a question should be skipped* Accept answers from the command line in addition to prompting the user.## Example### User PromptsThe primary use of `columbo` is to define a sequence of interactions that are used to prompt a user to provide answersusing a terminal. Below is a sample which shows some ways this can be used.```pythonimport columbointeractions = [    columbo.Echo(&quot;Welcome to the Columbo example&quot;),    columbo.Acknowledge(        &quot;Press enter to start&quot;    ),    columbo.BasicQuestion(        &quot;user&quot;,        &quot;What is your name?&quot;,        default=&quot;Patrick&quot;,    ),    columbo.BasicQuestion(        &quot;user_email&quot;,        lambda answers: f&quot;&quot;&quot;What email address should be used to contact {answers[&quot;user&quot;]}?&quot;&quot;&quot;,        default=&quot;me@example.com&quot;    ),    columbo.Choice(        &quot;mood&quot;,        &quot;How are you feeling today?&quot;,        options={            &quot;happy&quot;: &quot;ðŸ˜€&quot;,            &quot;sad&quot;: &quot;ðŸ˜¢&quot;,            &quot;sleepy&quot;: &quot;ðŸ¥±&quot;,            &quot;confused&quot;: &quot;ðŸ¤”&quot;,        },        default=&quot;happy&quot;,    ),    columbo.Confirm(&quot;likes_dogs&quot;, &quot;Do you like dogs?&quot;, default=True),]answers = columbo.get_answers(interactions)print(answers)```Below shows the output when the user accepts the default values for most of the questions. The user provides a differentvalue for the email and explicitly confirms that they like dogs.```textWelcome to the Columbo examplePress enter to start What is your name? [Patrick]:What email address should be used to contact Patrick? [me@example.com]: patrick@example.comHow are you feeling today?1 - ðŸ˜€2 - ðŸ˜¢3 - ðŸ¥±4 - ðŸ¤”Enter the number of your choice [1]:Do you like dogs? (Y/n): y{'user': 'Patrick', 'user_email': 'patrick@example.com', 'mood': 'happy', 'likes_dogs': True}```### Command Line AnswersIn addition to the interactive prompts, `columbo` can also parse command line arguments for interactions. This is done bychanging `columbo.get_answers()` to `columbo.parse_args()`. Below shows the output when using the same interactions from above.```shell$ python columbo_example.py --user-email patrick@example.com --likes-dogs{'user': 'Patrick', 'user_email': 'patrick@example.com', 'mood': 'happy', 'likes_dogs': True}```&lt;details&gt;    &lt;summary&gt;The full example&lt;/summary&gt;```pythonimport columbointeractions = [    columbo.Echo(&quot;Welcome to the Columbo example&quot;),    columbo.Acknowledge(        &quot;Press enter to start&quot;    ),    columbo.BasicQuestion(        &quot;user&quot;,        &quot;What is your name?&quot;,        default=&quot;Patrick&quot;,    ),    columbo.BasicQuestion(        &quot;user_email&quot;,        lambda answers: f&quot;&quot;&quot;What email address should be used to contact {answers[&quot;user&quot;]}?&quot;&quot;&quot;,        default=&quot;me@example.com&quot;    ),    columbo.Choice(        &quot;mood&quot;,        &quot;How are you feeling today?&quot;,        options=[&quot;happy&quot;, &quot;sad&quot;, &quot;sleepy&quot;, &quot;confused&quot;],        default=&quot;happy&quot;,    ),    columbo.Confirm(&quot;likes_dogs&quot;, &quot;Do you like dogs?&quot;, default=True),]answers = columbo.parse_args(interactions)print(answers)```&lt;/details&gt;## DocumentationCheck out the [project documentation][columbo-docs].For an overview on how repository structure and how to work with the code base, read the[Development Guide][development-docs].[ci]: https://github.com/wayfair-incubator/columbo/actions[pypi]: https://pypi.org/project/columbo/[codecov]: https://codecov.io/gh/wayfair-incubator/columbo[mypy-home]: http://mypy-lang.org/[black-home]: https://github.com/psf/black[columbo-docs]: https://wayfair-incubator.github.io/columbo/latest/[development-docs]: https://wayfair-incubator.github.io/columbo/latest/development-guide/</longdescription>
</pkgmetadata>