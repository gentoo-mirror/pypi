<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Simple PlayerDiscover the pinnacle of audio elegance with this `simpleplayer` module, boasting a sophisticated blend of advanced features and seamless compatibility across multiple platforms.&lt;br&gt;## InstallationYou can install the module using pip:```pip install simpleplayer```&lt;br&gt;## Terminal UsageYou can also use the module directly from the terminal:```simpleplayer path/to/your/audio/file.wav```## UsageImport the `simpleplayer` class from the `simpleplayer` module:```pythonfrom simpleplayer import simpleplayer```Create an instance of the AudioPlayer class, providing the filename of the audio file as a parameter:```pythonplayer = simpleplayer('path/to/your/audio/file.wav')```Replace 'path/to/your/audio/file.wav' with the actual path to your audio file.&lt;br&gt;## Play AudioTo start playing the audio, call the play() method:```pythonplayer.play()```&lt;br&gt;## Pause and ResumeYou can pause the audio playback by calling the pause() method:```pythonplayer.pause()```To resume the playback, call the resume() method:        ```pythonplayer.resume()```&lt;br&gt;## Stop AudioTo stop the audio playback, use the stop() method:    ```pythonplayer.stop()```&lt;br&gt;## ExampleHere's an example that demonstrates the usage of the AudioPlayer module:    ```pythonfrom simpleplayer import simpleplayer# Create an instance of AudioPlayerplayer = simpleplayer('path/to/your/audio/file.wav')# Start playing the audioplayer.play()player.wait()# Perform actions or wait for the audio to finish# Pause the audio playbackplayer.pause()# Resume the audio playbackplayer.resume()# Stop the audio playbackplayer.stop()```Remember to replace 'path/to/your/audio/file.wav' with the actual path to your audio file.&lt;br&gt;## [Simple Player Example](https://raw.githubusercontent.com/tantowijh/simple-player-python/main/example.py)&lt;br&gt;&lt;br&gt;# Voice GeneratorThe `voicegen` module allows you to convert text to speech and save it as an audio file using the `gtts` library.To use the `voicegen` module, you need to follow these steps:1. Import the `voicegen` class from the `voicegen` module:    ```python    from simpleplayer import voicegen    ```2. Create an instance of the voicegen class, providing the text, filename, and an optional language parameter:    ```python    voicegen(text, filename, lang='en')    ```    Replace text with the text you want to convert to speech, filename with the desired name of the output audio file, and lang with the language code (default is 'en').3. If the internet connection is available, the text will be converted into speech and saved as an MP3 file with the specified filename.&lt;br&gt;Example usage:```pythonfrom simpleplayer import voicegen# Generate the voicevoicegen(&quot;Hello, world!&quot;, &quot;output&quot;)```This will generate an audio file named output.mp3 containing the speech for the text &quot;Hello, world!&quot;.&lt;br&gt;## Terminal UsageYou can also use the voicegen module directly from the terminal:```voicegen &quot;Hello, world!&quot; output```Replace &quot;Hello, world!&quot; with the desired text and output with the desired filename (without the file extension). The generated audio file will be saved as output.mp3 in the current directory.Note: Ensure that you have a stable internet connection to use the voicegen module successfully.&lt;br&gt;&lt;br&gt;# LICENSEThis project is licensed under the [MIT License](LICENSE) - see the LICENSE file for details.</longdescription>
</pkgmetadata>