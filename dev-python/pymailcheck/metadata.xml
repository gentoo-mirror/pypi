<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pymailcheck===========Suggest corrections to user-misspelled email addresses.Python port of `mailcheck.js &lt;https://github.com/mailcheck/mailcheck/&gt;`_.Installation------------.. code-block:: bash    $ pip install pymailcheckUsage-----.. code-block:: python    &gt;&gt;&gt; import pymailcheck    &gt;&gt;&gt; pymailcheck.suggest(&quot;test@example.con&quot;)    {'domain': 'example.com', 'full': 'test@example.com', 'address': 'test'}    &gt;&gt;&gt; pymailcheck.suggest(&quot;test@example.org&quot;)    FalseYou can override or append the built-in list of domains, top-level domains,and/or second-level domains:=====================  ================================ =========Parameter              Defaults                         Example=====================  ================================ =========domains                pymailcheck.DOMAINS              yahoo.comtop_level_domains      pymailcheck.TOP_LEVEL_DOMAINS    yahoosecond_level_domains   pymailcheck.SECOND_LEVEL_DOMAINS com=====================  ================================ =========.. code-block:: python    &gt;&gt;&gt; pymailcheck.suggest(&quot;test@contosl.com&quot;)    False    &gt;&gt;&gt; custom_domains = [&quot;example.com&quot;, &quot;contoso.com&quot;]    &gt;&gt;&gt; pymailcheck.suggest(&quot;test@contosl.com&quot;, domains=custom_domains)    {'domain': 'contoso.com', 'full': 'test@contoso.com', 'address': 'test'}.. code-block:: python    &gt;&gt;&gt; pymailcheck.suggest(&quot;test@contosl.com&quot;)    False    &gt;&gt;&gt; custom_domains = pymailcheck.DOMAINS.union((&quot;example.com&quot;, &quot;contoso.com&quot;))    &gt;&gt;&gt; pymailcheck.suggest(&quot;test@contosl.com&quot;, domains=custom_domains)    {'domain': 'contoso.com', 'full': 'test@contoso.com', 'address': 'test'}.. code-block:: python    &gt;&gt;&gt; def my_distance_function(s1, s2): ...    &gt;&gt;&gt; # Have a look at `strsim` PyPI package, for example    &gt;&gt;&gt; pymailcheck.suggest(&quot;test@contosl.com&quot;, distance_callable=my_distance_function)    {'domain': 'contoso.com', 'full': 'test@contoso.com', 'address': 'test'}Running Tests-------------.. code-block:: bash    $ python -m unittest discover</longdescription>
</pkgmetadata>