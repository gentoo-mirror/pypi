<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SARIF ToolsA set of command line tools and Python library for working with SARIF files.Read more about the SARIF format here:[sarifweb.azurewebsites.net](https://sarifweb.azurewebsites.net/).## Installation### PrerequisitesYou need Python 3.8 or later installed.  Get it from [python.org](https://www.python.org/downloads/).This document assumes that the `python` command runs that version.### Installing on WindowsOpen a user command prompt and type:```cmdpip install sarif-tools```Check for a warning such as the following:```logWARNING: The script sarif.exe is installed in 'C:\tools\Python38\Scripts' which is not on PATH.```Go into Windows Settings and search for &quot;env&quot; (Edit environment variables for your account) andadd the missing path to your PATH variable.  You'll need to open a new terminal or reboot, andthen you can type `sarif --version` at the command prompt.To install system-wide for all users, use an Administrator command prompt instead, if you arecomfortable with the security risks.### Installing on Linux or Mac```bashpip install sarif-tools```Check for a warning such as the following:```logWARNING: The script sarif is installed in '/home/XYZ/.local/bin' which is not on PATH.```Add the missing path to your PATH.  How to do that varies by Linux flavour, but editing `~/.profile`is often a good approach.  Then after opening a new terminal or running `source ~/.profile`, youshould be able to type `sarif --version` at the command prompt.To install system-wide, use `sudo pip install`.  Be aware that this is discouraged from asecurity perspective.### Testing the installationAfter installing using `pip`, you should then be able to run:```bashsarif --version```### Troubleshooting installationThis section has suggestions in case the `sarif` command is not available after installation.A launcher called `sarif` or `sarif.exe` is created in Python's `Scripts` directory.  The `Scripts`directory needs to be in the `PATH` environment variable for you to be able to type `sarif` at thecommand prompt; this is most likely the case if `pip` is run as a super-user when installing (e.g.Administrator Command Prompt on Windows, or using `sudo` on Linux).If the SARIF tools are installed for the current user only, adding the user's Scripts directory tothe current user's PATH variable is the best approach.  Search online for how to do that on yoursystem.If the `Scripts` directory is not in the `PATH`, then you can type `python -m sarif` instead of`sarif` to run the tool.Confusion can arise when the `python` and `pip` commands on the `PATH` are from differentinstallations, or the `python` installation on the super-user's `PATH` is different from the`python` command on the normal user's path.  On Windows, you can use `where python` and `where pip`in normal CMD and Admin CMD to see which installations are in use; on Linux, it's `which python` and`which pip` with and without `sudo`.## Command Line Usage```plainusage: sarif [-h] [--version] [--debug] [--check {error,warning,note}] {blame,codeclimate,copy,csv,diff,emacs,html,info,ls,summary,trend,usage,word} ...Process sets of SARIF filespositional arguments:  {blame,codeclimate,copy,csv,diff,emacs,html,info,ls,summary,trend,usage,word}                        commandoptional arguments:  -h, --help            show this help message and exit  --version, -v         show program's version number and exit  --debug               Print information useful for debugging  --check {error,warning,note}, -x {error,warning,note}                        Exit with error code if there are any issues of the specified level (or for diff, an increase in issues at that level).commands:blame        Enhance SARIF file with information from `git blame`codeclimate  Write a JSON representation in Code Climate format of SARIF file(s) for viewing as a Code Quality report in GitLab UIcopy         Write a new SARIF file containing optionally-filtered data from other SARIF file(s)csv          Write a CSV file listing the issues from the SARIF files(s) specifieddiff         Find the difference between two [sets of] SARIF filesemacs        Write a representation of SARIF file(s) for viewing in emacshtml         Write an HTML representation of SARIF file(s) for viewing in a web browserinfo         Print information about SARIF file(s) structurels           List all SARIF files in the directories specifiedsummary      Write a text summary with the counts of issues from the SARIF files(s) specifiedtrend        Write a CSV file with time series data from SARIF files with &quot;yyyymmddThhmmssZ&quot; timestamps in their filenamesusage        (Command optional) - print usage and exitword         Produce MS Word .docx summaries of the SARIF files specifiedRun `sarif &lt;COMMAND&gt; --help` for command-specific help.```### CommandsThe commands are illustrated below assuming input files in the following locations:- `C:\temp\sarif_files` = a directory of SARIF files with arbitrary filenames.- `C:\temp\sarif_with_date` = a directory of SARIF files with filenames including timestamps e.g. `C:\temp\sarif_with_date\myapp_devskim_output_20211001T012000Z.sarif`.- `C:\temp\old_sarif_files` = a directory of SARIF files with arbitrary filenames from an older build.- `C:\code\my_source_repo` = checkout directory of source code files from which SARIF results were obtained.#### blame```plainusage: sarif blame [-h] [--output PATH] [--code PATH] [file_or_dir [file_or_dir ...]]Enhance SARIF file with information from `git blame`positional arguments:  file_or_dir           A SARIF file or a directory containing SARIF filesoptional arguments:  -h, --help            show this help message and exit  --output PATH, -o PATH                        Output file or directory  --code PATH, -c PATH  Path to git repository; if not specified, the current working directory is used```Augment SARIF files with `git blame` information, and write the augmented files to a specified location.```shellsarif blame -o &quot;C:\temp\sarif_files_with_blame_info&quot; -c &quot;C:\code\my_source_repo&quot; &quot;C:\temp\sarif_files&quot;```If the current working directory is the git repository, the `-c` argument can be omitted.Blame information is added to the property bag of each `result` object for which it was successfully obtained.  The keys and values used are as in the [git blame porcelain format](https://git-scm.com/docs/git-blame#_the_porcelain_format).  E.g.:```json{  &quot;ruleId&quot;: &quot;SM00702&quot;,  ...  &quot;properties&quot;: {    &quot;blame&quot;: {      &quot;author&quot;: &quot;aperson&quot;,      &quot;author-mail&quot;: &quot;&lt;aperson@acompany.com&gt;&quot;,      &quot;author-time&quot;: &quot;1350899798&quot;,      &quot;author-tz&quot;: &quot;+0000&quot;,      &quot;committer&quot;: &quot;aperson&quot;,      &quot;committer-mail&quot;: &quot;&lt;aperson@acompany.com&gt;&quot;,      &quot;committer-time&quot;: &quot;1350899798&quot;,      &quot;committer-tz&quot;: &quot;+0000&quot;,      &quot;summary&quot;: &quot;blah blah commit comment blah&quot;,      &quot;boundary&quot;: true,      &quot;filename&quot;: &quot;src/net/myproject/mypackage/MyClass.java&quot;    }  }}```Note that the bare `boundary` key is given the automatic value `true`.#### codeclimate```plainusage: sarif codeclimate [-h] [--output PATH] [--filter FILE] [--autotrim] [--trim PREFIX] [file_or_dir ...]Write a JSON representation in Code Climate format of SARIF file(s) for viewing as a Code Quality report in GitLab UIpositional arguments:  file_or_dir           A SARIF file or a directory containing SARIF filesoptional arguments:  -h, --help            show this help message and exit  --output PATH, -o PATH                        Output file or directory  --filter FILE, -b FILE                        Specify the filter file to apply. See README for format.  --autotrim, -a        Strip off the common prefix of paths in the CSV output  --trim PREFIX         Prefix to strip from issue paths, e.g. the checkout directory on the build agent```Write out a JSON file of Code Climate tool format from [a set of] SARIF files.This can then be published as a Code Quality report artefact in a GitLab pipeline and shown in GitLab UI for merge requests.The JSON output can also be filtered using the blame information; see[Filtering](#filtering) below for how to use the `--filter` option.#### copy```plainusage: sarif copy [-h] [--output FILE] [--filter FILE] [--timestamp] [file_or_dir [file_or_dir ...]]Write a new SARIF file containing optionally-filtered data from other SARIF file(s)positional arguments:  file_or_dir           A SARIF file or a directory containing SARIF filesoptional arguments:  -h, --help            show this help message and exit  --output FILE, -o FILE                        Output file  --filter FILE, -b FILE                        Specify the filter file to apply. See README for format.  --timestamp, -t       Append current timestamp to output filename in the &quot;yyyymmddThhmmssZ&quot; format used by the `sarif trend` command```Write a new SARIF file containing optionally-filtered data from an existing SARIF file or multipleSARIF files.  The resulting file contains each run from the original SARIF files back-to-back.The results can be filtered (see [Filtering](#filtering) below), in which case onlythose results from the original SARIF files that meet the filter are included; the output filecontains no information about the excluded records.  If a run in the original file was empty,or all its results are filtered out, the empty run is still included.If no output filename is provided, a file called `out.sarif` in the current directory is written.If the output file already exists and is also in the input file list, it is not included in theinputs, to avoid duplication of results.  The output file is overwritten without warning.The `file_or_dir` specifier can include wildcards e.g. `c:\temp\**\devskim*.sarif` (i.e.a &quot;glob&quot;).  This works for all commands, but it is particularly useful for `copy`.One use for this is to combine a set of SARIF files from multiple static analysis tools run duringa build process into a single file that can be more easily stored and processed as a build asset.#### csv```plainusage: sarif csv [-h] [--output PATH] [--filter FILE] [--autotrim] [--trim PREFIX] [file_or_dir [file_or_dir ...]]Write a CSV file listing the issues from the SARIF files(s) specifiedpositional arguments:  file_or_dir           A SARIF file or a directory containing SARIF filesoptional arguments:  -h, --help            show this help message and exit  --output PATH, -o PATH                        Output file or directory  --filter FILE, -b FILE                        Specify the filter file to apply. See README for format.  --autotrim, -a        Strip off the common prefix of paths in the CSV output  --trim PREFIX         Prefix to strip from issue paths, e.g. the checkout directory on the build agent```Write out a simple tabular list of issues from [a set of] SARIF files.  This can then be analysed, e.g. via Pivot Tables in Excel.Use the `--trim` option to strip specific prefixes from the paths, to make the CSV less verbose.  Alternatively, use `--autotrim` to strip off the longest common prefix.Generate a CSV summary of a single SARIF file with common file path prefix suppressed:```shellsarif csv &quot;C:\temp\sarif_files\devskim_myapp.sarif&quot;```Generate a CSV summary of a directory of SARIF files with path prefix `C:\code\my_source_repo` suppressed:```shellsarif csv --trim c:\code\my_source_repo &quot;C:\temp\sarif_files&quot;```If the SARIF file(s) contain blame information (as added by the `blame` command), then the CSVincludes an &quot;Author&quot; column indicating who last modified the line in question.The CSV output can also be filtered using the same blame information; see[Filtering](#filtering) below for how to use the `--filter` option.#### diff```plainusage: sarif diff [-h] [--output FILE] [--filter FILE] old_file_or_dir new_file_or_dirFind the difference between two [sets of] SARIF filespositional arguments:  old_file_or_dir       An old SARIF file or a directory containing the old SARIF files  new_file_or_dir       A new SARIF file or a directory containing the new SARIF filesoptional arguments:  -h, --help            show this help message and exit  --output FILE, -o FILE                        Output file  --filter FILE, -b FILE                        Specify the filter file to apply. See README for format.```Print the difference between two [sets of] SARIF files.Difference between the issues in two SARIF files:```shellsarif diff &quot;C:\temp\old_sarif_files\devskim_myapp.sarif&quot; &quot;C:\temp\sarif_files\devskim_myapp.sarif&quot;```Difference between the issues in two directories of SARIF files:```shellsarif diff &quot;C:\temp\old_sarif_files&quot; &quot;C:\temp\sarif_files&quot;```Write output to JSON file instead of printing to stdout:```shellsarif diff -o mydiff.json &quot;C:\temp\old_sarif_files\devskim_myapp.sarif&quot; &quot;C:\temp\sarif_files\devskim_myapp.sarif&quot;```The JSON format is like this:```json{    &quot;all&quot;: {        &quot;+&quot;: 5,        &quot;-&quot;: 11    },    &quot;error&quot;: {        &quot;+&quot;: 2,        &quot;-&quot;: 0,        &quot;codes&quot;: {            &quot;XYZ1234 Some Issue&quot;: {                &quot;&lt;&quot;: 0,                &quot;&gt;&quot;: 2,                &quot;+@&quot;: [                    {                        &quot;Location&quot;: &quot;C:\\code\\file1.py&quot;,                        &quot;Line&quot;: 119                    },                    {                        &quot;Location&quot;: &quot;C:\\code\\file2.py&quot;,                        &quot;Line&quot;: 61                    }                ]            },        }    },    &quot;warning&quot;: {        &quot;+&quot;: 3,        &quot;-&quot;: 11,        &quot;codes&quot;: {...}    },    &quot;note&quot;: {        &quot;+&quot;: 3,        &quot;-&quot;: 11,        &quot;codes&quot;: {...}    }}```Where:- &quot;+&quot; indicates new issue types at this severity, &quot;error&quot;, &quot;warning&quot; or &quot;note&quot;- &quot;-&quot; indicates resolved issue types at this severity (no occurrences remaining)- &quot;codes&quot; lists each issue code where the number of occurrences has changed:  - occurrences before indicated by &quot;&lt;&quot;  - occurrences after indicated by &quot;&gt;&quot;  - new locations indicated by &quot;+@&quot;If the set of issue codes at a given severity has changed, diff will report this even if the totalnumber of issue types at that severity is unchanged.When the number of occurrences of an issue code is unchanged, diff will not report this issue code,although it is possible that an equal number of new occurrences of the specific issue have arisen ashave been resolved.  This is to avoid reporting line number changes.The `diff` operation shows the location of new occurrences of each issue.  When writing to anoutput JSON file, all new locations are written, but when writing output to the console, a maximumof three locations are shown.  Note that there can be some false positives here, if line numbershave changed.See [Filtering](#filtering) below for how to use the `--filter` option.#### emacs```plainusage: sarif emacs [-h] [--output PATH] [--filter FILE] [--no-autotrim] [--image IMAGE] [--trim PREFIX] [file_or_dir [file_or_dir ...]]Write a representation of SARIF file(s) for viewing in emacspositional arguments:  file_or_dir           A SARIF file or a directory containing SARIF filesoptional arguments:  -h, --help            show this help message and exit  --output PATH, -o PATH                        Output file or directory  --filter FILE, -b FILE                        Specify the filter file to apply. See README for format.  --no-autotrim, -n     Do not strip off the common prefix of paths in the output document  --image IMAGE         Image to include at top of file - SARIF logo by default  --trim PREFIX         Prefix to strip from issue paths, e.g. the checkout directory on the build agent```#### html```plainusage: sarif html [-h] [--output PATH] [--filter FILE] [--no-autotrim] [--image IMAGE] [--trim PREFIX] [file_or_dir [file_or_dir ...]]Write an HTML representation of SARIF file(s) for viewing in a web browserpositional arguments:  file_or_dir           A SARIF file or a directory containing SARIF filesoptional arguments:  -h, --help            show this help message and exit  --output PATH, -o PATH                        Output file or directory  --filter FILE, -b FILE                        Specify the filter file to apply. See README for format.  --no-autotrim, -n     Do not strip off the common prefix of paths in the output document  --image IMAGE         Image to include at top of file - SARIF logo by default  --trim PREFIX         Prefix to strip from issue paths, e.g. the checkout directory on the build agent```Create an HTML file summarising SARIF results.```shellsarif html -o summary.html &quot;C:\temp\sarif_files&quot;```Use the `--trim` option to strip specific prefixes from the paths, to make the generated HTML page less verbose.  The longest common prefix of the paths will be trimmed unless `--no-autotrim` is specified.Use the `--image` option to provide a header image for the top of the HTML page.  The image is embedded into the HTML, so the HTML document remains a portable standalone file.See [Filtering](#filtering) below for how to use the `--filter` option.#### info```plainusage: sarif info [-h] [--output FILE] [file_or_dir [file_or_dir ...]]Print information about SARIF file(s) structurepositional arguments:  file_or_dir           A SARIF file or a directory containing SARIF filesoptional arguments:  -h, --help            show this help message and exit  --output FILE, -o FILE                        Output file```Print information about the structure of a SARIF file or multiple files.  This is about the JSONstructure rather than any meaning of the results produced by the tool.  The summary includes thefull path of the file, its size and modified date, the number of runs, and for each run, thetool that generated the run, the number of results, and the entries in the results' property bags.```plainc:\temp\sarif_files\ios_devskim_output.sarif  1256241 bytes (1.2 MiB)  modified: 2021-10-13 21:50:01.251544, accessed: 2022-01-09 18:23:00.060573, ctime: 2021-10-13 20:49:00  1 run    Tool: devskim    1323 results    All results have properties: tags, DevSkimSeverity```#### ls```plainusage: sarif ls [-h] [--output FILE] [file_or_dir [file_or_dir ...]]List all SARIF files in the directories specifiedpositional arguments:  file_or_dir           A SARIF file or a directory containing SARIF filesoptional arguments:  -h, --help            show this help message and exit  --output FILE, -o FILE                        Output file```List SARIF files in one or more directories.```shellsarif ls &quot;C:\temp\sarif_files&quot; &quot;C:\temp\sarif_with_date&quot;```#### summary```plainusage: sarif summary [-h] [--output PATH] [--filter FILE] [file_or_dir [file_or_dir ...]]Write a text summary with the counts of issues from the SARIF files(s) specifiedpositional arguments:  file_or_dir           A SARIF file or a directory containing SARIF filesoptional arguments:  -h, --help            show this help message and exit  --output PATH, -o PATH                        Output file or directory  --filter FILE, -b FILE                        Specify the filter file to apply. See README for format.```Print a summary of the issues in one or more SARIF file(s), grouped by severity and then ordered by number of occurrences.When directories are provided as input and output, a summary is written for each input file, along with another file containing the totals.```shellsarif summary -o summaries &quot;C:\temp\sarif_files&quot;```When no output directory or file is specified, the overall summary is printed to the standard output.```shellsarif summary &quot;C:\temp\sarif_files\devskim_myapp.sarif&quot;```See [Filtering](#filtering) below for how to use the `--filter` option.#### trend```plainusage: sarif trend [-h] [--output FILE] [--filter FILE] [--dateformat {dmy,mdy,ymd}] [file_or_dir [file_or_dir ...]]Write a CSV file with time series data from SARIF files with &quot;yyyymmddThhmmssZ&quot; timestamps in their filenamespositional arguments:  file_or_dir           A SARIF file or a directory containing SARIF filesoptional arguments:  -h, --help            show this help message and exit  --output FILE, -o FILE                        Output file  --filter FILE, -b FILE                        Specify the filter file to apply. See README for format.  --dateformat {dmy,mdy,ymd}, -f {dmy,mdy,ymd}                        Date component order to use in output CSV. Default is `dmy````Generate a CSV showing a timeline of issues from a set of SARIF files in a directory.  The SARIF file names must contain atimestamp in the specific format `yyyymmddThhhmmss` e.g. `20211012T110000Z`.The CSV can be loaded in Microsoft Excel for graphing and trend analysis.```shellsarif trend -o timeline.csv &quot;C:\temp\sarif_with_date&quot; --dateformat dmy```See [Filtering](#filtering) below for how to use the `--filter` option.#### upgrade-filter```plainusage: sarif upgrade-filter [-h] [--output PATH] [file [file ...]]Upgrade a v1-style blame filter file to a v2-style filter YAML filepositional arguments:  file                  A v1-style blame-filter fileoptional arguments:  -h, --help            show this help message and exit  --output PATH, -o PATH                        Output file or directory```#### usage```plainusage: sarif usage [-h] [--output FILE](Command optional) - print usage and exitoptional arguments:  -h, --help            show this help message and exit  --output FILE, -o FILE                        Output file```Print usage and exit.#### word```plainusage: sarif word [-h] [--output PATH] [--filter FILE] [--no-autotrim] [--image IMAGE] [--trim PREFIX] [file_or_dir [file_or_dir ...]]Produce MS Word .docx summaries of the SARIF files specifiedpositional arguments:  file_or_dir           A SARIF file or a directory containing SARIF filesoptional arguments:  -h, --help            show this help message and exit  --output PATH, -o PATH                        Output file or directory  --filter FILE, -b FILE                        Specify the filter file to apply. See README for format.  --no-autotrim, -n     Do not strip off the common prefix of paths in the output document  --image IMAGE         Image to include at top of file - SARIF logo by default  --trim PREFIX         Prefix to strip from issue paths, e.g. the checkout directory on the build agent```Create Word documents representing a SARIF file or multiple SARIF files.If directories are provided for the `-o` option and the input, then a Word document is produced for each individual SARIF fileand for the full set of SARIF files.  Otherwise, a single Word document is created.Create a Word document for each SARIF file and one for all of them together, in the `reports` directory (created if non-existent):```shellsarif word -o reports &quot;C:\temp\sarif_files&quot;```Create a Word document for a single SARIF file:```shellsarif word -o &quot;reports\devskim_myapp.docx&quot; &quot;C:\temp\sarif_files\devskim_myapp.sarif&quot;```Use the `--trim` option to strip specific prefixes from the paths, to make the generated documents less verbose.  The longest common prefix of the paths will be trimmed unless `--no-autotrim` is specified.Use the `--image` option to provide a header image for the top of the Word document.See [Filtering](#filtering) below for how to use the `--filter` option.## FilteringThe data in each `result` object can then be used for filtering via the `--filter` option available for various commands.  This option requires a path to a filter-list YAML file, containing a list of patterns and substrings to match against data in a SARIF file.  The format of a filter-list file is as follows:```yaml# Lines beginning with # are interpreted as comments and ignored.# Optional description for the filter.  If no title is specified, the filter file name is used.description: Example filter from README.md# Optional configuration section to override default values.configuration:  # This option controls whether to include results where a property to check is missing, default  # value is true.  default-include: false  # This option only applies filter criteria if the line number is present and not equal to 1.  # Some static analysis tools set the line number to 1 for whole file issues, but this does not  # work with blame filtering, because who last changed line 1 is irrelevant.  Default value is  # true.  check-line-number: true# Items in `include` list are interpreted as inclusion filtering rules.# Items are treated with OR operator, the filtered results includes objects matching any rule.# Each item can be one rule or a list of rules, in the latter case rules in the list are treated# with AND operator - all rules must match.include:  # The following line includes issues whose author-mail property contains &quot;@microsoft.com&quot; AND  # found in Java files.  # Values with special characters `\:;_()$%^@,` must be enclosed in quotes (single or double):  - author-mail: &quot;@microsoft.com&quot;    locations[*].physicalLocation.artifactLocation.uri: &quot;*.java&quot;  # Instead of a substring, a regular expression can be used, enclosed in &quot;/&quot; characters.  # Issues whose committer-mail property includes a string matching the regular expression are included.  # Use ^ and $ to match the whole committer-mail property.  - committer-mail:      value: &quot;/^&lt;myname.*\\.com&gt;$/&quot;      # Configuration options can be overridden for any rule.      default-include: true      check-line-number: true# Lines under `exclude` are interpreted as exclusion filtering rules.exclude:  # The following line excludes issues whose location is in test Java files with names starting with  #  the &quot;Test&quot; prefix.  - location: &quot;Test*.java&quot;  # The value for the property can be empty, in this case only existence of the property is checked.  - suppression:```Here's an example of a filter-file that includes issues on lines changed by an `@microsoft.com` email address or a `myname.SOMETHING.com` email address, but not if those email addresses end in `bot@microsoft.com` or contain a GUID.  It's the same as the above example, with comments stripped out.```yamldescription: Example filter from README.mdconfiguration:  default-include: true  check-line-number: trueinclude:  - author-mail: &quot;@microsoft.com&quot;  - author-mail: &quot;/myname\\..*\\.com/&quot;exclude:  - author-mail: bot@microsoft.com  - author-mail: '/[0-9A-F]{8}[-][0-9A-F]{4}[-][0-9A-F]{4}[-][0-9A-F]{4}[-][0-9A-F]{12}\@microsoft.com/'```Field names must be specified in [JSONPath notation](https://goessner.net/articles/JsonPath/)accessing data in the [SARIF `result` object](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html#_Toc16012594).For commonly used properties the following shortcuts are defined:| Shortcut | Full JSONPath || -------- | -------- || author | properties.blame.author || author-mail | properties.blame.author-mail || committer | properties.blame.committer || committer-mail | properties.blame.committer-mail || location | locations[*].physicalLocation.artifactLocation.uri || rule | ruleId || suppression | suppressions[*].kind |For the property `uri` (e.g. in `locations[*].physicalLocation.artifactLocation.uri`) file name wildcard characters can be used as it represents a file location:- `?` - a single occurrence of any character in a directory or file name- `*` - zero or more occurrences of any character in a directory or file name- `**` - zero or more occurrences across multiple directory levelsE.g.- `tests/Test???.js`- `src/js/*.js`- `src/js/**/*.js`All matching is case insensitive, because email addresses are.  Whitespace at the start and end of lines is ignored, which also means that line ending characters don't matter.  The filter file must be UTF-8 encoded (including plain ASCII7).If there are no inclusion patterns, all issues are included except for those matching the exclusion patterns.  If there are inclusion patterns, only issues matching the inclusion patterns are included.  If an issue matches one or more inclusion patterns and also at least one exclusion pattern, it is excluded.## Usage as a Python libraryAlthough not its primary purpose, you can use sarif-tools from a Python script or module toload and summarise SARIF results.### Basic usage patternAfter installation, use `sarif.loader` to load a SARIF file or files, and then use the operationson the returned `SarifFile` or `SarifFileSet` objects to explore the data.```pythonfrom sarif import loadersarif_data = loader.load_sarif_file(path_to_sarif_file)issue_count_by_severity = sarif_data.get_result_count_by_severity()error_histogram = sarif_data.get_issue_code_histogram(&quot;error&quot;)```### Result access APIThe three classes defined in the `sarif_files` module, `SarifFileSet`, `SarifFile` and `SarifRun`,provide similar APIs, which allows SARIF results to be handled similarly at multiple levels ofaggregation.  This section briefly describes some of the key APIs at the three levels ofaggregation.#### get_distinct_tool_names()Returns a list of distinct tool names in a `SarifFile` or for all files in a `SarifFileSet`.A `SarifRun` has a single tool name so the equivalent method is `get_tool_name()`.#### get_results()Return the list of SARIF results.  These are objects as defined in the[SARIF standard section 3.27](https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317638).#### get_records()Return the list of SARIF results as simplified, flattened record dicts.  Each record has theattributes defined in `sarif_file.RECORD_ATTRIBUTES`.- `&quot;Tool&quot;` - the tool name for the run containing the result.- `&quot;Severity&quot;` - the SARIF severity for the record.  One of `error`, `warning` (the default if the  record doesn't specify) or `note`.- `&quot;Code&quot;` - the issue code from the result.- `&quot;Description&quot;` - the issue name from the result - corresponding to the Code.- `&quot;Location&quot;` - the location of the issue, typically the file containing the issue.  Format varies  by tool.- `&quot;Line&quot;` - the line number in the file where the issue occurs.  Value is a string.  This defaults  to `&quot;1&quot;` if the tool failed to identify the line.#### get_records_grouped_by_severity()As per `get_records()`, but the result is a dict from SARIF severity level (`error`, `warning` and`note`) to the list of records of that severity level.#### get_result_count(), get_result_count_by_severity()Get the total number of SARIF results.  `get_result_count_by_severity()` returns a dict fromSARIF severity level (`error`, `warning` and `note`) to the integer number of results of thatseverity.#### get_issue_code_histogram(severity)For the given severity, get histogram in the form of a list of pairs.  The first item in each pairis the issue code, the second item is the number of matching records, and the list is sorted indecreasing order of frequency (the same as the `sarif summary` command output).#### Disaggregation and filename accessThese fields and methods allow access to the underlying information about the SARIF files.- `SarifFileSet.subdirs` - a list of `SarifFileSet` objects corresponding to the subdirectories of  the directory from which the `SarifFileSet` was created.- `SarifFileSet.files` - a list of `SarifFile` objects corresponding to the SARIF files contained  in the directory from which the `SarifFileSet` was created.- `SarifFile.get_abs_file_path()` - get the absolute path to the SARIF file.- `SarifFile.get_file_name()` - get the name of the SARIF file.- `SarifFile.get_file_name_without_extension()` - get the name of the SARIF file without its  extension.  Useful for constructing derived filenames.- `SarifFile.get_filename_timestamp()` - extract the timestamp from the filename of a SARIF file,  and return it as a string.  The timestamp must be in the format specified in the `sarif trend`  command.- `SarifFile.runs` - a list of `SarifRun` objects contained in the SARIF file.  Most SARIF files  only contain a single run, but it is possible to aggregate runs from multiple tools into a  single SARIF file.#### Path shortening APICall `init_path_prefix_stripping(autotrim, path_prefixes)` on a `SarifFileSet`, `SarifFile` or `SarifRun` object to set up path filtering, either automatically removing the longest common prefix (`autotrim=True`) or removing specific prefixes (`autotrim=False` and a list of strings in `path_prefixes`).#### Filtering APICall `init_general_filter(filter_description, include_filters, exclude_filters)` on a `SarifFileSet`, `SarifFile` or `SarifRun` object to set up filtering.  `filter_description` is a string and the other parameters are lists of inclusion and exclusion rules.  They correspond in an obvious way to the filter file contents described in [Filtering](#filtering) above.Call `get_filter_stats()` to retrieve the filter stats after reading the results or records from sarif files.  It returns `None` if there is no filter, or otherwise a `sarif_file.FilterStats` object with integer fields `filtered_in_result_count`, `filtered_out_result_count`.  Call `to_string()` on the `FilterStats` object for a readable representation of these statistics, which also includes the filter file name or description (`filter_description` field).## Suggested usage in CI pipelinesUsing the `--check` option in combination with the `summary` command causes sarif-tools to exitwith a nonzero exit code if there are any issues of the specified level, or higher.  This canbe useful to fail a continuous integration (CI) pipeline in the case of SAST violation.The SARIF issue levels are `error`, `warning` and `note`.  These are all valid options for the`--check` option.E.g. to fail if there are any errors or warnings:```dossarif --check warning summary c:\temp\sarif_files```The `diff` command can check for any increase in issues of the specified level or above, relativeto a previous or baseline build.E.g. to fail if there are any new issue codes at error level:```dossarif --check error diff c:\temp\old_sarif_files c:\temp\sarif_files```You can also use sarif-tools to filter and consolidate the output from multiple tools.  E.g.```bash# First run your static analysis tools, configured to write SARIF output.  How to do that depends# the tool.# Now run the blame command to augment the output with blame information.sarif blame -o with_blame/myapp_mytool_with_blame.sarif myapp_mytool.sarif# Now combine all tools' output into a single filesarif copy --timestamp -o artifacts/myapp_alltools_with_blame.sarif```Download the file `myapp_alltools_with_blame_TIMESTAMP.sarif` that is generated.  Then later you canfilter the results using the `--filter` argument, or generate graph of code quality over timeusing `sarif trend`.## Creditssarif-tools was originally developed during the Microsoft Global Hackathon 2021 by Simon Abykov, Nick Brabbs, Anthony Hayward, Sivaji Kondapalli, Matt Parkes and Kathryn Pentland.Thank you to everyone who has contributed[pull requests](https://github.com/microsoft/sarif-tools/pulls?q=reason%3Acompleted)since the initial release!</longdescription>
</pkgmetadata>