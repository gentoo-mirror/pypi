<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># slicer [alpha]![License](https://img.shields.io/github/license/interpretml/slicer.svg?style=flat-square)![Python Version](https://img.shields.io/pypi/pyversions/slicer.svg?style=flat-square)![Package Version](https://img.shields.io/pypi/v/slicer.svg?style=flat-square)![Build Status](https://img.shields.io/azure-devops/build/ms/interpret/405/master?style=flat-square)![Coverage](https://img.shields.io/azure-devops/coverage/ms/interpret/405/master.svg?style=flat-square)![Maintenance](https://img.shields.io/maintenance/yes/2020.svg?style=flat-square)*(Equal Contribution) Samuel Jenkins &amp; Harsha Nori &amp; Scott Lundberg***slicer** wraps tensor-like objects and provides a uniform slicing interface via `__getitem__`.&lt;br/&gt;It supports many data types including:&amp;nbsp;&amp;nbsp;[numpy](https://github.com/numpy/numpy) |[pandas](https://github.com/pandas-dev/pandas) |[scipy](https://docs.scipy.org/doc/scipy/reference/sparse.html) |[pytorch](https://github.com/pytorch/pytorch) |[list](https://github.com/python/cpython) |[tuple](https://github.com/python/cpython) |[dict](https://github.com/python/cpython)And enables upgraded slicing functionality on its objects:```python# Handles non-integer indexes for slicing.S(df)[:, [&quot;Age&quot;, &quot;Income&quot;]]# Handles nested slicing in one call.S(nested_list)[..., :5]```It can also simultaneously slice many objects at once:```python# Gets first elements of both objects.S(first=df, second=ar)[0, :]```This package has **0** dependencies. Not even one.## InstallationPython 3.6+ | Linux, Mac, Windows```shpip install slicer```## Getting StartedBasic anonymous slicing:```pythonfrom slicer import Slicer as Sli = [[1, 2, 3], [4, 5, 6]]S(li)[:, 0:2].o# [[1, 2], [4, 5]]di = {'x': [1, 2, 3], 'y': [4, 5, 6]}S(di)[:, 0:2].o# {'x': [1, 2], 'y': [4, 5]}```Basic named slicing:```pythonimport pandas as pdimport numpy as npdf = pd.DataFrame({'A': [1, 3], 'B': [2, 4]})ar = np.array([[5, 6], [7, 8]])sliced = S(first=df, second=ar)[0, :]sliced.first# A    1# B    2# Name: 0, dtype: int64sliced.second# array([5, 6])```Real example:```pythonfrom slicer import Slicer as Sfrom slicer import Alias as Adata = [[1, 2], [3, 4]]values = [[5, 6], [7, 8]]identifiers = [&quot;id1&quot;, &quot;id1&quot;]instance_names = [&quot;r1&quot;, &quot;r2&quot;]feature_names = [&quot;f1&quot;, &quot;f2&quot;]full_name = &quot;A&quot;slicer = S(    data=data,    values=values,    # Aliases are objects that also function as slicing keys.    # A(obj, dim) where dim informs what dimension it can be sliced on.    identifiers=A(identifiers, 0),    instance_names=A(instance_names, 0),    feature_names=A(feature_names, 1),    full_name=full_name,)sliced = slicer[:, 1]  # Tensor-like parallel slicing on all objectsassert sliced.data == [2, 4]assert sliced.instance_names == [&quot;r1&quot;, &quot;r2&quot;]assert sliced.feature_names == &quot;f2&quot;assert sliced.values == [6, 8]sliced = slicer[&quot;r1&quot;, &quot;f2&quot;]  # Example use of aliasingassert sliced.data == 2assert sliced.feature_names == &quot;f2&quot;assert sliced.instance_names == &quot;r1&quot;assert sliced.values == 6```## Contact usRaise an issue on GitHub, or contact us at interpret@microsoft.com</longdescription>
</pkgmetadata>