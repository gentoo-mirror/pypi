<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a id=&quot;mypy-boto3-route53&quot;&gt;&lt;/a&gt;# mypy-boto3-route53[![PyPI - mypy-boto3-route53](https://img.shields.io/pypi/v/mypy-boto3-route53.svg?color=blue)](https://pypi.org/project/mypy-boto3-route53)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-route53.svg?color=blue)](https://pypi.org/project/mypy-boto3-route53)[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/mypy-boto3-route53?color=blue)](https://pypistats.org/packages/mypy-boto3-route53)![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)Type annotations for[boto3.Route53 1.26.56](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/route53.html#Route53)service compatible with [VSCode](https://code.visualstudio.com/),[PyCharm](https://www.jetbrains.com/pycharm/),[Emacs](https://www.gnu.org/software/emacs/),[Sublime Text](https://www.sublimetext.com/),[mypy](https://github.com/python/mypy),[pyright](https://github.com/microsoft/pyright) and other tools.Generated by[mypy-boto3-builder 7.12.3](https://github.com/youtype/mypy_boto3_builder).More information can be found on[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in[mypy-boto3-route53 docs](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_route53/).See how it helps to find and fix potential bugs:![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)- [mypy-boto3-route53](#mypy-boto3-route53)  - [How to install](#how-to-install)    - [VSCode extension](#vscode-extension)    - [From PyPI with pip](#from-pypi-with-pip)  - [How to uninstall](#how-to-uninstall)  - [Usage](#usage)    - [VSCode](#vscode)    - [PyCharm](#pycharm)    - [Emacs](#emacs)    - [Sublime Text](#sublime-text)    - [Other IDEs](#other-ides)    - [mypy](#mypy)    - [pyright](#pyright)  - [Explicit type annotations](#explicit-type-annotations)    - [Client annotations](#client-annotations)    - [Paginators annotations](#paginators-annotations)    - [Waiters annotations](#waiters-annotations)    - [Literals](#literals)    - [Typed dictionaries](#typed-dictionaries)  - [How it works](#how-it-works)  - [What's new](#what's-new)    - [Implemented features](#implemented-features)    - [Latest changes](#latest-changes)  - [Versioning](#versioning)  - [Thank you](#thank-you)  - [Documentation](#documentation)  - [Support and contributing](#support-and-contributing)&lt;a id=&quot;how-to-install&quot;&gt;&lt;/a&gt;## How to install&lt;a id=&quot;vscode-extension&quot;&gt;&lt;/a&gt;### VSCode extensionAdd[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)extension to your VSCode and run `AWS boto3: Quick Start` command.Click `Modify` and select `boto3 common` and `Route53`.&lt;a id=&quot;from-pypi-with-pip&quot;&gt;&lt;/a&gt;### From PyPI with pipInstall `boto3-stubs` for `Route53` service.```bash# install with boto3 type annotationspython -m pip install 'boto3-stubs[route53]'# Lite version does not provide session.client/resource overloads# it is more RAM-friendly, but requires explicit type annotationspython -m pip install 'boto3-stubs-lite[route53]'# standalone installationpython -m pip install mypy-boto3-route53```&lt;a id=&quot;how-to-uninstall&quot;&gt;&lt;/a&gt;## How to uninstall```bashpython -m pip uninstall -y mypy-boto3-route53```&lt;a id=&quot;usage&quot;&gt;&lt;/a&gt;## Usage&lt;a id=&quot;vscode&quot;&gt;&lt;/a&gt;### VSCode- Install  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)- Install  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)- Set `Pylance` as your Python Language Server- Install `boto3-stubs[route53]` in your environment:```bashpython -m pip install 'boto3-stubs[route53]'```Both type checking and code completion should now work. No explicit typeannotations required, write your `boto3` code as usual.&lt;a id=&quot;pycharm&quot;&gt;&lt;/a&gt;### PyCharmInstall `boto3-stubs-lite[route53]` in your environment:```bashpython -m pip install 'boto3-stubs-lite[route53]'````Both type checking and code completion should now work. Explicit typeannotations **are required**.Use `boto3-stubs` package instead for implicit type discovery.&lt;a id=&quot;emacs&quot;&gt;&lt;/a&gt;### Emacs- Install `boto3-stubs` with services you use in your environment:```bashpython -m pip install 'boto3-stubs[route53]'```- Install [use-package](https://github.com/jwiegley/use-package),  [lsp](https://github.com/emacs-lsp/lsp-mode/),  [company](https://github.com/company-mode/company-mode) and  [flycheck](https://github.com/flycheck/flycheck) packages- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package```elisp(use-package lsp-pyright  :ensure t  :hook (python-mode . (lambda ()                          (require 'lsp-pyright)                          (lsp)))  ; or lsp-deferred  :init (when (executable-find &quot;python3&quot;)          (setq lsp-pyright-python-executable-cmd &quot;python3&quot;))  )```- Make sure emacs uses the environment where you have installed `boto3-stubs`Type checking should now work. No explicit type annotations required, writeyour `boto3` code as usual.&lt;a id=&quot;sublime-text&quot;&gt;&lt;/a&gt;### Sublime Text- Install `boto3-stubs[route53]` with services you use in your environment:```bashpython -m pip install 'boto3-stubs[route53]'```- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) packageType checking should now work. No explicit type annotations required, writeyour `boto3` code as usual.&lt;a id=&quot;other-ides&quot;&gt;&lt;/a&gt;### Other IDEsNot tested, but as long as your IDE supports `mypy` or `pyright`, everythingshould work.&lt;a id=&quot;mypy&quot;&gt;&lt;/a&gt;### mypy- Install `mypy`: `python -m pip install mypy`- Install `boto3-stubs[route53]` in your environment:```bashpython -m pip install 'boto3-stubs[route53]'````Type checking should now work. No explicit type annotations required, writeyour `boto3` code as usual.&lt;a id=&quot;pyright&quot;&gt;&lt;/a&gt;### pyright- Install `pyright`: `npm i -g pyright`- Install `boto3-stubs[route53]` in your environment:```bashpython -m pip install 'boto3-stubs[route53]'```Optionally, you can install `boto3-stubs` to `typings` folder.Type checking should now work. No explicit type annotations required, writeyour `boto3` code as usual.&lt;a id=&quot;explicit-type-annotations&quot;&gt;&lt;/a&gt;## Explicit type annotations&lt;a id=&quot;client-annotations&quot;&gt;&lt;/a&gt;### Client annotations`Route53Client` provides annotations for `boto3.client(&quot;route53&quot;)`.```pythonfrom boto3.session import Sessionfrom mypy_boto3_route53 import Route53Clientclient: Route53Client = Session().client(&quot;route53&quot;)# now client usage is checked by mypy and IDE should provide code completion```&lt;a id=&quot;paginators-annotations&quot;&gt;&lt;/a&gt;### Paginators annotations`mypy_boto3_route53.paginator` module contains type annotations for allpaginators.```pythonfrom boto3.session import Sessionfrom mypy_boto3_route53 import Route53Clientfrom mypy_boto3_route53.paginator import (    ListCidrBlocksPaginator,    ListCidrCollectionsPaginator,    ListCidrLocationsPaginator,    ListHealthChecksPaginator,    ListHostedZonesPaginator,    ListQueryLoggingConfigsPaginator,    ListResourceRecordSetsPaginator,    ListVPCAssociationAuthorizationsPaginator,)client: Route53Client = Session().client(&quot;route53&quot;)# Explicit type annotations are optional here# Types should be correctly discovered by mypy and IDEslist_cidr_blocks_paginator: ListCidrBlocksPaginator = client.get_paginator(&quot;list_cidr_blocks&quot;)list_cidr_collections_paginator: ListCidrCollectionsPaginator = client.get_paginator(    &quot;list_cidr_collections&quot;)list_cidr_locations_paginator: ListCidrLocationsPaginator = client.get_paginator(    &quot;list_cidr_locations&quot;)list_health_checks_paginator: ListHealthChecksPaginator = client.get_paginator(&quot;list_health_checks&quot;)list_hosted_zones_paginator: ListHostedZonesPaginator = client.get_paginator(&quot;list_hosted_zones&quot;)list_query_logging_configs_paginator: ListQueryLoggingConfigsPaginator = client.get_paginator(    &quot;list_query_logging_configs&quot;)list_resource_record_sets_paginator: ListResourceRecordSetsPaginator = client.get_paginator(    &quot;list_resource_record_sets&quot;)list_vpc_association_authorizations_paginator: ListVPCAssociationAuthorizationsPaginator = (    client.get_paginator(&quot;list_vpc_association_authorizations&quot;))```&lt;a id=&quot;waiters-annotations&quot;&gt;&lt;/a&gt;### Waiters annotations`mypy_boto3_route53.waiter` module contains type annotations for all waiters.```pythonfrom boto3.session import Sessionfrom mypy_boto3_route53 import Route53Clientfrom mypy_boto3_route53.waiter import ResourceRecordSetsChangedWaiterclient: Route53Client = Session().client(&quot;route53&quot;)# Explicit type annotations are optional here# Types should be correctly discovered by mypy and IDEsresource_record_sets_changed_waiter: ResourceRecordSetsChangedWaiter = client.get_waiter(    &quot;resource_record_sets_changed&quot;)```&lt;a id=&quot;literals&quot;&gt;&lt;/a&gt;### Literals`mypy_boto3_route53.literals` module contains literals extracted from shapesthat can be used in user code for type checking.```pythonfrom mypy_boto3_route53.literals import (    AccountLimitTypeType,    ChangeActionType,    ChangeStatusType,    CidrCollectionChangeActionType,    CloudWatchRegionType,    ComparisonOperatorType,    HealthCheckRegionType,    HealthCheckTypeType,    HostedZoneLimitTypeType,    InsufficientDataHealthStatusType,    ListCidrBlocksPaginatorName,    ListCidrCollectionsPaginatorName,    ListCidrLocationsPaginatorName,    ListHealthChecksPaginatorName,    ListHostedZonesPaginatorName,    ListQueryLoggingConfigsPaginatorName,    ListResourceRecordSetsPaginatorName,    ListVPCAssociationAuthorizationsPaginatorName,    RRTypeType,    ResettableElementNameType,    ResourceRecordSetFailoverType,    ResourceRecordSetRegionType,    ResourceRecordSetsChangedWaiterName,    ReusableDelegationSetLimitTypeType,    StatisticType,    TagResourceTypeType,    VPCRegionType,    Route53ServiceName,    ServiceName,    ResourceServiceName,    PaginatorName,    WaiterName,)def check_value(value: AccountLimitTypeType) -&gt; bool:    ...```&lt;a id=&quot;typed-dictionaries&quot;&gt;&lt;/a&gt;### Typed dictionaries`mypy_boto3_route53.type_defs` module contains structures and shapes assembledto typed dictionaries for additional type checking.```pythonfrom mypy_boto3_route53.type_defs import (    AccountLimitTypeDef,    ActivateKeySigningKeyRequestRequestTypeDef,    ChangeInfoTypeDef,    ResponseMetadataTypeDef,    AlarmIdentifierTypeDef,    AliasTargetTypeDef,    VPCTypeDef,    CidrCollectionChangeTypeDef,    TagTypeDef,    CidrBlockSummaryTypeDef,    CidrCollectionTypeDef,    CidrRoutingConfigTypeDef,    DimensionTypeDef,    CollectionSummaryTypeDef,    CreateCidrCollectionRequestRequestTypeDef,    HostedZoneConfigTypeDef,    DelegationSetTypeDef,    CreateKeySigningKeyRequestRequestTypeDef,    KeySigningKeyTypeDef,    CreateQueryLoggingConfigRequestRequestTypeDef,    QueryLoggingConfigTypeDef,    CreateReusableDelegationSetRequestRequestTypeDef,    CreateTrafficPolicyInstanceRequestRequestTypeDef,    TrafficPolicyInstanceTypeDef,    CreateTrafficPolicyRequestRequestTypeDef,    TrafficPolicyTypeDef,    CreateTrafficPolicyVersionRequestRequestTypeDef,    DNSSECStatusTypeDef,    DeactivateKeySigningKeyRequestRequestTypeDef,    DeleteCidrCollectionRequestRequestTypeDef,    DeleteHealthCheckRequestRequestTypeDef,    DeleteHostedZoneRequestRequestTypeDef,    DeleteKeySigningKeyRequestRequestTypeDef,    DeleteQueryLoggingConfigRequestRequestTypeDef,    DeleteReusableDelegationSetRequestRequestTypeDef,    DeleteTrafficPolicyInstanceRequestRequestTypeDef,    DeleteTrafficPolicyRequestRequestTypeDef,    DisableHostedZoneDNSSECRequestRequestTypeDef,    EnableHostedZoneDNSSECRequestRequestTypeDef,    GeoLocationDetailsTypeDef,    GeoLocationTypeDef,    GetAccountLimitRequestRequestTypeDef,    GetChangeRequestRequestTypeDef,    WaiterConfigTypeDef,    GetDNSSECRequestRequestTypeDef,    GetGeoLocationRequestRequestTypeDef,    GetHealthCheckLastFailureReasonRequestRequestTypeDef,    GetHealthCheckRequestRequestTypeDef,    GetHealthCheckStatusRequestRequestTypeDef,    GetHostedZoneLimitRequestRequestTypeDef,    HostedZoneLimitTypeDef,    GetHostedZoneRequestRequestTypeDef,    GetQueryLoggingConfigRequestRequestTypeDef,    GetReusableDelegationSetLimitRequestRequestTypeDef,    ReusableDelegationSetLimitTypeDef,    GetReusableDelegationSetRequestRequestTypeDef,    GetTrafficPolicyInstanceRequestRequestTypeDef,    GetTrafficPolicyRequestRequestTypeDef,    StatusReportTypeDef,    LinkedServiceTypeDef,    HostedZoneOwnerTypeDef,    PaginatorConfigTypeDef,    ListCidrBlocksRequestRequestTypeDef,    ListCidrCollectionsRequestRequestTypeDef,    ListCidrLocationsRequestRequestTypeDef,    LocationSummaryTypeDef,    ListGeoLocationsRequestRequestTypeDef,    ListHealthChecksRequestRequestTypeDef,    ListHostedZonesByNameRequestRequestTypeDef,    ListHostedZonesByVPCRequestRequestTypeDef,    ListHostedZonesRequestRequestTypeDef,    ListQueryLoggingConfigsRequestRequestTypeDef,    ListResourceRecordSetsRequestRequestTypeDef,    ListReusableDelegationSetsRequestRequestTypeDef,    ListTagsForResourceRequestRequestTypeDef,    ListTagsForResourcesRequestRequestTypeDef,    ListTrafficPoliciesRequestRequestTypeDef,    TrafficPolicySummaryTypeDef,    ListTrafficPolicyInstancesByHostedZoneRequestRequestTypeDef,    ListTrafficPolicyInstancesByPolicyRequestRequestTypeDef,    ListTrafficPolicyInstancesRequestRequestTypeDef,    ListTrafficPolicyVersionsRequestRequestTypeDef,    ListVPCAssociationAuthorizationsRequestRequestTypeDef,    ResourceRecordTypeDef,    TestDNSAnswerRequestRequestTypeDef,    UpdateHostedZoneCommentRequestRequestTypeDef,    UpdateTrafficPolicyCommentRequestRequestTypeDef,    UpdateTrafficPolicyInstanceRequestRequestTypeDef,    ActivateKeySigningKeyResponseTypeDef,    AssociateVPCWithHostedZoneResponseTypeDef,    ChangeCidrCollectionResponseTypeDef,    ChangeResourceRecordSetsResponseTypeDef,    DeactivateKeySigningKeyResponseTypeDef,    DeleteHostedZoneResponseTypeDef,    DeleteKeySigningKeyResponseTypeDef,    DisableHostedZoneDNSSECResponseTypeDef,    DisassociateVPCFromHostedZoneResponseTypeDef,    EnableHostedZoneDNSSECResponseTypeDef,    GetAccountLimitResponseTypeDef,    GetChangeResponseTypeDef,    GetCheckerIpRangesResponseTypeDef,    GetHealthCheckCountResponseTypeDef,    GetHostedZoneCountResponseTypeDef,    GetTrafficPolicyInstanceCountResponseTypeDef,    TestDNSAnswerResponseTypeDef,    HealthCheckConfigTypeDef,    UpdateHealthCheckRequestRequestTypeDef,    AssociateVPCWithHostedZoneRequestRequestTypeDef,    CreateVPCAssociationAuthorizationRequestRequestTypeDef,    CreateVPCAssociationAuthorizationResponseTypeDef,    DeleteVPCAssociationAuthorizationRequestRequestTypeDef,    DisassociateVPCFromHostedZoneRequestRequestTypeDef,    ListVPCAssociationAuthorizationsResponseTypeDef,    ChangeCidrCollectionRequestRequestTypeDef,    ChangeTagsForResourceRequestRequestTypeDef,    ResourceTagSetTypeDef,    ListCidrBlocksResponseTypeDef,    CreateCidrCollectionResponseTypeDef,    CloudWatchAlarmConfigurationTypeDef,    ListCidrCollectionsResponseTypeDef,    CreateHostedZoneRequestRequestTypeDef,    CreateReusableDelegationSetResponseTypeDef,    GetReusableDelegationSetResponseTypeDef,    ListReusableDelegationSetsResponseTypeDef,    CreateKeySigningKeyResponseTypeDef,    CreateQueryLoggingConfigResponseTypeDef,    GetQueryLoggingConfigResponseTypeDef,    ListQueryLoggingConfigsResponseTypeDef,    CreateTrafficPolicyInstanceResponseTypeDef,    GetTrafficPolicyInstanceResponseTypeDef,    ListTrafficPolicyInstancesByHostedZoneResponseTypeDef,    ListTrafficPolicyInstancesByPolicyResponseTypeDef,    ListTrafficPolicyInstancesResponseTypeDef,    UpdateTrafficPolicyInstanceResponseTypeDef,    CreateTrafficPolicyResponseTypeDef,    CreateTrafficPolicyVersionResponseTypeDef,    GetTrafficPolicyResponseTypeDef,    ListTrafficPolicyVersionsResponseTypeDef,    UpdateTrafficPolicyCommentResponseTypeDef,    GetDNSSECResponseTypeDef,    GetGeoLocationResponseTypeDef,    ListGeoLocationsResponseTypeDef,    GetChangeRequestResourceRecordSetsChangedWaitTypeDef,    GetHostedZoneLimitResponseTypeDef,    GetReusableDelegationSetLimitResponseTypeDef,    HealthCheckObservationTypeDef,    HostedZoneTypeDef,    HostedZoneSummaryTypeDef,    ListCidrBlocksRequestListCidrBlocksPaginateTypeDef,    ListCidrCollectionsRequestListCidrCollectionsPaginateTypeDef,    ListCidrLocationsRequestListCidrLocationsPaginateTypeDef,    ListHealthChecksRequestListHealthChecksPaginateTypeDef,    ListHostedZonesRequestListHostedZonesPaginateTypeDef,    ListQueryLoggingConfigsRequestListQueryLoggingConfigsPaginateTypeDef,    ListResourceRecordSetsRequestListResourceRecordSetsPaginateTypeDef,    ListVPCAssociationAuthorizationsRequestListVPCAssociationAuthorizationsPaginateTypeDef,    ListCidrLocationsResponseTypeDef,    ListTrafficPoliciesResponseTypeDef,    ResourceRecordSetTypeDef,    CreateHealthCheckRequestRequestTypeDef,    ListTagsForResourceResponseTypeDef,    ListTagsForResourcesResponseTypeDef,    HealthCheckTypeDef,    GetHealthCheckLastFailureReasonResponseTypeDef,    GetHealthCheckStatusResponseTypeDef,    CreateHostedZoneResponseTypeDef,    GetHostedZoneResponseTypeDef,    ListHostedZonesByNameResponseTypeDef,    ListHostedZonesResponseTypeDef,    UpdateHostedZoneCommentResponseTypeDef,    ListHostedZonesByVPCResponseTypeDef,    ChangeTypeDef,    ListResourceRecordSetsResponseTypeDef,    CreateHealthCheckResponseTypeDef,    GetHealthCheckResponseTypeDef,    ListHealthChecksResponseTypeDef,    UpdateHealthCheckResponseTypeDef,    ChangeBatchTypeDef,    ChangeResourceRecordSetsRequestRequestTypeDef,)def get_structure() -&gt; AccountLimitTypeDef:    return {...}```&lt;a id=&quot;how-it-works&quot;&gt;&lt;/a&gt;## How it worksFully automated[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefullygenerates type annotations for each service, patiently waiting for `boto3`updates. It delivers a drop-in type annotations for you and makes sure that:- All available `boto3` services are covered.- Each public class and method of every `boto3` service gets valid type  annotations extracted from the documentation (blame `botocore` docs if types  are incorrect).- Type annotations include up-to-date documentation.- Link to documentation is provided for every method.- Code is processed by [black](https://github.com/psf/black) and  [isort](https://github.com/PyCQA/isort) for readability.&lt;a id=&quot;what's-new&quot;&gt;&lt;/a&gt;## What's new&lt;a id=&quot;implemented-features&quot;&gt;&lt;/a&gt;### Implemented features- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`  compatibility- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type  annotations for each service- Generated `TypeDefs` for each service- Generated `Literals` for each service- Auto discovery of types for `boto3.client` and `boto3.session` calls- Auto discovery of types for `session.client` and `session.session` calls- Auto discovery of types for `client.get_waiter` and `client.get_paginator`  calls- Auto discovery of types for `ServiceResource` and `Resource` collections- Auto discovery of types for `aiobotocore.Session.create_client` calls&lt;a id=&quot;latest-changes&quot;&gt;&lt;/a&gt;### Latest changesBuilder changelog can be found in[Releases](https://github.com/youtype/mypy_boto3_builder/releases).&lt;a id=&quot;versioning&quot;&gt;&lt;/a&gt;## Versioning`mypy-boto3-route53` version is the same as related `boto3` version and follows[PEP 440](https://www.python.org/dev/peps/pep-0440/) format.&lt;a id=&quot;thank-you&quot;&gt;&lt;/a&gt;## Thank you- [Allie Fitter](https://github.com/alliefitter) for  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),  this package is based on top of his work- [black](https://github.com/psf/black) developers for an awesome formatting  tool- [Timothy Edmund Crosley](https://github.com/timothycrosley) for  [isort](https://github.com/PyCQA/isort) and how flexible it is- [mypy](https://github.com/python/mypy) developers for doing all dirty work  for us- [pyright](https://github.com/microsoft/pyright) team for the new era of typed  Python&lt;a id=&quot;documentation&quot;&gt;&lt;/a&gt;## DocumentationAll services type annotations can be found in[boto3 docs](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_route53/)&lt;a id=&quot;support-and-contributing&quot;&gt;&lt;/a&gt;## Support and contributingThis package is auto-generated. Please reports any bugs or request new featuresin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)repository.</longdescription>
</pkgmetadata>