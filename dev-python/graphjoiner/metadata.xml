<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>GraphJoiner: Implementing GraphQL with joins============================================In the reference GraphQL implementation, resolve functions describe how tofulfil some part of the requested data for each instance of an object.If implemented naively with a SQL backend, this results in the N+1 problem.For instance, given the query:::    {        books(genre: &quot;comedy&quot;) {            title            author {                name            }        }    }A naive GraphQL implementation would issue one SQL query to get the list of allbooks in the comedy genre, and then N queries to get the author of each book(where N is the number of books returned by the first query).There are various solutions proposed to this problem: GraphJoiner suggests thatusing joins is a natural fit for many use cases. For this specific case, we onlyneed to run two queries: one to find the list of all books in the comedy genre,and one to get the authors of books in the comedy genre.Example-------Let's say we have some models defined by SQLAlchemy. A book has an ID, a title,a genre and an author ID. An author has an ID and a name... code-block:: python    from sqlalchemy import Column, Integer, Unicode, ForeignKey    from sqlalchemy.ext.declarative import declarative_base    Base = declarative_base()    class Author(Base):        __tablename__ = &quot;author&quot;        id = Column(Integer, primary_key=True)        name = Column(Unicode, nullable=False)    class Book(Base):        __tablename__ = &quot;book&quot;        id = Column(Integer, primary_key=True)        title = Column(Unicode, nullable=False)        genre = Column(Unicode, nullable=False)        author_id = Column(Integer, ForeignKey(Author.id))We then define object types for the root, books and authors:.. code-block:: python    from graphql import GraphQLInt, GraphQLString, GraphQLArgument    from graphjoiner import JoinType, RootJoinType, single, many, field    from sqlalchemy.orm import Query    def create_root():        def fields():            return {                &quot;books&quot;: many(                    book_join_type,                    books_query,                    args={&quot;genre&quot;: GraphQLArgument(type=GraphQLString)}                )            }        def books_query(args, _):            query = Query([]).select_from(Book)            if &quot;genre&quot; in args:                query = query.filter(Book.genre == args[&quot;genre&quot;])            return query        return RootJoinType(name=&quot;Root&quot;, fields=fields)    root = create_root()    def fetch_immediates_from_database(selections, query, context):        query = query.with_entities(*(            selection.field.column_name            for selection in selections        ))        keys = tuple(selection.key for selection in selections)        return [            dict(zip(keys, row))            for row in query.with_session(context.session).all()        ]    def create_book_join_type():        def fields():            return {                &quot;id&quot;: field(column_name=&quot;id&quot;, type=GraphQLInt),                &quot;title&quot;: field(column_name=&quot;title&quot;, type=GraphQLString),                &quot;genre&quot;: field(column_name=&quot;genre&quot;, type=GraphQLString),                &quot;authorId&quot;: field(column_name=&quot;author_id&quot;, type=GraphQLInt),                &quot;author&quot;: single(author_join_type, author_query, join={&quot;authorId&quot;: &quot;id&quot;}),            }        def author_query(args, book_query):            books = book_query.with_entities(Book.author_id).distinct().subquery()            return Query([]) \                .select_from(Author) \                .join(books, books.c.author_id == Author.id)        return JoinType(            name=&quot;Book&quot;,            fields=fields,            fetch_immediates=fetch_immediates_from_database,        )    book_join_type = create_book_join_type()    def create_author_join_type():        def fields():            return {                &quot;id&quot;: field(column_name=&quot;id&quot;, type=GraphQLInt),                &quot;name&quot;: field(column_name=&quot;name&quot;, type=GraphQLString),            }        return JoinType(            name=&quot;Author&quot;,            fields=fields,            fetch_immediates=fetch_immediates_from_database,        )    author_join_type = create_author_join_type()We can execute the query by calling ``execute``:.. code-block:: python    from graphjoiner import execute    query = &quot;&quot;&quot;        {            books(genre: &quot;comedy&quot;) {                title                author {                    name                }            }        }    &quot;&quot;&quot;    class Context(object):        def __init__(self, session):            self.session = session    execute(root, query, context=Context(session))Which produces:::    {        &quot;books&quot;: [            {                &quot;title&quot;: &quot;Leave It to Psmith&quot;,                &quot;author&quot;: {                    &quot;name&quot;: &quot;PG Wodehouse&quot;                }            },            {                &quot;title&quot;: &quot;Right Ho, Jeeves&quot;,                &quot;author&quot;: {                    &quot;name&quot;: &quot;PG Wodehouse&quot;                }            },            {                &quot;title&quot;: &quot;Catch-22&quot;,                &quot;author&quot;: {                    &quot;name&quot;: &quot;Joseph Heller&quot;                }            },        ]    }Let's break things down a little, starting with the definition of the root object:.. code-block:: python    def create_root():        def fields():            return {                &quot;books&quot;: many(                    book_join_type,                    books_query,                    args={&quot;genre&quot;: GraphQLArgument(type=GraphQLString)}                )            }        def books_query(args, _):            query = Query([]).select_from(Book)            if &quot;genre&quot; in args:                query = query.filter(Book.genre == args[&quot;genre&quot;])            return query        return RootJoinType(name=&quot;Root&quot;, fields=fields)    root = create_root()For each object type, we need to define its fields.The root has only one field, ``books``, a one-to-many relationship,which we define using ``many()``.The first argument, ``book_join_type``,is the type we're defining a relationship to.The second argument to describes how to create a query representing all of thoserelated books: in this case all books, potentially filtered by a genre argument.This means we need to define ``book_join_type``:.. code-block:: python    def create_book_join_type():        def fields():            return {                &quot;id&quot;: field(column_name=&quot;id&quot;, type=GraphQLInt),                &quot;title&quot;: field(column_name=&quot;title&quot;, type=GraphQLString),                &quot;genre&quot;: field(column_name=&quot;genre&quot;, type=GraphQLString),                &quot;authorId&quot;: field(column_name=&quot;author_id&quot;, type=GraphQLInt),                &quot;author&quot;: single(author_join_type, author_query, join={&quot;authorId&quot;: &quot;id&quot;}),            }        def author_query(args, book_query):            books = book_query.with_entities(Book.author_id).distinct().subquery()            return Query([]) \                .select_from(Author) \                .join(books, books.c.author_id == Author.id)        return JoinType(            name=&quot;Book&quot;,            fields=fields,            fetch_immediates=fetch_immediates_from_database,        )    book_join_type = create_book_join_type()The ``author`` field is defined as a one-to-one mapping from book to author.As before, we define a function that generates a query for the requested authors.We also provide a ``join`` argument to ``single()`` so that GraphJoiner knowshow to join together the results of the author query and the book query:in this case, the ``authorId`` field on books corresponds to the ``id`` fieldon authors.(If we leave out the ``join`` argument, then GraphJoiner will perform a crossjoin i.e. a cartesian product. Since there's always exactly one root instance,this is fine for relationships defined on the root.)The remaining fields define a mapping from the GraphQL field to the databasecolumn. This mapping is handled by ``fetch_immediates_from_database``.The value of ``selections`` in``fetch_immediates()`` is the selections of fields that aren't defined as relationships(using ``single`` or ``many``) that were either explicitly requested in theoriginal GraphQL query, or are required as part of the join... code-block:: python    def fetch_immediates_from_database(selections, query, context):        query = query.with_entities(*(            fields[selection.field_name].column_name            for selection in selections        ))        keys = tuple(selection.key for selection in selections)        return [            dict(zip(keys, row))            for row in query.with_session(context.session).all()        ]For completeness, we can tweak the definition of ``author_join_type`` sowe can request the books by an author:.. code-block:: python    def create_author_join_type():        def fields():            return {                &quot;id&quot;: field(column_name=&quot;id&quot;, type=GraphQLInt),                &quot;name&quot;: field(column_name=&quot;name&quot;, type=GraphQLString),                &quot;author&quot;: many(book_join_type, book_query, join={&quot;id&quot;: &quot;authorId&quot;}),            }        def book_query(args, author_query):            authors = author_query.with_entities(Author.id).distinct().subquery()            return Query([]) \                .select_from(Book) \                .join(authors, authors.c.id == Book.author_id)        return JoinType(            name=&quot;Author&quot;,            fields=fields,            fetch_immediates=fetch_immediates_from_database,        )    author_join_type = create_author_join_type()Installation------------::    pip install graphjoiner</longdescription>
</pkgmetadata>