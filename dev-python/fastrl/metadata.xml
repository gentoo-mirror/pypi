<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>fastrl================&lt;!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --&gt;[![CIStatus](https://github.com/josiahls/fastrl/workflows/Fastrl%20Testing/badge.svg)](https://github.com/josiahls/fastrl/actions?query=workflow%3A%22Fastrl+Testing%22)[![pypi fastrlversion](https://img.shields.io/pypi/v/fastrl.svg)](https://pypi.python.org/pypi/fastrl)[![Docker ImageLatest](https://img.shields.io/docker/v/josiahls/fastrl?label=Docker&amp;sort=date.png)](https://hub.docker.com/repository/docker/josiahls/fastrl)[![Docker Image-DevLatest](https://img.shields.io/docker/v/josiahls/fastrl-dev?label=Docker%20Dev&amp;sort=date.png)](https://hub.docker.com/repository/docker/josiahls/fastrl-dev)[![fastrl pythoncompatibility](https://img.shields.io/pypi/pyversions/fastrl.svg)](https://pypi.python.org/pypi/fastrl)[![fastrllicense](https://img.shields.io/pypi/l/fastrl.svg)](https://pypi.python.org/pypi/fastrl)&gt; Warning: This is in alpha, and so uses latest torch and torchdata,&gt; very importantly torchdata. The base API, while at the point of&gt; semi-stability, might be changed in future versions, and so there will&gt; be no promises of backward compatiblity. For the time being, it is&gt; best to hard-pin versions of the library.&gt; Warning: Even before fastrl==2.0.0, all Models should converge&gt; reasonably fast, however HRL models `DADS` and `DIAYN` will need&gt; re-balancing and some extra features that the respective authors used.# OverviewFastai for computer vision and tabular learning has been amazing. Onewould wish that this would be the same for RL. The purpose of this repois to have a framework that is as easy as possible to start, but alsodesigned for testing new agents.This version fo fastrl is basically a wrapper around[torchdata](https://github.com/pytorch/data).It is built around 4 pipeline concepts (half is from fastai):- DataLoading/DataBlock pipelines- Agent pipelines- Learner pipelines- Logger pluginsDocumentation is being served at https://josiahls.github.io/fastrl/ fromdocumentation directly generated via `nbdev` in this repo.Basic DQN example:``` pythonfrom fastrl.loggers.core import *from fastrl.loggers.vscode_visualizers import  *from fastrl.agents.dqn.basic import *from fastrl.agents.dqn.target import *from fastrl.data.block import *from fastrl.envs.gym import *import torch`````` python# Setup Loggerslogger_base = ProgressBarLogger(epoch_on_pipe=EpocherCollector,                 batch_on_pipe=BatchCollector)# Setup up the core NNtorch.manual_seed(0)model = DQN(4,2)# Setup the Agentagent = DQNAgent(model,[logger_base],max_steps=10000)# Setup the DataBlockblock = DataBlock(    GymTransformBlock(agent=agent,nsteps=2,nskips=2,firstlast=True), # We basically merge 2 steps into 1 and skip.     (GymTransformBlock(agent=agent,nsteps=2,nskips=2,firstlast=True,n=100,include_images=True),VSCodeTransformBlock()))dls = L(block.dataloaders(['CartPole-v1']*1))# Setup the Learnerlearner = DQNLearner(model,dls,logger_bases=[logger_base],bs=128,max_sz=20_000,nsteps=2,lr=0.001,                     batches=1000,                    dp_augmentation_fns=[                        # Plugin TargetDQN code                        TargetModelUpdater.insert_dp(),                        TargetModelQCalc.replace_dp()                    ])learner.fit(10)#learner.validate()```# Whats new?As we have learned how to support as many RL agents as possible, wefound that `fastrl==1.*` was vastly limited in the models that it cansupport. `fastrl==2.*` will leverage the `nbdev` library for betterdocumentation and more relevant testing, and `torchdata` is the baselib. We also will be building on the work of the `ptan`&lt;sup&gt;1&lt;/sup&gt;library as a close reference for pytorch based reinforcement learningAPIs.&lt;sup&gt;1&lt;/sup&gt; “Shmuma/Ptan”. Github, 2020,https://github.com/Shmuma/ptan. Accessed 13 June 2020.## Install## PyPIBelow will install the alpha build of fastrl.**Cuda Install**`pip install fastrl==0.0.* --pre --extra-index-url https://download.pytorch.org/whl/nightly/cu113`**Cpu Install**`pip install fastrl==0.0.* --pre --extra-index-url https://download.pytorch.org/whl/nightly/cpu`## Docker (highly recommend)Install:[Nvidia-Docker](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker)Install: [docker-compose](https://docs.docker.com/compose/install/)``` bashdocker-compose pull &amp;&amp; docker-compose up```## ContributingAfter you clone this repository, please run `nbdev_install_hooks` inyour terminal. This sets up git hooks, which clean up the notebooks toremove the extraneous stuff stored in the notebooks (e.g. which cellsyou ran) which causes unnecessary merge conflicts.Before submitting a PR, check that the local library and notebooksmatch. The script `nbdev_clean` can let you know if there is adifference between the local library and the notebooks. \* If you made achange to the notebooks in one of the exported cells, you can export itto the library with `nbdev_build_lib` or `make fastai2`. \* If you madea change to the library, you can export it back to the notebooks with`nbdev_update_lib`.</longdescription>
</pkgmetadata>