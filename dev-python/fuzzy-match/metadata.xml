<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Fuzzy-MatchFuzzy string matching in Python. By default it uses [Trigrams](https://en.wikipedia.org/wiki/Trigram) to calculate a similarity score and find matches by splitting strings into ngrams with a length of 3. The length of the ngram can be altered if desired. Also, [Cosine](https://en.wikipedia.org/wiki/Cosine_similarity), [Levenshtein Distance](https://en.wikipedia.org/wiki/Levenshtein_distance), and [Jaro-Winkler Distance](https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance) algorithims are also available as alternatives.# Usage```python&gt;&gt;&gt; from fuzzy_match import match&gt;&gt;&gt; from fuzzy_match import algorithims```### Trigram```python&gt;&gt;&gt; algorithims.trigram(&quot;this is a test string&quot;, &quot;this is another test string&quot;)    0.703704```### Cosine```python&gt;&gt;&gt; algorithims.cosine(&quot;this is a test string&quot;, &quot;this is another test string&quot;)    0.7999999999999998```### Levenshtein```python&gt;&gt;&gt; algorithims.levenshtein(&quot;this is a test string&quot;, &quot;this is another test string&quot;)    0.7777777777777778```### Jaro-Winkler```python&gt;&gt;&gt; algorithims.jaro_winkler(&quot;this is a test string&quot;, &quot;this is another test string&quot;)    0.798941798941799```### Match```python&gt;&gt;&gt; choices = [&quot;simple strings&quot;, &quot;strings are simple&quot;, &quot;sim string&quot;, &quot;string to match&quot;, &quot;matching simple strings&quot;, &quot;matching strings again&quot;]&gt;&gt;&gt; match.extract(&quot;simple string&quot;, choices, limit=2)    [('simple strings', 0.8), ('sim string', 0.642857)]&gt;&gt;&gt; match.extractOne(&quot;simple string&quot;, choices)    ('simple strings', 0.8)```You can also pass additional arguments to `extract` and `extractOne` to set a score cutoff value or use one of the other algorithims mentioned above. Here is an example:```python&gt;&gt;&gt; match.extract(&quot;simple string&quot;, choices, match_type='levenshtein', score_cutoff=0.7)    [('simple strings', 0.9285714285714286), ('sim string', 0.7692307692307693)]````match_type` options include `trigram`, `cosine`, `levenshtein`, `jaro_winkler`</longdescription>
</pkgmetadata>