<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># nbresultA simple package to test Jupyter notebook result for the Le Wagon's Data Science Bootcamp.## 1. InstallationInstallation with `pip` from [Pypi](https://pypi.org/):```bashpip install nbresult```## 2. Usage### 2.1 Basic usageConsidering the default data challenge architecture:```bash.├── challenge.ipynb├── Makefile├── README.md├── data│   └── data.csv└── tests    └── __init__.py```If you want to test a variable `log_model_score` from the `challenge.ipynb` notebook with `pytest`:![variable](img/variable.png)Anywhere in the notebook you can add a cell with the following code:```pythonfrom nbresult import ChallengeResultresult = ChallengeResult('score',    score=log_model_score)result.write()```This outputs a `score.pickle` file in the `tests` directory:```bash.├── challenge.ipynb├── Makefile├── README.md├── data│   └── data.csv└── tests    ├── __init__.py    └── score.pickle```Now you would like to write test on the `log_model_score` with `pytest`. Create a `test_score.py` file:```python# tests/test_score.pyfrom nbresult import ChallengeResultTestCaseclass TestScore(ChallengeResultTestCase):    def test_score_is_above_82(self):        self.assertEqual(self.result.score &gt; 0.82, True)```Finally you can run your tests with `pytest`:```bashpytest tests/test_score.py```![pytest](img/pytest_check.png)ORRun the tests with `make`:- Setup a `Makefile````make# Makefiledefault: pytestpytest:  PYTHONDONTWRITEBYTECODE=1 pytest -v --color=yes```- Run `make`![make](img/make_check.png)ORRun the tests inside the notebook:```pythonfrom nbresult import ChallengeResultresult = ChallengeResult('score',    score=log_model_score)result.write()print(result.check())```![notebook](img/notebook_check.png)### 2.2 Advanced usageFor more advanced folder structure, you also can specify a `subdir` folder in which store &amp; read pickle file```pythonfrom nbresult import ChallengeResultresult = ChallengeResult('score',    subdir='a', # This will store pickle in tests/a/score.pickle    score=log_model_score)result.write()result.check()```Check out detailed example below![subdir](img/subdir_demo.png)## TestingRun `make`</longdescription>
</pkgmetadata>