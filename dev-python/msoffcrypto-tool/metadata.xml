<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># msoffcrypto-tool[![PyPI](https://img.shields.io/pypi/v/msoffcrypto-tool.svg)](https://pypi.org/project/msoffcrypto-tool/)[![PyPI downloads](https://img.shields.io/pypi/dm/msoffcrypto-tool.svg)](https://pypistats.org/packages/msoffcrypto-tool)[![build](https://github.com/nolze/msoffcrypto-tool/actions/workflows/ci.yaml/badge.svg)](https://github.com/nolze/msoffcrypto-tool/actions/workflows/ci.yaml)[![Coverage Status](https://codecov.io/gh/nolze/msoffcrypto-tool/branch/master/graph/badge.svg)](https://codecov.io/gh/nolze/msoffcrypto-tool)[![Documentation Status](https://readthedocs.org/projects/msoffcrypto-tool/badge/?version=latest)](http://msoffcrypto-tool.readthedocs.io/en/latest/?badge=latest)msoffcrypto-tool (formerly ms-offcrypto-tool) is Python tool and library for decrypting encrypted MS Office files with password, intermediate key, or private key which generated its escrow key.## Contents* [Install](#install)* [Examples](#examples)* [Supported encryption methods](#supported-encryption-methods)* [Tests](#tests)* [Todo](#todo)* [Resources](#resources)* [Use cases and mentions](#use-cases-and-mentions)* [Contributors](#contributors)## Install```pip install msoffcrypto-tool```## Examples### As CLI tool (with password)```msoffcrypto-tool encrypted.docx decrypted.docx -p Passw0rd```Password is prompted if you omit the password argument value:```bash$ msoffcrypto-tool encrypted.docx decrypted.docx -pPassword:```Test if the file is encrypted or not (exit code 0 or 1 is returned):```msoffcrypto-tool document.doc --test -v```### As libraryPassword and more key types are supported with library functions.Basic usage:```pythonimport msoffcryptoencrypted = open(&quot;encrypted.docx&quot;, &quot;rb&quot;)file = msoffcrypto.OfficeFile(encrypted)file.load_key(password=&quot;Passw0rd&quot;)  # Use passwordwith open(&quot;decrypted.docx&quot;, &quot;wb&quot;) as f:    file.decrypt(f)encrypted.close()```Basic usage (in-memory):```pythonimport msoffcryptoimport ioimport pandas as pddecrypted = io.BytesIO()with open(&quot;encrypted.xlsx&quot;, &quot;rb&quot;) as f:    file = msoffcrypto.OfficeFile(f)    file.load_key(password=&quot;Passw0rd&quot;)  # Use password    file.decrypt(decrypted)df = pd.read_excel(decrypted)print(df)```Advanced usage:```python# Verify password before decryption (default: False)# The ECMA-376 Agile/Standard crypto system allows one to know whether the supplied password is correct before actually decrypting the file# Currently, the verify_password option is only meaningful for ECMA-376 Agile/Standard Encryptionfile.load_key(password=&quot;Passw0rd&quot;, verify_password=True)# Use private keyfile.load_key(private_key=open(&quot;priv.pem&quot;, &quot;rb&quot;))# Use intermediate key (secretKey)file.load_key(secret_key=binascii.unhexlify(&quot;AE8C36E68B4BB9EA46E5544A5FDB6693875B2FDE1507CBC65C8BCF99E25C2562&quot;))# Check the HMAC of the data payload before decryption (default: False)# Currently, the verify_integrity option is only meaningful for ECMA-376 Agile Encryptionfile.decrypt(open(&quot;decrypted.docx&quot;, &quot;wb&quot;), verify_integrity=True)```## Supported encryption methods### MS-OFFCRYPTO specs* [x] ECMA-376 (Agile Encryption/Standard Encryption)  * [x] MS-DOCX (OOXML) (Word 2007-2016)  * [x] MS-XLSX (OOXML) (Excel 2007-2016)  * [x] MS-PPTX (OOXML) (PowerPoint 2007-2016)* [x] Office Binary Document RC4 CryptoAPI  * [x] MS-DOC (Word 2002, 2003, 2004)  * [x] MS-XLS (Excel 2002, 2003, 2004) (experimental)  * [x] MS-PPT (PowerPoint 2002, 2003, 2004) (partial, experimental)* [x] Office Binary Document RC4  * [x] MS-DOC (Word 97, 98, 2000)  * [x] MS-XLS (Excel 97, 98, 2000) (experimental)* [ ] ECMA-376 (Extensible Encryption)* [ ] XOR Obfuscation### Other* [ ] Word 95 Encryption (Word 95 and prior)* [ ] Excel 95 Encryption (Excel 95 and prior)* [ ] PowerPoint 95 Encryption (PowerPoint 95 and prior)PRs are welcome!## TestsWith [coverage](https://github.com/nedbat/coveragepy) and [pytest](https://pytest.org/):```poetry installpoetry run coverage run -m pytest -v```## Todo* [x] Add tests* [x] Support decryption with passwords* [x] Support older encryption schemes* [x] Add function-level tests* [x] Add API documents* [x] Publish to PyPI* [x] Add decryption tests for various file formats* [x] Integrate with more comprehensive projects handling MS Office files (such as [oletools](https://github.com/decalage2/oletools/)?) if possible* [x] Add the password prompt mode for CLI* [x] Improve error types (v4.12.0)* [ ] Redesign APIs (v6.0.0)* [ ] Introduce something like `ctypes.Structure`* [ ] Support encryption* [ ] Isolate parser## Resources* &quot;Backdooring MS Office documents with secret master keys&quot; &lt;http://secuinside.com/archive/2015/2015-1-9.pdf&gt;* Technical Documents &lt;https://msdn.microsoft.com/en-us/library/cc313105.aspx&gt;  * [MS-OFFCRYPTO] Agile Encryption &lt;https://msdn.microsoft.com/en-us/library/dd949735(v=office.12).aspx&gt;* [MS-OFFDI] Microsoft Office File Format Documentation Introduction &lt;https://learn.microsoft.com/en-us/openspecs/office_file_formats/ms-offdi/24ed256c-eb5b-494e-b4f6-fb696ad2b4dc&gt;* LibreOffice/core &lt;https://github.com/LibreOffice/core&gt;* LibreOffice/mso-dumper &lt;https://github.com/LibreOffice/mso-dumper&gt;* wvDecrypt &lt;http://www.skynet.ie/~caolan/Packages/wvDecrypt.html&gt;* Microsoft Office password protection - Wikipedia &lt;https://en.wikipedia.org/wiki/Microsoft_Office_password_protection#History_of_Microsoft_Encryption_password&gt;* office2john.py &lt;https://github.com/magnumripper/JohnTheRipper/blob/bleeding-jumbo/run/office2john.py&gt;## Alternatives* herumi/msoffice &lt;https://github.com/herumi/msoffice&gt;* DocRecrypt &lt;https://blogs.technet.microsoft.com/office_resource_kit/2013/01/23/now-you-can-reset-or-remove-a-password-from-a-word-excel-or-powerpoint-filewith-office-2013/&gt;* Apache POI - the Java API for Microsoft Documents &lt;https://poi.apache.org/&gt;## Use cases and mentions### General* &lt;https://repology.org/project/python:msoffcrypto-tool/versions&gt; (kudos to maintainers!)* &lt;https://checkroth.com/unlocking-password-protected-files.html&gt;### Malware/maldoc analysis* &lt;https://github.com/jbremer/sflock/commit/3f6a96abe1dbb4405e4fb7fd0d16863f634b09fb&gt;* &lt;https://isc.sans.edu/forums/diary/Video+Analyzing+Encrypted+Malicious+Office+Documents/24572/&gt;### CTF* &lt;https://github.com/shombo/cyberstakes-writeps-2018/tree/master/word_up&gt;* &lt;https://github.com/willi123yao/Cyberthon2020_Writeups/blob/master/csit/Lost_Magic&gt;### In other languages* &lt;https://github.com/dtjohnson/xlsx-populate&gt;* &lt;https://github.com/opendocument-app/OpenDocument.core/blob/233663b039/src/internal/ooxml/ooxml_crypto.h&gt;* &lt;https://github.com/jaydadhania08/PHPDecryptXLSXWithPassword&gt;### In publications* [Excel、データ整理＆分析、画像処理の自動化ワザを完全網羅！ 超速Python仕事術大全](https://books.google.co.jp/books?id=TBdVEAAAQBAJ&amp;q=msoffcrypto) (伊沢剛, 2022)* [&quot;Analyse de documents malveillants en 2021&quot;](https://twitter.com/decalage2/status/1435255507846053889), MISC Hors-série N° 24, &quot;Reverse engineering : apprenez à analyser des binaires&quot; (Lagadec Philippe, 2021)* [シゴトがはかどる Python自動処理の教科書](https://books.google.co.jp/books?id=XEYUEAAAQBAJ&amp;q=msoffcrypto) (クジラ飛行机, 2020)## Contributors* &lt;https://github.com/nolze/msoffcrypto-tool/graphs/contributors&gt;</longdescription>
</pkgmetadata>