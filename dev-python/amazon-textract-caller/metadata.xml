<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Textract-Calleramazon-textract-caller provides a collection of ready to use functions and sample implementations to speed up the evaluation and development for any project using Amazon Textract.Making it easy to call Amazon Textract regardless of file type and location.## Install```bash&gt; python -m pip install amazon-textract-caller```## Functions```pythonfrom textractcaller import call_textractdef call_textract(input_document: Union[str, bytes],                  features: Optional[List[Textract_Features]] = None,                  queries_config: Optional[QueriesConfig] = None,                  output_config: Optional[OutputConfig] = None,                  adapters_config: Optional[AdaptersConfig] = None,                  kms_key_id: str = &quot;&quot;,                  job_tag: str = &quot;&quot;,                  notification_channel: Optional[NotificationChannel] = None,                  client_request_token: str = &quot;&quot;,                  return_job_id: bool = False,                  force_async_api: bool = False,                  call_mode: Textract_Call_Mode = Textract_Call_Mode.DEFAULT,                  boto3_textract_client=None,                  job_done_polling_interval=1) -&gt; dict:```Also useful when receiving the JSON response from an asynchronous job (start_document_text_detection or start_document_analysis)```pythonfrom textractcaller import get_full_jsondef get_full_json(job_id: str = None,                  textract_api: Textract_API = Textract_API.DETECT,                  boto3_textract_client=None)-&gt;dict:```And when receiving the JSON from the OutputConfig location, this method is useful as well.```pythonfrom textractcaller import get_full_json_from_output_configdef get_full_json_from_output_config(output_config: OutputConfig = None,                                     job_id: str = None,                                     s3_client = None)-&gt;dict:```## Samples### Calling with file from local filesystem only with detect_text```pythontextract_json = call_textract(input_document=&quot;/folder/local-filesystem-file.png&quot;)```### Calling with file from local filesystem only detect_text and using in Textract Response Parser(needs trp dependency through ```python -m pip install amazon-textract-response-parser```)```pythonimport jsonfrom trp import Documentfrom textractcaller import call_textracttextract_json = call_textract(input_document=&quot;/folder/local-filesystem-file.png&quot;)d = Document(textract_json)```### Calling with Queries for a multi-page document and extract the Answerssample also uses the amazon-textract-response-parser```python -m pip install amazon-textract-caller amazon-textract-response-parser``````pythonimport textractcaller as tcimport trp.trp2 as t2import boto3textract = boto3.client('textract', region_name=&quot;us-east-2&quot;)q1 = tc.Query(text=&quot;What is the employee SSN?&quot;, alias=&quot;SSN&quot;, pages=[&quot;1&quot;])q2 = tc.Query(text=&quot;What is YTD gross pay?&quot;, alias=&quot;GROSS_PAY&quot;, pages=[&quot;2&quot;])textract_json = tc.call_textract(    input_document=&quot;s3://amazon-textract-public-content/blogs/2-pager.pdf&quot;,    queries_config=tc.QueriesConfig(queries=[q1, q2]),    features=[tc.Textract_Features.QUERIES],    force_async_api=True,    boto3_textract_client=textract)t_doc: t2.TDocument = t2.TDocumentSchema().load(textract_json)  # type: ignorefor page in t_doc.pages:    query_answers = t_doc.get_query_answers(page=page)    for x in query_answers:        print(f&quot;{x[1]},{x[2]}&quot;)```### Calling with Custom Queries for a multi-page document using an adaptersample also uses the amazon-textract-response-parser```python -m pip install amazon-textract-caller amazon-textract-response-parser``````pythonimport textractcaller as tcimport trp.trp2 as t2import boto3textract = boto3.client('textract', region_name=&quot;us-east-2&quot;)q1 = tc.Query(text=&quot;What is the employee SSN?&quot;, alias=&quot;SSN&quot;, pages=[&quot;1&quot;])q2 = tc.Query(text=&quot;What is YTD gross pay?&quot;, alias=&quot;GROSS_PAY&quot;, pages=[&quot;2&quot;])adapter1 = tc.Adapter(adapter_id=&quot;2e9bf1c4aa31&quot;, version=&quot;1&quot;, pages=[&quot;1&quot;])textract_json = tc.call_textract(    input_document=&quot;s3://amazon-textract-public-content/blogs/2-pager.pdf&quot;,    queries_config=tc.QueriesConfig(queries=[q1, q2]),    adapters_config=tc.AdaptersConfig(adapters=[adapter1])    features=[tc.Textract_Features.QUERIES],    force_async_api=True,    boto3_textract_client=textract)t_doc: t2.TDocument = t2.TDocumentSchema().load(textract_json)  # type: ignorefor page in t_doc.pages:    query_answers = t_doc.get_query_answers(page=page)    for x in query_answers:        print(f&quot;{x[1]},{x[2]}&quot;)```### Calling with file from local filesystem with TABLES features```pythonfrom textractcaller import call_textract, Textract_Featuresfeatures = [Textract_Features.TABLES]response = call_textract(    input_document=&quot;/folder/local-filesystem-file.png&quot;, features=features)```### Call with images located on S3 but force asynchronous API```pythonfrom textractcaller import call_textractresponse = call_textract(input_document=&quot;s3://some-bucket/w2-example.png&quot;, force_async_api=True)```### Call with OutputConfig, Customer-Managed-Key```pythonfrom textractcaller import call_textractfrom textractcaller import OutputConfig, Textract_Featuresoutput_config = OutputConfig(s3_bucket=&quot;somebucket-encrypted&quot;, s3_prefix=&quot;output/&quot;)response = call_textract(input_document=&quot;s3://someprefix/somefile.png&quot;,                          force_async_api=True,                          output_config=output_config,                          kms_key_id=&quot;arn:aws:kms:us-east-1:12345678901:key/some-key-id-ref-erence&quot;,                          return_job_id=False,                          job_tag=&quot;sometag&quot;,                          client_request_token=&quot;sometoken&quot;)```### Call with PDF located on S3 and force return of JobId instead of JSON response```pythonfrom textractcaller import call_textractresponse = call_textract(input_document=&quot;s3://some-bucket/some-document.pdf&quot;, return_job_id=True)job_id = response['JobId']```</longdescription>
</pkgmetadata>