<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======pg8000======.. |ssl.SSLContext| replace:: ``ssl.SSLContext``.. _ssl.SSLContext: https://docs.python.org/3/library/ssl.html#ssl.SSLContext.. |ssl.create_default_context()| replace:: ``ssl.create_default_context()``.. _ssl.create_default_context(): https://docs.python.org/3/library/ssl.html#ssl.create_default_contextpg8000 is a pure-`Python &lt;https://www.python.org/&gt;`_`PostgreSQL &lt;http://www.postgresql.org/&gt;`_ driver that complies with`DB-API 2.0 &lt;http://www.python.org/dev/peps/pep-0249/&gt;`_. It is tested on Pythonversions 3.7+, on CPython and PyPy, and PostgreSQL versions 11+. pg8000's name comesfrom the belief that it is probably about the 8000th PostgreSQL interface for Python.pg8000 is distributed under the BSD 3-clause license.All bug reports, feature requests and contributions are welcome at`http://github.com/tlocke/pg8000/ &lt;http://github.com/tlocke/pg8000/&gt;`_... image:: https://github.com/tlocke/pg8000/workflows/pg8000/badge.svg   :alt: Build Status.. contents:: Table of Contents   :depth: 2   :local:Installation------------To install pg8000 using `pip` type:`pip install pg8000`Native API Interactive Examples-------------------------------pg8000 comes with two APIs, the native pg8000 API and the DB-API 2.0 standardAPI. These are the examples for the native API, and the DB-API 2.0 examplesfollow in the next section.Basic Example`````````````Import pg8000, connect to the database, create a table, add some rows and thenquery the table:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; # Connect to the database with user name postgres&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; # Create a temporary table&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;CREATE TEMPORARY TABLE book (id SERIAL, title TEXT)&quot;)&gt;&gt;&gt;&gt;&gt;&gt; # Populate the table&gt;&gt;&gt;&gt;&gt;&gt; for title in (&quot;Ender's Game&quot;, &quot;The Magus&quot;):...     con.run(&quot;INSERT INTO book (title) VALUES (:title)&quot;, title=title)&gt;&gt;&gt;&gt;&gt;&gt; # Print all the rows in the table&gt;&gt;&gt;&gt;&gt;&gt; for row in con.run(&quot;SELECT * FROM book&quot;):...     print(row)[1, &quot;Ender's Game&quot;][2, 'The Magus']&gt;&gt;&gt;&gt;&gt;&gt; con.close()Transactions````````````Here's how to run groups of SQL statements in a`transaction &lt;https://www.postgresql.org/docs/current/tutorial-transactions.html&gt;`_:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;START TRANSACTION&quot;)&gt;&gt;&gt;&gt;&gt;&gt; # Create a temporary table&gt;&gt;&gt; con.run(&quot;CREATE TEMPORARY TABLE book (id SERIAL, title TEXT)&quot;)&gt;&gt;&gt;&gt;&gt;&gt; for title in (&quot;Ender's Game&quot;, &quot;The Magus&quot;, &quot;Phineas Finn&quot;):...     con.run(&quot;INSERT INTO book (title) VALUES (:title)&quot;, title=title)&gt;&gt;&gt; con.run(&quot;COMMIT&quot;)&gt;&gt;&gt; for row in con.run(&quot;SELECT * FROM book&quot;):...     print(row)[1, &quot;Ender's Game&quot;][2, 'The Magus'][3, 'Phineas Finn']&gt;&gt;&gt;&gt;&gt;&gt; con.close()rolling back a transaction:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; # Create a temporary table&gt;&gt;&gt; con.run(&quot;CREATE TEMPORARY TABLE book (id SERIAL, title TEXT)&quot;)&gt;&gt;&gt;&gt;&gt;&gt; for title in (&quot;Ender's Game&quot;, &quot;The Magus&quot;, &quot;Phineas Finn&quot;):...     con.run(&quot;INSERT INTO book (title) VALUES (:title)&quot;, title=title)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;START TRANSACTION&quot;)&gt;&gt;&gt; con.run(&quot;DELETE FROM book WHERE title = :title&quot;, title=&quot;Phineas Finn&quot;) &gt;&gt;&gt; con.run(&quot;ROLLBACK&quot;)&gt;&gt;&gt; for row in con.run(&quot;SELECT * FROM book&quot;):...     print(row)[1, &quot;Ender's Game&quot;][2, 'The Magus'][3, 'Phineas Finn']&gt;&gt;&gt;&gt;&gt;&gt; con.close()NB. There is `a longstanding bug &lt;https://github.com/tlocke/pg8000/issues/36&gt;`_in the PostgreSQL server whereby if a `COMMIT` is issued against a failedtransaction, the transaction is silently rolled back, rather than an error beingreturned. pg8000 attempts to detect when this has happened and raise an`InterfaceError`.Query Using Functions`````````````````````Another query, using some PostgreSQL functions:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;SELECT TO_CHAR(TIMESTAMP '2021-10-10', 'YYYY BC')&quot;)[['2021 AD']]&gt;&gt;&gt;&gt;&gt;&gt; con.close()Interval Type`````````````A query that returns the PostgreSQL interval type:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; import datetime&gt;&gt;&gt;&gt;&gt;&gt; ts = datetime.date(1980, 4, 27)&gt;&gt;&gt; con.run(&quot;SELECT timestamp '2013-12-01 16:06' - :ts&quot;, ts=ts)[[datetime.timedelta(days=12271, seconds=57960)]]&gt;&gt;&gt;&gt;&gt;&gt; con.close()Point Type``````````A round-trip with a`PostgreSQL point &lt;https://www.postgresql.org/docs/current/datatype-geometric.html&gt;`_type:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;SELECT CAST(:pt as point)&quot;, pt=(2.3,1))[[(2.3, 1.0)]]&gt;&gt;&gt;&gt;&gt;&gt; con.close()Client Encoding```````````````When communicating with the server, pg8000 uses the character set that the server asksit to use (the client encoding). By default the client encoding is the database'scharacter set (chosen when the database is created), but the client encoding can bechanged in a number of ways (eg. setting ``CLIENT_ENCODING`` in ``postgresql.conf``).Another way of changing the client encoding is by using an SQL command. For example:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;SET CLIENT_ENCODING TO 'UTF8'&quot;)&gt;&gt;&gt; con.run(&quot;SHOW CLIENT_ENCODING&quot;)[['UTF8']]&gt;&gt;&gt;&gt;&gt;&gt; con.close()JSON`````JSON &lt;https://www.postgresql.org/docs/current/datatype-json.html&gt;`_ always comes backfrom the server de-serialized. If the JSON you want to send is a ``dict`` then you canjust do:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; val = {'name': 'Apollo 11 Cave', 'zebra': True, 'age': 26.003}&gt;&gt;&gt; con.run(&quot;SELECT CAST(:apollo as jsonb)&quot;, apollo=val)[[{'age': 26.003, 'name': 'Apollo 11 Cave', 'zebra': True}]]&gt;&gt;&gt;&gt;&gt;&gt; con.close()JSON can always be sent in serialized form to the server:&gt;&gt;&gt; import json&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; val = ['Apollo 11 Cave', True, 26.003]&gt;&gt;&gt; con.run(&quot;SELECT CAST(:apollo as jsonb)&quot;, apollo=json.dumps(val))[[['Apollo 11 Cave', True, 26.003]]]&gt;&gt;&gt;&gt;&gt;&gt; con.close()Retrieve Column Metadata From Results`````````````````````````````````````Find the column metadata returned from a query:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;create temporary table quark (id serial, name text)&quot;)&gt;&gt;&gt; for name in ('Up', 'Down'):...     con.run(&quot;INSERT INTO quark (name) VALUES (:name)&quot;, name=name)&gt;&gt;&gt; # Now execute the query&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;SELECT * FROM quark&quot;)[[1, 'Up'], [2, 'Down']]&gt;&gt;&gt;&gt;&gt;&gt; # and retrieve the metadata&gt;&gt;&gt;&gt;&gt;&gt; con.columns[{'table_oid': ..., 'column_attrnum': 1, 'type_oid': 23, 'type_size': 4, 'type_modifier': -1, 'format': 0, 'name': 'id'}, {'table_oid': ..., 'column_attrnum': 2, 'type_oid': 25, 'type_size': -1, 'type_modifier': -1, 'format': 0, 'name': 'name'}]&gt;&gt;&gt;&gt;&gt;&gt; # Show just the column names&gt;&gt;&gt;&gt;&gt;&gt; [c['name'] for c in con.columns]['id', 'name']&gt;&gt;&gt;&gt;&gt;&gt; con.close()Notices And Notifications`````````````````````````PostgreSQL `notices&lt;https://www.postgresql.org/docs/current/static/plpgsql-errors-and-messages.html&gt;`_ arestored in a deque called ``Connection.notices`` and added using the ``append()``method. Similarly there are ``Connection.notifications`` for `notifications&lt;https://www.postgresql.org/docs/current/static/sql-notify.html&gt;`_ and``Connection.parameter_statuses`` for changes to the server configuration. Here's anexample:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;LISTEN aliens_landed&quot;)&gt;&gt;&gt; con.run(&quot;NOTIFY aliens_landed&quot;)&gt;&gt;&gt; # A notification is a tuple containing (backend_pid, channel, payload)&gt;&gt;&gt;&gt;&gt;&gt; con.notifications[0](..., 'aliens_landed', '')&gt;&gt;&gt;&gt;&gt;&gt; con.close()LIMIT ALL`````````You might think that the following would work, but in fact it fails:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;SELECT 'silo 1' LIMIT :lim&quot;, lim='ALL')Traceback (most recent call last):pg8000.exceptions.DatabaseError: ...&gt;&gt;&gt;&gt;&gt;&gt; con.close()Instead the `docs say &lt;https://www.postgresql.org/docs/current/sql-select.html&gt;`_ thatyou can send ``null`` as an alternative to ``ALL``, which does work:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;SELECT 'silo 1' LIMIT :lim&quot;, lim=None)[['silo 1']]&gt;&gt;&gt;&gt;&gt;&gt; con.close()IN and NOT IN`````````````You might think that the following would work, but in fact the server doesn't like it:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;SELECT 'silo 1' WHERE 'a' IN :v&quot;, v=['a', 'b'])Traceback (most recent call last):pg8000.exceptions.DatabaseError: ...&gt;&gt;&gt;&gt;&gt;&gt; con.close()instead you can write it using the `unnest&lt;https://www.postgresql.org/docs/current/functions-array.html&gt;`_ function:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(...     &quot;SELECT 'silo 1' WHERE 'a' IN (SELECT unnest(CAST(:v as varchar[])))&quot;,...     v=['a', 'b'])[['silo 1']]&gt;&gt;&gt; con.close()and you can do the same for ``NOT IN``.Many SQL Statements Can't Be Parameterized``````````````````````````````````````````In PostgreSQL parameters can only be used for `data values, not identifiers&lt;https://www.postgresql.org/docs/current/xfunc-sql.html#XFUNC-SQL-FUNCTION-ARGUMENTS&gt;`_.Sometimes this might not work as expected, for example the following fails:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; channel = 'top_secret'&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;LISTEN :channel&quot;, channel=channel)Traceback (most recent call last):pg8000.exceptions.DatabaseError: ...&gt;&gt;&gt;&gt;&gt;&gt; con.close()It fails because the PostgreSQL server doesn't allow this statement to have anyparameters. There are many SQL statements that one might think would have parameters,but don't. For these cases the SQL has to be created manually, being careful to use the``identifier()`` and ``literal()`` functions to escape the values to avoid `SQLinjection attacks &lt;https://en.wikipedia.org/wiki/SQL_injection&gt;`_:&gt;&gt;&gt; from pg8000.native import Connection, identifier, literal&gt;&gt;&gt;&gt;&gt;&gt; con = Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; channel = 'top_secret'&gt;&gt;&gt; payload = 'Aliens Landed!'&gt;&gt;&gt; con.run(f&quot;LISTEN {identifier(channel)}&quot;)&gt;&gt;&gt; con.run(f&quot;NOTIFY {identifier(channel)}, {literal(payload)}&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.notifications[0](..., 'top_secret', 'Aliens Landed!')&gt;&gt;&gt;&gt;&gt;&gt; con.close()COPY FROM And TO A Stream`````````````````````````The SQL `COPY &lt;https://www.postgresql.org/docs/current/sql-copy.html&gt;`_ statement can beused to copy from and to a file or file-like object. Here' an example using the CSVformat:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt; from io import StringIO&gt;&gt;&gt; import csv&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; # Create a CSV file in memory&gt;&gt;&gt;&gt;&gt;&gt; stream_in = StringIO()&gt;&gt;&gt; csv_writer = csv.writer(stream_in)&gt;&gt;&gt; csv_writer.writerow([1, &quot;electron&quot;])12&gt;&gt;&gt; csv_writer.writerow([2, &quot;muon&quot;])8&gt;&gt;&gt; csv_writer.writerow([3, &quot;tau&quot;])7&gt;&gt;&gt; stream_in.seek(0)0&gt;&gt;&gt;&gt;&gt;&gt; # Create a table and then copy the CSV into it&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;CREATE TEMPORARY TABLE lepton (id SERIAL, name TEXT)&quot;)&gt;&gt;&gt; con.run(&quot;COPY lepton FROM STDIN WITH (FORMAT CSV)&quot;, stream=stream_in)&gt;&gt;&gt;&gt;&gt;&gt; # COPY from a table to a stream&gt;&gt;&gt;&gt;&gt;&gt; stream_out = StringIO()&gt;&gt;&gt; con.run(&quot;COPY lepton TO STDOUT WITH (FORMAT CSV)&quot;, stream=stream_out)&gt;&gt;&gt; stream_out.seek(0)0&gt;&gt;&gt; for row in csv.reader(stream_out):...     print(row)['1', 'electron']['2', 'muon']['3', 'tau']&gt;&gt;&gt;&gt;&gt;&gt; con.close()It's also possible to COPY FROM an iterable, which is useful if you're creating rowsprogrammatically:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; # Generator function for creating rows&gt;&gt;&gt; def row_gen():...     for i, name in ((1, &quot;electron&quot;), (2, &quot;muon&quot;), (3, &quot;tau&quot;)):...         yield f&quot;{i},{name}\n&quot;&gt;&gt;&gt;&gt;&gt;&gt; # Create a table and then copy the CSV into it&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;CREATE TEMPORARY TABLE lepton (id SERIAL, name TEXT)&quot;)&gt;&gt;&gt; con.run(&quot;COPY lepton FROM STDIN WITH (FORMAT CSV)&quot;, stream=row_gen())&gt;&gt;&gt;&gt;&gt;&gt; # COPY from a table to a stream&gt;&gt;&gt;&gt;&gt;&gt; stream_out = StringIO()&gt;&gt;&gt; con.run(&quot;COPY lepton TO STDOUT WITH (FORMAT CSV)&quot;, stream=stream_out)&gt;&gt;&gt; stream_out.seek(0)0&gt;&gt;&gt; for row in csv.reader(stream_out):...     print(row)['1', 'electron']['2', 'muon']['3', 'tau']&gt;&gt;&gt;&gt;&gt;&gt; con.close()Execute Multiple SQL Statements```````````````````````````````If you want to execute a series of SQL statements (eg. an ``.sql`` file), you can runthem as expected:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; statements = &quot;SELECT 5; SELECT 'Erich Fromm';&quot;&gt;&gt;&gt;&gt;&gt;&gt; con.run(statements)[[5], ['Erich Fromm']]&gt;&gt;&gt;&gt;&gt;&gt; con.close()The only caveat is that when executing multiple statements you can't have anyparameters.Quoted Identifiers in SQL`````````````````````````Say you had a column called ``My Column``. Since it's case sensitive and contains aspace, you'd have to `surround it by double quotes&lt;https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIER&gt;`_.But you can't do:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;select 'hello' as &quot;My Column&quot;&quot;)Traceback (most recent call last):SyntaxError: invalid syntax...&gt;&gt;&gt;&gt;&gt;&gt; con.close()since Python uses double quotes to delimit string literals, so one solution isto use Python's `triple quotes&lt;https://docs.python.org/3/tutorial/introduction.html#strings&gt;`_ to delimit the stringinstead:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run('''SELECT 'hello' AS &quot;My Column&quot;''')[['hello']]&gt;&gt;&gt;&gt;&gt;&gt; con.close()another solution, that's especially useful if the identifier comes from an untrustedsource, is to use the ``identifier()`` function, which correctly quotes and escapes theidentifier as needed:&gt;&gt;&gt; from pg8000.native import Connection, identifier&gt;&gt;&gt;&gt;&gt;&gt; con = Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; sql = f&quot;SELECT 'hello' as {identifier('My Column')}&quot;&gt;&gt;&gt; print(sql)SELECT 'hello' as &quot;My Column&quot;&gt;&gt;&gt;&gt;&gt;&gt; con.run(sql)[['hello']]&gt;&gt;&gt;&gt;&gt;&gt; con.close()this approach guards against `SQL injection attacks&lt;https://en.wikipedia.org/wiki/SQL_injection&gt;`_. One thing to note if you're usingexplicit schemas (eg. ``pg_catalog.pg_language``) is that the schema name and table nameare both separate identifiers. So to escape them you'd do:&gt;&gt;&gt; from pg8000.native import Connection, identifier&gt;&gt;&gt;&gt;&gt;&gt; con = Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; query = (...     f&quot;SELECT lanname FROM {identifier('pg_catalog')}.{identifier('pg_language')} &quot;...     f&quot;WHERE lanname = 'sql'&quot;... )&gt;&gt;&gt; print(query)SELECT lanname FROM pg_catalog.pg_language WHERE lanname = 'sql'&gt;&gt;&gt;&gt;&gt;&gt; con.run(query)[['sql']]&gt;&gt;&gt;&gt;&gt;&gt; con.close()Custom adapter from a Python type to a PostgreSQL type``````````````````````````````````````````````````````pg8000 has a mapping from Python types to PostgreSQL types for when it needs to sendSQL parameters to the server. The default mapping that comes with pg8000 is designed towork well in most cases, but you might want to add or replace the default mapping.A Python ``datetime.timedelta`` object is sent to the server as a PostgreSQL``interval`` type,  which has the ``oid`` 1186. But let's say we wanted to create ourown Python class to be sent as an ``interval`` type. Then we'd have to register anadapter:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; class MyInterval(str):...     pass&gt;&gt;&gt;&gt;&gt;&gt; def my_interval_out(my_interval):...     return my_interval  # Must return a str&gt;&gt;&gt;&gt;&gt;&gt; con.register_out_adapter(MyInterval, my_interval_out)&gt;&gt;&gt; con.run(&quot;SELECT CAST(:interval as interval)&quot;, interval=MyInterval(&quot;2 hours&quot;))[[datetime.timedelta(seconds=7200)]]&gt;&gt;&gt;&gt;&gt;&gt; con.close()Note that it still came back as a ``datetime.timedelta`` object because we only changedthe mapping from Python to PostgreSQL. See below for an example of how to change themapping from PostgreSQL to Python.Custom adapter from a PostgreSQL type to a Python type``````````````````````````````````````````````````````pg8000 has a mapping from PostgreSQL types to Python types for when it receives SQLresults from the server. The default mapping that comes with pg8000 is designed to workwell in most cases, but you might want to add or replace the default mapping.If pg8000 receives PostgreSQL ``interval`` type, which has the ``oid`` 1186, it convertsit into a Python ``datetime.timedelta`` object. But let's say we wanted to create ourown Python class to be used instead of ``datetime.timedelta``. Then we'd have toregister an adapter:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; class MyInterval(str):...     pass&gt;&gt;&gt;&gt;&gt;&gt; def my_interval_in(my_interval_str):  # The parameter is of type str...     return MyInterval(my_interval)&gt;&gt;&gt;&gt;&gt;&gt; con.register_in_adapter(1186, my_interval_in)&gt;&gt;&gt; con.run(&quot;SELECT \'2 years'&quot;)[['2 years']]&gt;&gt;&gt;&gt;&gt;&gt; con.close()Note that registering the 'in' adapter only afects the mapping from the PostgreSQL typeto the Python type. See above for an example of how to change the mapping fromPostgreSQL to Python.Could Not Determine Data Type Of Parameter``````````````````````````````````````````Sometimes you'll get the 'could not determine data type of parameter' error message fromthe server:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;SELECT :v IS NULL&quot;, v=None)Traceback (most recent call last):pg8000.exceptions.DatabaseError: {'S': 'ERROR', 'V': 'ERROR', 'C': '42P18', 'M': 'could not determine data type of parameter $1', 'F': 'postgres.c', 'L': '...', 'R': 'exec_parse_message'}&gt;&gt;&gt;&gt;&gt;&gt; con.close()One way of solving it is to put a ``CAST`` in the SQL:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;SELECT cast(:v as TIMESTAMP) IS NULL&quot;, v=None)[[True]]&gt;&gt;&gt;&gt;&gt;&gt; con.close()Another way is to override the type that pg8000 sends along with each parameter:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;SELECT :v IS NULL&quot;, v=None, types={'v': pg8000.native.TIMESTAMP})[[True]]&gt;&gt;&gt;&gt;&gt;&gt; con.close()Prepared Statements````````````````````Prepared statements &lt;https://www.postgresql.org/docs/current/sql-prepare.html&gt;`_can be useful in improving performance when you have a statement that's executedrepeatedly. Here's an example:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; # Create the prepared statement&gt;&gt;&gt; ps = con.prepare(&quot;SELECT cast(:v as varchar)&quot;)&gt;&gt;&gt;&gt;&gt;&gt; # Execute the statement repeatedly&gt;&gt;&gt; ps.run(v=&quot;speedy&quot;)[['speedy']]&gt;&gt;&gt; ps.run(v=&quot;rapid&quot;)[['rapid']]&gt;&gt;&gt; ps.run(v=&quot;swift&quot;)[['swift']]&gt;&gt;&gt;&gt;&gt;&gt; # Close the prepared statement, releasing resources on the server&gt;&gt;&gt; ps.close()&gt;&gt;&gt;&gt;&gt;&gt; con.close()Use Environment Variables As Connection Defaults````````````````````````````````````````````````You might want to use the current user as the database username for example:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt; import getpass&gt;&gt;&gt;&gt;&gt;&gt; # Connect to the database with current user name&gt;&gt;&gt; username = getpass.getuser()&gt;&gt;&gt; connection = pg8000.native.Connection(username, password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; connection.run(&quot;SELECT 'pilau'&quot;)[['pilau']]&gt;&gt;&gt;&gt;&gt;&gt; connection.close()or perhaps you may want to use some of the same `environment variables that libpg uses&lt;https://www.postgresql.org/docs/current/libpq-envars.html&gt;`_:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt; from os import environ&gt;&gt;&gt;&gt;&gt;&gt; username = environ.get('PGUSER', 'postgres')&gt;&gt;&gt; password = environ.get('PGPASSWORD', 'cpsnow')&gt;&gt;&gt; host = environ.get('PGHOST', 'localhost')&gt;&gt;&gt; port = environ.get('PGPORT', '5432')&gt;&gt;&gt; database = environ.get('PGDATABASE')&gt;&gt;&gt;&gt;&gt;&gt; connection = pg8000.native.Connection(...     username, password=password, host=host, port=port, database=database)&gt;&gt;&gt;&gt;&gt;&gt; connection.run(&quot;SELECT 'Mr Cairo'&quot;)[['Mr Cairo']]&gt;&gt;&gt;&gt;&gt;&gt; connection.close()It might be asked, why doesn't pg8000 have this behaviour built in? The thinkingfollows the second aphorism of `The Zen of Python&lt;https://www.python.org/dev/peps/pep-0020/&gt;`_:    Explicit is better than implicit.So we've taken the approach of only being able to set connection parameters using the``pg8000.native.Connection()`` constructor.Connect To PostgreSQL Over SSL``````````````````````````````To connect to the server using SSL defaults do::  import pg8000.native  connection = pg8000.native.Connection('postgres', password=&quot;cpsnow&quot;, ssl_context=True)  connection.run(&quot;SELECT 'The game is afoot!'&quot;)To connect over SSL with custom settings, set the ``ssl_context`` parameter to an|ssl.SSLContext|_ object:::  import pg8000.native  import ssl  ssl_context = ssl.create_default_context()  ssl_context.verify_mode = ssl.CERT_REQUIRED  ssl_context.load_verify_locations('root.pem')          connection = pg8000.native.Connection(    'postgres', password=&quot;cpsnow&quot;, ssl_context=ssl_context)It may be that your PostgreSQL server is behind an SSL proxy server in which case youcan set a pg8000-specific attribute ``ssl.SSLContext.request_ssl = False`` which tellspg8000 to connect using an SSL socket, but not to request SSL from the PostgreSQLserver:::  import pg8000.native  import ssl  ssl_context = ssl.create_default_context()  ssl_context.request_ssl = False  connection = pg8000.native.Connection(      'postgres', password=&quot;cpsnow&quot;, ssl_context=ssl_context)Server-Side Cursors```````````````````You can use the SQL commands `DECLARE&lt;https://www.postgresql.org/docs/current/sql-declare.html&gt;`_,`FETCH &lt;https://www.postgresql.org/docs/current/sql-fetch.html&gt;`_,`MOVE &lt;https://www.postgresql.org/docs/current/sql-move.html&gt;`_ and`CLOSE &lt;https://www.postgresql.org/docs/current/sql-close.html&gt;`_ to manipulateserver-side cursors. For example:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection('postgres', password=&quot;cpsnow&quot;)&gt;&gt;&gt; con.run(&quot;START TRANSACTION&quot;)&gt;&gt;&gt; con.run(&quot;DECLARE c SCROLL CURSOR FOR SELECT * FROM generate_series(1, 100)&quot;)&gt;&gt;&gt; con.run(&quot;FETCH FORWARD 5 FROM c&quot;)[[1], [2], [3], [4], [5]]&gt;&gt;&gt; con.run(&quot;MOVE FORWARD 50 FROM c&quot;)&gt;&gt;&gt; con.run(&quot;FETCH BACKWARD 10 FROM c&quot;)[[54], [53], [52], [51], [50], [49], [48], [47], [46], [45]]&gt;&gt;&gt; con.run(&quot;CLOSE c&quot;)&gt;&gt;&gt; con.run(&quot;ROLLBACK&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.close()BLOBs (Binary Large Objects)````````````````````````````There's a set of `SQL functions&lt;https://www.postgresql.org/docs/current/lo-funcs.html&gt;`_ for manipulating BLOBs.Here's an example:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection('postgres', password=&quot;cpsnow&quot;)&gt;&gt;&gt;&gt;&gt;&gt; # Create a BLOB and get its oid&gt;&gt;&gt; data = b'hello'&gt;&gt;&gt; res = con.run(&quot;SELECT lo_from_bytea(0, :data)&quot;, data=data)&gt;&gt;&gt; oid = res[0][0]&gt;&gt;&gt;&gt;&gt;&gt; # Create a table and store the oid of the BLOB&gt;&gt;&gt; con.run(&quot;CREATE TEMPORARY TABLE image (raster oid)&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;INSERT INTO image (raster) VALUES (:oid)&quot;, oid=oid)&gt;&gt;&gt; # Retrieve the data using the oid&gt;&gt;&gt; con.run(&quot;SELECT lo_get(:oid)&quot;, oid=oid)[[b'hello']]&gt;&gt;&gt;&gt;&gt;&gt; # Add some data to the end of the BLOB&gt;&gt;&gt; more_data = b' all'&gt;&gt;&gt; offset = len(data)&gt;&gt;&gt; con.run(...     &quot;SELECT lo_put(:oid, :offset, :data)&quot;,...     oid=oid, offset=offset, data=more_data)[['']]&gt;&gt;&gt; con.run(&quot;SELECT lo_get(:oid)&quot;, oid=oid)[[b'hello all']]&gt;&gt;&gt;&gt;&gt;&gt; # Download a part of the data&gt;&gt;&gt; con.run(&quot;SELECT lo_get(:oid, 6, 3)&quot;, oid=oid)[[b'all']]&gt;&gt;&gt;&gt;&gt;&gt; con.close()Replication Protocol````````````````````The PostgreSQL `Replication Protocol&lt;https://www.postgresql.org/docs/current/protocol-replication.html&gt;`_ is supported usingthe ``replication`` keyword when creating a connection:&gt;&gt;&gt; import pg8000.native&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.native.Connection(...    'postgres', password=&quot;cpsnow&quot;, replication=&quot;database&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.run(&quot;IDENTIFY_SYSTEM&quot;)[['...', 1, '0/...', 'postgres']]&gt;&gt;&gt;&gt;&gt;&gt; con.close()DB-API 2 Interactive Examples-----------------------------These examples stick to the DB-API 2.0 standard.Basic Example`````````````Import pg8000, connect to the database, create a table, add some rows and then query thetable:&gt;&gt;&gt; import pg8000.dbapi&gt;&gt;&gt;&gt;&gt;&gt; conn = pg8000.dbapi.connect(user=&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt; cursor = conn.cursor()&gt;&gt;&gt; cursor.execute(&quot;CREATE TEMPORARY TABLE book (id SERIAL, title TEXT)&quot;)&gt;&gt;&gt; cursor.execute(...     &quot;INSERT INTO book (title) VALUES (%s), (%s) RETURNING id, title&quot;,...     (&quot;Ender's Game&quot;, &quot;Speaker for the Dead&quot;))&gt;&gt;&gt; results = cursor.fetchall()&gt;&gt;&gt; for row in results:...     id, title = row...     print(&quot;id = %s, title = %s&quot; % (id, title))id = 1, title = Ender's Gameid = 2, title = Speaker for the Dead&gt;&gt;&gt; conn.commit()&gt;&gt;&gt;&gt;&gt;&gt; conn.close()Query Using Functions`````````````````````Another query, using some PostgreSQL functions:&gt;&gt;&gt; import pg8000.dbapi&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.dbapi.connect(user=&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt; cursor = con.cursor()&gt;&gt;&gt;&gt;&gt;&gt; cursor.execute(&quot;SELECT TO_CHAR(TIMESTAMP '2021-10-10', 'YYYY BC')&quot;)&gt;&gt;&gt; cursor.fetchone()['2021 AD']&gt;&gt;&gt;&gt;&gt;&gt; con.close()Interval Type`````````````A query that returns the PostgreSQL interval type:&gt;&gt;&gt; import datetime&gt;&gt;&gt; import pg8000.dbapi&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.dbapi.connect(user=&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt; cursor = con.cursor()&gt;&gt;&gt;&gt;&gt;&gt; cursor.execute(&quot;SELECT timestamp '2013-12-01 16:06' - %s&quot;,... (datetime.date(1980, 4, 27),))&gt;&gt;&gt; cursor.fetchone()[datetime.timedelta(days=12271, seconds=57960)]&gt;&gt;&gt;&gt;&gt;&gt; con.close()Point Type``````````A round-trip with a `PostgreSQL point&lt;https://www.postgresql.org/docs/current/datatype-geometric.html&gt;`_ type:&gt;&gt;&gt; import pg8000.dbapi&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.dbapi.connect(user=&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt; cursor = con.cursor()&gt;&gt;&gt;&gt;&gt;&gt; cursor.execute(&quot;SELECT cast(%s as point)&quot;, ((2.3,1),))&gt;&gt;&gt; cursor.fetchone()[(2.3, 1.0)]&gt;&gt;&gt;&gt;&gt;&gt; con.close()Numeric Parameter Style```````````````````````pg8000 supports all the DB-API parameter styles. Here's an example of using the'numeric' parameter style:&gt;&gt;&gt; import pg8000.dbapi&gt;&gt;&gt;&gt;&gt;&gt; pg8000.dbapi.paramstyle = &quot;numeric&quot;&gt;&gt;&gt; con = pg8000.dbapi.connect(user=&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt; cursor = con.cursor()&gt;&gt;&gt;&gt;&gt;&gt; cursor.execute(&quot;SELECT array_prepend(:1, CAST(:2 AS int[]))&quot;, (500, [1, 2, 3, 4],))&gt;&gt;&gt; cursor.fetchone()[[500, 1, 2, 3, 4]]&gt;&gt;&gt; pg8000.dbapi.paramstyle = &quot;format&quot;&gt;&gt;&gt;&gt;&gt;&gt; con.close()Autocommit``````````Following the DB-API specification, autocommit is off by default. It can be turned on byusing the autocommit property of the connection:&gt;&gt;&gt; import pg8000.dbapi&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.dbapi.connect(user=&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt; con.autocommit = True&gt;&gt;&gt;&gt;&gt;&gt; cur = con.cursor()&gt;&gt;&gt; cur.execute(&quot;vacuum&quot;)&gt;&gt;&gt; conn.autocommit = False&gt;&gt;&gt; cur.close()&gt;&gt;&gt;&gt;&gt;&gt; con.close()Client Encoding```````````````When communicating with the server, pg8000 uses the character set that the server asksit to use (the client encoding). By default the client encoding is the database'scharacter set (chosen when the database is created), but the client encoding can bechanged in a number of ways (eg. setting ``CLIENT_ENCODING`` in ``postgresql.conf``).Another way of changing the client encoding is by using an SQL command. For example:&gt;&gt;&gt; import pg8000.dbapi&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.dbapi.connect(user=&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt; cur = con.cursor()&gt;&gt;&gt; cur.execute(&quot;SET CLIENT_ENCODING TO 'UTF8'&quot;)&gt;&gt;&gt; cur.execute(&quot;SHOW CLIENT_ENCODING&quot;)&gt;&gt;&gt; cur.fetchone()['UTF8']&gt;&gt;&gt; cur.close()&gt;&gt;&gt;&gt;&gt;&gt; con.close()JSON````JSON is sent to the server serialized, and returned de-serialized. Here's an example:&gt;&gt;&gt; import json&gt;&gt;&gt; import pg8000.dbapi&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.dbapi.connect(user=&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt; cur = con.cursor()&gt;&gt;&gt; val = ['Apollo 11 Cave', True, 26.003]&gt;&gt;&gt; cur.execute(&quot;SELECT cast(%s as json)&quot;, (json.dumps(val),))&gt;&gt;&gt; cur.fetchone()[['Apollo 11 Cave', True, 26.003]]&gt;&gt;&gt; cur.close()&gt;&gt;&gt;&gt;&gt;&gt; con.close()Retrieve Column Names From Results``````````````````````````````````Use the columns names retrieved from a query:&gt;&gt;&gt; import pg8000&gt;&gt;&gt; conn = pg8000.dbapi.connect(user=&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt; c = conn.cursor()&gt;&gt;&gt; c.execute(&quot;create temporary table quark (id serial, name text)&quot;)&gt;&gt;&gt; c.executemany(&quot;INSERT INTO quark (name) VALUES (%s)&quot;, ((&quot;Up&quot;,), (&quot;Down&quot;,)))&gt;&gt;&gt; #&gt;&gt;&gt; # Now retrieve the results&gt;&gt;&gt; #&gt;&gt;&gt; c.execute(&quot;select * from quark&quot;)&gt;&gt;&gt; rows = c.fetchall()&gt;&gt;&gt; keys = [k[0] for k in c.description]&gt;&gt;&gt; results = [dict(zip(keys, row)) for row in rows]&gt;&gt;&gt; assert results == [{'id': 1, 'name': 'Up'}, {'id': 2, 'name': 'Down'}]&gt;&gt;&gt;&gt;&gt;&gt; conn.close()COPY from and to a file```````````````````````The SQL `COPY &lt;https://www.postgresql.org/docs/current/sql-copy.html&gt;`__ statement canbe used to copy from and to a file or file-like object:&gt;&gt;&gt; from io import StringIO&gt;&gt;&gt; import pg8000.dbapi&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.dbapi.connect(user=&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt; cur = con.cursor()&gt;&gt;&gt; #&gt;&gt;&gt; # COPY from a stream to a table&gt;&gt;&gt; #&gt;&gt;&gt; stream_in = StringIO('1\telectron\n2\tmuon\n3\ttau\n')&gt;&gt;&gt; cur = con.cursor()&gt;&gt;&gt; cur.execute(&quot;create temporary table lepton (id serial, name text)&quot;)&gt;&gt;&gt; cur.execute(&quot;COPY lepton FROM stdin&quot;, stream=stream_in)&gt;&gt;&gt; #&gt;&gt;&gt; # Now COPY from a table to a stream&gt;&gt;&gt; #&gt;&gt;&gt; stream_out = StringIO()&gt;&gt;&gt; cur.execute(&quot;copy lepton to stdout&quot;, stream=stream_out)&gt;&gt;&gt; stream_out.getvalue()'1\telectron\n2\tmuon\n3\ttau\n'&gt;&gt;&gt;&gt;&gt;&gt; con.close()Server-Side Cursors```````````````````You can use the SQL commands `DECLARE&lt;https://www.postgresql.org/docs/current/sql-declare.html&gt;`_,`FETCH &lt;https://www.postgresql.org/docs/current/sql-fetch.html&gt;`_,`MOVE &lt;https://www.postgresql.org/docs/current/sql-move.html&gt;`_ and`CLOSE &lt;https://www.postgresql.org/docs/current/sql-close.html&gt;`_ to manipulateserver-side cursors. For example:&gt;&gt;&gt; import pg8000.dbapi&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.dbapi.connect(user=&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt; cur = con.cursor()&gt;&gt;&gt; cur.execute(&quot;START TRANSACTION&quot;)&gt;&gt;&gt; cur.execute(...    &quot;DECLARE c SCROLL CURSOR FOR SELECT * FROM generate_series(1, 100)&quot;)&gt;&gt;&gt; cur.execute(&quot;FETCH FORWARD 5 FROM c&quot;)&gt;&gt;&gt; cur.fetchall()([1], [2], [3], [4], [5])&gt;&gt;&gt; cur.execute(&quot;MOVE FORWARD 50 FROM c&quot;)&gt;&gt;&gt; cur.execute(&quot;FETCH BACKWARD 10 FROM c&quot;)&gt;&gt;&gt; cur.fetchall()([54], [53], [52], [51], [50], [49], [48], [47], [46], [45])&gt;&gt;&gt; cur.execute(&quot;CLOSE c&quot;)&gt;&gt;&gt; cur.execute(&quot;ROLLBACK&quot;)&gt;&gt;&gt;&gt;&gt;&gt; con.close()BLOBs (Binary Large Objects)````````````````````````````There's a set of `SQL functions&lt;https://www.postgresql.org/docs/current/lo-funcs.html&gt;`_ for manipulating BLOBs.Here's an example:&gt;&gt;&gt; import pg8000.dbapi&gt;&gt;&gt;&gt;&gt;&gt; con = pg8000.dbapi.connect(user=&quot;postgres&quot;, password=&quot;cpsnow&quot;)&gt;&gt;&gt; cur = con.cursor()&gt;&gt;&gt;&gt;&gt;&gt; # Create a BLOB and get its oid&gt;&gt;&gt; data = b'hello'&gt;&gt;&gt; cur = con.cursor()&gt;&gt;&gt; cur.execute(&quot;SELECT lo_from_bytea(0, %s)&quot;, [data])&gt;&gt;&gt; oid = cur.fetchone()[0]&gt;&gt;&gt;&gt;&gt;&gt; # Create a table and store the oid of the BLOB&gt;&gt;&gt; cur.execute(&quot;CREATE TEMPORARY TABLE image (raster oid)&quot;)&gt;&gt;&gt; cur.execute(&quot;INSERT INTO image (raster) VALUES (%s)&quot;, [oid])&gt;&gt;&gt;&gt;&gt;&gt; # Retrieve the data using the oid&gt;&gt;&gt; cur.execute(&quot;SELECT lo_get(%s)&quot;, [oid])&gt;&gt;&gt; cur.fetchall()([b'hello'],)&gt;&gt;&gt;&gt;&gt;&gt; # Add some data to the end of the BLOB&gt;&gt;&gt; more_data = b' all'&gt;&gt;&gt; offset = len(data)&gt;&gt;&gt; cur.execute(&quot;SELECT lo_put(%s, %s, %s)&quot;, [oid, offset, more_data])&gt;&gt;&gt; cur.execute(&quot;SELECT lo_get(%s)&quot;, [oid])&gt;&gt;&gt; cur.fetchall()([b'hello all'],)&gt;&gt;&gt;&gt;&gt;&gt; # Download a part of the data&gt;&gt;&gt; cur.execute(&quot;SELECT lo_get(%s, 6, 3)&quot;, [oid])&gt;&gt;&gt; cur.fetchall()([b'all'],)&gt;&gt;&gt;&gt;&gt;&gt; con.close()Type Mapping------------The following table shows the default mapping between Python types and PostgreSQL types,and vice versa.If pg8000 doesn't recognize a type that it receives from PostgreSQL, it will return itas a ``str`` type. This is how pg8000 handles PostgreSQL ``enum`` and XML types. It'spossible to change the default mapping using adapters (see the examples)... table:: Python to PostgreSQL Type Mapping   +-----------------------+-----------------+-----------------------------------------+   | Python Type           | PostgreSQL Type | Notes                                   |   +=======================+=================+=========================================+   | bool                  | bool            |                                         |   +-----------------------+-----------------+-----------------------------------------+   | int                   | int4            |                                         |   +-----------------------+-----------------+-----------------------------------------+   | str                   | text            |                                         |   +-----------------------+-----------------+-----------------------------------------+   | float                 | float8          |                                         |   +-----------------------+-----------------+-----------------------------------------+   | decimal.Decimal       | numeric         |                                         |   +-----------------------+-----------------+-----------------------------------------+   | bytes                 | bytea           |                                         |   +-----------------------+-----------------+-----------------------------------------+   | datetime.datetime     | timestamp       | +/-infinity PostgreSQL values are       |   | (without tzinfo)      | without         | represented as Python ``str`` values.   |   |                       | timezone        |                                         |   +-----------------------+-----------------+-----------------------------------------+   | datetime.datetime     | timestamp with  | +/-infinity PostgreSQL values are       |   | (with tzinfo)         | timezone        | represented as Python ``str`` values.   |   +-----------------------+-----------------+-----------------------------------------+   | datetime.date         | date            | +/-infinity PostgreSQL values are       |   |                       |                 | represented as Python ``str`` values.   |   +-----------------------+-----------------+-----------------------------------------+   | datetime.time         | time without    |                                         |   |                       | time zone       |                                         |   +-----------------------+-----------------+-----------------------------------------+   | datetime.timedelta    | interval        | If an ``interval`` is too big for       |   |                       |                 | ``datetime.timedelta`` then a           |   |                       |                 | ``PGInterval``  is used.                |   +-----------------------+-----------------+-----------------------------------------+   | None                  | NULL            |                                         |   +-----------------------+-----------------+-----------------------------------------+   | uuid.UUID             | uuid            |                                         |   +-----------------------+-----------------+-----------------------------------------+   | ipaddress.IPv4Address | inet            |                                         |   +-----------------------+-----------------+-----------------------------------------+   | ipaddress.IPv6Address | inet            |                                         |   +-----------------------+-----------------+-----------------------------------------+   | ipaddress.IPv4Network | inet            |                                         |   +-----------------------+-----------------+-----------------------------------------+   | ipaddress.IPv6Network | inet            |                                         |   +-----------------------+-----------------+-----------------------------------------+   | int                   | xid             |                                         |   +-----------------------+-----------------+-----------------------------------------+   | list of int           | INT4[]          |                                         |   +-----------------------+-----------------+-----------------------------------------+   | list of float         | FLOAT8[]        |                                         |   +-----------------------+-----------------+-----------------------------------------+   | list of bool          | BOOL[]          |                                         |   +-----------------------+-----------------+-----------------------------------------+   | list of str           | TEXT[]          |                                         |   +-----------------------+-----------------+-----------------------------------------+   | int                   | int2vector      | Only from PostgreSQL to Python          |   +-----------------------+-----------------+-----------------------------------------+   | JSON                  | json, jsonb     | The Python JSON is provided as a Python |   |                       |                 | serialized string. Results returned as  |   |                       |                 | de-serialized JSON.                     |   +-----------------------+-----------------+-----------------------------------------+   | tuple                 | composite type  | Only from Python to PostgreSQL          |   +-----------------------+-----------------+-----------------------------------------+Theory Of Operation-------------------  A concept is tolerated inside the microkernel only if moving it outside the kernel,  i.e., permitting competing implementations, would prevent the implementation of the  system's required functionality.  -- Jochen Liedtke, Liedtke's minimality principlepg8000 is designed to be used with one thread per connection.Pg8000 communicates with the database using the `PostgreSQL Frontend/Backend Protocol&lt;https://www.postgresql.org/docs/current/protocol.html&gt;`_ (FEBE). If a query has noparameters, pg8000 uses the 'simple query protocol'. If a query does have parameters,pg8000 uses the 'extended query protocol' with unnamed prepared statements. The stepsfor a query with parameters are:1. Query comes in.#. Send a PARSE message to the server to create an unnamed prepared statement.#. Send a BIND message to run against the unnamed prepared statement, resulting in an   unnamed portal on the server.#. Send an EXECUTE message to read all the results from the portal.It's also possible to use named prepared statements. In which case the preparedstatement persists on the server, and represented in pg8000 using a``PreparedStatement`` object. This means that the PARSE step gets executed once upfront, and then only the BIND and EXECUTE steps are repeated subsequently.There are a lot of PostgreSQL data types, but few primitive data types in Python. Bydefault, pg8000 doesn't send PostgreSQL data type information in the PARSE step, inwhich case PostgreSQL assumes the types implied by the SQL statement. In some casesPostgreSQL can't work out a parameter type and so an `explicit cast&lt;https://www.postgresql.org/docs/current/static/sql-expressions.html#SQL-SYNTAX-TYPE-CASTS&gt;`_can be used in the SQL.In the FEBE protocol, each query parameter can be sent to the server either as binaryor text according to the format code. In pg8000 the parameters are always sent as text.Occasionally, the network connection between pg8000 and the server may go down. Ifpg8000 encounters a network problem it'll raise an ``InterfaceError`` with the message``network error`` and with the original exception set as the `cause&lt;https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement&gt;`_.Native API Docs---------------pg8000.native.Error```````````````````Generic exception that is the base exception of the other error exceptions.pg8000.native.InterfaceError````````````````````````````For errors that originate within pg8000.pg8000.native.DatabaseError```````````````````````````For errors that originate from the server.pg8000.native.Connection(user, host='localhost', database=None, port=5432, password=None, source_address=None, unix_sock=None, ssl_context=None, timeout=None, tcp_keepalive=True, application_name=None, replication=None)```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````Creates a connection to a PostgreSQL database.user  The username to connect to the PostgreSQL server with. If your server character  encoding is not ``ascii`` or ``utf8``, then you need to provide ``user`` as bytes,  eg. ``'my_name'.encode('EUC-JP')``.host  The hostname of the PostgreSQL server to connect with. Providing this parameter is  necessary for TCP/IP connections. One of either ``host`` or ``unix_sock`` must be  provided. The default is ``localhost``.database  The name of the database instance to connect with. If ``None`` then the PostgreSQL  server will assume the database name is the same as the username. If your server  character encoding is not ``ascii`` or ``utf8``, then you need to provide ``database``  as bytes, eg. ``'my_db'.encode('EUC-JP')``.port  The TCP/IP port of the PostgreSQL server instance.  This parameter defaults to  ``5432``, the registered common port of PostgreSQL TCP/IP servers.password  The user password to connect to the server with. This parameter is optional; if  omitted and the database server requests password-based authentication, the connection  will fail to open. If this parameter is provided but not  requested by the server, no error will occur.  If your server character encoding is not ``ascii`` or ``utf8``, then you need to  provide ``password`` as bytes, eg.  ``'my_password'.encode('EUC-JP')``.source_address  The source IP address which initiates the connection to the PostgreSQL server. The  default is ``None`` which means that the operating system will choose the source  address.unix_sock  The path to the UNIX socket to access the database through, for example,  ``'/tmp/.s.PGSQL.5432'``. One of either ``host`` or ``unix_sock`` must be provided.ssl_context  This governs SSL encryption for TCP/IP sockets. It can have three values:  - ``None``, meaning no SSL (the default)  - ``True``, means use SSL with an |ssl.SSLContext|_ created using    |ssl.create_default_context()|_  - An instance of |ssl.SSLContext|_ which will be used to create the SSL connection.  If your PostgreSQL server is behind an SSL proxy, you can set the pg8000-specific  attribute ``ssl.SSLContext.request_ssl = False``, which tells pg8000 to use an SSL  socket, but not to request SSL from the PostgreSQL server. Note that this means you  can't use SCRAM authentication with channel binding.timeout  This is the time in seconds before the connection to the server will time out. The  default is ``None`` which means no timeout.tcp_keepalive  If ``True`` then use `TCP keepalive  &lt;https://en.wikipedia.org/wiki/Keepalive#TCP_keepalive&gt;`_. The default is ``True``.application_name  Sets the `application_name  &lt;https://www.postgresql.org/docs/current/runtime-config-logging.html#GUC-APPLICATION-NAME&gt;`_.  If your server character encoding is not ``ascii`` or ``utf8``, then you need to  provide values as bytes, eg.  ``'my_application_name'.encode('EUC-JP')``. The default  is ``None`` which means that the server will set the application name.replication  Used to run in `streaming replication mode  &lt;https://www.postgresql.org/docs/current/protocol-replication.html&gt;`_. If your server  character encoding is not ``ascii`` or ``utf8``, then you need to provide values as  bytes, eg. ``'database'.encode('EUC-JP')``.pg8000.native.Connection.notifications``````````````````````````````````````A deque of server-side `notifications&lt;https://www.postgresql.org/docs/current/sql-notify.html&gt;`__ received by this databaseconnection (via the ``LISTEN`` / ``NOTIFY`` PostgreSQL commands). Each list item is athree-element tuple containing the PostgreSQL backend PID that issued the notify, thechannel and the payload.pg8000.native.Connection.notices````````````````````````````````A deque of server-side notices received by this database connection.pg8000.native.Connection.parameter_statuses```````````````````````````````````````````A deque of server-side parameter statuses received by this database connection.pg8000.native.Connection.run(sql, stream=None, types=None, \*\*kwargs)``````````````````````````````````````````````````````````````````````Executes an sql statement, and returns the results as a ``list``. For example::  con.run(&quot;SELECT * FROM cities where population &gt; :pop&quot;, pop=10000)sql  The SQL statement to execute. Parameter placeholders appear as a ``:`` followed by the  parameter name.stream  For use with the PostgreSQL `COPY  &lt;http://www.postgresql.org/docs/current/static/sql-copy.html&gt;`__ command. The nature  of the parameter depends on whether the SQL command is ``COPY FROM`` or ``COPY TO``.  ``COPY FROM``    The stream parameter must be a readable file-like object or an iterable. If it's an    iterable then the items can be ``str`` or binary.  ``COPY TO``    The stream parameter must be a writable file-like object.types  A dictionary of oids. A key corresponds to a parameter. kwargs  The parameters of the SQL statement.pg8000.native.Connection.row_count``````````````````````````````````This read-only attribute contains the number of rows that the last ``run()`` methodproduced (for query statements like ``SELECT``) or affected (for modification statementslike ``UPDATE``.The value is -1 if:- No ``run()`` method has been performed yet.- There was no rowcount associated with the last ``run()``.pg8000.native.Connection.columns````````````````````````````````A list of column metadata. Each item in the list is a dictionary with the followingkeys:- name- table_oid- column_attrnum- type_oid- type_size- type_modifier- formatpg8000.native.Connection.close()````````````````````````````````Closes the database connection.pg8000.native.Connection.register_out_adapter(typ, out_func)````````````````````````````````````````````````````````````Register a type adapter for types going out from pg8000 to the server.typ  The Python class that the adapter is for.out_func  A function that takes the Python object and returns its string representation  in the format that the server requires.pg8000.native.Connection.register_in_adapter(oid, in_func)``````````````````````````````````````````````````````````Register a type adapter for types coming in from the server to pg8000.oid  The PostgreSQL type identifier found in the `pg_type system catalog  &lt;https://www.postgresql.org/docs/current/catalog-pg-type.html&gt;`_.in_func  A function that takes the PostgreSQL string representation and returns a corresponding  Python object.pg8000.native.Connection.prepare(sql)`````````````````````````````````````Returns a ``PreparedStatement`` object which represents a `prepared statement&lt;https://www.postgresql.org/docs/current/sql-prepare.html&gt;`_ on the server. It cansubsequently be repeatedly executed.sql  The SQL statement to prepare. Parameter placeholders appear as a ``:`` followed by the  parameter name.pg8000.native.PreparedStatement```````````````````````````````A prepared statement object is returned by the ``pg8000.native.Connection.prepare()``method of a connection. It has the following methods:pg8000.native.PreparedStatement.run(\*\*kwargs)```````````````````````````````````````````````Executes the prepared statement, and returns the results as a ``tuple``.kwargs  The parameters of the prepared statement.pg8000.native.PreparedStatement.close()```````````````````````````````````````Closes the prepared statement, releasing the prepared statement held on the server.pg8000.native.identifier(ident)```````````````````````````````Correctly quotes and escapes a string to be used as an `SQL identifier&lt;https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS&gt;`_.ident  The ``str`` to be used as an SQL identifier.pg8000.native.literal(value)````````````````````````````Correctly quotes and escapes a value to be used as an `SQL literal&lt;https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS&gt;`_.value  The value to be used as an SQL literal.DB-API 2 Docs-------------Properties``````````pg8000.dbapi.apilevel:::::::::::::::::::::The DBAPI level supported, currently &quot;2.0&quot;.pg8000.dbapi.threadsafety:::::::::::::::::::::::::Integer constant stating the level of thread safety the DBAPI interface supports. Forpg8000, the threadsafety value is 1, meaning that threads may share the module but notconnections.pg8000.dbapi.paramstyle:::::::::::::::::::::::String property stating the type of parameter marker formatting expected bythe interface.  This value defaults to &quot;format&quot;, in which parameters aremarked in this format: &quot;WHERE name=%s&quot;.As an extension to the DBAPI specification, this value is not constant; it can bechanged to any of the following values:qmark  Question mark style, eg. ``WHERE name=?``numeric  Numeric positional style, eg. ``WHERE name=:1``named  Named style, eg. ``WHERE name=:paramname``format  printf format codes, eg. ``WHERE name=%s``pyformat  Python format codes, eg. ``WHERE name=%(paramname)s``pg8000.dbapi.STRING:::::::::::::::::::String type oid.pg8000.dbapi.BINARY:::::::::::::::::::pg8000.dbapi.NUMBER:::::::::::::::::::Numeric type oid.pg8000.dbapi.DATETIME:::::::::::::::::::::Timestamp type oidpg8000.dbapi.ROWID::::::::::::::::::ROWID type oidFunctions`````````pg8000.dbapi.connect(user, host='localhost', database=None, port=5432, password=None, source_address=None, unix_sock=None, ssl_context=None, timeout=None, tcp_keepalive=True, application_name=None, replication=None):::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::Creates a connection to a PostgreSQL database.user  The username to connect to the PostgreSQL server with. If your server character  encoding is not ``ascii`` or ``utf8``, then you need to provide ``user`` as bytes,  eg. ``'my_name'.encode('EUC-JP')``.host  The hostname of the PostgreSQL server to connect with. Providing this parameter is  necessary for TCP/IP connections. One of either ``host`` or ``unix_sock`` must be  provided. The default is ``localhost``.database  The name of the database instance to connect with. If ``None`` then the PostgreSQL  server will assume the database name is the same as the username. If your server  character encoding is not ``ascii`` or ``utf8``, then you need to provide ``database``  as bytes, eg. ``'my_db'.encode('EUC-JP')``.port  The TCP/IP port of the PostgreSQL server instance.  This parameter defaults to  ``5432``, the registered common port of PostgreSQL TCP/IP servers.password  The user password to connect to the server with. This parameter is optional; if  omitted and the database server requests password-based authentication, the  connection will fail to open. If this parameter is provided but not requested by the  server, no error will occur.  If your server character encoding is not ``ascii`` or ``utf8``, then you need to  provide ``password`` as bytes, eg.  ``'my_password'.encode('EUC-JP')``.source_address  The source IP address which initiates the connection to the PostgreSQL server. The  default is ``None`` which means that the operating system will choose the source  address.unix_sock  The path to the UNIX socket to access the database through, for example,  ``'/tmp/.s.PGSQL.5432'``. One of either ``host`` or ``unix_sock`` must be provided.ssl_context  This governs SSL encryption for TCP/IP sockets. It can have three values:  - ``None``, meaning no SSL (the default)  - ``True``, means use SSL with an |ssl.SSLContext|_ created using    |ssl.create_default_context()|_.  - An instance of |ssl.SSLContext|_ which will be used to create the SSL connection.  If your PostgreSQL server is behind an SSL proxy, you can set the pg8000-specific  attribute ``ssl.SSLContext.request_ssl = False``, which tells pg8000 to use an SSL  socket, but not to request SSL from the PostgreSQL server. Note that this means you  can't use SCRAM authentication with channel binding.timeout  This is the time in seconds before the connection to the server will time out. The  default is ``None`` which means no timeout.tcp_keepalive  If ``True`` then use `TCP keepalive  &lt;https://en.wikipedia.org/wiki/Keepalive#TCP_keepalive&gt;`_. The default is ``True``.application_name  Sets the `application_name  &lt;https://www.postgresql.org/docs/current/runtime-config-logging.html#GUC-APPLICATION-NAME&gt;`_. If your server character encoding is not ``ascii`` or ``utf8``, then you need to  provide values as bytes, eg. ``'my_application_name'.encode('EUC-JP')``. The default  is ``None`` which means that the server will set the application name.replication  Used to run in `streaming replication mode  &lt;https://www.postgresql.org/docs/current/protocol-replication.html&gt;`_. If your server  character encoding is not ``ascii`` or ``utf8``, then you need to provide values as  bytes, eg. ``'database'.encode('EUC-JP')``.pg8000.dbapi.Date(year, month, day)Construct an object holding a date value.This property is part of the `DBAPI 2.0 specification&lt;http://www.python.org/dev/peps/pep-0249/&gt;`_.Returns: `datetime.date`pg8000.dbapi.Time(hour, minute, second):::::::::::::::::::::::::::::::::::::::Construct an object holding a time value.Returns: ``datetime.time``pg8000.dbapi.Timestamp(year, month, day, hour, minute, second)::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::Construct an object holding a timestamp value.Returns: ``datetime.datetime``pg8000.dbapi.DateFromTicks(ticks):::::::::::::::::::::::::::::::::Construct an object holding a date value from the given ticks value (number of secondssince the epoch).Returns: ``datetime.datetime``pg8000.dbapi.TimeFromTicks(ticks):::::::::::::::::::::::::::::::::Construct an object holding a time value from the given ticks value (number of secondssince the epoch).Returns: ``datetime.time``pg8000.dbapi.TimestampFromTicks(ticks)::::::::::::::::::::::::::::::::::::::Construct an object holding a timestamp value from the given ticks value (number ofseconds since the epoch).Returns: ``datetime.datetime``pg8000.dbapi.Binary(value)::::::::::::::::::::::::::Construct an object holding binary data.Returns: ``bytes``.Generic Exceptions``````````````````Pg8000 uses the standard DBAPI 2.0 exception tree as &quot;generic&quot; exceptions. Generally,more specific exception types are raised; these specific exception types are derivedfrom the generic exceptions.pg8000.dbapi.Warning::::::::::::::::::::Generic exception raised for important database warnings like data truncations. Thisexception is not currently used by pg8000.pg8000.dbapi.Error::::::::::::::::::Generic exception that is the base exception of all other error exceptions.pg8000.dbapi.InterfaceError:::::::::::::::::::::::::::Generic exception raised for errors that are related to the database interface ratherthan the database itself. For example, if the interface attempts to use an SSLconnection but the server refuses, an InterfaceError will be raised.pg8000.dbapi.DatabaseError::::::::::::::::::::::::::Generic exception raised for errors that are related to the database. This exception iscurrently never raised by pg8000.pg8000.dbapi.DataError::::::::::::::::::::::Generic exception raised for errors that are due to problems with the processed data.This exception is not currently raised by pg8000.pg8000.dbapi.OperationalError:::::::::::::::::::::::::::::Generic exception raised for errors that are related to the database's operation and notnecessarily under the control of the programmer. This exception is currently neverraised by pg8000.pg8000.dbapi.IntegrityError:::::::::::::::::::::::::::Generic exception raised when the relational integrity of the database is affected. Thisexception is not currently raised by pg8000.pg8000.dbapi.InternalError::::::::::::::::::::::::::Generic exception raised when the database encounters an internal error. This iscurrently only raised when unexpected state occurs in the pg8000 interface itself, andis typically the result of a interface bug.pg8000.dbapi.ProgrammingError:::::::::::::::::::::::::::::Generic exception raised for programming errors. For example, this exception is raisedif more parameter fields are in a query string than there are available parameters.pg8000.dbapi.NotSupportedError::::::::::::::::::::::::::::::Generic exception raised in case a method or database API was used which is notsupported by the database.Classes```````pg8000.dbapi.Connection:::::::::::::::::::::::A connection object is returned by the ``pg8000.connect()`` function. It represents asingle physical connection to a PostgreSQL database.pg8000.dbapi.Connection.autocommit::::::::::::::::::::::::::::::::::Following the DB-API specification, autocommit is off by default. It can be turned on bysetting this boolean pg8000-specific autocommit property to ``True``.pg8000.dbapi.Connection.close():::::::::::::::::::::::::::::::Closes the database connection.pg8000.dbapi.Connection.cursor()::::::::::::::::::::::::::::::::Creates a ``pg8000.dbapi.Cursor`` object bound to this connection.pg8000.dbapi.Connection.rollback()::::::::::::::::::::::::::::::::::Rolls back the current database transaction.pg8000.dbapi.Connection.tpc_begin(xid)::::::::::::::::::::::::::::::::::::::Begins a TPC transaction with the given transaction ID xid. This method should becalled outside of a transaction (i.e. nothing may have executed since the last``commit()``  or ``rollback()``. Furthermore, it is an error to call ``commit()`` or``rollback()`` within the TPC transaction. A ``ProgrammingError`` is raised, if theapplication calls ``commit()`` or ``rollback()`` during an active TPC transaction.pg8000.dbapi.Connection.tpc_commit(xid=None)::::::::::::::::::::::::::::::::::::::::::::When called with no arguments, ``tpc_commit()`` commits a TPC transaction previouslyprepared with ``tpc_prepare()``. If ``tpc_commit()`` is called prior to``tpc_prepare()``, a single phase commit is performed. A transaction manager may chooseto do this if only a single resource is participating in the global transaction.When called with a transaction ID ``xid``, the database commits the given transaction.If an invalid transaction ID is provided, a ``ProgrammingError`` will be raised. Thisform should be called outside of a transaction, and is intended for use in recovery.On return, the TPC transaction is ended.pg8000.dbapi.Connection.tpc_prepare():::::::::::::::::::::::::::::::::::::Performs the first phase of a transaction started with ``.tpc_begin()``. A``ProgrammingError`` is be raised if this method is called outside of a TPC transaction.After calling ``tpc_prepare()``, no statements can be executed until ``tpc_commit()`` or``tpc_rollback()`` have been called.pg8000.dbapi.Connection.tpc_recover():::::::::::::::::::::::::::::::::::::Returns a list of pending transaction IDs suitable for use with ``tpc_commit(xid)`` or``tpc_rollback(xid)``.pg8000.dbapi.Connection.tpc_rollback(xid=None)::::::::::::::::::::::::::::::::::::::::::::::When called with no arguments, ``tpc_rollback()`` rolls back a TPC transaction. It maybe called before or after ``tpc_prepare()``.When called with a transaction ID xid, it rolls back the given transaction. If aninvalid transaction ID is provided, a ``ProgrammingError`` is raised. This form shouldbe called outside of a transaction, and is intended for use in recovery.On return, the TPC transaction is ended.pg8000.dbapi.Connection.xid(format_id, global_transaction_id, branch_qualifier):::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::Create a Transaction IDs (only global_transaction_id is used in pg) format_id andbranch_qualifier are not used in postgres global_transaction_id may be any stringidentifier supported by postgres returns a tuple (format_id, global_transaction_id,branch_qualifier)pg8000.dbapi.Cursor:::::::::::::::::::A cursor object is returned by the ``pg8000.dbapi.Connection.cursor()`` method of aconnection. It has the following attributes and methods:pg8000.dbapi.Cursor.arraysize'''''''''''''''''''''''''''''This read/write attribute specifies the number of rows to fetch at a time with``pg8000.dbapi.Cursor.fetchmany()``.  It defaults to 1.pg8000.dbapi.Cursor.connection''''''''''''''''''''''''''''''This read-only attribute contains a reference to the connection object (an instance of``pg8000.dbapi.Connection``) on which the cursor was created.pg8000.dbapi.Cursor.rowcount''''''''''''''''''''''''''''This read-only attribute contains the number of rows that the last ``execute()`` or``executemany()`` method produced (for query statements like ``SELECT``) or affected(for modification statements like ``UPDATE``.The value is -1 if:- No ``execute()`` or ``executemany()`` method has been performed yet on the cursor.- There was no rowcount associated with the last ``execute()``.- At least one of the statements executed as part of an ``executemany()`` had no row  count associated with it.pg8000.dbapi.Cursor.description'''''''''''''''''''''''''''''''This read-only attribute is a sequence of 7-item sequences. Each value containsinformation describing one result column. The 7 items returned for each column are(name, type_code, display_size, internal_size, precision, scale, null_ok). Only thefirst two values are provided by the current implementation.pg8000.dbapi.Cursor.close()'''''''''''''''''''''''''''Closes the cursor.pg8000.dbapi.Cursor.execute(operation, args=None, stream=None)''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Executes a database operation. Parameters may be provided as a sequence, or as amapping, depending upon the value of ``pg8000.dbapi.paramstyle``. Returns the cursor,which may be iterated over.operation  The SQL statement to execute.args  If ``pg8000.dbapi.paramstyle`` is ``qmark``, ``numeric``, or ``format``, this  argument should be an array of parameters to bind into the statement. If  ``pg8000.dbapi.paramstyle`` is ``named``, the argument should be a ``dict`` mapping of  parameters. If ``pg8000.dbapi.paramstyle`` is ``pyformat``, the argument value may be  either an array or a mapping.stream  This is a pg8000 extension for use with the PostgreSQL `COPY  &lt;http://www.postgresql.org/docs/current/static/sql-copy.html&gt;`__ command. For a  ``COPY FROM`` the parameter must be a readable file-like object, and for ``COPY TO``  it must be writable.pg8000.dbapi.Cursor.executemany(operation, param_sets)''''''''''''''''''''''''''''''''''''''''''''''''''''''Prepare a database operation, and then execute it against all parameter sequences ormappings provided.operation  The SQL statement to execute.parameter_sets  A sequence of parameters to execute the statement with. The values in the sequence  should be sequences or mappings of parameters, the same as the args argument of the  ``pg8000.dbapi.Cursor.execute()`` method.pg8000.dbapi.Cursor.callproc(procname, parameters=None)'''''''''''''''''''''''''''''''''''''''''''''''''''''''Call a stored database procedure with the given name and optional parameters.procname  The name of the procedure to call.parameters  A list of parameters.pg8000.dbapi.Cursor.fetchall()''''''''''''''''''''''''''''''Fetches all remaining rows of a query result.Returns: A sequence, each entry of which is a sequence of field values making up a row.pg8000.dbapi.Cursor.fetchmany(size=None)''''''''''''''''''''''''''''''''''''''''Fetches the next set of rows of a query result.size  The number of rows to fetch when called.  If not provided, the  ``pg8000.dbapi.Cursor.arraysize`` attribute value is used instead.Returns: A sequence, each entry of which is a sequence of field values making up a row.If no more rows are available, an empty sequence will be returned.pg8000.dbapi.Cursor.fetchone()''''''''''''''''''''''''''''''Fetch the next row of a query result set.Returns: A row as a sequence of field values, or ``None`` if no more rows are available.pg8000.dbapi.Cursor.setinputsizes(\*sizes)''''''''''''''''''''''''''''''''''''''''''Used to set the parameter types of the next query. This is useful if it's difficult forpg8000 to work out the types from the parameters themselves (eg. for parameters of typeNone).sizes  Positional parameters that are either the Python type of the parameter to be sent, or  the PostgreSQL oid. Common oids are available as constants such as ``pg8000.STRING``,  ``pg8000.INTEGER``, ``pg8000.TIME`` etc.pg8000.dbapi.Cursor.setoutputsize(size, column=None)''''''''''''''''''''''''''''''''''''''''''''''''''''Not implemented by pg8000.pg8000.dbapi.Interval'''''''''''''''''''''An Interval represents a measurement of time.  In PostgreSQL, an interval is defined inthe measure of months, days, and microseconds; as such, the pg8000 interval typerepresents the same information.Note that values of the ``pg8000.dbapi.Interval.microseconds``,``pg8000.dbapi.Interval.days``, and ``pg8000.dbapi.Interval.months`` properties areindependently measured and cannot be converted to each other. A month may be 28, 29, 30,or 31 days, and a day may occasionally be lengthened slightly by a leap second.Tests------ Install `tox &lt;http://testrun.org/tox/latest/&gt;`_: ``pip install tox``- Enable the PostgreSQL hstore extension by running the SQL command:  ``create extension hstore;``- Add a line to ``pg_hba.conf`` for the various authentication options:::  host    pg8000_md5           all        127.0.0.1/32            md5  host    pg8000_gss           all        127.0.0.1/32            gss  host    pg8000_password      all        127.0.0.1/32            password  host    pg8000_scram_sha_256 all        127.0.0.1/32            scram-sha-256  host    all                  all        127.0.0.1/32            trust- Set password encryption to ``scram-sha-256`` in ``postgresql.conf``:  ``password_encryption = 'scram-sha-256'``- Set the password for the postgres user: ``ALTER USER postgresql WITH PASSWORD 'pw';``- Run ``tox`` from the ``pg8000`` directory: ``tox``This will run the tests against the Python version of the virtual environment, on themachine, and the installed PostgreSQL version listening on port 5432, or the ``PGPORT``environment variable if set.Benchmarks are run as part of the test suite at ``tests/test_benchmarks.py``.Doing A Release Of pg8000-------------------------Run ``tox`` to make sure all tests pass, then update the release notes, then do:::  git tag -a x.y.z -m &quot;version x.y.z&quot;  rm -r dist  python -m build  twine upload dist/*Release Notes-------------Version 1.29.6, 2023-05-29``````````````````````````- Fixed two bugs with composite types. Nulls should be represented by an empty string,  and in an array of composite types, the elements should be surrounded by double  quotes.Version 1.29.5, 2023-05-09``````````````````````````- Fixed bug where pg8000 didn't handle the case when the number of bytes received from  a socket was fewer than requested. This was being interpreted as a network error, but  in fact we just needed to wait until more bytes were available.- When using the ``PGInterval`` type, if a response from the server contained the period  ``millennium``, it wasn't recognised. This was caused by a spelling mistake where we  had ``millenium`` rather than ``millennium``.- Added support for sending PostgreSQL composite types. If a value is sent as a  ``tuple``, pg8000 will send it to the server as a ``(`` delimited composite string.Version 1.29.4, 2022-12-14``````````````````````````- Fixed bug in ``pg8000.dbapi`` in the ``setinputsizes()`` method where if a ``size``  was a recognized Python type, the method failed.Version 1.29.3, 2022-10-26``````````````````````````- Upgrade the SCRAM library to version 1.4.3. This adds support for the case where the  client supports channel binding but the server doesn't.Version 1.29.2, 2022-10-09``````````````````````````- Fixed a bug where in a literal array, items such as ``\n`` and ``\r`` weren't  escaped properly before being sent to the server.- Fixed a bug where if the PostgreSQL server has a half-hour time zone set, values of  type ``timestamp with time zone`` failed. This has been fixed by using the ``parse``  function of the ``dateutil`` package if the ``datetime`` parser fails.Version 1.29.1, 2022-05-23``````````````````````````- In trying to determine if there's been a failed commit, check for ``ROLLBACK TO  SAVEPOINT``.Version 1.29.0, 2022-05-21``````````````````````````- Implement a workaround for the `silent failed commit  &lt;https://github.com/tlocke/pg8000/issues/36&gt;`_ bug.- Previously if an empty string was sent as the query an exception would be raised, but  that isn't done now.Version 1.28.3, 2022-05-18``````````````````````````- Put back ``__version__`` attributes that were inadvertently removed.Version 1.28.2, 2022-05-17``````````````````````````- Use a build system that's compliant with PEP517.Version 1.28.1, 2022-05-17``````````````````````````- If when doing a ``COPY FROM`` the ``stream`` parameter is an iterator of ``str``,  pg8000 used to silently append a newline to the end. That no longer happens.Version 1.28.0, 2022-05-17``````````````````````````- When using the ``COPY FROM`` SQL statement, allow the ``stream`` parameter to be an  iterable.Version 1.27.1, 2022-05-16``````````````````````````- The ``seconds`` attribute of ``PGInterval`` is now always a ``float``, to cope with  fractional seconds.- Updated the ``interval`` parsers for ``iso_8601`` and ``sql_standard`` to take  account of fractional seconds.Version 1.27.0, 2022-05-16``````````````````````````- It used to be that by default, if pg8000 received an ``interval`` type from the server  and it was too big to fit into a ``datetime.timedelta`` then an exception would be  raised. Now if an interval is too big for ``datetime.timedelta`` a ``PGInterval`` is  returned.* pg8000 now supports all the output formats for an ``interval`` (``postgres``,  ``postgres_verbose``, ``iso_8601`` and ``sql_standard``).Version 1.26.1, 2022-04-23``````````````````````````- Make sure all tests are run by the GitHub Actions tests on commit.- Remove support for Python 3.6- Remove support for PostgreSQL 9.6Version 1.26.0, 2022-04-18``````````````````````````- When connecting, raise an ``InterfaceError('network error')`` rather than let the  underlying ``struct.error`` float up.- Make licence text the same as that used by the OSI. Previously the licence wording  differed slightly from the BSD 3 Clause licence at  https://opensource.org/licenses/BSD-3-Clause. This meant that automated tools didn't  pick it up as being Open Source. The changes are believed to not alter the meaning of   the license at all.Version 1.25.0, 2022-04-17``````````````````````````- Fix more cases where a ``ResourceWarning`` would be raise because of a socket that had  been left open.- We now have a single ``InterfaceError`` with the message 'network error' for all  network errors, with the underlying exception held in the ``cause`` of the exception.Version 1.24.2, 2022-04-15``````````````````````````- To prevent a ``ResourceWarning`` close socket if a connection can't be created.Version 1.24.1, 2022-03-02``````````````````````````- Return pg +/-infinity dates as ``str``. Previously +/-infinity pg values would cause  an error when returned, but now we return +/-infinity as strings.Version 1.24.0, 2022-02-06``````````````````````````- Add SQL escape functions identifier() and literal() to the native API. For use when a  query can't be parameterised and the SQL string has to be created using untrusted  values.Version 1.23.0, 2021-11-13``````````````````````````- If a query has no parameters, then the query will no longer be parsed. Although there  are performance benefits for doing this, the main reason is to avoid query rewriting,  which can introduce errors.Version 1.22.1, 2021-11-10``````````````````````````- Fix bug in PGInterval type where ``str()`` failed for a millennia value.Version 1.22.0, 2021-10-13``````````````````````````- Rather than specifying the oids in the ``Parse`` step of the Postgres protocol, pg8000  now omits them, and so Postgres will use the oids it determines from the query. This  makes the pg8000 code simpler and also it should also make the nuances of type  matching more straightforward.</longdescription>
</pkgmetadata>