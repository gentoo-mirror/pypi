<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## AWS Lambda Python Runtime Interface ClientWe have open-sourced a set of software packages, Runtime Interface Clients (RIC), that implement the Lambda [Runtime API](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html), allowing you to seamlessly extend your preferred  base images to be Lambda compatible.The Lambda Runtime Interface Client is a lightweight interface that allows your runtime to receive requests from and send requests to the Lambda service.The Lambda Python Runtime Interface Client is vended through [pip](https://pypi.org/project/awslambdaric). You can include this package in your preferred base image to make that base image Lambda compatible.## RequirementsThe Python Runtime Interface Client package currently supports Python versions: - 3.7.x up to and including 3.9.x## Usage### Creating a Docker Image for Lambda with the Runtime Interface ClientFirst step is to choose the base image to be used. The supported Linux OS distributions are: - Amazon Linux 2 - Alpine - CentOS - Debian - UbuntuThen, the Runtime Interface Client needs to be installed. We provide both wheel and source distribution.If the OS/pip version used does not support [manylinux2014](https://www.python.org/dev/peps/pep-0599/) wheels, you will also need to install the required build dependencies.Also, your Lambda function code needs to be copied into the image.```dockerfile# Include global arg in this stage of the buildARG FUNCTION_DIR# Install aws-lambda-cpp build dependenciesRUN apt-get update &amp;&amp; \  apt-get install -y \  g++ \  make \  cmake \  unzip \  libcurl4-openssl-dev# Copy function codeRUN mkdir -p ${FUNCTION_DIR}COPY app/* ${FUNCTION_DIR}# Install the function's dependenciesRUN pip install \    --target ${FUNCTION_DIR} \        awslambdaric```The next step would be to set the `ENTRYPOINT` property of the Docker image to invoke the Runtime Interface Client and then set the `CMD` argument to specify the desired handler.Example Dockerfile (to keep the image light we use a multi-stage build):```dockerfile# Define custom function directoryARG FUNCTION_DIR=&quot;/function&quot;FROM public.ecr.aws/docker/library/python:buster as build-image# Include global arg in this stage of the buildARG FUNCTION_DIR# Install aws-lambda-cpp build dependenciesRUN apt-get update &amp;&amp; \  apt-get install -y \  g++ \  make \  cmake \  unzip \  libcurl4-openssl-dev# Copy function codeRUN mkdir -p ${FUNCTION_DIR}COPY app/* ${FUNCTION_DIR}# Install the function's dependenciesRUN pip install \    --target ${FUNCTION_DIR} \        awslambdaricFROM public.ecr.aws/docker/library/python:buster# Include global arg in this stage of the buildARG FUNCTION_DIR# Set working directory to function root directoryWORKDIR ${FUNCTION_DIR}# Copy in the built dependenciesCOPY --from=build-image ${FUNCTION_DIR} ${FUNCTION_DIR}ENTRYPOINT [ &quot;/usr/local/bin/python&quot;, &quot;-m&quot;, &quot;awslambdaric&quot; ]CMD [ &quot;app.handler&quot; ]```Example Python handler `app.py`:```pythondef handler(event, context):    return &quot;Hello World!&quot;```### Local TestingTo make it easy to locally test Lambda functions packaged as container images we open-sourced a lightweight web-server, Lambda Runtime Interface Emulator (RIE), which allows your function packaged as a container image to accept HTTP requests. You can install the [AWS Lambda Runtime Interface Emulator](https://github.com/aws/aws-lambda-runtime-interface-emulator) on your local machine to test your function. Then when you run the image function, you set the entrypoint to be the emulator. *To install the emulator and test your Lambda function*1) From your project directory, run the following command to download the RIE from GitHub and install it on your local machine. ```shell scriptmkdir -p ~/.aws-lambda-rie &amp;&amp; \    curl -Lo ~/.aws-lambda-rie/aws-lambda-rie https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie &amp;&amp; \    chmod +x ~/.aws-lambda-rie/aws-lambda-rie```2) Run your Lambda image function using the docker run command. ```shell scriptdocker run -d -v ~/.aws-lambda-rie:/aws-lambda -p 9000:8080 \    --entrypoint /aws-lambda/aws-lambda-rie \    myfunction:latest \        /usr/local/bin/python -m awslambdaric app.handler```This runs the image as a container and starts up an endpoint locally at `http://localhost:9000/2015-03-31/functions/function/invocations`. 3) Post an event to the following endpoint using a curl command: ```shell scriptcurl -XPOST &quot;http://localhost:9000/2015-03-31/functions/function/invocations&quot; -d '{}'```This command invokes the function running in the container image and returns a response.*Alternately, you can also include RIE as a part of your base image. See the AWS documentation on how to [Build RIE into your base image](https://docs.aws.amazon.com/lambda/latest/dg/images-test.html#images-test-alternative).*## Development### Building the packageClone this repository and run:```shell scriptmake initmake build```### Running testsMake sure the project is built:```shell scriptmake init build```Then,* to run unit tests: `make test`* to run integration tests: `make test-integ`* to run smoke tests: `make test-smoke`### TroubleshootingWhile running integration tests, you might encounter the Docker Hub rate limit error with the following body:```You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limits```To fix the above issue, consider authenticating to a Docker Hub account by setting the Docker Hub credentials as below CodeBuild environment variables.```shell scriptDOCKERHUB_USERNAME=&lt;dockerhub username&gt;DOCKERHUB_PASSWORD=&lt;dockerhub password&gt;```Recommended way is to set the Docker Hub credentials in CodeBuild job by retrieving them from AWS Secrets Manager.## SecurityIf you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public github issue.## LicenseThis project is licensed under the Apache-2.0 License.</longdescription>
</pkgmetadata>