<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![pyprojectx](docs/docs/assets/px.png)# Pyprojectx: All-inclusive Python ProjectsExecute scripts from pyproject.toml, installing tools on-the-fly## [Full documentation](https://pyprojectx.github.io)## IntroductionPyprojectx makes it easy to create all-inclusive Python projects; no need to install any tools upfront,not even Pyprojectx itself!## Feature highlights* Reproducible builds by treating tools and utilities as (versioned) dev-dependencies* No global installs, everything is stored inside your project directory (like npm's _node_modules_)* Bootstrap your entire build process with a small wrapper script (like Gradle's _gradlew_ wrapper)* Configure shortcuts for routine tasks* Simple configuration in _pyproject.toml_Projects can be build/tested/used immediately without explicit installation nor initialization:```bashgit clone https://github.com/pyprojectx/px-demo.gitcd px-demo./pw build```![Clone and Build](https://raw.githubusercontent.com/pyprojectx/pyprojectx/main/docs/docs/assets/build.png)## InstallationOne of the key features is that there is no need to install anything explicitly (except a Python 3.7+ interpreter).`cd` into your project directory and download the[wrapper scripts](https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip):**Linux/Mac**```bashcurl -LO https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip &amp;&amp; unzip wrappers.zip &amp;&amp; rm -f wrappers.zip```**Windows**```powershell(Invoke-WebRequest https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip).Content | Expand-Archive -DestinationPath .```## Project initializationInitialize a new or existing project with the _--init_ option (on Windows, replace `./pw` with `pw`):* `./pw --init project`: add pyprojectx example sections to an existing or new _pyproject.toml_ in the current directory.* `./pw --init poetry`: initialize a [Poetry](https://python-poetry.org/) project and add pyprojectx example sections to _pyproject.toml_.* `./pw --init pdm`: initialize a [PDM](https://pdm.fming.dev/) project and add pyprojectx example sections to _pyproject.toml_.## ConfigurationAdd the _tool.pyprojectx_ section inside _pyproject.toml_ in your project's root directory.Each entry has the form `tool = &quot;pip-requirements&quot;`, where _pip-requirements_ adheres to the[requirements file format](https://pip.pypa.io/en/stable/reference/requirements-file-format/).Example:```toml[tool.pyprojectx]# require a specific poetry versionpoetry = &quot;poetry==1.1.13&quot;# use the latest blackisort = &quot;isort&quot;# install flake8 in combination with pluginsflake8 = [&quot;flake8&quot;, &quot;flake8-black&quot;]```The _tool.pyprojectx.aliases_ section can contain optional commandline aliases in the form`alias = [@tool_key:] command`Example:```toml[tool.pyprojectx.alias]# convenience shortcutsrun = &quot;poetry run&quot;test = &quot;poetry run pytest&quot;# flake8-black also contains the black scriptblack = &quot;@flake8: black&quot;# simple shell commandsclean = &quot;rm -f .coverage .pytest_cache&quot;# when running an alias from within another alias, prefix it with `pw@`check = &quot;pw@flake8 &amp;&amp; pw@test&quot;```## UsageInstead of calling the commandline of a tool directly, prefix it with `path\to\pw`.Examples:```shell./pw poetry add -D pytestcd src../pw black *.py```... or on Windows:```shellpw poetry add -D pytestcd src..\pw black *.py```Aliases can be invoked as is or with extra arguments:```shell./pw poetry run my-script --foo bar# same as above, but using the run alias./pw run my-script --foo bar```## Why yet another tool?* As Python noob I had hard times setting up a project and building existing projects* There is always someone in the team having issues with his setup, either with a specific tool, with Homebrew, pipx, ...* Using (Poetry) dev-dependencies to install tools, impacts your production dependencies and can even lead to dependency conflicts* Different projects often require different versions of the same tool## Example projects* This project (using Poetry)* [px-demo](https://github.com/pyprojectx/px-demo) (using PDM)## Development* Build/test:```shellgit clone https://github.com/pyprojectx/pyprojectx.gitcd pyprojectx./pw build```* Set the path to pyprojectx in the _PYPROJECTX_PACKAGE_ environment variable  to use your local pyprojectx copy in another project.```shell# Linux, Macexport PYPROJECTX_PACKAGE=path/to/pyprojectx# windowsset PYPROJECTX_PACKAGE=path/to/pyprojectx```</longdescription>
</pkgmetadata>