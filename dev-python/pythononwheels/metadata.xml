<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. figure:: http://www.pythononwheels.org/static/images/pow_logo_300.png   :alt: Pow logo   Pow logoThe quick and easy generative Webframework for python3. Ready to go!====================================================================    Based on the ruby on rails principles. Generators for    models/controllers/views/migrations..., convention over    configuration, and PoW gets out of the way if you want it.Hello World===========::    @app.make_routes()    class HelloHandler(BaseHandler):        @route(r'/hello', dispatch=[&quot;get&quot;])        def hello(self):            self.write(&quot;Hello world!&quot;)Installation:-------------``pip install -U pythononwheels``Everything you need on board. Batteries included.=================================================`PythonOnWheels &lt;https://www.pythononwheels.org/&gt;`__ is a generative,Rapid Application Development, non intrusive web framework for python.You need no extra tools to start. Everything from DB to Webserver andtemplate engine is included. But you are not forced to use them and cango raw or easily include the modules and tools of your choice toolswhenever you want.Based on a very Strong foundation:==================================-  python 3.x-  `tornado &lt;http://www.tornadoweb.org/en/stable/&gt;`__ webserver-  Supported SQL Databases-  SQL: `sqlalchemy &lt;https://www.sqlalchemy.org/&gt;`__ ORM (SQLite, MySQL,   PostgreSQL, MS-SQL, Oracle, and more ..)-  Database Migrations onboard (based on alembic) generated behind the   scenes-  NoSQL:   `tinyDB &lt;https://tinydb.readthedocs.io/en/latest/index.html&gt;`__,   `MongoDB &lt;https://www.mongodb.com/&gt;`__,   `elasticsearch &lt;https://www.elastic.co/products/elasticsearch&gt;`__-  `cerberus &lt;http://docs.python-cerberus.org/en/stable/&gt;`__ schemas and   validation on board-  tornado templates-  css Frameworks: `bootstrap4 &lt;https://getbootstrap.com/&gt;`__ and   `semanticUI &lt;https://semantic-ui.com/&gt;`__Probably the most simple SQL relations out there!=================================================Based on sqlalchemy. With PythonOnWheels you simply add a classdecorator like::    @relation.has_many(&quot;comments&quot;)    class Post(Base):        # All your Post model code below here ..        .....to your SQL Post-model and every Post can have comments. It will beautomatically mapped to the DB (SQLite, Postgres, MySQL, MariaDb,Oracle, MSSQL ...) and to all related comment Models. DB Migrations arecreated automatically in the background.supported relation types are:------------------------------  has\_many(&quot;comments&quot;)(decorated class has many comments.)-  many\_to\_many(&quot;comments&quot;)(decorated class has many to many with   comments)-  belongs\_to(&quot;comments&quot;)(decorated class belongs to comments.)-  one\_to\_one(&quot;comments&quot;)(decorated class has one to one with   comments)-  tree() (decorated class has adjacence list (is a tree)All pow models (SQL or NoSQL) use a `cerberus &lt;http://docs.python-cerberus.org/en/stable/&gt;`__ schema as definition.===================================================================================================================This means you have validation on board for every model and you can easily switch from SQL to NoSQL----------------------------------------------------------------------------------------------------  the @relation.setup\_schema() decorator will map this schema to a   vaild sqlalchemy (or specific NoSQL) column definition set.-  SQL only: model will also automatically get all the right   Foreign\_Keys and python attributes to create a has\_many   relationship to the comments model. This is all done for you with the   @relation.has\_many(&quot;comments&quot;) @relation.has\_many(&quot;comments&quot;)   @relation.setup\_schema()::    class Post(Base):    #    # Schema definition with the new (cerberus) schema style    # which offer you immediate validation    #    schema = {        # string sqltypes can be TEXT or UNICODE or nothing        'author': {'type': 'string', 'maxlength' : 35 },        'title' : {'type': 'string', &quot;required&quot; : True },        'text'  : {'type': 'string' },        'votes' : {'type': 'integer' },        'status': {'type': 'string', &quot;allowed&quot; : [&quot;backlog&quot;, &quot;wip&quot;, &quot;done&quot;] },    }    # init    def __init__(self, **kwargs):        self.init_on_load(**kwargs)    # your methods down hereProbably the most simple RESTrouting out there! One decorator. Done!====================================================================With PythonOnWheels you simply add a class decorator like---------------------------------------------------------::    @app.add_rest_routes(&quot;basename&quot;) to your handler and you get all the typical REST routes mapped to theaccording CRUD methods of your handler class.By the way: this is what generate\_handler generates for you when you use the --rest parameter:-----------------------------------------------------------------------------------------------::    @app.add_rest_routes(&quot;rest_test&quot;)    class RestTest(BaseHandler):        #         # every pow handler automatically gets these RESTful routes        # when you add the : app.add_rest_routes() decorator.        #        # 1  GET    /resttest                           #=&gt; list        # 2  GET    /resttest/&lt;uuid:identifier&gt;         #=&gt; show        # 3  GET    /resttest/new                       #=&gt; new        # 4  GET    /resttest/&lt;uuid:identifier&gt;/edit    #=&gt; edit         # 5  GET    /resttest/page/&lt;uuid:identifier&gt;    #=&gt; page        # 6  GET    /resttest/search                    #=&gt; search        # 7  PUT    /resttest/&lt;uuid:identifier&gt;         #=&gt; update        # 8  PUT    /resttest                           #=&gt; update (You have to send the id as json payload)        # 9  POST   /resttest                           #=&gt; create        # 10 DELETE /resttest/&lt;uuid:identifier&gt;         #=&gt; destroy        # ...Routing: RegEx and Flask like routes included .===============================================You can set routes by simply adding a class decorator to the handlerclass or decorate methods directly. ~\ :sub:`~` @route(&quot;/&quot;,dispatch=[&quot;get&quot;]) ~\ :sub:`~`PythonOnWheels will then call the index method of your handler if theroute and the HTTP method matches.Example for Flask like routing:-------------------------------::    @app.make_method_routes()    class HelloHandler(BaseHandler):        @route(r'/hello/&lt;int:identifier&gt;', dispatch=[&quot;get&quot;])        def hello(self, identifier=None):            self.write(&quot;Hello world! &quot; + str(identifier))For Regex routes:-----------------::    @app.add_route(&quot;/test/([0-9]+)*&quot;, dispatch={&quot;get&quot; : &quot;test&quot;})to add a direct route: matching the regular expression : /test/([0-9+])and then calling the given method of your handler class. The regex group([0-9+]) will be handed as the first parameter to test(self, index)Model Validation on board with cerberus schemas.================================================All Model Schemas are Cerberus schemas automatically. So thats easy.~\ :sub:`~` model.validate() =&gt; executes cerberus validator ~\ :sub:`~`And finally: a super easy workflow. Quick to start, all the basics onboard and easy to expand: generative approach (but not noisy)-  generate\_app script-  generate\_models script (You probably want to store some data)-  Optionally generate\_migrations script (only needed for SQL DBs)-  generate\_handlers (aka controllers to define your logic and API)-  start the server (python server.py) doneThe vision:===========    If you want start to develop your web-application and focus on the    App, instead of the frameworks, you are in the right place.    PythonOnWheels feels right if you do not recognize that you use it.Enjoy!======See `gettingstarted &lt;http://www.pythononwheels.org/article/7de74cc6-8af2-45ac-b619-eea61e4da44f&gt;`__or go to the`documentation &lt;http://www.pythononwheels.org/article/2160fdfd-fc9f-4380-aeb3-bc13d2c201e0&gt;`__For more check: `The PythonOnWheels Homepage &lt;http://www.pythononwheels.org&gt;`__-------------------------------------------------------------------------------</longdescription>
</pkgmetadata>