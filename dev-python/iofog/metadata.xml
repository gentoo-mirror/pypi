<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ioFog Python SDKThis SDK provides the following modules:* microservices: Clients for Microservices to talk to ioFog (e.g. ioMessage and Web Socket clients)* rest.controller: Client for Controller REST API## InstallationInstall python package:```bashsudo python3 -m pip install iofog```## MicroservicesThis module lets you easily build an ioElement. It gives you all the functionality to interact with ioFog via Local API. It contains all necessary methods for IoMessage transformation as well. - send new message to ioFog (post_message) - fetch next unread messages from ioFog (get_next_messages) - fetch messages for time period and list of accessible publishers (get_next_messages_from_publishers_within_timeframe) - get config options (get_config) - get Agent's Edge Resources (get_edge_resources) - create IoMessage, encode(decode) to(from) raw bytes, marshall(unmarshall) into(from) JSON object (IoMessage class methods) - connect to ioFog Control Channel via WebSocket (establish_control_ws_connection) - connect to ioFog Message Channel via WebSocket (establish_message_ws_connection) and publish new message via this channel (post_message_via_socket)### UsageImport iofog client and additional classes to your project:```pythonfrom iofog.microservices.client import Clientfrom iofog.microservices.exception import IoFogExceptionfrom iofog.microservices.iomessage import IoMessagefrom iofog.microservices.listener import *```Create IoFog client with default settings:```pythontry:    client = Client()except IoFogException as e: # client creation failed, e contains description```Or specify host, port, and container id explicitly:```pythontry:    client = Client(id='container_id', host='iofog_host', port=6666)except IoFogException as e: # client creation failed, e contains description```##### REST callsGet list of next unread IoMessages:```pythontry:    messages = client.get_next_messages()except IoFogException as e: # some error occurred, e contains description```Post new IoMessage to ioFog via REST call:```pythonmsg=IoMessage()msg.infotype=&quot;infotype&quot;msg.infoformat=&quot;infoformat&quot;msg.contentdata=&quot;sdkjhwrtiy8wrtgSDFOiuhsrgowh4touwsdhsDFDSKJhsdkljasjklweklfjwhefiauhw98p328946982weiusfhsdkufhaskldjfslkjdhfalsjdf=serg4towhr&quot;msg.contextdata=&quot;&quot;msg.tag=&quot;tag&quot;msg.groupid=&quot;groupid&quot;msg.authid=&quot;authid&quot;msg.authgroup=&quot;authgroup&quot;msg.hash=&quot;hash&quot;msg.previoushash=&quot;previoushash&quot;msg.nonce=&quot;nonce&quot;try:    receipt = client.post_message(msg)except IoFogException, e: # some error occurred, e contains description```Get an array of IoMessages from specified publishers within given timeframe:```pythonquery = {    'timeframestart': 1234567890123,    'timeframeend': 1234567890123,    'publishers': ['sefhuiw4984twefsdoiuhsdf', 'd895y459rwdsifuhSDFKukuewf', 'SESD984wtsdidsiusidsufgsdfkh']}try:    query_response = client.get_next_messages_from_publishers_within_timeframe(query)except IoFogException, e: # some error occurred, e contains description```Get container's config:```pythontry:    config = client.get_config()except IoFogException, ex: # some error occurred, ex contains description```Get Agent's Edge Resources:```pythontry:    edge_resources = client.get_edge_resources()except IoFogException, ex: # some error occurred, ex contains description```##### WebSocket callsTo use websocket connections you should implement listeners as follows:```pythonclass MyControlListener(IoFogControlWsListener):    def on_control_signal(self):        # do smth on control signal    def on_edge_resources_signal(self):        # Agent's Edge Resource list has been updatedclass MyMessageListener(IoFogMessageWsListener):    def on_receipt(self, message_id, timestamp):        # do smth with message receipt    def on_message(self, io_msg):        # do smth with new message```After that you can establish websocket connections:```pythonclient.establish_message_ws_connection(MyMessageListener())client.establish_control_ws_connection(MyControlListener())```Each of those connections will be managed in a separate thread.After successful connection to message websocket you can send to it:```pythonclient.post_message_via_socket(io_msg_instance)```##### Message utilsConstruct IoMessage from JSON(both json string and python dictionary are acceptable):```pythonmsg = IoMessage.from_json(json_msg) ```IoMessage to JSON:```pythonjson_str = io_msg_instance.to_json()```Construct IoMessage from raw bytes:```pythonmsg = IoMessage.from_bytearray([0, 4, ...])```Pack IoMessage into bytearray:```pythonmsg_bytes = io_msg_instance.to_bytearray()```#### Logging```pythonfrom iofog.microservices.log import Loggerlog = Logger(&quot;first&quot;)log.debug(&quot;hello&quot;)log.info(&quot;world&quot;)log.warn(&quot;good&quot;)log.error(&quot;bye&quot;)```## Controller REST API ClientThis module provides a client for talking to [ioFog Controller's REST API](https://iofog.org/docs/2/reference-controller/rest-api.html).### Usage```python# Import Client classfrom iofog.rest.controller.client import Client# Instantiate Clientclient = Client(    host=&quot;123.123.123.123&quot;,    port=51121,    email=&quot;hello@world.io&quot;    password=&quot;2uhi40ghas9&quot;# Get Controller status and API versionstatus = client.get_status()print(status['versions']['controller'])# Create an Agentname = &quot;agent1&quot;host = &quot;123.123.123.124&quot;resp = client.create_agent(name, host)# Upgrade an Agentresp = client.upgrade_agent(name)# Create an Applicationyaml_file = &quot;/tmp/app.yaml&quot;resp = client.create_app_from_yaml(yaml_file)# Get an Applicationapp_name = &quot;app1&quot;resp = client.get_app(app_name)# Delete an Applicationresp = client.delete_app(app_name)```</longdescription>
</pkgmetadata>