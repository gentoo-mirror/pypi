<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>distroinfo==========``distroinfo`` is a python module for parsing, validating and queryingdistribution/packaging metadata stored in human readable and reviewabletext/YAML files.This is a proper generic (re)implementation of`rdoinfo &lt;https://github.com/redhat-openstack/rdoinfo&gt;`__ parser whichproved well suited for the task of interfacing with distributionmetadata in a human friendly way. If you consider code reviews humanfriendly, that is.``distroinfo`` is a part of `Software Factoryproject &lt;https://softwarefactory-project.io/docs/&gt;`__STATUS------``distroinfo`` is available from Fedora/EPEL repos and is **BEINGINTEGRATED**.`rdopkg &lt;https://github.com/softwarefactory-project/rdopkg&gt;`__ and`DLRN &lt;https://github.com/softwarefactory-project/DLRN&gt;`__ are firstadopters.``rdoinfo`` compatibility is ensured through offline and online tests.CI is enabled.See `distroinforeviews &lt;https://softwarefactory-project.io/dashboard/project_distroinfo&gt;`__.Use github`Issues &lt;https://github.com/softwarefactory-project/distroinfo/issues&gt;`__to make requests and report bugs.Installation------------from source~~~~~~~~~~~If you want to hack ``distroinfo`` or just have the latest code withoutwaiting for next release, you can use the git repo directly:::    git clone https://github.com/softwarefactory-project/distroinfo    cd distroinfo    python setup.py develop --userYou may set the preference over ``distroinfo`` RPM by correctlypositioning ``~/.local/bin/distroinfo`` in your ``$PATH``.Or you can use virtualenv to avoid conflicts with RPM:::    git clone https://github.com/softwarefactory-project/distroinfo    cd distroinfo    virtualenv --system-site-packages ~/distroinfo-venv    source ~/distroinfo-venv/bin/activate    python setup.py develop    ln `which distroinfo` ~/bin/distroinfo-dev    distroinfo-dev --versionRequired python modules are listed in`requirements.txt &lt;requirements.txt&gt;`__.from Fedora/EPEL repos (default)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~``distroinfo`` is available on **Fedora 27** and newer:::    dnf install python2-distroinfoincluding Python 3 version:::    dnf install python3-distroinfoOn CentOS/RHEL 7, ``distroinfo`` is available from`EPEL &lt;https://fedoraproject.org/wiki/EPEL&gt;`__.On **CentOS 7**:::    yum install epel-release    yum install python2-distroinfoOn **RHEL 7**:::    yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm    yum install python2-distroinfofrom PyPI~~~~~~~~~For your convenience, ``distroinfo`` is available from the Cheese Shop:::    pip install distroinfoUsage-----You can **fetch info files from an URL** by specifying ``remote_info``base URL:::    from distroinfo.info import DistroInfo    RDOINFO_RAW_URL = \        'https://raw.githubusercontent.com/redhat-openstack/rdoinfo/master/'    di = DistroInfo('rdo-full.yml',                    remote_info=RDOINFO_RAW_URL)    info = di.get_info()Or you can **fetch info files from a remote git repository** using``remote_git_info``:::    from distroinfo.info import DistroInfo    RDOINFO_GIT_URL = \        'https://github.com/redhat-openstack/rdoinfo'    di = DistroInfo('rdo-full.yml',                    remote_git_info=RDOINFO_GIT_URL)    info = di.get_info()Or you can **fetch info files from a local directory** using``local_info``:::    from distroinfo.info import DistroInfo    INFO_PATH = '/path/to/info'    di = DistroInfo('rdo-full.yml',                    local_info=INFO_PATH)    info = di.get_info()For remote fetchers info files/repos are cached in``~/.distroinfo/cache``.You can navigate info structure yourself or use ``query`` module:::    from distroinfo import query    # get a package info by strict package name    nova = query.get_package(info, 'openstack-nova')    # find a package by human reference (smart search)    keystone = query.find_package(info, 'keystone')Alternatively, you can get info with ``packages`` and ``releases`` asdictionaries indexed by project/release name for easier access using``info_dicts=True``:::    info = di.get_info(info_dicts=True)    nova = info['packages']['nova']It is also possible to filter packages matching a given criteria.The following query will show all packages matching criteria conf: client AND tags: antelope.::    # rexen is a dictionary of applied filters.    # pkg is the currently processed package.    info = di.get_info()    pkgs = info['packages']    rexen = {&quot;conf&quot;: &quot;client&quot;, &quot;tags&quot;: &quot;antelope&quot;}    finding = query.filter_pkgs(pkgs, rexen)It is also possible to apply negative filtering with &quot;~&quot; character, whichcan be combined with other filters, like conf: client.::    info = di.get_info()    pkgs = info['packages']    rexen = {&quot;tags&quot;: &quot;~newton&quot;, &quot;conf&quot;: &quot;client&quot;}    finding = query.filter_pkgs(pkgs, rexen)When using this feature, the output will contain packages WITHOUT newton tag butcontaining conf:client.Until proper documentation is in place, please refer to:-  `rdoinfo &lt;https://github.com/redhat-openstack/rdoinfo&gt;`__ for prime   example of ``distroinfo`` format usage-  `rdoinfo integration   tests &lt;https://github.com/softwarefactory-project/distroinfo/blob/master/tests/integration/test_rdoinfo_online.py&gt;`__   for code examples-  `dlrn.drivers.rdoinfo &lt;https://github.com/softwarefactory-project/DLRN/blob/master/dlrn/drivers/rdoinfo.py&gt;`__   for a real world code that uses tags and   ``remote_git_info``/``local_info``-  `distroinfo.info &lt;https://github.com/softwarefactory-project/distroinfo/blob/master/distroinfo/info.py&gt;`__   to RTFSCommand Line Interface----------------------A simple CLI is provided in ``scripts/di.py`` which can be used to testbasic ``distroinfo`` functionality, profile, dump parsed data, etc.An example of dumping parsed rdoinfo into both YAML and JSON files:::    $&gt; ./scripts/di.py dump -y rdoinfo.yaml -j rdoinfo.json -f git \           'https://github.com/redhat-openstack/rdoinfo' rdo-full.yml    Dumping YAML to: rdoinfo.yaml    Dumping JSON to: rdoinfo.jsonAdditional ``docopt`` module is required to run the CLI.Bugs----Please use the `githubIssues &lt;https://github.com/softwarefactory-project/distroinfo/issues&gt;`__to report bugs.</longdescription>
</pkgmetadata>