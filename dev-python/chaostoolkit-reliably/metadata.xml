<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Chaos Toolkit extension for Reliably[![Version](https://img.shields.io/pypi/v/chaostoolkit-reliably.svg)](https://img.shields.io/pypi/v/chaostoolkit-reliably.svg)[![Python versions](https://img.shields.io/pypi/pyversions/chaostoolkit-reliably.svg)](https://www.python.org/)[![License](https://img.shields.io/pypi/l/chaostoolkit-reliably.svg)](https://img.shields.io/pypi/l/chaostoolkit-reliably.svg)[![Build](https://github.com/chaostoolkit-incubator/chaostoolkit-reliably/actions/workflows/build.yaml/badge.svg)](https://github.com/chaostoolkit-incubator/chaostoolkit-reliably/actions/workflows/build.yaml)[Chaos Toolkit][chaostoolkit] extension for [Reliably][reliably].[reliably]: https://reliably.com[chaostoolkit]: http://chaostoolkit.org/## InstallTo be used from your experiment, this package must be installed in the Pythonenvironment where [chaostoolkit][] already lives.[chaostoolkit]: https://github.com/chaostoolkit/chaostoolkit```$ pip install chaostoolkit-reliably```## AuthenticationTo use this package, you must create have registered with [Reliably services](https://app.reliably.com/).Then you need to set some environment variables as secrets.* `RELIABLY_TOKEN`: the token to authenticate against Reliably's API* `RELIABLY_HOST:`: the hostname to connect to, default to `app.reliably.com````json{    &quot;secrets&quot;: {        &quot;reliably&quot;: {            &quot;token&quot;: {                &quot;type&quot;: &quot;env&quot;,                &quot;key&quot;: &quot;RELIABLY_TOKEN&quot;            },            &quot;host&quot;: {                &quot;type&quot;: &quot;env&quot;,                &quot;key&quot;: &quot;RELIABLY_HOST&quot;,                &quot;default&quot;: &quot;app.reliably.com&quot;            }        }    }}```## Usage### As Steady Steate Hypothesis or MethodThis extensions offers a[variety of probes and tolerances](https://chaostoolkit.org/drivers/reliably/)ready to be used in your steady-state blocks.For instance:```json{  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;title&quot;: &quot;SLO error-count-3h / Error budget 10%&quot;,  &quot;description&quot;: &quot;Monitor the health of our demo service from our users perspective and ensure they have a high-quality experience&quot;,  &quot;runtime&quot;: {    &quot;hypothesis&quot;: {      &quot;strategy&quot;: &quot;after-method-only&quot;    }  },  &quot;steady-state-hypothesis&quot;: {    &quot;title&quot;: &quot;Compute SLO and validate its Error Budget with our target&quot;,    &quot;probes&quot;: [      {        &quot;type&quot;: &quot;probe&quot;,        &quot;name&quot;: &quot;get-slo&quot;,        &quot;tolerance&quot;: {          &quot;type&quot;: &quot;probe&quot;,          &quot;name&quot;: &quot;there-should-be-error-budget-left&quot;,          &quot;provider&quot;: {            &quot;type&quot;: &quot;python&quot;,            &quot;module&quot;: &quot;chaosreliably.activities.slo.tolerances&quot;,            &quot;func&quot;: &quot;has_error_budget_left&quot;,            &quot;arguments&quot;: {              &quot;name&quot;: &quot;cloudrun-service-availability&quot;            }          }        },        &quot;provider&quot;: {          &quot;type&quot;: &quot;python&quot;,          &quot;module&quot;: &quot;chaosreliably.activities.slo.probes&quot;,          &quot;func&quot;: &quot;compute_slo&quot;,          &quot;arguments&quot;: {            &quot;slo&quot;: {              &quot;apiVersion&quot;: &quot;sre.google.com/v2&quot;,              &quot;kind&quot;: &quot;ServiceLevelObjective&quot;,              &quot;metadata&quot;: {                &quot;name&quot;: &quot;cloudrun-service-availability&quot;,                &quot;labels&quot;: {                  &quot;service_name&quot;: &quot;cloudrun&quot;,                  &quot;feature_name&quot;: &quot;service&quot;,                  &quot;slo_name&quot;: &quot;availability&quot;                }              },              &quot;spec&quot;: {                &quot;description&quot;: &quot;Availability of Cloud Run service&quot;,                &quot;backend&quot;: &quot;cloud_monitoring_mql&quot;,                &quot;method&quot;: &quot;good_bad_ratio&quot;,                &quot;exporters&quot;: [                ],                &quot;service_level_indicator&quot;: {                  &quot;filter_good&quot;: &quot;fetch cloud_run_revision | metric 'run.googleapis.com/request_count' | filter resource.project_id == '${CLOUDRUN_PROJECT_ID}' | filter resource.service_name == '${CLOUDRUN_SERVICE_NAME}' | filter metric.response_code_class == '2xx'&quot;,                  &quot;filter_valid&quot;: &quot;fetch cloud_run_revision | metric 'run.googleapis.com/request_count' | filter resource.project_id == '${CLOUDRUN_PROJECT_ID}' | filter resource.service_name == '${CLOUDRUN_SERVICE_NAME}'&quot;                },                &quot;goal&quot;: 0.9              }            },            &quot;config&quot;: {              &quot;backends&quot;: {                &quot;cloud_monitoring_mql&quot;: {                  &quot;project_id&quot;: &quot;${STACKDRIVER_HOST_PROJECT_ID}&quot;                }              },              &quot;error_budget_policies&quot;: {                &quot;default&quot;: {                  &quot;steps&quot;: [                    {                      &quot;name&quot;: &quot;3 hours&quot;,                      &quot;burn_rate_threshold&quot;: 9,                      &quot;alert&quot;: false,                      &quot;window&quot;: 10800,                      &quot;message_alert&quot;: &quot;Page the SRE team to defend the SLO&quot;,                      &quot;message_ok&quot;: &quot;Last 3 hours on track&quot;                    }                  ]                }              }            }          }        }      }    ]  },  &quot;method&quot;: [    {      &quot;name&quot;: &quot;inject-traffic-into-endpoint&quot;,      &quot;type&quot;: &quot;action&quot;,      &quot;background&quot;: true,      &quot;provider&quot;: {        &quot;func&quot;: &quot;inject_gradual_traffic_into_endpoint&quot;,        &quot;type&quot;: &quot;python&quot;,        &quot;module&quot;: &quot;chaosreliably.activities.load.actions&quot;,        &quot;arguments&quot;: {          &quot;endpoint&quot;: &quot;${ENDPOINT}&quot;,          &quot;step_duration&quot;: 30,          &quot;test_duration&quot;: 300,          &quot;step_additional_vu&quot;: 3,          &quot;vu_per_second_rate&quot;: 1,          &quot;results_json_filepath&quot;: &quot;./load-test-results.json&quot;        }      }    }  ]}```This above example will get the last 5 Objective Results for our `Must be good` SLO and determine if they were all okay or whether we've spent our [error budget](https://sre.google/workbook/error-budget-policy/#:~:text=Error%20budgets%20are%20the%20tool,with%20the%20pace%20of%20innovation.&amp;text=The%20error%20budget%20forms%20a,has%20a%200.1%25%20error%20budget.)they are allowed.### As controlsYou can use controls provided by `chaostoolkit-reliably` to track your experimentswithin Reliably. The block is inserted automatically by Reliably when youimport the experiment into Reliably.## ContributeFrom a code perspective, if you wish to contribute, you will need to run aPython 3.6+ environment. Please, fork this project, write unit tests to coverthe proposed changes, implement the changes, ensure they meet the formattingstandards set out by `black`, `ruff`, `isort`, and `mypy`, add an entry into`CHANGELOG.md`, and then raise a PR to the repository for reviewPlease refer to the [formatting](#formatting-and-linting) section for moreinformation on the formatting standards.The Chaos Toolkit projects require all contributors must sign a[Developer Certificate of Origin][dco] on each commit they would like to mergeinto the master branch of the repository. Please, make sure you can abide bythe rules of the DCO before submitting a PR.[dco]: https://github.com/probot/dco#how-it-works### DevelopIf you wish to develop on this project, make sure to install the developmentdependencies. First you will need to install globally[pdm](https://pdm.fming.dev/latest/) and create a virtual environment:```$ pdm create venv$ pdm use$ $(pdm venv activate)```Then install the dependencies:```console$ pdm sync -d```### TestTo run the tests for the project execute the following:```console$ pdm run test```### Formatting and LintingWe use a combination of [`black`][black], [`ruff`][flake8], [`isort`][isort],[`mypy`][mypy] and [`bandit`][] to both lint and format this repositories code.[black]: https://github.com/psf/black[ruff]: https://github.com/charliermarsh/ruff[isort]: https://github.com/PyCQA/isort[mypy]: https://github.com/python/mypy[bandit]: https://bandit.readthedocs.io/en/latest/Before raising a Pull Request, we recommend you run formatting against yourcode with:```console$ pmd run format```This will automatically format any code that doesn't adhere to the formattingstandards.As some things are not picked up by the formatting, we also recommend you run:```console$ pdm run lint```To ensure that any unused import statements/strings that are too long, etc.are also picked up. It will also provide you with any errors `mypy` picks up.</longdescription>
</pkgmetadata>