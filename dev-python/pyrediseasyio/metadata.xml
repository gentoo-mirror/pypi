<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyRedisEasyIOA project to simplify reading/writing single objects from/to redis## DescriptionRedis is a great way to share data between applications - or processes in an application. However, in its raw form, the application has to deal with data type conversion to/fromstring, check for existence, and other pesky stuff. It would be nice if that were abstracted in such a way to where it didn't appear in code that redis was being usedat all. This project seeks to allow the exchange of single data points in a readable way, eg. my_data.my_value = 30 (automatically writes '30' to redis) ## Installationpip install pyrediseasyio## UsageThe basis of functionality is the IOGroup class. It acts as a container for individual valuesand performs the behind-the-scenes reads and writes. ~~~~from io_group import IOGroupfrom single_io import BooleanIO, IntIO, FloatIOclass TestGroup1(IOGroup):    Bool1 = BooleanIO(&quot;Boolean 1&quot;, &quot;Bool1&quot;, False)    Bool2 = BooleanIO(&quot;Boolean 2&quot;, &quot;Bool2&quot;, True)    Int1 = IntIO(&quot;Integer 1&quot;, &quot;Int1&quot;)    Int2 = IntIO(&quot;Integer 2&quot;, &quot;Int2&quot;, default=34)    MyFloat1 = FloatIO(&quot;Float 1&quot;, &quot;Float1&quot;, default=1.2)class TestGroup2(IOGroup):    Bool1 = BooleanIO(&quot;Boolean 1&quot;, &quot;Bool1&quot;, False)    Bool2 = BooleanIO(&quot;Boolean 2&quot;, &quot;Bool2&quot;, True)    Int1 = IntIO(&quot;Integer 1&quot;, &quot;Int1&quot;)    Int2 = IntIO(&quot;Integer 2&quot;, &quot;Int2&quot;, default=34)    Float1 = FloatIO(&quot;Float 1&quot;, &quot;Float1&quot;, default=1.2)group1a = TestGroup1()group1b = TestGroup1()group2 = TestGroup2()group1a.MyFloat1 = 1234.5         # Performs redis 'set', sending 1234.5 with key 'Float1'print(group1b.Float1.value)       # Performs redis 'get', calling 'value' converts to primitive typeprint(group2.Float1.value)~~~~### HTML: For convenience, methods are provided to automatically generate html. The [dominate](https://github.com/Knio/dominate/blob/master/tests/test_html.py) library is used behind the scenes,giving you first class access to manipulate the html response; Below is an example of usage, consult the test cases for further examples. ~~~~class TestGroup(IOGroup):    Bool1 = BooleanIO(&quot;Boolean 1&quot;, &quot;Bool1&quot;, units=&quot;On/Off&quot;)    Float1 = FloatIO(&quot;Float 1&quot;, &quot;Float1&quot;, default=1.23, units=&quot;furlongs&quot;)h = HMTLIOGroup(test_group, &quot;my_id&quot;, &quot;my_namespace&quot;).html().render()print(h)  #-&gt; Gives;'''&lt;div class=&quot;my_namespace_io_container&quot; id=&quot;my_id_io_container&quot;&gt;  &lt;div class=&quot;my_namespace_io&quot; id=&quot;my_id_Bool1_io&quot;&gt;    &lt;div class=&quot;my_namespace_io_name&quot;&gt;Boolean 1&lt;/div&gt;    &lt;div class=&quot;my_namespace_io_value&quot; id=&quot;my_id_Bool1_io_value&quot; onchange=&quot;OnIOValueChange(event)&quot;&gt;False&lt;/div&gt;    &lt;div class=&quot;my_namespace_io_units&quot;&gt;On/Off&lt;/div&gt;  &lt;/div&gt;  &lt;div class=&quot;my_namespace_io&quot; id=&quot;my_id_Float1_io&quot;&gt;    &lt;div class=&quot;my_namespace_io_name&quot;&gt;Float 1&lt;/div&gt;    &lt;div class=&quot;my_namespace_io_value&quot; id=&quot;my_id_Float1_io_value&quot; onchange=&quot;OnIOValueChange(event)&quot;&gt;1.23&lt;/div&gt;    &lt;div class=&quot;my_namespace_io_units&quot;&gt;furlongs&lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;'''~~~~</longdescription>
</pkgmetadata>