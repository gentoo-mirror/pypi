<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>XWorkflows==========.. image:: https://github.com/rbarrois/xworkflows/workflows/Test/badge.svg    :target: https://github.com/rbarrois/xworkflows/actions?query=workflow%3ATest.. image:: https://github.com/rbarrois/xworkflows/workflows/Check/badge.svg    :target: https://github.com/rbarrois/xworkflows/actions?query=workflow%3ACheck.. image:: https://img.shields.io/pypi/v/xworkflows.svg    :target: https://xworkflows.readthedocs.io/en/latest/changelog.html    :alt: Latest Version.. image:: https://img.shields.io/pypi/pyversions/xworkflows.svg    :target: https://pypi.python.org/pypi/xworkflows/    :alt: Supported Python versions.. image:: https://img.shields.io/pypi/wheel/xworkflows.svg    :target: https://pypi.python.org/pypi/xworkflows/    :alt: Wheel status.. image:: https://img.shields.io/pypi/l/xworkflows.svg    :target: https://pypi.python.org/pypi/xworkflows/    :alt: LicenseXWorkflows is a library to add workflows, or state machines, to Python objects.It has been fully tested with Python 2.7 and all versions from 3.4 to 3.9Links-----* Package on PyPI: http://pypi.python.org/pypi/xworkflows* Repository and issues on GitHub: http://github.com/rbarrois/xworkflows* Doc on http://readthedocs.org/docs/xworkflows/Example-------It allows to easilly define a workflow, attach it to a class, and use its transitions:.. code-block:: python    import xworkflows    class MyWorkflow(xworkflows.Workflow):        # A list of state names        states = (            ('foo', &quot;Foo&quot;),            ('bar', &quot;Bar&quot;),            ('baz', &quot;Baz&quot;),        )        # A list of transition definitions; items are (name, source states, target).        transitions = (            ('foobar', 'foo', 'bar'),            ('gobaz', ('foo', 'bar'), 'baz'),            ('bazbar', 'baz', 'bar'),        )        initial_state = 'foo'    class MyObject(xworkflows.WorkflowEnabled):        state = MyWorkflow()        @xworkflows.transition()        def foobar(self):            return 42        # It is possible to use another method for a given transition.        @xworkflows.transition('gobaz')        def blah(self):            return 13.. code-block:: python    &gt;&gt;&gt; o = MyObject()    &gt;&gt;&gt; o.state    &lt;StateWrapper: &lt;State: 'foo'&gt;&gt;    &gt;&gt;&gt; o.state.is_foo    True    &gt;&gt;&gt; o.state.name    'foo'    &gt;&gt;&gt; o.state.title    'Foo'    &gt;&gt;&gt; o.foobar()    42    &gt;&gt;&gt; o.state    &lt;StateWrapper: &lt;State: 'bar'&gt;&gt;    &gt;&gt;&gt; o.state.name    'bar'    &gt;&gt;&gt; o.state.title    'Bar'    &gt;&gt;&gt; o.blah()    13    &gt;&gt;&gt; o.state    &lt;StateWrapper: &lt;State: 'baz'&gt;&gt;    &gt;&gt;&gt; o.state.name    'baz'    &gt;&gt;&gt; o.state.title    'Baz'Hooks-----Custom functions can be hooked to transactions, in order to run before/after a transition,when entering a state, when leaving a state, ...:.. code-block:: python    class MyObject(xworkflows.WorkflowEnabled):        state = MyWorkflow()        @xworkflows.before_transition('foobar')        def my_hook(self, *args, **kwargs):            # *args and **kwargs are those passed to MyObject.foobar(...)            pass        @xworkflows.on_enter_state('bar')        def my_other_hook(self, result, *args, **kwargs):            # Will be called just after any transition entering 'bar'            # result is the value returned by that transition            # *args, **kwargs are the arguments/keyword arguments passed to the            # transition.            pass</longdescription>
</pkgmetadata>