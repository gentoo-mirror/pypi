<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyvimondTiny Python client library for various Vimond APIs. Currently it provides clients for:* Vimond REST API* Vimond Image Service## UsageThe examples here can be found in the example files in the project root directory### Vimond REST API```pythonfrom pyvimond.vimond_client import VimondClientif __name__ == &quot;__main__&quot;:    # Create a client    api_url = &quot;https://vimond&quot;    user = &quot;user&quot;    secret = &quot;secret&quot;    vimond = VimondClient(api_url, user, secret)    # Get an asset    asset = vimond.get_asset(1334686)    print(asset[&quot;uri&quot;])    # Get the asset's category    category = vimond.get_category(asset[&quot;categoryId&quot;])    print(category[&quot;category&quot;][&quot;@uri&quot;])ยง    # Get the metadata for the asset    metadata = vimond.get_asset_metadata(1334686)    print(metadata)```### Vimond Image ServiceThe client uses HTTP Basic authentication when interfacing with Vimond Image Service```pythonfrom pyvimond.vimond_image_service_client import VimondImageServiceClientif __name__ == &quot;__main__&quot;:    # Create a client    api_url = &quot;https://image-service&quot;    username = &quot;user&quot;    password = &quot;secret&quot;    vimond_image_service = VimondImageServiceClient(api_url, username, password)    # Create an image pack    imagepack_id = vimond_image_service.create_image_pack()    print(f&quot;Created new imagepack with ID {imagepack_id}&quot;)    # Update the &quot;main&quot; location with the image from a publicly accessible URL.    # The function will return an ID consisting of the imagepack ID plus the current UNIX timestamp. This    # can eventually be used to reference this version of the image (assuming it gets cached somewhere) even after    # the image has been updated later on.    public_url = &quot;https://cdn.pixabay.com/photo/2020/12/03/12/35/sunset-5800386_960_720.jpg&quot;    timestamped_imagepack_id = vimond_image_service.send_image(imagepack_id, public_url, &quot;main&quot;)    # Get the URL to the timestamped version with location &quot;main&quot;    url = vimond_image_service.create_image_url(timestamped_imagepack_id, location=&quot;main&quot;)    print(url)    # Get the URL to the untimestamped version and no location    url_without_location = vimond_image_service.create_image_url(imagepack_id)    print(url_without_location)```## Testing```bashpython3 -m unittest discover```## ReleasingBefore beginning, make sure you have the necessary tools installed:```bashpip install --user --upgrade setuptools wheel twine```To build a new distribution and publish it on PyPi:1. Update the version number in `setup.py`2. Run `make release`. When asked for credentials, use `__token__` as username and the output    of `vault -l pypi-pyvimond-api-token` as password.More information: https://packaging.python.org/tutorials/packaging-projects/</longdescription>
</pkgmetadata>