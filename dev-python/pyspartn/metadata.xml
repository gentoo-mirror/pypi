<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyspartn[Current Status](#currentstatus) |[Installation](#installation) |[Reading](#reading) |[Parsing](#parsing) |[Generating](#generating) |[Serializing](#serializing) |[Examples](#examples) |[Graphical Client](#gui) |[Author &amp; License](#author)`pyspartn` is an original Python 3 parser for the SPARTN &amp;copy; GPS/GNSS protocol. SPARTN is an open-source GPS/GNSS [differential correction or DGPS](https://en.wikipedia.org/wiki/Differential_GPS) protocol published by u-blox.[SPARTN Protocol 2.01](https://www.spartnformat.org/download/) (available in the public domain).Â© 2021 u-blox AG. All rights reserved.The `pyspartn` homepage is located at [https://github.com/semuconsulting/pyspartn](https://github.com/semuconsulting/pyspartn).This is an independent project and we have no affiliation whatsoever with u-blox.**FYI** There are companion libraries which handle standard NMEA 0183 &amp;copy;, UBX &amp;copy; (u-blox) and RTCM3 &amp;copy; GNSS/GPS messages:- [pyubx2](http://github.com/semuconsulting/pyubx2) (**FYI** installing `pyubx2` via pip also installs `pynmeagps` and `pyrtcm`)- [pynmeagps](http://github.com/semuconsulting/pynmeagps)- [pyrtcm](http://github.com/semuconsulting/pyrtcm)## &lt;a name=&quot;currentstatus&quot;&gt;Current Status&lt;/a&gt;**WORK IN PROGRESS - CURRENTLY IN ALPHA.**&lt;!--![Status](https://img.shields.io/pypi/status/pyspartn)--&gt;![Release](https://img.shields.io/github/v/release/semuconsulting/pyspartn?include_prereleases)![Build](https://img.shields.io/github/actions/workflow/status/semuconsulting/pyspartn/main.yml?branch=main)![Codecov](https://img.shields.io/codecov/c/github/semuconsulting/pyspartn)![Release Date](https://img.shields.io/github/release-date-pre/semuconsulting/pyspartn)![Last Commit](https://img.shields.io/github/last-commit/semuconsulting/pyspartn)![Contributors](https://img.shields.io/github/contributors/semuconsulting/pyspartn.svg)![Open Issues](https://img.shields.io/github/issues-raw/semuconsulting/pyspartn)The `SPARTNReader` class is fully functional and is capable of parsing individual SPARTN transport-layer messages from a binary data stream containing *solely* SPARTN data, with their associated metadata (message type/subtype, payload length, encryption parameters, etc.).The `SPARTNMessage` class implements a provisional decrypt and decode for OCB, HPAC and GAD message types but it has not yet been fully tested (*appears to be working OK for HPAC and GAD messages but issues remain with OCB payloads*).There are some additional complexities for messages where `timeTagtype` = 0. See https://portal.u-blox.com/s/question/0D52p0000CimfsOCQQ/spartn-initialization-vector-iv-details for discussion.Sphinx API Documentation in HTML format is available at [https://www.semuconsulting.com/pyspartn](https://www.semuconsulting.com/pyspartn).Contributions welcome - please refer to [CONTRIBUTING.MD](https://github.com/semuconsulting/pyspartn/blob/master/CONTRIBUTING.md).[Bug reports](https://github.com/semuconsulting/pyspartn/blob/master/.github/ISSUE_TEMPLATE/bug_report.md) and [Feature requests](https://github.com/semuconsulting/pyspartn/blob/master/.github/ISSUE_TEMPLATE/feature_request.md) - please use the templates provided.---## &lt;a name=&quot;installation&quot;&gt;Installation&lt;/a&gt;`pyspartn` is compatible with Python &gt;=3.8 and has no third-party library dependencies.In the following, `python3` &amp; `pip` refer to the Python 3 executables. You may need to type `python` or `pip3`, depending on your particular environment.![Python version](https://img.shields.io/pypi/pyversions/pyspartn.svg?style=flat)[![PyPI version](https://img.shields.io/pypi/v/pyspartn)](https://pypi.org/project/pyspartn/)![PyPI downloads](https://img.shields.io/pypi/dm/pyspartn.svg?style=flat)The recommended way to install the latest version of `pyspartn` is with[pip](http://pypi.python.org/pypi/pip/):```shellpython3 -m pip install --upgrade pyspartn```If required, `pyspartn` can also be installed into a virtual environment, e.g.:```shellpython3 -m pip install --user --upgrade virtualenvpython3 -m virtualenv envsource env/bin/activate (or env\Scripts\activate on Windows)(env) python3 -m pip install --upgrade pyspartn...deactivate```---## &lt;a name=&quot;reading&quot;&gt;Reading (Streaming)&lt;/a&gt;```class pyspartn.spartnreader.SPARTNReader(stream, **kwargs)```You can create a `SPARTNReader` object by calling the constructor with an active stream object. The stream object can be any data stream which supports a `read(n) -&gt; bytes` method (e.g. File or Serial, with or without a buffer wrapper). `pyspartn` implements an internal `SocketStream` class to allow sockets to be read in the same way as other streams (see example below).Individual SPARTN messages can then be read using the `SPARTNReader.read()` function, which returns both the raw binary data (as bytes) and the parsed data (as a `SPARTNMessage`, via the `parse()` method). The function is thread-safe in so far as the incoming data stream object is thread-safe. `SPARTNReader` also implements an iterator.Example -  Serial input:```python&gt;&gt;&gt; from serial import Serial&gt;&gt;&gt; from pyspartn import SPARTNReader&gt;&gt;&gt; stream = Serial('/dev/tty.usbmodem14101', 9600, timeout=3)&gt;&gt;&gt;spr = SPARTNReader(stream)&gt;&gt;&gt; (raw_data, parsed_data) = spr.read()&gt;&gt;&gt; print(parsed_data)```Example - File input (using iterator).```python&gt;&gt;&gt; from pyspartn import SPARTNReader&gt;&gt;&gt; stream = open('spartndata.log', 'rb')&gt;&gt;&gt; spr = SPARTNReader(stream)&gt;&gt;&gt; for (raw_data, parsed_data) in spr: print(parsed_data)...```Example - Socket input (using iterator):```python&gt;&gt;&gt; import socket&gt;&gt;&gt; from pyspartn import SPARTNReader&gt;&gt;&gt; stream = socket.socket(socket.AF_INET, socket.SOCK_STREAM):&gt;&gt;&gt; stream.connect((&quot;localhost&quot;, 50007))&gt;&gt;&gt; spr = SPARTNReader(stream)&gt;&gt;&gt; for (raw_data, parsed_data) in spr: print(parsed_data)```---## &lt;a name=&quot;parsing&quot;&gt;Parsing&lt;/a&gt;You can parse individual SPARTN messages using the static `SPARTNReader.parse(data)` function, which takes a bytes array containing a binary SPARTN message and returns a `SPARTNMessage` object. The optional `decode` keyword argument signifies whether to decrypt and decode the full payload (default = `False`). If `decode` is set to `True` and the message is encrypted (`eaf=1`), you *must* provide the following keyword arguments:- `key` - the current SPARTN decryption key as provided by your SPARTN service (normally 32 hexadecimal characters). - `basedate` - a nominal datetime to be used where timeTagtype = 0 (16-bit gnssTimeTag format). Can be passed as a datetime or an integer representing a 32-bit gnssTimeTag. This is needed by the decryption routine to determine the cryptographic Initialisation Vector (IV). If you're parsing messages in real time, this can default to `datetime.now()`. If you're parsing data from an older log, you will need to use the datetime the log was originally captured on (*to the nearest half day*) or a 32-bit gnssTimeTag value from the same log. See examples below.**NB:** Once instantiated, a `SPARTNMMessage` object is immutable.Example - without payload decryption:```python&gt;&gt;&gt; from pyspartn import SPARTNReader&gt;&gt;&gt; msg = SPARTNReader.parse(b&quot;s\x00\x12\xe2\x00|\x10[\x12H\xf5\t\xa0\xb4+\x99\x02\x15\xe2\x05\x85\xb7\x83\xc5\xfd\x0f\xfe\xdf\x18\xbe\x7fv \xc3`\x82\x98\x10\x07\xdc\xeb\x82\x7f\xcf\xf8\x9e\xa3ta\xad&quot;, decode=False)&gt;&gt;&gt; print(msg)&lt;SPARTN(SPARTN-1X-OCB-GPS, msgType=0, msgSubtype=0, nData=37, eaf=1, crcType=2, frameCrc=2, timeTagtype=0, gnssTimeTag=3970, solutionId=5, solutionProcId=11)&gt;```Example - with payload decryption (requires key and, for messages where timeTagtype = 0, a nominal basedate for IV calculation):```python&gt;&gt;&gt; from pyspartn import SPARTNReader&gt;&gt;&gt; from datetime import datetime&gt;&gt;&gt; msg = SPARTNReader.parse(b'\x73\x04\x19\x62\x03\xfa\x20\x5b\x1f\xc8\x31\x0b\x03\xd3\xa4\xb1\xdb\x79\x21\xcb\x5c\x27\x12\xa7\xa8\xc2\x52\xfd\x4a\xfb\x1a\x96\x3b\x64\x2a\x4e\xcd\x86\xbb\x31\x7c\x61\xde\xf5\xdb\x3d\xa3\x2c\x65\xd5\x05\x9f\x1c\xd9\x96\x47\x3b\xca\x13\x5e\x5e\x54\x80', decode=True, key=&quot;6b30302427df05b4d98911ebff3a4d95&quot;, basedate=datetime(2023,6,27,22,3,0))                                                                               &gt;&gt;&gt; print(msg)&lt;SPARTN(SPARTN-1X-GAD, msgType=2, nData=50, eaf=1, crcType=2, frameCrc=2, msgSubtype=0, timeTagtype=0, gnssTimeTag=32580, solutionId=5, solutionProcId=11, encryptionId=1, encryptionSeq=63, authInd=1, embAuthLen=0, crc=6182016, SF005=37, SF068=1, SF069=0, SF030=7, SF031_01=32, SF032_01=1332, SF033_01=1987, SF034_01=6, SF035_01=2, SF036_01=5, SF037_01=22, SF031_02=33, SF032_02=1332, SF033_02=2033, SF034_02=6, SF035_02=3, SF036_02=5, SF037_02=16, SF031_03=34, SF032_03=1301, SF033_03=1921, SF034_03=2, SF035_03=6, SF036_03=18, SF037_03=10, SF031_04=35, SF032_04=1297, SF033_04=1987, SF034_04=3, SF035_04=3, SF036_04=12, SF037_04=22, SF031_05=36, SF032_05=1448, SF033_05=1768, SF034_05=6, SF035_05=2, SF036_05=5, SF037_05=30, SF031_06=37, SF032_06=1391, SF033_06=1745, SF034_06=4, SF035_06=7, SF036_06=7, SF037_06=10, SF031_07=38, SF032_07=1360, SF033_07=1906, SF034_07=3, SF035_07=2, SF036_07=8, SF037_07=22)&gt;```The `SPARTNMessage` object exposes different public attributes depending on its message type or 'identity'. SPARTN data fields are denoted `SFnnn` - use the `datadesc()` helper method to obtain a more user-friendly text description of the data field.```python&gt;&gt;&gt; from pyspartn import SPARTNReader, datadesc&gt;&gt;&gt; msg = SPARTNReader.parse(b'\x73\x03\x35\xec\x08\xc7\xd4\x20\x70\x5b\x1f\xc ... \x1e\xbe\x18\x43\x2d\x57\xe7\xa7', decode=True, key=&quot;00112233445566778899aabbccddeeff&quot;)&gt;&gt;&gt; print(msg)&lt;SPARTN(SPARTN-1X-HPAC-GPS, msgType=1, nData=619, eaf=1, crcType=2, frameCrc=12, msgSubtype=0, timeTagtype=1, gnssTimeTag=419070990, solutionId=5, solutionProcId=11, encryptionId=1, encryptionSeq=63, authInd=1, embAuthLen=0, crc=5760935, SF005=508, SF068=1, SF069=0, SF030=9, SF031_01=0, SF039_01=0, SF040T_01=1, SF040I_01=1, SF041_01=1, SF042_01=2, SF043_01=127, SF044_01=1, SF048_01=213, SF049a_01=257, SF049b_01=253, SF054_01=1, SatBitmaskLen_01=0, SF011_01=70263185, SF055_01_01=6, SF056_01_01=1, SF060_01_01=8944, ... SF061b_09_08=8287)&gt;&gt;&gt;&gt; msg.identity'SPARTN-1X-HPAC-GPS'&gt;&gt;&gt; msg.gnssTimeTag419070990&gt;&gt;&gt; msg.SF005508datadesc(&quot;SF005&quot;)'Solution issue of update (SIOU)'```The `payload` attribute always contains the raw payload as bytes.---## &lt;a name=&quot;generating&quot;&gt;Generating&lt;/a&gt;```class pyspartn.spartnmessage.SPARTNMessage(**kwargs)```You can create an `SPARTNMessage` object by calling the constructor with the following keyword arguments:1. transport as bytesExample:```python&gt;&gt;&gt; from pyspartn import SPARTNMessage&gt;&gt;&gt; msg = SPARTNMessage(transport=b&quot;s\x00\x12\xe2\x00|\x10[\x12H\xf5\t\xa0\xb4+\x99\x02\x15\xe2\x05\x85\xb7\x83\xc5\xfd\x0f\xfe\xdf\x18\xbe\x7fv \xc3`\x82\x98\x10\x07\xdc\xeb\x82\x7f\xcf\xf8\x9e\xa3ta\xad&quot;)&gt;&gt;&gt; print(msg)&lt;SPARTN(SPARTN-1X-OCB-GPS, msgType=0, msgSubtype=0, nData=37, eaf=1, crcType=2, frameCrc=2, timeTagtype=0, gnssTimeTag=3970, solutionId=5, solutionProcId=11)&gt;```---## &lt;a name=&quot;serializing&quot;&gt;Serializing&lt;/a&gt;The `SPARTNMessage` class implements a `serialize()` method to convert a `SPARTNMMessage` object to a bytes array suitable for writing to an output stream.e.g. to create and send a `1005` message type:```python&gt;&gt;&gt; from serial import Serial&gt;&gt;&gt; serialOut = Serial('COM7', 38400, timeout=5)&gt;&gt;&gt; from pyspartn import SPARTNMessage&gt;&gt;&gt; msg = SPARTNMessage(transport=b&quot;s\x00\x12\xe2\x00|\x10[\x12H\xf5\t\xa0\xb4+\x99\x02\x15\xe2\x05\x85\xb7\x83\xc5\xfd\x0f\xfe\xdf\x18\xbe\x7fv \xc3`\x82\x98\x10\x07\xdc\xeb\x82\x7f\xcf\xf8\x9e\xa3ta\xad&quot;)&gt;&gt;&gt; print(msg)&lt;SPARTN(SPARTN-1X-OCB-GPS, msgType=0, msgSubtype=0, nData=37, eaf=1, crcType=2, frameCrc=2, timeTagtype=0, gnssTimeTag=3970, solutionId=5, solutionProcId=11)&gt;&gt;&gt;&gt; output = msg.serialize()&gt;&gt;&gt; outputb&quot;s\x00\x12\xe2\x00|\x10[\x12H\xf5\t\xa0\xb4+\x99\x02\x15\xe2\x05\x85\xb7\x83\xc5\xfd\x0f\xfe\xdf\x18\xbe\x7fv \xc3`\x82\x98\x10\x07\xdc\xeb\x82\x7f\xcf\xf8\x9e\xa3ta\xad&quot;&gt;&gt;&gt; serialOut.write(output)```---## &lt;a name=&quot;examples&quot;&gt;Examples&lt;/a&gt;The following examples are available in the /examples folder:1. `sparnparser.py` - illustrates how to parse SPARTN messages from a binary input file.2. `rxmpmp_extract_spartn.py` - ilustrates how to parse SPARTN messages from the payload of a UBX RXM-PMP message output by an L-Band correction receiver (e.g. D9S).---## &lt;a name=&quot;gui&quot;&gt;Graphical Client&lt;/a&gt;A python/tkinter graphical GPS client which supports NMEA, UBX, RTCM3 and SPARTN protocols is available at: [https://github.com/semuconsulting/PyGPSClient](https://github.com/semuconsulting/PyGPSClient)---## &lt;a name=&quot;author&quot;&gt;Author &amp; License Information&lt;/a&gt;semuadmin@semuconsulting.com![License](https://img.shields.io/github/license/semuconsulting/pyspartn.svg)`pyspartn` is maintained entirely by unpaid volunteers. It receives no funding from advertising or corporate sponsorship. If you find the library useful, a small donation would be greatly appreciated![![Donations](https://www.paypalobjects.com/en_GB/i/btn/btn_donate_LG.gif)](https://www.paypal.com/donate/?business=UL24WUA4XHNRY&amp;no_recurring=0&amp;item_name=The+SEMU+GNSS+Python+libraries+are+maintained+entirely+by+unpaid+volunteers.+All+donations+are+greatly+appreciated.&amp;currency_code=GBP)</longdescription>
</pkgmetadata>