<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Debug Library for Robot Framework=================================.. contents::   :local:Introduction------------Robotframework-DebugLibrary is a debug library for `RobotFramework`_,which can be used as an interactive shell(REPL) also... _`RobotFramework`: http://robotframework.org/.. image:: https://api.codeclimate.com/v1/badges/5201026ff11b63530cf5/maintainability   :target: https://codeclimate.com/github/xyb/robotframework-debuglibrary/maintainability   :alt: Maintainability.. image:: https://api.codeclimate.com/v1/badges/5201026ff11b63530cf5/test_coverage   :target: https://codeclimate.com/github/xyb/robotframework-debuglibrary/test_coverage   :alt: Test Coverage.. image:: https://github.com/xyb/robotframework-debuglibrary/workflows/test/badge.svg?branch=master   :target: https://github.com/xyb/robotframework-debuglibrary   :alt: test.. image:: https://img.shields.io/pypi/v/robotframework-debuglibrary.svg   :target: https://pypi.org/project/robotframework-debuglibrary/   :alt: Latest version.. image:: https://img.shields.io/badge/robotframework-3.0%20%7C%203.1%20%7C%203.2-blue   :target: https://github.com/xyb/robotframework-debuglibrary   :alt: Support robotframework versions.. image:: https://img.shields.io/pypi/pyversions/robotframework-debuglibrary   :target: https://github.com/xyb/robotframework-debuglibrary   :alt: Support python versions.. image:: https://img.shields.io/pypi/dm/robotframework-debuglibrary   :target: https://pypi.org/project/robotframework-debuglibrary/   :alt: PyPI Downloads.. image:: https://img.shields.io/pypi/l/robotframework-debuglibrary.svg   :target: https://github.com/xyb/robotframework-debuglibrary/blob/master/LICENSE   :alt: LicenseInstallation------------To install using ``pip``::    pip install robotframework-debuglibraryNOTICE: 2.0 is not compatible with python 2*******************************************``DebugLibrary`` &gt;= 2.0.0 supports Python versions 3.x only.If you still using python 2.7, please use ``DebugLibrary`` &lt; 2.0.0 ::    pip install 'robotframework-debuglibrary&lt;2'Usage-----You can use this as a library, import ``DebugLibrary`` and call ``Debug``or ``Debug If`` keywords in your test files like this::    *** Settings ***    Library         DebugLibrary    ** test case **    SOME TEST        # some keywords...        Debug        # some else...        ${count} =  Get Element Count  name:div_name        Debug If  ${count} &lt; 1Or you can run it standalone as a ``RobotFramework`` shell::    $ rfdebug    [...snap...]    &gt;&gt;&gt;&gt;&gt; Enter interactive shell    &gt; help    Input Robotframework keywords, or commands listed below.    Use &quot;libs&quot; or &quot;l&quot; to see available libraries,    use &quot;keywords&quot; or &quot;k&quot; to see the list of library keywords,    use the TAB keyboard key to autocomplete keywords.    Documented commands (type help &lt;topic&gt;):    ========================================    EOF  continue  docs  help  keywords  libs  ll        n     pdb  selenium    c    d         exit  k     l         list  longlist  next  s    step    &gt; log  hello    &gt; get time    &lt; '2011-10-13 18:50:31'    &gt; # use TAB to auto complete commands    &gt; BuiltIn.Get Time    &lt; '2011-10-13 18:50:39'    &gt; import library  String    &gt; get substring  helloworld  5  8    &lt; 'wor'    &gt; # define variables as you wish    &gt; ${secs} =  Get Time  epoch    # ${secs} = 1474814470    &gt; Log to console  ${secs}    1474814470    &gt; @{list} =  Create List    hello    world    # @{list} = ['hello', 'world']    &gt; Log to console  ${list}    ['hello', 'world']    &gt; &amp;{dict} =  Create Dictionary    name=admin    email=admin@test.local    # &amp;{dict} = {'name': 'admin', 'email': 'admin@test.local'}    &gt; Log  ${dict.name}    &gt; # print value if you input variable name only    &gt; ${list}    [u'hello', u'world']    &gt; ${dict.name}    admin    &gt; # start a selenium server quickly    &gt; help selenium    Start a selenium webdriver and open url in browser you expect.            s(elenium)  [&lt;url&gt;]  [&lt;browser&gt;]            default url is google.com, default browser is firefox.    &gt; selenium  google.com  chrome    # import library  SeleniumLibrary    # open browser  http://google.com  chrome    &lt; 1    &gt; close all browsers    &gt; Ctrl-D    &gt;&gt;&gt;&gt;&gt; Exit shell.The interactive shell support auto-completion for robotframework keywords andcommands. Try input ``BuiltIn.`` then type ``&lt;TAB&gt;`` key to feeling it.The history will save at ``~/.rfdebug_history`` default or any filedefined in environment variable ``RFDEBUG_HISTORY``.In case you don't remember the name of keyword during using ``rfdebug``,there are commands ``libs`` or ``ls`` to list the imported libraries andbuilt-in libraries, and ``keywords &lt;lib name&gt;`` or ``k`` to listkeywords of a library.``rfdebug`` accept any ``pybot`` arguments, but by default, ``rfdebug``disabled all logs with ``-l None -x None -o None -L None -r None``.Step debugging**************``DebugLibrary`` support step debugging since version ``2.1.0``.You can use ``step``/``s``, ``next``/``n``, ``continue``/``c``,``list``/``l`` and ``longlist``/``ll`` to trace and view the codestep by step like in ``pdb``::    $ robot some.robot    [...snap...]    &gt;&gt;&gt;&gt;&gt; Enter interactive shell    &gt; l    Please run `step` or `next` command first.    &gt; s    .&gt; /Users/xyb/some.robot(7)    -&gt; log to console  hello    =&gt; BuiltIn.Log To Console  hello    &gt; l      2   Library  DebugLibrary      3      4   ** test case **      5   test      6       debug      7 -&gt;    log to console  hello      8       log to console  world    &gt; n    hello    .&gt; /Users/xyb/some.robot(8)    -&gt; log to console  world    =&gt; BuiltIn.Log To Console  world    &gt; c    &gt;&gt;&gt;&gt;&gt; Exit shell.    worldNote: Single-step debugging does not support ``FOR`` loops currently.Submitting issues-----------------Bugs and enhancements are tracked in the `issue tracker&lt;https://github.com/xyb/robotframework-debuglibrary/issues&gt;`_.Before submitting a new issue, it is always a good idea to check is thesame bug or enhancement already reported. If it is, please add your commentsto the existing issue instead of creating a new one.License-------This software is licensed under the ``New BSD License``. See the ``LICENSE``file in the top distribution directory for the full license text... # vim: syntax=rst expandtab tabstop=4 shiftwidth=4 shiftround</longdescription>
</pkgmetadata>