<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Proman Versioning[![License](https://img.shields.io/badge/License-LGPL%203.0-blue.svg)](https://spdx.org/licenses/LGPL-3.0)![Build Status](https://github.com/python-proman/proman-versioning/actions/workflows/ci.yml/badge.svg)[![codecov](https://codecov.io/gh/kuwv/proman-versioning/branch/master/graph/badge.svg)](https://codecov.io/gh/kuwv/proman-versioning)## OverviewProject Manager Versioning is a PEP-440 compliant tool for automating projectversions using conventional commits.## Install`pip install proman-versioning`## SetupThis tool is designed to work with any textfile using a templating pattern and path to the file.### Configuring versionsConfiguration can be performed with either the `.versioning` or `pyproject.toml`files.#### Global configuration settings:Specific types of releases can be disabled by setting the respective release tofalse.Disable development releases:```enable_devreleases = false```Disable pre-releases:```enable_prereleases = false```Disable post-releases:```enable_postreleases = false```#### File specific settings:Use different version compatibiliy type:```compat = &quot;semver&quot;```Update only the release version for a configuration:```release_only = true```#### Example `.versioning`The `.versioning` config is a non-specfile based project file using TOML. This is thepreferred configuration for non-python projects that may use this tool.```[proman]version = &quot;1.2.3&quot;[proman.versioning]disable_devreleases = true[[proman.versioning.files]]filepath = &quot;pyproject.toml&quot;pattern = &quot;version = \&quot;${version}\&quot;&quot;[[proman.versioning.files]]filepath = &quot;example/__init__.py&quot;pattern = &quot;__version__ = '${version}'&quot;[[tool.proman.versioning.files]]filepath = &quot;chart/Chart.yaml&quot;compat = &quot;semver&quot;patterns = [  &quot;version = \&quot;${version}\&quot;&quot;,  &quot;appVersion = \&quot;${version}\&quot;&quot;]```#### Example `pyproject.toml````[tool.proman]version = &quot;1.2.3&quot;[tool.proman.versioning][[tool.proman.versioning.files]]filepath = &quot;pyproject.toml&quot;pattern = &quot;version = \&quot;${version}\&quot;&quot;[[tool.proman.versioning.files]]filepath = &quot;example/__init__.py&quot;pattern = &quot;__version__ = '${version}'&quot;[[tool.proman.versioning.files]]filepath = &quot;chart/Chart.yaml&quot;compat = &quot;semver&quot;patterns = [  &quot;version = \&quot;${version}\&quot;&quot;,  &quot;appVersion = \&quot;${version}\&quot;&quot;]```#### Example `setup.cfg`Setuptools allows `setup.cfg` to pull the version from the application. Thisshould be used in tandem with either of the above configurations to controlversions for a project.```[metadata]name = exampleversion = attr: src.VERSION...```## References- https://www.conventionalcommits.org/en/v1.0.0/- https://www.python.org/dev/peps/pep-0440/- https://semver.org- https://calver.org</longdescription>
</pkgmetadata>