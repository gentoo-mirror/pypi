<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![GitHub Workflow Status (with branch)](https://img.shields.io/github/actions/workflow/status/jaykv/cliffy/python-app.yaml?branch=main)](https://github.com/jaykv/cliffy/actions)[![PyPI](https://img.shields.io/pypi/v/cliffy)](https://pypi.org/project/cliffy/)![GitHub](https://img.shields.io/github/license/jaykv/cliffy)# cliffy :mountain:YAML-defined CLI generator and manager for python## Features* Build and generate YAML-defined CLIs* Dynamic abstractions to rapidly build and test CLIs* Manage CLIs- load, list, update, and remove* Built-in shell and Python script support* Supports Jinja2-templating to create a flexible command flow## Install`pip install cliffy`## Usage`cli &lt;command&gt;`* `init &lt;cli name&gt;`: Generate a template CLI manifest* `load &lt;manifest&gt;`: Add a new CLI based on the manifest* `render &lt;manifest&gt;`: Render the YAML manifest into executable code* `list` or `ls`: Ouput a list of loaded CLIs * `update &lt;cli name&gt;`: Reloads a CLI* `remove &lt;cli name&gt;` or `rm &lt;cli name&gt;`: Remove a loaded CLI### Basic Example1. Define a manifest```yaml# hello.yamlname: helloversion: 0.1.0commands:  bash: $echo &quot;hello from bash&quot;  python: print(&quot;hello from python&quot;)```2. Load CLI```$ cli load hello.yaml```3. Run CLI directly`hello -h`![hello-demo](docs/images/hello.png)For more examples, check [examples](examples/) directory.## Manifest templateGenerated by `cli init`:```yaml# cliffy v1 templatemanifestVersion: v1# The name of the CLI# This will be used as the script name when invoking the CLI from the command line.name: cliffy # The version of the CLI# This should follow the standard semantic versioning format (e.g., 'MAJOR.MINOR.PATCH').version: 0.1.0# List of external CLI manifest paths to include into the main manifest# Performs a deep merge of manifests sequentially in the order given to assemble a merged manifest# and finally, deep merges the merged manifest with the main manifest.includes: []# List of Python dependencies required for the CLI# Validated on CLI load and update# Supports basic requirements specifier syntax.requires: []# A mapping defining manifest variables that can be referenced in any other blocks# Environments variables can be used in this section with ${some_env_var} for dynamic parsing# Supports jinja2 formatted expressions as values# Interpolate defined vars in other blocks jinja2-styled {{ var_name }}.vars:    default_mood: happy# A string block or list of strings containing any module imports# These can be used to import any python modules that the CLI depends on.imports:    - import os    - |        from collections import defaultdict        import re# A list containing any helper functions# Each element of the list can be a separate function# These functions should be defined as strings that can be executed by the Python interpreter.functions:    - |        def greet_name(name: str):            print(&quot;hello &quot; + name)# A mapping containing any shared type definitions# These types can be referenced by name in the args section to provide type annotations for params and options defined in the args section.types:    Language: str = typer.Option(&quot;english&quot;, &quot;-l&quot;, help=&quot;Language to greet in&quot;, prompt=True)# A mapping containing the arguments and options for each command# Each key in the mapping should correspond to a command in the commands section# The value should be a list of mappings representing the params and options for that command.args:    world: [--name|-n: str!]                      # a REQUIRED option    greet.all:         - names: str!                             # a REQUIRED param as denoted by the ! at the end        - mood: str = &quot;{{default_mood}}&quot;          # an OPTIONAL param that uses a manifest var as default        - --language: Language                    # an option with a default that uses Language type as arg definition# A mapping containing the command definitions for the CLI# Each command should have a unique key- which can be either a group command or nested subcommands# Nested subcommands are joined by '.' in between each level# A special (*) wildcard can be used to spread the subcommand to all group-level commands# The value is the python code to run when the command is called OR a list of bash commands to run (prefixed with $).commands:    # this is a parent command that will get invoked with: hello world    world:         - |            &quot;&quot;&quot;            Help text for list            &quot;&quot;&quot;            greet_name(&quot;world&quot;)        - $ echo &quot;i can also mix-and-match this command script to run bash commands&quot;        # this is a nested command that will get invoked with: hello greet all    greet.all:         - help: Help text for list.all       # you can also define help text like this        - $ echo &quot;hello all&quot;                 # this is a bash command that will get converted to python subprocess call        - print(&quot;greetings from python&quot;)     # this python code will get directly invoked```For a barebones template: `cli init --raw`## Development```poetry shellcli -h```</longdescription>
</pkgmetadata>