<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># erdantic: Entity Relationship Diagrams[![Docs Status](https://img.shields.io/badge/docs-stable-informational)](https://erdantic.drivendata.org/)[![PyPI](https://img.shields.io/pypi/v/erdantic.svg)](https://pypi.org/project/erdantic/)[![conda-forge](https://img.shields.io/conda/vn/conda-forge/erdantic.svg)](https://anaconda.org/conda-forge/erdantic)[![tests](https://github.com/drivendataorg/erdantic/workflows/tests/badge.svg?branch=main)](https://github.com/drivendataorg/erdantic/actions?query=workflow%3Atests+branch%3Amain)[![codecov](https://codecov.io/gh/drivendataorg/erdantic/branch/main/graph/badge.svg)](https://codecov.io/gh/drivendataorg/erdantic)**erdantic** is a simple tool for drawing [entity relationship diagrams (ERDs)](https://en.wikipedia.org/wiki/Data_modeling#Entity%E2%80%93relationship_diagrams) for Python data model classes. Diagrams are rendered using the venerable [Graphviz](https://graphviz.org/) library. Supported data modeling frameworks are:- [Pydantic](https://pydantic-docs.helpmanual.io/)- [dataclasses](https://docs.python.org/3/library/dataclasses.html) from the Python standard libraryFeatures include a convenient CLI, automatic native rendering in Jupyter notebooks, and easy extensibility to other data modeling frameworks. Docstrings are even accessible as tooltips for SVG outputs. Great for adding a simple and clean data model reference to your documentation.&lt;img alt=&quot;Example diagram created by erdantic&quot; src=&quot;https://raw.githubusercontent.com/drivendataorg/erdantic/main/docs/docs/examples/pydantic.svg&quot;&gt;## Installationerdantic's graph modeling depends on [pygraphviz](https://pygraphviz.github.io/documentation/stable/index.html) and [Graphviz](https://graphviz.org/), an open-source C library. If you are on Linux or macOS, the easiest way to install everything together is to use conda and conda-forge:```bashconda install erdantic -c conda-forge```If not using conda, Graphviz must be installed first (before you can install pygraphviz). For recommended options and installation troubleshooting, see the [pygraphviz docs](https://pygraphviz.github.io/documentation/stable/install.html). Then to install erdantic and its Python dependencies from PyPI:```bashpip install erdantic```### Development versionYou can get the development version from GitHub with:```bashpip install https://github.com/drivendataorg/erdantic.git#egg=erdantic```## Quick UsageThe fastest way to produce a diagram like the above example is to use the erdantic CLI. Simply specify the full dotted path to your data model class and an output path. The rendered format is interpreted from the filename extension.```basherdantic erdantic.examples.pydantic.Party -o diagram.png```You can also import the erdantic Python library and use its functions.```pythonimport erdantic as erdfrom erdantic.examples.pydantic import Party# Easy one-linererd.draw(Party, out=&quot;diagram.png&quot;)# Or create a diagram object that you can inspect and do stuff withdiagram = erd.create(Party)diagram.models#&gt; [PydanticModel(Adventurer), PydanticModel(Party), PydanticModel(Quest), PydanticModel(QuestGiver)]diagram.draw(&quot;diagram.png&quot;)```Check out the &quot;Usage Examples&quot; section of our [docs](https://erdantic.drivendata.org/) to see more.</longdescription>
</pkgmetadata>