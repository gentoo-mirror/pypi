<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Header](./docs/logo/kindling_header.png)[![CI](https://github.com/migraf/fhir-kindling/actions/workflows/main_ci.yml/badge.svg?branch=main)](https://github.com/migraf/fhir-kindling/actions/workflows/main_ci.yml)[![codecov](https://codecov.io/gh/migraf/fhir-kindling/branch/main/graph/badge.svg?token=FKQENFXACB)](https://codecov.io/gh/migraf/fhir-kindling)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Maintainability](https://api.codeclimate.com/v1/badges/3b83aa52724b6e75fc22/maintainability)](https://codeclimate.com/github/migraf/fhir-kindling/maintainability)![PyPI - Downloads](https://img.shields.io/pypi/dm/fhir_kindling)![PyPI](https://img.shields.io/pypi/v/fhir_kindling)Python library for interacting with [HL7 FHIR](http://hl7.org/fhir/) servers and resources. Resource validation and parsing powered by[pydantic](https://github.com/samuelcolvin/pydantic) and the [fhir.resources](https://github.com/nazrulworld/fhir.resources) library.Provides a simple interface for synchronous and asynchronous CRUD operations for resources and bundles, as well as resource transfer between servers.Datascience features include flattening of resources and bundles into tabular format (pandas dataframes) and plotting methods for resources and bundles can optionally be included with the `ds` extra.Check out the [documentation](https://migraf.github.io/fhir-kindling/) for more information and a detailed user guide.Table of Contents=================- [Table of Contents](#table-of-contents)  - [Features](#features)  - [Installation](#installation)    - [Extras (optional)](#extras-optional)  - [Usage](#usage)    - [Connecting to a FHIR server](#connecting-to-a-fhir-server)    - [Query resources from the server](#query-resources-from-the-server)      - [Basic resource query](#basic-resource-query)      - [Query with filters](#query-with-filters)      - [Including related resources in the query](#including-related-resources-in-the-query)      - [Query resources by reference](#query-resources-by-reference)    - [Add resources to the server](#add-resources-to-the-server)    - [Deleting/Updating resources](#deletingupdating-resources)    - [Transfer resources between servers](#transfer-resources-between-servers)  - [Performance](#performance)  - [Contributing](#contributing)    - [Development](#development)    - [Tests](#tests)  - [Credits](#credits)## Features- Create, Read, Update, Delete resources using a FHIR server's REST API- Transfer resources between servers while maintaining referential integrity using server-given IDs- Bundle creation, validation and data management on a FHIR server via the REST API- Supports Hapi, Blaze and IBM FHIR servers- CSV serialization of query results- Synthetic data generation and&lt;!-- Created by https://github.com/ekalinin/github-markdown-toc --&gt;## InstallationInstall the package using pip:```shellpip install fhir-kindling --user```### Extras (optional)Fhir kindling can be used with the following extras:- `ds` for data science related features, such as flattening of resources into a tabular format```pip install fhir-kindling[ds] --user```## Usage### Connecting to a FHIR server```pythonfrom fhir_kindling import FhirServer# Connect with basic auth basic_auth_server = FhirServer(&quot;https://fhir.server/fhir&quot;, username=&quot;admin&quot;, password=&quot;admin&quot;)# Connect with static tokentoken_server = FhirServer(&quot;https://fhir.server/fhir&quot;, token=&quot;your_token&quot;)# Connect using oauth2/oidcoidc_server = FhirServer(&quot;https://fhir.server/fhir&quot;, client_id=&quot;client_id&quot;, client_secret=&quot;secret&quot;,                         oidc_provider_url=&quot;url&quot;)# Print the server's capability statementprint(basic_auth_server.capabilities)```### Query resources from the server#### Basic resource query```pythonfrom fhir_kindling import FhirServerfrom fhir.resources.patient import Patient# Connect using oauth2/oidcoidc_server = FhirServer(&quot;https://fhir.server/fhir&quot;, client_id=&quot;client_id&quot;, client_secret=&quot;secret&quot;,                         oidc_provider_url=&quot;url&quot;)# query all patients on the serverquery = oidc_server.query(Patient, output_format=&quot;json&quot;).all()print(query.response)# Query resources based on name of resourcequery = oidc_server.query(&quot;Patient&quot;, output_format=&quot;json&quot;).all()print(query.response)```#### Query with filtersFiltering the targeted resource is done using the `where` method on the query object. The filter is created by definingthe target field, the comparison operator and the value to compare.```pythonfrom fhir_kindling import FhirServerserver = FhirServer(api_address=&quot;https://fhir.server/fhir&quot;)query = server.query(&quot;Patient&quot;).where(field=&quot;birthDate&quot;, operator=&quot;gt&quot;, value=&quot;1980&quot;).all()```#### Including related resources in the queryResources that reference or are referenced by resources targeted by the query can be included in the response usingthe `include` method on the query object.```python# server initialization omitted# get the patients along with the queried conditionsquery_patient_condition = server.query(&quot;Condition&quot;).include(resource=&quot;Condition&quot;, reference_param=&quot;subject&quot;).all()# get the conditions for a patientquery_patient_condition = server.query(&quot;Patient&quot;)query_patient_condition = query_patient_condition.include(resource=&quot;Condition&quot;, reference_param=&quot;subject&quot;, reverse=True)response = query_patient_condition.all()```#### Query resources by referenceIf you know the id and resource type of the resource you want to query, you can use the `get` method for a singlereferencefor a list of references use `get_many`. The passed references should follow the format of `&lt;resource_type&gt;/&lt;id&gt;`.```python# server initialization omittedpatient = server.get(&quot;Patient/123&quot;)patients = server.get_many([&quot;Patient/123&quot;, &quot;Patient/456&quot;])```### Add resources to the serverResources can be added to the server using the `add` method on the server object. Lists of resources can be added using'add_all'.```pythonfrom fhir_kindling import FhirServerfrom fhir.resources.patient import Patient# Connect to the serverserver = FhirServer(api_address=&quot;https://fhir.server/fhir&quot;)# add a single resourcepatient = Patient(name=[{&quot;family&quot;: &quot;Smith&quot;, &quot;given&quot;: [&quot;John&quot;]}])response = server.add(patient)# add multiple resourcespatients = [Patient(name=[{&quot;family&quot;: f&quot;Smith_{i}&quot;, &quot;given&quot;: [&quot;John&quot;]}]) for i in range(10)]response = server.add_all(patients)```### Deleting/Updating resourcesResources can be deleted from the server using the `delete` method on the server object, it takes as input eitherreferences to the resources or the resources itself.  Similarly the `update` method can be used to update the resources on the server, by passing a list of updated resources.```pythonfrom fhir_kindling import FhirServerfrom fhir.resources.patient import Patient# Connect to the serverserver = FhirServer(api_address=&quot;https://fhir.server/fhir&quot;)# add some patientspatients = [Patient(name=[{&quot;family&quot;: f&quot;Smith_{i}&quot;, &quot;given&quot;: [&quot;John&quot;]}]) for i in range(10)]response = server.add_all(patients)# change the name of the patientsfor patient in response.resources:    patient.name[0].given[0] = &quot;Jane&quot;# update the patients on the serverupdated_patients = server.update(resources=response.resources)# delete based on referenceserver.delete(references=response.references[:5])# delete based on resourcesserver.delete(resources=response.resources[5:])```### Transfer resources between serversTransferring resources between servers is done using the `transfer` method on the server object. Using this methodserver assigned ids are used for transfer and referential integrity is maintained.  This method will also attempt to get all the resources that are referenced by the resources being transferred from theoriginserver and transfer them to the destination server as well.```pythonfrom fhir_kindling import FhirServer# initialize the two serversserver_1 = FhirServer(api_address=&quot;https://fhir.server/fhir&quot;)server_2 = FhirServer(api_address=&quot;https://fhir.server/fhir&quot;)# query some resources from server 1conditions = server_1.query(&quot;Condition&quot;).limit(10)# transfer the resources to server 2response = server_1.transfer(server_2, resources=conditions.resources)```## PerformanceThis library performs request at least 1.5 times faster than other popular python FHIR libraries.See [Benchmarks](benchmarks/README.md) for a more detailed description of the benchmarks.![Query Results](benchmarks/results/query_plot.png)## ContributingContributions are very welcome and greatly appreciated! If you want to contribute to this project, please fork the repository and make changes as you'd like. Pull requests are warmly welcome and credit will always be given.### DevelopmentTo set up your environment to develop this package make sure you have [poetry](https://python-poetry.org/) installed andrun the following commands:Install the dependencies:```bashpoetry install --with dev --all-extras```Install pre-commit hooks:- Linting: [ruff](https://github.com/charliermarsh/ruff)- Formatting [black](https://black.readthedocs.io/en/stable/)```bashpoetry run pre-commit install```### TestsTo run the full test suit you need access to two FHIR servers (the second one is used for transfer tests).You can spin up two servers (one HAPI and one Blaze FHIR) using the compose file in the `testing` directory.```bashcd testingdocker compose up```The servers will be available at `http://localhost:9090/fhir` and `http://localhost:9091/fhir` respectively.And the test should be configured to use them via the environment variables `FHIR_API_URL` and `TRANSFER_SERVER_URL` respectively.Run the tests:```bashpoetry run pytest```## CreditsThis package was created with Cookiecutter andthe [audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter) project template.</longdescription>
</pkgmetadata>