<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![GitHub](https://img.shields.io/github/license/diantonioandrea/misura)![PyPI](https://img.shields.io/pypi/v/misura?label=misura%20on%20pypi)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/misura)![PyPI - Downloads](https://img.shields.io/pypi/dm/misura)![Libraries.io dependency status for GitHub repo](https://img.shields.io/librariesio/github/diantonioandrea/misura)![GitHub last commit](https://img.shields.io/github/last-commit/diantonioandrea/misura)![GitHub Release Date](https://img.shields.io/github/release-date/diantonioandrea/misura)![GitHub commits since latest release (by date)](https://img.shields.io/github/commits-since/diantonioandrea/misura/latest)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)# misura```python&gt;&gt;&gt; from misura.quantities import quantity&gt;&gt;&gt; quantity(7, &quot;m&quot;, 1.5) / quantity(2, &quot;s&quot;)3.5 ± 0.75 m / s&gt;&gt;&gt; from misura.currencies import currency&gt;&gt;&gt; currency(2, &quot;EUR&quot;) + currency(3, &quot;USD&quot;)5.17 USD```Python library providing effortless unit handling and currency conversion for scientific and engineering purposes.**misura** is a powerful Python library designed to facilitate the efficient handling of units of measure for scientific and engineering applications, including currencies handling and conversion with constantly updated exchange rates. With its unified interface for dealing with different units and their conversions, you can quickly and accurately complete calculations without the need for complex manual conversions. Additionally, **misura** supports uncertainty handling allowing you to work with physical quantities and their associated uncertainties in a user-friendly and intuitive fashion. What's more, **misura** grants you the flexibility to create custom units of measure, so you can work in your preferred units.Make sure to take a look at the [documentation](https://misura.diantonioandrea.com), at the [contributing guidelines](https://github.com/diantonioandrea/.github/blob/main/CONTRIBUTING.md) and at the [examples](#examples).### Features- Mathematical and logical operations between quantities: [Example](#mathematical-operations), [example](#comparisons)- Currencies handling with daily updated exchange rates. ![New feature](https://img.shields.io/badge/new-green)- Uncertainty handling: [Example](#mathematical-operations) ![New feature](https://img.shields.io/badge/new-green)- Manual conversions: [Example](#manual-and-automatic-conversion)- Automatic conversions on operations: [Example](#manual-and-automatic-conversion)- Unpack and pack derived units: [Example](#unpack-derived-units), [example](#pack-units)- User defined base and derived units: [Example](#user-defined-units-of-measure)- Large compatibility with other libraries: [Example](#working-with-other-libraries)- Custom exceptions: [Example](#comparisons)## Installation### Installing misura**misura** can be installed from [PyPI](https://pypi.org) by:```python3 -m pip install --upgrade misura```### Verifying installation and base informationsBy:```python -m misura```you'll be able to verify the installation of **misura** along getting some informations about the library:```misuraPython library providing effortless unit handling and currency conversion for scientific and engineering purposes.Developed by Andrea Di Antonio, more on https://github.com/diantonioandrea/misuraDocumentation on https://misura.diantonioandrea.comBug tracker on https://github.com/diantonioandrea/misura/issues```### Importing misura**misura** can be imported by:```import misura```## ExamplesThese are some examples of operations between quantities.  Note that, by enabling `globals.style.unitHighlighting`, **misura** uses colorama to highlight units of measure. by disabling it, the output is in the form of `num [unit]`### Mathematical operations```pythonfrom misura.quantities import quantitynum1 = quantity(2, &quot;m s-1&quot;)num2 = quantity(4, &quot;m s-1&quot;)num3 = quantity(2, &quot;s&quot;, .5)print(num1 + num2)print((num1 + num2).dimension())print(num1 * num2)print(num1 / num3)print(num3 ** 2)```The output is:```6 m / s[length / time]8 m(2) / s(2)1.0 ± 0.25 m / s(2)4 ± 2.0 s(2)```### Currencies```pythonfrom misura.currencies import currencycur1 = currency(2, &quot;EUR&quot;)cur2 = currency(3, &quot;USD&quot;)print(cur0 * 2)print(cur1 + cur0)```The output is:```4 EUR5.17 USD```### Working with other libraries```pythonfrom misura.quantities import quantity, convertfrom decimal import Decimal, getcontextimport numpygetcontext().prec = 40arr1 = numpy.array([quantity(2, &quot;m&quot;), quantity(50, &quot;m s-1&quot;), quantity(2, &quot;kg&quot;)])arr2 = quantity(numpy.array([1, 2, 3]), &quot;J&quot;)num2 = quantity(numpy.sqrt(Decimal(5)), &quot;kg&quot;)print(arr1 * 3)print(arr2 ** 2)print(num2)```The output is:```[6 m 150 m / s 6 kg][1 4 9] J(2)2.236067977499789696409173668731276235441 kg```Unit highlighting helps distinguish between different numbers.### User defined units of measure```pythonfrom misura.quantities import quantity, convertfrom misura.tables import addUnitaddUnit(&quot;volume&quot;, {&quot;L&quot;: 1, &quot;daL&quot;: 10, &quot;hL&quot;: 100, &quot;kL&quot;: 1000, &quot;dL&quot;: 0.1, &quot;cL&quot;: 0.01, &quot;mL&quot;: 0.001}, &quot;dm3&quot;)num1 = quantity(3, &quot;L&quot;)print(convert(num1, &quot;cm3&quot;))```The output is:```3000.0 cm(3)```### Manual and automatic conversion```pythonfrom misura.quantities import quantity, convertnum1 = quantity(2, &quot;m2&quot;)num2 = quantity(4, &quot;kg&quot;)num3 = quantity(400, &quot;m s-1&quot;)print(convert(num1, &quot;cm2&quot;))print(num2 + quantity(5, &quot;g&quot;))print(convert(num3, &quot;km&quot;, partial=True))```The output is:```20000.0 cm(2)4.005 kg0.4 km / s```### Unpack derived quantities```pythonfrom misura.quantities import quantity, unpacknum1 = quantity(2, &quot;J2&quot;)num2 = quantity(4, &quot;C H&quot;)print(unpack(num1))print(unpack(num2, &quot;H&quot;))```The output is:```2.0 kg(2) m(4) / s(4)4.0 C kg m(2) / A(2) s(2)```### Pack derived quantities```pythonfrom misura.quantities import quantity, packnum1 = quantity(3, &quot;N m T&quot;)num2 = quantity(45, &quot;A2 s2&quot;)print(pack(num1, &quot;J&quot;, ignore=&quot;T&quot;))print(pack(num2, &quot;C&quot;, full=True))```The output is:```3.0 J T45.0 C(2)```### Comparisons```pythonfrom misura.quantities import quantitynum1 = quantity(2, &quot;m s-1&quot;)num2 = quantity(4, &quot;m s-1&quot;)num3 = quantity(2, &quot;s&quot;)print(num1 &gt; num2)print(num2 &lt; 6)print(num1 &gt; num3)```The output is:```FalseTruemisura.conversion.ConversionError: cannot convert from 's' to 'm s-1'raised by: '2 s' -&gt; 'm s-1'```### Unary operators and functions```pythonfrom misura.quantities import quantityfrom misura.globals import stylefrom math import truncstyle.quantityHighlighting = Falsenum1 = quantity(2, &quot;m s-1&quot;)num2 = quantity(4.5, &quot;m s-1&quot;)num3 = quantity(-2, &quot;s&quot;)print(-num1)print(trunc(num2))print(abs(num3))```The output is:```-2 [m / s]4 [m / s]2 [s]```### Formatting```pythonfrom misura.quantities import quantitynum1 = quantity(2000, &quot;m s-1&quot;)print(&quot;Exponential notation: {:.2e}&quot;.format(num1))```The output is:```Exponential notation: 2.00e+00 m / s```</longdescription>
</pkgmetadata>