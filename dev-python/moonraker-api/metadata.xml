<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Python package](https://github.com/cmroche/moonraker-api/workflows/Python%20package/badge.svg)## Moonracker Websocket API ClientConnect, request and subscribe to the Moonraker Websockets API without polling.**moonraker-api** is a ***fully async*** Python 3 based package for interfacing with Moonraker's API.## Getting the packageThe easiest way to grab **moonraker-api** is through PyPI`pip3 install moonraker-api`## Use Moonraker-API### Connect and Disconnect```pythonclass APIConnector(MoonrakerListener):    def __init__():        self.running = False        self.client = MoonrakerClient(            self,            HOST,            PORT,            API-KEY,        )    async def start(self) -&gt; None:        &quot;&quot;&quot;Start the websocket connection.&quot;&quot;&quot;        self.running = True        return await self.client.connect()    async def stop(self) -&gt; None:        &quot;&quot;&quot;Stop the websocket connection.&quot;&quot;&quot;        self.running = False        await self.client.disconnect()```### Query the API```pythonapi_connector = APIConnector()response = await api_connector.client.request(&quot;printer.info&quot;)```### Handle Push Notifications```pythonclass APIConnector(MoonrakerListener):    # Other class details, see above ...    async def state_changed(self, state: str) -&gt; None:        &quot;&quot;&quot;Notifies of changing websocket state.&quot;&quot;&quot;        _LOGGER.debug(&quot;Stated changed to %s&quot;, state)        if state == WEBSOCKET_STATE_CONNECTING:            pass        elif state == WEBSOCKET_STATE_CONNECTED:            pass        elif state == WEBSOCKET_STATE_READY:            pass        elif state == WEBSOCKET_STATE_PAUSED:            pass        elif state == WEBSOCKET_STATE_STOPPED:            pass    async def on_exception(self, exception: BaseException) -&gt; None:        &quot;&quot;&quot;Notifies of exceptions from the websocket run loop.&quot;&quot;&quot;        _LOGGER.debug(&quot;Received exception from API websocket %s&quot;, str(exception))        if isinstance(exception, ClientNotAuthenticatedError):            self.entry.async_start_reauth(self.hass)        else:            raise exception    async def on_notification(self, method: str, data: Any) -&gt; None:        &quot;&quot;&quot;Notifies of state updates.&quot;&quot;&quot;        _LOGGER.debug(&quot;Received notification %s -&gt; %s&quot;, method, data)        # Subscription notifications        if method == &quot;notify_status_update&quot;:            message = data[0]            timestamp = data[1]                        # Do stuff ...```</longdescription>
</pkgmetadata>