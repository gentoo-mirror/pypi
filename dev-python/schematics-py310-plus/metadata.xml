<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>About=====This is a Fork from the hard work of the maintainers athttps://github.com/schematics/schematics.Here's a summary of the changes:+ add support for python 3.10++ drop support for python version 3.6, 3.7, and 3.8+ run black and isort on the code base+ package with flit, updating to pyproject.toml+ add development environment setup with nix and package as a nix flake.+ and that's it!I don't plan on any changes to this library aside from maintainingsupport for modern python versions as long as this library is stilla dependency for projects that I'm involved with which is unlikely tobe forever. I would recommend planning on porting your validation codeto another validation / serialization library that is actively maintained.But until then I'll do my best to keep this current with new pythonversions. Thank you to the original maintainers for all of their work!**Project documentation:** https://schematics.readthedocs.io/en/latest/Schematics is a Python library to combine types into structures, validate them,and transform the shapes of your data based on simple descriptions.The internals are similar to ORM type systems, but there is no database layerin Schematics.  Instead, we believe that building a databaselayer is made significantly easier when Schematics handles everything butwriting the query.Further, it can be used for a range of tasks where having a database involvedmay not make sense.Some common use cases:+ Design and document specific `data structures &lt;https://schematics.readthedocs.io/en/latest/usage/models.html&gt;`_+ `Convert structures &lt;https://schematics.readthedocs.io/en/latest/usage/exporting.html#converting-data&gt;`_ to and from different formats such as JSON or MsgPack+ `Validate &lt;https://schematics.readthedocs.io/en/latest/usage/validation.html&gt;`_ API inputs+ `Remove fields based on access rights &lt;https://schematics.readthedocs.io/en/latest/usage/exporting.html&gt;`_ of some data's recipient+ Define message formats for communications protocols, like an RPC+ Custom `persistence layers &lt;https://schematics.readthedocs.io/en/latest/usage/models.html#model-configuration&gt;`_Example=======This is a simple Model. .. code:: python  &gt;&gt;&gt; from schematics.models import Model  &gt;&gt;&gt; from schematics.types import StringType, URLType  &gt;&gt;&gt; class Person(Model):  ...     name = StringType(required=True)  ...     website = URLType()  ...  &gt;&gt;&gt; person = Person({'name': u'Joe Strummer',  ...                  'website': 'http://soundcloud.com/joestrummer'})  &gt;&gt;&gt; person.name  u'Joe Strummer'Serializing the data to JSON... code:: python  &gt;&gt;&gt; import json  &gt;&gt;&gt; json.dumps(person.to_primitive())  {&quot;name&quot;: &quot;Joe Strummer&quot;, &quot;website&quot;: &quot;http://soundcloud.com/joestrummer&quot;}Let's try validating without a name value, since it's required... code:: python  &gt;&gt;&gt; person = Person()  &gt;&gt;&gt; person.website = 'http://www.amontobin.com/'  &gt;&gt;&gt; person.validate()  Traceback (most recent call last):    File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;    File &quot;schematics/models.py&quot;, line 231, in validate      raise DataError(e.messages)  schematics.exceptions.DataError: {'name': ['This field is required.']}Add the field and validation passes... code:: python  &gt;&gt;&gt; person = Person()  &gt;&gt;&gt; person.name = 'Amon Tobin'  &gt;&gt;&gt; person.website = 'http://www.amontobin.com/'  &gt;&gt;&gt; person.validate()  &gt;&gt;&gt;</longdescription>
</pkgmetadata>