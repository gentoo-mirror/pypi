<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>sievelib========|travis| |codecov| |latest-version|Client-side Sieve and Managesieve library written in Python.* Sieve : An Email Filtering Language  (`RFC 5228 &lt;http://tools.ietf.org/html/rfc5228&gt;`_)* ManageSieve : A Protocol for Remotely Managing Sieve Scripts  (`RFC 5804 &lt;http://tools.ietf.org/html/rfc5804&gt;`_)Installation------------To install ``sievelib`` from PyPI::  pip install sievelibTo install sievelib from git::  git clone git@github.com:tonioo/sievelib.git  cd sievelib  python ./setup.py installSieve tools-----------What is supported^^^^^^^^^^^^^^^^^Currently, the provided parser supports most of the functionalitiesdescribed in the RFC. The only exception concerns section*2.4.2.4. Encoding Characters Using &quot;encoded-character&quot;* which is notsupported.The following extensions are also supported:* Copying Without Side Effects (`RFC 3894 &lt;https://tools.ietf.org/html/rfc3894&gt;`_)* Body (`RFC 5173 &lt;https://tools.ietf.org/html/rfc5173&gt;`_)* Vacation (`RFC 5230 &lt;http://tools.ietf.org/html/rfc5230&gt;`_)* Relational (`RFC 5231 &lt;https://tools.ietf.org/html/rfc5231&gt;`_)* Imap4flags (`RFC 5232 &lt;https://tools.ietf.org/html/rfc5232&gt;`_)The following extensions are partially supported:* Date and Index (`RFC 5260 &lt;https://tools.ietf.org/html/rfc5260&gt;`_)* Checking Mailbox Status and Accessing Mailbox Metadata (`RFC 5490 &lt;https://tools.ietf.org/html/rfc5490&gt;`_)Extending the parser^^^^^^^^^^^^^^^^^^^^It is possible to extend the parser by adding new supportedcommands. For example::  import sievelib  class MyCommand(sievelib.commands.ActionCommand):      args_definition = [          {&quot;name&quot;: &quot;testtag&quot;,              &quot;type&quot;: [&quot;tag&quot;],              &quot;write_tag&quot;: True,              &quot;values&quot;: [&quot;:testtag&quot;],              &quot;extra_arg&quot;: {&quot;type&quot;: &quot;number&quot;,                            &quot;required&quot;: False},              &quot;required&quot;: False},          {&quot;name&quot;: &quot;recipients&quot;,              &quot;type&quot;: [&quot;string&quot;, &quot;stringlist&quot;],              &quot;required&quot;: True}      ]  sievelib.commands.add_commands(MyCommand)Basic usage^^^^^^^^^^^The parser can either be used from the command-line::  $ cd sievelib  $ python parser.py test.sieve  Syntax OK  $Or can be used from a python environment (or script/module)::  &gt;&gt;&gt; from sievelib.parser import Parser  &gt;&gt;&gt; p = Parser()  &gt;&gt;&gt; p.parse('require [&quot;fileinto&quot;];')  True  &gt;&gt;&gt; p.dump()  require (type: control)      [&quot;fileinto&quot;]  &gt;&gt;&gt;   &gt;&gt;&gt; p.parse('require [&quot;fileinto&quot;]')  False  &gt;&gt;&gt; p.error  'line 1: parsing error: end of script reached while semicolon expected'  &gt;&gt;&gt;Simple filters creation^^^^^^^^^^^^^^^^^^^^^^^Some high-level classes are provided with the ``factory`` module, theymake the generation of Sieve rules easier::  &gt;&gt;&gt; from sievelib.factory import FiltersSet  &gt;&gt;&gt; fs = FiltersSet(&quot;test&quot;)  &gt;&gt;&gt; fs.addfilter(&quot;rule1&quot;,  ...              [(&quot;Sender&quot;, &quot;:is&quot;, &quot;toto@toto.com&quot;),],  ...              [(&quot;fileinto&quot;, &quot;Toto&quot;),])  &gt;&gt;&gt; fs.tosieve()  require [&quot;fileinto&quot;];  # Filter: rule1  if anyof (header :is &quot;Sender&quot; &quot;toto@toto.com&quot;) {      fileinto &quot;Toto&quot;;  }  &gt;&gt;&gt; Additional documentation is available within source code.ManageSieve tools-----------------What is supported^^^^^^^^^^^^^^^^^All mandatory commands are supported. The ``RENAME`` extension issupported, with a simulated behaviour for server that do not supportit.For the ``AUTHENTICATE`` command, supported mechanisms are ``DIGEST-MD5``,``PLAIN`` and ``LOGIN``.Basic usage^^^^^^^^^^^The ManageSieve client is intended to be used from another pythonapplication (there isn't any shell provided)::  &gt;&gt;&gt; from sievelib.managesieve import Client  &gt;&gt;&gt; c = Client(&quot;server.example.com&quot;)  &gt;&gt;&gt; c.connect(&quot;user&quot;, &quot;password&quot;, starttls=False, authmech=&quot;DIGEST-MD5&quot;)  True  &gt;&gt;&gt; c.listscripts()  (&quot;active_script&quot;, [&quot;script1&quot;, &quot;script2&quot;])  &gt;&gt;&gt; c.setactive(&quot;script1&quot;)  True  &gt;&gt;&gt; c.havespace(&quot;script3&quot;, 45)  True  &gt;&gt;&gt;Additional documentation is available with source code... |latest-version| image:: https://badge.fury.io/py/sievelib.svg   :target: https://badge.fury.io/py/sievelib.. |travis| image:: https://travis-ci.org/tonioo/sievelib.png?branch=master   :target: https://travis-ci.org/tonioo/sievelib.. |codecov| image:: http://codecov.io/github/tonioo/sievelib/coverage.svg?branch=master   :target: http://codecov.io/github/tonioo/sievelib?branch=master</longdescription>
</pkgmetadata>