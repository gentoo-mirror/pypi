<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==================Pandora API Client==================.. image:: https://img.shields.io/pypi/v/pydora.svg    :target: https://pypi.python.org/pypi/pydora.. image:: https://github.com/mcrute/pydora/workflows/build/badge.svg    :target: https://github.com/mcrute/pydora/actions?query=workflow%3AbuildThis code is licensed under the MIT license. The code is maintained on `GitHub&lt;https://github.com/mcrute/pydora&gt;`_.This is a reasonably complete implementation of the Pandora API in pure Pythonthat supports Python 3.5+. It contains a complete implementation of the coreradio features but does not implement account management or Pandora Plusfunctionality; pull requests adding that functionality are welcomed from anyoneneeding those features.Keys or passwords for Pandora are **not** provided in this repo, you'll have to`go get those &lt;http://6xq.net/playground/pandora-apidoc/json/partners/#partners&gt;`_for yourself. Make something awesome with this library, don't abuse Pandora,that's not cool.Compatability=============This is the ``2.x`` series which supports only Python 3.5+. For older versionsof Python please use the |1.x|_ series. The |1.x|_ series is no longermaintained but pull requests to fix bugs are still welcomed.This package uses semantic versioning. The API is guaranteed to be stablewithin a major version release. Please constrain your dependencies to majorversions. For example, to depend on version ``2.x`` use this line in yoursetup.py ``install_requires``::    pydora&gt;=2,&lt;3Installing==========Installing is as simple as using pip and running the built-in configurationcommand to create a ``~/.pydora.cfg`` file. If you already have a `PianoBar&lt;http://6xq.net/projects/pianobar/&gt;`_ config file Pydora will automatically usethat. ::    $ pip install pydora    $ pydora-configureOn Ubuntu install `vlc` or `vlc`::    # apt-get install vlcTo install VLC on Mac OS X visit the `VLC site&lt;https://www.videolan.org/vlc/&gt;`_ to download ``VLC.app``, then drag-and-dropthe bundle into your ``/Applications`` folder. Pydora will auto-detect this.Audio Output Back-end=====================The ``pydora`` player does not directly support audio output but instead reliesupon external audio output back-ends. The two supported back-ends are VLC andmpg123. The main difference between the two back-ends is the supported fileformats. VLC supports a vast array of codecs, including MP3 and AAC, the twoformats that Pandora uses. mpg123 on the other hand supports only MP3. As of2017 Pandora has started to prefer AAC files over MP3 which necessitates VLC.The ``pydora`` player will try to auto-detect whatever player exists on yoursystem, preferring VLC, and will use that audio output back-end. If you noticea lot of skipping in a playlist consider installing VLC.Remote VLC Back-end-------------------It is also possible to remotely control a copy of VLC running on anothermachine if you're unable or unwilling to install Pydora on your playbackmachine. To do this start VLC on the remote machine with the ``rc-host`` optionset. For example::    vlc -I rc --advanced --rc-host=0.0.0.0:1234Once VLC is running start Pydora with the ``vlc-net`` option and specify theremote host and port that VLC is listening on. For example::    pydora --vlc-net 192.168.0.12:1234Pydora will now send all audio playback requests to the remote VLC. It doesthis using a text control protocol; all audio data is streamed directly fromthe internet to VLC and is not passed over the Pydora control channel. Becauseof this it is possible for the control channel to run over a very low bandwidthconnection.**Note**: VLC doesn't provide any security so anyone on the network will beable to control VLC. It is generally safer to bind VLC to ``127.0.0.1`` and usesomething like SSH forwarding to securely forward the port to a remote host butthat's outside of the scope of this README.Simple Player=============Included is ``pydora``, a simple Pandora stream player that runs at the commandline. It requires that mpg123 or VLC be installed with HTTP support as well asa settings file (example below) located in ``~/.pydora.cfg``. Alternatively anenvironment variable ``PYDORA_CFG`` can point to the path of the config file.The player only supports basic functionality for now. It will display a stationlist, allow listening to any station, basic feedback and bookmarking are alsosupported. The player starts an mpg123 or VLC process in remote control modeand feeds commands to it. It does not download any music but rather streamsthem directly from Pandora.When playing the following keys work (press enter afterwards):* ``n``  - next song* ``p``  - pause or resume song* ``s``  - station list (stops song)* ``d``  - thumbs down track* ``u``  - thumbs up track* ``b``  - bookmark song* ``a``  - bookmark artist* ``S``  - sleep song* ``Q``  - quit program* ``vu`` - volume up* ``vd`` - volume down* ``?``  - display help**Note**: volume control is currently only supported with the VLC back-end.Sample Config File==================The built-in ``pydora-configure`` script can be run to create a configurationfile automatically if you don't already have one. This will download the keysfrom the link below and pick a suitable one when writing the config file. Ifyou want to create the config file manually the format is:::    [api]    api_host = hostname    encryption_key = key    decryption_key = key    username = partner username    password = partner password    device = key    default_audio_quality = mediumQuality    [user]    username = your username    password = your password**default_audio_quality**  Default audio quality to request from the API; can be one of `lowQuality`,  `mediumQuality` (default), or `highQuality`. If the preferred audio quality  is not available for the device specified, then the next-highest bit-rate  stream that Pandora supports for the chosen device will be used.Programmatic Use================The Pydora distribution contains two python packages. The |pandora package|_is the API for interacting with the Pandora service. The |pydora package|_ isa very small reference implementation of using the API to drive a command lineplayer. If you're interested in the command line skip this section and readInstalling below to get started.The easiest way to get started is by using the |pandora.clientbuilder|_package. This package contains a set of factories that can be used to build aPandora client with some configuration. The classes in the package that end in``Builder`` are the factories and the rest of the classes are implementationdetails. All of the builders will return an instance of|pandora.client.APIClient|_ that is completely configured and ready for use inyour program.If you have an existing program and would like to connect to Pandora theeasiest way is to use the |SettingsDictBuilder|_ class like so::    client = SettingsDictBuilder({        &quot;DECRYPTION_KEY&quot;: &quot;see_link_above&quot;,        &quot;ENCRYPTION_KEY&quot;: &quot;see_link_above&quot;,        &quot;PARTNER_USER&quot;: &quot;see_link_above&quot;,        &quot;PARTNER_PASSWORD&quot;: &quot;see_link_above&quot;,        &quot;DEVICE&quot;: &quot;see_link_above&quot;,    }).build()    client.login(&quot;username&quot;, &quot;password&quot;)At this point the client is ready for use, see |pandora.client.APIClient|_ fora list of methods that can be called. All responses from the API will returnPython objects from the |pandora.models.pandora|_ package or raise exceptionsfrom |pandora.errors|_For a more functional example look at the file |pydora/player.py|_ which showshow to use the API in a simple command line application.Pandora API Spec and Partner Keys=================================If you're interested in the underlying API or need to download the keysyourself you can find more details at the links below. This documentation iscommunity maintained and not official.* `API Spec &lt;http://6xq.net/playground/pandora-apidoc/&gt;`_* `Partner Keys &lt;http://6xq.net/playground/pandora-apidoc/json/partners/#partners&gt;`_Contributing============See `CONTRIBUTING &lt;https://github.com/mcrute/pydora/blob/master/CONTRIBUTING.rst&gt;`_Contributors============Thanks to the contributors who make Pydora possible by adding features andfixing bugs. List is organized by date of first contribution.* Mike Crute (`@mcrute &lt;https://github.com/mcrute&gt;`_)* John Cass (`@jcass77 &lt;https://github.com/jcass77&gt;`_)* Thomas Wei√üschuh (`@t-8c &lt;https://github.com/t-8ch&gt;`_)* Skybound1 (`@Skybound1 &lt;https://github.com/Skybound1&gt;`_)* Hugo (`@hugovk &lt;https://github.com/hugovk&gt;`_)* mspencer92 (`@mspencer92 &lt;https://github.com/mspencer92&gt;`_).. |1.x| replace:: ``1.x``.. _1.x: https://github.com/mcrute/pydora/tree/1.x.. |pandora package| replace:: ``pandora`` package.. _pandora package: https://github.com/mcrute/pydora/tree/master/pandora.. |pydora package| replace:: ``pydora`` package.. _pydora package: https://github.com/mcrute/pydora/tree/master/pydora.. |pandora.clientbuilder| replace:: ``pandora.clientbuilder``.. _pandora.clientbuilder: https://github.com/mcrute/pydora/blob/master/pandora/clientbuilder.py.. |pandora.client.APIClient| replace:: ``pandora.client.APIClient``.. _pandora.client.APIClient: https://github.com/mcrute/pydora/blob/master/pandora/client.py#L98.. |SettingsDictBuilder| replace:: ``SettingsDictBuilder``.. _SettingsDictBuilder: https://github.com/mcrute/pydora/blob/master/pandora/clientbuilder.py#L136.. |pandora.models.pandora| replace:: ``pandora.models.pandora``.. _pandora.models.pandora: https://github.com/mcrute/pydora/tree/master/pandora/models.. |pandora.errors| replace:: ``pandora.errors``.. _pandora.errors: https://github.com/mcrute/pydora/blob/master/pandora/errors.py.. |pydora/player.py| replace:: ``pydora/player.py``.. _pydora/player.py: https://github.com/mcrute/pydora/blob/master/pydora/player.py</longdescription>
</pkgmetadata>