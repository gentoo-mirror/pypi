<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[简体中文](https://github.com/amisadmin/fastapi_amis_admin/blob/master/README.zh.md)| [English](https://github.com/amisadmin/fastapi_amis_admin)# Introduction&lt;h2 align=&quot;center&quot;&gt;  FastAPI-Amis-Admin&lt;/h2&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;fastapi-amis-admin is a high-performance, efficient and easily extensible FastAPI admin framework.&lt;/em&gt;&lt;br/&gt;    &lt;em&gt;Inspired by Django-admin, and has as many powerful functions as Django-admin.&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/amisadmin/fastapi_amis_admin/actions/workflows/pytest.yml&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://github.com/amisadmin/fastapi_amis_admin/actions/workflows/pytest.yml/badge.svg&quot; alt=&quot;Pytest&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/fastapi_amis_admin&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://badgen.net/pypi/v/fastapi-amis-admin?color=blue&quot; alt=&quot;Package version&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pepy.tech/project/fastapi-amis-admin&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://pepy.tech/badge/fastapi-amis-admin&quot; alt=&quot;Downloads&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://gitter.im/amisadmin/fastapi-amis-admin&quot;&gt;        &lt;img src=&quot;https://badges.gitter.im/amisadmin/fastapi-amis-admin.svg&quot; alt=&quot;Chat on Gitter&quot;/&gt;    &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/amisadmin/fastapi_amis_admin&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;  ·  &lt;a href=&quot;http://demo.amis.work/admin&quot; target=&quot;_blank&quot;&gt;online demo&lt;/a&gt;  ·  &lt;a href=&quot;http://docs.gh.amis.work&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt;  ·  &lt;a href=&quot;http://docs.amis.work&quot; target=&quot;_blank&quot;&gt;can't open the document?&lt;/a&gt;&lt;/p&gt;------`fastapi-amis-admin` is a high-performance and efficient framework based on `fastapi` &amp; `amis` with `Python 3.7+`, andbased on standard Python type hints. The original intention of the development is to improve the application ecology andto quickly generate a visual dashboard for the web application . According to the `Apache2.0` protocol, it is free andopen source . But in order to better operate and maintain this project in the long run, I very much hope to geteveryone's sponsorship and support.## Features- **High performance**: Based on [FastAPI](https://fastapi.tiangolo.com/). Enjoy all the benefits.- **High efficiency**: Perfect code type hints. Higher code reusability.- **Support asynchronous and synchronous hybrid writing**: `ORM`  is based on`SQLModel` &amp; `Sqlalchemy`. Freely customize  database type. Support synchronous and asynchronous mode. Strong scalability.- **Front-end separation**: The front-end is rendered by `Amis`, the back-end interface is automatically generated  by `fastapi-amis-admin`. The interface is reusable.- **Strong scalability**: The background page supports `Amis` pages and ordinary `html` pages. Easily customize the  interface freely.- **Automatic api documentation**: Automatically generate Interface documentation by `FastAPI`. Easily debug and share  interfaces.## Dependencies- [FastAPI](https://fastapi.tiangolo.com/): Finish the web part.- [SQLModel](https://sqlmodel.tiangolo.com/): Finish `ORM` model mapping. Perfectly  combine  [SQLAlchemy](https://www.sqlalchemy.org/) with [Pydantic](https://pydantic-docs.helpmanual.io/), and have all  their features .- [Amis](https://baidu.gitee.io/amis): Finish admin page presentation.## Composition`fastapi-amis-admin` consists of three core modules, of which, `amis`, `fastapi-sqlmodel-crud` can be used as separatemodules, `amis_admin` is developed by the former.- `amis`: Based on the `pydantic` data model building library of `baidu amis`. To generate/parse data rapidly.- `fastapi-sqlmodel-crud`: Based on `FastAPI` &amp;`SQLModel`. To quickly build Create, Read, Update, Delete common API  interface .- `admin`: Inspired by `Django-Admin`. Combine `amis` with `fastapi-sqlmodel-crud`. To quickly build Web Admin  dashboard .## Installation```bashpip install fastapi_amis_admin```## Simple Example```pythonfrom fastapi import FastAPIfrom fastapi_amis_admin.admin.settings import Settingsfrom fastapi_amis_admin.admin.site import AdminSite# create FastAPI applicationapp = FastAPI()# create AdminSite instancesite = AdminSite(settings=Settings(database_url_async='sqlite+aiosqlite:///amisadmin.db'))# mount AdminSite instancesite.mount_app(app)if __name__ == '__main__':    import uvicorn    uvicorn.run(app, debug=True)```## ModelAdmin Example```pythonfrom fastapi import FastAPIfrom sqlmodel import SQLModelfrom fastapi_amis_admin.admin.settings import Settingsfrom fastapi_amis_admin.admin.site import AdminSitefrom fastapi_amis_admin.admin import adminfrom fastapi_amis_admin.models.fields import Field# create FastAPI applicationapp = FastAPI()# create AdminSite instancesite = AdminSite(settings=Settings(database_url_async='sqlite+aiosqlite:///amisadmin.db'))# Create an SQLModel, see document for details: https://sqlmodel.tiangolo.com/class Category(SQLModel, table=True):    id: int = Field(default=None, primary_key=True, nullable=False)    name: str = Field(title='CategoryName')    description: str = Field(default='', title='Description')# register ModelAdmin@site.register_adminclass CategoryAdmin(admin.ModelAdmin):    page_schema = 'Category'    # set model    model = Category# mount AdminSite instancesite.mount_app(app)# create initial database table@app.on_event(&quot;startup&quot;)async def startup():    await site.db.async_run_sync(SQLModel.metadata.create_all, is_session=False)if __name__ == '__main__':    import uvicorn    uvicorn.run(app, debug=True)```## FormAdmin Example```pythonfrom typing import Anyfrom fastapi import FastAPIfrom pydantic import BaseModelfrom starlette.requests import Requestfrom fastapi_amis_admin.amis.components import Formfrom fastapi_amis_admin.admin import adminfrom fastapi_amis_admin.admin.settings import Settingsfrom fastapi_amis_admin.admin.site import AdminSitefrom fastapi_amis_admin.crud.schema import BaseApiOutfrom fastapi_amis_admin.models.fields import Field# create FastAPI applicationapp = FastAPI()# create AdminSite instancesite = AdminSite(settings=Settings(database_url_async='sqlite+aiosqlite:///amisadmin.db'))# register FormAdmin@site.register_adminclass UserLoginFormAdmin(admin.FormAdmin):    page_schema = 'UserLoginForm'    # set form information, optional    form = Form(title='This is a test login form', submitText='login')    # create form schema    class schema(BaseModel):        username: str = Field(..., title='username', min_length=3, max_length=30)        password: str = Field(..., title='password')    # handle form submission data    async def handle(self, request: Request, data: BaseModel, **kwargs) -&gt; BaseApiOut[Any]:        if data.username == 'amisadmin' and data.password == 'amisadmin':            return BaseApiOut(msg='Login successfully!', data={'token': 'xxxxxx'})        return BaseApiOut(status=-1, msg='Incorrect username or password!')# mount AdminSite instancesite.mount_app(app)if __name__ == '__main__':    import uvicorn    uvicorn.run(app, debug=True)```## Working with Command```bash# Install command line extensionpip install fastapi_amis_admin[cli]# View helpfaa --help# Initialize a `FastAPI-Amis-Admin` projectfaa new project_name --init# Initialize a `FastAPI-Amis-Admin` applicationfaa new app_name# Fast running projectfaa run```## Preview- Open `http://127.0.0.1:8000/admin/` in your browser:![ModelAdmin](https://s2.loli.net/2022/03/20/ItgFYGUONm1jCz5.png)- Open `http://127.0.0.1:8000/admin/docs` in your browser:![Docs](https://s2.loli.net/2022/03/20/1GcCiPdmXayxrbH.png)## Project- [`Amis-Admin-Theme-Editor`](https://github.com/swelcker/amis-admin-theme-editor):Theme-Editor for the fastapi-amis-admin.   Allows to add custom css styles and to apply theme --vars change on the fly.- [`FastAPI-User-Auth`](https://github.com/amisadmin/fastapi_user_auth): A simple and powerful `FastAPI` user `RBAC`  authentication and authorization library.- [`FastAPI-Scheduler`](https://github.com/amisadmin/fastapi_scheduler): A simple scheduled task management `FastAPI` extension  based on `APScheduler`.- [`FastAPI-Amis-Admin-Demo`](https://github.com/amisadmin/fastapi_amis_admin_demo): An example `FastAPI-Amis-Admin` application.- [`FastAPI-User-Auth-Demo`](https://github.com/amisadmin/fastapi_user_auth_demo): An example `FastAPI-User-Auth` application.## License- According to the `Apache2.0` protocol, `fastapi-amis-admin` is free and open source. It can be used for commercial for  free, but please clearly display copyright information about `FastAPI-Amis-Admin` on the display interface.</longdescription>
</pkgmetadata>