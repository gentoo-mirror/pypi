<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AboutThe Python Package Index Project (pypipr)pypi : https://pypi.org/project/pypipr# SetupInstall with pip```python -m pip install pypipr```Import with * for fastest access```pythonfrom pypipr.pypipr import *```# Functions`WINDOWS` True apabila berjalan di platform Windows```pythonprint(WINDOWS)````LINUX` True apabila berjalan di platform Linux```pythonprint(LINUX)````avg()` Simple Average Function karena tidak disediakan oleh python```pythonn = [1, 22, 2, 3, 13, 2, 123, 12, 31, 2, 2, 12, 2, 1]print(avg(n))````random_bool()` Menghasilkan nilai random antara 1 atau 0```pythonprint(random_bool())````set_timeout()` Menjalankan fungsi ketika sudah sekian detik.```pythonset_timeout(3, lambda: print(&quot;Timeout 3&quot;))x = set_timeout(7, lambda: print(&quot;Timeout 7&quot;))print(x)print(&quot;menghentikan timeout 7&quot;)x.cancel()````regex_multiple_replace()` Melakukan multiple replacement untuk setiap list regex. ```pythonregex_replacement_list = [    {&quot;regex&quot;: r&quot;\{\{\s*(ini)\s*\}\}&quot;, &quot;replacement&quot;: r&quot;itu dan \1&quot;},    {&quot;regex&quot;: r&quot;\{\{\s*sini\s*\}\}&quot;, &quot;replacement&quot;: r&quot;situ&quot;},]data = &quot;{{ ini }} adalah ini. {{sini}} berarti kesini.&quot;data = regex_multiple_replace(data, regex_replacement_list, re.IGNORECASE)print(data)````get_class_method()` Mengembalikan berupa tuple yg berisi list dari method dalam class```pythonclass ExampleGetClassMethod:    def a():        return [x for x in range(10)]    def b():        return [x for x in range(10)]    def c():        return [x for x in range(10)]    def d():        return [x for x in range(10)]if __name__ == &quot;__main__&quot;:    print(get_class_method(ExampleGetClassMethod))````exit_if_empty()` Menghentikan program apabila semua variabel bernilai false```pythonvar1 = Nonevar2 = '0'exit_if_empty(var1, var2)````strtr()` STRing TRanslate, mengubah string menggunakan kamus dari dict.```pythontext = 'aku disini mau kemana saja'replacements = {    &quot;disini&quot;: &quot;disitu&quot;,    &quot;kemana&quot;: &quot;kesini&quot;,}print(strtr(text, replacements))````strtr_regex()` STRing TRanslate, mengubah string menggunakan kamus dari dict.```pythontext = 'aku {{ ini }} mau ke {{ sini }} mau kemana saja'replacements = {    r&quot;\{\{\s*(ini)\s*\}\}&quot;: r&quot;itu dan \1&quot;,    r&quot;\{\{\s*sini\s*\}\}&quot;: r&quot;situ&quot;,}print(strtr_regex(text, replacements))```# Compare Performance`class ComparePerformance` Menjalankan seluruh method dalam class, kemudian membandingkan waktu yg diperlukan.```pythonclass ExampleComparePerformance(ComparePerformance):    # number = 1    z = 10    def a(self):        return (x for x in range(self.z))    def b(self):        return tuple(x for x in range(self.z))    def c(self):        return [x for x in range(self.z)]    def d(self):        return list(x for x in range(self.z))if __name__ == &quot;__main__&quot;:    print(ExampleComparePerformance().compare_result())    print(ExampleComparePerformance().compare_performance())    print(ExampleComparePerformance().compare_performance())    print(ExampleComparePerformance().compare_performance())    print(ExampleComparePerformance().compare_performance())    print(ExampleComparePerformance().compare_performance())```# Run Parallel`class RunParallel` Menjalankan program secara bersamaan.Structure:- Semua methods akan dijalankan secara paralel kecuali method dengan nama yg diawali underscore `_`- Method untuk multithreading/multiprocessing harus memiliki 2 parameter, yaitu: `result: dict` dan `q: queue.Queue`. Parameter `result` digunaan untuk memberikan return value dari method, dan Parameter `q` digunakan untuk mengirim data antar proses.- Method untuk asyncio harus menggunakan keyword `async def`, dan untuk perpindahan antar kode menggunakan `await asyncio.sleep(0)`, dan keyword `return` untuk memberikan return value.- Return Value berupa dictionary dengan key adalah nama function, dan value adalah return value dari setiap fungsiNote:- `class RunParallel` didesain hanya untuk pemrosesan data saja.- Penggunaannya `class RunParallel` dengan cara membuat instance sub class beserta data yg akan diproses, kemudian panggil fungsi yg dipilih `run_asyncio / run_multi_threading / run_multi_processing`, kemudian dapatkan hasilnya.- `class RunParallel` tidak didesain untuk menyimpan data, karena setiap module terutama module `multiprocessing` tidak dapat mengakses data kelas dari proses yg berbeda.```pythonclass ExampleRunParallel(RunParallel):    z = &quot;ini&quot;    def __init__(self) -&gt; None:        self.pop = random.randint(0, 100)        def _set_property_here(self, v):        self.prop = v    def a(self, result: dict, q: queue.Queue):        result[&quot;z&quot;] = self.z        result[&quot;pop&quot;] = self.pop        result[&quot;a&quot;] = &quot;a&quot;        q.put(&quot;from a 1&quot;)        q.put(&quot;from a 2&quot;)    def b(self, result: dict, q: queue.Queue):        result[&quot;z&quot;] = self.z        result[&quot;pop&quot;] = self.pop        result[&quot;b&quot;] = &quot;b&quot;        result[&quot;q_get&quot;] = q.get()    def c(self, result: dict, q: queue.Queue):        result[&quot;z&quot;] = self.z        result[&quot;pop&quot;] = self.pop        result[&quot;c&quot;] = &quot;c&quot;        result[&quot;q_get&quot;] = q.get()    async def d(self):        print(&quot;hello&quot;)        await asyncio.sleep(0)        print(&quot;hello&quot;)        result = {}        result[&quot;z&quot;] = self.z        result[&quot;pop&quot;] = self.pop        result[&quot;d&quot;] = &quot;d&quot;        return result    async def e(self):        print(&quot;world&quot;)        await asyncio.sleep(0)        print(&quot;world&quot;)        result = {}        result[&quot;z&quot;] = self.z        result[&quot;pop&quot;] = self.pop        result[&quot;e&quot;] = &quot;e&quot;        return resultif __name__ == &quot;__main__&quot;:    print(ExampleRunParallel().run_asyncio())    print(ExampleRunParallel().run_multi_threading())    print(ExampleRunParallel().run_multi_processing())```# Collections`sets_ordered()` Hanya mengambil nilai unik dari suatu list```pythonarray = [2, 3, 12, 3, 3, 42, 42, 1, 43, 2, 42, 41, 4, 24, 32, 42, 3, 12, 32, 42, 42]print(sets_ordered(array))````chunck_array()` membagi array menjadi potongan dengan besaran yg diinginkan```pythonarray = [2, 3, 12, 3, 3, 42, 42, 1, 43, 2, 42, 41, 4, 24, 32, 42, 3, 12, 32, 42, 42]print(chunck_array(array, 5))````dict_first()` Mengambil nilai (key, value) pertama dari dictionary dalam bentuk tuple```pythond = {    &quot;key1&quot;: &quot;value1&quot;,    &quot;key2&quot;: &quot;value2&quot;,    &quot;key3&quot;: &quot;value3&quot;,}print(dict_first(d))````implode()` Simplify Python join functions```pythonarr = ['asd','dfs','weq','qweqw']print(implode('-', arr))```# Console`print_colorize()` print ke console dengan warna```pythonprint_colorize(&quot;Print some text&quot;)print_colorize(&quot;Print some text&quot;, color=colorama.Fore.RED)````@Log()` / `Log decorator` akan melakukan print ke console. Mempermudah pembuatan log karena tidak perlu mengubah fungsi yg sudah ada. Berguna untuk memberikan informasi proses program yg sedang berjalan.```python@log(&quot;Calling some function&quot;)def some_function():    ...    returnif __name__ == &quot;__main__&quot;:    some_function()````print_log` akan melakukan print ke console. Berguna untuk memberikan informasi proses program yg sedang berjalan.```pythonprint_log(&quot;Standalone Log&quot;)````input_char()` meminta masukan satu huruf tanpa menekan enter. Char tidak ditampilkan.```pyinput_char(&quot;Input Char without print : &quot;)````input_char()` meminta masukan satu huruf tanpa menekan enter. Char ditampilkan.```pyinput_char_echo(&quot;Input Char: &quot;)```# Datetime`datetime_now()` memudahkan dalam membuat tanggal dan waktu untuk suatu timezone```pythonprint(datetime_now(&quot;Asia/Jakarta&quot;))print(datetime_now(&quot;GMT&quot;))print(datetime_now(&quot;Etc/GMT+7&quot;))````datetime_from_string()` Parse iso_string menjadi datetime object dengan timezone UTC```pythonprint(datetime_from_string(&quot;2022-12-12 15:40:13&quot;).isoformat())print(datetime_from_string(&quot;2022-12-12 15:40:13&quot;, timezone=&quot;Asia/Jakarta&quot;).isoformat())```# File and Folder`file_put_contents()` membuat file kemudian menuliskan contents ke file. Apabila file memiliki contents, maka contents akan di overwrite.```pyfile_put_contents(&quot;ifile_test.txt&quot;, &quot;Contoh menulis content&quot;)````file_get_contents()` membaca contents file ke memory.```pyprint(file_get_contents(&quot;ifile_test.txt&quot;))````html_get_contents()` Mengambil content html dari url```pyprint(html_get_contents(&quot;https://arbadzukhron.deta.dev/&quot;))``````python# Using XPATHa = html_get_contents(&quot;https://www.google.com/&quot;, xpath=&quot;//a&quot;)for i in a:    print(i.text)    print(i.attrib.get('href'))# Using REGEXa = html_get_contents(&quot;https://www.google.com/&quot;, regex=r&quot;(&lt;a.[^&gt;]+&gt;(?:(?:\s+)?(.[^&lt;]+)(?:\s+)?)&lt;\/a&gt;)&quot;)for i in a:    print(i)# Using cssselecta = html_get_contents(&quot;https://www.google.com/&quot;, css_select=&quot;a&quot;)for i in a:    print(i.text)    print(i.attrib.get('href'))````get_filesize()` Mengambil informasi file size dalam bytes```pythonprint(get_filesize(__file__))````get_filemtime()` Mengambil informasi last modification time file dalam nano seconds```pythonprint(get_filemtime(__file__))````create_folder()` membuat folder secara recursive.```pycreate_folder(&quot;contoh_membuat_folder&quot;)create_folder(&quot;contoh/membuat/folder/recursive&quot;)create_folder(&quot;./contoh_membuat_folder/secara/recursive&quot;)````iscandir()` scan folder, subfolder, dan file```pyfor i in iscandir():    print(i)````scan_folder()` scan folder dan subfolder```pythonfor i in scan_folder(recursive=False):    print(i)````scan_file()` scan file dalam folder dan subfolder```pyfor i in scan_file():    print(i)```# Third Party`github_pull()` simple github pull```pythongithub_pull()````github_push()` simple github push dengan auto commit message```pygithub_push('Commit Message')```</longdescription>
</pkgmetadata>