<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `versions`[![License][License Badge]][License][![Version][Version Badge]][Package][![Downloads][Downloads Badge]][Package][![Discord][Discord Badge]][Discord][![Documentation][Documentation Badge]][Documentation][![Check][Check Badge]][Actions][![Test][Test Badge]][Actions][![Coverage][Coverage Badge]][Coverage]&gt; *Parsing, inspecting and specifying versions.*## Installing**Python 3.7 or above is required.**### pipInstalling the library with `pip` is quite simple:```console$ pip install versions```Alternatively, the library can be installed from source:```console$ git clone https://github.com/nekitdev/versions.git$ cd versions$ python -m pip install .```### poetryYou can add `versions` as a dependency with the following command:```console$ poetry add versions```Or by directly specifying it in the configuration like so:```toml[tool.poetry.dependencies]versions = &quot;^1.5.0&quot;```Alternatively, you can add it directly from the source:```toml[tool.poetry.dependencies.versions]git = &quot;https://github.com/nekitdev/versions.git&quot;```## Examples### Versions[`parse_version`][versions.functions.parse_version] is used to parse versions:```pythonfrom versions import parse_versionversion = parse_version(&quot;1.0.0-dev.1+build.1&quot;)print(version)  # 1.0.0-dev.1+build.1```### SegmentsAll version segments can be fetched with their respective names:```python&gt;&gt;&gt; print(version.release)1.0.0&gt;&gt;&gt; version.release.parts(1, 0, 0)&gt;&gt;&gt; print(version.dev)dev.1&gt;&gt;&gt; (version.dev.phase, version.dev.value)(&quot;dev&quot;, 1)&gt;&gt;&gt; print(version.local)build.1&gt;&gt;&gt; version.local.parts(&quot;build&quot;, 1)```### ComparisonVersions support total ordering:```python&gt;&gt;&gt; v1 = parse_version(&quot;1.0.0&quot;)&gt;&gt;&gt; v2 = parse_version(&quot;2.0.0&quot;)&gt;&gt;&gt; v1 == v2False&gt;&gt;&gt; v1 != v2True&gt;&gt;&gt; v1 &gt;= v2False&gt;&gt;&gt; v1 &lt;= v2True&gt;&gt;&gt; v1 &gt; v2False&gt;&gt;&gt; v1 &lt; v2True```### Specification`versions` also supports specifying version requirements and matching version against them.Since versions support total ordering, they can be checked using *version sets*(via [`parse_version_set`][versions.functions.parse_version_set]):```python&gt;&gt;&gt; from versions import parse_version, parse_version_set&gt;&gt;&gt; version_set = parse_version_set(&quot;^1.0.0&quot;)&gt;&gt;&gt; version_set&lt;VersionRange (&gt;= 1.0.0, &lt; 2.0.0)&gt;&gt;&gt;&gt; version = parse_version(&quot;1.3.0&quot;)&gt;&gt;&gt; version.matches(version_set)True&gt;&gt;&gt; another = parse_version(&quot;2.2.0&quot;)&gt;&gt;&gt; another.matches(version_set)False```Alternatively, one can use *specifiers*, which are similar to version sets, except they retainthe structure of specifications given (via [`parse_specifier`][versions.functions.parse_specifier]):```python&gt;&gt;&gt; from versions import parse_specifier, parse_version&gt;&gt;&gt; specifier = parse_specifier(&quot;^1.0.0&quot;)&gt;&gt;&gt; specifier&lt;SpecifierOne (^1.0.0)&gt;&gt;&gt;&gt; version = parse_version(&quot;1.3.0&quot;)&gt;&gt;&gt; version.matches(specifier)True&gt;&gt;&gt; another = parse_version(&quot;2.2.0&quot;)&gt;&gt;&gt; another.matches(specifier)False```## Versioned`versions` allows users to access versions of items that have the `__version__` attribute:```python&gt;&gt;&gt; from versions import get_version&gt;&gt;&gt; import versions&gt;&gt;&gt; get_version(versions)&lt;Version (1.5.0)&gt;```## DocumentationYou can find the documentation [here][Documentation].## SupportIf you need support with the library, you can send an [email][Email]or refer to the official [Discord server][Discord].## ChangelogYou can find the changelog [here][Changelog].## Security PolicyYou can find the Security Policy of `versions` [here][Security].## ContributingIf you are interested in contributing to `versions`, make sure to take a look at the[Contributing Guide][Contributing Guide], as well as the [Code of Conduct][Code of Conduct].## License`versions` is licensed under the MIT License terms. See [License][License] for details.[Email]: mailto:support@nekit.dev[Discord]: https://nekit.dev/discord[Actions]: https://github.com/nekitdev/versions/actions[Changelog]: https://github.com/nekitdev/versions/blob/main/CHANGELOG.md[Code of Conduct]: https://github.com/nekitdev/versions/blob/main/CODE_OF_CONDUCT.md[Contributing Guide]: https://github.com/nekitdev/versions/blob/main/CONTRIBUTING.md[Security]: https://github.com/nekitdev/versions/blob/main/SECURITY.md[License]: https://github.com/nekitdev/versions/blob/main/LICENSE[Package]: https://pypi.org/project/versions[Coverage]: https://codecov.io/gh/nekitdev/versions[Documentation]: https://nekitdev.github.io/versions[Discord Badge]: https://img.shields.io/badge/chat-discord-5865f2[License Badge]: https://img.shields.io/pypi/l/versions[Version Badge]: https://img.shields.io/pypi/v/versions[Downloads Badge]: https://img.shields.io/pypi/dm/versions[Documentation Badge]: https://github.com/nekitdev/versions/workflows/docs/badge.svg[Check Badge]: https://github.com/nekitdev/versions/workflows/check/badge.svg[Test Badge]: https://github.com/nekitdev/versions/workflows/test/badge.svg[Coverage Badge]: https://codecov.io/gh/nekitdev/versions/branch/main/graph/badge.svg[versions.functions.parse_specifier]: https://nekitdev.github.io/versions/reference/functions#versions.functions.parse_specifier[versions.functions.parse_version]: https://nekitdev.github.io/versions/reference/functions#versions.functions.parse_version[versions.functions.parse_version_set]: https://nekitdev.github.io/versions/reference/functions#versions.functions.parse_version_set</longdescription>
</pkgmetadata>