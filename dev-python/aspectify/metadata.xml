<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>aspectify================&lt;!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --&gt;Aspect Oriented Programming is a programming paradigm that allows theuser to separate some cross-cutting content from the main code, such asthe logging or a database connection.As it may be known, other programming languages has some functionallity(implemented or plugged in) to use this paradigm as an additionalabstract layer to the core application.[AspectJ](https://www.eclipse.org/aspectj/) (used in Java), can soundfamiliar to the reader.In order to bring this amazing and powerful functionality to Python(which, in addition, will allow us to add it dynamically instead ofusing a weaver –as it is done in Java–), we have defined `Aspectify`, aPython library to manage AOP.## Background conceptsBefore introducing the library, it is important to define some conceptsused in AOP. Those are: -[`Aspect`](https://ruescog.github.io/aspectify/aop.html#aspect)(*what*): a cross-cutting concept. In fact, an[`Aspect`](https://ruescog.github.io/aspectify/aop.html#aspect) willgroup some functionalies. These, which will modify the natural behaviourof a method, are called `Advice`s. - `PointCut` (*when*): a fragment ofcode where the[`Aspect`](https://ruescog.github.io/aspectify/aop.html#aspect) isdefined. Can be multiple `PointCut`s for each[`Aspect`](https://ruescog.github.io/aspectify/aop.html#aspect) (indeed,it will). - `Advice` (*when and what to do*): The code fragment toexecute when the `PointCut` occurs and the moment when the new behaviuormust occur. Originally, only three moments were defined (`before`,`around` –instead of– and `after`), but nowadays new moments aredefined, such as “after throwing an exception” (`after_throwing`) or“after NOT throwing an exception” (`after_returning`).## InstallationIn order to install the library, it is only needed to execute the pypicomand that follows:``` shpip install aspectify```&gt; **ADVICE**: You should use a virtual environment to install the&gt; packages associated with your proyect.## Why do we need AspectifyOnce the background is defined and the library is installed, we canstart to create the AOP layer to our projects.### The core projectIn order to use the library, we need a project. For example, we will usethe `random` library for Python.``` pythonfrom random import Random```Now, we can use it to generate some integers.``` pythonr = Random()r.randint(5, 10)```    9As you can see in its documentation, `randint` (called with parameters`a` and `b`) can generate the `b` value itself (it is a closed range\[5, 10\]).If we want to change this behaviour to the normal random functionsbehaviour (the range is closed-opened \[5, 10)), you will need toredefine it. Furthermore, if other functions or library use this method,they will not use yours.How can we solve it? Using AOP.During this introduction, we have seen the background concepts and howto install the `Aspectify` library. In the next section we will explainhow to use it with a simple example.</longdescription>
</pkgmetadata>