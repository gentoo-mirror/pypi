<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Estruttura==========.. image:: https://github.com/brunonicko/estruttura/workflows/MyPy/badge.svg   :target: https://github.com/brunonicko/estruttura/actions?query=workflow%3AMyPy.. image:: https://github.com/brunonicko/estruttura/workflows/Lint/badge.svg   :target: https://github.com/brunonicko/estruttura/actions?query=workflow%3ALint.. image:: https://github.com/brunonicko/estruttura/workflows/Tests/badge.svg   :target: https://github.com/brunonicko/estruttura/actions?query=workflow%3ATests.. image:: https://readthedocs.org/projects/estruttura/badge/?version=stable   :target: https://estruttura.readthedocs.io/en/stable/.. image:: https://img.shields.io/github/license/brunonicko/estruttura?color=light-green   :target: https://github.com/brunonicko/estruttura/blob/main/LICENSE.. image:: https://static.pepy.tech/personalized-badge/estruttura?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=brightgreen&amp;left_text=Downloads   :target: https://pepy.tech/project/estruttura.. image:: https://img.shields.io/pypi/pyversions/estruttura?color=light-green&amp;style=flat   :target: https://pypi.org/project/estruttura/Overview--------Abstract data structures.Motivation----------`estruttura` was born out of the need for a similar interface between the `datta &lt;https://github.com/brunonicko/datta&gt;`_and `objetto &lt;https://github.com/brunonicko/objetto&gt;`_ packages.Relationship------------`estruttura` provides a `Relationship` class that contains information about the values stored in the `Structures`_,such as typing (with support for runtime type checking), serialization, validation, conversion, etc... code:: python    &gt;&gt;&gt; from six import string_types    &gt;&gt;&gt; from estruttura import Relationship, exceptions    &gt;&gt;&gt; def converter(value):    ...     if isinstance(value, string_types) and &quot;.&quot; in value:    ...         return float(value)    ...     elif not isinstance(value, float):    ...         return int(value)    ...    &gt;&gt;&gt; def validator(value):    ...     if value &gt; 10:    ...         raise exceptions.ValidationError(value)    ...    &gt;&gt;&gt; relationship = Relationship(types=(int, float), converter=converter, validator=validator)    &gt;&gt;&gt; relationship.process_value(&quot;3.3&quot;)    3.3Structures----------`estruttura` offers all the class combinations of the concepts described below.Private Structure^^^^^^^^^^^^^^^^^Holds data internally and only allow for changes privately.User Structure^^^^^^^^^^^^^^Allows for changing of the data by external clients (public).Immutable Structure^^^^^^^^^^^^^^^^^^^Only allows data changes through copying.Immutable structures are hashable... code:: python    &gt;&gt;&gt; from estruttura.examples import ImmutableList    &gt;&gt;&gt; l_a = ImmutableList()    &gt;&gt;&gt; l_b = l_a.extend(range(3))    &gt;&gt;&gt; list(l_b) == [0, 1, 2]    TrueMutable Structure^^^^^^^^^^^^^^^^^Allows in-place data changes.Mutable structures are not hashable... code:: python    &gt;&gt;&gt; from estruttura.examples import MutableList    &gt;&gt;&gt; l = MutableList()    &gt;&gt;&gt; l.extend(range(3))    &gt;&gt;&gt; list(l) == [0, 1, 2]    TrueDict Structure^^^^^^^^^^^^^^Dictionary-like data structure class... code:: python    &gt;&gt;&gt; from estruttura import Relationship    &gt;&gt;&gt; from estruttura.examples import MutableDict    &gt;&gt;&gt; class StrIntDict(MutableDict):    ...     relationship = Relationship(converter=str)    ...     value_relationship = Relationship(converter=int)    ...    &gt;&gt;&gt; StrIntDict({1: &quot;1&quot;})    StrIntDict({'1': 1})List Structure^^^^^^^^^^^^^^List-like data structure class... code:: python    &gt;&gt;&gt; from estruttura import Relationship    &gt;&gt;&gt; from estruttura.examples import MutableList    &gt;&gt;&gt; class IntList(MutableList):    ...     relationship = Relationship(converter=int)    ...    &gt;&gt;&gt; IntList([&quot;1&quot;, 1, 1.0])    IntList([1, 1, 1])Set Structure^^^^^^^^^^^^^Set-like data structure class... code:: python    &gt;&gt;&gt; from estruttura import Relationship    &gt;&gt;&gt; from estruttura.examples import MutableSet    &gt;&gt;&gt; class IntSet(MutableSet):    ...     relationship = Relationship(converter=int)    ...    &gt;&gt;&gt; IntSet({&quot;1&quot;, 1, 1.0})    IntSet({1})Structure^^^^^^^^^Dataclass-like structure class that has a schema defined by attributes... code:: python    &gt;&gt;&gt; import math    &gt;&gt;&gt; from estruttura import Attribute, Relationship, getter    &gt;&gt;&gt; from estruttura.examples import ImmutableClass    &gt;&gt;&gt; class Point(ImmutableClass):    ...     x = Attribute()    ...     y = Attribute()    ...     d = Attribute(serializable=True, repr=True)    ...     @getter(d, dependencies=(x, y))    ...     def _(self):    ...         return math.sqrt(self.x**2 + self.y**2)    ...    &gt;&gt;&gt; Point(3, 4)    Point(3, 4, &lt;d=5.0&gt;)    &gt;&gt;&gt; Point(3, 4).serialize() == {&quot;x&quot;: 3, &quot;y&quot;: 4, &quot;d&quot;: 5.0}    True    &gt;&gt;&gt; Point.deserialize({&quot;x&quot;: 3, &quot;y&quot;: 4})    Point(3, 4, &lt;d=5.0&gt;)</longdescription>
</pkgmetadata>