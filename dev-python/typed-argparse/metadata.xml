<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/typed-argparse.svg)](https://badge.fury.io/py/typed-argparse)[![Build Status](https://github.com/typed-argparse/typed-argparse/workflows/ci/badge.svg)](https://github.com/typed-argparse/typed-argparse/actions?query=workflow%3Aci)[![codecov](https://codecov.io/gh/typed-argparse/typed-argparse/branch/master/graph/badge.svg?token=6I98R2661Z)](https://codecov.io/gh/typed-argparse/typed-argparse)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![mypy](https://img.shields.io/badge/mypy-strict-blue)](http://mypy-lang.org/)[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](LICENSE)&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/typed-argparse/typed-argparse/master/logo.svg&quot; width=&quot;900&quot;&gt;&lt;br&gt;ðŸ’¡ write type-safe and elegant CLIs with a clear separation of concerns.&lt;br&gt;&lt;br&gt;## Features- Argument parsing based on type annotation (including runtime validation).- Support for many common types.- Clear separation of concern between argument parsing and business logic.- Support for super-low-latency shell auto-completions.- Great for [writing sub-command CLIs](https://typed-argparse.github.io/typed-argparse/high_level_api/#sub-commands).- Very lightweight.- No dependencies.- Fully typed itself, no extra type stubs required.- Offers both a [high-level](https://typed-argparse.github.io/typed-argparse/high_level_api) and a [low-level](https://typed-argparse.github.io/typed-argparse/low_level_api) API.  The high-level API generally requires less code to write, is fully based on type annotations, and is the preferred way for writing new CLIs.  The low-level API is mainly a low-effort migration path for incorporating type-safety into existing CLIs based on `argparse`.## Install```console$ pip install typed-argparse```The only requirement is a modern Python (3.8+).## Basic Usage```pythonimport typed_argparse as tap# 1. Argument definitionclass Args(tap.TypedArgs):    my_arg: str = tap.arg(help=&quot;some help&quot;)    number_a: int = tap.arg(default=42, help=&quot;some help&quot;)    number_b: Optional[int] = tap.arg(help=&quot;some help&quot;)    verbose: bool = tap.arg(help=&quot;some help&quot;)    names: List[str] = tap.arg(help=&quot;some help&quot;)# 2. Business logicdef runner(args: Args):    print(f&quot;Running my app with args:\n{args}&quot;)# 3. Bind argument definition + business logic &amp; rundef main() -&gt; None:    tap.Parser(Args).bind(runner).run()```## DocumentationSee [full documentation](https://typed-argparse.github.io/typed-argparse/).## ChangesSee [change log](CHANGES.md).## LicenseThis project is licensed under the terms of the [MIT license](LICENSE).</longdescription>
</pkgmetadata>