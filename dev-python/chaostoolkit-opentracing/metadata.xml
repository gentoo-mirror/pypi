<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Chaos Toolkit Extension for Open Tracing[![Release](https://github.com/chaostoolkit-incubator/chaostoolkit-opentracing/actions/workflows/release.yaml/badge.svg)](https://github.com/chaostoolkit-incubator/chaostoolkit-opentracing/actions/workflows/release.yaml)[![Python versions](https://img.shields.io/pypi/pyversions/chaostoolkit-opentracing.svg)](https://www.python.org/)This project is an extension for the Chaos Toolkit for [OpenTracing][] and[OpenTelemetry][].[opentracing]: https://opentracing.io/[OpenTelemetry]: https://opentelemetry.io/Here is an example of what it could look like with the Jaeger backend.![OpenTracing](https://github.com/chaostoolkit-incubator/chaostoolkit-opentracing/raw/master/example.png &quot;Open Tracing with Jaeger&quot;)## InstallThis package requires Python 3.6+To be used from your experiment, this package must be installed in the Pythonenvironment where [chaostoolkit][] already lives.[chaostoolkit]: https://github.com/chaostoolkit/chaostoolkit```$ pip install -U chaostoolkit-opentracing```## UsageThis extension provides two controls to trace your Chaos Toolkit experiment:* Open Telemetry* Open Tracing (legacy)The only supported one is Open Telemetry as the Open Tracing is no longermaintained.### Open TelemetryTo enable Open Telemetry tracing, simply add the following control toyour experiment:```json{    &quot;controls&quot;: [      {          &quot;name&quot;: &quot;opentelemetry&quot;,          &quot;provider&quot;: {              &quot;type&quot;: &quot;python&quot;,              &quot;module&quot;: &quot;chaostracing.oltp&quot;          }      }    ]}```We suggest you make it the first extension so it runs before and after allother extensions.To configure the various Open Telemetry settings, please use the standardOLTP environment variables:* the [sdk variables](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/sdk-environment-variables.md)* the [exporter variables](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md)Mostly, you should set:* `OTEL_EXPORTER_OTLP_TRACES_ENDPOINT` to point to your collector (for instance: http://localhost:4318/v1/traces)* `OTEL_EXPORTER_OTLP_TRACES_HEADERS` to set any headers to pass to the exporterNOTE: This extension supports OLTP over HTTP but not gRPC.You can also instrument a variety of frameworks like this:```json{    &quot;controls&quot;: [      {          &quot;name&quot;: &quot;opentelemetry&quot;,          &quot;provider&quot;: {              &quot;type&quot;: &quot;python&quot;,              &quot;module&quot;: &quot;chaostracing.oltp&quot;,              &quot;arguments&quot;: {                &quot;trace_httpx&quot;: true,                &quot;trace_requests&quot;: true,                &quot;trace_botocore&quot;: true              }          }      }    ]}```This will enable the according instrumentation automatically.#### Google Cloud Platform TracesIf you intend on using Google Cloud Platform to export your traces to, pleaseconsider also installing the followings:```$ pip install opentelemetry-exporter-gcp-trace \    opentelemetry-resourcedetector-gcp \    opentelemetry-propagator-gcp```To authenticate the client, you can either:* set `GOOGLE_APPLICATION_CREDENTIALS` environment variable* pass the `otel_gcp_service_account` and `otel_gcp_project_id` variables  in the configuration block* set the `CHAOSTOOLKIT_OTEL_GCP_SA` and `CHAOSTOOLKIT_OTEL_GCP_PROJECT_ID` environment variablesIn all cases, point to a service account which hasthe `roles/cloudtrace.agent` role as nthe name of the target project.### Legacy Open TracingThis extensions supports the [Open Tracing](https://opentracing.io/) exportformat but highly recommends you to switch to Open Telemetry instead. There willbe no support for Open Tracing support.NOTE: Please see at the bottom of the page all the supported clients andexporters this control supports.#### Declare within the experimentTo use this control, you can declare it on a per experiment basis like this:```json{    &quot;configuration&quot;: {        &quot;tracing_provider&quot;: &quot;jaeger&quot;,        &quot;tracing_host&quot;: &quot;127.0.0.1&quot;,        &quot;tracing_port&quot;: 6831,        &quot;tracing_propagation&quot;: &quot;b3&quot;    },    &quot;controls&quot;: [        {            &quot;name&quot;: &quot;opentracing&quot;,            &quot;provider&quot;: {                &quot;type&quot;: &quot;python&quot;,                &quot;module&quot;: &quot;chaostracing.control&quot;            }        }    ]}```This will automatically create a [Jaeger][] client to emit traces onto theaddress `127.0.0.1:6831` (over UDP).#### Declare within the settingsYou may also declare the control to be applied to all experiments by declaringthe control from within the [Chaos Toolkit settings file][ctksettings]. In thatcase, you do not need to set the configuration or the controls at theexperiment level and the control will be applied to every experiments you run.```yamlcontrols:  opentracing:    provider:      type: python      module: chaostracing.control      arguments:        provider: jaeger        host: 127.0.0.1        port: 6831        propagation: b3```[ctksettings]: https://docs.chaostoolkit.org/reference/usage/cli/#configure-the-chaos-toolkit[jaeger]: https://www.jaegertracing.io/#### Send traces from other extensionsYou may also access the tracer from other extensions as follows.For instance, assuming you have an extension that makes a HTTP call you wantto trace specifically, you could do this from your extension's code:```pythonfrom chaoslib import Configuration, Secretsimport requestsimport opentracingdef some_function(configuration: Configuration, secrets: Secrets):    tracer = opentracing.global_tracer()    scope = tracer.scope_manager.active    parent = scope.span    with tracer.start_span(&quot;call-service1&quot;, child_of=parent) as span:        span.set_tag('http.method','GET')        span.set_tag('http.url', url)        span.set_tag('span.kind', 'client')        span.tracer.inject(span, 'http_headers', headers)        r = requests.get(url, headers=headers)        span.set_tag('http.status_code', r.status_code)```Because the opentracing exposes a noop tracer when non has been initialized,it should be safe to have that code in your extensions without having todetermine if the extension has been enabled in the experiment.Please note that, Open Tracing scope cannot be shared across threads(while spans can). So, when running this in a background activity, the tracerwill not actually be set to the one that was initialized.#### Open Tracing Provider Support##### Jaeger tracerThe Jager tracer relies on the OpenTracing protocol which has now be supersededby OpenTelemetry. However, we still provide support for it.To install the necessary dependencies for the Jaeger tracer, please run:```$ pip install -U jaeger-client~=4.8```Use the following configuration:```json{    &quot;configuration&quot;: {        &quot;tracing_provider&quot;: &quot;jaeger&quot;,        &quot;tracing_host&quot;: &quot;127.0.0.1&quot;,        &quot;tracing_port&quot;: 6831,        &quot;tracing_propagation&quot;: &quot;b3&quot;    },    &quot;controls&quot;: [        {            &quot;name&quot;: &quot;opentracing&quot;,            &quot;provider&quot;: {                &quot;type&quot;: &quot;python&quot;,                &quot;module&quot;: &quot;chaostracing.control&quot;            }        }    ]}```## TestTo run the tests for the project execute the following:```$ pytest```## ContributeIf you wish to contribute more functions to this package, you are more thanwelcome to do so. Please, fork this project, make your changes following theusual [PEP 8][pep8] code style, sprinkling with tests and submit a PR forreview.[pep8]: https://pycodestyle.readthedocs.io/en/latest/The Chaos Toolkit projects require all contributors must sign a[Developer Certificate of Origin][dco] on each commit they would like to mergeinto the master branch of the repository. Please, make sure you can abide bythe rules of the DCO before submitting a PR.[dco]: https://github.com/probot/dco#how-it-works</longdescription>
</pkgmetadata>