<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Disease NormalizationServices and guidelines for normalizing disease terms## Developer instructionsFollowing are sections include instructions specifically for developers.### InstallationFor a development install, we recommend using Pipenv. See the[pipenv docs](https://pipenv-fork.readthedocs.io/en/latest/#install-pipenv-today)for direction on installing pipenv in your compute environment.Once installed, from the project root dir, just run:```commandlinepipenv sync```### Deploying DynamoDB LocallyWe use Amazon DynamoDB for our database. To deploy locally, follow [these instructions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.DownloadingAndRunning.html).### Init coding style testsCode style is managed by [flake8](https://github.com/PyCQA/flake8) and checked prior to commit.We use [pre-commit](https://pre-commit.com/#usage) to run conformance tests.This ensures:* Check code style* Check for added large files* Detect AWS Credentials* Detect Private KeyBefore first commit run:```commandlinepre-commit install```### Running unit testsRunning unit tests is as easy as pytest.```commandlinepipenv run pytest```### Updating the disease normalization databaseBefore you use the CLI to update the database, run the following in a separate terminal to start DynamoDB on `port 8000`:```java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb```To change the port, simply add `-port value`.#### Update source(s)The sources we currently use are: OncoTree, OMIM, Disease Ontology, and Mondo.The application will automatically retrieve input data for all sources but OMIM, for which a source file must be manually acquired and placed in the `disease/data/omim` folder within the library root. In order to access OMIM data, users must submit a request [here](https://www.omim.org/downloads). Once approved, the relevant OMIM file (`mimTitles.txt`) should be renamed according to the convention `omim_YYYYMMDD.tsv`, where `YYYYMMDD` indicates the date that the file was generated, and placed in the appropriate location.To update one source, simply set `--normalizer` to the source you wish to update. Accepted source names are `DO` (for Disease Ontology), `Mondo`, `OncoTree`, and `OMIM`.From the project root, run the following to update the Mondo source:```commandlinepython3 -m disease.cli --normalizer=&quot;Mondo&quot;```To update multiple sources, you can use the `normalizer` flag with the source names separated by spaces.```commandlinepython3 -m disease.cli --normalizer=&quot;Mondo OMIM DO&quot;```#### Update all sourcesTo update all sources, use the `--update_all` flag.From the project root, run the following to update all sources:```commandlinepython3 -m disease.cli --update_all```### Create Merged Concept GroupsThe `normalize` endpoint relies on merged concept groups.To create merged concept groups, use the `--update_merged` flag with the `--update_all` flag.```commandlinepython3 -m disease.cli --update_all --update_merged```#### Specifying the database URL endpointThe default URL endpoint is `http://localhost:8000`.There are two different ways to specify the database URL endpoint.The first way is to set the `--db_url` flag to the URL endpoint.```commandlinepython3 -m disease.cli --update_all --db_url=&quot;http://localhost:8001&quot;```The second way is to set the `DISEASE_NORM_DB_URL` to the URL endpoint.```commandlineexport DISEASE_NORM_DB_URL=&quot;http://localhost:8001&quot;python3 -m disease.cli --update_all```### Starting the disease normalization serviceFrom the project root, run the following:```commandlineuvicorn disease.main:app --reload```Next, view the OpenAPI docs on your local machine:http://127.0.0.1:8000/disease</longdescription>
</pkgmetadata>