<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Pipenv-Setup[![travis-badge](https://travis-ci.org/Madoshakalaka/pipenv-setup.svg?branch=master)](https://travis-ci.org/Madoshakalaka/pipenv-setup)[![ci](https://github.com/Madoshakalaka/pipenv-setup/actions/workflows/ci.yml/badge.svg)](https://github.com/Madoshakalaka/pipenv-setup/actions/workflows/ci.yml)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/pipenv-setup.svg)](https://pypi.python.org/pypi/pipenv-setup/)[![codecov](https://codecov.io/gh/Madoshakalaka/pipenv-setup/branch/master/graph/badge.svg)](https://codecov.io/gh/Madoshakalaka/pipenv-setup)[![PyPI version](https://badge.fury.io/py/pipenv-setup.svg)](https://badge.fury.io/py/pipenv-setup)[![Very popular](https://img.shields.io/pypi/dm/pipenv-setup)](https://pypistats.org/packages/pipenv-setup)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)A beautiful python package development tool: sync dependencies in `Pipfile` or `Pipfile.lock` to `setup.py`.Never need again to change dependencies manually in `setup.py`, and enjoy the samedependency locking or semantic versioning.Or just check whether `setup.py` and `Pipfile` are consistent and sync dependency whennecessary.## InstallationCreate a command line entry point `pipenv-setup`, and add `pipenv-setup` as a `dev`package in `Pipfile`:```bashpipenv install --dev pipenv-setup```Additionally, starting with the[`3.2.0`](https://github.com/Madoshakalaka/pipenv-setup/releases/tag/v3.2.0) release,[`black`](https://github.com/psf/black) and [`autopep8`](https://github.com/hhatto/autopep8) can beincluded as package extras:```bashpipenv install --dev &quot;pipenv-setup[black]&quot;  # alternatively: pipenv-setup[autopep8]```### Note`pipenv-setup&lt;3.2` includes pinned versions of `black` and `autopep8` as dependencies. However, mostprojects manage `black` requirements independently from `pipenv-setup`; accordingly, `black` is nolonger a requirement of `pipenv-setup` after `3.2.0` (instead, include it as an extra as shownabove).## Features### Beautiful pipenv flavored help`$ pipenv-setup`![help](https://raw.githubusercontent.com/Madoshakalaka/pipenv-setup/master/readme_assets/help.PNG)### Sync to `setup.py`- supports assorted package configuration. You can have a pipfile as ugly as you want:  ```Pipfile  [package]  requests = { extras = ['socks'] }  records = '&gt;0.5.0'  django = { git = 'https://github.com/django/django.git', ref = '1.11.4', editable = true }  &quot;e682b37&quot; = {file = &quot;https://github.com/divio/django-cms/archive/release/3.4.x.zip&quot;}  &quot;e1839a8&quot; = {path = &quot;.&quot;, editable = true}  pywinusb = { version = &quot;*&quot;, os_name = &quot;=='nt'&quot;, index=&quot;pypi&quot;}  ```  `pipenv-setup` will still figure things out:  ```bash  $ pipenv-setup sync  package e1839a8 is local, omitted in setup.py  setup.py successfully updated  23 packages from Pipfile.lock synced to setup.py  ```  And things will be where they should be:  ```python  # setup.py  setup(...,      install_requires=[          &quot;certifi==2017.7.27.1&quot;,          &quot;chardet==3.0.4&quot;,          &quot;pywinusb==0.4.2; os_name == 'nt'&quot;,          ...,          &quot;xlrd==1.1.0&quot;,          &quot;xlwt==1.3.0&quot;,      ],      dependency_links=[          &quot;git+https://github.com/django/django.git@1.11.4#egg=django&quot;,          &quot;https://github.com/divio/django-cms/archive/release/3.4.x.zip&quot;,      ],  )  ```- provide `--dev` flag to sync development packages with `extras_require`:  ```bash  $ pipenv-setup sync --dev  setup.py successfully updated  1 default packages from Pipfile.lock synced to setup.py  1 dev packages from Pipfile.lock synced to setup.py  ```  ```python  # produced setup.py  setup(...,      extras_require={&quot;dev&quot;: [&quot;pytest==1.1.3&quot;,]},      install_requires=[&quot;xml-subsetter==0.0.1&quot;],  )  ```- produce beautiful [Blackened](https://github.com/psf/black) `setup.py` file- [Template](https://github.com/pypa/sampleproject/blob/master/setup.py) generation with  filled dependencies in the absence of a setup file.  ```bash  $ pipenv-setup sync  setup.py not found under current directory  Creating boilerplate setup.py...  setup.py was successfully generated  23 packages synced from Pipfile.lock to setup.py  Please edit the required fields in the generated file  ```  &gt; Note: by default, `pipenv-setup` syncs lockfile instead of pipfile#### Sync `Pipfile` vs. `Pipfile.lock`Provide `--pipfile` flag to sync `Pipfile` instead of `Pipfile.lock`.`pipenv-setup`will perform a liquid sync using semantic versioning taken from `Pipfile` (instead ofusing frozen pinned versions from `Pipfile.lock`):```bash$ pipenv-setup sync --pipfilesetup.py was successfully updated23 packages synced from Pipfile to setup.py```### Checks Onlyrun `$ pipenv-setup check`- checks four items  - local package in default pipfile packages  - Package version requirements in `install_requires` in setup.py that potentially violates Pipfile  - Package version requirements in `dependency_links` in setup.py that differs from Pipfile  - Default package in pipfile missing in `install_requires` or `dependency_links` in setup.py- exits with non-zero code when conflict found (can be used in travis-ci)- here is a somewhat extreme example:  ```bash  $ pipenv-setup check  package 'numpy' has version string: &gt;=1.2 in setup.py, which potentially violates &gt;=1.5 in pipfile  package 'pywinusb' has version string: ==0.4.2 in setup.py, which is disjoint from ~=0.3.0 in pipfile  package 'records' has version string: &gt;=0.4.2,&lt;0.5 in setup.py, which is disjoint from &gt;0.5.0 in pipfile  package 'django' has branch/version 1.11.5 in dependency_links, which is different than 1.11.4 listed in pipfile  package 'requests' in pipfile but not in install_requires  package 'e682b37' has a url in pipfile but not in dependency_links  (exits with 1)  ```- provide `--ignore-local` flag to allow local packages in pipfile  ```bash  $ pipenv-setup check  local package found in default dependency: e1839a8.  Do you mean to make it dev dependency  (exits with 1)  ```  ```bash  $ pipenv-setup check --ignore-local  No version conflict or missing packages/dependencies found in setup.py!  (exits with 0)  ```- provide `--strict` flag to only pass identical version requirements  By default `pipenv-setup check` passes when the version `setup.py` specifies is  &quot;compatible&quot; with `Pipfile`, i.e. is a subset of it. For example, a Pipfile  specifying `django~=1.1` with `setup.py` requiring `django==1.2` is such a case.  Provide `--strict` to allow only identical requirements; _i.e._ for `Pipfile`'s  `django~=1.1`, `setup.py` must require `django&gt;=1.1,&lt;2.0`  Example output:  ```bash  $ pipenv-setup check --strict  package 'pywinusb' has version string: ==0.4.2 in setup.py, which specifies a subset of * in pipfile  package 'django' has version string: &gt;=0.5 in setup.py, which is disjoint from ~=0.3.0 in pipfile  package 'records' has version string: ==0.5.2 in setup.py, which specifies a subset of &gt;0.5.0 in pipfile  package 'requests' has version string: ==2.18.4 in setup.py, which specifies a subset of * in pipfile  (exits with 1)  ```- provide `--lockfile` flag to check `setup.py` against `Pipfile.lock` instead of `Pipfile`  By default, `pipenv-setup check` compares the dependencies from `setup.py` against  the dependencies listed in `Pipfile`. This works well for most cases, but there  are some exceptions that break this strategy, including (but not necessarily limited to):  - VCS dependencies with a mutable `ref` (e.g. - git branch name instead of a tag or commit sha)    - Because these resolve to an immutable pointer (e.g. - commit sha) in `setup.py`, the      dependency will no longer match between `setup.py` and `Pipfile`. However, `Pipfile.lock`      will contain the same resolved pointer as `setup.py`.### Pre-commit integrationYou can run `pipenv-setup` automatically using a [pre-commit](https://pre-commit.com) hook. To getstarted, add this configuration to your `.pre-commit-config.yaml`:```yaml- repo: https://github.com/Madoshakalaka/pipenv-setup  rev: &quot;3.2.0&quot; # pick a git hash / tag to point to  hooks:    - id: pipenv-setup```This configuration will will execute `pipenv-setup sync --pipfile` on changes to `Pipfile`,`Pipfile.lock`, and `setup.py`.You can also customize the default args (`&quot;--pipfile&quot;`). For example, to synchronize `--dev` extras:```yaml- repo: # ...  hooks:    - id: pipenv-setup      args: [--dev, --pipfile]```If using the hook during CI (or in another environment separate from a `black` / `autopep8`installation), you can include the appropriate auto-formatter with the hook:```yaml- repo: # ...  hooks:    - id: pipenv-setup      additional_dependencies: [&quot;.[black]&quot;]```## ContributingIf you'd like to contribute to `pipenv-setup`, see [Contribution Guide](CONTRIBUTING.md)</longdescription>
</pkgmetadata>