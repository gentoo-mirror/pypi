<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Blaster[![PR-Verification](https://github.com/ryankwilliams/blaster/actions/workflows/pr_verification.yml/badge.svg)](https://github.com/ryankwilliams/blaster/actions/workflows/pr_verification.yml)[![PyPI version](https://img.shields.io/pypi/v/blaster.svg)](https://pypi.python.org/pypi/blaster)Blaster is a library that provides the ability to blast off a list of tasksand call each of their given methods concurrently. Blaster uses Python'sbuilt-in multiprocessing library to run the list of tasks.## InstallationBlaster can be easily installed with a one line command. It is available on[pypi][1]. It is recommended (as best practice) to create a virtualenvironment and install blaster. Please see the commands below to installblaster.```# Create a python virtual environmentpython3 -m venv venv# Activate the virtual environmentsource venv/bin/activate# Install blaster(venv) pip install blaster```## ExamplesAt the root of blaster project, you will see a examples folder. Within thisfolder you will find simple examples on how you can use blaster toefficiently run many tasks.## OutputWhen blaster calls its blastoff method, on completion. It will return backto you a list of task results. Within each task dictionary it will have theoriginal task data passed in along with a couple new keys. A status key whichis an integer (0 or 1) to determine pass or fail. If a task failed, it wouldhave a traceback key with the exception raised for helpful troubleshooting.## Terminology### TaskA task is a python dictionary that defines the task to be blasted off. A taskmust contain three keys **name**, **task** and **methods**. The name keyjust tells blaster what the task name is. The task key is a Python classreference. Finally the methods key is a list of methods to be run for thegiven task. You can then define any other key:value pairs that will be passedto the task given when an object is created for that class.Below is an example task for building a contemporary house. You will seethe task key has a value of the House class which contains all the methodsdefined. Blaster will create a house object (passing any extra data in thiscase **style**) and then call the methods defined.```python[    {        'name': 'House #1',        'task': House,        'methods': [            'foundation',            'frame',            'roof',            'furnish',            'enjoy'        ],        'style': 'contemporary'    }]```You also have the ability to set a timeout for each task. If the timeout isreached, the task will be exited.```python[    {        'name': 'House #1',        'task': House,        'methods': [            'foundation',            'frame',            'roof',            'furnish',            'enjoy'        ],        'style': 'contemporary',        'timeout': 10    }]```The nice feature with blaster is you can have multiple tasks but each onecan call various methods within that task class. They do not all need to callthe same methods! See the example below:```python[    {        'name': 'House #1',        'task': House,        'methods': [            'foundation',            'frame',            'roof',            'furnish',            'enjoy'        ],        'style': 'contemporary'    },    {        'name': 'House #2',        'task': House,        'methods': [            'foundation',            'frame',            'roof'        ],        'style': 'cape'    }]```## IssuesFor any issues that you may find while using blaster library. Please open anew issue or you can open pull request.[1]: https://pypi.python.org/pypi/blaster</longdescription>
</pkgmetadata>