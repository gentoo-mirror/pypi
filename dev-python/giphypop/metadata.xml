<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>giphypop========``giphypop`` is a wrapper around the Giphy_ api. It aims to provide a moreintuitive, pythonic way for interacting with the Giphy_ api... image:: https://secure.travis-ci.org/shaunduncan/giphypop.png?branch=master   :target: https://travis-ci.org/shaunduncan/giphypopRequirements, Installing, and Compatibility-------------------------------------------The only requirement, included in ``requirements.txt`` is for requests_. If youare using pip, you can install ``giphypop``:.. code-block:: bash    $ pip install requests giphypopAlternatively:.. code-block:: bash    $ pip install requests    $ pip install -e git+https://github.com/shaunduncan/giphypop.git#egg=giphypopThen you should be off and running. ``giphypop`` has been tested against pythonversions 2.6, 2.7, 3.2 and 3.3.Getting Started---------------Using ``giphypop`` is straightforward and aims provide interaction withthe api without any regard to large bits of JSON. To get started, youcan test out various features using the include api key. You should bewarned, however, that while Giphy_ has been so kind as have a public&quot;testing&quot; key, it may be turned off in the future. See the `api docs`_for more information.The entry point for interacting with Giphy_ api is the ``giphypop.Giphy``class. This class optionally accepts two arguments: ``api_key`` and ``strict``.The ``api_key`` agument, when not preset, will default to the public key(see above). The ``strict`` argument controls how you expect the api toreact when no results are returned. If enabled, an exception is raised,otherwise, ``None`` is returned... code-block:: python    &gt;&gt;&gt; import giphypop    &gt;&gt;&gt; g = giphypop.Giphy()Now you're ready to get started. There are a few key methods of the``giphypop.Giphy`` object that you'll want to know aboutsearch++++++Search for gifs with a given word or phrase. Punctuation is ignored.By default, this will perform a ``term`` search. If you want to searchby phrase, use the ``phrase`` keyword argument. What's the differencebetween ``term`` and ``phrase`` searches? Simple: a term search willreturn results matching any words given, whereas a phrase search willmatch all words.Note that this method is a ``giphypop.GiphyImage`` generator thatautomatically handles api paging. Optionally accepts a limit that willterminate the generation after a specified number of results have beenyielded. This defaults to 25 results; a None implies no limit- **term**: Search term or terms, string- **phrase**: Search phrase, string- **limit**: Maximum number of results to yield, integersearch_list+++++++++++Suppose you expect the ``search`` method to just give you a list ratherthan a generator. This method will have that effect. Equivalent to:.. code-block:: python    &gt;&gt;&gt; g = giphypop.Giphy()    &gt;&gt;&gt; results = [x for x in g.search('foo')]translate+++++++++Retrieve a single image that represents a transalation of a term orphrase into an animated gif. Punctuation is ignored. By default, thiswill perform a ``term`` translation. If you want to translate by phrase,use the ``phrase`` keyword argument.- **term**: Search term or terms, string- **phrase**: Search phrase, string- **strict**: Whether an exception should be raised when no results, booleangif+++Retrieves a specifc gif from giphy based on unique id- **gif_id**: Unique giphy gif ID, string- **strict**: Whether an exception should be raised when no results, booleanscreensaver+++++++++++Returns a random giphy image, optionally based on a search of a given tag.Note that this method will both query for a screensaver image and fetch thefull details of that image (2 request calls)- **tag**: Limit random gifs returned by a tag, string- **strict**: Whether an exception should be raised when no results, booleanrandom_gif++++++++++An alias of ``giphypop.Giphy.screensaver``upload++++++Uploads a video or gif to giphy. Once the upload has completed, requests thefull gif details and returns a GiphyImage (2 request calls).- **tags**: A list of tags to use on the uploaded gif, list- **file_path**: The path to the file to upload, string- **username**: The username of the account to upload to when using your own API key, string------------------------------------------------------------------------------.. note::    The above methods of ``giphypop.Giphy`` are also exposed at the module    level for your convenience. The only difference is that they also    accept an ``api_key`` keyword argument. For example:    .. code-block:: python        &gt;&gt;&gt; from giphypop import translate        &gt;&gt;&gt; img = translate('foo', api_key='bar')------------------------------------------------------------------------------Handling Results----------------All results that represent a single image are wrapped in a``giphypop.GiphyImage`` object. This object acts like a dictionary, butalso exposes keys as attributes. Note, that these are **not** a directmirror of api response objects; their goal is to be simpler. Structurefollows this layout::    &lt;Result Object&gt;        - id        - type: image type (i.e. gif)        - url: URL to giphy page        - raw_data: copy of original data response from giphy (JSON)        - fullscreen: bit.ly link to giphy fullscreen gif        - tiled: bit.ly link to giphy tiled gif        - bitly: bit.ly version of `url`        - media_url: URL directly to image (original size)        - frames: number of frames        - height: image height (original image)        - width: image width (original image)        - size: filesize (in bytes, original image)        - fixed_height: (variable width @ 200px height)            - url: URL directly to image            - width: image width            - height: image height            - downsampled:                - url: URL directly to image                - width: image width                - height: image height            - still: (a still image of gif)                - url: URL directly to image                - width: image width                - height: image height        - fixed_width: (variable height @ 200px width)            - url: URL directly to image            - width: image width            - height: image height            - downsampled:                - url: URL directly to image                - width: image width                - height: image height            - still: (a still image of gif)                - url: URL directly to image                - width: image width                - height: image heightFor example:.. code-block:: python    &gt;&gt;&gt; from giphypop import translate    &gt;&gt;&gt; img = translate('foo')    &gt;&gt;&gt; img.url    'http://giphy.com/foo/bar/baz'    &gt;&gt;&gt; img.width    200    &gt;&gt;&gt; img.fixed_height.downsampled.url    'http://giphy.com/foo/bar/downsampled'Uploading---------The Giphy API will accept uploads of gifs or videos. You are able to uploadusing the public API key, but you won't be able to assign them to your usernameor delete them. In order to upload to your account, set the `username` when youand the API key when you upload.For example:.. code-block:: python    &gt;&gt;&gt; from giphypop import upload    &gt;&gt;&gt; gif = upload([&quot;foo&quot;, &quot;bar&quot;], &quot;mycat.gif&quot;)    &gt;&gt;&gt; gif    GiphyImage&lt;26BRvG76mOYcvRxss&gt; at http://giphy.com/gifs/bar-foo-26BRvG76mOYcvRxssOr using your own API key to upload to your own account:.. code-block:: python    &gt;&gt;&gt; from giphypop import upload    &gt;&gt;&gt; gif = upload([&quot;foo&quot;, &quot;bar&quot;], &quot;mycat.gif&quot;, username=&quot;gifsarefun&quot;, api_key=&quot;abcdef12345678&quot;)    &gt;&gt;&gt; gif    GiphyImage&lt;26BRvG76mOYcvRxss&gt; at http://giphy.com/gifs/bar-foo-26BRvG76mOYcvRxssChangelog---------0.1+++- Initial VersionContribution and License------------------------Developed by `Shaun Duncan`_ and is licensed under the terms of a MIT license.Contributions are welcomed and appreciated!.. _Giphy: http://giphy.com.. _requests: https://pypi.python.org/pypi/requests/1.2.3.. _`api docs`: http://github.com/giphy/giphyapi.. _`Shaun Duncan`: shaun.duncan@gmail.com</longdescription>
</pkgmetadata>