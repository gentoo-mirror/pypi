<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dir2md`dir2md` is a command-line tool that converts directories of files into Markdown code blocks. It also provides a reverse function, md2dir, which converts Markdown code blocks back into their original files.## InstallationInstall `dir2md` using `pip`:```bashpip install dir2md```## Usage`dir2md` can be used as a command-line tool or imported as a module.### Command-Line ToolTo convert a directory of files to Markdown code blocks, run:```bashdir2md [files...]```This will print the resulting Markdown to the console.To convert Markdown code blocks back into their original files, run:```bashmd2dir [options] ```This will create the files in the current working directory.For more options and usage details, use the `--help` flag.### Module```bashimport dir2md# Convert a directory of files to Markdown code blocksmarkdown = dir2md.dir2md(&quot;file1.py&quot;, &quot;file2.py&quot;)# Convert Markdown code blocks back into their original filesdir2md.md2dir_save(markdown, output_dir=&quot;output/&quot;)```### Wildcard supportYou can use wildcards (`*`) to pass multiple files at once.For example, to include all Python files in the current directory:```bashdir2md *.py```To do so recursively, use `**`:```bashdir2md **/*.py````dir2md` uses `glob` to parse your path pattern. To turn this off, use the `--no-glob` flag.#### Truncation`dir2md` now supports truncating long files with the `{start_line,end_line}` syntax added to the file or directory path.For example:- Get the first 10 lines of a file: `dir2md &quot;path/to/file.py[:10]&quot;`- Get lines 10 to 20: `dir2md &quot;path/to/file.py[10:20]&quot;`- Get everything from line 10 until the end of the file: `dir2md &quot;path/to/file.py[10:]&quot;`- Get the first 10 lines of a file followed by an ellpsis: `dir2md &quot;path/to/file.py[:10...]&quot;`- Negative indices: `dir2md &quot;path/to/file.py[-10:]&quot;`- Multiple truncations: `dir2md &quot;path/to/file.py[:10 20:]&quot;`- Omit the entire contents of the file with an ellipsis: `dir2md &quot;path/to/file.py[..]&quot;`This syntax can be used with wildcards as well.The quotation marks are required to prevent your shell from interpreting the brackets as special characters.```bashdir2md *.py[:10]   # First 10 lines of all .py filesdir2md **/*.py[5:]  # All lines after the first 5 lines in all .py files recursively```### Handling missing filesYou can customize the behavior when a specified file is not found using the `on_missing` option. By default, it is set to `&quot;error&quot;` which will raise a `FileNotFoundError`. To ignore the missing file and continue processing other files, pass `on_missing=&quot;ignore&quot;` as an argument to the `dir2md` function.```pythondir2md(&quot;missing_file.py&quot;, on_missing=&quot;ignore&quot;)```</longdescription>
</pkgmetadata>