<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CoinGecko API wrapper[![PyPi Version](https://img.shields.io/pypi/v/pycoingecko.svg)](https://pypi.python.org/pypi/pycoingecko/)![GitHub](https://img.shields.io/github/license/man-c/pycoingecko)Python3 wrapper around the [CoinGecko](https://www.coingecko.com/) API (V3)### InstallationPyPI```bashpip install -U pycoingecko```or from source```bashgit clone https://github.com/man-c/pycoingecko.gitcd pycoingeckopython3 setup.py install```### UsageFor **free API**:```pythonfrom pycoingecko import CoinGeckoAPIcg = CoinGeckoAPI()```For users with **Pro API** Key:```pythonfrom pycoingecko import CoinGeckoAPIcg = pycoingecko.CoinGeckoAPI(api_key='YOUR_API_KEY')```### ExamplesThe required parameters for each endpoint are defined as required (mandatory) parameters for the corresponding functions.\**Any optional parameters** can be passed using same names, as defined in CoinGecko API doc (https://www.coingecko.com/en/api/documentation).For any parameter:- ***Lists** are supported as input for multiple-valued comma-separated parameters\  (e.g. see /simple/price usage examples).*- ***Booleans** are supported as input for boolean type parameters; they can be `str` ('true', 'false'') or `bool` (`True`, `False`)\  (e.g. see /simple/price usage examples).*Usage examples:```python# /simple/price endpoint with the required parameters&gt;&gt;&gt; cg.get_price(ids='bitcoin', vs_currencies='usd'){'bitcoin': {'usd': 3462.04}}&gt;&gt;&gt; cg.get_price(ids='bitcoin,litecoin,ethereum', vs_currencies='usd')# OR (lists can be used for multiple-valued arguments)&gt;&gt;&gt; cg.get_price(ids=['bitcoin', 'litecoin', 'ethereum'], vs_currencies='usd'){'bitcoin': {'usd': 3461.27}, 'ethereum': {'usd': 106.92}, 'litecoin': {'usd': 32.72}}&gt;&gt;&gt; cg.get_price(ids='bitcoin,litecoin,ethereum', vs_currencies='usd,eur')# OR (lists can be used for multiple-valued arguments)&gt;&gt;&gt; cg.get_price(ids=['bitcoin', 'litecoin', 'ethereum'], vs_currencies=['usd', 'eur']){'bitcoin': {'usd': 3459.39, 'eur': 3019.33}, 'ethereum': {'usd': 106.91, 'eur': 93.31}, 'litecoin': {'usd': 32.72, 'eur': 28.56}}# optional parameters can be passed as defined in the API doc (https://www.coingecko.com/api/docs/v3)&gt;&gt;&gt; cg.get_price(ids='bitcoin', vs_currencies='usd', include_market_cap='true', include_24hr_vol='true', include_24hr_change='true', include_last_updated_at='true'){'bitcoin': {'usd': 3458.74, 'usd_market_cap': 60574330199.29028, 'usd_24h_vol': 4182664683.6247883, 'usd_24h_change': 1.2295378479069035, 'last_updated_at': 1549071865}}# OR (also booleans can be used for boolean type arguments)&gt;&gt;&gt; cg.get_price(ids='bitcoin', vs_currencies='usd', include_market_cap=True, include_24hr_vol=True, include_24hr_change=True, include_last_updated_at=True){'bitcoin': {'usd': 3458.74, 'usd_market_cap': 60574330199.29028, 'usd_24h_vol': 4182664683.6247883, 'usd_24h_change': 1.2295378479069035, 'last_updated_at': 1549071865}}```### API documentationhttps://www.coingecko.com/en/api/documentation### Endpoints included&gt; :warning: **Endpoints documentation**: To make sure that you are using properly each endpoint you should check the [API documentation](https://www.coingecko.com/en/api/documentation). Return behaviour and parameters of the endpoints, such as *pagination*, might have changed. &lt;br&gt; Any **optional parameters** defined in CoinGecko API doc can be passed as function parameters using same parameters names with the API *(see Examples above)*.&lt;details&gt;&lt;summary&gt;ping&lt;/summary&gt;&lt;p&gt;* **/ping** (Check API server status)  ```python  cg.ping()  ```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;simple&lt;/summary&gt;&lt;p&gt;* **/simple/price** (Get the current price of any cryptocurrencies in any other supported currencies that you need)  ```python  cg.get_price()  ```* **/simple/token_price/{id}** (Get current price of tokens (using contract addresses) for a given platform in any other currency that you need)  ```python  cg.get_token_price()  ```* **/simple/supported_vs_currencies** (Get list of supported_vs_currencies)  ```python  cg.get_supported_vs_currencies()  ```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;coins&lt;/summary&gt;&lt;p&gt;* **/coins/list** (List all supported coins id, name and symbol (no pagination required))  ```python  cg.get_coins_list()  ```* **/coins/markets** (List all supported coins price, market cap, volume, and market related data)  ```python   cg.get_coins_markets()  ```* **/coins/{id}** (Get current data (name, price, market, ... including exchange tickers) for a coin)  ```python   cg.get_coin_by_id()  ```* **/coins/{id}/tickers** (Get coin tickers (paginated to 100 items))  ```python   cg.get_coin_ticker_by_id()  ```* **/coins/{id}/history** (Get historical data (name, price, market, stats) at a given date for a coin)  ```python   cg.get_coin_history_by_id()  ```* **/coins/{id}/market_chart** (Get historical market data include price, market cap, and 24h volume (granularity auto))  ```python   cg.get_coin_market_chart_by_id()  ```* **/coins/{id}/market_chart/range** (Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto))  ```python   cg.get_coin_market_chart_range_by_id()  ```[//]: # (* **/coins/{id}/status_updates** &amp;#40;Get status updates for a given coin &amp;#40;beta&amp;#41;&amp;#41;)[//]: # (  ```python)[//]: # (  cg.get_coin_status_updates_by_id&amp;#40;&amp;#41;)[//]: # (  ```)* **/coins/{id}/ohlc** (Get coin's OHLC (beta))  ```python  cg.get_coin_ohlc_by_id()  ```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;contract&lt;/summary&gt;&lt;p&gt;* **/coins/{id}/contract/{contract_address}** (Get coin info from contract address)  ```python  cg.get_coin_info_from_contract_address_by_id()  ```* **/coins/{id}/contract/{contract_address}/market_chart/** (Get historical market data include price, market cap, and 24h volume (granularity auto) from a contract address)  ```python  cg.get_coin_market_chart_from_contract_address_by_id()  ```* **/coins/{id}/contract/{contract_address}/market_chart/range** (Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto) from a contract address)  ```python  cg.get_coin_market_chart_range_from_contract_address_by_id()  ```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;asset_platforms&lt;/summary&gt;&lt;p&gt;* **/asset_platforms** (List all asset platforms (Blockchain networks))  ```python  cg.get_asset_platforms()  ```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;categories&lt;/summary&gt;&lt;p&gt;* **/coins/categories/list** (List all categories)  ```python  cg.get_coins_categories_list()  ```* **coins/categories** (List all categories with market data)  ```python  cg.get_coins_categories()  ```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;exchanges&lt;/summary&gt;&lt;p&gt;* **/exchanges** (List all exchanges)  ```python  cg.get_exchanges_list()  ```* **/exchanges/list** (List all supported markets id and name (no pagination required))  ```python  cg.get_exchanges_id_name_list()  ```* **/exchanges/{id}** (Get exchange volume in BTC and top 100 tickers only)  ```python  cg.get_exchanges_by_id()  ```* **/exchanges/{id}/tickers** (Get exchange tickers (paginated, 100 tickers per page))  ```python  cg.get_exchanges_tickers_by_id()  ```[//]: # (* **/exchanges/{id}/status_updates** &amp;#40;Get status updates for a given exchange &amp;#40;beta&amp;#41;&amp;#41;)[//]: # (  ```python)[//]: # (  cg.get_exchanges_status_updates_by_id&amp;#40;&amp;#41;)[//]: # (  ```)* **/exchanges/{id}/volume_chart** (Get volume_chart data for a given exchange)  ```python  cg.get_exchanges_volume_chart_by_id()  ```&lt;/details&gt;[//]: # (&lt;details&gt;&lt;summary&gt;finance&lt;/summary&gt;)[//]: # (&lt;p&gt;)[//]: # ()[//]: # (* **/finance_platforms** &amp;#40;List all finance platforms&amp;#41;)[//]: # (  ```python)[//]: # (  cg.get_finance_platforms&amp;#40;&amp;#41;)[//]: # (  ```)[//]: # (* **/finance_products** &amp;#40;List all finance products&amp;#41;)[//]: # (  ```python)[//]: # (  cg.get_finance_products&amp;#40;&amp;#41;)[//]: # (  ```)[//]: # (&lt;/details&gt;)&lt;details&gt;&lt;summary&gt;indexes&lt;/summary&gt;&lt;p&gt;* **/indexes** (List all market indexes)```pythoncg.get_indexes()```* **/indexes/{market_id}/{id}** (Get market index by market id and index id)```pythoncg.get_indexes_by_market_id_and_index_id()```* **/indexes/list** (List market indexes id and name)```pythoncg.get_indexes_list()```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;derivatives&lt;/summary&gt;&lt;p&gt;* **/derivatives** (List all derivative tickers)  ```python  cg.get_derivatives()  ```* **/derivatives/exchanges** (List all derivative exchanges)  ```python  cg.get_derivatives_exchanges()  ```* **/derivatives/exchanges/{id}** (Show derivative exchange data)  ```python  cg.get_derivatives_exchanges_by_id()  ```* **/derivatives/exchanges/list** (List all derivative exchanges name and identifier)  ```python  cg.get_derivatives_exchanges_list()  ```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;nfts (beta)&lt;/summary&gt;&lt;p&gt;* **/nfts/list** (List all supported NFT ids, paginated by 100 items per page, paginated to 100 items)  ```python  cg.get_nfts_list()  ```* **/nfts/{id}** (Get current data (name, price_floor, volume_24h ...) for an NFT collection. native_currency (string) is only a representative of the currency.)  ```python  cg.get_nfts_by_id()  ```* **/nfts/{asset_platform_id}/contract/{contract_address}** (Get current data (name, price_floor, volume_24h ...) for an NFT collection. native_currency (string) is only a representative of the currency)  ```python  cg.get_nfts_collection_by_asset_platform_id_and_contract_address()  ```&lt;/details&gt;[//]: # (&lt;details&gt;&lt;summary&gt;status_updates&lt;/summary&gt;)[//]: # (&lt;p&gt;)[//]: # ()[//]: # (* **/status_updates** &amp;#40;List all status_updates with data &amp;#40;description, category, created_at, user, user_title and pin&amp;#41;&amp;#41;)[//]: # (  ```python)[//]: # (  cg.get_status_updates&amp;#40;&amp;#41;)[//]: # (  ```)[//]: # (&lt;/details&gt;)[//]: # (&lt;details&gt;&lt;summary&gt;events&lt;/summary&gt;)[//]: # (&lt;p&gt;)[//]: # ()[//]: # (* **/events** &amp;#40;Get events, paginated by 100&amp;#41;)[//]: # (  ```python)[//]: # (  cg.get_events&amp;#40;&amp;#41;)[//]: # (  ```)[//]: # (* **/events/countries** &amp;#40;Get list of event countries&amp;#41;)[//]: # (  ```python)[//]: # (  cg.get_events_countries&amp;#40;&amp;#41;)[//]: # (  ```)[//]: # (* **/events/types** &amp;#40;Get list of events types&amp;#41;)[//]: # (  ```python)[//]: # (  cg.get_events_types&amp;#40;&amp;#41;)[//]: # (  ```)[//]: # (&lt;/details&gt;)&lt;details&gt;&lt;summary&gt;exchange_rates&lt;/summary&gt;&lt;p&gt;* **/exchange_rates** (Get BTC-to-Currency exchange rates)  ```python  cg.get_exchange_rates()  ```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;search&lt;/summary&gt;&lt;p&gt;* **/search** (Search for coins, categories and markets on CoinGecko)  ```python  cg.search()  ```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;trending&lt;/summary&gt;&lt;p&gt;* **/search/trending** (Get trending search coins (Top-7) on CoinGecko in the last 24 hours)  ```python  cg.get_search_trending()  ```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;global&lt;/summary&gt;&lt;p&gt;  - **/global** (Get cryptocurrency global data)    ```python    cg.get_global()    ```  - **/global/decentralized_finance_defi** (Get cryptocurrency global decentralized finance(defi) data)    ```python    cg.get_global_decentralized_finance_defi()    ```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;companies (beta)&lt;/summary&gt;&lt;p&gt;  - **/companies/public_treasury/{coin_id}** (Get public companies data)    ```python    cg.get_companies_public_treasury_by_coin_id()    ```&lt;/details&gt;### Test#### InstallationInstall required packages for testing using:```bashpip install pytest responses```#### UsageRun unit tests with:```# after installing pytest and responses using pip3pytest tests```## License[MIT](https://choosealicense.com/licenses/mit/)</longdescription>
</pkgmetadata>