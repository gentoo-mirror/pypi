<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyCave![PyPi](https://img.shields.io/pypi/v/pycave?label=version)![License](https://img.shields.io/pypi/l/pycave)PyCave allows you to run traditional machine learning models on CPU, GPU, and even on multiplenodes. All models are implemented in [PyTorch](https://pytorch.org/) and provide an `Estimator` APIthat is fully compatible with [scikit-learn](https://scikit-learn.org/stable/).For Gaussian mixture model, PyCave allows for 100x speed ups when using a GPU and enables to trainon markedly larger datasets via mini-batch training. The full suite of benchmarks run to comparePyCave models against scikit-learn models is available on the[documentation website](https://pycave.borchero.com/sites/benchmark.html)._PyCave version 3 is a complete rewrite of PyCave which is tested much more rigorously, depends onwell-maintained libraries and is tuned for better performance. While you are, thus, highlyencouraged to upgrade, refer to [pycave-v2.borchero.com](https://pycave-v2.borchero.com) fordocumentation on PyCave 2._## Features- Support for GPU and multi-node training by implementing models in PyTorch and relying on  [PyTorch Lightning](https://www.pytorchlightning.ai/)- Mini-batch training for all models such that they can be used on huge datasets- Well-structured implementation of models  - High-level `Estimator` API allows for easy usage such that models feel and behave like in    scikit-learn  - Medium-level `LightingModule` implements the training algorithm  - Low-level PyTorch `Module` manages the model parameters## InstallationPyCave is available via `pip`:```bashpip install pycave```If you are using [Poetry](https://python-poetry.org/):```bashpoetry add pycave```## UsageIf you've ever used scikit-learn, you'll feel right at home when using PyCave. First, let's createsome artificial data to work with:```pythonimport torchX = torch.cat([    torch.randn(10000, 8) - 5,    torch.randn(10000, 8),    torch.randn(10000, 8) + 5,])```This dataset consists of three clusters with 8-dimensional datapoints. If you want to fit a K-Meansmodel, to find the clusters' centroids, it's as easy as:```pythonfrom pycave.clustering import KMeansestimator = KMeans(3)estimator.fit(X)# Once the estimator is fitted, it provides various properties. One of them is# the `model_` property which yields the PyTorch module with the fitted parameters.print(&quot;Centroids are:&quot;)print(estimator.model_.centroids)```Due to the high-level estimator API, the usage for all machine learning models is similar. The APIdocumentation provides more detailed information about parameters that can be passed to estimatorsand which methods are available.### GPU and Multi-Node trainingFor GPU- and multi-node training, PyCave leverages PyTorch Lightning. The hardware that trainingruns on is determined by the[Trainer](https://pytorch-lightning.readthedocs.io/en/latest/api/pytorch_lightning.trainer.trainer.html#pytorch_lightning.trainer.trainer.Trainer)class. It's[**init**](https://pytorch-lightning.readthedocs.io/en/latest/api/pytorch_lightning.trainer.trainer.html#pytorch_lightning.trainer.trainer.Trainer.__init__)method provides various configuration options.If you want to run K-Means with a GPU, you can pass the options `accelerator='gpu'` and `devices=1`to the estimator's initializer:```pythonestimator = KMeans(3, trainer_params=dict(accelerator='gpu', devices=1))```Similarly, if you want to train on 4 nodes simultaneously where each node has one GPU available,you can specify this as follows:```pythonestimator = KMeans(3, trainer_params=dict(num_nodes=4, accelerator='gpu', devices=1))```In fact, **you do not need to change anything else in your code**.### Implemented ModelsCurrently, PyCave implements three different models:- [GaussianMixture](https://pycave.borchero.com/sites/generated/bayes/gmm/pycave.bayes.GaussianMixture.html)- [MarkovChain](https://pycave.borchero.com/sites/generated/bayes/markov_chain/pycave.bayes.MarkovChain.html)- [K-Means](https://pycave.borchero.com/sites/generated/clustering/kmeans/pycave.clustering.KMeans.html)## LicensePyCave is licensed under the [MIT License](https://github.com/borchero/pycave/blob/main/LICENSE).</longdescription>
</pkgmetadata>