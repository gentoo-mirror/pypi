<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Network symmetryFast library, written in C for python to calculate network Accessibility and Symmetry. More information regarding these measurements are described in the papers listed as follows:[TravenÃ§olo, Bruno Augusto Nassif, and L. da F. Costa. &quot;Accessibility in complex networks.&quot; Physics Letters A 373, no. 1 (2008): 89-95.](https://doi.org/10.1016/j.physleta.2008.10.069)[Silva, Filipi N., Cesar H. Comin, Thomas K. DM Peron, Francisco A. Rodrigues, Cheng Ye, Richard C. Wilson, Edwin R. Hancock, and Luciano da F. Costa. &quot;Concentric network symmetry.&quot; Information Sciences 333 (2016): 61-80.](https://arxiv.org/abs/1407.0224)For the generalized accessibility, the following paper is used:[De Arruda, G. F., Barbieri, A. L., Rodriguez, P. M., Rodrigues, F. A., Moreno, Y., &amp; da Fontoura Costa, L. Role of centrality for the identification of influential spreaders in complex networks. Physical Review E, 90(3) (2014), 032812.](https://arxiv.org/abs/1404.4528)If you use this code in a scientific study, please cite the respective references and this library.A comprehensive guide to the theory and applications of the accessibility measurements is available from: [Benatti, Alexandre, and Luciano da F. Costa. &quot;Accessibility: Generalizing the Node Degree (A Tutorial).&quot; (2021).](https://www.researchgate.net/publication/355081440_Accessibility_Generalizing_the_Node_Degree_CDT-62)## InstallRequires python headers and a C11 compatible compiler, such as gcc or clang.To install it, simply run:```bashpip install network-symmetry```or clone this repository and install it from master by running:```bashpip install git+https://github.com/ABenatti/network_symmetry.git```## UsageStep 1: Import the libraries```pythonimport numpy as npimport network_symmetry as ns```Step 2: Convert network to an edge list and a list of weights (optional)```pythonvertex_count = 10edges = np.array([(0, 1), (0, 2), (1, 2), (0, 3), (1, 3), (2, 3), (2, 4), (3, 4), (0, 4),                  (4, 5), (3, 5), (1, 5), (1, 6), (3, 6), (4, 6), (5, 7), (4, 7), (0, 7),                   (5, 8), (4, 8), (3, 8), (3, 9), (7, 9), (0, 9)])weights = np.random.random(size=edges.shape[0])directed = False```Step 3: Load the network data in a measurer object```pythonmeasurer = ns.Network(vertex_count = vertex_count,                       edges = edges,                       directed = directed,                       weights = weights                      )```Step 4: Set the parameters:```pythonh_max = 3measurer.set_parameters(h_max= h_max)```Step 5: Calculate the measurements: ```pythonmeasurer.compute_symmetry()generalized_accessibility = measurer.accessibility_generalized()```Step 6: The outputs can be seen as follows.```pythonprint(&quot;\nResults:&quot;)for h in range(2,h_max+1):    print(&quot;h =&quot;, h)    print(&quot; Accessibility:&quot;)    print(&quot; &quot;, measurer.accessibility(h))    print(&quot; Symmetry (backbone):&quot;)    print(&quot; &quot;,measurer.symmetry_backbone(h))    print(&quot; Symmetry (merged):&quot;)    print(&quot; &quot;,measurer.symmetry_merged(h))print(&quot; Generalized accessibility:&quot;)print(&quot; &quot;, generalized_accessibility)```**Important:** In order to be faster, this version of accessibility considers a random walk in which the walker cannot return to the already visited nodes.## API Documentation```pythonmeasurer = ns.Network(vertex_count = vertex_count,                       edges = edges,                       directed = directed,                       weights= weights                      )```- `vertex_count` - number of vertices in the network;- `edges` - list of edges;- `directed` - directed or not;- `weights` - list containing the weights of the edges (use the same order as edges).```pythonmeasurer.set_parameters(h_max = 2,                        merge_last_level = True,                        live_stream = False,                        parallel_jobs = 1,                        verbose = False,                        show_status = True                        )```- `h_max` - Compute all symmetries and accessibilities for h=2 to h_max, which must be greater or equal to 2;- `merge_last_level` - Merge the last level. True by default;- `live_stream` - Stream the output as results are obtained. Note that the results may be out of order;- `parallel_jobs` - The number of parallel jobs, which must be greater or equal to 1; - `verbose` - If True, shows the calculation steps;- `show_status` - If True, show the progress of the calculation.```pythonmeasurer.compute_symmetry()```Compute symmetries and accessibilities by using the parameters set in &quot;set_parameters&quot;.```pythonaccessibility = measurer.accessibility(h)symmetry_backbone = measurer.symmetry_backbone(h)symmetry_merged = measurer.symmetry_merged(h)```- `h`- desired number of steps.These methods return the respective lists measurements. The order of measures in the lists follows the node orders.## LibrariesAll of these codes were developed and executed with the environment described in &quot;requirements.txt&quot;. ## Citation RequestIf you publish a paper related to this material, please cite this repository and the respective papers.## AcknowledgementsAlexandre Benatti thanks CoordenaÃ§Ã£o de AperfeiÃ§oamento de Pessoal de NÃvel Superior â€“ Brasil (CAPES) â€“ Finance Code (001) (grant no. 88882.328749/2019-01). Henrique F. de Arruda acknowledges FAPESP for sponsorship (grant no. 2018/10489-0). Luciano da F. Costa thanks CNPq (grant no. 307085/2018-0) and NAP-PRP-USP for sponsorship. This work has been supported also by FAPESP grant no. 2015/22308-2.## LicenseThis software is under the following license.```Copyright (c) 2021 network-accessibilitynetwork-accessibility (c) by Alexandre Benatti, Henrique Ferraz de ArrudaFilipi Nascimento Silva, and Luciano da Fontoura Costanetwork-accessibility is licensed under aCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.You should have received a copy of the license along with thiswork. If not, see &lt;http://creativecommons.org/licenses/by-nc-sa/4.0/&gt;. Software provided as is and with absolutely no warranty, express or implied, with no liability for claim or damage.```</longdescription>
</pkgmetadata>