<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># edi-energy.de scraper&lt;!--- you need to replace the `organization/repo_name` in the status badge URLs ---&gt;![Unittests status badge](https://github.com/Hochfrequenz/edi_energy_scraper/workflows/Unittests/badge.svg)![Coverage status badge](https://github.com/Hochfrequenz/edi_energy_scraper/workflows/Coverage/badge.svg)![Linting status badge](https://github.com/Hochfrequenz/edi_energy_scraper/workflows/Linting/badge.svg)![Black status badge](https://github.com/Hochfrequenz/edi_energy_scraper/workflows/Black/badge.svg)![PyPi Status Badge](https://img.shields.io/pypi/v/edi_energy_scraper)The Python package `edi_energy_scraper` provides easy to use methods to mirror the website edi-energy.de.### Rationale / Why?If you'd like to be informed about new regulations or data formats being published on edi-energy.de you can either- visit the site every day and hope that you see the changes if this is your favourite hobby,- or automate the task.This repository helps you with the latter. It allows you to create an up-to-date copy of edi-energy.de on your localcomputer. Other than if you mirrored the files using `wget` or `curl`, you'll get a clean and intuitive directorystructure.From there you can e.g. commit the files into a VCS (like e.g. our [edi_energy_mirror](https://github.com/Hochfrequenz/edi_energy_mirror)), scrape the PDF/Word files for later use...We're all hoping for the day of true digitization on which this repository will become obsolete.## How to use the Package (as a user)Install via pip:```bashpip install edi_energy_scraper```Create a directory in which you'd like to save the mirrored data:```bashmkdir edi_energy_de```Then import it and start the download:```pythonimport asynciofrom edi_energy_scraper import EdiEnergyScraper# add the following lines to enable debug logging to stdout (CLI)# import logging# import sys# logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)async def mirror():    scraper = EdiEnergyScraper(path_to_mirror_directory=&quot;edi_energy_de&quot;)    await scraper.mirror()if __name__ == &quot;__main__&quot;:    loop = asyncio.new_event_loop()    asyncio.set_event_loop(loop)    asyncio.run(mirror())```This creates a directory structure:```-|-your_script_cwd.py |-edi_energy_de    |- past (contains archived files)        |- ahb.pdf        |- ahb.docx        |- ...    |- current (contains files valid as of today)        |- mig.pdf        |- mig.docx        |- ...    |- future (contains files valid in the future)        |- allgemeine_festlegungen.pdf        |- schema.xsd        |- ...```## How to use this Repository on Your Machine (for development)Please follow the instructions inour [Python Template Repository](https://github.com/Hochfrequenz/python_template_repository#how-to-use-this-repository-on-your-machine). And for further information, see the [Tox Repository](https://github.com/tox-dev/tox).## ContributeYou are very welcome to contribute to this template repository by opening a pull request against the main branch.</longdescription>
</pkgmetadata>