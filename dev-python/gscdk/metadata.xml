<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Go Smart Contracts Development Kit (GSCDK)[![PyPi Version](https://img.shields.io/pypi/v/gscdk.svg)](https://pypi.org/project/gscdk)[![PyPi Downloads](https://img.shields.io/pypi/dm/gscdk.svg)](https://pypi.org/project/gscdk)## OverviewThe Go Smart Contracts Development Kit (GSCDK) provides a comprehensive toolkit for creating, building, and debugging Go-based smart contracts. ## Example of a Go Smart ContractHere is an example of what a Go Smart Contract looks like using GSCDK:```gopackage mainimport (&quot;github.com/uuosio/chain&quot;)//table mytabletype MyData struct {primary uint64 //primaryname    string}//contract mycontracttype MyContract struct {Receiver      chain.NameFirstReceiver chain.NameAction        chain.Name}func NewContract(receiver, firstReceiver, action chain.Name) *MyContract {return &amp;MyContract{receiver, firstReceiver, action}}//action sayhellofunc (c *MyContract) SayHello(name string) {code := c.Receiverpayer := c.Receivermydb := NewMyDataDB(code)primary := uint64(111)if it, data := mydb.GetByKey(primary); it.IsOk() {if data.name != name {chain.Println(&quot;Welcome new friend:&quot;, name)} else {chain.Println(&quot;Welcome old friend&quot;, name)}data.name = namemydb.Update(it, data, payer)} else {chain.Println(&quot;Welcome new friend&quot;, name)data := &amp;MyData{primary, name}mydb.Store(data, payer)}}```## Quick StartJump right into building your first smart contract with our [Quick Start Guide](https://colab.research.google.com/github/uuosio/gscdk/blob/main/quickstart/quickstart.ipynb).## InstallationTo install GSCDK, run the following command:For Unix-based platforms (like Linux or macOS):```bashpython3 -m pip install gscdk```For Windows:```bashpython -m pip install gscdk```### Upgrading GSCDKIf you've previously installed GSCDK and want to upgrade to the latest version, use the following command:For Unix-based platforms:```bashpython3 -m pip install --upgrade gscdk```For Windows:```bashpython -m pip install --upgrade gscdk```## Building Go Smart Contracts CompilerTo build the `tinygo` command that supports building Go Smart Contracts, follow the instructions in [Building](./BUILDING.md). Once built, add the `tinygo` command to your PATH:```bashexport PATH=$(pwd)/compiler/build:$PATH```## Using go-contract`go-contract` is a powerful tool for managing your smart contract projects. Learn more about its features below:### Initializing a ProjectUse the &quot;init&quot; command to initialize a project with a specific contract name:```bashgo-contract init mycontractcd mycontract```### Generating ABI and Extra CodeUse the &quot;gencode&quot; command to generate ABI and extra code for smart contracts:```bashgo-contract gencode```Note: Code generation is also the default option for the &quot;build&quot; command.### Building Your ProjectTo compile the source code of your project, use the &quot;build&quot; command:```bashgo-contract build```To disable code generation during the build process, use the `-gen-code=false` flag:```bashgo-contract build -gen-code=false```To disable code optimization, use the `-d` or `--debug` option:```bashgo-contract build -d```## DebuggingBefore debugging, install `ipyeos`:```bashpython3 -m pip install ipyeos```To update to a new version, use the following command:```bashpython3 -m pip install -U ipyeos```Then run the debugging server:```basheosdebugger```On Windows, use a Docker image to run a debugging server.First, pull ipyeos docker image:```bashdocker pull ghcr.io/uuosio/ipyeos:latest```then start a debugging server from docker:```bashdocker run -it --rm -p 9090:9090 -p 9092:9092 -t ghcr.io/uuosio/ipyeos```Here's a sneak peek of the debugger in action:![Debugging](https://github.com/uuosio/gscdk/blob/main/images/debugging.gif)## Code Coverage AnalysisTo generate a code coverage report in HTML, follow these steps:1. Build your project:```bashgo-contract build```2. Generate a coverage report:```bashTEST_COVERAGE=1 go test -coverprofile=coverage.out```3. Create an HTML report from the coverage data:```bashgo tool cover -html=coverage.out```Here's an example of what the code coverage report looks like:![Code Coverage](https://github.com/uuosio/gscdk/blob/main/images/code-coverage.png)</longdescription>
</pkgmetadata>