<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Github CI Status| |Appveyor Status| |PyPi version| |Conda Forge||Codecov Badge| |Docs Status| |Zenodo Badge| |PyUp Badge|Darr is a Python library that stores NumPy arrays on disk in a way that issimple and self-documented, which makes them easily accessible from a widerange of computing environments. Arrays are automatically kept up-to-datewith a full explanation of how data is stored, including code to readitself in languages such as R, Julia, IDL, Matlab, Maple, and Mathematica,or in Python/Numpy without Darr (see `example&lt;https://github.com/gbeckers/Darr/tree/master/examplearrays/arrays/array_int32_2D.darr&gt;`__). Keeping data universally readable and documented isa pillar of good scientific practice, and a good idea in general. Morerationale for a tool-independent approach to numeric array storage is provided`here &lt;https://darr.readthedocs.io/en/latest/rationale.html&gt;`__.Under the hood, Darr uses NumPy memory-mapped arrays, which is a widelyestablished and trusted way of working with disk-based numerical arrays, andwhich makes Darr fully NumPy compatible. This enables efficient out-of-coreread/write access to potentially very large arrays. What Darr adds is that itautomatically keeps your arrays fully documented, open, and thus widelyreadable. Further, Darr adds functionality to make your life easier in otherways, such as the support for ragged arrays, the ability to create arrays fromiterators, append and truncate functionality, and the easy use of metadata.Flat binary files and (JSON) text files are accompanied by a README text filethat explains how the array and metadata are stored (`see example arrays&lt;https://github.com/gbeckers/Darr/tree/master/examplearrays/&gt;`__).It is trivially easy to share your arrays with others or with yourself whenworking in different computing environments because they always contains cleardocumentation of the specific data at hand, including code to read it.Does your colleague want to try out an interesting algorithm in R or Matlabon your arrays?  No need to export anything or to provide elaborateexplanation. No dependence on complicated formats or specialized libraries.No looking up things. A copy-paste of a few lines of code from thedocumentation stored with the data is sufficient. Self-documentation and codeexamples are automatically updated as you change your arrays when workingwith them.See this `tutorial &lt;https://darr.readthedocs.io/en/latest/tutorialarray.html&gt;`__for a brief introduction, or the`documentation &lt;http://darr.readthedocs.io/&gt;`__ for more info.Darr is currently pre-1.0, still undergoing development. It is open source andfreely available under the `New BSD License&lt;https://opensource.org/licenses/BSD-3-Clause&gt;`__ terms.Features---------  Data is stored purely based on flat binary and text files, maximizing   universal readability.-  Automatic self-documention, including copy-paste ready code snippets for   reading the array in a number of popular data analysis environments, such as   Python (without Darr), R, Julia, Octave/Matlab, GDL/IDL, and Mathematica   (see `example array   &lt;https://github.com/gbeckers/Darr/tree/master/examplearrays/arrays/array_int32_2D.darr&gt;`__).-  Disk-persistent array data is directly accessible through `NumPy   indexing &lt;https://numpy.org/doc/stable/reference/arrays.indexing.html&gt;`__   and may be larger than RAM and that is easily appendable.-  Supports ragged arrays.-  Easy use of metadata, stored in a widely readable separate   `JSON &lt;https://en.wikipedia.org/wiki/JSON&gt;`__ text file.-  Many numeric types are supported: (u)int8-(u)int64, float16-float64,   complex64, complex128.-  Integrates easily with the `Dask &lt;https://dask.pydata.org/en/latest/&gt;`__   library for out-of-core computation on very large arrays.-  Minimal dependencies, only `NumPy &lt;http://www.numpy.org/&gt;`__.See the `documentation &lt;http://darr.readthedocs.io/&gt;`__ for more information... |Github CI Status| image:: https://github.com/gbeckers/Darr/actions/workflows/python_package.yml/badge.svg   :target: https://github.com/gbeckers/Darr/actions/workflows/python_package.yml.. |Appveyor Status| image:: https://ci.appveyor.com/api/projects/status/github/gbeckers/darr?svg=true   :target: https://ci.appveyor.com/project/gbeckers/darr.. |PyPi version| image:: https://img.shields.io/badge/pypi-0.5.4-orange.svg   :target: https://pypi.org/project/darr/.. |Conda Forge| image:: https://anaconda.org/conda-forge/darr/badges/version.svg   :target: https://anaconda.org/conda-forge/darr.. |Docs Status| image:: https://readthedocs.org/projects/darr/badge/?version=stable   :target: https://darr.readthedocs.io/en/stable/.. |Repo Status| image:: https://www.repostatus.org/badges/latest/active.svg   :alt: Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed.   :target: https://www.repostatus.org/#active.. |Codacy Badge| image:: https://api.codacy.com/project/badge/Grade/c0157592ce7a4ecca5f7d8527874ce54   :alt: Codacy Badge   :target: https://app.codacy.com/app/gbeckers/Darr?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=gbeckers/Darr&amp;utm_campaign=Badge_Grade_Dashboard.. |PyUp Badge| image:: https://pyup.io/repos/github/gbeckers/Darr/shield.svg   :target: https://pyup.io/repos/github/gbeckers/Darr/   :alt: Updates.. |Zenodo Badge| image:: https://zenodo.org/badge/151593293.svg   :target: https://zenodo.org/badge/latestdoi/151593293.. |Codecov Badge| image:: https://codecov.io/gh/gbeckers/Darr/branch/master/graph/badge.svg?token=BBV0WDIUSJ   :target: https://codecov.io/gh/gbeckers/Darr</longdescription>
</pkgmetadata>