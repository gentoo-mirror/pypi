<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. role:: python(code)   :language: python==h1==.. image:: https://img.shields.io/pypi/pyversions/h1.svg.. image:: https://img.shields.io/pypi/v/h1.svg    :target: https://pypi.python.org/pypi/h1A HackerOne API client for Python. The API closely maps to the REST API that HackerOne provides.Documentation for their API is `available here &lt;https://api.hackerone.com/docs/v1&gt;`_.=======License=======MIT============Installation============For installation via pip:.. code-block:: bash    pip install h1For development, In the project root run:.. code-block:: bash    virtualenv env    source env/bin/activate    make bootstrapThe manual approach should work as well:.. code-block:: bash    python setup.py install========Examples========-----------------------Initializing the Client-----------------------.. code-block:: python    &gt;&gt;&gt; from h1.client import HackerOneClient    &gt;&gt;&gt; from h1.models import Report    &gt;&gt;&gt; c = HackerOneClient(&quot;YOUR-API-TOKEN-IDENTIFIER&quot;, &quot;YOUR-API-TOKEN&quot;)-------------------------------------------Getting all reports created in the last day-------------------------------------------:python:`HackerOneClient.find_resources()` allows you to specify a resource to find (only :python:`Report` issupported for now) and some criteria to filter on. The only *required* filter is :python:`program`, whichmust be set to the target HackerOne program's name. Any additional filters may be passed as kwargs,and everything in `HackerOne's filter documentation &lt;https://api.hackerone.com/docs/v1#/reports/query&gt;`_should be supported.For example, here's how we'd get all reports created in the past 24 hours:.. code-block:: python    &gt;&gt;&gt; import datetime as dt    &gt;&gt;&gt; day_ago = dt.datetime.now() - dt.timedelta(days=1)    &gt;&gt;&gt; listing = c.find_resources(Report, program=[&quot;test-program&quot;], created_at__gt=day_ago)    &gt;&gt;&gt; len(listing)    3    &gt;&gt;&gt; listing[0].title    u'This is a test report!'-----------------------------------------Getting all resolved reports in a program-----------------------------------------Similarly, if we filter on :python:`state` we can get all the :python:`resolved` reports:.. code-block:: python    &gt;&gt;&gt; resolved_listing = c.find_resources(Report, program=[&quot;test-program&quot;], state=[&quot;resolved&quot;])    &gt;&gt;&gt; resolved_listing[0].title-------------------------------Getting a specific report by ID-------------------------------:python:`HackerOneClient.get_resource()` allows you to pass a resource type (again, currently just :python:`Report`,)and an ID to fetch:.. code-block:: python    &gt;&gt;&gt; report = c.get_resource(Report, 110306)    &gt;&gt;&gt; report.title    u'Test RCE SQLi'    &gt;&gt;&gt; report.state    u'not-applicable'------------------------------Tallying report counts by user------------------------------Here's an example of using the client to figure out who your most prolific reporters are:.. code-block:: python    &gt;&gt;&gt; from collections import Counter    &gt;&gt;&gt; reporter_count = Counter()    &gt;&gt;&gt; all_reports = c.find_resources(Report, program=[&quot;test-program&quot;])    &gt;&gt;&gt; for report in all_reports:    ...     reporter_count[report.reporter] += 1    ...    &gt;&gt;&gt; print(reporter_count)    Counter({&lt;User - bestreporter&gt;: 21, &lt;User - another_reporter&gt;: 12, &lt;User - r3p0rt3r&gt;: 2, &lt;User - newbie&gt;: 1})=============Running Tests=============.. code-block:: bash    virtualenv env    source env/bin/activate    make bootstrap    make test</longdescription>
</pkgmetadata>