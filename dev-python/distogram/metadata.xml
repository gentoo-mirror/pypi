<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========DistoGram==========.. image:: https://badge.fury.io/py/distogram.svg    :target: https://badge.fury.io/py/distogram.. image:: https://github.com/maki-nage/distogram/workflows/Python%20package/badge.svg    :target: https://github.com/maki-nage/distogram/actions?query=workflow%3A%22Python+package%22    :alt: Github WorkFlows.. image:: https://img.shields.io/codecov/c/github/maki-nage/distogram?style=plastic&amp;color=brightgreen&amp;logo=codecov&amp;style=for-the-badge    :target: https://codecov.io/gh/maki-nage/distogram    :alt: Coverage.. image:: https://readthedocs.org/projects/distogram/badge/?version=latest    :target: https://distogram.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status.. image:: https://mybinder.org/badge_logo.svg    :target: https://mybinder.org/v2/gh/maki-nage/distogram/master?urlpath=notebooks%2Fexamples%2Fdistogram.ipynbDistoGram is a library that allows to compute histogram on streaming data, indistributed environments. The implementation follows the algorithms described inBen-Haim's `Streaming Parallel Decision Trees&lt;http://jmlr.org/papers/volume11/ben-haim10a/ben-haim10a.pdf&gt;`__Get Started============First create a compressed representation of a distribution:.. code:: python    import numpy as np    import distogram    distribution = np.random.normal(size=10000)    # Create and feed distogram from distribution    # on a real usage, data comes from an event stream    h = distogram.Distogram()    for i in distribution:        h = distogram.update(h, i)Compute statistics on the distribution:.. code:: python    nmin, nmax = distogram.bounds(h)    print(&quot;count: {}&quot;.format(distogram.count(h)))    print(&quot;mean: {}&quot;.format(distogram.mean(h)))    print(&quot;stddev: {}&quot;.format(distogram.stddev(h)))    print(&quot;min: {}&quot;.format(nmin))    print(&quot;5%: {}&quot;.format(distogram.quantile(h, 0.05)))    print(&quot;25%: {}&quot;.format(distogram.quantile(h, 0.25)))    print(&quot;50%: {}&quot;.format(distogram.quantile(h, 0.50)))    print(&quot;75%: {}&quot;.format(distogram.quantile(h, 0.75)))    print(&quot;95%: {}&quot;.format(distogram.quantile(h, 0.95)))    print(&quot;max: {}&quot;.format(nmax)).. code:: console    count: 10000    mean: -0.005082954640481095    stddev: 1.0028524290149186    min: -3.5691130319855047    5%: -1.6597242392338374    25%: -0.6785107421744653    50%: -0.008672960012168916    75%: 0.6720718926935414    95%: 1.6476822301131866    max: 3.8800560034877427Compute and display the histogram of the distribution:.. code:: python    hist = distogram.histogram(h)    df_hist = pd.DataFrame(np.array(hist), columns=[&quot;bin&quot;, &quot;count&quot;])    fig = px.bar(df_hist, x=&quot;bin&quot;, y=&quot;count&quot;, title=&quot;distogram&quot;)    fig.update_layout(height=300)    fig.show().. image:: docs/normal_histogram.png  :scale: 60%  :align: centerInstall========DistoGram is available on PyPi and can be installed with pip:.. code:: console    pip install distogramPlay With Me============You can test this library directly on this`live notebook &lt;https://mybinder.org/v2/gh/maki-nage/distogram/master?urlpath=notebooks%2Fexamples%2Fdistogram.ipynb&gt;`__.Performances=============Distogram is design for fast updates when using python types. The followingnumbers show the results of the benchmark program located in the examples. On a i7-9800X Intel CPU, performances are:============  ==========  =======  ==========Interpreter   Operation   Numpy         Req/s============  ==========  =======  ==========pypy 7.3      update      no          6563311pypy 7.3      update      yes          111318CPython 3.7   update      no           436709CPython 3.7   update      yes          251603============  ==========  =======  ==========On a modest 2014 13&quot; macbook pro, performances are:============  ==========  =======  ==========Interpreter   Operation   Numpy         Req/s============  ==========  =======  ==========pypy 7.3      update      no          3572436pypy 7.3      update      yes           37630CPython 3.7   update      no           112749CPython 3.7   update      yes           81005============  ==========  =======  ==========As you can see, your are encouraged to use pypy with python native types. Pypy'sjit is penalised by numpy native types, causing a huge performance hit. Moreoverthe streaming phylosophy of Distogram is more adapted to python native typeswhile numpy is optimized for batch computations, even with CPython.Credits========Although this code has been written by following the aforementioned researchpaper, some parts are also inspired by the implementation from`Carson Farmer &lt;https://github.com/carsonfarmer/streamhist&gt;`__.Thanks to `John Belmonte &lt;https://github.com/belm0&gt;`_ for his help onperformances and accuracy improvements.</longdescription>
</pkgmetadata>