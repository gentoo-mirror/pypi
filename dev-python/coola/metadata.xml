<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># coola&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/durandtibo/coola/actions&quot;&gt;        &lt;img alt=&quot;CI&quot; src=&quot;https://github.com/durandtibo/coola/workflows/CI/badge.svg?event=push&amp;branch=main&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://durandtibo.github.io/coola/&quot;&gt;        &lt;img alt=&quot;CI&quot; src=&quot;https://github.com/durandtibo/coola/workflows/Documentation/badge.svg?event=push&amp;branch=main&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://codecov.io/gh/durandtibo/coola&quot;&gt;        &lt;img alt=&quot;Codecov&quot; src=&quot;https://codecov.io/gh/durandtibo/coola/branch/main/graph/badge.svg&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://codeclimate.com/github/durandtibo/coola/maintainability&quot;&gt;        &lt;img src=&quot;https://api.codeclimate.com/v1/badges/83ebb50e6c6f67b0570d/maintainability&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://codeclimate.com/github/durandtibo/coola/test_coverage&quot;&gt;        &lt;img src=&quot;https://api.codeclimate.com/v1/badges/83ebb50e6c6f67b0570d/test_coverage&quot; /&gt;    &lt;/a&gt;    &lt;br/&gt;    &lt;a href=&quot;https://pypi.org/project/coola/&quot;&gt;        &lt;img alt=&quot;PYPI version&quot; src=&quot;https://img.shields.io/pypi/v/coola&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/coola/&quot;&gt;        &lt;img alt=&quot;Python&quot; src=&quot;https://img.shields.io/pypi/pyversions/coola.svg&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://opensource.org/licenses/BSD-3-Clause&quot;&gt;        &lt;img alt=&quot;BSD-3-Clause&quot; src=&quot;https://img.shields.io/pypi/l/coola&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/psf/black&quot;&gt;        &lt;img  alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://google.github.io/styleguide/pyguide.html#s3.8-comments-and-docstrings&quot;&gt;        &lt;img  alt=&quot;Doc style: google&quot; src=&quot;https://img.shields.io/badge/%20style-google-3666d6.svg&quot;&gt;    &lt;/a&gt;    &lt;br/&gt;    &lt;a href=&quot;https://pepy.tech/project/coola&quot;&gt;        &lt;img  alt=&quot;Downloads&quot; src=&quot;https://static.pepy.tech/badge/coola&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pepy.tech/project/coola&quot;&gt;        &lt;img  alt=&quot;Monthly downloads&quot; src=&quot;https://static.pepy.tech/badge/coola/month&quot;&gt;    &lt;/a&gt;    &lt;br/&gt;&lt;/p&gt;## Overview`coola` is a light Python library that provides simple functions to check in a single line if twocomplex/nested objects are equal or not.`coola` was initially designed to workwith [PyTorch `Tensor`s](https://pytorch.org/docs/stable/tensors.html)and [NumPy `ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html), but itis possible to extend itto [support other data structures](https://durandtibo.github.io/coola/customization).- [Motivation](#motivation)- [Documentation](https://durandtibo.github.io/coola/)- [Installation](#installation)- [Contributing](#contributing)- [API stability](#api-stability)- [License](#license)## MotivationLet's imagine you have the following dictionaries that contain both a PyTorch `Tensor` and aNumPy `ndarray`.You want to check if the two dictionaries are equal or not.By default, Python does not provide an easy way to check if the two dictionaries are equal or not.It is not possible to use the default equality operator `==` because it will raise an error.The `coola` library was developed to fill this gap. `coola` provides a function `objects_are_equal`that can indicate if two complex/nested objects are equal or not.```pythonimport numpyimport torchfrom coola import objects_are_equaldata1 = {'torch': torch.ones(2, 3), 'numpy': numpy.zeros((2, 3))}data2 = {'torch': torch.zeros(2, 3), 'numpy': numpy.ones((2, 3))}objects_are_equal(data1, data2)````coola` also provides a function `objects_are_allclose` that can indicate if two complex/nestedobjects are equal within a tolerance or not.```pythonfrom coola import objects_are_allcloseobjects_are_allclose(data1, data2, atol=1e-6)```Please check the [quickstart page](https://durandtibo.github.io/coola/quickstart) to learn more onhow to use `coola`.## InstallationWe highly recommend installinga [virtual environment](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/).`coola` can be installed from pip using the following command:```shellpip install coola```To make the package as slim as possible, only the minimal packages required to use `coola` areinstalled.To include all the packages, you can use the following command:```shellpip install coola[all]```Please check the [get started page](https://durandtibo.github.io/coola/get_started) to see how toinstall only some specific packages or other alternatives to install the library.## ContributingPlease check the instructions in [CONTRIBUTING.md](.github/CONTRIBUTING.md).## API stability:warning: While `coola` is in development stage, no API is guaranteed to be stable from onerelease to the next.In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release.In practice, this means that upgrading `coola` to a new version will possibly break any code thatwas using the old version of `coola`.## License`coola` is licensed under BSD 3-Clause &quot;New&quot; or &quot;Revised&quot; license available in [LICENSE](LICENSE)file.</longdescription>
</pkgmetadata>