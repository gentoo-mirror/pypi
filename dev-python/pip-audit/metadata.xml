<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pip-audit=========&lt;!--- BADGES: START ---&gt;![CI](https://github.com/pypa/pip-audit/workflows/CI/badge.svg)[![PyPI version](https://badge.fury.io/py/pip-audit.svg)](https://pypi.org/project/pip-audit)[![Packaging status](https://repology.org/badge/tiny-repos/python:pip-audit.svg)](https://repology.org/project/python:pip-audit/versions)[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/pypa/pip-audit/badge)](https://api.securityscorecards.dev/projects/github.com/pypa/pip-audit)&lt;!--- BADGES: END ---&gt;`pip-audit` is a tool for scanning Python environments for packageswith known vulnerabilities. It uses the Python Packaging Advisory Database(https://github.com/pypa/advisory-database) via the[PyPI JSON API](https://warehouse.pypa.io/api-reference/json.html) as a sourceof vulnerability reports.This project is maintained in part by [Trail of Bits](https://www.trailofbits.com/)with support from Google. This is not an official Google or Trail of Bits product.## Index* [Features](#features)* [Installation](#installation)  * [Third-party packages](#third-party-packages)  * [GitHub Actions](#github-actions)  * [`pre-commit` support](#pre-commit-support)* [Usage](#usage)  * [Exit codes](#exit-codes)  * [Dry runs](#dry-runs)* [Examples](#examples)* [Troubleshooting](#troubleshooting)* [Tips and Tricks](#tips-and-tricks)* [Security model](#security-model)* [Licensing](#licensing)* [Contributing](#contributing)* [Code of Conduct](#code-of-conduct)## Features* Support for auditing local environments and requirements-style files* Support for multiple vulnerability services  ([PyPI](https://warehouse.pypa.io/api-reference/json.html#known-vulnerabilities),  [OSV](https://osv.dev/docs/))* Support for emitting  [SBOMs](https://en.wikipedia.org/wiki/Software_bill_of_materials) in  [CycloneDX](https://cyclonedx.org/) XML or JSON* Support for automatically fixing vulnerable dependencies (`--fix`)* Human and machine-readable output formats (columnar, Markdown, JSON)* Seamlessly reuses your existing local `pip` caches## Installation`pip-audit` requires Python 3.7 or newer, and can be installed directly via `pip`:```bashpython -m pip install pip-audit```### Third-party packagesThere are multiple **third-party** packages for `pip-audit`. The matrices and badges belowlist some of them:[![Packaging status](https://repology.org/badge/vertical-allrepos/python:pip-audit.svg)](https://repology.org/project/python:pip-audit/versions)[![Packaging status](https://repology.org/badge/vertical-allrepos/pip-audit.svg)](https://repology.org/project/pip-audit/versions)[![Conda - Platform](https://img.shields.io/conda/pn/conda-forge/pip-audit?logo=anaconda&amp;style=flat)][#conda-forge-package][![Conda (channel only)](https://img.shields.io/conda/vn/conda-forge/pip-audit?logo=anaconda&amp;style=flat&amp;color=orange)][#conda-forge-package][#conda-forge-package]: https://anaconda.org/conda-forge/pip-auditIn particular, `pip-audit` can be installed via `conda`:```bashconda install -c conda-forge pip-audit```Third-party packages are **not** directly supported by this project. Please consult your package manager'sdocumentation for more detailed installation guidance.### GitHub Actions`pip-audit` has [an official GitHub Action](https://github.com/pypa/gh-action-pip-audit)!You can install it from the[GitHub Marketplace](https://github.com/marketplace/actions/gh-action-pip-audit), oradd it to your CI manually:```yamljobs:  pip-audit:    steps:      - uses: pypa/gh-action-pip-audit@v1.0.0        with:          inputs: requirements.txt```See the[action documentation](https://github.com/pypa/gh-action-pip-audit/blob/main/README.md)for more details and usage examples.### `pre-commit` support`pip-audit` has [`pre-commit`](https://pre-commit.com/) support.For example, using `pip-audit` via `pre-commit` to audit a requirements file:```yaml  - repo: https://github.com/pypa/pip-audit    rev: v2.6.0    hooks:      -   id: pip-audit          args: [&quot;-r&quot;, &quot;requirements.txt&quot;]ci:  # Leave pip-audit to only run locally and not in CI  # pre-commit.ci does not allow network calls  skip: [pip-audit]```Any `pip-audit` arguments documented below can be passed.## UsageYou can run `pip-audit` as a standalone program, or via `python -m`:```bashpip-audit --helppython -m pip_audit --help```&lt;!-- @begin-pip-audit-help@ --&gt;```usage: pip-audit [-h] [-V] [-l] [-r REQUIREMENT] [-f FORMAT] [-s SERVICE] [-d]                 [-S] [--desc [{on,off,auto}]] [--cache-dir CACHE_DIR]                 [--progress-spinner {on,off}] [--timeout TIMEOUT]                 [--path PATH] [-v] [--fix] [--require-hashes]                 [--index-url INDEX_URL] [--extra-index-url URL]                 [--skip-editable] [--no-deps] [-o FILE] [--ignore-vuln ID]                 [--disable-pip]                 [project_path]audit the Python environment for dependencies with known vulnerabilitiespositional arguments:  project_path          audit a local Python project at the given path                        (default: None)optional arguments:  -h, --help            show this help message and exit  -V, --version         show program's version number and exit  -l, --local           show only results for dependencies in the local                        environment (default: False)  -r REQUIREMENT, --requirement REQUIREMENT                        audit the given requirements file; this option can be                        used multiple times (default: None)  -f FORMAT, --format FORMAT                        the format to emit audit results in (choices: columns,                        json, cyclonedx-json, cyclonedx-xml, markdown)                        (default: columns)  -s SERVICE, --vulnerability-service SERVICE                        the vulnerability service to audit dependencies                        against (choices: osv, pypi) (default: pypi)  -d, --dry-run         without `--fix`: collect all dependencies but do not                        perform the auditing step; with `--fix`: perform the                        auditing step but do not perform any fixes (default:                        False)  -S, --strict          fail the entire audit if dependency collection fails                        on any dependency (default: False)  --desc [{on,off,auto}]                        include a description for each vulnerability; `auto`                        defaults to `on` for the `json` format. This flag has                        no effect on the `cyclonedx-json` or `cyclonedx-xml`                        formats. (default: auto)  --cache-dir CACHE_DIR                        the directory to use as an HTTP cache for PyPI; uses                        the `pip` HTTP cache by default (default: None)  --progress-spinner {on,off}                        display a progress spinner (default: on)  --timeout TIMEOUT     set the socket timeout (default: 15)  --path PATH           restrict to the specified installation path for                        auditing packages; this option can be used multiple                        times (default: [])  -v, --verbose         run with additional debug logging; supply multiple                        times to increase verbosity (default: 0)  --fix                 automatically upgrade dependencies with known                        vulnerabilities (default: False)  --require-hashes      require a hash to check each requirement against, for                        repeatable audits; this option is implied when any                        package in a requirements file has a `--hash` option.                        (default: False)  --index-url INDEX_URL                        base URL of the Python Package Index; this should                        point to a repository compliant with PEP 503 (the                        simple repository API); this will be resolved by pip                        if not specified (default: None)  --extra-index-url URL                        extra URLs of package indexes to use in addition to                        `--index-url`; should follow the same rules as                        `--index-url` (default: [])  --skip-editable       don't audit packages that are marked as editable                        (default: False)  --no-deps             don't perform any dependency resolution; requires all                        requirements are pinned to an exact version (default:                        False)  -o FILE, --output FILE                        output results to the given file (default: stdout)  --ignore-vuln ID      ignore a specific vulnerability by its vulnerability                        ID; this option can be used multiple times (default:                        [])  --disable-pip         don't use `pip` for dependency resolution; this can                        only be used with hashed requirements files or if the                        `--no-deps` flag has been provided (default: False)```&lt;!-- @end-pip-audit-help@ --&gt;### Exit codesOn completion, `pip-audit` will exit with a code indicating its status.The current codes are:* `0`: No known vulnerabilities were detected.* `1`: One or more known vulnerabilities were found.`pip-audit`'s exit code cannot be suppressed.See [Suppressing exit codes from `pip-audit`](#suppressing-exit-codes-from-pip-audit)for supported alternatives.### Dry runs`pip-audit` supports the `--dry-run` flag, which can be used to control whetheran audit (or fix) step is actually performed.* On its own, `pip-audit --dry-run` skips the auditing step and prints  the number of dependencies that *would have been* audited.* In fix mode, `pip-audit --fix --dry-run` performs the auditing step and prints  out the fix behavior (i.e., which dependencies would be upgraded or skipped)  that *would have been performed*.## ExamplesAudit dependencies for the current Python environment:```$ pip-auditNo known vulnerabilities found```Audit dependencies for a given requirements file:```$ pip-audit -r ./requirements.txtNo known vulnerabilities found```Audit dependencies for a requirements file, excluding system packages:```$ pip-audit -r ./requirements.txt -lNo known vulnerabilities found```Audit dependencies for a local Python project:```$ pip-audit .No known vulnerabilities found````pip-audit` searches the provided path for various Python &quot;project&quot; files. At the moment, only `pyproject.toml` is supported.Audit dependencies when there are vulnerabilities present:```$ pip-auditFound 2 known vulnerabilities in 1 packageName  Version ID             Fix Versions----  ------- -------------- ------------Flask 0.5     PYSEC-2019-179 1.0Flask 0.5     PYSEC-2018-66  0.12.3```Audit dependencies including descriptions:```$ pip-audit --descFound 2 known vulnerabilities in 1 packageName  Version ID             Fix Versions Description----  ------- -------------- ------------ --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Flask 0.5     PYSEC-2019-179 1.0          The Pallets Project Flask before 1.0 is affected by: unexpected memory usage. The impact is: denial of service. The attack vector is: crafted encoded JSON data. The fixed version is: 1. NOTE: this may overlap CVE-2018-1000656.Flask 0.5     PYSEC-2018-66  0.12.3       The Pallets Project flask version Before 0.12.3 contains a CWE-20: Improper Input Validation vulnerability in flask that can result in Large amount of memory usage possibly leading to denial of service. This attack appear to be exploitable via Attacker provides JSON data in incorrect encoding. This vulnerability appears to have been fixed in 0.12.3. NOTE: this may overlap CVE-2019-1010083.```Audit dependencies in JSON format:```$ pip-audit -f json | python -m json.toolFound 2 known vulnerabilities in 1 package[  {    &quot;name&quot;: &quot;flask&quot;,    &quot;version&quot;: &quot;0.5&quot;,    &quot;vulns&quot;: [      {        &quot;id&quot;: &quot;PYSEC-2019-179&quot;,        &quot;fix_versions&quot;: [          &quot;1.0&quot;        ],        &quot;description&quot;: &quot;The Pallets Project Flask before 1.0 is affected by: unexpected memory usage. The impact is: denial of service. The attack vector is: crafted encoded JSON data. The fixed version is: 1. NOTE: this may overlap CVE-2018-1000656.&quot;      },      {        &quot;id&quot;: &quot;PYSEC-2018-66&quot;,        &quot;fix_versions&quot;: [          &quot;0.12.3&quot;        ],        &quot;description&quot;: &quot;The Pallets Project flask version Before 0.12.3 contains a CWE-20: Improper Input Validation vulnerability in flask that can result in Large amount of memory usage possibly leading to denial of service. This attack appear to be exploitable via Attacker provides JSON data in incorrect encoding. This vulnerability appears to have been fixed in 0.12.3. NOTE: this may overlap CVE-2019-1010083.&quot;      }    ]  },  {    &quot;name&quot;: &quot;jinja2&quot;,    &quot;version&quot;: &quot;3.0.2&quot;,    &quot;vulns&quot;: []  },  {    &quot;name&quot;: &quot;pip&quot;,    &quot;version&quot;: &quot;21.3.1&quot;,    &quot;vulns&quot;: []  },  {    &quot;name&quot;: &quot;setuptools&quot;,    &quot;version&quot;: &quot;57.4.0&quot;,    &quot;vulns&quot;: []  },  {    &quot;name&quot;: &quot;werkzeug&quot;,    &quot;version&quot;: &quot;2.0.2&quot;,    &quot;vulns&quot;: []  },  {    &quot;name&quot;: &quot;markupsafe&quot;,    &quot;version&quot;: &quot;2.0.1&quot;,    &quot;vulns&quot;: []  }]```Audit and attempt to automatically upgrade vulnerable dependencies:```$ pip-audit --fixFound 2 known vulnerabilities in 1 package and fixed 2 vulnerabilities in 1 packageName  Version ID             Fix Versions Applied Fix----- ------- -------------- ------------ ----------------------------------------flask 0.5     PYSEC-2019-179 1.0          Successfully upgraded flask (0.5 =&gt; 1.0)flask 0.5     PYSEC-2018-66  0.12.3       Successfully upgraded flask (0.5 =&gt; 1.0)```## TroubleshootingHave you resolved a problem with `pip-audit`? Help us by contributing to thissection!### `pip-audit` shows irrelevant vulnerability reports!In a perfect world, vulnerability feeds would have an infinite signal-to-noiseratio: every vulnerability report would be (1) correct, and (2) applicable toevery use of every dependency.Unfortunately, neither of these is guaranteed: vulnerability feeds are notimmune to extraneous or spam reports, and not all uses of a particulardependency map to all potential classes of vulnerabilities.If your `pip-audit` runs produce vulnerability reports that aren't actionablefor your particular application or use case, you can use the `--ignore-vuln ID`option to ignore specific vulnerability reports. `--ignore-vuln` supportsaliases, so you can use a `GHSA-xxx` or `CVE-xxx` ID instead of a `PYSEC-xxx`ID if the report in question does not have a PYSEC ID.For example, here is how you might ignore GHSA-w596-4wvx-j9j6, which is acommon source of noisy vulnerability reports and false positives for users of[`pytest`](https://github.com/pytest-dev/pytest):```console# Run the audit as normal, but exclude any reports that match GHSA-w596-4wvx-j9j6$ pip-audit --ignore-vuln GHSA-w596-4wvx-j9j6```The `--ignore-vuln ID` option works with all other dependency resolutionand auditing options, meaning that it should function correctly withrequirements-style inputs, alternative vulnerability feeds, and so forth.It can also be passed multiple times, to ignore multiple reports:```console# Run the audit as normal, but exclude any reports that match these IDs$ pip-audit --ignore-vuln CVE-XXX-YYYY --ignore-vuln CVE-ZZZ-AAAA```### `pip-audit` takes longer than I expect!Depending on how you're using it, `pip-audit` may have to perform itsown dependency resolution, which can take roughly as long as `pip install`does for a project. See the [security model](#security-model) for an explanation.You have two options for avoiding dependency resolution: *audit a pre-installedenvironment*, or *ensure that your dependencies are already fully resolved*.If you know that you've already fully configured an environment equivalentto the one that `pip-audit -r requirements.txt` would audit, you can simplyreuse it:```console# Note the absence of any &quot;input&quot; arguments, indicating that the environment is used.$ pip-audit# Optionally filter out non-local packages, for virtual environments:$ pip-audit --local```Alternatively, if your input is fully pinned (and optionally hashed), youcan tell `pip-audit` to skip dependency resolution with either `--no-deps`(pinned without hashes) or `--require-hashes` (pinned including hashes).The latter is equivalent to `pip`'s[hash-checking mode](https://pip.pypa.io/en/stable/cli/pip_install/#hash-checking-mode)and is preferred, since it offers additional integrity.```console# fails if any dependency is not fully pinned$ pip-audit --no-deps -r requirements.txt# fails if any dependency is not fully pinned *or* is missing hashes$ pip-audit --require-hashes -r requirements.txt```## Tips and Tricks### Running against a `pipenv` project`pipenv` uses both a `Pipfile` and `Pipfile.lock` file to track and freeze dependenciesinstead of a `requirements.txt` file. `pip-audit` cannot process the `Pipfile[.lock]`files directly, however, these can be converted to a supported `requirements.txt` filethat `pip-audit` can run against. `pipenv` has a built-in command to convert dependenciesto a `requirements.txt` file (as of [`v2022.4.8`](https://pipenv.pypa.io/en/latest/changelog/#id206)):```console$ pipenv run pip-audit -r &lt;(pipenv requirements)```### Suppressing exit codes from `pip-audit``pip-audit` intentionally does not support internally suppressing its ownexit codes.Users who need to suppress a failing `pip-audit` invocation can useone of the standard shell idioms for doing so:```bashpip-audit || true```or, to exit entirely:```bashpip-audit || exit 0```The exit code can also be captured and handled explicitly:```bashpip-auditexitcode=&quot;${?}&quot;# do something with ${exitcode}```See [Exit codes](#exit-codes) for a list of potential codes that need handling.## Security ModelThis section exists to describe the security assumptions you **can** and **must not**make when using `pip-audit`.TL;DR: **If you wouldn't `pip install` it, you should not `pip audit` it.**`pip-audit` is a tool for auditing Python environments for packages with*known vulnerabilities*. A &quot;known vulnerability&quot; is a publicly reported flaw ina package that, if uncorrected, *might* allow a malicious actor to performunintended actions.`pip-audit` **can** protect you against known vulnerabilities by tellingyou when you have them, and how you should upgrade them. For example,if you have `somepackage==1.2.3` in your environment, `pip-audit` **can** tellyou that it needs to be upgraded to `1.2.4`.You **can** assume that `pip-audit` will make a best effort to *fully resolve*all of your Python dependencies and *either* fully audit each *or* explicitlystate which ones it has skipped, as well as why it has skipped them.`pip-audit` is **not** a static code analyzer. It analyzes dependency trees,not code, and it **cannot** guarantee that arbitrary dependency resolutionsoccur statically. To understand why this is, refer to Dustin Ingram's[excellent post on dependency resolution in Python](https://dustingram.com/articles/2018/03/05/why-pypi-doesnt-know-dependencies/).As such: you **must not** assume that `pip-audit` will **defend** you againstmalicious packages. In particular, it is **incorrect** to treat`pip-audit -r INPUT` as a &quot;more secure&quot; variant of `pip-audit`. For all intentsand purposes, `pip-audit -r INPUT` is functionally equivalent to`pip install -r INPUT`, with a small amount of **non-security isolation** toavoid conflicts with any of your local environments.`pip-audit` is first and foremost a auditing tool for *Python* packages.You **must not** assume that `pip-audit` will detect or flag &quot;transitive&quot;vulnerabilities that might be exposed through Python packages, but are notactually part of the package itself. For example, `pip-audit`'s vulnerabilityinformation sources are unlikely to include an advisory for a vulnerable sharedlibrary that a popular Python package *might* use, since the Python package'sversion is not strongly connected to the shared library's version.## Licensing`pip-audit` is licensed under the Apache 2.0 License.`pip-audit` reuses and modifies examples from[`resolvelib`](https://github.com/sarugaku/resolvelib), which is licensed underthe ISC license.## ContributingSee [the contributing docs](CONTRIBUTING.md) for details.## Code of ConductEveryone interacting with this project is expected to follow the[PSF Code of Conduct](https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md).</longdescription>
</pkgmetadata>