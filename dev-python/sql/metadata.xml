<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===sql===Why?====`DB API 2.0`_ works. ORMs are convenient but sometimes overkill. ``sql`` is alightweight wrapper sitting on top of any DB API 2.0 connection offering apostgres_ like interface which makes working with SQL results bliss.How?====&gt;&gt;&gt; import sqlite3&gt;&gt;&gt; connection = sqlite3.connect(':memory:')&gt;&gt;&gt; import sql&gt;&gt;&gt; bliss = sql.SQL(connection)run---`run` is the method to use when you want to run a query but do not care aboutthe result e.g. to create a table:&gt;&gt;&gt; bliss.run(&quot;CREATE TABLE contributors (firstname VARCHAR, lastname VARCHAR)&quot;) #doctest: +ELLIPSIS&lt;sql.SQL object ...&gt;&gt;&gt;&gt; bliss.run(&quot;INSERT INTO contributors VALUES (?, ?)&quot;, [('Andrew', 'Kuchling'),...                                                      ('James', 'Henstridge'),...                                                      ('Daniele', 'Varrazzo'),...                                                      ('Marc-Andre', 'Lemburg')]) #doctest: +ELLIPSIS&lt;sql.SQL object ...&gt;Nothing impressive so far, creating a cursor and calling executemany would achievethe same result.commit------Added in version `2022.4.0` &gt;&gt;&gt; bliss.run(&quot;INSERT INTO contributors VALUES (?, ?)&quot;, (&quot;Chad&quot;, &quot;Whitacre&quot;)) #doctest: +ELLIPSIS&lt;sql.SQL object ...&gt;&gt;&gt;&gt; bliss.commit() Just because it is shorter than `bliss.connection.commit()``run` returns self so `commit` can be chained&gt;&gt;&gt; bliss.run(&quot;INSERT INTO contributors VALUES (?, ?)&quot;, (&quot;Guido&quot;, &quot;van Rossum&quot;)).commit()one---`one` is the method to use when you know the result is a single row or only careabout one.&gt;&gt;&gt; bliss.one(&quot;SELECT firstname FROM contributors WHERE lastname='Lemburg'&quot;) # doctest: +SKIPu'Marc-Andre'The string, nothing but the string, which in my book beats:&gt;&gt;&gt; cursor = connection.cursor()&gt;&gt;&gt; cursor.execute(&quot;SELECT firstname FROM contributors WHERE lastname='Lemburg'&quot;) # doctest: +ELLIPSIS&lt;sqlite3.Cursor object at ...&gt;&gt;&gt;&gt; cursor.fetchone() # doctest: +SKIP(u'Marc-Andre',)Even better, if the result contains several column, one returns a namedtuple_:&gt;&gt;&gt; bliss.one(&quot;SELECT * FROM contributors WHERE firstname='James'&quot;) # doctest: +SKIPRecord(firstname=u'James', lastname=u'Henstridge')all---`all` is the method to use to retrieve all rows from a query.&gt;&gt;&gt; bliss.all(&quot;SELECT firstname FROM contributors&quot;) #doctest: +SKIP[u'Andrew', u'James', u'Daniele', u'Marc-Andre']It returns a list of namedtuples when appropriate:&gt;&gt;&gt; bliss.all(&quot;SELECT firstname, LENGTH(lastname) AS length FROM contributors&quot;) # doctest: +NORMALIZE_WHITESPACE +SKIP[Record(firstname=u'Andrew', length=8), Record(firstname=u'James', length=10), Record(firstname=u'Daniele', length=8), Record(firstname=u'Marc-Andre', length=7)].. _DB API 2.0: http://www.python.org/dev/peps/pep-0249/.. _postgres: https://postgres-py.readthedocs.org/en/latest/.. _namedtuple: http://docs.python.org/3/library/collections.html#collections.namedtuple</longdescription>
</pkgmetadata>