<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OverviewThe *lime-plotter* application plots data collected from robots inthe First Robotics Competitions and plots them to the screen or to aPNG file.  It can read data from CSV based log files, or via anetworktables server (IE, from a robot over its wireless network).# Usage## InstallationInstall any needed modules and the lime-plotter itself:```pip3 install --user --upgrade frc1678-lime-plotter```Things to plot are specified either via complex command line argumentswith the *-p* switch, or via **easier-to-read-and-write YAMLconfiguration files** (see the example below).# Datasources and loadersThere are a number of ways where *lime-plotter* can get data from inorder to draw on its map:1. CSV log files2. The robot's Network Tables broadcasting3. SVG files4. TimersSome of these data-sources (CSV and robot data) are specified on thecommand line, and others are part of the plot specification file (svggraphics and timers).## Reading from CSV log files*lime-plotter* can be run with a *-L* switch to load CSV files from afile, multiple files, or a directory of files.  For example, to load a CSV file:    lime-plotter -L log.csvOr calling it with a directory will try to get it to load all thefiles from a directory:    lime-plotter -L DIRTable names will be assumed from the CSV file names.## Reading from Robot's FRC network tablesTo continuously download data from a robot's broadcasted networktables, use the *-N* switch to specify the robot's IP address toconnect to, and optionally a *-T* switch to specify a default table toread from.    lime-plotter -N 10.0.0.1 -T nettable(in general, the -T switch shouldn't be needed except in rare cases)### Listing available tables / columns from the robotIn order to list the available variables that can be plotted, you canask lime-plotter to list the variables it can find given the datasource.  This is most helpful when getting information from a robot,but also works with CSV logs.  Here's an example of getting the listof current broadcasted variables from the robot:    lime-plotter -N 10.0.0.1 -l# Configuration documentation Configuration files for *lime-plotter* are stored in YAML formattedconfiguration files.  All data in a YAML file must be contained in a*plots* dictionary keyword, with each sub-keyword being the name of aplot.  Within each plot should be an array of things to plot.further details TBD -- see examples for now# Example configurationThe following are YAML file configuration examples.Also see a complete example in `example-configs/2021-example.yml`## Example single graphThe following example configuration file specifies a single plotcalled *position* and plots two overlayed graphs from the Robot'sdatasets:``` yamlplots:  position:    - x: estimated_x_position      y: estimated_y_position      xmax: 7      xmin: -7      ymax: 7      ymin: -7      fixedAspect: True      title: X/Y Test    - x: profiled_x_goal      y: profiled_y_goal      table: drivetrain_status      # limits the plot to the last 100 points      last: 100```Saving this configuration to xy.yml and running lime-plotter to loadlogs from a *log* directory as follows:    lime-plotter -L log -y xy.yml -o xytest.pngMight produce the following graph:![X/Y Test Graph](./images/xytest.png)## Example multiple graphsTo display multiple plots, configuration files can contain multiplenamed entries.    plots:      velocity:        - y: linear_velocity        - y: angular_velocity          title: Velocity      elevator:        - y: elevator_height          title: elevator HeightAnd run with    lime-plotter -L log -y multiple.yml -o multiple.yngWill produce a graph similar to the following:![Multiple Graphs](./images/multiple.png)## Plotting only a single plot from a config file Note: you can use the -Y flag to plot only a selected set of sectionsof the YAML file.  EG `lime-plotter -L log -y multiple.yml -Y velocity`will plot only the first graph.## Including an svg image (such as a field map)Indicating that a plot is actually a static SVG file to be used as abackground, set the plot's `data_source` to `svg` inside a plot:    plots:      - data_source: svg        file: 2020map.svg        xmax: 629.25 # scale svg to these dimensions        ymax: 323.25 # (2020 dimensions in inches)        alpha: .5In general, the SVG plotter is not a full featured SVG but can plotbasic SVG lines.  Anything else likely won't work.As an example, here's a copy of the [FRC 2020 map] as a plottable SVG:[FRC 2020 map]: ./images/2020map.svg### Including built in mapsThe following map file names can be specified without actually havinga file present, as they're included in the package data:- 2021.svg- 2020map.svg      (just the playing field)- 2020map-rev.svg  (reverses the playing field top to bottom)- 2020map-full.svg (the full field with human areas)- 2019map.svg## adding offsets for your robot's starting positionWhen your robot starts at a point in the field, you can adjust it's`xoff` and `yoff` values to set the offsets into the field, with `0,0`being in the bottom left.```plots:  position:    - x: Robot X      y: Robot Y      xoff: 100      yoff: 50      fixedAspect: true```# AnimationWhen plotting from *networktables* (-N) or with the *-a* switch applied,a window will open that will animate the data flowing over time (livein the case of *networktables*).  You can use the *-f* switch tochange the frame rate (when graphing CSV files, it'll draw faster withhigher values -- the default is 20; when drawing from network tablesit'll use this value as the polling frequency, and should be set tothe same number of milliseconds that the robot is using to update tables).## Time markersA final datasource is &quot;time markers&quot;, which draws a small numberedcircle every N seconds.  It is configured like follows to add positionannotations to an existing plot:```plots:  timemarkers:    # plot the regular robot x/y coordinates    - x: Robot X      y: Robot Y      fixedAspect: true    # Plot a larger (size 20) dot every 1 second ontop the Robot X/Y marks    - data_source: timer      marker_size: 20      x: Robot X      y: Robot Y      delta: 1```# Notes on operating system support:## Note on linux:The default install path is `~/.local/bin/`; make sure that's in yourpath or you can call it from there using `~/.local/bin/lime-plotter`.## Notes on windows:Windows installs python scripts differently.  The executable is`lime-plotter.exe` and is located in`c:\Users\YOU\AppData\Roaming\Python\Python37\Scripts\lime-plotter.exe`## Notes on OSX:It too has a special path -- watch the output of pip3 install to seewhere it gets installed and either call it with the full path name orput that directory in your path.## Running the code from the [lime-plotter code repo](https://github.com/frc1678/lime-plotter)If you clone the lime-plotter repo to run the latest and greatest thatisn't installable yet, this command should get you started:```PYTHONPATH=. python3 frc1678/limeplotter/main.py -y ../lime-plotter-config/mapped.yml```</longdescription>
</pkgmetadata>