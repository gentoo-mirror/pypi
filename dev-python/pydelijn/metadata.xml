<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pydelijn[![PyPI version](https://badge.fury.io/py/pydelijn.svg)](https://pypi.org/project/pydelijn)[![Build Status](https://github.com/emilv2/pydelijn/actions/workflows/ci.yml/badge.svg)](https://github.com/Emilv2/pydelijn/actions/workflows/ci.yml)A Python package to retrieve realtime data of passages at stops of De Lijn, the public transport company in Flanders (Belgium)Main purpose at the moment is to feed a sensor in Home-Assistant**Important note**: a developer account needs to be created at https://data.delijn.be to generate a subscription key for the api's.## Install```bashpip install pydelijn```### Example usage```python&quot;&quot;&quot;Example usage of pydelijn.&quot;&quot;&quot;import asyncioimport aiohttpfrom pydelijn.api import Passagesasync def test_pydelijn():    &quot;&quot;&quot;Example usage of pydelijn.&quot;&quot;&quot;    subscriptionkey = '&lt;put your data.delijn.be subscriptionkey here&gt;'    stopid = 200551    maxpassages = 10    custom_session = aiohttp.ClientSession()    delijndata = Passages(LOOP,                          stopid,                          maxpassages,                          subscriptionkey,                          custom_session,                          True)    await delijndata.get_passages()    await custom_session.close()    print_data(delijndata)def print_data(delijndata):    &quot;&quot;&quot;Pretty Print the data.&quot;&quot;&quot;    for line in delijndata.passages:        print(&quot;----------------------------------------&quot;)        print(&quot;Passage #: %s&quot; % (line['passage']))        print(&quot;Stop Name: %s&quot; % (line['stopname']))        print(&quot;Line Number (technical): %s&quot; % (line['line_number']))        print(&quot;Line Number (public): %s&quot; % (line['line_number_public']))        print(&quot;Line Description: %s&quot; % (line['line_desc']))        print(&quot;Line Transport Type: %s&quot; % (line['line_transport_type']))        print(&quot;Direction: %s&quot; % (line['direction']))        print(&quot;Final Destination: %s&quot; % (line['final_destination']))        print(&quot;Due At (schedule): %s&quot; % (line['due_at_schedule']))        print(&quot;Due At (real-time): %s&quot; % (line['due_at_realtime']))        print(&quot;Due In (min): %s&quot; % (line['due_in_min']))        print(&quot;Line Colour - Front: %s - Hex: %s&quot; % (            line['line_number_colourFront'],            line['line_number_colourFrontHex']))        print(&quot;Line Colour - Back: %s - Hex: %s&quot; % (            line['line_number_colourBack'],            line['line_number_colourBackHex']))        print(&quot;Line Colour - Front Border: %s - Hex: %s&quot; % (            line['line_number_colourFrontBorder'],            line['line_number_colourFrontBorderHex']))        print(&quot;Line Colour - Back Border: %s - Hex: %s&quot; % (            line['line_number_colourBackBorder'],            line['line_number_colourBackBorderHex']))LOOP = asyncio.get_event_loop()LOOP.run_until_complete(test_pydelijn())LOOP.close()</longdescription>
</pkgmetadata>