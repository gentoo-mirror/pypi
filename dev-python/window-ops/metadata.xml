<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Window ops================&lt;!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --&gt;This library is intended to be used as an alternative to`pd.Series.rolling` and `pd.Series.expanding` to gain a speedup by usingnumba optimized functions operating on numpy arrays. There are alsoonline classes for more efficient updates of window statistics.## Install`pip install window-ops`## How to use### TransformationsFor a transformations `n_samples` -\&gt; `n_samples` you can use`{[seasonal_](rolling|expanding)}_{(mean|max|min|std)}` on an array.#### Benchmarks``` pythonpd.__version__```    '1.3.5'``` pythonn_samples = 10_000  # array sizewindow_size = 8  # for rolling operationsseason_length = 7  # for seasonal operationsexecute_times = 10 # number of times each function will be executed```Average times in milliseconds.``` pythontimes.applymap('{:.2f}'.format)```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;window_ops&lt;/th&gt;      &lt;th&gt;pandas&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;rolling_mean&lt;/th&gt;      &lt;td&gt;0.03&lt;/td&gt;      &lt;td&gt;0.43&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;rolling_max&lt;/th&gt;      &lt;td&gt;0.14&lt;/td&gt;      &lt;td&gt;0.57&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;rolling_min&lt;/th&gt;      &lt;td&gt;0.14&lt;/td&gt;      &lt;td&gt;0.58&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;rolling_std&lt;/th&gt;      &lt;td&gt;0.06&lt;/td&gt;      &lt;td&gt;0.54&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;expanding_mean&lt;/th&gt;      &lt;td&gt;0.03&lt;/td&gt;      &lt;td&gt;0.31&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;expanding_max&lt;/th&gt;      &lt;td&gt;0.05&lt;/td&gt;      &lt;td&gt;0.76&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;expanding_min&lt;/th&gt;      &lt;td&gt;0.05&lt;/td&gt;      &lt;td&gt;0.47&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;expanding_std&lt;/th&gt;      &lt;td&gt;0.09&lt;/td&gt;      &lt;td&gt;0.41&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_rolling_mean&lt;/th&gt;      &lt;td&gt;0.05&lt;/td&gt;      &lt;td&gt;3.89&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_rolling_max&lt;/th&gt;      &lt;td&gt;0.18&lt;/td&gt;      &lt;td&gt;4.27&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_rolling_min&lt;/th&gt;      &lt;td&gt;0.18&lt;/td&gt;      &lt;td&gt;3.75&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_rolling_std&lt;/th&gt;      &lt;td&gt;0.08&lt;/td&gt;      &lt;td&gt;4.38&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_expanding_mean&lt;/th&gt;      &lt;td&gt;0.04&lt;/td&gt;      &lt;td&gt;3.18&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_expanding_max&lt;/th&gt;      &lt;td&gt;0.06&lt;/td&gt;      &lt;td&gt;3.29&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_expanding_min&lt;/th&gt;      &lt;td&gt;0.06&lt;/td&gt;      &lt;td&gt;3.28&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_expanding_std&lt;/th&gt;      &lt;td&gt;0.12&lt;/td&gt;      &lt;td&gt;3.89&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;``` pythonspeedups = times['pandas'] / times['window_ops']speedups = speedups.to_frame('times faster')speedups.applymap('{:.0f}'.format)```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;times faster&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;rolling_mean&lt;/th&gt;      &lt;td&gt;15&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;rolling_max&lt;/th&gt;      &lt;td&gt;4&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;rolling_min&lt;/th&gt;      &lt;td&gt;4&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;rolling_std&lt;/th&gt;      &lt;td&gt;9&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;expanding_mean&lt;/th&gt;      &lt;td&gt;12&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;expanding_max&lt;/th&gt;      &lt;td&gt;15&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;expanding_min&lt;/th&gt;      &lt;td&gt;9&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;expanding_std&lt;/th&gt;      &lt;td&gt;4&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_rolling_mean&lt;/th&gt;      &lt;td&gt;77&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_rolling_max&lt;/th&gt;      &lt;td&gt;23&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_rolling_min&lt;/th&gt;      &lt;td&gt;21&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_rolling_std&lt;/th&gt;      &lt;td&gt;52&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_expanding_mean&lt;/th&gt;      &lt;td&gt;78&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_expanding_max&lt;/th&gt;      &lt;td&gt;52&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_expanding_min&lt;/th&gt;      &lt;td&gt;51&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;seasonal_expanding_std&lt;/th&gt;      &lt;td&gt;33&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;### OnlineIf you have an array for which you want to compute a window statisticand then keep updating it as more samples come in you can use theclasses in the `window_ops.online` module. They all have a`fit_transform` method which take the array and return thetransformations defined above but also have an `update` method that takea single value and return the new statistic.#### BenchmarksAverage time in milliseconds it takes to transform the array and perform100 updates.``` pythontimes.to_frame().applymap('{:.2f}'.format)```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;average time (ms)&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;RollingMean&lt;/th&gt;      &lt;td&gt;0.12&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;RollingMax&lt;/th&gt;      &lt;td&gt;0.23&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;RollingMin&lt;/th&gt;      &lt;td&gt;0.22&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;RollingStd&lt;/th&gt;      &lt;td&gt;0.32&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;ExpandingMean&lt;/th&gt;      &lt;td&gt;0.10&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;ExpandingMax&lt;/th&gt;      &lt;td&gt;0.07&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;ExpandingMin&lt;/th&gt;      &lt;td&gt;0.07&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;ExpandingStd&lt;/th&gt;      &lt;td&gt;0.17&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;SeasonalRollingMean&lt;/th&gt;      &lt;td&gt;0.28&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;SeasonalRollingMax&lt;/th&gt;      &lt;td&gt;0.35&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;SeasonalRollingMin&lt;/th&gt;      &lt;td&gt;0.38&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;SeasonalRollingStd&lt;/th&gt;      &lt;td&gt;0.42&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;SeasonalExpandingMean&lt;/th&gt;      &lt;td&gt;0.17&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;SeasonalExpandingMax&lt;/th&gt;      &lt;td&gt;0.14&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;SeasonalExpandingMin&lt;/th&gt;      &lt;td&gt;0.15&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;SeasonalExpandingStd&lt;/th&gt;      &lt;td&gt;0.23&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</longdescription>
</pkgmetadata>