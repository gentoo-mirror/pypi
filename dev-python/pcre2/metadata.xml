<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PCRE2.py: Python bindings for the PCRE2 regular expression libraryThis project contains Python bindings for [PCRE2](https://github.com/PCRE2Project/pcre2).PCRE2 is the revised API for the Perl-compatible regular expressions (PCRE) library created by Philip Hazel.For original source code, see the [official PCRE2 repository](https://github.com/PCRE2Project/pcre2).## InstallationFrom PyPI:```pip install pcre2```If a wheel is not available for your platform, the module will be built from source.Building requires:* `cmake`* C compiler toolchain, such as `gcc` and `make`* `libtool`* Python headers## UsageRegular expressions are compiled with `pcre2.compile()` which accepts both unicode strings and bytes-like objects.This returns a `Pattern` object.Expressions can be compiled with a number of options (combined with the bitwise-or operator) and can be JIT compiled,```python&gt;&gt;&gt; import pcre2&gt;&gt;&gt; expr = r'(?&lt;head&gt;\w+)\s+(?&lt;tail&gt;\w+)'&gt;&gt;&gt; patn = pcre2.compile(expr, options=pcre2.I, jit=True)&gt;&gt;&gt; # Patterns can also be JIT compiled after initialization.&gt;&gt;&gt; patn.jit_compile()```Inspection of `Pattern` objects is done as follows,```python&gt;&gt;&gt; patn.jit_size980&gt;&gt;&gt; patn.name_dict(){1: 'head', 2: 'tail'}&gt;&gt;&gt; patn.options524296&gt;&gt;&gt; # Deeper inspection into options is available.&gt;&gt;&gt; pcre2.CompileOption.decompose(patn.options)[&lt;CompileOption.CASELESS: 0x8&gt;, &lt;CompileOption.UTF: 0x80000&gt;]```Once compiled, `Pattern` objects can be used to match against strings.Matching return a `Match` object, which has several functions to view results,```python&gt;&gt;&gt; subj = 'foo bar buzz bazz'&gt;&gt;&gt; match = patn.match(subj)&gt;&gt;&gt; match.substring()'foo bar'&gt;&gt;&gt; match.start(), match.end()(8, 17)```Substitution is also supported, both from `Pattern` and `Match` objects,```python&gt;&gt;&gt; repl = '$2 $1'&gt;&gt;&gt; patn.substitute(repl, subj)'bar foo buzz bazz'&gt;&gt;&gt; patn.substitute(repl, subj, options=pcre2.G) # Global substitutions are also supported.'bar foo bazz buzz'&gt;&gt;&gt; match.expand(repl)'bar foo buzz bazz'```Additionally, `Pattern` objects support scanning over subjects for all non-overlapping matches,```python&gt;&gt;&gt; for match in patn.scan(subj):...     print(match.substring('head'))...foobuzz```## PerformancePCRE2 provides a fast regular expression library, particularly with JIT compilation enabled.Below are the `regex-redux` benchmark results included in this repository,| Script              | Number of runs | Total time | Real time  | User time   | System time   || ------------------- | -------------- | ---------- | ---------- | ----------- | ------------- || `baseline.py`       |             10 |      3.020 |      0.302 |       0.020 |         0.086 || `vanilla.py`        |             10 |     51.380 |      5.138 |      11.408 |         0.529 || `hand_optimized.py` |             10 |     13.190 |      1.319 |       2.846 |         0.344 || `pcre2_module.py`   |             10 |     13.670 |      1.367 |       2.269 |         0.532 | Script descriptions are as follows,| Script              | Description                                                          || ------------------- | -------------------------------------------------------------------- || `baseline.py`       | Reads input file and outputs stored expected output                  || `vanilla.py`        | Pure Python version                                                  || `hand_optimized.py` | Manually written Python `ctypes` bindings for shared PCRE2 C library || `pcre2_module.py`   | Implementation using Python bindings written here                    |Tests were performed on an M2 Macbook Air.Note that to run benchmarks locally, [Git LFS](https://git-lfs.com/) must be installed to download the input dataset.Additionally, a Python virtual environment must be created, and the package builtwith `make init` and `make build` respectively.For more information on this benchmark, see [The Computer Language Benchmarks Game](https://benchmarksgame-team.pages.debian.net/benchmarksgame/performance/regexredux.html).See source code of benchmark scripts for details and original sources.</longdescription>
</pkgmetadata>