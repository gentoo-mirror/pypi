<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># LabyrinthineA no-dependency library that generates all the mazes you need.![maze](https://raw.githubusercontent.com/robertoschiavone/labyrinthine/master/maze.png)## Installation```bashpip install labyrinthine```## Usage```pythonimport matplotlib.pyplot as pltimport numpy as npfrom labyrinthine import depth_firstmaze = depth_first(size=(31, 21))plt.imshow(np.pad(maze, 1, constant_values=1), cmap=&quot;binary&quot;)plt.axis(&quot;off&quot;)plt.savefig(&quot;maze.png&quot;, bbox_inches=&quot;tight&quot;, pad_inches=0)```## Parameters`depth_first` accepts the following parameters:- `size`: either a pair of `int` specifying width and height of the maze, or a single  `int` for a square one.- `start`: a pair of `int` defining the starting point. Default value is `(0, 0)`, the  top-left corner of the maze.- `seed`: as of Python 3.11, the seed must be one of the following types: `NoneType`,  `int`, `float`, `str`, `bytes`, or `bytearray`. Default value is `None`.The output is an integer matrix of the requested size, where **1** represents a filledcell, thus a wall, and **0** represents an empty cell, thus a passage.&gt; :warning: HEADS UP!&gt;&gt; Due to the nature of the algorithm, it is warmly recommended to use odd width and&gt; height values, so that the resulting matrix doesn't have a vertical and horizontal&gt; border entirely filled with walls.## Development`Makefile` is self-explanatory.</longdescription>
</pkgmetadata>