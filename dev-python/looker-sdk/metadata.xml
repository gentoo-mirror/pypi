<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===========Looker SDK===========The Looker SDK for Python provides a convenient way to communicate with theLooker API available on your Looker server. The library requires python3.6+and is annotated using the typing module.The SDK uses a plug-in architecture (also known as dependency injection) forinitializing that supports run-time specific transports (currently only`RequestsTransport`) and different approaches for managing API authentication(`AuthSession` and `OAuthSession`). The methods and models are generated fromthe Looker API spec by a new code generator developed at Looker.Please `report any issues &lt;https://github.com/looker-open-source/sdk-codegen/issues&gt;`_encountered, and indicate the SDK language in the report.Basic Usage===========.. code-block:: python    import looker_sdk    # For this to work you must either have set environment variables or created a looker.ini as described below in &quot;Configuring the SDK&quot;    sdk = looker_sdk.init40()  # or init31() for the older v3.1 API    my_user = sdk.me()    # output can be treated like a dictionary    print(my_user[&quot;first_name&quot;])    # or a model instance (User in this case)    print(my_user.first_name)    # input methods can take either model instances like WriteUser    sdk.create_user(        body=looker_sdk.models.WriteUser(first_name=&quot;Jane&quot;, last_name=&quot;Doe&quot;)    )    # or plain dictionaries    sdk.create_user(body={&quot;first_name&quot;: &quot;Jane&quot;, &quot;last_name&quot;: &quot;Doe&quot;})Full tutorial=============Go from installation all the way to creating a functional micro-application in this 20-30 minute interactive tutorial.*This tutorial is hosted in Google Colaboratory, an interactive online notebook. You can follow along right in the notebook by clicking the button below.*.. image:: https://colab.research.google.com/assets/colab-badge.svg   :target: https://colab.research.google.com/github/looker-open-source/sdk-codegen/blob/main/python/python-sdk-tutorial.ipynbSample project setup====================Install python 3.8. We highly recommend using`pyenv &lt;https://github.com/pyenv/pyenv#installation&gt;`_ to installdifferent versions of python. Mac users should use`homebrew &lt;https://brew.sh/&gt;`_ to install pyenv:.. code-block:: bash    brew install pyenvLinux users should use.. code-block:: bash    curl https://pyenv.run | bashPut this in your shell configuration script:.. code-block:: bash    export PATH=$PATH:$HOME/.pyenv/bin    eval &quot;$(pyenv init --path)&quot;    eval &quot;$(pyenv init -)&quot;    eval &quot;$(pyenv virtualenv-init -)&quot;Follow the **remaining steps 3 - 5** ofhttps://github.com/pyenv/pyenv#basic-github-checkout otherwise your python3.8installation may break.Now you're ready to install python 3.8:.. code-block:: bash    pyenv install 3.8.2We'll use `pipenv &lt;https://docs.pipenv.org/en/latest/#install-pipenv-today&gt;`_(fantastic virtualenv manager) to manage project dependencies... code-block:: bash    brew install pipenvCreate a project directory.. code-block:: bash    mkdir looker-sdk-exampleSet python3.8 as the base interpreter for this directory.. code-block:: bash    cd looker-sdk-example/    pyenv local 3.8.2Install looker_sdk using pipenv.. code-block:: bash    pipenv --python 3.8.2 install --pre looker_sdkConfiguring the SDK===================The SDK supports configuration through1. an ``.ini`` file on disk2. `setting environment variables &lt;https://github.com/looker-open-source/sdk-codegen#environment-variable-configuration&gt;`_3. providing your own implementation of the ApiSettings class. The latter override the former.**Note**: The ``.ini`` configuration for the Looker SDK is a sampleimplementation intended to speed up the initial development of pythonapplications using the Looker API. See this note on`Securing your SDK Credentials &lt;https://github.com/looker-open-source/sdk-codegen/blob/main/README.md#securing-your-sdk-credentials&gt;`_for warnings about using ``.ini`` files that contain yourAPI credentials in a source code repository or production environment.In order to configure the SDK client, create a &quot;looker.ini&quot; file to referenceduring ``client.setup()``example file:::    [Looker]    # Base URL for API. Do not include /api/* in the url. If hosted on GCP, remove the :19999 leaving just https://your.cloud.looker.com    base_url=https://your.looker.com:19999    # API 3 client id    client_id=YourClientID    # API 3 client secret    client_secret=YourClientSecret    # Set to false if testing locally against self-signed certs. Otherwise leave True    verify_ssl=True**Note**: If the application using the Looker SDK is going to be committed to a version control system, be sure to**ignore** the ``looker.ini`` file so the API credentials aren't unintentionally published.For any ``.ini`` setting you can use an environment variable instead. It takes the form of``LOOKERSDK_&lt;UPPERCASE-SETTING-FROM-INI&gt;`` e.g. ``LOOKERSDK_CLIENT_SECRET``A final option is to provide your own implementation of the ApiSettings class. It is easiest to subclass ``api_settings.ApiSettings`` and override the ``read_config`` function (don't forget a call to ``super().read_config()`` if appropriate, Example below). However, at a minimum your class must implement the `api_settings.PApiSettings` protocol... code-block:: python    import os    import looker_sdk    from looker_sdk import api_settings    class MyApiSettings(api_settings.ApiSettings):        def __init__(self, *args, **kw_args):            self.my_var = kw_args.pop(&quot;my_var&quot;)            super().__init__(*args, **kw_args)        def read_config(self) -&gt; api_settings.SettingsConfig:            config = super().read_config()            # See api_settings.SettingsConfig for required fields            if self.my_var == &quot;foo&quot;:                config[&quot;client_id&quot;] = os.getenv(&quot;FOO_CLIENT&quot;)                config[&quot;client_secret&quot;] = os.getenv(&quot;FOO_SECRET&quot;)            else:                config[&quot;client_id&quot;] = os.getenv(&quot;BAR_CLIENT&quot;)                config[&quot;client_secret&quot;] = os.getenv(&quot;BAR_SECRET&quot;)            return config    sdk = looker_sdk.init40(config_settings=MyApiSettings(my_var=&quot;foo&quot;))    ...Code example============`See many python sdk examples in our examples repo &lt;https://github.com/looker-open-source/sdk-codegen/tree/main/examples/python&gt;`_Changelog============`Located in our github repo &lt;https://github.com/looker-open-source/sdk-codegen/tree/main/python/CHANGELOG.md&gt;`_</longdescription>
</pkgmetadata>