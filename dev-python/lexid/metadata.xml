<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># [lexid][repo_ref]`lexid` is a micro library to increment lexically ordered numerical ids.Throughout the sequence of ids, this expression will always be true, whether you are dealing with integers or strings:    older_id &lt; newer_idThe left most character/digit is only used to maintain lexical order, so that the position in the sequence is maintained in the remaining digits.Such ids can be useful as build or version numbers, which are often displayed by tooling which does not understand their correct ordering.Project/Repo:[![MIT License][license_img]][license_ref][![Supported Python Versions][pyversions_img]][pyversions_ref][![CalVer 2021.1006][version_img]][version_ref][![PyPI Version][pypi_img]][pypi_ref][![PyPI Downloads][downloads_img]][downloads_ref]Code Quality/CI:[![GitHub CI Status][github_build_img]][github_build_ref][![GitLab CI Status][gitlab_build_img]][gitlab_build_ref][![Type Checked with mypy][mypy_img]][mypy_ref][![Code Coverage][codecov_img]][codecov_ref][![Code Style: sjfmt][style_img]][style_ref]|               Name               |    role           |      since       | until ||----------------------------------|-------------------|------------------|-------|| Manuel Barkhau (mbarkhau@gmail.com) | author/maintainer | 2020-09 | -     |## Usage```$ pip install lexid$ lexid_incr 10011002$ lexid_incr 199922000$ lexid_incr 122$ lexid_incr 1 -n 10022..2829330331...39839944004401...```In Python.```&gt;&gt;&gt; import lexid&gt;&gt;&gt; lexid.incr(&quot;1&quot;)'22'&gt;&gt;&gt; lexid.incr(&quot;0001&quot;)'0002'&gt;&gt;&gt; lexid.incr(&quot;0999&quot;)'11000'```To avoid possible zero truncation issues (e.g. with &quot;0001&quot; -&gt; &quot;1&quot;) and to reduce rollovers, start at a higher number:```&gt;&gt;&gt; lexid.incr(&quot;1001&quot;)'1002'&gt;&gt;&gt; lexid.incr(&quot;1002&quot;)'1003'&gt;&gt;&gt; lexid.incr(&quot;1999&quot;)'22000'```## Lexical IdsThe key thing to look at is how padding may eventually be exhausted.In order to preserve lexical ordering, build numbers are incrementedin a special way. Examples will perhaps illustrate more clearly.```python&quot;0001&quot;&quot;0002&quot;&quot;0003&quot;...&quot;0999&quot;&quot;11000&quot;&quot;11001&quot;...&quot;19998&quot;&quot;19999&quot;&quot;220000&quot;&quot;220001&quot;```What is happening here is that the left-most digit is incrementedearly/preemptively. Whenever the left-most digit would change, the paddingof the id is expanded through a multiplication by 11.```python&gt;&gt;&gt; prev_id  = &quot;0999&quot;&gt;&gt;&gt; num_digits = len(prev_id)&gt;&gt;&gt; num_digits4&gt;&gt;&gt; prev_int = int(prev_id, 10)&gt;&gt;&gt; prev_int999&gt;&gt;&gt; maybe_next_int = prev_int + 1&gt;&gt;&gt; maybe_next_int1000&gt;&gt;&gt; maybe_next_id = f&quot;{maybe_next_int:0{num_digits}}&quot;&gt;&gt;&gt; maybe_next_id&quot;1000&quot;&gt;&gt;&gt; is_padding_ok = prev_id[0] == maybe_next_id[0]&gt;&gt;&gt; is_padding_okFalse&gt;&gt;&gt; if is_padding_ok:...     # normal case...     next_id = maybe_next_id... else:...     # extra padding needed...     next_int = maybe_next_int * 11...     next_id  = str(next_int)&gt;&gt;&gt; next_id&quot;11000&quot;```This behaviour ensures that the following semantic is always preserved:`new_version &gt; old_version`. This will be true, regardless of paddingexpansion. To illustrate the issue this solves, consider what would happenif we did not expand the padding and instead just incremented numerically.```python&quot;0001&quot;&quot;0002&quot;&quot;0003&quot;...&quot;0999&quot;&quot;1000&quot;...&quot;9999&quot;&quot;10000&quot;```Here we eventually run into a build number where the lexical ordering isnot preserved, since `&quot;10000&quot; &gt; &quot;9999&quot; == False` (because the string `&quot;1&quot;`is lexically smaller than `&quot;9&quot;`). With large enough padding this may be anon issue, but it's better to not have to think about it.Just as an example of why lexical ordering is a nice property to have,there are lots of software which read git tags, but which have no logic toparse version strings. This software can nonetheless order the version tagscorrectly using commonly used lexical ordering. At the most basiclevel it can allow you to use the UNIX `sort` command, for example to parseVCS tags.```shell$ printf &quot;v0.9.0\nv0.10.0\nv0.11.0\n&quot; | sortv0.10.0v0.11.0v0.9.0$ printf &quot;v0.9.0\nv0.10.0\nv0.11.0\n&quot; | sort -nv0.10.0v0.11.0v0.9.0$ lexid_incr 0997 -n 5 | sort09980999110001100111002```This sorting even works correctly in JavaScript!```&gt; var versions = [&quot;11002&quot;, &quot;11001&quot;, &quot;11000&quot;, &quot;0999&quot;, &quot;0998&quot;];&gt; versions.sort();[&quot;0998&quot;, &quot;0999&quot;, &quot;11000&quot;, &quot;11001&quot;, &quot;11002&quot;]```[repo_ref]: https://github.com/mbarkhau/lexid[github_build_img]: https://github.com/mbarkhau/lexid/workflows/CI/badge.svg[github_build_ref]: https://github.com/mbarkhau/lexid/actions?query=workflow%3ACI[gitlab_build_img]: https://gitlab.com/mbarkhau/lexid/badges/master/pipeline.svg[gitlab_build_ref]: https://gitlab.com/mbarkhau/lexid/pipelines[codecov_img]: https://gitlab.com/mbarkhau/lexid/badges/master/coverage.svg[codecov_ref]: https://mbarkhau.gitlab.io/lexid/cov[license_img]: https://img.shields.io/badge/License-MIT-blue.svg[license_ref]: https://github.com/mbarkhau/lexid/blob/master/LICENSE[mypy_img]: https://img.shields.io/badge/mypy-checked-green.svg[mypy_ref]: https://mbarkhau.gitlab.io/lexid/mypycov[style_img]: https://img.shields.io/badge/code%20style-%20sjfmt-f71.svg[style_ref]: https://gitlab.com/mbarkhau/straitjacket/[pypi_img]: https://img.shields.io/badge/PyPI-wheels-green.svg[pypi_ref]: https://pypi.org/project/lexid/#files[downloads_img]: https://pepy.tech/badge/lexid/month[downloads_ref]: https://pepy.tech/project/lexid[version_img]: https://img.shields.io/static/v1.svg?label=CalVer&amp;message=2021.1006&amp;color=blue[version_ref]: https://pypi.org/project/pycalver/[pyversions_img]: https://img.shields.io/pypi/pyversions/lexid.svg[pyversions_ref]: https://pypi.python.org/pypi/lexid# Changelog for https://github.com/mbarkhau/lexid## 2021.1006 - Minor packaging updates## 2020.1005 - Initial release (extracted from pycalver)</longdescription>
</pkgmetadata>