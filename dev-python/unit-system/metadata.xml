<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://dev.azure.com/l-johnston/unit_system/_apis/build/status/l-johnston.unit_system?branchName=master)](https://dev.azure.com/l-johnston/unit_system/_build/latest?definitionId=8&amp;branchName=master) ![Code Coverage](https://img.shields.io/azure-devops/coverage/l-johnston/unit_system/8) ![Version](https://img.shields.io/pypi/v/unit-system)# `unit_system`The unit_system package provides a way to do physical quantity mathin Python that replicates Mathcad's unit system. The implementationconforms to the [SI standard](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication811e2008.pdf).## Installation```linux$ pip install unit_system```  ## Usage```python&gt;&gt;&gt; from unit_system import Quantity&gt;&gt;&gt; V = Quantity(1, &quot;V&quot;)&gt;&gt;&gt; A = Quantity(1, &quot;A&quot;)&gt;&gt;&gt; 1*V / (1*A)1.0 Ω```  You can load predefined units like the ones in Mathcad.```python&gt;&gt;&gt; from unit_system import *&gt;&gt;&gt; 1*mΩ * 1*A0.001 V```## Documentationhttps://l-johnston.github.io/unit_system/</longdescription>
</pkgmetadata>