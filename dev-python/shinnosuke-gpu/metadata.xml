<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>#Shinnosuke-GPU : Deep learning framework##Descriptions1. Based on Cupy(GPU version)2. Completely realized by Python only3. Keras-like API4. For deep learning studying##Features1. Native to Python2. Keras-like API3. Easy to get start4. Commonly used models are provided: Dense, Conv2D, MaxPooling2D, LSTM, SimpleRNN, etc5. Several basic networks Examples6. Sequential model and Functional model are implemented7. Autograd is supported ##InstallationUsing pip:`$ pip install shinnosuke-gpu`##Supports### Two model types:1.**Sequential**```pythonfrom shinnosuke.models import Sequentialfrom shinnosuke.layers.FC import Densem=Sequential()m.add(Dense(500,activation='relu',n_in=784))m.add(Dense(10,activation='softmax'))m.compile(optimizer='sgd',loss='sparse_categorical_crossentropy',learning_rate=0.1)m.fit(trainX,trainy,batch_size=512,epochs=1,validation_ratio=0.)```2.**Model**```pythonfrom shinnosuke.models import Modelfrom shinnosuke.layers.FC import Densefrom shinnosuke.layers.Base import InputX_input=Input(shape=(None,784))X=Dense(500,activation='relu')(X_input)X=Dense(10,activation='softmax')(X)model=Model(inputs=X_input,outputs=X)model.compile(optimizer='sgd',loss='sparse_categorical_crossentropy',learning_rate=0.1)model.fit(trainX,trainy,batch_size=512,epochs=1,validation_ratio=0.)```### Two basic class:#### - Layer:- Dense- Conv2D- MaxPooling2D- MeanPooling2D- Activation- Input- Dropout- BatchNormalization- TimeDistributed- SimpleRNN- LSTM- GRU (waiting for implemented)- ZeroPadding2D- Operations( includes Add, Minus, Multiply, Matmul, and so on basic operations for Layer and Node)####- Node:- Variable- Constant###Optimizers- StochasticGradientDescent- Momentum- RMSprop- AdaGrad- AdaDelta- AdamWaiting for implemented more###Objectives- MeanSquaredError- MeanAbsoluteError- BinaryCrossEntropy- SparseCategoricalCrossEntropy- CategoricalCrossEntropy###Activations- Relu- Linear- Sigmoid- Tanh- Softmax###Initializations- Zeros- Ones- Uniform- LecunUniform- GlorotUniform- HeUniform- Normal- LecunNormal- GlorotNormal- HeNormal- Orthogonal###Regularizeswaiting for implement.###Utils- get_batches (generate mini-batch)- to_categorical (convert inputs to one-hot vector/matrix)- concatenate (concatenate Nodes that have the same shape in specify axis)- pad_sequences (pad sequences to the same length)</longdescription>
</pkgmetadata>