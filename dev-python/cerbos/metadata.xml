<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Cerbos Python SDK=================Python client for accessing [Cerbos](https://cerbos.dev).Cerbos is the open core, language-agnostic, scalable authorization solution that makes user permissions and authorization simple to implement and manage by writing context-aware access control policies for your application resources.## UsageThis library is available from PyPI as `cerbos`. It supports both async and non-async modes.```shpip install cerbos```**Making a request**```pythonfrom cerbos.sdk.model import *from cerbos.sdk.client import CerbosClientwith CerbosClient(&quot;https://localhost:3592&quot;, debug=True, tls_verify=False) as c:    p = Principal(        &quot;john&quot;,        roles={&quot;employee&quot;},        policy_version=&quot;20210210&quot;,        attr={&quot;department&quot;: &quot;marketing&quot;, &quot;geography&quot;: &quot;GB&quot;, &quot;team&quot;: &quot;design&quot;},    )    # Check a single action on a single resource    r = Resource(        &quot;XX125&quot;,        &quot;leave_request&quot;,        policy_version=&quot;20210210&quot;,        attr={            &quot;id&quot;: &quot;XX125&quot;,            &quot;department&quot;: &quot;marketing&quot;,            &quot;geography&quot;: &quot;GB&quot;,            &quot;team&quot;: &quot;design&quot;,            &quot;owner&quot;: &quot;john&quot;,        },    )    allowed = c.is_allowed(&quot;view:public&quot;, p, r)    print(allowed)    # Get the query plan for &quot;view&quot; action    rd = ResourceDesc(&quot;leave_request&quot;, policy_version=&quot;20210210&quot;)    plan = c.plan_resources(&quot;view&quot;, p, rd)    print(plan.filter.to_json())```**Async usage**```pythonfrom cerbos.sdk.model import *from cerbos.sdk.client import AsyncCerbosClientasync with AsyncCerbosClient(&quot;https://localhost:3592&quot;, debug=True, tls_verify=False) as c:    ...    # Check a single action on a single resource    ...    allowed = await c.is_allowed(&quot;view:public&quot;, p, r)    print(allowed)    # Get the query plan for &quot;view&quot; action    ...    plan = await c.plan_resources(&quot;view&quot;, p, rd)    print(plan.filter.to_json())```**Connecting to a Unix domain socket**Use `unix+http:///path/to/sock` for HTTP over UDS or `unix+https:///path/to/sock` for HTTPS over UDS.```pythonwith CerbosClient(&quot;unix+https:///var/cerbos.sock&quot;, debug=True, tls_verify=False) as c:  ...```**Testing with [TestContainers](https://github.com/testcontainers/testcontainers-python)**NOTE: Requires `cerbos[testcontainers]` dependency to be installed.```pythonfrom cerbos.sdk.client import CerbosClientfrom cerbos.sdk.container import CerbosContainercontainer = CerbosContainer()policy_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), &quot;store&quot;)container.with_volume_mapping(policy_dir, &quot;/policies&quot;)with container:    container.wait_until_ready()    host = container.http_host()    with CerbosClient(host) as c:        ...```See the tests available in the `tests` directory for more examples.## Get help- Visit the [Cerbos website](https://cerbos.dev)- Read the [documentation](https://docs.cerbos.dev)- [Join the Cerbos community on Slack](http://go.cerbos.io/slack)- Email us at help@cerbos.dev</longdescription>
</pkgmetadata>