<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>#### This project is forked from https://github.com/polkascan/py-scale-codec# Python Polymath SCALE Codec[![Latest Version](https://img.shields.io/pypi/v/polymath-scalecodec.svg)](https://pypi.org/project/polymath-scalecodec)[![Supported Python versions](https://img.shields.io/pypi/pyversions/polymath-scalecodec.svg)](https://pypi.org/project/polymath-scalecodec/)Python Polymath SCALE Codec Library## DescriptionMost of the data that the Substrate RPCs output is encoded with the SCALE Codec. This codec is used by the Substrate nodes' internal runtime. In order to get to meaningful dataâ€Šthis data will need to be decoded. The Python SCALE Codec Library will specialize in this task.## Documentationhttps://polkascan.github.io/py-scale-codec/## Installation```bashpip install polymath-scalecodec```## ExamplesDecode a SCALE-encoded Compact\&lt;Balance\&gt;```pythonRuntimeConfiguration().update_type_registry(load_type_registry_preset(&quot;default&quot;))RuntimeConfiguration().update_type_registry(load_type_registry_preset(&quot;kusama&quot;))obj = ScaleDecoder.get_decoder_class('Compact&lt;Balance&gt;', ScaleBytes(&quot;0x130080cd103d71bc22&quot;))obj.decode()print(obj.value)```Encode to Compact\&lt;Balance\&gt; ```pythonRuntimeConfiguration().update_type_registry(load_type_registry_preset(&quot;default&quot;))obj = ScaleDecoder.get_decoder_class('Compact&lt;Balance&gt;')scale_data = obj.encode(2503000000000000000)print(scale_data)```Encode to Vec\&lt;Bytes\&gt;```pythonRuntimeConfiguration().update_type_registry(load_type_registry_preset(&quot;default&quot;))value = ['test', 'vec']obj = ScaleDecoder.get_decoder_class('Vec&lt;Bytes&gt;')scale_data = obj.encode(value)print(scale_data)```Add custom types to type registry```pythonRuntimeConfiguration().update_type_registry(load_type_registry_preset(&quot;default&quot;))custom_types = {    &quot;types&quot;: {        &quot;MyCustomType&quot;: &quot;u32&quot;,        &quot;CustomNextAuthority&quot;: {          &quot;type&quot;: &quot;struct&quot;,          &quot;type_mapping&quot;: [             [&quot;AuthorityId&quot;, &quot;AuthorityId&quot;],             [&quot;weight&quot;, &quot;AuthorityWeight&quot;]          ]        }    }}RuntimeConfiguration().update_type_registry(custom_types)```Or from a custom JSON file```pythonRuntimeConfiguration().update_type_registry(load_type_registry_preset(&quot;default&quot;))RuntimeConfiguration().update_type_registry(load_type_registry_file(&quot;/path/to/type_registry.json&quot;))```## Multiple runtime configurationsBy default a singleton is used to maintain the configuration, for multiple instances: ```python# Kusama runtime configruntime_config_kusama = RuntimeConfigurationObject()runtime_config_kusama.update_type_registry(load_type_registry_preset(&quot;default&quot;))runtime_config_kusama.update_type_registry(load_type_registry_preset(&quot;kusama&quot;))# Polkadot runtime configruntime_config_polkadot = RuntimeConfigurationObject()runtime_config_polkadot.update_type_registry(load_type_registry_preset(&quot;default&quot;))runtime_config_polkadot.update_type_registry(load_type_registry_preset(&quot;polkadot&quot;))# Decode extrinsic using Kusama runtime configurationextrinsic = ScaleDecoder.get_decoder_class(    type_string='Extrinsic',     data=ScaleBytes(extrinsic_data),    metadata=metadata_decoder,     runtime_config=runtime_config_kusama)extrinsic.decode()``` ## Using the type registry updater in your applicationTo ensure the type registries are in sync with the current runtime of the blockchain, you can use the updater function in your application:```pythonfrom scalecodec.updater import update_type_registries# Update type registries with latest version from Github   try:    update_type_registries()except Exception:    pass```This will overwrite the type registry JSON files with the downloaded lastest versions from Github. In case of write permission restrictions it is also possible to always use the remote version on Github with the `use_remote_preset` kwarg:```python# Polkadot runtime configruntime_config_polkadot = RuntimeConfigurationObject()runtime_config_polkadot.update_type_registry(load_type_registry_preset(&quot;default&quot;, use_remote_preset=True))runtime_config_polkadot.update_type_registry(load_type_registry_preset(&quot;polkadot&quot;, use_remote_preset=True))```## Licensehttps://github.com/PolymathNetwork/py-scale-codec/blob/master/LICENSE</longdescription>
</pkgmetadata>