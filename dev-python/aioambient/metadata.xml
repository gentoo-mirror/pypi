<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ðŸŒ¤ aioambient: An async library for Ambient Weather Personal Weather Stations[![CI][ci-badge]][ci][![PyPI][pypi-badge]][pypi][![Version][version-badge]][version][![License][license-badge]][license][![Code Coverage][codecov-badge]][codecov][![Maintainability][maintainability-badge]][maintainability]&lt;a href=&quot;https://www.buymeacoffee.com/bachya1208P&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; height=&quot;41&quot; width=&quot;174&quot;&gt;&lt;/a&gt;`aioambient` is a Python3, asyncio-driven library that interfaces with both the REST andWebsocket APIs provided by [Ambient Weather][ambient-weather].- [Installation](#installation)- [Python Versions](#python-versions)- [API and Application Keys](#api-and-application-keys)- [Usage](#usage)- [Contributing](#contributing)# Installation```bashpip install aioambient```# Python Versions`aioambient` is currently supported on:- Python 3.9- Python 3.10- Python 3.11# API and Application KeysUtilizing `aioambient` requires both an Application Key and an API Key from AmbientWeather. You can generate both from the Profile page in your[Ambient Weather Dashboard][ambient-weather-dashboard].# Usage## REST API```pythonimport asynciofrom datetime import datefrom aiohttp import ClientSessionfrom aioambient import APIasync def main() -&gt; None:    &quot;&quot;&quot;Create the aiohttp session and run the example.&quot;&quot;&quot;    api = API(&quot;&lt;YOUR APPLICATION KEY&gt;&quot;, &quot;&lt;YOUR API KEY&gt;&quot;)    # Get all devices in an account:    await api.get_devices()    # Get all stored readings from a device:    await api.get_device_details(&quot;&lt;DEVICE MAC ADDRESS&gt;&quot;)    # Get all stored readings from a device (starting at a datetime):    await api.get_device_details(&quot;&lt;DEVICE MAC ADDRESS&gt;&quot;, end_date=date(2019, 1, 16))asyncio.run(main())```By default, the library creates a new connection to Ambient Weather with each coroutine.If you are calling a large number of coroutines (or merely want to squeeze out everysecond of runtime savings possible), an [`aiohttp`][aiohttp] `ClientSession` can be used forconnection pooling:```pythonimport asynciofrom datetime import datefrom aiohttp import ClientSessionfrom aioambient import APIasync def main() -&gt; None:    &quot;&quot;&quot;Create the aiohttp session and run the example.&quot;&quot;&quot;    async with ClientSession() as session:        api = API(&quot;&lt;YOUR APPLICATION KEY&gt;&quot;, &quot;&lt;YOUR API KEY&gt;&quot;)        # Get all devices in an account:        await api.get_devices()        # Get all stored readings from a device:        await api.get_device_details(&quot;&lt;DEVICE MAC ADDRESS&gt;&quot;)        # Get all stored readings from a device (starting at a datetime):        await api.get_device_details(&quot;&lt;DEVICE MAC ADDRESS&gt;&quot;, end_date=date(2019, 1, 16))asyncio.run(main())```Please be aware of Ambient Weather's[rate limiting policies][ambient-weather-rate-limiting].## Websocket API```pythonimport asynciofrom aiohttp import ClientSessionfrom aioambient import Websocketasync def main() -&gt; None:    &quot;&quot;&quot;Create the aiohttp session and run the example.&quot;&quot;&quot;    websocket = Websocket(&quot;&lt;YOUR APPLICATION KEY&gt;&quot;, &quot;&lt;YOUR API KEY&gt;&quot;)    # Note that you can watch multiple API keys at once:    websocket = Websocket(&quot;YOUR APPLICATION KEY&quot;, [&quot;&lt;API KEY 1&gt;&quot;, &quot;&lt;API KEY 2&gt;&quot;])    # Define a method that should be fired when the websocket client    # connects:    def connect_method():        &quot;&quot;&quot;Print a simple &quot;hello&quot; message.&quot;&quot;&quot;        print(&quot;Client has connected to the websocket&quot;)    websocket.on_connect(connect_method)    # Alternatively, define a coroutine handler:    async def connect_coroutine():        &quot;&quot;&quot;Waits for 3 seconds, then print a simple &quot;hello&quot; message.&quot;&quot;&quot;        await asyncio.sleep(3)        print(&quot;Client has connected to the websocket&quot;)    websocket.async_on_connect(connect_coroutine)    # Define a method that should be run upon subscribing to the Ambient    # Weather cloud:    def subscribed_method(data):        &quot;&quot;&quot;Print the data received upon subscribing.&quot;&quot;&quot;        print(f&quot;Subscription data received: {data}&quot;)    websocket.on_subscribed(subscribed_method)    # Alternatively, define a coroutine handler:    async def subscribed_coroutine(data):        &quot;&quot;&quot;Waits for 3 seconds, then print the incoming data.&quot;&quot;&quot;        await asyncio.sleep(3)        print(f&quot;Subscription data received: {data}&quot;)    websocket.async_on_subscribed(subscribed_coroutine)    # Define a method that should be run upon receiving data:    def data_method(data):        &quot;&quot;&quot;Print the data received.&quot;&quot;&quot;        print(f&quot;Data received: {data}&quot;)    websocket.on_data(data_method)    # Alternatively, define a coroutine handler:    async def data_coroutine(data):        &quot;&quot;&quot;Wait for 3 seconds, then print the data received.&quot;&quot;&quot;        await asyncio.sleep(3)        print(f&quot;Data received: {data}&quot;)    websocket.async_on_data(data_coroutine)    # Define a method that should be run when the websocket client    # disconnects:    def disconnect_method(data):        &quot;&quot;&quot;Print a simple &quot;goodbye&quot; message.&quot;&quot;&quot;        print(&quot;Client has disconnected from the websocket&quot;)    websocket.on_disconnect(disconnect_method)    # Alternatively, define a coroutine handler:    async def disconnect_coroutine(data):        &quot;&quot;&quot;Wait for 3 seconds, then print a simple &quot;goodbye&quot; message.&quot;&quot;&quot;        await asyncio.sleep(3)        print(&quot;Client has disconnected from the websocket&quot;)    websocket.async_on_disconnect(disconnect_coroutine)    # Connect to the websocket:    await websocket.connect()    # At any point, disconnect from the websocket:    await websocket.disconnect()asyncio.run(main())```# ContributingThanks to all of [our contributors][contributors] so far!1. [Check for open features/bugs][issues] or [initiate a discussion on one][new-issue].2. [Fork the repository][fork].3. (_optional, but highly recommended_) Create a virtual environment: `python3 -m venv .venv`4. (_optional, but highly recommended_) Enter the virtual environment: `source ./.venv/bin/activate`5. Install the dev environment: `script/setup`6. Code your new feature or bug fix on a new branch.7. Write tests that cover your new functionality.8. Run tests and ensure 100% code coverage: `poetry run pytest --cov aioambient tests`9. Update `README.md` with any new documentation.10. Submit a pull request![aiohttp]: https://github.com/aio-libs/aiohttp[ambient-weather-dashboard]: https://dashboard.ambientweather.net[ambient-weather-rate-limiting]: https://ambientweather.docs.apiary.io/#introduction/rate-limiting[ambient-weather]: https://ambientweather.net[ci-badge]: https://github.com/bachya/aioambient/workflows/CI/badge.svg[ci]: https://github.com/bachya/aioambient/actions[codecov-badge]: https://codecov.io/gh/bachya/aioambient/branch/dev/graph/badge.svg[codecov]: https://codecov.io/gh/bachya/aioambient[contributors]: https://github.com/bachya/aioambient/graphs/contributors[fork]: https://github.com/bachya/aioambient/fork[issues]: https://github.com/bachya/aioambient/issues[license-badge]: https://img.shields.io/pypi/l/aioambient.svg[license]: https://github.com/bachya/aioambient/blob/main/LICENSE[maintainability-badge]: https://api.codeclimate.com/v1/badges/81a9f8274abf325b2fa4/maintainability[maintainability]: https://codeclimate.com/github/bachya/aioambient/maintainability[new-issue]: https://github.com/bachya/aioambient/issues/new[new-issue]: https://github.com/bachya/aioambient/issues/new[pypi-badge]: https://img.shields.io/pypi/v/aioambient.svg[pypi]: https://pypi.python.org/pypi/aioambient[version-badge]: https://img.shields.io/pypi/pyversions/aioambient.svg[version]: https://pypi.python.org/pypi/aioambient</longdescription>
</pkgmetadata>