<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-htmx-autocompleteThis Django app provides a client-side autocomplete component powered by[htmx](https://htmx.org/) featuring multiselect, search and is completely extensible.## Quick start1. Add &quot;autocomplete&quot; to your `INSTALLED_APPS` setting like this:    ```python    # settings.py    INSTALLED_APPS = [        ...        'django.contrib.staticfiles',  # also required        'autocomplete',    ]    ```1. Include the autocomplete urls like this:    ```python    # urls.py    ...    from autocomplete import HTMXAutoComplete    urlpatterns = [        ...        *HTMXAutoComplete.url_dispatcher('ac'),    ]    ```    This will add routes prefixed by `ac` to support component instances.1. Use either the widget or class to create components!    ```python    from django forms    from django.db import models    from autocomplete import HTMXAutoComplete, widgets         # Example models    class Person(models.Model):        name = models.CharField(max_length=60)    class Team(models.Model):        name = models.CharField(max_length=60)        members = models.ManyToManyField(Person)    # Using the widget    class MultipleFormModel(forms.ModelForm):    &quot;&quot;&quot;Multiple select example form using a model&quot;&quot;&quot;        class Meta:            &quot;&quot;&quot;Meta class that configures the form&quot;&quot;&quot;            model = Team            fields = ['name', 'members']            widgets = {                'members': widgets.Autocomplete(                    name='members',                    options=dict(multiselect=True, model=Person)                )            }    # Using the class    class GetItemsMultiAutoComplete(HTMXAutoComplete):        name = &quot;members&quot;        multiselect = True        class Meta:            model = Person    ```1. Make sure your templates include HTMX.   &gt; **Note**   &gt; Bootstrap is included in this example styling, however it is not required.    ```django    {% load autocomplete %}    {% load static %}    &lt;!doctype html&gt;    &lt;html lang=&quot;en&quot;&gt;      &lt;head&gt;        &lt;!-- Bootstrap --&gt;        &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;    integrity=&quot;sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi&quot; crossorigin=&quot;anonymous&quot;&gt;      &lt;/head&gt;      &lt;body&gt;        &lt;h1&gt;Example base html template&lt;/h1&gt;        &lt;!-- Bootstrap --&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;        &lt;!-- htmx --&gt;        &lt;script src=&quot;https://unpkg.com/htmx.org@1.8.3&quot; integrity=&quot;sha384-e2no7T1BxIs3ngCTptBu4TjvRWF4bBjFW0pt7TpxOEkRJuvrjRt29znnYuoLTz9S&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;        &lt;!-- htmx csrf --&gt;        &lt;script&gt;          document.body.addEventListener('htmx:configRequest', (event) =&gt; {            event.detail.headers['X-CSRFToken'] = '{{ csrf_token }}';          });        &lt;/script&gt;      &lt;/body&gt;    &lt;/html&gt;    ```## Customization### StringsThe strings listed in the table below can be overriden by creating the appropriate template in your own project, matching the `autocomplete/strings/{name}.html` pattern.By default all strings are available in both French and English.  | Name              | Description                                                                                                                 | Default English                                                    | Default French                                                      || ----------------- | --------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------ | ------------------------------------------------------------------- || no_results        | Text displayed when no results are found.                                                                                   | No results found.                                                  | Aucun résultat trouvé.                                              || more_results      | When `max_results` is set, text displayed when there are additional results available.                                      | Displaying maximum {{ count }} out of {{ total_results }} results. | Affichage maximum de {{ count }} résultats sur {{ total_results }}. || available_results | Text anounced to sceen readers when results are available.  If max_results is set, the more_results text is spoken instead. | {{ count }} results available.                                     | {{ count }} résultats disponibles.                                  || nothing_selected  | Text anounced to screen readers when there are no selections.                                                               | Nothing selected.                                                  | Rien de sélectionné.                                                |Individual instances can override strings by providing a dictionary of `custom_strings`.```python    class GetItemsMultiAutoComplete(HTMXAutoComplete):        name = &quot;members&quot;        multiselect = True        custom_strings = {            &quot;no_results&quot;: &quot;no results text&quot;,            &quot;more_results&quot;: _(&quot;More results text&quot;)        }                class Meta:            model = Person```</longdescription>
</pkgmetadata>