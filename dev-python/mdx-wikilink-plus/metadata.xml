<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/neurobin/mdx_wikilink_plus.svg?branch=release)](https://travis-ci.org/neurobin/mdx_wikilink_plus)Converts wikilinks (`[[wikilink]]`) to relative links, including support for [GitHub image variant](https://docs.github.com/en/free-pro-team@latest/github/building-a-strong-community/editing-wiki-content#linking-to-images-in-a-repository). Absolute links are kept as is (with an automatic label made from the file path part in the URL if label is not given explicitly).**You must not use this extension with markdown.extensions.wikilinks. This extension is designed to provide the functionalities of markdown.extensions.wikilinks with some extra features. Choose either one.**# Install```bashpip install mdx_wikilink_plus```# Wikilink syntaxThe geneal formats are:1. Without explicit label: `[[wikilink]]`2. With explicit label: `[[ link | label ]]`    - only supported for links not images3. Image: `[[image.ext]]`    - supports: .png, .jpg, .jpeg or .gif4. Image alt text: `[[image.ext|alt=alternate text]]`# Usage`import markdown` then:```pythontext = &quot;[[wikilink]]&quot;md = markdown.Markdown(extensions=['mdx_wikilink_plus'])html = md.convert(text)```# Quick examples`[[/path/to/file-name]]` will become:```html&lt;p&gt;&lt;a class=&quot;wikilink&quot; href=&quot;/path/to/file-name&quot;&gt;File Name&lt;/a&gt;&lt;/p&gt;````[[/path/to/file name.jpg| alt= alt text]]` will become:```html&lt;p&gt;&lt;img alt=&quot;alt text&quot; class=&quot;wikilink-image&quot; src=&quot;/path/to/file-name.jpg&quot; /&gt;&lt;/p&gt;````[[https://www.example.com/example-tutorial]]` will become:```html&lt;p&gt;&lt;a class=&quot;wikilink&quot; href=&quot;https://www.example.com/example-tutorial&quot;&gt;Example Tutorial&lt;/a&gt;&lt;/p&gt;```and `[[https://www.example.com/?a=b&amp;b=c]]` will become:```html&lt;p&gt;&lt;a class=&quot;wikilink&quot; href=&quot;https://www.example.com/?a=b&amp;amp;b=c&quot;&gt;www.example.com&lt;/a&gt;&lt;/p&gt;```## ConfigurationThe configuration options are:Config param | Default | Details------------ | ------- | -------base_url | `''` | Prepended to the file_path part of the URL. A `/` at the end of the base_url will be handled intelligently.end_url | `''` | Appended to the file_path part of the URL. If end_url is given (non-empty), then any `/` at the end of the file_path part in the URL is removed. If the end_url matches the extension of the file_path part, it will be ignored, for example, if end_url is `.html` and the wikilink provided is `[[/path/to/myfile.html]]`, then the URL will be `/path/to/myfile.html` not `/path/to/myfile.html.html`.url_whitespace | `'-'` | Replace all whitespace in the file_path path with this character (string) when building the URL.url_case | `'none'` | Choose case in the file_path. Available options: lowercase, uppercase.label_case | `'titlecase'` | Choose case of the label. Available options: titlecase, capitalize, none. Capitalize will capitalize the first character only.html_class | `'wikilink'` | Set custom HTML classes on the anchor tag. It does not add classes rather it resets any previously set value.image_class | `'wikilink-image'` | Set custom HTML classes on the anchor tag. It does not add classes rather it resets any previously set value.build_url | `mdx_wikilink_plus.build_url` | A callable that returns the URL string. [Default build_url callable](#the-build_url-callable)**None of the configs apply on absolute URLs except html_class and build_url. (Yes, label_case won't work either)**### Configuration through meta dataConfiguration can also be passed through metadata ([markdown.extensions.meta](https://python-markdown.github.io/extensions/meta_data/)). Meta-data consists of a series of keywords and values which must be defined at the beginning of a markdown document.The following example uses recognised metadata parameters:```mdwiki_base_url: /static/wiki_end_url: wiki_url_whitespace: _wiki_url_case: lowercasewiki_label_case: capitalizewiki_html_class: wiki-linkwiki_image_class: wiki-imageThis is the first paragraph of the document.```### An example with configuration:```pythonmd_configs = {                'mdx_wikilink_plus': {                    'base_url': '/static',                    'end_url': '.html',                    'url_case': 'lowercase',                    'html_class': 'a-custom-class',                    #'build_url': build_url, # A callable                    # all of the above config params are optional                },             }text = &quot;&quot;&quot;[[Page Name]][[/path/to/file-name.png|alt=demo image]][[/path/to/file name/?a=b&amp;b=c]]&quot;&quot;&quot;md = markdown.Markdown(extensions=['mdx_wikilink_plus'], extension_configs=md_configs)print(md.convert(text))```The output will be:```html&lt;p&gt;&lt;a class=&quot;a-custom-class&quot; href=&quot;/static/page-name.html&quot;&gt;Page Name&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;demo image&quot; class=&quot;wikilink-image&quot; src=&quot;/static/path/to/file-name.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;a-custom-class&quot; href=&quot;/static/path/to/file-name.html?a=b&amp;amp;b=c&quot;&gt;File Name&lt;/a&gt;&lt;/p&gt;```!!! info    `end_url` is added at the end of the file-path part in the URL.-----# More examplesMore examples are given in the [test markdown code](https://github.com/neurobin/mdx_wikilink_plus/blob/master/mdx_wikilink_plus/test.py) which demonstrates defaults with no config, a config, meta and build_url.## With meta (`markdown.extensions.meta`)If meta is used it must be added to the start of the markdown. eg:```mdwiki_base_url: /localwiki_url_whitespace: _wiki_url_case: lowercasewiki_label_case: capitalizewiki_html_class: wiki-lnkwiki_image_class: wiki-img```# The build_url callableYou can view the default [build_url](https://github.com/neurobin/mdx_wikilink_plus/blob/master/mdx_wikilink_plus/mdx_wikilink_plus.py#L36) function which can be customized in python.</longdescription>
</pkgmetadata>