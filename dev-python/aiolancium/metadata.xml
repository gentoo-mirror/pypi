<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://github.com/giffels/aiolancium/actions/workflows/unittests.yaml/badge.svg)](https://github.com/giffels/aiolancium/actions/workflows/unittests.yaml)[![Verification](https://github.com/giffels/aiolancium/actions/workflows/verification.yaml/badge.svg)](https://github.com/giffels/aiolancium/actions/workflows/verification.yaml)[![codecov](https://codecov.io/gh/giffels/aiolancium/branch/main/graph/badge.svg)](https://codecov.io/gh/giffels/aiolancium)[![Documentation Status](https://readthedocs.org/projects/aiolancium/badge/?version=latest)](https://aiolancium.readthedocs.io/en/latest/?badge=latest)[![PyPI version](https://badge.fury.io/py/aiolancium.svg)](https://badge.fury.io/py/aiolancium)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/aiolancium.svg?style=flat-square)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/giffels/aiolancium/blob/master/LICENSE)[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)# aiolanciumaiolancium is a simplistic python REST client for the Lancium Compute REST API utilizing asyncio. The client itself hasbeen developed against the [Lancium Compute REST API documentation](https://lancium.github.io/compute-api-docs/api.html).## Installationaiolancium can be installed via [PyPi](https://pypi.org/) using```bashpip install aiolancium```## How to use aiolancium```pythonfrom aiolancium.auth import Authenticatorfrom aiolancium.client import LanciumClient# Authenticate yourself against the API and refresh your token if necessaryauth = Authenticator(api_key=&quot;&lt;your_api_key&gt;&quot;)# Initialise the actual clientclient = LanciumClient(api_url=&quot;https://portal.lancium.com/api/v1/&quot;, auth=auth)# List details about the `lancium/ubuntu` containerawait client.images.list_image(&quot;lancium/ubuntu&quot;)# Create your hellow world first job.job = {&quot;job&quot;: {&quot;name&quot;: &quot;GridKa Test Job&quot;,                   &quot;qos&quot;: &quot;high&quot;,                   &quot;image&quot;: &quot;lancium/ubuntu&quot;,                   &quot;command_line&quot;: 'echo &quot;Hello World&quot;',                   &quot;max_run_time&quot;: 600}}await client.jobs.create_job(**job)# Show all your jobs and their status in Lancium computejobs = await client.jobs.show_jobs()for job in jobs[&quot;jobs&quot;]:    # Retrieve the stdout/stdin output of your finished jobs    await client.jobs.download_job_output(job[&quot;id&quot;], &quot;stdout.txt&quot;)    await client.jobs.download_job_output(job[&quot;id&quot;], &quot;stderr.txt&quot;)        # or download them to disk    await client.download_file_helper(&quot;stdout.txt&quot;, &quot;stdout.txt&quot;, job[&quot;id&quot;])    await client.download_file_helper(&quot;stderr.txt&quot;, &quot;stderr.txt&quot;, job[&quot;id&quot;])# Delete all your jobs in Lancium computefor job in jobs[&quot;jobs&quot;]:    await client.jobs.delete_job(id=job[&quot;id&quot;])```In order to simplify file uploads and downloads to/from the Lancium compute platform, an upload/download helper method has been added to the client. The upload helper takes care of reading a file in binary format and uploading it in 32 MB chunks (default) to the Lancium persistent storage. The download helper downloads a file from the Lancium persistent storage to the local disks.The download helper also supports the download of jobs outputs (stdout.txt, stderr.txt) to local disk (see example above).Unfortunately, streaming of data is not support by the underlying `simple-rest-client`. Thus, the entire file is downloaded to memory before writing to the disk.```pythonfrom aiolancium.auth import Authenticatorfrom aiolancium.client import LanciumClient# Authenticate yourself against the API and refresh your token if necessaryauth = Authenticator(api_key=&quot;&lt;your_api_key&gt;&quot;)# Initialise the actual clientclient = LanciumClient(api_url=&quot;https://portal.lancium.com/api/v1/&quot;, auth=auth)# Upload /bin/bash to /test on the Lancium persistent storageawait client.upload_file_helper(path=&quot;test&quot;, source=&quot;/bin/bash&quot;)# Get information about the uploaded fileawait client.data.get_file_info(&quot;/test&quot;)# Download the file againawait client.download_file_helper(&quot;/test&quot;, destination=&quot;test_downloaded_again&quot;)# Delete the uploaded file again, the arg = {&quot;file-path&quot;: &quot;/test&quot;}await client.data.delete_data_item(**arg)# Alternative approach to delete the uploaded fileawait client.data.delete_data_item(&quot;/test&quot;)```</longdescription>
</pkgmetadata>