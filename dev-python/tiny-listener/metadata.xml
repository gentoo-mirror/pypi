<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://molto0504.github.io/tiny-listener&quot;&gt;&lt;img src=&quot;https://molto0504.github.io/tiny-listener/logo-light.png#only-light&quot; alt=&quot;FastAPI&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;A lightweight event framework&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/molto0504/tiny-listener/actions&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/molto0504/tiny-listener/workflows/Test/badge.svg&quot; alt=&quot;Test&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/tiny-listener&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://badge.fury.io/py/tiny-listener.svg&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/tiny-listener&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/tiny-listener&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;---**Documentation**: &lt;a href=&quot;https://molto0504.github.io/tiny-listener&quot; target=&quot;_blank&quot;&gt; https://molto0504.github.io/tiny-listener &lt;/a&gt;**Source Code**: &lt;a href=&quot;https://github.com/molto0504/tiny-listener&quot; target=&quot;_blank&quot;&gt; https://github.com/molto0504/tiny-listener &lt;/a&gt;--- # IntroductionTiny-listener is a lightweight and flexible event framework.## RequirementsPython 3.8+## Installation```shell$ pip install tiny-listener```## Why use tiny-listener- ✔ Pure Python.- ✔ Lightning-fast, based on native coroutine.- ✔ 100% test coverage.## ExampleConsider we want to write a program keep listening message received from somewhere (e.g. http request or message queue), when message arrived, we want to execute a series of operations in a certain order, e.g.- step 1: save user data to database- step 2: send email to userIn the development process, we often encounter such problems:- the source of step 1 and step 2 may be different- step 2 may depend on the result of step 1, that is to say, step 2 may need to wait for step 1 to complete- there are many messages, many events, and it is not easy to maintainTiny-listener may help you solve these problems:Create a file `example.py` with:```pythonfrom tiny_listener import Event, Listener, Paramclass App(Listener):    async def listen(self):        ctx = self.new_ctx()        ctx.trigger_event(&quot;step 2: send email to alice@tl.com&quot;)        ctx.trigger_event(&quot;step 1: save Alice's data to database&quot;, data={&quot;age&quot;: 35})app = App()@app.on_event(&quot;step 1: save {username}'s data to database&quot;)async def step_1(event: Event, username: Param):    age = event.data[&quot;age&quot;]    print(f&quot;Step-1: Save data done!, {username=}, {age=}&quot;)@app.on_event(&quot;step 2: send email to {email}&quot;)async def step_2(event: Event, email: Param):    await event.wait_event_done(&quot;step_1&quot;)    print(f&quot;Step-2: Send email done!, {email=}&quot;)```Run it:```shell$ tiny-listener example:app&gt;&gt;&gt; Save data done!, username='Alice', age=35&gt;&gt;&gt; Send email done!, email='alice@tl.com'```## How it works* Create your own Listener and listen something(e.g. port, queue ...):```pythonfrom tiny_listener import Event, Listener, Paramclass App(Listener):    async def listen(self):        ctx = self.new_ctx()        ctx.trigger_event(&quot;step 2: send email to alice@tl.com&quot;)        ctx.trigger_event(&quot;step 1: save Alice's data to database&quot;, data={&quot;age&quot;: 35})```* Add event handler to your listener:```pythonapp = App()@app.on_event(&quot;step 1: save {username}'s data to database&quot;)async def step_1(event: Event, username: Param):    age = event.data[&quot;age&quot;]    print(f&quot;Step-1: Save data done!, {username=}, {age=}&quot;)@app.on_event(&quot;step 2: send email to {email}&quot;)async def step_2(event: Event, email: Param):    await event.wait_event_done(&quot;step_1&quot;)    print(f&quot;Step-2: Send email done!, {email=}&quot;)```* Run listener with command:```shell$ tiny-listener example:app```* Tiny-listener will dispatch every event automatically:```shell&gt;&gt;&gt; Step-1: Save data done!, username='Alice', age=35&gt;&gt;&gt; Step-2: Send email done!, email='alice@tl.com'```</longdescription>
</pkgmetadata>