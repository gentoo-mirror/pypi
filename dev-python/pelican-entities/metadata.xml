<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>################pelican-entities################A new generator for `Pelican&lt;http://pelican.readthedocs.org/en/latest/&gt;`_ thatreplaces the default Page and Article generators, allowing the definition ofarbitrary content types, aka, entity types (e.g: projects, events) andassociated indices/direct templates.Similar to nodes in Drupal.Install=======To install the library, you can use`pip&lt;http://www.pip-installer.org/en/latest/&gt;`_.. code-block:: bash    $ pip install pelican-entitiesUsage=====1. Update ``pelicanconf.py``:   1. Add ``entities`` to ``PLUGINS``.          .. code-block:: python                        PLUGINS = ['entities', ...]   2. Disable default page and article generators:          .. code-block:: python                          PAGE_PATHS = []              ARTICLE_PATHS = []              DIRECT_TEMPLATES = []              PAGINATED_TEMPLATES = {}   3. Specify entity types to use in your site and their settings:          .. code-block:: python              ENTITY_TYPES = {                  &lt;type1_name&gt;: {                      PATHS: [&lt;type1_path1&gt;, &lt;type1_path2&gt;, ...],                      EXCLUDES: [...],                      &lt;type1_name&gt;_URL: &quot;...&quot;,                      &lt;type1_name&gt;_SAVE_AS: &quot;...&quot;,                      ...                  },                  &lt;type2_name&gt;: {                      ...                  }              }2. Update theme to use new variables.3. Watch out for incompatible plugins (those that rely on the pages and    article generator signals or on the existence of variables defined by   them).Settings========Settings defined at the ENTITY_TYPES level take precedence over globalones.Changes from default--------------------- Settings for each entity type are defined as the value of the corresponding  key in the ``ENTITY_TYPES`` dictionary.- ``PAGE_PATHS`` and ``ARTICLE_PATHS`` are replaced by ``PATHS``.- ``PAGE_EXCLUDES`` and ``ARTICLE_EXCLUDES`` are replaced by ``EXCLUDES``.- ``PAGE_URL``, ``ARTICLE_URL``, ``PAGE_SAVE_AS`` and ``ARTICLE_SAVE_AS`` replaced by  generic ``&lt;entity_name&gt;_URL`` and ``&lt;entity_name&gt;_SAVE_AS``.- ``ARTICLE_ORDER_BY`` and ``PAGE_ORDER_BY`` are removed in favour of  ``SORTER``.New settings------------- ``DEFAULT_TEMPLATE``: Template to use by default when generating pages for  that entity type.- ``MANDATORY_PROPERTIES``: List of properties that has to be defined for an  entity to be considered valid (by default, just title).- ``SORTER``: Function taking list of entities as argument and which is responsible  for sorting it as desired. Default value is the result of a call to  ``entities.attribute_list_sorter([&quot;date&quot;], reverse=True)``- ``ARCHIVE_TEMPLATE``: Template used for archive pages.- ``CATEGORY_TEMPLATE``: Template used for category pages.- ``TAG_TEMPLATE``: Template used for tag pages.- ``AUTHOR_TEMPLATE``: Template used for author pages.- ``SUBGENERATOR_CLASS``: Optionally define a custom subgenerator class. This should  either be a callable matching the ``entities.EntityGenerator.EntitySubGenerator``  interface or an import path to such a callable which will be imported dynamically.Context/Themes==============New available variables------------------------ Global:  - ``url``: The url of the current page.  - ``entity_type``: Type of the entity associated with this page.  - ``entity_types``: Dict having all declared entity types as keys and their    generators as values.  - ``&lt;entity_type_name&gt;``: For each declared entity type, an object is added to     the context containing:    - ``entities``: All entities of that entity type.    - ``translations``: All translations of that entity type.    - ``tags``: All tags of that entity type.    - ``categories``: All categories of that entity type.    - ``authors``: All authors of that entity type.    - ``drafts``: All drafts of that entity type.    - ``drafts_translations``: All draft translations of that entity type.    - ``hidden_entities``: All hidden entities of that entity type.    - ``hidden_translations``: All hidden translations of that entity type.- Entity page:  - ``entity``: Contains the object describing an entity (replaces ``article``    or ``page``).- Direct templates:  - ``direct``: Variable always equal to True when rendering a direct template.- Tag, category, author pages:  - ``entities``: Replaces ``articles``.  - ``all_entitites``: Replaces ``all_articles``.- Draft pages:  - ``entity``: Replaces ``article``.  - ``all_entities``: Replaces ``all_articles``.- Paginated pages (direct templates or tag, category, author pages):  - ``entities_paginator``: Replaces ``articles_paginator``.  - ``entities_page``: Replaces ``articles_page``.  - ``entities_previous_page``: Replaces ``articles_previous_page``.  - ``entities_next_page``: Replaces ``articles_next_page``.Deleted variables------------------ Entity page:  - ``category``: Access through ``entity.category``.- Direct templates:  - ``dates``: If you want to iterate in the opposite order do it explicitly.Example configuration---------------------This is the configuration I'm using on my site:.. code-block:: python    ENTITY_TYPES = {        &quot;Page&quot;: {            &quot;PATHS&quot;: [&quot;&quot;],            &quot;EXCLUDES&quot;: [&quot;blog&quot;, &quot;projects&quot;],            &quot;PAGE_URL&quot;: &quot;{slug}&quot;,            &quot;PAGE_SAVE_AS&quot;: &quot;{slug}/index.html&quot;,            &quot;PATH_METADATA&quot;: r&quot;(?P&lt;slug&gt;[^/]+)/.*&quot;,            &quot;DIRECT_TEMPLATES&quot;: [&quot;search&quot;],            &quot;SEARCH_SAVE_AS&quot;: &quot;search/index.html&quot;        },        &quot;Article&quot;: {            &quot;PATHS&quot;: [&quot;blog&quot;],            &quot;ARTICLE_URL&quot;: &quot;blog/{category}/{slug}/&quot;,            &quot;ARTICLE_SAVE_AS&quot;: &quot;blog/{category}/{slug}/index.html&quot;,            &quot;PATH_METADATA&quot;: r&quot;.*/(?P&lt;category&gt;[^/]+)/(?P&lt;date&gt;\d{4}/\d{2}/\d{2})/(?P&lt;slug&gt;[^/]+)/.*&quot;,            &quot;DIRECT_TEMPLATES&quot;: [&quot;blog&quot;],            &quot;PAGINATED_TEMPLATES&quot;: {&quot;blog&quot;: None, &quot;blog_category&quot;: None},            &quot;BLOG_SAVE_AS&quot;: &quot;blog/index.html&quot;,            &quot;CATEGORY_TEMPLATE&quot;: &quot;blog_category&quot;,            &quot;CATEGORY_URL&quot;: &quot;blog/{slug}/&quot;,            &quot;CATEGORY_SAVE_AS&quot;: os.path.join(&quot;blog&quot;, &quot;{slug}&quot;, &quot;index.html&quot;),            &quot;FEED_ATOM&quot;: os.path.join(&quot;blog&quot;, &quot;feeds&quot;, &quot;atom.xml&quot;),            &quot;CATEGORY_FEED_ATOM&quot;: os.path.join(&quot;blog&quot;, &quot;feeds&quot;, &quot;{slug}.atom.xml&quot;)        },        &quot;Project&quot;: {            &quot;PATHS&quot;: [&quot;projects&quot;],            &quot;SORTER&quot;: entities.attribute_list_sorter([&quot;date&quot;, &quot;project_start&quot;], reverse=True),            &quot;PROJECT_URL&quot;: &quot;projects/{category}/{slug}/&quot;,            &quot;PROJECT_SAVE_AS&quot;: &quot;projects/{category}/{slug}/index.html&quot;,            &quot;PATH_METADATA&quot;: r&quot;.*/(?P&lt;category&gt;[^/]+)/(?P&lt;slug&gt;[^/]+)/.*&quot;,            &quot;DIRECT_TEMPLATES&quot;: [&quot;projects&quot;],            &quot;PAGINATED_TEMPLATES&quot;: {&quot;projects&quot;: None, &quot;project_category&quot;: None},            &quot;PROJECTS_SAVE_AS&quot;: &quot;projects/index.html&quot;,            &quot;CATEGORY_TEMPLATE&quot;: &quot;project_category&quot;,            &quot;CATEGORY_URL&quot;: 'projects/{slug}/',            &quot;CATEGORY_SAVE_AS&quot;: os.path.join('projects', '{slug}', 'index.html'),            &quot;FEED_ATOM&quot;: os.path.join(&quot;projects&quot;, &quot;feeds&quot;, &quot;atom.xml&quot;),            &quot;CATEGORY_FEED_ATOM&quot;: os.path.join(&quot;projects&quot;, &quot;feeds&quot;, &quot;{slug}.atom.xml&quot;)        }    }For a working example check `my site&lt;http://www.alexjf.net&gt;`_ and `my site's source code&lt;https://github.com/AlexJF/alexjf.net&gt;`_.Extending=========Available signals------------------ ``entity_generator_init``: Initialization of the parent generator. This  generator is responsible for creating the generators for each entity type.- ``entity_generator_finalized``: End of context generation by the parent  generator.- ``entity_writer_finalized``: End of output generation by the parent generator.- ``entity_subgenerator_*``: Signals for the generator of a particular entity  type. These are the same signals used by the article generator.</longdescription>
</pkgmetadata>