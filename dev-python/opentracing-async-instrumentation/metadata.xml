<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version][pypi-img]][pypi] [![Python versions][pyver-img]][pypi] [![Pypi Downloads][pydl-img]][pypi] [![Build Status][ci-img]][ci] [![Coverage Status][cov-img]][cov]# python-opentracing-async-instrumentationA collection of asyncio instrumentation tools to enable tracing with [OpenTracing API](http://opentracing.io).## ModuleMake sure you are running recent enough versions of `pip` and `setuptools`, e.g. before installing your project requirements execute this:```pip install --upgrade &quot;setuptools&gt;=29&quot; &quot;pip&gt;=9&quot;```The module name is `opentracing_async_instrumentation`.## What's inside### Supported client frameworksThe following libraries are instrumented for tracing in this module: * [aiobotocore](https://github.com/aio-libs/aiobotocore) — Asyncio AWS SDK for Python * [aioboto3](https://github.com/terrycain/aioboto3) — Asyncio AWS SDK for Python (uses aiobotocore under the hood) * [aiohttp](https://github.com/aio-libs/aiohttp/) - Asyncio HTTP server and client * [aiomysql](https://github.com/aio-libs/aiomysql)#### Limitations * Only Python 3.5+ is currently supported.### Server instrumentationFor inbound requests a helper function `before_request` is provided for creating middleware for frameworks like aiohttp and possibly Tornado.A middleware is provided for `aiohttp`.### In-process Context PropagationAs part of the OpenTracing 2.0 API, in-process `Span` propagation happens through the newly defined[ScopeManager](https://opentracing-python.readthedocs.io/en/latest/api.html#scope-managers)interface.## UsageThis library provides two types of instrumentation, explicit instrumentationfor server endpoints, and implicit instrumentation for client call sites.### ServerServer endpoints are instrumented by creating a (or using a provided) middleware class that: 1. initializes the specific tracer implementation 2. wraps incoming request handlers into a method that reads the incoming    tracing info from the request and creates a new tracing Span```pythonfrom aiohttp import webfrom opentracing_async_instrumentation.client_hooks import aiohttpserverasync def handler(request):    return web.Response(body='Hello World')app = web.Application()app.router.add_get('/', handler)app.middlewares.append(aiohttpserver.enable_tracing)if __name__ == '__main__':    web.run_app(app)```### ClientClient call sites are instrumented implicitly by executing a set ofavailable `client_hooks` that monkey-patch some API points in severalcommon libraries like `aiohttp` and `aiobotocore`. The initialization ofthose hooks is usually also done from the middleware class's `__init__` method.Usage is via the `client_hooks` interface.```pythonfrom opentracing_async_instrumentation import client_hooksclient_hooks.install_all_patches()```### CustomizationFor the `aiohttp` library, in case you want to set custom tagsto spans depending on content or some metadata of responses,you can set `response_handler_hook`.The hook must be a method with a signature `(response, span)`,where `response` and `span` are positional arguments,so you can use different names for them if needed.```pythonfrom opentracing_async_instrumentation.client_hooks.aiohttpclient import patcherdef hook(response, span):    if not response.ok:        span.set_tag('error', 'true')patcher.set_response_handler_hook(hook)```## DevelopmentTo prepare a development environment please execute the following commands.```bashvirtualenv envsource env/bin/activatemake bootstrapmake test```You can use [tox](https://tox.readthedocs.io) to run tests as well.```bashtox```[ci-img]: https://gitlab.com/midigator/python_opentracing_async_instrumentation/badges/master/pipeline.svg[ci]: https://gitlab.com/midigator/python_opentracing_async_instrumentation[pypi-img]: https://img.shields.io/pypi/v/opentracing_async_instrumentation.svg[pypi]: https://pypi.python.org/pypi/opentracing_async_instrumentation[cov-img]: https://gitlab.com/midigator/python_opentracing_async_instrumentation/badges/master/coverage.svg[cov]: https://gitlab.com/midigator/python_opentracing_async_instrumentation/badges/master/coverage.svg[pyver-img]: https://img.shields.io/pypi/pyversions/opentracing-async-instrumentation.svg[pydl-img]: https://img.shields.io/pypi/dm/opentracing-async-instrumentation.svg</longdescription>
</pkgmetadata>