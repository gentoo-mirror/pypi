<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># filequeryQuery CSV and Parquet files using SQL. This uses DuckDB behind the scenes so any valid SQL for DuckDB will work here.## Demo### CLI![out](https://github.com/MarkyMan4/filequery/assets/37815834/38b6f69b-297f-4913-826e-89ffbfe483b3)### TUI![filequery_tui](https://github.com/MarkyMan4/filequery/assets/37815834/56ac5f6f-a8f1-4bcd-9f7f-0721372592d8)## Installation```bashpipx install filequery```or```bashpip install filequery```## CLI usageRun `filequery --help` to see what options are available.```usage: filequery [-h] [-f FILENAME] [-d FILESDIR] [-q QUERY] [-Q QUERY_FILE] [-o OUT_FILE [OUT_FILE ...]] [-F OUT_FILE_FORMAT] [-D DELIMITER] [-c CONFIG] [-e]options:  -h, --help            show this help message and exit  -f FILENAME, --filename FILENAME                        path to a CSV, Parquet or JSON file  -d FILESDIR, --filesdir FILESDIR                        path to a directory which can contain a combination of CSV, Parquet and JSON files  -q QUERY, --query QUERY                        SQL query to execute against file  -Q QUERY_FILE, --query_file QUERY_FILE                        path to file with query to execute  -o OUT_FILE [OUT_FILE ...], --out_file OUT_FILE [OUT_FILE ...]                        file to write results to instead of printing to standard output  -F OUT_FILE_FORMAT, --out_file_format OUT_FILE_FORMAT                        either csv or parquet, defaults to csv  -D DELIMITER, --delimiter DELIMITER                        delimiter to use when printing result or writing to CSV file  -c CONFIG, --config CONFIG                        path to JSON config file  -e, --editor          run SQL editor UI for exploring data```For basic usage, provide a path to a CSV or Parquet file and a query to execute against it. The table name will be the file name without the extension.```bashfilequery --filename example/test.csv --query 'select * from test'```## TUI usageTo use the TUI for querying your files, use the `-e` flag and provide a path to a file or directory.```bashfilequery -e -f path/to/file.csv```or```bashfilequery -e -f path/to/file_directory```## Examples```bashfilequery --filename example/json_test.json --query 'select nested.nest_id, nested.nest_val from json_test' # query json``````bashfilequery --filesdir example/data --query 'select * from test inner join test1 on test.col1 = test1.col1' # query multiple files in a directory``````bashfilequery --filesdir example/data --query_file example/queries/join.sql # point to a file containing SQL``````bashfilequery --filesdir example/data --query_file example/queries/json_csv_join.sql # SQL file joining data from JSON and CSV files``````bashfilequery --filesdir example/test.csv --query 'select * from test; select sum(col3) from test;' # output multiple query results to multiple files``````bashfilequery --filename example/ndjson_test.ndjson --query 'select id, value, nested.subid, nested.subval from ndjson_test' # query nested JSON in an ndjson file```You can also provide a config file instead of specifying the arguments when running the command.```bashfilequery --config &lt;path to config file&gt;```The config file should be a json file. See example config file contents below.```json{    &quot;filename&quot;: &quot;../example/test.csv&quot;,    &quot;query&quot;: &quot;select col1, col2 from test&quot;}``````json{    &quot;filesdir&quot;: &quot;../example/data&quot;,    &quot;query_file&quot;: &quot;../example/queries/join.sql&quot;,    &quot;out_file&quot;: &quot;result.parquet&quot;,    &quot;out_file_format&quot;: &quot;parquet&quot;}```See the `example` directory in the repo for more examples.## Module usageYou can also use filequery in your own programs. See the example below.```pythonfrom filequery.filedb import FileDbquery = 'select * from test'# read test.csv into a table called &quot;test&quot;fdb = FileDb('example/test.csv')# return QueryResult objectres = fdb.exec_query(query)# formats result as csvprint(str(res))# saves query result to result.csvres.save_to_file('result.csv')# saves query result as parquet filefdb.export_query(query, 'result.parquet', FileType.PARQUET)```## DevelopmentPackages required for distribution should go in `requirements.txt`.To build the wheel:```bashpip install -r requirements-dev.txtmake```## TestingTo test the CLI, create a separate virtual environment perform an editable.```bashpython -m venv test-env. test-env/bin/activatepip install -e .```To run unit tests, stay in the root of the project. The unit tests add `src` to the path so `filequery` can be imported properly.```bashpython tests/test_filequery.py```</longdescription>
</pkgmetadata>