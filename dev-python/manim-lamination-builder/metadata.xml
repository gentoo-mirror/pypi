<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>This is a re-implementation of [lamination-builder](https://csfalcione.github.io/lamination-builder/) that runs in python without dependencies on a browser and focusing on animations and convenient generation of figures. Instead it uses [Manim](https://github.com/ManimCommunity/manim/), and which has several dependencies. # Installation:Please refer to [to manim's installation instructions](https://docs.manim.community/en/stable/installation.html). It and its dependencies are required, with the possible exception of tex. Afterward, you can simply run```pip install manim_lamination_builder```# Example Uses:## render multiple laminations in one image```python -m manim_lamination_builder file.json5```The input format is as follows: A json or json5 list of laminations to be placed in the figure (tilling is a best effort left to right and top to bottom placemen). The blank lamination is permitted.```[  {    polygons:[[&quot;_001&quot;,&quot;_010&quot;,&quot;_100&quot;]],    chords:[[&quot;_1&quot;,&quot;2&quot;]],    points: [&quot;3&quot;],    radix: 4  },  {    &quot;polygons&quot;: [[&quot;0_003&quot;, &quot;0_030&quot;, &quot;0_300&quot;],       [&quot;1_003&quot;, &quot;3_030&quot;, &quot;3_300&quot;],       [&quot;2_003&quot;, &quot;2_030&quot;, &quot;2_300&quot;],       [&quot;3_003&quot;, &quot;1_030&quot;, &quot;1_300&quot;]],     &quot;chords&quot;: [],     &quot;points&quot;: [],     &quot;radix&quot;: 4  },  { radix: 4}]```![please enable images](https://github.com/ForrestHilton/python-lamination-builder/blob/main/contrived_example.png &quot;Render of json above&quot;)## generate and render laminations to verify my research```from manim import tempconfigfrom manim_lamination_builder import generate_unicritical_lamination, Mainwith tempconfig({&quot;quality&quot;: &quot;high_quality&quot;, &quot;preview&quot;: True}):    Main(generate_unicritical_lamination(4, 3)).render()```![please enable images](https://github.com/ForrestHilton/python-lamination-builder/blob/main/example.png &quot;Example Output from my Reasearch&quot;)Alternately, you might want to specify the rotational shape by hand:```from manim_lamination_builder import generate_sibling_portraits, parse_lamination, Mainfrom manim import tempconfigshape = parse_lamination(&quot;&quot;&quot;{polygons:[['_002','_020','_200']],radix:3}&quot;&quot;&quot;).polygons[0]portraits = generate_sibling_portraits(shape)with tempconfig({&quot;quality&quot;: &quot;high_quality&quot;, &quot;preview&quot;: True}):    Main(portraits).render()```## animate the leaves and points moving to their imagesPlease note that the animation does over its duration what sigma_3 does in one step. Moreover, this relies on the understanding that sigma_d is a dilation of angular position with wrapping (by a factor of d). So the forgotten digit is recorded and used to determine how many times to wrap around, which might not always be desirable. ```from manim import Scene, WHITE, tempconfigfrom manim_lamination_builder import (    parse_lamination,    curried_colorize_with_respect_to,    sigma,    AnimateLamination,)class MyScene(Scene):    def construct(self):        initial = parse_lamination(            '{polygons: [[&quot;_200&quot;,&quot;_002&quot;,&quot;_020&quot;]], points:[0.1,&quot;200&quot;,&quot;201&quot;], radix: 3 }'        )        initial.auto_populate()        initial.colorizer = curried_colorize_with_respect_to(initial.polygons[0])        final = initial.apply_function(sigma)        mob = initial.build(3)        mob.submobjects[2].set_color(&quot;#008080&quot;)        self.add(mob)        self.wait(2)        self.play(AnimateLamination(initial, final, start_mobject=mob, run_time=5))        self.wait(2)with tempconfig(    {&quot;quality&quot;: &quot;high_quality&quot;, &quot;preview&quot;: True, &quot;background_color&quot;: WHITE}):    scene = MyScene()    scene.render()```# DevelopmentsFeature requests will be entertained, however this is intended to be used in combination with other tools like latex and your own python scripts. I hope this is a reasonable API.# LicenseLicensed under the The AGPLv3 License (AGPLv3)Copyright (c) 2023 Forrest M. Hilton &lt;forrestmhilton@gmail.com&gt;You should have received a copy of the GNU Affero General Public Licensealong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</longdescription>
</pkgmetadata>