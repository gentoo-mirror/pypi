<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Quiffen========.. contentQuiffen is a Python package for parsing QIF (Quicken Interchange Format) files.The package allows users to both read QIF files and interact with the contents, and also to create a QIF structureand then output to either a QIF file, a CSV of transaction data or a pandas DataFrame.QIF is an old file type, but has its merits because:- It's standardised (apart from dates, but that can be dealt with)  - Unlike CSVs, QIF files all follow the same format, so they don't require special attention when they come from    different sources- It's written in plain textFeatures--------- Import QIF files and manipulate data- Create QIF structures (support for Transactions, Investments, Accounts, Categories, Classes, Splits)- Convert Qif objects to a number of different formats and export (pandas DataFrame, CSV, QIF file)Usage------Here's an example parsing of a QIF file:&gt;&gt;&gt; from quiffen import Qif, QifDataType&gt;&gt;&gt; import decimal&gt;&gt;&gt; qif = Qif.parse('test.qif', day_first=False)&gt;&gt;&gt; qif.accounts{'Quiffen Default Account': Account(name='Quiffen Default Account', desc='The default account created by Quiffen when noother accounts were present')}&gt;&gt;&gt; acc = qif.accounts['Quiffen Default Account']&gt;&gt;&gt; acc.transactions{'Bank': TransactionList(Transaction(date=datetime.datetime(2021, 2, 14, 0 , 0), amount=decimal.Decimal(150.0), ...), ...),'Invst': TransactionList(...)}&gt;&gt;&gt; tr = acc.transactions['Bank'][0]&gt;&gt;&gt; print(tr)Transaction:    Date: 2020-02-14 00:00:00    Amount: 67.5    Payee: T-Mobile    Category: Cell Phone    Split Categories: ['Bills']    Splits: 2 total split(s)&gt;&gt;&gt; qif.categories{'Bills': Category(name='Bills), expense=True, hierarchy='Bills'}&gt;&gt;&gt; bills = qif.categories['Bills']&gt;&gt;&gt; print(bills.render_tree())Bills (root)└─ Cell Phone&gt;&gt;&gt; df = qif.to_dataframe(data_type=QifDataType.TRANSACTIONS)&gt;&gt;&gt; df.head()        date  amount           payee  ...                           memo cleared check_number0 2020-02-14    67.5        T-Mobile  ...                            NaN     NaN          NaN1 2020-02-14    32.0  US Post Office  ...  money back for damaged parcel     NaN          NaN2 2020-12-02   -10.0          Target  ...        two transactions, equal     NaN          NaN3 2020-11-02   -25.0         Walmart  ...          non split transaction       X        123.04 2020-10-02  -100.0      Amazon.com  ...                   test order 1       *          NaN...And here's an example of creating a QIF structure and exporting to a QIF file:&gt;&gt;&gt; import quiffen&gt;&gt;&gt; from datetime import datetime&gt;&gt;&gt; qif = quiffen.Qif()&gt;&gt;&gt; acc = quiffen.Account(name='Personal Bank Account', desc='My personal bank account with Barclays.')&gt;&gt;&gt; qif.add_account(acc)&gt;&gt;&gt; groceries = quiffen.Category(name='Groceries')&gt;&gt;&gt; essentials = quiffen.Category(name='Essentials')&gt;&gt;&gt; groceries.add_child(essentials)&gt;&gt;&gt; qif.add_category(groceries)&gt;&gt;&gt; tr = quiffen.Transaction(date=datetime.now(), amount=150.0)&gt;&gt;&gt; acc.add_transaction(tr, header=quiffen.AccountType.BANK)&gt;&gt;&gt; qif.to_qif()  # If a path is provided, this will save the file too!'!Type:Cat\nNGroceries\nETrue\nIFalse\n^\nNGroceries:Essentials\nETrue\nIFalse\n^\n!Account\nNPersonal Bank Account\nDMypersonal bank account with Barclays.\n^\n!Type:Bank\nD02/07/2021\nT150.0\n^\n'Documentation-------------Documentation can be found at: https://quiffen.readthedocs.io/en/latest/Installation------------Install Quiffen by running:&gt;&gt;&gt; pip install quiffenDependencies------------- `pandas &lt;https://pypi.org/project/pandas/&gt;`_ (optional) for exporting to DataFrames  - The ``to_dataframe()`` method will not work without pandas installed.To-Dos------- Add support for the ``MemorizedTransaction`` object present in QIF files.Contribute----------GitHub pull requests welcome, though if you want to make a major change, please open an issue first for discussion.- Issue Tracker: https://github.com/isaacharrisholt/quiffen/issues- Source Code: https://github.com/isaacharrisholt/quiffenSupport-------If you are having issues, please let me know.License-------The project is licensed under the GNU GPLv3 license.</longdescription>
</pkgmetadata>