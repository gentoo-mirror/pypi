<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cf-clearance[![OSCS Status](https://www.oscs1024.com/platform/badge/vvanglro/cf_clearance.svg?size=small)](https://www.oscs1024.com/project/vvanglro/cf_clearance?ref=badge_small)[![Package version](https://img.shields.io/pypi/v/cf_clearance?color=%2334D058&amp;label=pypi%20package)](https://pypi.python.org/pypi/cf_clearance)[![Supported Python versions](https://img.shields.io/pypi/pyversions/cf_clearance.svg?color=%2334D058)](https://pypi.python.org/pypi/cf_clearance)[![Docker Image versions](https://img.shields.io/docker/v/vvanglro/cf-clearance?color=%2334D058&amp;label=docker%20version)](https://hub.docker.com/r/vvanglro/cf-clearance)Purpose To make a cloudflare v2 challenge pass successfully, Can be use cf_clearance bypassed by cloudflare, However, withthe cf_clearance, make sure you use the same IP and UA as when you got it.## Project Pass Challenge Status[![Every day cron challenge](https://github.com/vvanglro/cf-clearance/actions/workflows/every_day_cron_challenge.yml/badge.svg)](https://github.com/vvanglro/cf-clearance/actions/workflows/every_day_cron_challenge.yml)## WarningPlease use interface mode, You must add headless=False.If you use it on linux or docker, use XVFB.Challenge are not always successful. Please try more and handle exceptions.## Docker UsageRecommended to install using Docker container on Ubuntu server.DockerHub =&gt; https://hub.docker.com/r/vvanglro/cf-clearance```shelldocker run -d --restart always --network host --name cf-clearance vvanglro/cf-clearance:latest \--host 0.0.0.0 --port 8000 --workers 1``````shellcurl http://localhost:8000/challenge -H &quot;Content-Type:application/json&quot; -X POST \-d '{&quot;proxy&quot;: {&quot;server&quot;: &quot;socks5://localhost:7890&quot;}, &quot;timeout&quot;:20, &quot;url&quot;: &quot;https://nowsecure.nl&quot;}'``````pythonimport requestsproxy = &quot;socks5://localhost:7890&quot;resp = requests.post(&quot;http://localhost:8000/challenge&quot;,                     json={&quot;proxy&quot;: {&quot;server&quot;: proxy}, &quot;timeout&quot;: 20,                           &quot;url&quot;: &quot;https://nowsecure.nl&quot;})if resp.json().get(&quot;success&quot;):    ua = resp.json().get(&quot;user_agent&quot;)    cf_clearance_value = resp.json().get(&quot;cookies&quot;).get(&quot;cf_clearance&quot;)    # use cf_clearance, must be same IP and UA    headers = {&quot;user-agent&quot;: ua}    cookies = {&quot;cf_clearance&quot;: cf_clearance_value}    res = requests.get('https://nowsecure.nl', proxies={        &quot;all&quot;: proxy    }, headers=headers, cookies=cookies)    if '&lt;title&gt;Just a moment...&lt;/title&gt;' not in res.text:        print(&quot;cf challenge success&quot;)```## Install```pip install cf-clearance```## UsagePlease make sure it is the latest package.```pip install --upgrade cf-clearance```or```shellpip install git+https://github.com/vvanglro/cf-clearance.git@main```### sync```pythonfrom playwright.sync_api import sync_playwrightfrom cf_clearance import sync_cf_retry, sync_stealthimport requests# not use cf_clearance, cf challenge is failproxies = {    &quot;all&quot;: &quot;socks5://localhost:7890&quot;}res = requests.get('https://nowsecure.nl', proxies=proxies)if '&lt;title&gt;Just a moment...&lt;/title&gt;' in res.text:    print(&quot;cf challenge fail&quot;)# get cf_clearancewith sync_playwright() as p:    browser = p.chromium.launch(headless=False, proxy={&quot;server&quot;: &quot;socks5://localhost:7890&quot;})    page = browser.new_page()    sync_stealth(page, pure=True)    page.goto('https://nowsecure.nl')    res = sync_cf_retry(page)    if res:        cookies = page.context.cookies()        for cookie in cookies:            if cookie.get('name') == 'cf_clearance':                cf_clearance_value = cookie.get('value')                print(cf_clearance_value)        ua = page.evaluate('() =&gt; {return navigator.userAgent}')        print(ua)    else:        print(&quot;cf challenge fail&quot;)    browser.close()# use cf_clearance, must be same IP and UAheaders = {&quot;user-agent&quot;: ua}cookies = {&quot;cf_clearance&quot;: cf_clearance_value}res = requests.get('https://nowsecure.nl', proxies=proxies, headers=headers, cookies=cookies)if '&lt;title&gt;Just a moment...&lt;/title&gt;' not in res.text:    print(&quot;cf challenge success&quot;)```### async```pythonimport asynciofrom playwright.async_api import async_playwrightfrom cf_clearance import async_cf_retry, async_stealthimport requestsasync def main():    # not use cf_clearance, cf challenge is fail    proxies = {        &quot;all&quot;: &quot;socks5://localhost:7890&quot;    }    res = requests.get('https://nowsecure.nl', proxies=proxies)    if '&lt;title&gt;Just a moment...&lt;/title&gt;' in res.text:        print(&quot;cf challenge fail&quot;)    # get cf_clearance    async with async_playwright() as p:        browser = await p.chromium.launch(headless=False, proxy={&quot;server&quot;: &quot;socks5://localhost:7890&quot;})        page = await browser.new_page()        await async_stealth(page, pure=True)        await page.goto('https://nowsecure.nl')        res = await async_cf_retry(page)        if res:            cookies = await page.context.cookies()            for cookie in cookies:                if cookie.get('name') == 'cf_clearance':                    cf_clearance_value = cookie.get('value')                    print(cf_clearance_value)            ua = await page.evaluate('() =&gt; {return navigator.userAgent}')            print(ua)        else:            print(&quot;cf challenge fail&quot;)        await browser.close()    # use cf_clearance, must be same IP and UA    headers = {&quot;user-agent&quot;: ua}    cookies = {&quot;cf_clearance&quot;: cf_clearance_value}    res = requests.get('https://nowsecure.nl', proxies=proxies, headers=headers, cookies=cookies)    if '&lt;title&gt;Just a moment...&lt;/title&gt;' not in res.text:        print(&quot;cf challenge success&quot;)asyncio.get_event_loop().run_until_complete(main())```</longdescription>
</pkgmetadata>