<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>python-httpproblem==================Utility library to work with `RFC7807 Problem Details for HTTPAPIs &lt;https://tools.ietf.org/html/rfc7807&gt;`__.|Build Status| |sonar-quality-gate| |sonar-coverage| |sonar-bugs||sonar-vulnerabilities|This library is very light-weight, with no external dependencies,fully-tested and works with both Python 2 and Python 3. It has specialsupport for `AWS lambda proxy integration outputformat &lt;https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-output-format&gt;`__but it should be easy to map to any other format or framework. Currentlyonly JSON serialization is supported.Installation============::    pip install httpproblemUsage=====Build a Problem dict--------------------The ``problem()`` function that can be used to build a dict with theproblem fields... code:: python    &gt;&gt;&gt; pprint(problem(httplib.BAD_REQUEST, 'You do not have enough credit.', 'Your current balance is 30, but that costs 50.', '/account/12345/msgs/abc'))    {'detail': 'Your current balance is 30, but that costs 50.',     'status': 400,     'title': 'You do not have enough credit.',     'type': '/account/12345/msgs/abc'}You can also use problem extensions.. code:: python    &gt;&gt;&gt; pprint(problem(httplib.BAD_REQUEST, 'You do not have enough credit.', 'Your current balance is 30, but that costs 50.', '/account/12345/msgs/abc', balance=30, accounts=['/account/12345','/account/67890']))    {'accounts': ['/account/12345', '/account/67890'],     'balance': 30,     'detail': 'Your current balance is 30, but that costs 50.',     'status': 400,     'title': 'You do not have enough credit.',     'type': '/account/12345/msgs/abc'}As specified by `Predefined ProblemTypes &lt;https://tools.ietf.org/html/rfc7807#section-4.2&gt;`__:    The “about:blank” URI, when used as a problem type, indicates that    the problem has no additional semantics beyond that of the HTTP    status code...    When “about:blank” is used, the title SHOULD be the same as the    recommended HTTP status phrase for that code (e.g., “Not Found” for    404, and so on), although it MAY be localized to suit client    preferences (expressed with the Accept-Language request header).So if this library will automatically fill the title field if the typeis not present or ``about:blank``... code:: python    &gt;&gt;&gt; problem(404)    {'status': 404, 'title': 'Not Found'}    &gt;&gt;&gt; problem(httplib.BAD_REQUEST, type='about:blank')    {'status': 400, 'type': 'about:blank', 'title': 'Bad Request'}Build a Problem HTTP response-----------------------------The ``problem_http_response()`` function helps to build HTTP responsesusing the format used by the AWS lambda proxy integration. The methodwill automatically fill the ``Content-Type`` header with``application/problem+json`` and the HTTP response code with the status... code:: python    &gt;&gt;&gt; pprint(problem_http_response(httplib.BAD_REQUEST))    {'body': '{&quot;status&quot;: 400, &quot;type&quot;: &quot;about:blank&quot;, &quot;title&quot;: &quot;Bad Request&quot;}',     'headers': {'Content-Type': 'application/problem+json'},     'statusCode': 400}You can map this to other frameworks. For instance for Flask (orWerkzeug):.. code:: python    &gt;&gt;&gt; problem = problem_http_response(400)    &gt;&gt;&gt; print(flask.Response(problem['body'], status=problem['statusCode'], headers=problem['headers']))    &lt;Response 39 bytes [400 BAD REQUEST]&gt;By default, ``json.dumps`` is used to serialize into JSON. This can bechanged by using the ``set_serialize_function``::    &gt;&gt;&gt; httpproblem.set_serialize_method(lambda data: json.dumps(data, indent=4))    &gt;&gt;&gt; print(problem_http_response(400)['body'])    {        &quot;status&quot;: 400,        &quot;title&quot;: &quot;Bad Request&quot;    }Raise a Problem exception-------------------------The ``Problem`` exception class can be used to simplify the errormanagement with try/except. The class has methods to convert it to aProblem dict or HTTP response... code:: python    &gt;&gt;&gt; try:    ...     raise Problem(httplib.BAD_REQUEST)    ... except Problem as e:    ...     print(e.to_dict())    ...    {'status': 400, 'title': 'Bad Request'}The ``to_dict`` and ``to_http_response`` take a ``with_traceback``argument that can be used to include the traceback. You can also set itglobally with the ``activate_traceback()`` function. For securityreasons, the default is to not include the traceback and it isrecommended to not activate it in production... code:: python    &gt;&gt;&gt; # Add traceback by call argument    &gt;&gt;&gt; try:    ...     raise Problem(httplib.BAD_REQUEST)    ... except Problem as e:    ...     pprint(e.to_dict(with_traceback=True))    ...    {'status': 400,     'title': 'Bad Request',     'traceback': 'Traceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;\nProblem: {\'status\': 400, \'title\': \'Bad Request\'}\n'}    &gt;&gt;&gt;    &gt;&gt;&gt; # Add traceback globally    &gt;&gt;&gt; httpproblem.activate_traceback()    &gt;&gt;&gt; try:    ...     raise Problem(httplib.BAD_REQUEST)    ... except Problem as e:    ...     pprint(e.to_dict())    ...    {'status': 400,     'title': 'Bad Request',     'traceback': 'Traceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;\nProblem: {\'status\': 400, \'title\': \'Bad Request\'}\n'}.. |Build Status| image:: https://travis-ci.org/cbornet/python-httpproblem.svg?branch=master   :target: https://travis-ci.org/cbornet/python-httpproblem.. |sonar-quality-gate| image:: https://sonarcloud.io/api/badges/gate?key=python-httpproblem   :target: https://sonarcloud.io/dashboard?id=python-httpproblem.. |sonar-coverage| image:: https://sonarcloud.io/api/badges/measure?key=python-httpproblem&amp;metric=coverage   :target: https://sonarcloud.io/dashboard?id=python-httpproblem.. |sonar-bugs| image:: https://sonarcloud.io/api/badges/measure?key=python-httpproblem&amp;metric=bugs   :target: https://sonarcloud.io/dashboard?id=python-httpproblem.. |sonar-vulnerabilities| image:: https://sonarcloud.io/api/badges/measure?key=python-httpproblem&amp;metric=vulnerabilities   :target: https://sonarcloud.io/dashboard?id=python-httpproblem</longdescription>
</pkgmetadata>