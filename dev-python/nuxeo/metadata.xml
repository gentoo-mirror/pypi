<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Client Library for Nuxeo API----------------------------|Build Status| |Quality| |Coverage|The Nuxeo Python Client is a Python client library for the NuxeoAutomation and REST API. It works with Python 3.6+.This is an ongoing project, supported by Nuxeo.Getting Started---------------The installation is as simple as:.. code:: shell    python -m pip install -U --user nuxeoThe client can make use of the Amazon S3 provider, to install its requirements:.. code:: shell    python -m pip install -U --user &quot;nuxeo[s3]&quot;The client is compatible with OAuth2 mechanism, to install its requirements:.. code:: shell    python -m pip install -U --user &quot;nuxeo[oauth2]&quot;And to install several flavors of requirements:.. code:: shell    python -m pip install -U --user &quot;nuxeo[oauth2, s3]&quot;Import------Then, use the following ``import`` statement to have access to the NuxeoAPI:.. code:: python    from nuxeo.client import NuxeoDocumentation-------------Check out the `API documentation &lt;https://nuxeo.github.io/nuxeo-python-client/latest/&gt;`__.Requirements------------The Nuxeo Python client works only with:-  the Nuxeo Platform &gt;= LTS 2015-  ``requests`` &gt;= 2.12.2 (for unicode authentication)-  ``setuptools`` &gt;= 30.3.0Quick Start-----------This quick start guide will show how to do basics operations using theclient.Connect to the Nuxeo Platform~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The easiest way to connect to the Nuxeo Platform with a basic authenticationis passing a tuple containing the ``username`` and the ``password`` to theclient, like so:.. code:: python    nuxeo = Nuxeo(auth=('Administrator', 'Administrator'))You can then use the ``nuxeo`` object to interact with the Platform. If you wantto use a specific instance, you can specify the ``base_url`` like so:.. code:: python    nuxeo = Nuxeo(        host='http://demo.nuxeo.com/nuxeo/',        auth=('Administrator', 'Administrator')    )Download/Upload Configuration~~~~~~~~~~~~~~~~~~~~~~~~~~~~~In the `nuxeo/constants.py &lt;nuxeo/constants.py&gt;`__ file, you have several constants that areused throughout the client that you can change to fit your needs. Some of them are:-  ``CHECK_PARAMS`` (False by default), to check operation's parameters for each and every HTTP calls.-  ``CHUNK_LIMIT`` (10 MiB by default), the size above which the upload will automatically be chunked.-  ``CHUNK_SIZE`` (8 KiB by default), the size of the chunks when downloading.-  ``MAX_RETRY`` (5 by default), the number of retries for connection error on any HTTP call.-  ``UPLOAD_CHUNK_SIZE`` (20 MiB by default), the size of the chunks when uploading.Run NXQL Queries~~~~~~~~~~~~~~~~You can run queries in NXQL (NXQL is a subset of SQL,you can check how to use it `in the documentation &lt;https://doc.nuxeo.com/nxdoc/nxql/&gt;`__).Here, we are first `fetching a workspace &lt;documents.rst&gt;`__, and then using its``uid`` to build a query which will find all its children that have a ``File``or ``Picture`` type, and are not deleted... code:: python    # Fetch a workspace    ws = nuxeo.documents.get(path='/default-domain/workspaces/ws')    # Build a query using its UID    nxql = (&quot;SELECT * FROM Document WHERE ecm:ancestorId = '{uid}'&quot;            &quot;   AND ecm:primaryType IN ('File', 'Picture')&quot;            &quot;   AND ecm:currentLifeCycleState != 'deleted'&quot;)    query = nxql.format(uid=ws.uid)    # Make the request    search = nuxeo.client.query(query, params={'properties': '*'})    # Get results    entries = search['entries']``entries`` will be a ``list`` containing a ``dict`` for eachelement returned by the query.Usage~~~~~Now that your client is set up, here are pages to help you with themain functions available:-  `Available authentication mechanisms &lt;examples/authentication.rst&gt;`__-  `Manage users and groups &lt;examples/users_and_groups.rst&gt;`__-  `Work with documents &lt;examples/documents.rst&gt;`__-  `Work with directories &lt;examples/directories.rst&gt;`__-  `Work with blobs &lt;examples/blobs.rst&gt;`__-  `Work with comments &lt;examples/comments.rst&gt;`__-  `Run requests &lt;examples/requests.rst&gt;`__-  `Helpers &lt;examples/helpers.rst&gt;`__-  `Useful snippets &lt;examples/snippets.rst&gt;`__-  `Script: Find duplicates &lt;examples/find_duplicates.py&gt;`__-  `Script: Create a live proxy &lt;examples/create_proxy.py&gt;`__You can also check `the  API documentation &lt;http://nuxeo.github.io/nuxeo-python-client/latest/&gt;`__of this Python client for further options.Contributing------------See our `contribution documentation &lt;https://doc.nuxeo.com/x/VIZH&gt;`__.Setup~~~~~.. code:: shell    git clone https://github.com/nuxeo/nuxeo-python-client    cd nuxeo-python-client    python -m pip install -e &quot;.[oauth2, s3]&quot;Test~~~~A Nuxeo Platform instance needs to be running on``http://localhost:8080/nuxeo`` for the tests to be run, and then:.. code:: shell    python -m pip install -U --user tox    toxSentry======We use Sentry to catch unhandled errors from tests.You can tweak it before running ``tox``.It can be disabled:.. code:: shell    export SKIP_SENTRY=1You can also customize the Sentry DSN for your own team:.. code:: shell    export SENTRY_DSN=&quot;XXX&quot;And customize the Sentry environment too:.. code:: shell    # Note that the default value is &quot;testing&quot;    export SENTRY_ENV=&quot;testing&quot;Deploying~~~~~~~~~Releases are fully automated, have a look at that `GitHub Action &lt;https://github.com/nuxeo/nuxeo-python-client/actions?query=workflow%3ARelease&gt;`__.Reporting Issues~~~~~~~~~~~~~~~~You can follow the developments in the Nuxeo Python Client project ofour JIRA bug tracker: `NXPY &lt;https://jira.nuxeo.com/browse/NXPY&gt;`__.You can report issues on`answers.nuxeo.com &lt;http://answers.nuxeo.com&gt;`__.License-------`Apache License 2.0 &lt;https://www.apache.org/licenses/LICENSE-2.0.txt&gt;`__Copyright (c) NuxeoAbout Nuxeo-----------Nuxeo dramatically improves how content-based applications are built,managed and deployed, making customers more agile, innovative andsuccessful. Nuxeo provides a next generation, enterprise ready platformfor building traditional and cutting-edge content oriented applications.Combining a powerful application development environment with SaaS-basedtools and a modular architecture, the Nuxeo Platform and Productsprovide clear business value to some of the most recognizable brandsincluding Verizon, Electronic Arts, Sharp, FICO, the U.S. Navy, andBoeing. Nuxeo is headquartered in New York and Paris. More informationis available at `www.nuxeo.com &lt;http://www.nuxeo.com/&gt;`__... |Build Status| image:: https://github.com/nuxeo/nuxeo-python-client/workflows/Unit%20tests/badge.svg   :target: https://github.com/nuxeo/nuxeo-python-client/actions?query=workflow%3A%22Unit+tests%22.. |Quality| image:: https://github.com/nuxeo/nuxeo-python-client/workflows/Code%20quality/badge.svg   :target: https://github.com/nuxeo/nuxeo-python-client/actions?query=workflow%3A%22Code+quality%22.. |Coverage| image:: https://codecov.io/gh/nuxeo/nuxeo-python-client/branch/master/graph/badge.svg?token=WuxUo8U8FK   :target: https://codecov.io/gh/nuxeo/nuxeo-python-client</longdescription>
</pkgmetadata>