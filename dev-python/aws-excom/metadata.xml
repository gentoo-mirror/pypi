<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `aws-excom`An interactive wrapper around `aws ecs execute-command`.## InstallationRequires [AWS CLI](https://aws.amazon.com/cli/) and [AWS CLI Session Manager](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html)to be installed on the system and configured with appropriate credentials.Then, to install the script:```shellpip install aws-excom```## Usage```shellaws-excom```Then follow the prompts to start running commands.After running once, you can run:```shellaws-excom --last```to skip the interactive part of the script and immediately replay the last command you constructed. This may be useful if you accidentally exit a running session.By default, all AWS commands will use your default profile and region. To override these, pass the following arguments:```shellaws-excom --profile foo --region us-east-1```By default you'll be given an interactive prompt to enter the command to execute. To skip this, you may optionally provide a '--command' argument eg.:```shellaws-excom --command &quot;python3&quot;```This is handy for writing aliases for common commands:```shell# File: aws-excom-django-python-shell.sh#!/bin/shaws-excom --command &quot;python3 manage.py shell&quot; &quot;$@&quot;```## Local DevelopmentBefore installing the package in development mode, you may find it convenient to create a virtual environment in which to install dependencies. The recommended way of doing this isusing Python's built-in `venv` module:```shell# Create a directory for your environments if you don't have one alreadymkdir ~/.venv  # Your environment can have any namepython -m venv ~/.venv/my-aws-excom-env  ```Next you need to activate the environment in your shell:```shellsource ~/.venv/my-aws-excom-env/bin/activate```Now you're ready to install the package and its dependencies:```shellcd aws-excom# -e: Editable modepip install -e .```You can verify this has worked by running:```shellwhich aws-excom```This prints the location of the main script installed by the package, which should be inside your virtual environment: `~/.venv/my-aws-excom-env/aws-excom/bin/aws-excom`.Now, running `aws-excom` in your shell will use the code you have locally. Any changesyou make to source files will be automatically used when you next run the command.### Other Python VersionsTo test the package against different Python versions, first ensure that any required versions are installed. They should be accessible using `python3.8` / `python3.7` orsimilar.Now you can simply create a suitable virtual environment using this Python version:```shell# Your environment can have any namepython3.8 -m venv ~/.venv/my-py38-aws-excom-env  ```After activating the environment, you can verify the environment contains the Pythonversion you've chosen using:```shellpython --version```Inside this environment `aws-excom` will now run using this Python version. ### TestingInstall the optional development tools for testing and linting:```shellpip install -e .[dev]```Run the test suite using:```shellpytest```</longdescription>
</pkgmetadata>