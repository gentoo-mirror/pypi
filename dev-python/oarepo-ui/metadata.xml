<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- Copyright (c) 2022 CESNET This software is released under the MIT License. https://opensource.org/licenses/MIT--&gt;# OARepo UIThis package provides implementation of base UI components for use in dynamic (React JS) &amp; static (Jinja) pages andfunctions to render layouts from model configuration.## Usage### ReactTo render a custom layout in a React app (e. g. records search result page), this package provides the `useLayout` hook and an entrypointfor bootstrapping [Search UI](https://github.com/inveniosoftware/invenio-search-ui) app. In your `search.html` template, you can use it like this:```jinja{%- extends config.BASE_TEMPLATE %}{%- block javascript %}    {{ super() }}    {# imports oarepo-ui JS libraries to be used on page #}    {{ webpack['oarepo_ui.js'] }}    {# boots Invenio-Search-UI based search app, with dynamic UI widgets provided by oarepo-ui #}    {{ webpack['oarepo_ui_search.js'] }}{%- endblock %}{# ... #}&lt;div class=&quot;ui container&quot;&gt;  {# provides a DOM root element for the Search UI to be mounted into #}  &lt;div data-invenio-search-config='{{ search_app_oarepo_config(app_id=&quot;oarepo-search&quot;) | tojson }}'&gt;&lt;/div&gt;&lt;/div&gt;```Next you will need to register an app context processor named `search_app_oarepo_config` and register itto blueprint handling the `search.html` template route. In the context processor, you can provide yourown layout configuration for different parts of UI to be used by `oarepo-ui` libs to generate user interface widgets.```pythondef create_blueprint(app):    &quot;&quot;&quot;Blueprint for the routes and resources.&quot;&quot;&quot;    blueprint = Blueprint(        &quot;your-app&quot;,        __name__,        template_folder=&quot;templates&quot;,        static_folder=&quot;static&quot;,    )    blueprint.add_url_rule(&quot;/&quot;, view_func=search)    blueprint.app_context_processor(search_app_context)    return blueprintdef search():    &quot;&quot;&quot;Search template.&quot;&quot;&quot;    return render_template('your-app/search.html')def search_app_context():    &quot;&quot;&quot;Search app context processor.&quot;&quot;&quot;    return {        &quot;search_app_oarepo_config&quot;: partial(            search_app_config,            &quot;OAREPO_SEARCH&quot;,            [], #current_app.config[&quot;OAREPO_FACETS&quot;],1            current_app.config[&quot;OAREPO_SORT_OPTIONS&quot;],            endpoint=&quot;/api/your-records&quot;,            headers={&quot;Accept&quot;: &quot;application/json&quot;},            overrides={                &quot;layoutOptions&quot;: {                    &quot;listView&quot;: True,                    &quot;gridView&quot;: False,                    &quot;ResultsList&quot;: {                        &quot;item&quot;: {                            &quot;component&quot;: 'segment',                            &quot;children&quot;: [{                                &quot;component&quot;: &quot;header&quot;,                                &quot;dataField&quot;: &quot;metadata.title&quot;                            }]                        }                    }                }            }        )    }```In your `invenio.cfg`, customize the general search app settings:```pythonOAREPO_SEARCH = {    &quot;facets&quot;: [],    &quot;sort&quot;: [&quot;bestmatch&quot;, &quot;newest&quot;, &quot;oldest&quot;, &quot;version&quot;],}OAREPO_SORT_OPTIONS = {    &quot;bestmatch&quot;: dict(        title=_(&quot;Best match&quot;),        fields=[&quot;_score&quot;],  # search defaults to desc on `_score` field    ),    &quot;newest&quot;: dict(        title=_(&quot;Newest&quot;),        fields=[&quot;-created&quot;],    ),    &quot;oldest&quot;: dict(        title=_(&quot;Oldest&quot;),        fields=[&quot;created&quot;],    ),    &quot;version&quot;: dict(        title=_(&quot;Version&quot;),        fields=[&quot;-versions.index&quot;],    ),    &quot;updated-desc&quot;: dict(        title=_(&quot;Recently updated&quot;),        fields=[&quot;-updated&quot;],    ),    &quot;updated-asc&quot;: dict(        title=_(&quot;Least recently updated&quot;),        fields=[&quot;updated&quot;],    ),}```</longdescription>
</pkgmetadata>