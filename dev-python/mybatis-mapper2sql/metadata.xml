<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>mybatis-mapper2sql==================[![Build Status](https://travis-ci.org/hhyo/mybatis-mapper2sql.svg?branch=master)](https://travis-ci.org/hhyo/mybatis-mapper2sql)[![codecov](https://codecov.io/gh/hhyo/mybatis-mapper2sql/branch/master/graph/badge.svg)](https://codecov.io/gh/hhyo/mybatis-mapper2sql)[![image](https://img.shields.io/pypi/v/mybatis-mapper2sql.svg)](https://pypi.org/project/mybatis-mapper2sql/)[![image](https://img.shields.io/pypi/l/mybatis-mapper2sql.svg)](https://github.com/hhyo/mybatis-mapper2sql/blob/master/LICENSE)[![image](https://img.shields.io/pypi/pyversions/mybatis-mapper2sql.svg)](https://pypi.org/project/mybatis-mapper2sql/)Generate SQL Statements from the MyBatis3 Mapper XML file   **Just for SQL Review https://github.com/hhyo/archery/issues/3**Installation------------`pip install mybatis-mapper2sql`Usage-------------```pythonimport mybatis_mapper2sql# Parse Mybatis Mapper XML filesmapper, xml_raw_text = mybatis_mapper2sql.create_mapper(xml='mybatis_mapper.xml')# Get All SQL Statements from Mapperstatement = mybatis_mapper2sql.get_statement(mapper)# Get SQL Statement By SQLIdstatement = mybatis_mapper2sql.get_child_statement(mapper, sql_id)```Examples-------------&gt; https://github.com/OldBlackJoe/mybatis-mapper#### test.xml ####```xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;Test&quot;&gt;    &lt;sql id=&quot;sometable&quot;&gt;        fruits    &lt;/sql&gt;    &lt;sql id=&quot;somewhere&quot;&gt;        WHERE        category = #{category}    &lt;/sql&gt;    &lt;sql id=&quot;someinclude&quot;&gt;        FROM        &lt;include refid=&quot;${include_target}&quot;/&gt;        &lt;include refid=&quot;somewhere&quot;/&gt;    &lt;/sql&gt;    &lt;select id=&quot;testParameters&quot;&gt;        SELECT        name,        category,        price        FROM        fruits        WHERE        category = #{category}        AND price &gt; ${price}    &lt;/select&gt;    &lt;select id=&quot;testInclude&quot;&gt;        SELECT        name,        category,        price        &lt;include refid=&quot;someinclude&quot;&gt;            &lt;property name=&quot;prefix&quot; value=&quot;Some&quot;/&gt;            &lt;property name=&quot;include_target&quot; value=&quot;sometable&quot;/&gt;        &lt;/include&gt;    &lt;/select&gt;    &lt;select id=&quot;testIf&quot;&gt;        SELECT        name,        category,        price        FROM        fruits        WHERE        1=1        &lt;if test=&quot;category != null and category !=''&quot;&gt;            AND category = #{category}        &lt;/if&gt;        &lt;if test=&quot;price != null and price !=''&quot;&gt;            AND price = ${price}            &lt;if test=&quot;price &gt;= 400&quot;&gt;                AND name = 'Fuji'            &lt;/if&gt;        &lt;/if&gt;    &lt;/select&gt;    &lt;select id=&quot;testTrim&quot;&gt;        SELECT        name,        category,        price        FROM        fruits        &lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND|OR&quot;&gt;            OR category = 'apple'            OR price = 200        &lt;/trim&gt;    &lt;/select&gt;    &lt;select id=&quot;testWhere&quot;&gt;        SELECT        name,        category,        price        FROM        fruits        &lt;where&gt;            AND category = 'apple'            &lt;if test=&quot;price != null and price !=''&quot;&gt;                AND price = ${price}            &lt;/if&gt;        &lt;/where&gt;    &lt;/select&gt;    &lt;update id=&quot;testSet&quot;&gt;        UPDATE        fruits        &lt;set&gt;            &lt;if test=&quot;category != null and category !=''&quot;&gt;                category = #{category},            &lt;/if&gt;            &lt;if test=&quot;price != null and price !=''&quot;&gt;                price = ${price},            &lt;/if&gt;        &lt;/set&gt;        WHERE        name = #{name}    &lt;/update&gt;    &lt;select id=&quot;testChoose&quot;&gt;        SELECT        name,        category,        price        FROM        fruits        &lt;where&gt;            &lt;choose&gt;                &lt;when test=&quot;name != null&quot;&gt;                    AND name = #{name}                &lt;/when&gt;                &lt;when test=&quot;category == 'banana'&quot;&gt;                    AND category = #{category}                    &lt;if test=&quot;price != null and price !=''&quot;&gt;                        AND price = ${price}                    &lt;/if&gt;                &lt;/when&gt;                &lt;otherwise&gt;                    AND category = 'apple'                &lt;/otherwise&gt;            &lt;/choose&gt;        &lt;/where&gt;    &lt;/select&gt;    &lt;select id=&quot;testForeach&quot;&gt;        SELECT        name,        category,        price        FROM        fruits        &lt;where&gt;            category = 'apple' AND            &lt;foreach collection=&quot;apples&quot; item=&quot;name&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;OR&quot;&gt;                &lt;if test=&quot;name == 'Jonathan' or name == 'Fuji'&quot;&gt;                    name = #{name}                &lt;/if&gt;            &lt;/foreach&gt;        &lt;/where&gt;    &lt;/select&gt;    &lt;insert id=&quot;testInsertMulti&quot;&gt;        INSERT INTO        fruits        (        name,        category,        price        )        VALUES        &lt;foreach collection=&quot;fruits&quot; item=&quot;fruit&quot; separator=&quot;,&quot;&gt;            (            #{fruit.name},            #{fruit.category},            ${fruit.price}            )        &lt;/foreach&gt;    &lt;/insert&gt;    &lt;select id=&quot;testBind&quot;&gt;        &lt;bind name=&quot;likeName&quot; value=&quot;'%' + name + '%'&quot;/&gt;        SELECT        name,        category,        price        FROM        fruits        WHERE        name like #{likeName}    &lt;/select&gt;&lt;/mapper&gt;```#### test.py ####Get All SQL Statements from Mapper```pythonimport mybatis_mapper2sqlmapper, xml_raw_text = mybatis_mapper2sql.create_mapper(xml='test.xml')statement = mybatis_mapper2sql.get_statement(mapper, result_type='raw', reindent=True, strip_comments=True)print(statement)``````SQLSELECT name,       category,       priceFROM fruitsWHERE category = ?  AND price &gt; ?;SELECT name,       category,       priceFROM fruitsWHERE category = ?;SELECT name,       category,       priceFROM fruitsWHERE 1=1  AND category = ?  AND price = ?  AND name = 'Fuji';SELECT name,       category,       priceFROM fruitsWHERE category = 'apple'  OR price = 200;SELECT name,       category,       priceFROM fruitsWHERE category = 'apple'  AND price = ?;UPDATE fruitsSET category = ?,    price = ?WHERE name = ?;SELECT name,       category,       priceFROM fruitsWHERE name = ?  AND category = ?  AND price = ?  AND category = 'apple';SELECT name,       category,       priceFROM fruitsWHERE categy = 'apple'  AND (name = ?       OR name = ?);INSERT INTO fruits (name, category, price)VALUES (?,        ?,        ?) , (?,              ?,              ?);SELECT name,       category,       priceFROM fruitsWHERE name like ?;```Get SQL Statement By SQLId```pythonimport mybatis_mapper2sqlmapper, xml_raw_text = mybatis_mapper2sql.create_mapper(xml='test.xml')statement = mybatis_mapper2sql.get_child_statement(mapper,'testForeach', reindent=True, strip_comments=False)print(statement)``````SQLSELECT name,       category,       priceFROM fruitsWHERE categy = 'apple'  AND ( name = ? -- if(name == 'Jonathan' or name == 'Fuji')OR name = ? -- if(name == 'Jonathan' or name == 'Fuji'))```Running the tests-----------------`python setup.py test`Known Limitations------------------ Doesn't support custom parameters- All sql parameters will be replace  to '?'- All of the conditionals to apply in \&lt;if\&gt; \&lt;choose\&gt; \&lt;when\&gt; \&lt;otherwise\&gt; element  Acknowledgments-----------------This project was inspired by the following projects and websites:- https://github.com/OldBlackJoe/mybatis-mapper - http://www.mybatis.org/mybatis-3/dynamic-sql.html- http://www.enmoedu.com/article-205.html</longdescription>
</pkgmetadata>