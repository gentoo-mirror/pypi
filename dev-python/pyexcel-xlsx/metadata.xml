<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================================================================================pyexcel-xlsx - Let you focus on data, instead of xlsx format================================================================================.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel.github.io/master/images/patreon.png   :target: https://www.patreon.com/chfw.. image:: https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg   :target: https://awesome-python.com/#specific-formats-processing.. image:: https://travis-ci.org/pyexcel/pyexcel-xlsx.svg?branch=master   :target: http://travis-ci.org/pyexcel/pyexcel-xlsx.. image:: https://codecov.io/gh/pyexcel/pyexcel-xlsx/branch/master/graph/badge.svg   :target: https://codecov.io/gh/pyexcel/pyexcel-xlsx.. image:: https://badge.fury.io/py/pyexcel-xlsx.svg   :target: https://pypi.org/project/pyexcel-xlsx.. image:: https://anaconda.org/conda-forge/pyexcel-xlsx/badges/version.svg   :target: https://anaconda.org/conda-forge/pyexcel-xlsx.. image:: https://pepy.tech/badge/pyexcel-xlsx/month   :target: https://pepy.tech/project/pyexcel-xlsx/month.. image:: https://anaconda.org/conda-forge/pyexcel-xlsx/badges/downloads.svg   :target: https://anaconda.org/conda-forge/pyexcel-xlsx.. image:: https://img.shields.io/gitter/room/gitterHQ/gitter.svg   :target: https://gitter.im/pyexcel/Lobby.. image:: https://img.shields.io/static/v1?label=continuous%20templating&amp;message=%E6%A8%A1%E7%89%88%E6%9B%B4%E6%96%B0&amp;color=blue&amp;style=flat-square    :target: https://moban.readthedocs.io/en/latest/#at-scale-continous-templating-for-open-source-projects.. image:: https://img.shields.io/static/v1?label=coding%20style&amp;message=black&amp;color=black&amp;style=flat-square    :target: https://github.com/psf/black**pyexcel-xlsx** is a tiny wrapper library to read, manipulate and write data in xlsx and xlsm format using  `read_only` mode reader, `write_only` mode writer from openpyxl. You are likely to use it with `pyexcel &lt;https://github.com/pyexcel/pyexcel&gt;`__.Please note:1. `auto_detect_int` flag will not take effect because openpyxl detect integer in python 3 by default.2. `skip_hidden_row_and_column` will get a penalty where `read_only` mode cannot be used.Support the project================================================================================If your company has embedded pyexcel and its components into a revenue generatingproduct, please support me on github, `patreon &lt;https://www.patreon.com/bePatron?u=5537627&gt;`_or `bounty source &lt;https://salt.bountysource.com/teams/chfw-pyexcel&gt;`_ to maintainthe project and develop it further.If you are an individual, you are welcome to support me too and for however longyou feel like. As my backer, you will receive`early access to pyexcel related contents &lt;https://www.patreon.com/pyexcel/posts&gt;`_.And your issues will get prioritized if you would like to become my patreon as `pyexcel pro user`.With your financial support, I will be able to investa little bit more time in coding, documentation and writing interesting posts.Known constraints==================Fonts, colors and charts are not supported.Installation================================================================================You can install pyexcel-xlsx via pip:.. code-block:: bash    $ pip install pyexcel-xlsxor clone it and install it:.. code-block:: bash    $ git clone https://github.com/pyexcel/pyexcel-xlsx.git    $ cd pyexcel-xlsx    $ python setup.py installUsage================================================================================As a standalone library--------------------------------------------------------------------------------Write to an xlsx file********************************************************************************Here's the sample code to write a dictionary to an xlsx file:.. code-block:: python    &gt;&gt;&gt; from pyexcel_xlsx import save_data    &gt;&gt;&gt; data = OrderedDict() # from collections import OrderedDict    &gt;&gt;&gt; data.update({&quot;Sheet 1&quot;: [[1, 2, 3], [4, 5, 6]]})    &gt;&gt;&gt; data.update({&quot;Sheet 2&quot;: [[&quot;row 1&quot;, &quot;row 2&quot;, &quot;row 3&quot;]]})    &gt;&gt;&gt; save_data(&quot;your_file.xlsx&quot;, data)Read from an xlsx file********************************************************************************Here's the sample code:.. code-block:: python    &gt;&gt;&gt; from pyexcel_xlsx import get_data    &gt;&gt;&gt; data = get_data(&quot;your_file.xlsx&quot;)    &gt;&gt;&gt; import json    &gt;&gt;&gt; print(json.dumps(data))    {&quot;Sheet 1&quot;: [[1, 2, 3], [4, 5, 6]], &quot;Sheet 2&quot;: [[&quot;row 1&quot;, &quot;row 2&quot;, &quot;row 3&quot;]]}Write an xlsx to memory********************************************************************************Here's the sample code to write a dictionary to an xlsx file:.. code-block:: python    &gt;&gt;&gt; from pyexcel_xlsx import save_data    &gt;&gt;&gt; data = OrderedDict()    &gt;&gt;&gt; data.update({&quot;Sheet 1&quot;: [[1, 2, 3], [4, 5, 6]]})    &gt;&gt;&gt; data.update({&quot;Sheet 2&quot;: [[7, 8, 9], [10, 11, 12]]})    &gt;&gt;&gt; io = StringIO()    &gt;&gt;&gt; save_data(io, data)    &gt;&gt;&gt; # do something with the io    &gt;&gt;&gt; # In reality, you might give it to your http response    &gt;&gt;&gt; # object for downloadingRead from an xlsx from memory********************************************************************************Continue from previous example:.. code-block:: python    &gt;&gt;&gt; # This is just an illustration    &gt;&gt;&gt; # In reality, you might deal with xlsx file upload    &gt;&gt;&gt; # where you will read from requests.FILES['YOUR_XLSX_FILE']    &gt;&gt;&gt; data = get_data(io)    &gt;&gt;&gt; print(json.dumps(data))    {&quot;Sheet 1&quot;: [[1, 2, 3], [4, 5, 6]], &quot;Sheet 2&quot;: [[7, 8, 9], [10, 11, 12]]}Pagination feature********************************************************************************Let's assume the following file is a huge xlsx file:.. code-block:: python   &gt;&gt;&gt; huge_data = [   ...     [1, 21, 31],   ...     [2, 22, 32],   ...     [3, 23, 33],   ...     [4, 24, 34],   ...     [5, 25, 35],   ...     [6, 26, 36]   ... ]   &gt;&gt;&gt; sheetx = {   ...     &quot;huge&quot;: huge_data   ... }   &gt;&gt;&gt; save_data(&quot;huge_file.xlsx&quot;, sheetx)And let's pretend to read partial data:.. code-block:: python   &gt;&gt;&gt; partial_data = get_data(&quot;huge_file.xlsx&quot;, start_row=2, row_limit=3)   &gt;&gt;&gt; print(json.dumps(partial_data))   {&quot;huge&quot;: [[3, 23, 33], [4, 24, 34], [5, 25, 35]]}And you could as well do the same for columns:.. code-block:: python   &gt;&gt;&gt; partial_data = get_data(&quot;huge_file.xlsx&quot;, start_column=1, column_limit=2)   &gt;&gt;&gt; print(json.dumps(partial_data))   {&quot;huge&quot;: [[21, 31], [22, 32], [23, 33], [24, 34], [25, 35], [26, 36]]}Obvious, you could do both at the same time:.. code-block:: python   &gt;&gt;&gt; partial_data = get_data(&quot;huge_file.xlsx&quot;,   ...     start_row=2, row_limit=3,   ...     start_column=1, column_limit=2)   &gt;&gt;&gt; print(json.dumps(partial_data))   {&quot;huge&quot;: [[23, 33], [24, 34], [25, 35]]}As a pyexcel plugin--------------------------------------------------------------------------------No longer, explicit import is needed since pyexcel version 0.2.2. Instead,this library is auto-loaded. So if you want to read data in xlsx format,installing it is enough.Reading from an xlsx file********************************************************************************Here is the sample code:.. code-block:: python    &gt;&gt;&gt; import pyexcel as pe    &gt;&gt;&gt; sheet = pe.get_book(file_name=&quot;your_file.xlsx&quot;)    &gt;&gt;&gt; sheet    Sheet 1:    +---+---+---+    | 1 | 2 | 3 |    +---+---+---+    | 4 | 5 | 6 |    +---+---+---+    Sheet 2:    +-------+-------+-------+    | row 1 | row 2 | row 3 |    +-------+-------+-------+Writing to an xlsx file********************************************************************************Here is the sample code:.. code-block:: python    &gt;&gt;&gt; sheet.save_as(&quot;another_file.xlsx&quot;)Reading from a IO instance********************************************************************************You got to wrap the binary content with stream to get xlsx working:.. code-block:: python    &gt;&gt;&gt; # This is just an illustration    &gt;&gt;&gt; # In reality, you might deal with xlsx file upload    &gt;&gt;&gt; # where you will read from requests.FILES['YOUR_XLSX_FILE']    &gt;&gt;&gt; xlsxfile = &quot;another_file.xlsx&quot;    &gt;&gt;&gt; with open(xlsxfile, &quot;rb&quot;) as f:    ...     content = f.read()    ...     r = pe.get_book(file_type=&quot;xlsx&quot;, file_content=content)    ...     print(r)    ...    Sheet 1:    +---+---+---+    | 1 | 2 | 3 |    +---+---+---+    | 4 | 5 | 6 |    +---+---+---+    Sheet 2:    +-------+-------+-------+    | row 1 | row 2 | row 3 |    +-------+-------+-------+Writing to a StringIO instance********************************************************************************You need to pass a StringIO instance to Writer:.. code-block:: python    &gt;&gt;&gt; data = [    ...     [1, 2, 3],    ...     [4, 5, 6]    ... ]    &gt;&gt;&gt; io = StringIO()    &gt;&gt;&gt; sheet = pe.Sheet(data)    &gt;&gt;&gt; io = sheet.save_to_memory(&quot;xlsx&quot;, io)    &gt;&gt;&gt; # then do something with io    &gt;&gt;&gt; # In reality, you might give it to your http response    &gt;&gt;&gt; # object for downloadingLicense================================================================================New BSD LicenseDeveloper guide==================Development steps for code changes#. git clone https://github.com/pyexcel/pyexcel-xlsx.git#. cd pyexcel-xlsxUpgrade your setup tools and pip. They are needed for development and testing only:#. pip install --upgrade setuptools pipThen install relevant development requirements:#. pip install -r rnd_requirements.txt # if such a file exists#. pip install -r requirements.txt#. pip install -r tests/requirements.txtOnce you have finished your changes, please provide test case(s), relevant documentationand update CHANGELOG.rst... note::    As to rnd_requirements.txt, usually, it is created when a dependent    library is not released. Once the dependecy is installed    (will be released), the future    version of the dependency in the requirements.txt will be valid.How to test your contribution------------------------------Although `nose` and `doctest` are both used in code testing, it is adviable that unit tests are put in tests. `doctest` is incorporated only to make sure the code examples in documentation remain valid across different development releases.On Linux/Unix systems, please launch your tests like this::    $ makeOn Windows systems, please issue this command::    &gt; test.batBefore you commit------------------------------Please run::    $ make formatso as to beautify your code otherwise travis-ci may fail your unit test.Change log================================================================================0.6.0 - 10.10.2020--------------------------------------------------------------------------------**Updated**#. New style xlsx plugins, promoted by pyexcel-io v0.6.2.0.5.8 - 28.12.2019--------------------------------------------------------------------------------**Updated**#. `#34 &lt;https://github.com/pyexcel/pyexcel-xlsx/issues/34&gt;`_: pin   openpyxl&gt;=2.6.10.5.7 - 15.02.2019--------------------------------------------------------------------------------**Added**#. `pyexcel-io#66 &lt;https://github.com/pyexcel/pyexcel-io/issues/66&gt;`_ pin   openpyxl &lt; 2.6.00.5.6 - 26.03.2018--------------------------------------------------------------------------------**Added**#. `#24 &lt;https://github.com/pyexcel/pyexcel-xlsx/issues/24&gt;`_, remove deprecated   warning from merged_cell_ranges and get_sheet_by_name0.5.5 - 18.12.2017--------------------------------------------------------------------------------**Added**#. `#22 &lt;https://github.com/pyexcel/pyexcel-xlsx/issues/22&gt;`_, to detect merged   cell in xlsx - fast tracked patreon request.0.5.4 - 2.11.2017--------------------------------------------------------------------------------**Updated**#. Align the behavior of skip_hidden_row_and_column. Default it to True.0.5.3 - 2.11.2017--------------------------------------------------------------------------------**Added**#. `#20 &lt;https://github.com/pyexcel/pyexcel-xlsx/issues/20&gt;`_, skip hidden rows   and columns under 'skip_hidden_row_and_column' flag.0.5.2 - 23.10.2017--------------------------------------------------------------------------------**updated**#. pyexcel `pyexcel#105 &lt;https://github.com/pyexcel/pyexcel/issues/105&gt;`_,   remove gease from setup_requires, introduced by 0.5.1.#. remove python2.6 test support#. update its dependecy on pyexcel-io to 0.5.30.5.1 - 20.10.2017--------------------------------------------------------------------------------**added**#. `pyexcel#103 &lt;https://github.com/pyexcel/pyexcel/issues/103&gt;`_, include   LICENSE file in MANIFEST.in, meaning LICENSE file will appear in the released   tar ball.0.5.0 - 30.08.2017--------------------------------------------------------------------------------**Updated**#. put dependency on pyexcel-io 0.5.0, which uses cStringIO instead of StringIO.   Hence, there will be performance boost in handling files in memory.**Removed**#. `#18 &lt;https://github.com/pyexcel/pyexcel-xlsx/issues/18&gt;`_, is handled in   pyexcel-io0.4.2 - 25.08.2017--------------------------------------------------------------------------------**Updated**#. `#18 &lt;https://github.com/pyexcel/pyexcel-xlsx/issues/18&gt;`_, handle unseekable   stream given by http response0.4.1 - 16.07.2017--------------------------------------------------------------------------------**Removed**#. Removed useless code0.4.0 - 19.06.2017--------------------------------------------------------------------------------**Updated**#. `#14 &lt;https://github.com/pyexcel/pyexcel-xlsx/issues/14&gt;`_, close file handle#. pyexcel-io plugin interface now updated to use `lml   &lt;https://github.com/chfw/lml&gt;`_.0.3.0 - 22.12.2016--------------------------------------------------------------------------------**Updated**#. Code refactoring with pyexcel-io v 0.3.0#. `#13 &lt;https://github.com/pyexcel/pyexcel-xlsx/issues/13&gt;`_, turn read_only   flag on openpyxl.0.2.3 - 05.11.2016--------------------------------------------------------------------------------**Updated**#. `#12 &lt;https://github.com/pyexcel/pyexcel-xlsx/issues/12&gt;`_, remove   UserWarning: Using a coordinate with ws.cell is deprecated. Use   ws[coordinate]0.2.2 - 31.08.2016--------------------------------------------------------------------------------**Added**#. support pagination. two pairs: start_row, row_limit and start_column,   column_limit help you deal with large files.0.2.1 - 12.07.2016--------------------------------------------------------------------------------**Added**#. `#8 &lt;https://github.com/pyexcel/pyexcel-xlsx/issues/8&gt;`__,   `skip_hidden_sheets` is added. By default, hidden sheets are skipped when   reading all sheets. Reading sheet by name or by index are not affected.0.2.0 - 01.06.2016--------------------------------------------------------------------------------**Added**#. 'library=pyexcel-xlsx' was added to inform pyexcel to use it instead of other   libraries, in the situation where there are more than one plugin for a file   type, e.g. xlsm**Updated**#. support the auto-import feature of pyexcel-io 0.2.00.1.0 - 17.01.2016--------------------------------------------------------------------------------**Added**#. Passing &quot;streaming=True&quot; to get_data, you will get the two dimensional array   as a generator#. Passing &quot;data=your_generator&quot; to save_data is acceptable too.**Updated**#. compatibility with pyexcel-io 0.1.0</longdescription>
</pkgmetadata>