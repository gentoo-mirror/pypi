<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># KeeWee ü•ùGlobal application **state management** and **recording**.  The Keewee library implements an auxiliary class that can be used to manage class and instance attributes at runtime.  One major usecase is to decouple your state-management from your business-logicand keep your code nice and concise.  You can also use it to record statistics about an attribute during runtime.  The library works with regular `Python classes` or `dataclasses` but needs little different configuration.## InstallingInstall and update using [pip](https://pypi.org/project/keewee/)````bash$ pip install -U keewee````## A Simple Example````pythonimport randomfrom dataclasses import dataclass, fieldfrom keewee import KeeWee@dataclassclass PokemonTrainer:    name: str    skill_level: int | KeeWee = field(default=KeeWee(), repr=False)if __name__ == &quot;__main__&quot;:    ash = PokemonTrainer(name=&quot;Ash Ketchum&quot;, skill_level=0)    for _ in range(10):        ash.skill_level = random.randint(1, 10)    print(KeeWee.dumpd())```````python{    'PokemonTrainer': {'skill_level': {&quot;PokemonTrainer(name='Ash Ketchum')&quot;: [0, 5, 9, 6, 3, 6, 10, 8, 4, 2, 9]}}}```## Collection Record ModesWhen assigning a KeeWee instance to an attribute,the user can customize its internal recording-behavior by providing the `mode`-option.Currently, there are four different modes, whereas the `list`-mode is the default setting.### Direct modeWhen only the current or resp. the last value is of interest, one can choose the `direct` mode,where the attribute is _directely_ mappedto its value.````python{    'PokemonTrainer': {'skill_level': {&quot;PokemonTrainer(name='Ash Ketchum')&quot;: 3}}}````### List modeThe `list`-mode keeps all occurring values in an ordered list from the first to the last value this attribute was assigned.  Since this use-case is probably the _most_ common it is also chosen to be the *default* record-behavior.```python{    'PokemonTrainer': {'skill_level': {&quot;PokemonTrainer(name='Ash Ketchum')&quot;: [0, 5, 9, 6, 3, 6, 10, 8, 4, 2, 9]}}}```### Set modeThe `set`-modes only difference to the list-mode is that duplicates are not tracked.```python{    'PokemonTrainer': {'skill_level': {&quot;PokemonTrainer(name='Ash Ketchum')&quot;: {0, 2, 3, 5, 7, 9}}}}```### Datetime to valueIf one wants to know exactly at what timestamp the modification took place the `dtv` (datetime-value)-mode is the best to choose.  Here a new dictionary is created for every attribute and the current time is mapped onto the state change.````python{'PokemonTrainer': {'skill_level': {&quot;PokemonTrainer(name='Ash Ketchum')&quot;: {    '15:11:44.976976': 0,    '15:11:44.976985': 8,    '15:11:44.976987': 6,    '15:11:44.976990': 2,    '15:11:44.976992': 6,    '15:11:44.976994': 9,    '15:11:44.976996': 8,    '15:11:44.976998': 7,    '15:11:44.977000': 3,    '15:11:44.977002': 9,    '15:11:44.977004': 7}}}}````## Numerical Record ModesThe following record modes only work for numerical values, e.g.`int` or `float` etc.  The result will look similar to the `direct`-mode.  Currently there are three numerical record modes1. `sum` the sum of all occurring values2. `min` the minimal value that has occurred3. `max` the maximum value that has occurredAn example usage for taking the _sum_ over all values could look like the following.```python@dataclassclass PokemonTrainer:    name: str    skill_level: int | KeeWee = field(default=KeeWee(mode='sum'), repr=False)```````python{    'PokemonTrainer': {'skill_level': {&quot;PokemonTrainer(name='Ash Ketchum')&quot;: 49}}}````## Links- PyPI Releases: [https://pypi.org/project/keewee/](https://pypi.org/project/keewee/)</longdescription>
</pkgmetadata>