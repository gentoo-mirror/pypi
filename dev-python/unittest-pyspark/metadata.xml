<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># unittest-pysparkExtensions for testing pyspark with unittest and doctest.These utils can be used in standalone Python or in Databricksnotebooks.## Usage With Doctest```pythonfrom unittest_pyspark import get_sparkspark = get_spark()def go_spark():    &quot;&quot;&quot;    &gt;&gt;&gt; spark.sql(&quot;SELECT 'hello world'&quot;).show()    +-----------+    |hello world|    +-----------+    |hello world|    +-----------+    &lt;BLANKLINE&gt;    &gt;&gt;&gt; spark.createDataFrame([{'hello':'world'}], 'hello:string').show()    +-----+    |hello|    +-----+    |world|    +-----+    &lt;BLANKLINE&gt;    &quot;&quot;&quot;    passimport doctestdoctest.testmod()```## Usage With UnittestHere is a simple `unittest` test case, which can be used astemplate for pySpark test case. ```pythonimport unittestfrom unittest_pyspark import as_list, get_sparkimport pyspark.sql.types as pstclass Test_Spark(unittest.TestCase):  def setUp(self):      self.spark = get_spark()  def test_i_can_fly(self):    input = [ pst.Row(a=1, b=2)]    input_df = self.spark.createDataFrame(input)    expect = [{'a':1}]    actual_df = input_df.select(&quot;a&quot;)    actual = as_list(actual_df)    self.assertEqual(actual, expect)```You can find this entire example in the `tests.test_sample` module. To execute it from the command line:```bashpython -m unittest tests.test_sample```## Usage With Unittest and DatabricksTo execute the `unittest` test cases in Databricks, add following cell:```pythonfrom unittest_pyspark.unittest import *if __name__ == &quot;__main__&quot;:  execute_test_cases(discover_test_cases())```Above code will automatically discover all test cases (unittest.TestCasesub classes) defined in the global scope and execute them.## Build packageYou will need `setuptools` and `twine`:```bashpip install --upgrade setuptoolspip install --upgrade wheel```Build and upload:```bashpython setup.py sdist bdist_wheelpython -m twine upload dist/*```</longdescription>
</pkgmetadata>