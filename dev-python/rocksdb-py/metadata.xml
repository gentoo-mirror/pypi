<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## rocksdb-pyPython bindings for RocksDB written in Rust.### Features* Get, set, delete, multi get* Destroy* Batch write* Database iterator* Read options### InstallTo install a wheel from PyPI,```bashpip install --upgrade rocksdb-py```or if you want to build a wheel, see [build](https://github.com/trK54Ylmz/rocksdb-py#Build).### Usage#### Open databaseOpen a database with default options.```pythonimport rocksdbpydb = rocksdbpy.open_default('/tmp/rocksdb')```Open a database with the specified options.```pythonopts = Option()opts.create_if_missing(True)db = rocksdbpy.open('/tmp/rocksdb', opts)```Open a database with TTL compaction filter.```pythonopts = Option()opts.create_if_missing(True)db = rocksdbpy.open_with_ttl('/tmp/rocksdb', 5, opts)```Destroy the database and it's files.```pythonrocksdbpy.destroy('/tmp/rocksdb')```Close active database and release lock.```pythondb.close()```#### Simple read, set and deleteSet records by key and value.```pythondb.set(b'key', b'value')```Get a value associated with a key.```pythonvalue = db.get(b'key')```Remove existing records by key.```pythondb.delete(b'key')```#### Batch write, database iterator and flushSet database entries for list of key and values as a batch.```pythonfrom rocksdbpy import WriteBatchbatch = WriteBatch()batch.add(b'first', b'1')batch.add(b'second', b'2')db.write(batch)```Extra operations for the batch.```pythonbatch.delete(b'first')batch.clear()size = batch.len()```Return a heap-allocated iterator over the contents of the database.```pythoniterator = db.iterator()iterator = db.iterator(mode='end')iterator = db.iterator(mode='from', key=b'test')iterator = db.iterator(mode='from', key=b'test', direction=-1)for key, value in iterator:    print(key, value)```Flush database memtables to SST files on the disk using default options.```pythondb.flush()```#### Read optionsSet database read options.```pythonopts = Option()opts.create_if_missing(True)opts.set_max_open_files(10)opts.set_use_fsync(True)opts.set_bytes_per_sync(1024 * 1024)# and more```### BuildYou can build PIP package by using `maturin`. The example below is created for MacOS,```bash$ git clone https://github.com/trk54ylmz/rocksdb-py.git$ cd rocksdb-py$ maturin build$ pip3 install ./target/wheels/rocksdb_py-0.0.1-cp39-cp39-macosx_11_0_arm64.whl```</longdescription>
</pkgmetadata>