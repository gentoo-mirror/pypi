<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># telegram-click [![Contributors](https://img.shields.io/github/contributors/markusressel/telegram-click.svg)](https://github.com/markusressel/telegram-click/graphs/contributors) [![MIT License](https://img.shields.io/github/license/markusressel/telegram-click.svg)](/LICENSE) [![Code Climate](https://codeclimate.com/github/markusressel/telegram-click.svg)](https://codeclimate.com/github/markusressel/telegram-click) ![Code Size](https://img.shields.io/github/languages/code-size/markusressel/telegram-click.svg) [![Latest Version](https://badge.fury.io/py/telegram-click.svg)](https://pypi.org/project/telegram-click/) [![Build Status](https://travis-ci.org/markusressel/telegram-click.svg?branch=master)](https://travis-ci.org/markusressel/telegram-click)[Click](https://github.com/pallets/click/) inspired command-line interface creation toolkit for [python-telegram-bot](https://github.com/python-telegram-bot/python-telegram-bot).Try the latest version of the [example.py](/example.py) out for yourself: [@PythonTelegramClickBot](http://t.me/PythonTelegramClickBot)If you are looking for asyncio and [aiogram](https://github.com/aiogram/aiogram) support, head over to [telegram-click-aio](https://github.com/markusressel/telegram-click-aio)!&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/markusressel/telegram-click/master/screenshots/demo1.png&quot; width=&quot;400&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/markusressel/telegram-click/master/screenshots/demo2.png&quot; width=&quot;400&quot;&gt; &lt;/p&gt;# Features* [x] POSIX style argument parsing  * [x] Quoted arguments (`/command &quot;Hello World&quot;`)  * [x] Named arguments (`/command --text &quot;Hello World&quot;`)  * [x] Value Separator (`/command --text=myvalue` )  * [x] Flags (`/command --yes`)  * [x] Multiple combined Flags (`/command -Syu`)  * [x] Optional arguments  * [x] Type conversion including support for custom types  * [x] Argument input validation* [x] Automatic help messages  * [x] Show help messages when a command was used with invalid arguments  * [x] List all available commands with a single method* [x] Permission handling  * [x] Set up permissions for each command separately  * [x] Limit command execution to private chats or group admins  * [x] Combine permissions using logical operators  * [x] Create custom permission handlers* [x] Error handling  * [x] Automatically send error and help messages if something goes wrong  * [x] Write custom error handlers  **telegram-click** is used by* [InfiniteWisdom](https://github.com/ekeih/InfiniteWisdom)* [DeineMudda](https://github.com/markusressel/DeineMudda)* [keel-telegram-bot](https://github.com/markusressel/keel-telegram-bot)* [grocy-telegram-bot](https://github.com/markusressel/grocy-telegram-bot)* [FrundenBot](https://github.com/ekeih/FrundenBot)and hopefully many others :)# How to useInstall this library as a dependency to use it in your project.```shellpip install telegram-click```Then annotate your command handler functions with the `@command` decoratorof this library:```pythonfrom telegram import Updatefrom telegram.ext import ContextTypesfrom telegram_click.decorator import commandfrom telegram_click.argument import Argumentclass MyBot:    [...]        @command(name='start', description='Start bot interaction')    async def _start_command_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):        # do something        pass            @command(name='age',              description='Set age',             arguments=[                 Argument(name='age',                          description='The new age',                          type=int,                          validator=lambda x: x &gt; 0,                          example='25')             ])    async def _age_command_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, age: int):        context.bot.send_message(update.effective_chat.id, &quot;New age: {}&quot;.format(age))```## Arguments**telegram-click** parses arguments using a custom tokenizer:* space acts as an argument delimiter, except when quoted (supporting both `&quot;` and `'`)* argument keys are prefixed with `--`, `—` (long dash) or `-` (for single character keys)* quoted arguments are never considered as argument keys, even when prefixed with `--` or `—`* flags can be combined in a single argument (f.ex. `-AxZ`)The behaviour should be pretty intuitive. If it's not, let's discuss and improve it!### NamingArguments can have multiple names to allow for abbreviated names. Thefirst name you specify for an argument will be used for the callback parameter name (normalized to snake-case). Because of thisit is advisable to specify a full word argument name as the first one.### TypesSince all user input initially is of type `str` there needs to be a typeconversion if the expected type is not a `str`. For basic types like`bool`, `int`, `float` and `str` converters are built in to this library.If you want to use other types you have to specify how to convert the `str` input to your type using the `converter` attribute of the `Argument` constructor:```pythonfrom telegram_click.argument import ArgumentArgument(name='age',         description='The new age',         type=MyType,         converter=lambda x: MyType(x),         validator=lambda x: x &gt; 0,         example='25')```### FlagsTechnically you can use the `Argument` class to specify a flag, but since many of its parameters are implicit for a flag the `Flag` class can be usedinstead:```pythonfrom telegram_click.argument import FlagFlag(name='flag',     description='My boolean flag')```## Permission handlingIf a command should only be executable when a specific criteria is met you can specify those criteria using the `permissions` parameter:```pythonfrom telegram import Updatefrom telegram.ext import ContextTypesfrom telegram_click.decorator import commandfrom telegram_click.permission import GROUP_ADMIN@command(name='permission',          description='Needs permission',         permissions=GROUP_ADMIN)async def _permission_command_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):```Multiple permissions can be combined using `&amp;`, `|` and `~` (not) operators.If a user does not have permission to use a command it will not be displayedwhen this user generate a list of commands.### Integrated permission handlers| Name                  | Description                                ||-----------------------|--------------------------------------------|| `PRIVATE_CHAT`        | The command can only be executed in a private chat || `NORMAL_GROUP_CHAT`   | The command can only be executed in a normal group  || `SUPER_GROUP_CHAT`    | The command can only be executed in a supergroup  || `GROUP_CHAT`          | The command can only be executed in either a normal or a supergroup || `USER_ID`             | Only users whose user id is specified have permission || `USER_NAME`           | Only users whose username is specified have permission || `GROUP_CREATOR`       | Only the group creator has permission               || `GROUP_ADMIN`         | Only the group admin has permission                 || `NOBODY`              | Nobody has permission (useful for callbacks triggered via code instead of user interaction f.ex. &quot;unknown command&quot; handler) || `ANYBODY`             | Anybody has permission (this is the default) |### Custom permissionsIf none of the integrated permissions suit your needs you can simply write your own permission handler by extending the `Permission` base class and pass an instance of the `MyPermission` class to the list of `permissions`:```pythonfrom telegram import Updatefrom telegram.ext import ContextTypesfrom telegram_click.decorator import commandfrom telegram_click.permission.base import Permissionfrom telegram_click.permission import GROUP_ADMINclass MyPermission(Permission):    async def evaluate(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -&gt; bool:        from_user = update.effective_message.from_user        return from_user.id in [12345, 32435]        @command(name='permission', description='Needs permission',         permissions=MyPermission() &amp; GROUP_ADMIN)async def _permission_command_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):```### Show &quot;Permission denied&quot; messageThis behaviour is defined by the error handler. The `DefaultErrorHandler` silently ignores command messages from users without permission. To change this simply define your own, customized `ErrorHandler` class as shown in the [example.py](example.py).## Targeted commandsTelegram supports the `@` notation to target commands at specific botusernames:```/start               # unspecified/start@myAwesomeBot  # targeted at self/start@someOtherBot  # targeted at other bot```When using a `MessageHandler` instead of a `CommandHandler`it is possible to catch even commands that are targeted at other bots.By default only messages without a target, and messages that are targeted directly at your bot are processed.To control this behaviour specify the `command_target` parameter:```pythonfrom telegram import Updatefrom telegram.ext import ContextTypesfrom telegram_click.decorator import commandfrom telegram_click import CommandTargetfrom telegram_click.permission import NOBODY@command(name=&quot;commands&quot;,         description=&quot;List commands supported by this bot.&quot;,         permissions=NOBODY,         command_target=CommandTarget.UNSPECIFIED | CommandTarget.SELF)async def _unknown_command_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):```You can combine `CommandTarget`'s using logical operators like in the example above.## Hidden commandsIn rare cases it can be useful to hide a command from the help output.To do this you can use the `hidden` parameter on the `@command` decoratorby either passing `True` or `False`, or a callable like f.ex. this one:```pythonasync def hide_whois_if_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):    user_id = update.effective_user.id    return user_id not in [123456]```This function is evaluated on each message and therefore providesthe `update` and `context` object from **python-telegram-bot**, whichallows you to make decisions based on chat and user propertiesamong other things.## Error handling**telegram-click** automatically handles errors in most situations.Errors are divided into three categories:* Permission errors* Input validation errors* Command execution errorsThe `DefaultErrorHandler` will handle these categories in the following way:* Permission errors will be silently ignored.* Input validation errors like  * an argument can not be parsed correctly  * an invalid value is passed for an argument    will send the exception message, as well as a help message of the command the user was trying to use.* On command execution errors the user will be notified that his   command has crashed, without any specific error message. To modify the behaviour for each of those categories, define an `ErrorHandler` and pass an instance of it to the `error_handler` parameter of the `@command` decorator,like shown in the [example.py](example.py).# ContributingGitHub is for social coding: if you want to write code, I encourage contributions through pull requests from forksof this repository. Create GitHub tickets for bugs and new features and comment on the ones that you are interested in.# License```texttelegram-clickCopyright (c) 2019 Markus ResselPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.```</longdescription>
</pkgmetadata>