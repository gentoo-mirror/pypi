<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. ===============LICENSE_START=======================================================.. Acumos CC-BY-4.0.. ===================================================================================.. Copyright (C) 2017-2018 AT&amp;T Intellectual Property &amp; Tech Mahindra. All rights reserved... ===================================================================================.. This Acumos documentation file is distributed by AT&amp;T and Tech Mahindra.. under the Creative Commons Attribution 4.0 International License (the &quot;License&quot;);.. you may not use this file except in compliance with the License... You may obtain a copy of the License at....      http://creativecommons.org/licenses/by/4.0.... This file is distributed on an &quot;AS IS&quot; BASIS,.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied... See the License for the specific language governing permissions and.. limitations under the License... ===============LICENSE_END========================================================================================Acumos Python Client User Guide===============================|Build Status|``acumos`` is a client library that allows modelers to push their Python modelsto the `Acumos platform &lt;https://www.acumos.org/&gt;`__.Installation============You will need a Python 3.6 or 3.7 environment in order to install ``acumos``.Python 3.8 and later can also be used starting with version 0.9.5, some AIframework like Tensor Flow was not supported in Python 3.8 and later.You can use `Anaconda &lt;https://www.anaconda.com/download/&gt;`__(preferred) or `pyenv &lt;https://github.com/pyenv/pyenv&gt;`__ to install andmanage Python environments.If you’re new to Python and need an IDE to start developing, werecommend using `Spyder &lt;https://github.com/spyder-ide/spyder&gt;`__ whichcan easily be installed with Anaconda.The ``acumos`` package can be installed with pip:.. code:: bash    pip install acumosProtocol Buffers----------------The ``acumos`` package uses protocol buffers and **assumes you havethe protobuf compiler** ``protoc`` **installed**. Please visit the `protobufrepository &lt;https://github.com/google/protobuf/releases/tag/v3.4.0&gt;`__and install the appropriate ``protoc`` for your operating system.Installation is as easy as downloading a binary release and adding it toyour system ``$PATH``. This is a temporary requirement that will beremoved in a future version of ``acumos``.**Anaconda Users**: You can easily install ``protoc`` from `an Anacondapackage &lt;https://anaconda.org/anaconda/libprotobuf&gt;`__ via:.. code:: bash    conda install -c anaconda libprotobuf.. |Build Status| image:: https://jenkins.acumos.org/buildStatus/icon?job=acumos-python-client-tox-verify-master   :target: https://jenkins.acumos.org/job/acumos-python-client-tox-verify-master/.. ===============LICENSE_START=======================================================.. Acumos CC-BY-4.0.. ===================================================================================.. Copyright (C) 2017-2018 AT&amp;T Intellectual Property &amp; Tech Mahindra. All rights reserved... ===================================================================================.. This Acumos documentation file is distributed by AT&amp;T and Tech Mahindra.. under the Creative Commons Attribution 4.0 International License (the &quot;License&quot;);.. you may not use this file except in compliance with the License... You may obtain a copy of the License at....      http://creativecommons.org/licenses/by/4.0.... This file is distributed on an &quot;AS IS&quot; BASIS,.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied... See the License for the specific language governing permissions and.. limitations under the License... ===============LICENSE_END======================================================================================Acumos Python Client Tutorial=============================This tutorial provides a brief overview of ``acumos`` for creatingAcumos models. The tutorial is meant to be followed linearly, and somecode snippets depend on earlier imports and objects. Full examples areavailable in the ``examples/`` directory of the `Acumos Python client repository &lt;https://gerrit.acumos.org/r/gitweb?p=acumos-python-client.git;a=summary&gt;`__.#.  `Importing Acumos`_#.  `Creating A Session`_#.  `A Simple Model`_#.  `Exporting Models`_#.  `Defining Types`_#.  `Using DataFrames with scikit-learn`_#.  `Declaring Requirements`_#.  `Declaring Options`_#.  `Keras and TensorFlow`_#. `Testing Models`_#. `More Examples`_Importing Acumos================First import the modeling and session packages:.. code:: python    from acumos.modeling import Model, List, Dict, create_namedtuple, create_dataframe    from acumos.session import AcumosSessionCreating A Session==================An ``AcumosSession`` allows you to export your models to Acumos. You caneither dump a model to disk locally, so that you can upload it via theAcumos website, or push the model to Acumos directly.If you’d like to push directly to Acumos, create a session with the ``push_api`` argument:.. code:: python    session = AcumosSession(push_api=&quot;https://my.acumos.instance.com/push&quot;)See the onboarding page of your Acumos instance website to find the correct``push_api`` URL to use.If you’re only interested in dumping a model to disk, arguments aren’t needed:.. code:: python    session = AcumosSession()A Simple Model==============Any Python function can be used to define an Acumos model using `Pythontype hints &lt;https://docs.python.org/3/library/typing.html&gt;`__.Let’s first create a simple model that adds two integers together.Acumos needs to know what the inputs and outputs of your functions are.We can use the Python type annotation syntax to specify the functionsignature.Below we define a function ``add_numbers`` with ``int`` type parameters``x`` and ``y``, and an ``int`` return type. We then build an Acumosmodel with an ``add`` method.**Note:** Function`docstrings &lt;https://www.python.org/dev/peps/pep-0257/&gt;`__ are includedwith your model and used for documentation, so be sure to include one!.. code:: python    def add_numbers(x: int, y: int) -&gt; int:        '''Returns the sum of x and y'''        return x + y    model = Model(add=add_numbers)Exporting Models================We can now export our model using the ``AcumosSession`` object createdearlier. The ``push`` and ``dump_zip`` APIs are shown below. The ``dump_zip`` method willsave the model to disk so that it can be onboarded via the Acumos website. The``push`` method pushes the model directly to Acumos... code:: python    session.push(model, 'my-model')    session.dump_zip(model, 'my-model', '~/my-model.zip')  # creates ~/my-model.zipFor more information on how to onboard a dumped model via the Acumos website,see the `web onboarding guide &lt;https://docs.acumos.org/en/latest/submodules/portal-marketplace/docs/user-guides/portal-user/portal/portal-onboarding-intro.html#on-boarding-by-web&gt;`__.**Note:** Pushing a model to Acumos will prompt you for an onboarding token ifyou have not previously provided one. The interactive prompt can be avoided byexporting the ``ACUMOS_TOKEN`` environment variable, which corresponds to anauthentication token that can be found in your account settings on the Acumoswebsite.Defining Types==============In this example, we make a model that can read binary images and outputsome metadata about them. This model makes use of a custom type``ImageShape``.We first create a ``NamedTuple`` type called ``ImageShape``, which islike an ordinary ``tuple`` but with field accessors. We can then use``ImageShape`` as the return type of ``get_shape``. Note how``ImageShape`` can be instantiated as a new object... code:: python    import io    import PIL    ImageShape = create_namedtuple('ImageShape', [('width', int), ('height', int)])    def get_format(data: bytes) -&gt; str:        '''Returns the format of an image'''        buffer = io.BytesIO(data)        img = PIL.Image.open(buffer)        return img.format    def get_shape(data: bytes) -&gt; ImageShape:        '''Returns the width and height of an image'''        buffer = io.BytesIO(data)        img = PIL.Image.open(buffer)        shape = ImageShape(width=img.width, height=img.height)        return shape    model = Model(get_format=get_format, get_shape=get_shape)**Note:** Starting in Python 3.6, you can alternatively use this simplersyntax:.. code:: python    from acumos.modeling import NamedTuple    class ImageShape(NamedTuple):        '''Type representing the shape of an image'''        width: int        height: intDefining Unstructured Types===========================The `create_namedtuple` function allows us to create types with structure,however sometimes it's useful to work with unstructured data, such as plaintext, dictionaries or byte strings. The `new_type` function allows for justthat.For example, here's a model that takes in unstructured text, and returns thenumber of words in the text:.. code:: python    from acumos.modeling import new_type    Text = new_type(str, 'Text')    def count(text: Text) -&gt; int:        '''Counts the number of words in the text'''        return len(text.split(' '))    def create_text(x: int, y: int) -&gt; Text:        '''Returns a string containing ints from x to y'''        return &quot; &quot;.join(map(str, range(x, y+1)))    def reverse_text(text: Text) -&gt; Text:        '''Returns an empty image buffer from dimensions'''        return text[::-1]By using the `new_type` function, you inform `acumos` that `Text` isunstructured, and therefore `acumos` will not create any structured types ormessages for the `count` function.You can use the `new_type` function to create dictionaries or byte stringtype unstructured data as shown below... code:: python   from acumos.modeling import new_type   Dict = new_type(dict, 'Dict')   Image = new_type(byte, 'Image')Using DataFrames with scikit-learn==================================In this example, we train a ``RandomForestClassifier`` using``scikit-learn`` and use it to create an Acumos model.When making machine learning models, it’s common to use a dataframe datastructure to represent data. To make things easier, ``acumos`` cancreate ``NamedTuple`` types directly from ``pandas.DataFrame`` objects.``NamedTuple`` types created from ``pandas.DataFrame`` objects storecolumns as named attributes and preserve column order. Because``NamedTuple`` types are like ordinary ``tuple`` types, the resultingobject can be iterated over. Thus, iterating over a ``NamedTuple``dataframe object is the same as iterating over the columns of a``pandas.DataFrame``. As a consequence, note how ``np.column_stack`` canbe used to create a ``numpy.ndarray`` from the input ``df``.Finally, the model returns a ``numpy.ndarray`` of ``int`` correspondingto predicted iris classes. The ``classify_iris`` function representsthis as ``List[int]`` in the signature return... code:: python    import numpy as np    import pandas as pd    from sklearn.datasets import load_iris    from sklearn.ensemble import RandomForestClassifier    iris = load_iris()    X = iris.data    y = iris.target    clf = RandomForestClassifier(random_state=0)    clf.fit(X, y)    # here, an appropriate NamedTuple type is inferred from a pandas DataFrame    X_df = pd.DataFrame(X, columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'])    IrisDataFrame = create_dataframe('IrisDataFrame', X_df)    # ==================================================================================    # # or equivalently:    #    # IrisDataFrame = create_namedtuple('IrisDataFrame', [('sepal_length', List[float]),    #                                                     ('sepal_width', List[float]),    #                                                     ('petal_length', List[float]),    #                                                     ('petal_width', List[float])])    # ==================================================================================    def classify_iris(df: IrisDataFrame) -&gt; List[int]:        '''Returns an array of iris classifications'''        X = np.column_stack(df)        return clf.predict(X)    model = Model(classify=classify_iris)Check out the ``sklearn`` examples in the examples directory for fullrunnable scripts.Declaring Requirements======================If your model depends on another Python script or package that you wrote, you candeclare the dependency via the ``acumos.metadata.Requirements`` class:.. code:: python    from acumos.metadata import RequirementsNote that only pure Python is supported at this time.Custom Scripts--------------Custom scripts can be included by giving ``Requirements`` a sequence of pathsto Python scripts, or directories containing Python scripts. For example, if themodel defined in ``model.py`` depended on ``helper1.py``:::    model_workspace/    ├── model.py    ├── helper1.py    └── helper2.pythis dependency could be declared like so:.. code:: python    from helper1 import do_thing    def transform(x: int) -&gt; int:        '''Does the thing'''        return do_thing(x)    model = Model(transform=transform)    reqs = Requirements(scripts=['./helper1.py'])    # using the AcumosSession created earlier:    session.push(model, 'my-model', reqs)    session.dump(model, 'my-model', '~/', reqs)  # creates ~/my-modelAlternatively, all Python scripts within ``model_workspace/`` could be includedusing:.. code:: python    reqs = Requirements(scripts=['.'])Custom Packages---------------Custom packages can be included by giving ``Requirements`` a sequence of paths toPython packages, i.e. directories with an ``__init__.py`` file. Assuming that thepackage ``~/repos/my_pkg`` contains:::    my_pkg/    ├── __init__.py    ├── bar.py    └── foo.pythen you can bundle ``my_pkg`` with your model like so:.. code:: python    from my_pkg.bar import do_thing    def transform(x: int) -&gt; int:        '''Does the thing'''        return do_thing(x)    model = Model(transform=transform)    reqs = Requirements(packages=['~/repos/my_pkg'])    # using the AcumosSession created earlier:    session.push(model, 'my-model', reqs)    session.dump(model, 'my-model', '~/', reqs)  # creates ~/my-modelRequirement Mapping-------------------Python packaging and `PyPI &lt;https://pypi.org/&gt;`__ aren’tperfect, and sometimes the name of the Python package you import in yourcode is different than the package name used to install it. One exampleof this is the ``PIL`` package, which is commonly installed using `a forkcalled pillow &lt;https://pillow.readthedocs.io&gt;`_ (i.e.``pip install pillow`` will provide the ``PIL`` package).To address this inconsistency, the ``Requirements``class allows you to map Python package names to PyPI package names. Whenyour model is analyzed for dependencies by ``acumos``, this mapping isused to ensure the correct PyPI packages will be used.In the example below, the ``req_map`` parameter is used to declare arequirements mapping from the ``PIL`` Python package to the ``pillow``PyPI package:.. code:: python    reqs = Requirements(req_map={'PIL': 'pillow'})Declaring Options=================The ``acumos.metadata.Options`` class is a collection of options that users maywish to specify along with their Acumos model. If an ``Options`` instance is notprovided to ``AcumosSession.push``, then default options are applied. See theclass docstring for more details.Below, we demonstrate how options can be used to include additional model metadataand influence the behavior of the Acumos platform. For example, a license can beincluded with a model via the ``license`` parameter, either by providing a licensestring or a path to a license file. Likewise, we can specify whether or not the Acumosplatform should eagerly build the model microservice via the ``create_microservice``parameter. Then thanks to the ``deploy`` parameter you can specifiy if you want to deploythis microservice automatically. (Please refer to the appropriate documentation on Acumoswiki to use this functionality based on an external jenkins server). if ``create_microservice``=True,``deploy`` can be True or False. But if ``create_microservice``=False, ``deploy`` must be set to Falseif not, ``create_microservice`` will be force to True to create the micro-service and deploy it... code:: python    from acumos.metadata import Options    opts = Options(license=&quot;Apache 2.0&quot;,      # &quot;./path/to/license_file&quot; also works                   create_microservice=True,  # Build the microservice just after the on-boarding                   deploy=True)               # Deploy the microservice based on an external Jenkins server    session.push(model, 'my-model', options=opts)Keras and TensorFlow====================Check out the Keras and TensorFlow examples in the ``examples/`` directory ofthe `Acumos Python client repository &lt;https://gerrit.acumos.org/r/gitweb?p=acumos-python-client.git;a=summary&gt;`__.Testing Models==============The ``acumos.modeling.Model`` class wraps your custom functions andproduces corresponding input and output types. This section shows how toaccess those types for the purpose of testing. For simplicity, we’llcreate a model using the ``add_numbers`` function again:.. code:: python    def add_numbers(x: int, y: int) -&gt; int:        '''Returns the sum of x and y'''        return x + y    model = Model(add=add_numbers)The ``model`` object now has an ``add`` attribute, which acts as awrapper around ``add_numbers``. The ``add_numbers`` function can beinvoked like so:.. code:: python    result = model.add.inner(1, 2)    print(result)  # 3The ``model.add`` object also has a corresponding *wrapped* functionthat is generated by ``acumos.modeling.Model``. The wrapped function isthe primary way your model will be used within Acumos.We can access the ``input_type`` and ``output_type`` attributes to testthat the function works as expected:.. code:: python    AddIn = model.add.input_type    AddOut = model.add.output_type    add_in = AddIn(1, 2)    print(add_in)  # AddIn(x=1, y=2)    add_out = AddOut(3)    print(add_out)  # AddOut(value=3)    model.add.wrapped(add_in) == add_out  # TrueMore Examples=============Below are some additional function examples. Note how ``numpy`` typescan even be used in type hints, as shown in the ``numpy_sum`` function... code:: python    from collections import Counter    import numpy as np    def list_sum(x: List[int]) -&gt; int:        '''Computes the sum of a sequence of integers'''        return sum(x)    def numpy_sum(x: List[np.int32]) -&gt; np.int32:        '''Uses numpy to compute a vectorized sum over x'''        return np.sum(x)    def count_strings(x: List[str]) -&gt; Dict[str, int]:        '''Returns a count mapping from a sequence of strings'''        return Counter(x).. ===============LICENSE_START=======================================================.. Acumos CC-BY-4.0.. ===================================================================================.. Copyright (C) 2017-2018 AT&amp;T Intellectual Property &amp; Tech Mahindra. All rights reserved... ===================================================================================.. This Acumos documentation file is distributed by AT&amp;T and Tech Mahindra.. under the Creative Commons Attribution 4.0 International License (the &quot;License&quot;);.. you may not use this file except in compliance with the License... You may obtain a copy of the License at....      http://creativecommons.org/licenses/by/4.0.... This file is distributed on an &quot;AS IS&quot; BASIS,.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied... See the License for the specific language governing permissions and.. limitations under the License... ===============LICENSE_END===========================================================================================Acumos Python Client Release Notes==================================v1.0.1, 27 April 2021=====================* use acumos-python-client &gt; 0.8.0 with Acumos clio `ACUMOS-4330 &lt;https://jira.acumos.org/browse/ACUMOS-4330&gt;`_v1.0.0, 13 April 2021=====================* Fix Type issue with python 3.9 `ACUMOS-4323 &lt;https://jira.acumos.org/browse/ACUMOS-4323&gt;`_v0.9.9, 13 April 2021=====================* Take into account &quot;deploy&quot; parameter in acumos python client `ACUMOS-4303 &lt;https://jira.acumos.org/browse/ACUMOS-4303&gt;`_v0.9.8, 06 November 2020========================* Return docker URI &amp; added an optional flag to replace and existing model when dumping `ACUMOS-4298 &lt;https://jira.acumos.org/browse/ACUMOS-4298&gt;`_* The model bundle can now be dumped directly as a zip file `ACUMOS-4273 &lt;https://jira.acumos.org/browse/ACUMOS-4273&gt;`_* Allow installation on python 3.9 `ACUMOS-4123 &lt;https://jira.acumos.org/browse/ACUMOS-4123&gt;`_v0.9.7, 27 August 2020======================* Add support of python 3.7 &amp; 3.8 `ACUMOS-4123 &lt;https://jira.acumos.org/browse/ACUMOS-4123&gt;`_* Display acumos logo on github `ACUMOS-4094 &lt;https://jira.acumos.org/browse/ACUMOS-4094&gt;`_v0.9.4, 05 April 2020=====================* Give image tag URL from python client `ACUMOS-3961 &lt;https://jira.acumos.org/browse/ACUMOS-3961&gt;`_v0.9.3, 30 Mar 2020===================* Modify unstructured type section in pypi `ACUMOS-3956 &lt;https://jira.acumos.org/browse/ACUMOS-3956&gt;`_* Raise an Error when using asymetric type `ACUMOS-3956 &lt;https://jira.acumos.org/browse/ACUMOS-3956&gt;`_v0.9.2, 31 Jan 2020===================* Remove support for python 3.5 `Gerrit-6275 &lt;https://gerrit.acumos.org/r/c/acumos-python-client/+/6275&gt;`_v0.9.1======* add raw format support `ACUMOS-2712 &lt;https://jira.acumos.org/browse/ACUMOS-2712&gt;`_* publish content type for long description `Gerrit-5504 &lt;https://gerrit.acumos.org/r/c/acumos-python-client/+/5504&gt;`_v0.8.0======(This is the recommended version for the Clio release)-  Enhancements   - Users may now specify additional options when pushing their Acumos model. See the options section in the tutorial for more information.   - ``acumos`` now supports Keras models built with ``tensorflow.keras``-  Support changes   - ``acumos`` no longer supports Python 3.4v0.7.2======-  Bug fixes   - The deprecated authentication API is now considered optional   - A more portable path solution is now used when saving models, to avoid issues with models developed in Windowsv0.7.1======-  Authentication   - Username and password authentication has been deprecated   - Users are now interactively prompted for an onboarding token, as opposed to a username and passwordv0.7.0======-  Requirements   - Python script dependencies can now be specified using a Requirements object   - Python script dependencies found during the introspection stage are now included with the modelv0.6.5======-  Bug fixes   - Don't attempt to use an empty auth token (avoids blank strings to be set in environment)v0.6.4======-  Bug fixes   - The normalized path of the system base prefix is now used for identifying stdlib packagesv0.6.3======-  Bug fixes   - Improved dependency inspection when using a virtualenv   - Removed custom packages from model metadata, as it caused image build failures   - Fixed Python 3.5.2 ordering bug in wrapped model usagev0.6.2======-  TensorFlow   - Fixed a serialization issue that occurred when using a frozen graphv0.6.1======-  Model upload   - The JWT is now cleared immediately after a failed upload   - Additional HTTP information is now included in the error messagev0.6.0======-  Authentication token   -  A new environment variable ``ACUMOS_TOKEN`` can be used to short-circuit      the authentication process-  Extra headers   -  ``AcumosSession.push`` now accepts an optional ``extra_headers`` argument,      which will allow users and systems to include additional information when      pushing models to the onboarding serverv0.5.0======-  Modeling   -  Python 3.6 NamedTuple syntax support now tested   -  User documentation includes example of new NamedTuple syntax-  Model wrapper   -  Model wrapper now has APIs for consuming and producing Python      dicts and JSON strings-  Protobuf and protoc   -  An explicit check for protoc is now made, which raises a more      informative error message   -  User documentation is more clear about dependence on protoc, and      provides an easier way to install protoc via Anaconda-  Keras   -  The active keras backend is now included as a tracked module   -  keras_contrib layers are now supportedv0.4.0======-  Replaced library-specific onboarding functions with “new-style”   models   -  Support for arbitrary Python functions using type hints   -  Support for custom user-defined types   -  Support for TensorFlow models   -  Improved dependency introspection   -  Improved object serialization mechanisms.. ===============LICENSE_START=======================================================.. Acumos CC-BY-4.0.. ===================================================================================.. Copyright (C) 2017-2018 AT&amp;T Intellectual Property &amp; Tech Mahindra. All rights reserved... ===================================================================================.. This Acumos documentation file is distributed by AT&amp;T and Tech Mahindra.. under the Creative Commons Attribution 4.0 International License (the &quot;License&quot;);.. you may not use this file except in compliance with the License... You may obtain a copy of the License at....      http://creativecommons.org/licenses/by/4.0.... This file is distributed on an &quot;AS IS&quot; BASIS,.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied... See the License for the specific language governing permissions and.. limitations under the License... ===============LICENSE_END=============================================================================================Acumos Python Client Developer Guide====================================Testing=======We use a combination of ``tox``, ``pytest``, and ``flake8`` to test``acumos``. Code which is not PEP8 compliant (aside from E501) will beconsidered a failing test. You can use tools like ``autopep8`` to“clean” your code as follows:.. code:: bash    $ pip install autopep8    $ cd acumos-python-client    $ autopep8 -r --in-place --ignore E501 acumos/ testing/ examples/Run tox directly:.. code:: bash    $ cd acumos-python-client    $ export WORKSPACE=$(pwd)  # env var normally provided by Jenkins    $ toxYou can also specify certain tox environments to test:.. code:: bash    $ tox -e py36  # only test against Python 3.6    $ tox -e flake8  # only lint codeA set of integration test is also available in ``acumos-package/testing/integration_tests``.To run those, use ``acumos-package/testing/tox-integration.ini`` as tox config (-c flag),onboarding tests will be ran with python 3.6 to 3.9.You will need to set your user credentials and platform configuration in ``tox-integration.ini``... code:: bash    $ tox -c acumos-package/testing/integration_testsPackaging=========The RST files in the docs/ directory are used to publish HTML pages toReadTheDocs.io and to build the package long description in setup.py.The symlink from the subdirectory acumos-package to the docs/ directoryis required for the Python packaging tools.  Those tools build a sourcedistribution from files in the package root, the directory acumos-package.The MANIFEST.in file directs the tools to pull files from directory docs/,and the symlink makes it possible because the tools only look within thepackage root.</longdescription>
</pkgmetadata>