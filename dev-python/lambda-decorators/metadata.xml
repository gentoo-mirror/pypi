<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>üêçŒª‚ú® - lambda_decorators=========================|Version|_ |Docs|_ |Build|_ |SayThanks|_A collection of useful decorators for making AWS Lambda handlers``lambda_decorators`` is a collection of useful decorators for writing Pythonhandlers for `AWS Lambda &lt;https://aws.amazon.com/lambda/&gt;`_. They allow you toavoid boiler plate for common things such as CORS headers, JSON serialization,etc.Quick example-------------.. code:: python    # handler.py    from lambda_decorators import json_http_resp, load_json_body    @json_http_resp    @load_json_body    def handler(event, context):        return {'hello': event['body']['name']}When deployed to Lambda behind API Gateway and cURL'd:.. code:: shell   $ curl -d '{&quot;name&quot;: &quot;world&quot;}' https://example.execute-api.us-east-1.amazonaws.com/dev/hello   {&quot;hello&quot;: &quot;world&quot;}Install-------If you are using `the serverless framework &lt;https://github.com/serverless/serverless&gt;`_I recommend using`serverless-python-requirements &lt;https://github.com/UnitedIncome/serverless-python-requirements&gt;`_.. code:: shell    sls plugin install -n serverless-python-requirements    echo lambda-decorators &gt;&gt; requirements.txtOr if using some other deployment method to AWS Lambda you can just downloadthe entire module because it's only one file... code:: shell    curl -O https://raw.githubusercontent.com/dschep/lambda-decorators/master/lambda_decorators.pyIncluded Decorators:--------------------``lambda_decorators`` includes the following decorators to avoid boilerplatefor common usecases when using AWS Lambda with Python.* `async_handler &lt;http://lambda-decorators.rtfd.io#lambda_decorators.async_handler&gt;`_ - support for async handlers* `cors_headers &lt;http://lambda-decorators.rtfd.io#lambda_decorators.cors_headers&gt;`_ - automatic injection of CORS headers* `dump_json_body &lt;http://lambda-decorators.rtfd.io#lambda_decorators.dump_json_body&gt;`_ - auto-serialization of http body to JSON* `load_json_body &lt;http://lambda-decorators.rtfd.io#lambda_decorators.load_json_body&gt;`_ - auto-deserialize of http body from JSON* `json_http_resp &lt;http://lambda-decorators.rtfd.io#lambda_decorators.json_http_resp&gt;`_ - automatic serialization of python object to HTTP JSON response* `json_schema_validator &lt;http://lambda-decorators.rtfd.io#lambda_decorators.json_schema_validator&gt;`_ - use JSONSchema to validate request&amp;response payloads* `load_urlencoded_body &lt;http://lambda-decorators.rtfd.io#lambda_decorators.load_urlencoded_body&gt;`_ - auto-deserialize of http body from a querystring encoded body* `no_retry_on_failure &lt;http://lambda-decorators.rtfd.io#lambda_decorators.no_retry_on_failure&gt;`_ - detect and stop retry attempts for scheduled lambdas* `ssm_parameter_store &lt;http://lambda-decorators.rtfd.io#lambda_decorators.ssm_parameter_store&gt;`_ - fetch parameters from the AWS SSM Parameter Store* `secret_manager &lt;http://lambda-decorators.rtfd.io#lambda_decorators.secret_manager&gt;`_ - fetch secrets from the AWS Secrets ManagerSee each individual decorators for specific usage details and the example_for some more use cases. This library is also meant to serve as an example for how to writedecorators for use as lambda middleware. See the recipes_ page for some more niche examples ofusing decorators as middleware for lambda... _example: https://github.com/dschep/lambda-decorators/tree/master/example.. _recipes: recipes.rstWriting your own----------------``lambda_decorators`` includes utilities to make building your own decoratorseasier. The `before &lt;http://lambda-decorators.rtfd.io#lambda_decorators.before&gt;`_, `after &lt;http://lambda-decorators.rtfd.io#lambda_decorators.after&gt;`_, and `on_exception &lt;http://lambda-decorators.rtfd.io#lambda_decorators.on_exception&gt;`_ decoratorscan be applied to your own functions to turn them into decorators for yourhandlers. For example:.. code:: python    import logging    from lambda_decorators import before    @before    def log_event(event, context):        logging.debug(event)        return event, context    @log_event    def handler(event, context):        return {}And if you want to make a decorator that provides two or more ofbefore/after/on_exception functionality, you can use`LambdaDecorator &lt;http://lambda-decorators.rtfd.io#lambda_decorators.LambdaDecorator&gt;`_:.. code:: python    import logging    from lambda_decorators import LambdaDecorator    class log_everything(LambdaDecorator):        def before(event, context):            logging.debug(event, context)            return event, context        def after(retval):            logging.debug(retval)            return retval        def on_exception(exception):            logging.debug(exception)            return {'statusCode': 500}    @log_everything    def handler(event, context):        return {}Why---Initially, I was inspired by `middy &lt;https://github.com/middyjs/middy&gt;`_ whichI like using in JavaScript. So naturally, I thought I'd like to have something similar in Pythontoo. But then as I thought about it more, it seemed that when thinking of functions as the computeunit, when using python, `decorators &lt;https://wiki.python.org/moin/PythonDecorators&gt;`_pretty much are middleware! So instead of building a middleware engine and a few middlewares, Ijust built a few useful decorators and utilities to build them.-----.. |Version| image:: https://img.shields.io/pypi/v/lambda-decorators.svg.. _Version: https://pypi.org/project/lambda-decorators.. |Docs| image:: http://readthedocs.org/projects/lambda-decorators/badge/?version=latest.. _Docs: http://lambda-decorators.readthedocs.org/en/latest.. |Build| image:: https://img.shields.io/travis/dschep/lambda-decorators/master.svg.. _Build: https://travis-ci.org/dschep/lambda-decorators.. |SayThanks| image:: https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg.. _SayThanks: https://saythanks.io/to/dschep`Full API Documentation &lt;http://lambda-decorators.readthedocs.io/en/latest/&gt;`_</longdescription>
</pkgmetadata>