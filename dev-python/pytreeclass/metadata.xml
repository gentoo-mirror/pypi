<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- &lt;h1 align=&quot;center&quot; style=&quot;font-family:Monospace&quot; &gt;Py🌲Class&lt;/h1&gt; --&gt;&lt;h5 align=&quot;center&quot;&gt;&lt;img width=&quot;250px&quot; src=&quot;https://user-images.githubusercontent.com/48389287/227880173-bf78c02c-d28b-4cf4-95e6-fa49b82a43a1.svg&quot;&gt; &lt;br&gt;&lt;br&gt;[**Installation**](#installation)|[**Description**](#description)|[**Quick Example**](#quick_example)|[**StatefulComputation**](#stateful_computation)|[**Benchamrks**](#more)|[**Acknowledgements**](#acknowledgements)![Tests](https://github.com/ASEM000/pytreeclass/actions/workflows/tests.yml/badge.svg)![pyver](https://img.shields.io/badge/python-3.8%203.9%203.10%203.11_-red)![pyver](https://img.shields.io/badge/jax-&gt;=0.4.7-red)![codestyle](https://img.shields.io/badge/codestyle-black-black)[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/ASEM000/PyTreeClass/blob/main/assets/intro.ipynb)[![Downloads](https://pepy.tech/badge/pytreeclass)](https://pepy.tech/project/pytreeclass)[![codecov](https://codecov.io/gh/ASEM000/pytreeclass/branch/main/graph/badge.svg?token=TZBRMO0UQH)](https://codecov.io/gh/ASEM000/pytreeclass)[![Documentation Status](https://readthedocs.org/projects/pytreeclass/badge/?version=latest)](https://pytreeclass.readthedocs.io/en/latest/?badge=latest)![GitHub commit activity](https://img.shields.io/github/commit-activity/m/ASEM000/pytreeclass)[![DOI](https://zenodo.org/badge/512717921.svg)](https://zenodo.org/badge/latestdoi/512717921)![PyPI](https://img.shields.io/pypi/v/pytreeclass)[![CodeFactor](https://www.codefactor.io/repository/github/asem000/pytreeclass/badge)](https://www.codefactor.io/repository/github/asem000/pytreeclass)&lt;/h5&gt;## 🛠️ Installation&lt;a id=&quot;installation&quot;&gt;&lt;/a&gt;```pythonpip install pytreeclass```**Install development version**```pythonpip install git+https://github.com/ASEM000/PyTreeClass```## 📖 Description&lt;a id=&quot;description&quot;&gt;&lt;/a&gt;`PyTreeClass` is a JAX-compatible class builder to create and operate on stateful JAX PyTrees in a performant and intuitive way, by building on familiar concepts found in `numpy`, `dataclasses`, and others.See [documentation](https://pytreeclass.readthedocs.io/en/latest/notebooks/getting_started.html) and [🍳 Common recipes](https://pytreeclass.readthedocs.io/en/latest/notebooks/common_recipes.html) to check if this library is a good fit for your work. _If you find the package useful consider giving it a 🌟._## ⏩ Quick Example &lt;a id=&quot;quick_example&quot;&gt;&lt;div align=&quot;center&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;```pythonimport jaximport jax.numpy as jnpimport pytreeclass as pytc@pytc.autoinitclass Tree(pytc.TreeClass):    a: float = 1.0    b: tuple[float, float] = (2.0, 3.0)    c: jax.Array = jnp.array([4.0, 5.0, 6.0])    def __call__(self, x):        return self.a + self.b[0] + self.c + xtree = Tree()mask = jax.tree_map(lambda x: x &gt; 5, tree)tree = tree\       .at[&quot;a&quot;].set(100.0)\       .at[&quot;b&quot;].at[0].set(10.0)\       .at[mask].set(100.0)print(tree)# Tree(a=100.0, b=(10.0, 3.0), c=[  4.   5. 100.])print(pytc.tree_diagram(tree))# Tree# ├── .a=100.0# ├── .b:tuple# │   ├── [0]=10.0# │   └── [1]=3.0# └── .c=f32[3](μ=36.33, σ=45.02, ∈[4.00,100.00])print(pytc.tree_summary(tree))# ┌─────┬──────┬─────┬──────┐# │Name │Type  │Count│Size  │# ├─────┼──────┼─────┼──────┤# │.a   │float │1    │      │# ├─────┼──────┼─────┼──────┤# │.b[0]│float │1    │      │# ├─────┼──────┼─────┼──────┤# │.b[1]│float │1    │      │# ├─────┼──────┼─────┼──────┤# │.c   │f32[3]│3    │12.00B│# ├─────┼──────┼─────┼──────┤# │Σ    │Tree  │6    │12.00B│# └─────┴──────┴─────┴──────┘# ** pass it to jax transformations **# works with jit, grad, vmap, etc.@jax.jit@jax.graddef sum_tree(tree: Tree, x):    return sum(tree(x))print(sum_tree(tree, 1.0))# Tree(a=3.0, b=(3.0, 0.0), c=[1. 1. 1.])```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;## 📜 Stateful computations&lt;a id=&quot;stateful_computation&quot;&gt;&lt;/a&gt;[Under jax.jit jax requires states to be explicit](https://jax.readthedocs.io/en/latest/jax-101/07-state.html?highlight=state), this means that for any class instance; variables needs to be separated from the class and be passed explictly. However when using `TreeClass` no need to separate the instance variables ; instead the whole instance is passed as a state.Using the following pattern,Updating state **functionally** can be achieved under `jax.jit`&lt;div align=&quot;center&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;```pythonimport jaximport pytreeclass as pytcclass Counter(pytc.TreeClass):    def __init__(self, calls: int = 0):        self.calls = calls    def increment(self):        self.calls += 1counter = Counter() # Counter(calls=0)```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;Here, we define the update function. Since the increment method mutate the internal state, thus we need to use the functional approach to update the state by using `.at`. To achieve this we can use `.at[method_name].__call__(*args,**kwargs)`, this functional call will return the value of this call and a _new_ model instance with the update state.&lt;div align=&quot;center&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;```python@jax.jitdef update(counter):    value, new_counter = counter.at[&quot;increment&quot;]()    return new_counterfor i in range(10):    counter = update(counter)print(counter.calls) # 10```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/details&gt;## ➕ Benchmarks&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;details&gt;&lt;summary&gt;Benchmark flatten/unflatten compared to Flax and Equinox &lt;/summary&gt;&lt;a href=&quot;https://colab.research.google.com/github/ASEM000/PyTreeClass/blob/main/assets/benchmark_flatten_unflatten.ipynb&quot; target=&quot;_parent&quot;&gt;&lt;img src=&quot;https://colab.research.google.com/assets/colab-badge.svg&quot; alt=&quot;Open In Colab&quot;/&gt;&lt;/a&gt;&lt;table&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;CPU&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;GPU&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;img src='assets/benchmark_cpu.png'&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Benchmark simple training against `flax` and `equinox` &lt;/summary&gt;Training simple sequential linear benchmark against `flax` and `equinox`&lt;table&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Num of layers&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;Flax/PyTC time&lt;br&gt;&lt;a href=&quot;https://colab.research.google.com/github/ASEM000/PyTreeClass/blob/main/assets/benchmark_nn_training_flax.ipynb&quot; target=&quot;_parent&quot;&gt;&lt;img src=&quot;https://colab.research.google.com/assets/colab-badge.svg&quot; alt=&quot;Open In Colab&quot;/&gt;&lt;/a&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;Equinox/PyTC time&lt;br&gt; &lt;a href=&quot;https://colab.research.google.com/github/ASEM000/PyTreeClass/blob/main/assets/benchmark_nn_training_equinox.ipynb&quot; target=&quot;_parent&quot;&gt;&lt;img src=&quot;https://colab.research.google.com/assets/colab-badge.svg&quot; alt=&quot;Open In Colab&quot;/&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;1.427&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;6.671&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;100&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;1.1130&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;2.714&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/details&gt;## 📙 Acknowledgements&lt;a id=&quot;acknowledgements&quot;&gt;&lt;/a&gt;- [Lenses](https://hackage.haskell.org/package/lens)- [Treex](https://github.com/cgarciae/treex), [Equinox](https://github.com/patrick-kidger/equinox), [tree-math](https://github.com/google/tree-math), [Flax PyTreeNode](https://github.com/google/flax/commit/291a5f65549cf4522f0de033451cd83c0d0168d9), [TensorFlow](https://www.tensorflow.org), [PyTorch](https://pytorch.org)- [Lovely JAX](https://github.com/xl0/lovely-jax)</longdescription>
</pkgmetadata>