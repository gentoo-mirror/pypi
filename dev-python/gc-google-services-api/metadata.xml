<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Publish to PyPI.org](https://github.com/GoodCod3/gc-google-services-api/actions/workflows/pr.yml/badge.svg)](https://github.com/GoodCod3/gc-google-services-api/actions/workflows/pr.yml)# How to contributeAfter clone repository## 1.- Install dependencies```bashpoetry install```## 2.- Run test```bashmake test```# Publish new versionWhen your Pull Request is approved and merged with master, then to can generate new version running the next command:```bashmake v=X.Y.Z release```or you can execute```bashpoetry version X.Y.Z &lt;-- (New version)git commit -am &quot;Release vX.Y.Z&quot;git tag vX.Y.Zgit push --follow-tags```Google services API=============================This repository is a suite that exposes Google services to easily integrate with our project (Big query, Google sheet, Gmail, etc...).Each api needs a different form of authentication, either because it requires the interaction of a person who approves the api to extract sensitive information or because we want to connect automatically without user intervention.What APIs and methods does it support?=======================This project will grow as new services and methods are integrated.Here is a list of current support## Big Query----------------------------------### execute_query (Method):Allows you to run a query on a Big Query table.In order for the api to connect to the table, it is necessary to configure the environment variable `$GOOGLE_APPLICATION_CREDENTIALS` indicating the path of the file with the credentials (service account json file)```bashexport GOOGLE_APPLICATION_CREDENTIALS=/home/service_account_file.json```### Usage example```pythonfrom gc_google_services_api.bigquery import execute_queryquery = &quot;SELECT * FROM users;&quot;users = execute_query(query)for user in users:    print(user)```## Google sheet----------------------------------## 1.- **read_gsheet** (Method of a class):Allows to read and return the content of a Google sheet link.It is necessary to indicate the range of columns that we want to returnIn order for the api to connect with Google, it is necessary to send the JSON content of your service account.the format of the service account should be something like this:```{  &quot;type&quot;: &quot;service_account&quot;,  &quot;project_id&quot;: &quot;XXXXXX&quot;,  &quot;private_key_id&quot;: &quot;XXXXXX&quot;,  &quot;private_key&quot;: &quot;XXXXXX&quot;,  &quot;client_email&quot;: &quot;XXXXXX&quot;,  &quot;client_id&quot;: &quot;XXXXXX&quot;,  &quot;auth_uri&quot;: &quot;https://accounts.google.com/o/oauth2/auth&quot;,  &quot;token_uri&quot;: &quot;https://oauth2.googleapis.com/token&quot;,  &quot;auth_provider_x509_cert_url&quot;: &quot;https://www.googleapis.com/oauth2/v1/certs&quot;,  &quot;client_x509_cert_url&quot;: &quot;https://www.googleapis.com/robot/v1/metadata/x509/XXXXXX&quot;}```### Usage example```pythonfrom gc_google_services_api.gsheet import GSheetname = 'Sheet 1'spreadsheet_id = '11111111'spreadsheet_range = 'A2:B12'gsheet_api = GSheet('subject_email@test.com')result = gsheet_api.read_gsheet(sheet_name, spreadsheet_id, spreadsheet_range)for row in result['values']:    print(row)```## 2.-  **get_sheetnames** (Method of a class):Get the list of sheetnames given a spreadsheet id.### Usage example```pythonfrom gc_google_services_api.gsheet import GSheetspreadsheet_id = '11111111'gsheet_api = GSheet('subject_email@test.com')result = gsheet_api.get_sheetnames(spreadsheet_id)for row in result['sheets']:    print(row)```## Gmail----------------------------------Send emails with Gmail API.This module needs to have configured an environment variable called `AUTHENTICATION_EMAIL` that will be the email used as sender.### Usage example```pythonimport osfrom gc_google_services_api.gmail import Gmailgmail_api = Gmail('subject-email@test.com')gmail_api.send_email(    'email message',    'email title',    ['to_email1@gmail.com'],)```## Calendar----------------------------------Get calendars info and events.This module needs to have configured an environment variable called `AUTHENTICATION_EMAIL` that will be the email used to authenticate with Google services.### Usage example```pythonimport osfrom datetime import datetime, timedeltafrom gc_google_services_api.calenda_api import Calendarstart_date = datetime.today()end_date = datetime.today() + timedelta(days=1)creator = 'test@test.com'calendar_api = Calendar(start_date, end_date, creator)# Getting calendar resourcesresources = calendar_api.get_all_resources()print(resources)# Getting calendarscalendar_api.request_calendars()print(calendar_api.calendars)# Getting events from a calendarcalendar_id = '1'calendar_api.request_calendar_events(calendar_id)print(calendar_api.calendar_events)# Delete calendar eventcalendar_id = '1'event_id = '2'calendar_api.remove_event(calendar_id, event_id)```</longdescription>
</pkgmetadata>