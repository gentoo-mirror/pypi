<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Local Emulator for Google Cloud TasksGoogle doesn't (yet) ship an emulator for the Cloud Tasks API like they do forCloud Datastore.This is a stub emulator so you can run your tests and do local development withouthaving to connect to the production Tasks API.**THIS IS A WORK IN PROGRESS NOT ALL API CALLS ARE COMPLETE**---## Looking for Commercial Support?Potato offers Commercial Support for all its Open Source projects and we can tailor a support package to your needs. If you're interested in commercial support, training, or consultancy then go ahead and contact us at [opensource@potatolondon.com](mailto:opensource@potatolondon.com)---## UsageStart the emulator with:```gcloud-tasks-emulator start --port=9090```Then from within your code, use the following (instead of your normal production client connection)### Python```pyimport grpcfrom google.cloud.tasks_v2 import CloudTasksClientfrom google.cloud.tasks_v2.gapic.transports.cloud_tasks_grpc_transport import CloudTasksGrpcTransportclient = CloudTasksClient(    transport=CloudTasksGrpcTransport(channel=grpc.insecure_channel(&quot;127.0.0.1:9090&quot;)))```### Node.js```jsconst grpc = require(&quot;@grpc/grpc-js&quot;);const { CloudTasksClient } = require('@google-cloud/tasks');const client = new CloudTasksClient({    servicePath: &quot;localhost&quot;,    port: 9090,    sslCreds: grpc.credentials.createInsecure()});```### Java```javaimport com.google.api.gax.core.NoCredentialsProvider;import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;import com.google.cloud.tasks.v2.CloudTasksClient;import com.google.cloud.tasks.v2.CloudTasksSettings;import io.grpc.ManagedChannelBuilder;CloudTasksSettings settings = CloudTasksSettings.newBuilder()        .setCredentialsProvider(NoCredentialsProvider.create())        .setTransportChannelProvider(                InstantiatingGrpcChannelProvider.newBuilder()                        .setEndpoint(&quot;localhost:9090&quot;)                        .setChannelConfigurator(ManagedChannelBuilder::usePlaintext)                        .build()        )        .build();CloudTasksClient client = CloudTasksClient.create(settings);```## The 'default' queueBy default, the emulator won't create a 'default' queue, however you can enable thisby passing the fully-qualified name of the queue:```gcloud-tasks-emulator start --default-queue=projects/[PROJECT]/locations/[LOCATION]/queues/default```## Specifying a queue.yamlIf your project uses a queue.yaml file, you can create default queues by passing its path to the `--queue-yaml` argument.Additionally, you'll likely want to pass `--queue-yaml-project` and `--queue-yaml-location` to generate the correctfully qualified queue names. These settings will otherwise default to `&quot;[PROJECT]&quot;` and `&quot;[LOCATION]&quot;` respectively.## Specifying a targetTask queue needs to point at a service for outgoing requests. You can specify this with `--target-host` and `--target-port`## TestingRun:```python gcloud_tasks_emulator/tests.py```</longdescription>
</pkgmetadata>