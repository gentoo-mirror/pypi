<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Frontmatter[Jekyll](http://jekyllrb.com/)-style YAML front matter offers a useful way to add arbitrary, structured metadata to text documents, regardless of type.This is a small package to load and parse files (or just text) with YAML (or JSON, TOML or other) front matter.[![Tests](https://github.com/eyeseast/feed-to-sqlite/workflows/Test/badge.svg)](https://github.com/eyeseast/feed-to-sqlite/actions?query=workflow%3ATest)[![PyPI](https://img.shields.io/pypi/v/python-frontmatter.svg)](https://pypi.org/project/python-frontmatter/)**[Documentation](https://python-frontmatter.readthedocs.io/en/latest/)**## Install:    pip install python-frontmatter## Usage:```python&gt;&gt;&gt; import frontmatter```Load a post from a filename:```python&gt;&gt;&gt; post = frontmatter.load('tests/yaml/hello-world.txt')```Or a file (or file-like object):```python&gt;&gt;&gt; with open('tests/yaml/hello-world.txt') as f:...     post = frontmatter.load(f)```Or load from text:```python&gt;&gt;&gt; with open('tests/yaml/hello-world.txt') as f:...     post = frontmatter.loads(f.read())```Access content:```python&gt;&gt;&gt; print(post.content)Well, hello there, world.# this works, too&gt;&gt;&gt; print(post)Well, hello there, world.```Use metadata (metadata gets proxied as post keys):```python&gt;&gt;&gt; print(post['title'])Hello, world!```Metadata is a dictionary, with some handy proxies:```python&gt;&gt;&gt; sorted(post.keys())['layout', 'title']&gt;&gt;&gt; from pprint import pprint&gt;&gt;&gt; post['excerpt'] = 'tl;dr'&gt;&gt;&gt; pprint(post.metadata){'excerpt': 'tl;dr', 'layout': 'post', 'title': 'Hello, world!'}```If you don't need the whole post object, just parse:```python&gt;&gt;&gt; with open('tests/yaml/hello-world.txt') as f:...     metadata, content = frontmatter.parse(f.read())&gt;&gt;&gt; print(metadata['title'])Hello, world!```Write back to plain text, too:```python&gt;&gt;&gt; print(frontmatter.dumps(post)) # doctest: +NORMALIZE_WHITESPACE---excerpt: tl;drlayout: posttitle: Hello, world!---Well, hello there, world.```Or write to a file (or file-like object):```python&gt;&gt;&gt; from io import BytesIO&gt;&gt;&gt; f = BytesIO()&gt;&gt;&gt; frontmatter.dump(post, f)&gt;&gt;&gt; print(f.getvalue().decode('utf-8')) # doctest: +NORMALIZE_WHITESPACE---excerpt: tl;drlayout: posttitle: Hello, world!---Well, hello there, world.```For more examples, see files in the `tests/` directory. Each sample file has a corresponding `.result.json` file showing the expected parsed output. See also the `examples/` directory, which covers more ways to customize input and output.</longdescription>
</pkgmetadata>