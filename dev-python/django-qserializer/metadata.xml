<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-qserializerDjango QSerializer started as an internal [Buser](https://www.buser.com.br)project to improve our serialization process.Database queries and serialization are two separated steps, but really ORMcoupled. Relationships must be fetched from database before serialization,but Django don't have an easy way to setup that.Start with a custom manager `SerializableManager`.```pythonfrom django.db import modelsfrom django_qserializer import SerializableManagerclass Company(models.Model):    name = models.CharField(max_length=64)class Bus(models.Model):    objects = SerializableManager()    company = models.ForeignKey(Company, on_delete=models.SET_NULL)```A basic serializer implementation would be:```pythonclass BusSerializer(BaseSerializer):    select_related = ['company']    def serialize_object(self, obj):        return {            'id': self.id,            'company': {                'name': self.company.name,            }        }```Add the serializer to your queryset as:```pythonbuses = Bus.objects.to_serialize(BusSerializer).all()for bus in buses:    # The serialize method is bound to BusSerializer.serialize_object.    print(bus.serialize())```## API### `BaseSerializer.select_related`List of model fields to add to queryset with a `select_related` call.### `BaseSerializer.prefetch_related`List of model fields to add to queryset with a `prefetch_related` call.```pythonclass BusSerializer(BaseSerializer):    prefetch_related = ['company']    def serialize_object(self, obj):        return {            'id': self.id,            'company': {                'name': self.company.name,            }        }```### `BaseSerializer.prepare_queryset`Callable to change the queryset. It is possible to implement `select_related`and `prefetch_related` attributes with it, but they work together with`prepare_queryset`.```pythonclass BusSerializer(BaseSerializer):    select_related = ['company']    def prepare_queryset(self, qs):        return qs.annotate(state=Value('broken'))```### `BaseSerializer.prepare_objects`Prepare objects after they are loaded to memory. Add data in bulk to them, likefetching information from cache and attaching to loaded objects.### `BaseSerializer.serialize_object`Required implementation. It converts the Django model to a serializabledict. Avoid slow calls here because it will cause N+1 issues.### `BaseSerializer.serialize`Execute `serialize_object` for each model object.</longdescription>
</pkgmetadata>