<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![ci](https://github.com/mjx-project/mjx/actions/workflows/ci.yml/badge.svg)](https://github.com/mjx-project/mjx/actions/workflows/ci.yml)&lt;!-- &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;icons/1500w/png/color1/1-1_p1500.png&quot; alt=&quot;mjx&quot; width=&quot;150&quot;/&gt;&lt;/p&gt;--&gt;&lt;!-- &lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;icons/1500w/png/color1/3_p1500.png&quot; alt=&quot;mjx&quot; width=&quot;200&quot;/&gt;&lt;/p&gt;--&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;icons/SVG/2-2_svg.svg&quot; alt=&quot;mjx&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;# FeaturesMjx is a Japanese Mahjong (riichi Mahjong) simulator.Mjx works as a game server as [Mjai](https://github.com/gimite/mjai), a popular Mahjong simulator, to evaluate Mahjong AIs but have additional features:* **Fast** (100x faster than [Mjai](https://github.com/gimite/mjai))* **Exact [Tenhou](https://tenhou.net/) compatibility**  (Mjx is validated with numerous Tenhou game logs)* **Gym-like API** * **Easy distributed computing** (available for large-scale RL and evaluation thanks to [gRPC](https://github.com/grpc/grpc))* **[Mjai](https://github.com/gimite/mjai) compatible** ([mjx_mjai_translater](https://github.com/mjx-project/mjx_mjai_translater))* **Beautiful visualization** &lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;obs.png&quot; alt=&quot;mjx&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;# Quick start[Google colab](https://colab.research.google.com/drive/1m1wOT_K2YFtuV6IO7VgWk4ilVhTKqRFU?usp=sharing)# Install```$ pip install mjx```**Requirements.** Mjx supports `Python3.7` or later in `Linux` and `macOS Intel` (10.15 or later).Currently `Windows` and `macOS Apple Silicon` are NOT supported.Contributions for supporting `Windows` and `macOS Apple Silicon` are more than welcome!# Example```pyimport mjxagent = mjx.RandomAgent()env = mjx.MjxEnv()obs_dict = env.reset()while not env.done():  actions = {player_id: agent.act(obs)    for player_id, obs in obs_dict.items()}  obs_dict = env.step(actions)returns = env.rewards()```# Sever Usage&lt;table&gt;&lt;tr&gt;&lt;th&gt;Server&lt;/th&gt;&lt;th&gt;Client&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;```pyimport randomimport mjxclass RandomAgent(mjx.Agent):  def __init__(self):    super().__init__()  # When you use neural network models  # you may want to infer actions by batch  def act_batch(self, observations):    return [random.choice(obs.legal_actions())             for obs in observations]agent = RandomAgent()# act_batch is called instead of actagent.serve(&quot;127.0.0.1:8080&quot;, batch_size=8)```&lt;/td&gt;&lt;td&gt;```pyimport mjxhost=&quot;127.0.0.1:8080&quot;mjx.run(  {f&quot;player_{i}&quot;: host for i in range(4)},  num_games=1000,  num_parallels=16)```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;# How to developWe recommend you to develop Mjx inside a container.Easiest way is open this repository from VsCode.Feel free to mention to @sotetsuk if you have any questions.# LicenseMIT</longdescription>
</pkgmetadata>