<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># synbio`synbio` is a library for designing and assembling DNA. Users can design plasmids or libraries and export multi-step build protocols. Input SeqRecords. Output assembly SeqRecords, protocols, plate maps, and robotic picklists.Documentation is available at [https://lattice-automation.github.io/synbio](https://lattice-automation.github.io/synbio)## Installation```bashpip install synbio```## Models`synbio` only expects the user to define their `Design` and `Protocol`. Several protocols are pre-defined.### DesignsAll are in `synbio.designs`:- `Combinatorial` - list of SeqRecords to combinatorially anneal into all valid assemblies- `CombinatorialBins` - list of bins of SeqRecords for combinatorial assembly of records between bins- `Plasmid` - single list of SeqRecords to combine into a plasmid- `PlasmidLibrary` - list of list of SeqRecords to combine into plasmids### ProtocolsAll are in `synbio.protocols`:- `Gibson` - Gibson assembly based on [NEB's E5510](https://www.neb.com/protocols/2012/12/11/gibson-assembly-protocol-e5510)- `GoldenGate` - Golden Gate assembly based on [NEB's E1601](https://www.neb.com/products/e1601-neb-golden-gate-assembly-mix#Product%20Information)## ExampleIn the example below, the user specifies a combinatorial library design. All SeqRecords are tested for circularization with other SeqRecords. New and valid plasmids are assembled.Behind the scenes, `synbio` is filtering all combinations of SeqRecords from the design that will circularize into valid plasmids (via [circuits in a graph](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-015-0544-x/figures/1)). After running the `protocol`, users can export plate maps (`to_csv()`), composite plasmids (`to_fasta()`, `to_genbank()`), and assembly instructions (`to_txt()`, `to_picklists()`).```python&quot;&quot;&quot;Example of a Combinatorial Golden Gate assembly with human and robot output protocols.&quot;&quot;&quot;import osfrom Bio.SeqIO import parsefrom synbio.designs import Combinatorialfrom synbio.protocols import GoldenGatedef read_all_records():    gg_dir = os.path.join(&quot;.&quot;, &quot;data&quot;, &quot;goldengate&quot;)    records = []    for file in os.listdir(gg_dir):        if file.endswith(&quot;.gb&quot;):            records.extend(parse(os.path.join(gg_dir, file), &quot;genbank&quot;))    return records# create a combinatorial library design from all valid combinationsdesign = Combinatorial(read_all_records())# create a protocol using Golden Gate as the sole composite step and runprotocol = GoldenGate(    name=&quot;Combinatorial Golden Gate&quot;,    design=design,    include=[&quot;KanR&quot;],  # only keep circularized plasmids with a KanR SeqFeature    min_count=5,  # only keep circularized plasmids from &gt;=5 SeqRecords)protocol.to_fasta(&quot;plasmids.fasta&quot;)  # export multi-FASTAprotocol.to_csv(&quot;plates.csv&quot;)  # export plate layoutsprotocol.to_txt(&quot;protocol.txt&quot;)  # export human protocolprotocol.to_picklists(&quot;picklist&quot;, platform=&quot;hamilton&quot;)  # export a hamilton picklist```plasmids.fasta:```txt&gt;J23100_AB+B0032m_BC+C0012m_CD+B0015_DE+DVK_AEGGAGTTGACGGCTAGCTCAGTCCTAGGTACAGTGCTAGCTACTAGAGTCACACAGGAAAGTACTAAATGATGGTGAATGTGAAACCAGTAACGTTATACGATGTCGCAGAGTATGCCGGT...```plates.csv:```csvSetup Wells with volumes (uL) shown:Plate:1,1,2,3,4,5,6,7,8,9,10,11,12A,B0015_DE(4),C0080_CD(18),R0010_AB(54),water(36)B,B0015_DE(160),DVK_AE(160),cre_CD(18),water(156)...```protocol.txt:```txtCombinatorial GoldenGate:1. Setup PCR plate with (volumes) shown:1.1. Dilute plasmid DNA to 75 ng/ÂµL in 'water'1.2. Create 'assembly-mix' from 1:1 T4 Ligase Buffer (10X) and NEB Golden Gate Assembly Mix...```picklist.gwl:```txtA;Plate:2;;;15;;2.0;;;D;Plate:3;;;80;;2.0;;;W;;;;;;;;;...```## AnnotationIn addition to DNA assembly, `synbio` exposes a plasmid annotation function in `synbio.features`. An example below shows a SeqRecord being augmented additional SeqFeatures from a curated database of common plasmid features.```pythonfrom Bio.SeqIO import parsefrom synbio.features import annotaterecord = next(parse(&quot;plasmid.fa&quot;, &quot;fasta&quot;))record_with_features = annotate(record, identity=0.96)```## AlternativesThis is a non-exhaustive list. Contact me for a comparison of these libraries/platforms and `synbio`.- [Aquarium](https://www.aquarium.bio/) is an extensive library/application for LIMS, protocol definition/execution, and workflow design. A lab operating system.- [Autoprotocol](https://github.com/autoprotocol/autoprotocol-python) is a specification standard for experiments in the life sciences.- [BioBricks](https://github.com/liaupm/BioBlocks) is a general focus, web-based editor for describing experiments in Biology.- [Biocoder](https://jbioleng.biomedcentral.com/articles/10.1186/1754-1611-4-13) is a C++ library with extensive protocol step definition capabilities.- [Plateo](https://github.com/Edinburgh-Genome-Foundry/Plateo) is a python library for planning, running and checking laboratory experiments. Great for parsing and exporting plates and picklists form multiple formats.- [pydna](https://github.com/BjornFJohansson/pydna) is a python DNA assembly simulation library with a human-readable description of clone and assembly strategies.</longdescription>
</pkgmetadata>