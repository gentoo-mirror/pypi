<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyTacticianPyTactician is a Python Library for interfacing with the Coq Proof Assistant and its Tactician plugin andreading associated datasets. The major version number `x` of this library indicates the version of thecommunication protocol. Any PyTactician version `x.y` is compatible with the communication protocol `x`.## InstallationBinary wheels are provided for Linux and MacOS. On those platforms you can install by executing`pip install pytactician`. If you need to install from source, you need to have Capt'n Proto &gt;= 0.8 installedon your system. See the main repo [README](https://github.com/coq-tactician/coq-tactician-reinforce#prerequisites)for more details on prerequisites.## UsageThe Python software provides both a software library to work with the graph based datasets extracted from Coq anda number of executables. Available executables are as follows (use the `--help` flag for each executable to learnabout all the options).- `pytact-check [-h] [--jobs JOBS] [--quick] [--verbose VERBOSE] dir`   Run sanity checks on a dataset and print some statistics.- `pytact-visualize [-h] [--port PORT] [--hostname HOSTNAME] [--dev] dataset`:   Start an interactive server that visualizes a dataset.- `pytact-server [-h] [--tcp TCP] [--record RECORD_FILE] {graph,text}`  Example python server capable of communicating with Coq through Tactician's 'synth' tactic  To learn how to interface Coq and Tactician with this server, see the sections below.- `pytact-oracle [-h] [--tcp PORT] [--record RECORD_FILE] {graph,text} dataset`  A tactic prediction server acting as an oracle, retrieving it's information from a dataset- `pytact-fake-coq [-h] (--tcp TCP_LOCATION | --stdin EXECUTABLE) data`  A fake Coq client that connects to a prediction server and feeds it a stream of previously recorded messages.- `pytact-prover`: A dummy example client that interfaces with Coq and Tactician for reinforcement-learning-style  communication. To learn how to interface Coq and Tactician with this client, see the sections below.## DocumentationTODO: Point to documentation</longdescription>
</pkgmetadata>