<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># What is this?A simple python tool for hashing objects that python normally treats as unhashable. There are also a few other tools such as ways of deeply hashing functions, and an system for extending this hashability to work with other existing classes, such as dataframes or neural networks.# How do I use this?`pip install super_hash````pythonfrom super_hash import super_hash, function_hashers, FrozenDict, helpersnormally_unhashable = {    frozenset({        frozenset({            &quot;key-deep-deep&quot;: 10        }.items()): &quot;key-deep&quot;,    }.items()): &quot;first_value&quot;,    &quot;second_value&quot;: [        {&quot;a&quot;: 10},    ]}a_hash = super_hash(normally_unhashable)# # extend what can be hashed# # example1:import pandas as pd# tell super_hash that pandas dataframes should be converted to csv, then hashedsuper_hash.conversion_table[pd.DataFrame] = lambda data_frame : super_hash(data_frame.to_csv())# example2:import torch# create a custom checker functionis_non_scalar_pytorch_tensor = lambda value: isinstance(value, torch.Tensor) and len(value.shape) &gt; 0# create a custom convertersuper_hash.conversion_table[is_non_scalar_pytorch_tensor] = lambda non_scalar_tensor: super_hash(non_scalar_tensor.tolist())# example3:class Thing:    def __super_hash__(self):        return self.file_path```</longdescription>
</pkgmetadata>