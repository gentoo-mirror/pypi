<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dj-paypal[![Build Status](https://travis-ci.com/HearthSim/dj-paypal.svg?branch=master)](https://travis-ci.com/HearthSim/dj-paypal)[![PyPI](https://img.shields.io/pypi/v/dj-paypal.svg)](https://pypi.org/project/dj-paypal/)A Paypal integration for Django, inspired by [dj-stripe](https://github.com/dj-stripe/dj-stripe).Currently only supports subscriptions.## Requirements- Python 3.6+- Django 3.1+- Postgres 9.6+ (Non-postgres engines not supported)## Installation1. Install dj-paypal with `pip install dj-paypal`2. Add `djpaypal` to django `INSTALLED_APPS` setting3. Get a client ID and client secret from paypal and add them to the settings   `PAYPAL_CLIENT_ID` and `PAYPAL_CLIENT_SECRET`4. Set `PAYPAL_MODE = &quot;sandbox&quot;` (or `&quot;live&quot;`) in the settings5. Install your Billing Plans (see below)### Setting up billing plans#### Download already-created billing plans from PaypalRun `manage.py djpaypal_download_plans` to sync all plans already created upstreaminto the local database.This will create `djpaypal.models.BillingPlan` objects, which can be listed fromthe Django admin.#### Creating new Paypal billing plansThe `manage.py djpaypal_upload_plans` management command creates billing plans usingthe Paypal API. An extra `PAYPAL_PLANS` setting must be set, which will contain a dictof Paypal billing plans to create.See `example_settings.py` for an example of plans to create.## WebhooksThe `djpaypal.views.ProcessWebhookView` view should be hooked up to an URL endpointwhich you then set up in Paypal as a webhook endpoint (https://developer.paypal.com).In order to verify webhooks being transmitted to your app, dj-paypal needs to know theID of the webhook that is expected at that URL. Set it in the setting `PAYPAL_WEBHOOK_ID`.## Sandbox vs. LiveAll models have a `livemode` boolean attribute. That attribute is set to `True` if createdin Live (production) mode, `False` otherwise (sandbox mode).Sandbox and Live data can co-exist without issues. Once you are done testing in Sandboxmode, use the `manage.py djpaypal_delete_all_test_data` management command to (locally)clear all the test data. This command has no impact on the upstream data.## Data considerationsMost of the models defined in dj-paypal are copies of the upstream Paypal model data.Deleting or editing objects (be it from the admin or in the database) does not actuallychange any of the upstream Paypal data.## License and SponsorshipThis project was designed and developed by [HearthSim](https://hearthsim.net). It islicensed under the MIT license. The full license text is available in the LICENSE file.</longdescription>
</pkgmetadata>