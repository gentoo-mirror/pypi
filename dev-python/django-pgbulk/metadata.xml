<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-pgbulk#############``django-pgbulk``, forked from`django-manager-utils &lt;https://django-manager-utils.readthedocs.io&gt;`__,provides several optimized bulk operations for Postgres:1. ``update`` - For updating a list of models in bulk. Although Django   provides a ``bulk_update`` in 2.2, it performs individual updates for   every row and does not perform a native bulk update.2. ``upsert`` - For doing a bulk update or insert. This function uses   postgres ``UPDATE ON CONFLICT`` syntax to perform an atomic upsert   operation. There are several options to this function that allow the   user to avoid touching rows if they result in a duplicate update, along   with returning which rows were updated, created, or untouched. Users can   also use ``models.F`` objects on conflicts.3. ``sync`` - For syncing a list of models with a table. Does a bulk   upsert and also deletes any rows in the source queryset that were not   part of the input data.For more examples, see the`django-pgbulk docs &lt;https://django-pgbulk.readthedocs.io/&gt;`_.Documentation=============`View the django-pgbulk docs here &lt;https://django-pgbulk.readthedocs.io/&gt;`_.Installation============Install django-pgbulk with::    pip3 install django-pgbulkAfter this, add ``pgbulk`` to the ``INSTALLED_APPS``setting of your Django project.Contributing Guide==================For information on setting up django-pgbulk for development andcontributing changes, view `CONTRIBUTING.rst &lt;CONTRIBUTING.rst&gt;`_.Primary Authors===============- @wesleykendall (Wes Kendall)</longdescription>
</pkgmetadata>