<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>sqlalchemy-repr===============.. image:: https://travis-ci.org/manicmaniac/sqlalchemy-repr.svg?branch=master    :target: https://travis-ci.org/manicmaniac/sqlalchemy-reprAutomatically generates pretty ``repr`` of a SQLAlchemy model.Install-------.. code:: sh    pip install sqlalchemy-reprUsage-----.. code:: python    from sqlalchemy.ext.declarative import declarative_base    from sqlalchemy_repr import RepresentableBase    Base = declarative_base(cls=RepresentableBase)Example-------``sqlalchemy_repr.RepresentableBase`` is mixin to add simple representation of columns... code:: python    &gt;&gt;&gt; from datetime import datetime    &gt;&gt;&gt; from sqlalchemy import Column, DateTime, Integer, Unicode, create_engine    &gt;&gt;&gt; from sqlalchemy.ext.declarative import declarative_base    &gt;&gt;&gt; from sqlalchemy.orm import sessionmaker    &gt;&gt;&gt; from sqlalchemy_repr import RepresentableBase    &gt;&gt;&gt; Base = declarative_base(cls=RepresentableBase)    &gt;&gt;&gt; class User(Base):    ...    __tablename__ = 'users'    ...    id = Column(Integer, primary_key=True)    ...    name = Column(Unicode(255), nullable=False, unique=True)    ...    created = Column(DateTime, nullable=False)    &gt;&gt;&gt; engine = create_engine('sqlite://')    &gt;&gt;&gt; Base.metadata.create_all(engine)    &gt;&gt;&gt; Session = sessionmaker(bind=engine)    &gt;&gt;&gt; session = Session()    &gt;&gt;&gt; user = User(name='spam', created=datetime(2016, 6, 1))    &gt;&gt;&gt; session.add(user)    &gt;&gt;&gt; session.commit()    &gt;&gt;&gt; print(user)    &lt;User id=1, name='spam', created='2016-06-01T00:00:00'&gt;``sqlalchemy_repr.PrettyRepresentableBase`` brings pretty, indented multi-line representation... code:: python    &gt;&gt;&gt; from sqlalchemy_repr import PrettyRepresentableBase    &gt;&gt;&gt; Base = declarative_base(cls=PrettyRepresentableBase)    &gt;&gt;&gt; class User(Base):    ...    __tablename__ = 'users'    ...    id = Column(Integer, primary_key=True)    ...    first_name = Column(Unicode(255), nullable=False, unique=True)    ...    last_name = Column(Unicode(255), nullable=False, unique=True)    ...    email = Column(Unicode(255), nullable=False)    ...    created = Column(DateTime, nullable=False)    ...    modified = Column(DateTime, nullable=False)    &gt;&gt;&gt; engine = create_engine('sqlite://')    &gt;&gt;&gt; Base.metadata.create_all(engine)    &gt;&gt;&gt; Session = sessionmaker(bind=engine)    &gt;&gt;&gt; session = Session()    &gt;&gt;&gt; user = User(first_name='spam', last_name='ham',  email='spam@example.com', created=datetime(2016, 6, 1), modified=datetime(2016, 6, 1))    &gt;&gt;&gt; session.add(user)    &gt;&gt;&gt; session.commit()    &gt;&gt;&gt; print(user)    &lt;User        id=1,        first_name='spam',        last_name='ham',        email='spam@example.com',        created='2016-06-01T00:00:00',        modified='2016-06-01T00:00:00'&gt;</longdescription>
</pkgmetadata>