<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://github.com/lemoncheesecake/lemoncheesecake/blob/master/doc/_static/logo.png?raw=true    :target: http://lemoncheesecake.io------------lemoncheesecake: Test Storytelling==================================.. image:: https://github.com/lemoncheesecake/lemoncheesecake/actions/workflows/tests.yml/badge.svg    :target: https://github.com/lemoncheesecake/lemoncheesecake/actions/workflows/tests.yml.. image:: https://codecov.io/gh/lemoncheesecake/lemoncheesecake/branch/master/graph/badge.svg    :target: https://codecov.io/gh/lemoncheesecake/lemoncheesecake.. image:: https://img.shields.io/pypi/v/lemoncheesecake.svg    :target: https://pypi.org/project/lemoncheesecake/.. image:: https://img.shields.io/pypi/pyversions/lemoncheesecake.svg    :target: https://pypi.org/project/lemoncheesecake/lemoncheesecake is an end-to-end test framework for Python that brings trust around test results.It allows test developers to be very explicit about what their tests really do with logging, matchers, file attachments, etc..Here is a test example:.. code-block:: python    import json    import requests    import lemoncheesecake.api as lcc    from lemoncheesecake.matching import *    URL  = &quot;https://api.github.com/orgs/lemoncheesecake&quot;    @lcc.suite(&quot;Github tests&quot;)    class github:        @lcc.test(&quot;Test Organization end-point&quot;)        def organization(self):            lcc.set_step(&quot;Get lemoncheesecake organization information&quot;)            lcc.log_info(&quot;GET %s&quot; % URL)            resp = requests.get(URL)            require_that(&quot;HTTP code&quot;, resp.status_code, is_(200))            data = resp.json()            lcc.log_info(&quot;Response\n%s&quot; % json.dumps(data, indent=4))            lcc.set_step(&quot;Check API response&quot;)            check_that_in(                data,                &quot;type&quot;, is_(&quot;Organization&quot;),                &quot;id&quot;, is_integer(),                &quot;description&quot;, is_not_none(),                &quot;login&quot;, is_(present()),                &quot;created_at&quot;, match_pattern(&quot;^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$&quot;),                &quot;has_organization_projects&quot;, is_true(),                &quot;followers&quot;, is_(greater_than_or_equal_to(0)),                &quot;following&quot;, is_(greater_than_or_equal_to(0)),                &quot;repos_url&quot;, ends_with(&quot;/repos&quot;),                &quot;issues_url&quot;, ends_with(&quot;/issues&quot;),                &quot;events_url&quot;, ends_with(&quot;/events&quot;),                &quot;hooks_url&quot;, ends_with(&quot;/hooks&quot;),                &quot;members_url&quot;, ends_with(&quot;/members{/member}&quot;),                &quot;public_members_url&quot;, ends_with(&quot;/public_members{/member}&quot;)            )And here are the corresponding test results:.. image:: https://github.com/lemoncheesecake/lemoncheesecake/blob/master/doc/_static/report-sample.png?raw=true    :alt: test resultsNB: in real test code, you'd better use`lemoncheesecake-requests &lt;https://github.com/lemoncheesecake/lemoncheesecake-requests&gt;`_ when doing HTTP / REST APItesting.Features--------- Advanced test hierarchies using suites, tests and nested suites- Test description and metadata: tags, properties (key=value associations) and links- Support for test filtering- Multiple reporting flavors built-in: HTML, JSON, XML, JUnit, ReportPortal, Slack notifications- BDD support using `behave &lt;https://behave.readthedocs.io/en/latest/&gt;`_- Test parallelization- Rich CLI toolboxlemoncheesecake is compatible with Python 3.7-3.11.Installation------------lemoncheesecake can be installed through pip:.. code-block:: shell    $ pip install lemoncheesecakeFor more details about installing lemoncheesecake with the non-default reporting backends, see`here &lt;http://docs.lemoncheesecake.io/en/latest/installation.html&gt;`_.Documentation-------------The documentation is available on http://docs.lemoncheesecake.io.The lemoncheesecake ecosystem------------------------------ `lemoncheesecake-requests &lt;https://github.com/lemoncheesecake/lemoncheesecake-requests&gt;`_ provides logging  and response checking features for `requests &lt;https://docs.python-requests.org/en/master/&gt;`_  and HTTP / REST API / Web Services testing- `lemoncheesecake-selenium &lt;https://github.com/lemoncheesecake/lemoncheesecake-selenium&gt;`_ is a package  that helps you develop Web UI tests with `selenium &lt;https://www.selenium.dev&gt;`_Contact-------Bugs and improvement ideas are welcomed in tickets. A Google Groups forum is also available for discussions aboutlemoncheesecake: https://groups.google.com/forum/#!forum/lemoncheesecake.</longdescription>
</pkgmetadata>