<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># 简单服务器开发框架## 1.使用文档### 安装```pip install l0n0lhttputils```### 使用方法，以微信登录验证为例```yaml# 配置文件 config.yamlmysql_host: localhostmysql_port: 13306mysql_user: rootmysql_password: '123'mysql_db: 'test'token_expire_time: 120listen_host: localhostlisten_port: 12345appid: 111secret_key: xxxxxxxx``````pythonimport loggingimport requestsfrom l0n0lhttputils.config_file import yaml_filefrom l0n0lhttputils.http_server import http_server, webfrom l0n0lhttputils.dbmysql import dbmysqlfrom l0n0lhttputils.token_mgr import token_mgr, check_token# 加载配置g_config = yaml_file(&quot;config.yaml&quot;)g_config.load_config()# mysqldb = dbmysql(    g_config.get(&quot;mysql_host&quot;),    g_config.get(&quot;mysql_port&quot;),    g_config.get(&quot;mysql_user&quot;),    g_config.get(&quot;mysql_password&quot;),    g_config.get(&quot;mysql_db&quot;))# 用户csrf tokeng_token_mgr: token_mgr = token_mgr()g_token_mgr.token_timestamp = g_config.get(&quot;token_expire_time&quot;)# http 服务器g_server = http_server(g_config.get(&quot;listen_host&quot;), g_config.get(&quot;listen_port&quot;))session_keys = {}@g_server.route(&quot;get&quot;, &quot;/{prefix}/login&quot;)async def login(request: web.Request):    &quot;&quot;&quot;用户登录    @code:微信提供的code    &quot;&quot;&quot;    # 获取用户的微信code    request_data = await request.json()    # 向微信验证用户的code是否正确，并获取用户的openid    check_result = requests.get(&quot;https://api.weixin.qq.com/sns/jscode2session&quot;, params={        'appid': g_config.get(&quot;appid&quot;),        &quot;secret&quot;: g_config.get(&quot;secret_key&quot;),        &quot;js_code&quot;: request_data['code'],        &quot;grant_type&quot;: 'authorization_code'    })    # 判断验证时网络是否正常    if check_result.status_code != 200:        return web.json_response({&quot;errMsg&quot;: &quot;向微信检查登录状态错误&quot;})    # 获取微信的验证结果，openid    json_value = check_result.json()    openid = json_value['openid']    # 生成本次会话的token，防止csrf攻击    token = g_token_mgr.gen_token(openid)    # 保存会话key    session_keys[openid] = json_value['session_key']    # 检测是否有该用户,没有则创建该用户    db.post(&quot;insert into `users` (`openid`) values (%s) on duplicate key update `openid` = values(`openid`)&quot;,            [openid])    # 验证成功，把会话token返回给用户    return web.json_response({        &quot;errMsg&quot;: &quot;OK&quot;,        &quot;token&quot;: token,    })@g_server.route(&quot;post&quot;, &quot;/{prefix}/user_data&quot;)@check_token(g_token_mgr) # check_token 会检测用户http请求中的  header中是否有 &quot;token&quot; header async def user_data(request: web.Request):    &quot;&quot;&quot;    获取用户基本数据    &quot;&quot;&quot;    data = db.get(&quot;select * from `users` where `openid` = %s&quot;,                  [request.openid])    if not data:        return web.json_response({            &quot;errMsg&quot;: &quot;服务器错误&quot;        })    # 验证成功，把会话token返回给用户    return web.json_response({        &quot;errMsg&quot;: &quot;OK&quot;,        &quot;data&quot;: data,    })from l0n0lhttputils.runner import runif __name__ == &quot;__main__&quot;:    logging.basicConfig(filename=&quot;testserver.log&quot;, level=logging.INFO)    g_server.start()    run()```</longdescription>
</pkgmetadata>