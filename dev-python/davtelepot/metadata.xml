<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># davtelepotThis project conveniently mirrors the Telegram bot API with the class `Bot`.Please note that Python3.5+ is needed to run async code.Check requirements.txt for third party dependencies.Check out `help(Bot)` for detailed information.## Project folders### `davtelepot/data` folder* `config.py` contains configuration settings (e.g. certificate path, local_host, port etc.)* `passwords.py` contains secret information to be git-ignored (e.g. bot tokens)* `*.db` files are SQLite databases used by bots* `*.log`: log files (store log_file_name and errors_file_name in `data/config.py` module)### `examples` folderThis folder contains full-commented and ready-to-run examples for simple davtelepot.bot Telegram bots.## Usage```import sysfrom davtelepot.bot import Botfrom data.passwords import my_token, my_other_tokenlong_polling_bot = Bot(token=my_token, database_url='my_db')webhook_bot = Bot(token=my_other_token, hostname='example.com',                  certificate='path/to/certificate.pem',                  database_url='my_other_db')@long_polling_bot.command('/foo')async def foo_command(bot, update, user_record):    return &quot;Bar!&quot;@webhook_bot.command('/bar')async def bar_command(bot, update, user_record):    return &quot;Foo!&quot;exit_state = Bot.run(    local_host='127.0.0.5',    port=8552)sys.exit(exit_state)```Check out `help(Bot)` for detailed information.## Webhook additional informationTo run a bot in webhook modality, you have to provide a `hostname` and `certificate` at bot instantiation and a `local_host` and `port` when calling `Bot.run` method.* Telegram will send POST requests at `https://{hostname}/webhook/{tokens}/` using `certificate` for encryption* `aiohttp.web.Application` server will listen on `http://{local_host}:{port}` for updatesIt is therefore required a reverse proxy passing incoming requests to local_host.**Example of nginx reverse proxy serving this purpose**```nginxserver {  listen 8553 ssl;  listen [::]:8553 ssl;  server_name example.com www.example.com;  location /telegram/ {     proxy_pass http://127.0.0.5:8552/;  }  ssl_certificate /path/to/fullchain.pem;  ssl_certificate_key /path/to/privkey.pem;}```**Example of python configuration file in this situation**```python# File data/config.py, gitignored and imported in main scripthostname = &quot;https://www.example.com:8553/telegram&quot;certificate = &quot;/path/to/fullchain.pem&quot;local_host = &quot;127.0.0.5&quot;port = 8552# Main scriptfrom data.config import hostname, certificate, local_host, portfrom data.passwords import bot_tokenfrom davtelepot.bot import Botmy_bot = Bot(  token=bot_token,  hostname=hostname,  certificate=certificate)# ...Bot.run(  local_host=local_host,  port=port)```</longdescription>
</pkgmetadata>