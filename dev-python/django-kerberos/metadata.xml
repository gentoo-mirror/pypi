<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Kerberos authentication for Django==================================Provide Kerberos authentication to Django applications.Python 2 and 3, Django &gt;1.8 are supported.Basic usage===========Add this to your project `urls.py`::    url('^accounts/kerberos/', include('django_kerberos.urls')),And use the default authentication backend, by adding that to your `settings.py` file::    AUTHENTICATION_BACKENDS = (        'django_kerberos.backends.KerberosBackend',    )Settings========`KERBEROS_HOSTNAME`-------------------Hostname for retrieving the service key, the correspondig principal will be`HTTP/{KERBEROS_HOSTNAME}@DEFAULT_REAML`, default is `None`. If `None` the hostnamefrom the request will be used.`KERBEROS_BACKEND_CREATE`-------------------------Whether to create user if no existing model can be found, default is `False`.`KERBEROS_BACKEND_ADMIN_REGEXP`-------------------------------A regular expression that the principal must match to get superuser privileges,default is `None`. A classic example could be `r'^.*/admin$'`.`KERBEROS_SERVICE_PRINCIPAL`-----------------------------------The service principal to use when checking a password against theKDC, you don't need the secret key for this principal, it shouldjust exist inside the Kerberos database as the check is done bytrying to get ticket for this service. Default isNone. It's used only by the pseudo password haserand the login/password authentication backend.`KERBEROS_KEEP_PASSWORD`------------------------Does the KerbersoPasswordBackend store a hash of thechecked password inside the user model each time auser log in. Default is False. It allows yourwebsite to provide a backup authentication ifKerberos is failing or if you ever need to detachfrom the realm.Custom backend==============A custom authentication backend can be used, in this case the signature of theauthenticate method must be::    class CustomKerberosBackend(object):        def authenticate(self, principal=None):            passSample application==================First you need to install django-kerberos into your environment like that::    python setup.py installIf you want to try the sample application you must add this line to your `/etc/hosts` file, absolutely at the beginning::    127.0.0.1 test.example.comThen you must connect to your Kerberos administration server and add theprincipal HTTP/test.example.com and export its key in a keytab file::    $ kadmin -p myuser/admin    kadmin: addprinc -randkey HTTP/test.example.com    kadmin: ktadd -k /tmp/keytab HTTP/test.example.comFinally you can run the sample::    cd sample; KRB5_KTNAME=FILE:/tmp/keytab python ./manage.py runserverNow you should be able to login on http://test.example.com:8000/The sample project is configured so that all principal ending with `/admin` getthe staff and superuser flags. You can change that by editing the key`KERBEROS_BACKEND_ADMIN_REGEXP` in `sample/sample/settings.py`... caution::   Only use A pointers for your domain name or if your domain name is a CNAME alias then create the HTTP principal for the target domain.   Web browsers implementing the SPNEGO HTTP authenticiation protocol   canonicalize domain names by always resolving to a DNS A record before   building the corresponding principal. So if you have the following zone::      test.example.com CNAME a.example.com      a.example.com A a.b.c.d   and if you connect to https://test.example.com then the browser is gonna try   to get a ticket for the HTTP/a.examepl.com service principal not for   HTTP/test.example.com.Pseudo hasher=============A pseudo hasher whose import path is `django_kerberos.hashers.KerberosHasher`provide a mean to associate a Django user model to a Kerberos identity.The content of the password field must be `kerberos$&lt;principal name&gt;`.To create an user for a principal you can do::   User.objects.create(username=new_username, password='kerberos$' + principal)Login/Password backend======================If your users does not have their browser configuredfor SPNEGO HTTP authentication you can also providea classic login/password form which check passwordsusing Kerberos.Autologin=========A template include is provided to implement autologin. It calls the Kerberoslogin view using AJAX. AJAX support in the login view makes the view return aJSON document containing a boolean value indicating if login was sucessfull.If login is succesfull the current view is reloaded.To use this template just add the following code to any of your templates::   {% include &quot;django_kerberos/autologin.html&quot; %}After a succesfull login a cookie is created which prevent autologin for thenext 15 minutes, to permit login using other methods after an immediate logout.The template show an HTML div having the id &quot;kerberos-autologin&quot; and containingthe text &quot;Autologin...&quot; so that you can add CSS styling to it.The javascript implementation of autologin is a script named&quot;js/autlogin.html&quot;, it can be reused to implement autologin for otherproctocols. Its only requirement is to have a view which return 'true' if alogin is successfull on an HTTP GET request. The script provide a javascriptfunction whose signature is::     autologin(url, callback[. timeout])url is the URL of the login view, callback is a javascript function which willreceive true or false depending on the login success and timeout is the numberof seconds after a succesfull login during which autologin is disabled, defaultis 15 minutes.</longdescription>
</pkgmetadata>