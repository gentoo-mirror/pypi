<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Decouple## Say NO to monolithic architecture.Decouple complex system to separated modules by mediator.```shell scriptpip install decouple```## Register event handler![register event handler](https://raw.githubusercontent.com/andrey-avdeev/decouple/master/docs/img/01_register.png)## Dispatch events![dispatch events](https://raw.githubusercontent.com/andrey-avdeev/decouple/master/docs/img/02_handle.png)## Example### Simple usageCode of example is [here](https://github.com/andrey-avdeev/decouple/tree/master/examples/simple)1. Write ModuleA - publisher```pythonfrom dataclasses import dataclassfrom decouple import Module, Event, Mediatorclass ModuleA(Module):    def __init__(self, mediator: Mediator = Mediator()):        super().__init__(mediator)    def start(self):        self.pub(StartEvent(a=7))@dataclassclass StartEvent(Event):    a: int = 0  # must be serializable```2. Write ModuleB - subscriber```pythonfrom decouple import Modulefrom examples.simple.module_a import StartEventclass ModuleB(Module):    def __init__(self):        super().__init__()        self.sub(StartEvent, self.handle_a)    def handle_start(self, event: StartEvent):        print(f'field a:{event.a}')```3. Compose both modules to the whole```pythonfrom examples.simple.module_a import ModuleAfrom examples.simple.module_b import ModuleBmodule_a = ModuleA()module_a.add(ModuleB())module_a.start()```### PrioritiesManual control```pythonfrom decouple import Modulefrom examples.simple.module_a import StartEventclass ModuleB(Module):    def __init__(self):        super().__init__()        # handler with higher priority will be triggered early        self.sub(StartEvent, self.handle_b, priority=0)        self.sub(StartEvent, self.handle_a, priority=100)    def handle_a(self, event: StartEvent):        # will be triggered first        print(f'field a:{event.a}')    def handle_b(self, event: StartEvent):        # will be triggered second        print(f'event.uuid:{event.uuid}, event.timestamp:{event.timestamp}')```Default priority depends on registration order```pythonfrom decouple import Modulefrom examples.simple.module_a import StartEventclass ModuleB(Module):    def __init__(self):        super().__init__()        # priority of handlers call increased by 1 every registration for the same event        self.sub(StartEvent, self.handle_b)   # priority=1        self.sub(StartEvent, self.handle_a)   # priority=2    def handle_a(self, event: StartEvent):        # will be triggered second        print(f'field a:{event.a}')    def handle_b(self, event: StartEvent):        # will be triggered first        print(f'event.uuid:{event.uuid}, event.timestamp:{event.timestamp}')```# FeedbackI will be glad to read your feedback in issues and pull requests.</longdescription>
</pkgmetadata>