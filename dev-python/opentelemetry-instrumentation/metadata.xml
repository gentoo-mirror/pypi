<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>OpenTelemetry Instrumentation=============================|pypi|.. |pypi| image:: https://badge.fury.io/py/opentelemetry-instrumentation.svg   :target: https://pypi.org/project/opentelemetry-instrumentation/Installation------------::    pip install opentelemetry-instrumentationThis package provides a couple of commands that help automatically instruments a program:.. note::    You need to install a distro package to get auto instrumentation working. The ``opentelemetry-distro``    package contains the default distro and automatically configures some of the common options for users.    For more info about ``opentelemetry-distro`` check `here &lt;https://opentelemetry-python.readthedocs.io/en/latest/examples/distro/README.html&gt;`__    ::        pip install opentelemetry-distro[otlp]opentelemetry-bootstrap-----------------------::    opentelemetry-bootstrap --action=install|requirementsThis commands inspects the active Python site-packages and figures out whichinstrumentation packages the user might want to install. By default it prints outa list of the suggested instrumentation packages which can be added to a requirements.txtfile. It also supports installing the suggested packages when run with :code:`--action=install`flag.opentelemetry-instrument------------------------::    opentelemetry-instrument python program.pyThe instrument command will try to automatically detect packages used by your python programand when possible, apply automatic tracing instrumentation on them. This means your programwill get automatic distributed tracing for free without having to make any code changesat all. This will also configure a global tracer and tracing exporter without you having tomake any code changes. By default, the instrument command will use the OTLP exporter butthis can be overridden when needed.The command supports the following configuration options as CLI arguments and environment vars:* ``--traces_exporter`` or ``OTEL_TRACES_EXPORTER``* ``--metrics_exporter`` or ``OTEL_METRICS_EXPORTER``Used to specify which trace exporter to use. Can be set to one or more of the well-known exporternames (see below).    - Defaults to `otlp`.    - Can be set to `none` to disable automatic tracer initialization.You can pass multiple values to configure multiple exporters e.g, ``zipkin,prometheus``Well known trace exporter names:    - jaeger_proto    - jaeger_thrift    - opencensus    - zipkin_json    - zipkin_proto    - otlp    - otlp_proto_grpc (`deprecated`)    - otlp_proto_http (`deprecated`)Note: The default transport protocol for ``otlp`` is gRPC.HTTP is currently supported for traces only, and should be set using ``OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=http/protobuf``* ``--id-generator`` or ``OTEL_PYTHON_ID_GENERATOR``Used to specify which IDs Generator to use for the global Tracer Provider. By default, itwill use the random IDs generator.The code in ``program.py`` needs to use one of the packages for which there isan OpenTelemetry integration. For a list of the available integrations pleasecheck `here &lt;https://opentelemetry-python.readthedocs.io/en/stable/index.html#integrations&gt;`_* ``OTEL_PYTHON_DISABLED_INSTRUMENTATIONS``If set by the user, opentelemetry-instrument will read this environment variable to disable specific instrumentations.e.g OTEL_PYTHON_DISABLED_INSTRUMENTATIONS = &quot;requests,django&quot;Examples^^^^^^^^::    opentelemetry-instrument --traces_exporter otlp flask run --port=3000The above command will pass ``--traces_exporter otlp`` to the instrument command and ``--port=3000`` to ``flask run``.::    opentelemetry-instrument --traces_exporter zipkin_json,otlp celery -A tasks worker --loglevel=infoThe above command will configure global trace provider, attach zipkin and otlp exporters to it and thenstart celery with the rest of the arguments.::    opentelemetry-instrument --id_generator random flask run --port=3000The above command will configure the global trace provider to use the Random IDs Generator, and thenpass ``--port=3000`` to ``flask run``.References----------* `OpenTelemetry Project &lt;https://opentelemetry.io/&gt;`_</longdescription>
</pkgmetadata>