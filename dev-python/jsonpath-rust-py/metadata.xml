<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jsonpath-rust-py## The jsonpath description### Functions#### SizeA function `length()` transforms the output of the filtered expression into a size of this elementIt works with arrays, therefore it returns a length of a given array, otherwise null.`$.some_field.length()`**To use it** for objects, the operator `[*]` can be used.`$.object.[*].length()`### Operators| Operator                   | Description                                                                                                                                                  | Where to use                                                                                                                                ||----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------|| `$`                        | Pointer to the root of the json.                                                                                                                             | It is gently advising to start every jsonpath from the root. Also, inside the filters to point out that the path is starting from the root. || `@`                        | Pointer to the current element inside the filter operations.                                                                                                 | It is used inside the filter operations to iterate the collection.                                                                          || `*` or `[*]`               | Wildcard. It brings to the list all objects and elements regardless their names.                                                                             | It is analogue a flatmap operation.                                                                                                         || `&lt;..&gt;`                     | Descent operation. It brings to the list all objects, children of that objects and etc                                                                       | It is analogue a flatmap operation.                                                                                                         || `.&lt;name&gt;` or `.['&lt;name&gt;']` | the key pointing to the field of the object                                                                                                                  | It is used to obtain the specific field.                                                                                                    || `['&lt;name&gt;' (, '&lt;name&gt;')]`  | the list of keys                                                                                                                                             | the same usage as for a single key but for list                                                                                             || `[&lt;number&gt;]`               | the filter getting the element by its index.                                                                                                                 |                                                                                                                                             || `[&lt;number&gt; (, &lt;number&gt;)]`  | the list if elements of array according to their indexes representing these numbers.                                                                         |                                                                                                                                             || `[&lt;start&gt;:&lt;end&gt;:&lt;step&gt;]`   | slice operator to get a list of element operating with their indexes. By default step = 1, start = 0, end = array len. The elements can be omitted ```[:]``` |                                                                                                                                             || `[?(&lt;expression&gt;)]`        | the logical expression to filter elements in the list.                                                                                                       | It is used with arrays preliminary.                                                                                                         |### Filter expressionsThe expressions appear in the filter operator like that `[?(@.len &gt; 0)]`. The expression in general consists of thefollowing elements:- Left and right operands, that is ,in turn, can be a static value,representing as a primitive type like a number,  string value `'value'`, array of them or another json path instance.- Expression sign, denoting what action can be performed| Expression sign | Description                                                                                | Where to use                                                                                             ||-----------------|--------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------|| `!`             | Logical Not                                                                                | To invert filters                                                                                        || `==`            | Equal                                                                                      | To compare numbers or string literals                                                                    || `!=`            | Unequal                                                                                    | To compare numbers or string literals in opposite way to equals                                          || `&lt;`             | Less                                                                                       | To compare numbers                                                                                       || `&gt;`             | Greater                                                                                    | To compare numbers                                                                                       || `&lt;=`            | Less or equal                                                                              | To compare numbers                                                                                       || `&gt;=`            | Greater or equal                                                                           | To compare numbers                                                                                       || `~=`            | Regular expression                                                                         | To find the incoming right side in the left side.                                                        || `in`            | Find left element in the list of right elements.                                           |                                                                                                          || `nin`           | The same one as saying above but carrying the opposite sense.                              |                                                                                                          || `size`          | The size of array on the left size should be corresponded to the number on the right side. |                                                                                                          || `noneOf`        | The left size has no intersection with right                                               |                                                                                                          || `anyOf`         | The left size has at least one intersection with right                                     |                                                                                                          || `subsetOf`      | The left is a subset of the right side                                                     |                                                                                                          ||                 | Exists operator.                                                                           | The operator checks the existence of the field depicted on the left side like that `[?(@.key.isActive)]` |Filter expressions can be chained using `||` and `&amp;&amp;` (logical or and logical and correspondingly) in the following way:```json          {  &quot;key&quot;: [    {      &quot;city&quot;: &quot;London&quot;,      &quot;capital&quot;: true,      &quot;size&quot;: &quot;big&quot;    },    {      &quot;city&quot;: &quot;Berlin&quot;,      &quot;capital&quot;: true,      &quot;size&quot;: &quot;big&quot;    },    {      &quot;city&quot;: &quot;Tokyo&quot;,      &quot;capital&quot;: true,      &quot;size&quot;: &quot;big&quot;    },    {      &quot;city&quot;: &quot;Moscow&quot;,      &quot;capital&quot;: true,      &quot;size&quot;: &quot;big&quot;    },    {      &quot;city&quot;: &quot;Athlon&quot;,      &quot;capital&quot;: false,      &quot;size&quot;: &quot;small&quot;    },    {      &quot;city&quot;: &quot;Dortmund&quot;,      &quot;capital&quot;: false,      &quot;size&quot;: &quot;big&quot;    },    {      &quot;city&quot;: &quot;Dublin&quot;,      &quot;capital&quot;: true,      &quot;size&quot;: &quot;small&quot;    }  ]}```The path ``` $.key[?(@.capital == false || @size == 'small')].city ``` will give the following result:```json[  &quot;Athlon&quot;,  &quot;Dublin&quot;,  &quot;Dortmund&quot;]```And the path ``` $.key[?(@.capital == false &amp;&amp; @size != 'small')].city ``` ,in its turn, will give the following result:```json[  &quot;Dortmund&quot;]```By default, the operators have the different priority so `&amp;&amp;` has a higher priority so to change it the brackets can beused.``` $.[?((@.f == 0 || @.f == 1) &amp;&amp; ($.x == 15))].city ```## ExamplesGiven the json ```json {  &quot;store&quot;: {    &quot;book&quot;: [      {        &quot;category&quot;: &quot;reference&quot;,        &quot;author&quot;: &quot;Nigel Rees&quot;,        &quot;title&quot;: &quot;Sayings of the Century&quot;,        &quot;price&quot;: 8.95      },      {        &quot;category&quot;: &quot;fiction&quot;,        &quot;author&quot;: &quot;Evelyn Waugh&quot;,        &quot;title&quot;: &quot;Sword of Honour&quot;,        &quot;price&quot;: 12.99      },      {        &quot;category&quot;: &quot;fiction&quot;,        &quot;author&quot;: &quot;Herman Melville&quot;,        &quot;title&quot;: &quot;Moby Dick&quot;,        &quot;isbn&quot;: &quot;0-553-21311-3&quot;,        &quot;price&quot;: 8.99      },      {        &quot;category&quot;: &quot;fiction&quot;,        &quot;author&quot;: &quot;J. R. R. Tolkien&quot;,        &quot;title&quot;: &quot;The Lord of the Rings&quot;,        &quot;isbn&quot;: &quot;0-395-19395-8&quot;,        &quot;price&quot;: 22.99      }    ],    &quot;bicycle&quot;: {      &quot;color&quot;: &quot;red&quot;,      &quot;price&quot;: 19.95    }  },  &quot;expensive&quot;: 10} ```| JsonPath                             | Result                                                       ||--------------------------------------|:-------------------------------------------------------------|| `$.store.book[*].author`             | The authors of all books                                     || `$..book[?(@.isbn)]`                 | All books with an ISBN number                                || `$.store.*`                          | All things, both books and bicycles                          || `$..author`                          | All authors                                                  || `$.store..price`                     | The price of everything                                      || `$..book[2]`                         | The third book                                               || `$..book[-2]`                        | The second to last book                                      || `$..book[0,1]`                       | The first two books                                          || `$..book[:2]`                        | All books from index 0 (inclusive) until index 2 (exclusive) || `$..book[1:2]`                       | All books from index 1 (inclusive) until index 2 (exclusive) || `$..book[-2:]`                       | Last two books                                               || `$..book[2:]`                        | Book number two from tail                                    || `$.store.book[?(@.price &lt; 10)]`      | All books in store cheaper than 10                           || `$..book[?(@.price &lt;= $.expensive)]` | All books in store that are not &quot;expensive&quot;                  || `$..book[?(@.author ~= /.*REES/i)]`  | All books matching regex (ignore case)                       || `$..*`                               | Give me every thing                                          |## The libraryThe library intends to provide the basic functionality for ability to find the slices of data using the syntax, by calling the functions written in rust.```pythonfrom jsonpath_rust_py import find_slice, pathjson = {&quot;field&quot;: [{&quot;f&quot;: 1}, {&quot;f&quot;: 0}, {&quot;f&quot;: 3}]}select = &quot;$.field[?(!(@.f == 0))]&quot;res = find_slice(json, select)print(res)select = &quot;$..field[?(@.f == 1)].f&quot;res = path(json, select)print(res)```For now we only support find_slice and path## Enhanced FunctionalityThis library incorporates features from the Rust library [jsonpath-rust](https://github.com/catalinstochita/jsonpath-rust), which in turn, is an enhanced fork of the original [jsonpath-rust](https://github.com/besok/jsonpath-rust) developed by Besok.Key improvements in the forked version include:- Implementation of logical 'Not' (!) operator for filters</longdescription>
</pkgmetadata>