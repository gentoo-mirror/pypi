<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pymyenergiAn async python library for myenergi APIThis is a very early release, things are changing rapidly so use at your own risk!_NOTE:_ This work is not officially supported by myenergi and functionality can stop working at any time without warning## InstallationThe easiest method is to install using pip3/pip (venv is also a good idea)```pip install pymyenergi```to update to the latest version```pip install pymyenergi -U```Setup will add a cli under the name myenergicli, see below for usage## CLIA simple cli is provided with this library.If no username or password is supplied as input arguments and no configuration file is found you will be prompted.Conifguration file will be searched for in ./.myenergi.cfg and ~/.myenergi.cfg### Example configuration file```[hub]serial=12345678password=yourpassword```### CLI usage```usage: myenergi [-h] [-u USERNAME] [-p PASSWORD] [-d] [-j]                {list,overview,zappi,eddi,harvi} ...myenergi CLI.positional arguments:  {list,overview,zappi,eddi,harvi}                        sub-command help    list                list devices    overview            show overview    zappi               use zappi --help for available commands    eddi                use eddi --help for available commands    harvi               use harvi --help for available commands    libbi               use libbi --help for available commandsoptional arguments:  -h, --help            show this help message and exit  -u USERNAME, --username USERNAME  -p PASSWORD, --password PASSWORD  -d, --debug  -j, --json```## Library usageInstall pymyenergi using pip (requires python &gt; 3.6)### Example client usage```import asynciofrom pymyenergi.connection import Connectionfrom pymyenergi.client import MyenergiClientfrom sys import argvimport logginglogging.basicConfig()logging.root.setLevel(logging.INFO)user = argv[1]password = argv[2]async def zappis() -&gt; None:    conn = Connection(user, password)    client = MyenergiClient(conn)    zappis = await client.getDevices('zappi')    for zappi in zappis:        print(f&quot;Zappi {zappi.serial_number} charge mode {zappi.charge_mode}&quot;)loop = asyncio.get_event_loop()loop.run_until_complete(zappis())```### Example client usage - Zappi```import asynciofrom pymyenergi.connection import Connectionfrom pymyenergi.zappi import Zappifrom sys import argvimport logginglogging.basicConfig()logging.root.setLevel(logging.INFO)user = argv[1]password = argv[2]zappi_serial = argv[3]async def get_data() -&gt; None:    conn = Connection(user, password)    zappi = Zappi(conn, zappi_serial)    await zappi.refresh()    print(f&quot;Zappi S/N {zappi.serial_number} version {zappi.firmware_version}&quot;)    print(f&quot;Status: {zappi.status} Plug status: {zappi.plug_status} Locked: {zappi.locked}&quot;)    print(f&quot;Priority: {zappi.priority}&quot;)    print(f&quot;Charge mode: {zappi.charge_mode} {zappi.num_phases} phase&quot;)    print(&quot;&quot;)    print(f&quot;Lock when plugged in   : {zappi.lock_when_pluggedin}&quot;)    print(f&quot;Lock when unplugged    : {zappi.lock_when_unplugged}&quot;)    print(f&quot;Charge when locked     : {zappi.charge_when_locked}&quot;)    print(f&quot;Charge session allowed : {zappi.charge_session_allowed}&quot;)    print(f&quot;Charge added: {zappi.charge_added}&quot;)    print(&quot;&quot;)    print(f&quot;CT 1 {zappi.ct1.name} {zappi.ct1.power}W&quot;)    print(f&quot;CT 2 {zappi.ct2.name} {zappi.ct2.power}W&quot;)    print(f&quot;CT 3 {zappi.ct3.name} {zappi.ct3.power}W&quot;)    print(f&quot;CT 4 {zappi.ct4.name} {zappi.ct4.power}W&quot;)    print(f&quot;CT 5 {zappi.ct5.name} {zappi.ct5.power}W&quot;)    print(f&quot;CT 6 {zappi.ct6.name} {zappi.ct6.power}W&quot;)    print(&quot;&quot;)    print(f&quot;Supply voltage: {zappi.supply_voltage}V frequency: {zappi.supply_frequency}Hz&quot;)    print(&quot;Power:&quot;)    print(f&quot;  Grid      : {zappi.power_grid}W&quot;)    print(f&quot;  Generated : {zappi.power_generated}W&quot;)    print(&quot;&quot;)    print(f&quot;      Boost start at {zappi.boost_start_hour}:{zappi.boost_start_minute} add {zappi.boost_amount}kWh&quot;)    print(f&quot;Smart Boost start at {zappi.smart_boost_start_hour}:{zappi.smart_boost_start_minute} add {zappi.smart_boost_amount}kWh&quot;)loop = asyncio.get_event_loop()loop.run_until_complete(get_data())```## libbi support  very early  reads a few values like State of Charge  gets the current status## Credits[twonk](https://github.com/twonk/MyEnergi-App-Api) for documenting the unofficial API</longdescription>
</pkgmetadata>