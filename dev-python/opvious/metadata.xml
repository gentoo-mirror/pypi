<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Opvious Python SDK  [![CI](https://github.com/opvious/sdk.py/actions/workflows/ci.yml/badge.svg)](https://github.com/opvious/sdk.py/actions/workflows/ci.yml) [![Pypi badge](https://badge.fury.io/py/opvious.svg)](https://pypi.python.org/pypi/opvious/)This package provides a lightweight SDK for solving optimization models with the[Opvious API][api]. Its main features are:+ Seamless data import/export via native support for [`pandas`][pandas]+ Powerful built-in debugging capabilities: automatic infeasibility relaxation,  variable pinning, and more+ Non-blocking APIs for performant parallel calls## QuickstartFirst, install this package and have an API access token handy (these can begenerated [here][token]).```shpip install opvious[aio] # aio is recommended for improved performance```With these steps out of the way, you are ready to optimize!```pythonimport opviousclient = opvious.Client.from_token(TOKEN)# Solve a simple portfolio selection optimization modelresponse = await client.run_solve(    sources=[      r&quot;&quot;&quot;          We find an allocation of assets which minimizes risk while satisfying          a minimum expected return:          + A collection of assets: $\S^d_{asset}: A$          + Covariances: $\S^p_{covariance}: c \in \mathbb{R}^{A \times A}$          + Expected return: $\S^p_{expectedReturn}: m \in \mathbb{R}^A$          + Minimum desired return: $\S^p_{desiredReturn}: r \in \mathbb{R}$          The only output is the allocation per asset          $\S^v_{allocation}: \alpha \in [0,1]^A$ chosen to minimize risk:          $\S^o_{risk}: \min \sum_{a, b \in A} c_{a,b} \alpha_a \alpha_b$.          Subject to the following constraints:          + $\S^c_{atLeastMinimumReturn}: \sum_{a \in A} m_a \alpha_a \geq r$          + $\S^c_{totalAllocation}: \sum_{a \in A} \alpha_a = 1$      &quot;&quot;&quot;    ],    parameters={        &quot;covariance&quot;: {            (&quot;AAPL&quot;, &quot;AAPL&quot;): 0.08,            # ...        },        &quot;expectedReturn&quot;: {            &quot;AAPL&quot;: 0.07,            # ..        },        &quot;desiredReturn&quot;: 0.05,    },)print(f&quot;Problem was {response.status}.&quot;) # OPTIMAL, INFEASIBLE, ...if response.outputs: # Present if the problem was feasible  print(response.outputs.variable(&quot;allocation&quot;))```## EnvironmentsClients are compatible with Pyodide environments, for example [JupyterLite][]kernels. Simply install the package as usual in a notebook, omitting the `aio`optional dependencies:```pythonimport pipliteawait piplite.install('opvious')```In other environments, prefer using the `aiohttp`-powered clients as they aremore performant (this is the default if the `aio` dependencies were specified).## Next stepsThis SDK is focused on solving optimization models. For convenient access to therest of Opvious' functionality, consider using the [TypeScript SDK andCLI][cli].[api]: https://www.opvious.io[cli]: https://www.opvious.io/sdk.ts[JupyterLite]: https://jupyterlite.readthedocs.io/[token]: https://hub.beta.opvious.io/authorizations[pandas]: https://pandas.pydata.org</longdescription>
</pkgmetadata>