<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>### This repository is no longer maintained in favour of Official Apache Atlas' python client: &lt;https://pypi.org/project/apache-atlas/&gt;Apache Atlas Client in Python-----------------------------[![image](https://img.shields.io/pypi/v/pyatlasclient.svg)](https://pypi.python.org/pypi/pyatlasclient) [![image](https://img.shields.io/travis/verdan/pyatlasclient.svg)](https://travis-ci.org/verdan/pyatlasclient) [![image](https://coveralls.io/repos/github/verdan/pyatlasclient/badge.svg?branch=master)](https://coveralls.io/github/verdan/pyatlasclient?branch=master) [![Documentation Status](https://readthedocs.org/projects/pyatlasclient/badge/?version=latest)](https://pyatlasclient.readthedocs.io/en/latest/?badge=latest) [![Updates](https://pyup.io/repos/github/verdan/pyatlasclient/shield.svg)](https://pyup.io/repos/github/verdan/pyatlasclient/)Apache Atlas client in Python. Only compatible with Apache Atlas RESTAPI **v2**.*Based on the awesome work done by Poullet in atlasclient*-   Free software: Apache Software License 2.0-   Documentation: &lt;https://pyatlasclient.readthedocs.io&gt;### Get started```python    from atlasclient.client import Atlas    client = Atlas('&lt;atlas.host&gt;', port=21000, username='admin', password='admin')    client.entity_guid(&quot;&lt;guid&gt;&quot;).status    params = {'typeName': 'DataSet', 'attrName': 'name', 'attrValue': 'data', 'offset': '1', 'limit':'10'}    search_results = client.search_attribute(**params)     for s in search_results:        for e in s.entities:            print(e.name)            print(e.guid)```### Features-   Lazy loading: requests are only performed when data are required and    not yet available-   Leverages Python\'s Data Classes for Glossary.-   Resource object relationships: REST API from sub-resources are done    transparently for the user, for instance the user does not have to    know that it needs to trigger a different REST request for getting    the classifications of a specific entity.### TODO features-   allow multiprocessing-   Implement Caching-   Apply Data Classes to all entity types. For now only Glossary    endpoints are using it.### CreditsThis package was created with[Cookiecutter](https://github.com/audreyr/cookiecutter) and the[audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage)project template.</longdescription>
</pkgmetadata>