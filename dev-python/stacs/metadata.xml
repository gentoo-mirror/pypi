<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Shield](https://img.shields.io/github/actions/workflow/status/stacscan/stacs/check.yml?label=Tests&amp;style=flat-square)](https://github.com/stacscan/stacs/actions?workflow=Check)[![Shield](https://img.shields.io/github/actions/workflow/status/stacscan/stacs/publish.yml?label=Deploy&amp;style=flat-square)](https://github.com/stacscan/stacs/actions?workflow=Publish)[![Shield](https://img.shields.io/docker/pulls/stacscan/stacs?style=flat-square)](https://hub.docker.com/r/stacscan/stacs)[![Shield](https://img.shields.io/docker/image-size/stacscan/stacs?style=flat-square)](https://hub.docker.com/r/stacscan/stacs/tags?page=1&amp;ordering=last_updated)[![Shield](https://img.shields.io/twitter/follow/stacscan?style=flat-square)](https://twitter.com/stacscan)&lt;p align=&quot;center&quot;&gt;    &lt;br /&gt;&lt;br /&gt;    &lt;img src=&quot;https://raw.githubusercontent.com/stacscan/stacs/main/docs/images/STACS-Logo-RGB.small.png&quot;&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;br /&gt;    &lt;b&gt;Static Token And Credential Scanner&lt;/b&gt;    &lt;br /&gt;&lt;/p&gt;### What is it?STACS is a [YARA](https://virustotal.github.io/yara/) powered static credential scannerwhich suports binary file formats, analysis of nested archives, composable rulesetsand ignore lists, and SARIF reporting.### What does STACS support?Currently, STACS supports recursive unpacking of:* 7z, ar, bz2, cab, cpio, gz, iso, rar, rpm, tar, xar, xz, zip, dmgAs STACS works on detected file types, proprietary file formats based and otherfile-types which use these formats are automatically supported. This includes Dockerimages, Android APKs, Java JAR files, RPMs, Debian packages (`.deb`), macOS packages(`.pkg`), and more!### Who should use STACS?STACS is designed for use by any teams who release binary artifacts. STACS providesdevelopers the ability to automatically check for accidental inclusion of staticcredentials and key material in their releases.However, this doesn't mean STACS can't help with SaaS applications, enterprisesoftware, or even source code!As an example, STACS can be used to find static credentials in Docker images uploadedto public and private container registries. It can also be used to find credentialsaccidentally compiled in to executables, packages for mobile devices, and &quot;enterprisearchives&quot; - such as those used by Java application servers.### How does it work?STACS detects static credentials using &quot;rule packs&quot; provided to STACS when run. Theserule packs define a set of YARA rules to run against files provided to STACS. When amatch against a rule is found, a &quot;finding&quot; is generated. These findings representpotential credentials inside of a file, and are reported on for a developer to remediateor &quot;ignore&quot;.If the finding is found to be a false positive - that is, a match on something otherthan a real credential - the developer can generate a set of &quot;ignore lists&quot; to ensurethat these matches don't appear in future reports.The real power from STACS comes from the automatic detection and unpacking of nestedarchives, and composable ignore lists and rule packs.#### Ignore lists?In order to allow flexible and collaborative usage, STACS supports composable ignorelists. This allows for an ignore list to include other ignore lists which enablecomposition of a &quot;tree of ignores&quot; based on organisational guidelines. These ignorelists are especially useful in organisations where many of the same frameworks orproducts are used. If a team has already marked a finding as a false positive, otherteams get the benefit of not having to triage the same finding.#### Rule packs?In the same manner as ignore lists, rule packs are also composable. This enables anorganisation to define a baseline set of rules for use by all teams, while stillallowing teams to maintain rulesets specific to their products.### How do I use it?The easiest way to use STACS is using the Docker images published to Docker Hub.However, STACS can also be installed directly from Python's PyPI, or by cloning thisrepository. See the relevant sections below to get started!A cloud based service is coming soon which allows integration directly in buildand release pipelines to enable detection of static credentials before release!#### DockerUsing the published images, STACS can be used to scan artifacts right away! The STACSDocker images provides a number of volume mounts for files wanted to be scanned to bemounted directly into the scan container.As an example, to scan everything in the current folder, the following command can berun (Docker must be installed).```docker run \    --rm \    -v &quot;$(pwd):/mnt/stacs/input:ro&quot; \    stacscan/stacs:latest```If you would like to receive &quot;pretty&quot; readable output, the following command should beused:```docker run \    --rm \    -e STACS_OUTPUT_PRETTY=1 \    -v &quot;$(pwd):/mnt/stacs/input:ro&quot; \    stacscan/stacs:latest```By default, STACS will output any findings in SARIF format directly to STDOUT and inorder to keep things orderly, all log messages will be sent to STDERR. For more advanceduse cases, a number of other volume mounts are provided. These allow the user to controlthe rule packs, ignore lists, and a cache directories to use.#### PyPiSTACS can also be installed directly from Python's PyPi. This provides a `stacs` commandwhich can then be used by developers to scan projects directly in their localdevelopment environments.STACS can be installed directly from PyPi using:```pip install stacs```**Please Note:** The PyPi release of STACS does not come with any rules. These will alsoneed to be cloned from the [community rules repository](https://github.com/stacscan/stacs-rules)for STACS to work!### FAQ#### Is there a hosted version of STACS?Not yet. However, there are plans for a hosted version of STACS which can be easilyintegrated into existing build systems, and which contains additional prebuilt rulepacks and ignore lists.#### What do I do about false positives?Unfortunately, false positives are an inevitable side effect during the detection ofstatic credentials. If rules are too granular then rule maintenance becomes a burdenand STACS may miss credentials. If rules are too coarse then STACS may generate toomany false positives!In order to assist, STACS provides a number of tools to assist with reducing the numberof false positives which make it into final reports.Primarily, STACS provides a mechanism which allows users to define composable ignorelists which allow a set of findings to be &quot;ignored&quot;. These rules can be as coarse asignoring all files based on a pattern, or as granular as a specific finding on aparticular line of a file.This information is automatically propagated through into reports, so &quot;ignored&quot; findingswill be marked as &quot;suppressed&quot; in SARIF output while also including the reason for theignore in the output for tracking.#### How do I view the results?If using &quot;pretty&quot; output (`--pretty` / `STACS_OUTPUT_PRETTY`), results will be printedin a human readable format to the console.![Human Output](https://raw.githubusercontent.com/stacscan/stacs/main/docs/images/Human-Output-Example.png)If using SARIF, there are a number of viewers available which make this data easier toread, such as [this great web based viewer from](https://microsoft.github.io/sarif-web-component/)Microsoft. An example of the findings from a Docker container image has been includedbelow:![Microsoft SARIF Viewer Output](https://raw.githubusercontent.com/stacscan/stacs/main/docs/images/SARIF-Viewer-Example.png)#### The performance is really, really bad when running in Docker on macOS!Unfortunately, this appears to be due to a limitation of Docker Desktop for Mac. I/Ofor bind mounts [is really, really slow](https://github.com/docker/for-mac/issues/3677).</longdescription>
</pkgmetadata>