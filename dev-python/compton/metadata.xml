<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/kaelzhang/python-compton.svg?branch=master)](https://travis-ci.org/kaelzhang/python-compton)[![Coverage](https://codecov.io/gh/kaelzhang/python-compton/branch/master/graph/badge.svg)](https://codecov.io/gh/kaelzhang/python-compton)&lt;!-- optional appveyor tst[![Windows Build Status](https://ci.appveyor.com/api/projects/status/github/kaelzhang/python-compton?branch=master&amp;svg=true)](https://ci.appveyor.com/project/kaelzhang/python-compton)--&gt;&lt;!-- optional npm version[![NPM version](https://badge.fury.io/js/python-compton.svg)](http://badge.fury.io/js/python-compton)--&gt;&lt;!-- optional npm downloads[![npm module downloads per month](http://img.shields.io/npm/dm/python-compton.svg)](https://www.npmjs.org/package/python-compton)--&gt;&lt;!-- optional dependency status[![Dependency Status](https://david-dm.org/kaelzhang/python-compton.svg)](https://david-dm.org/kaelzhang/python-compton)--&gt;# python-comptonAn abstract data-flow framework for quantitative trading, which decouples data initialization, data composition and data processing.## Install```shpip install compton```## Usage```pyfrom compton import (  Orchestrator,  Provider,  Reducer,  Consumer)```## VectorWe call a tuple of hashable parameters as a vector which is used to identify a certain kind of data.```pyfrom enum import Enumclass DataType(Enum):    KLINE = 1    ORDER_BOOK = 2class TimeSpan(Enum):    DAY = 1    WEEK = 2vector = (DataType.KLINE, TimeSpan.DAY)```## Orchestrator(reducers, loop=None)- **reducers** `List[Reducer]` reducers to compose data- **loop?** `Optional[EventLoop]` The event loop object to use. In most cases, you should **NOT** pass this argument, unless you exact know what you are doing.```pyOrchestrator(    reducers).connect(    provider).subscribe(    consumer).add('TSLA')```### orchestrator.connect(provider: Provider) -&gt; selfConnects to a data provider### orchestrator.subscribe(consumer: Consumer) -&gt; selfSubscribes the consumer to orchestrator.### orchestrator.add(symbol: str) -&gt; selfAdds a new symbol to orchestrator, and start the data flow for `symbol`## Provider`Provider` is an abstract class which provides initial data and data updates.A provider should be implemented to support many symbolsWe must inherit class `Provider` and implement some abstract method before use.- `@property vector` returns an `Vector`- `async def init()` method returns the initial data- There is an protected method `self.dispatch(symbol, payload)` to set the payload updated, which should only be called in a coroutine, or a `RuntimeError` is raised.```pyclass MyProvider(Provider):    @property    def vector(self):        return (DataType.KLINE, TimeSpan.DAY)    async def init(self, symbol):        return {}```## ReducerAnother abstract class which handles data composition.The `reducer.vector` could be a generic vector which applies partial match to other vectors```pyclass MyReducer(Reducer):    @property    def vector(self):        # So, MyReducer support both        # - (DataType.KLINE, TimeSpan.DAY)        # - and (DataType.KLINE, TimeSpan.WEEK)        return (DataType.KLINE,)    def merge(self, old, new):        # `old` might be `None`, if `new` is the initial data        if old is None:            # We could clean the initial data            return clean(new)        return {**old, **new}```## ConsumerA consumer could subscribes to more than one kind of data types```pyclass MyConsumer(Consumer):    @property    def vectors(self):        # Subscribe to two kinds of data types        return [            (DataType.KLINE, TimeSpan.DAY),            (DataType.KLINE, TimeSpan.WEEK)        ]    @property    def all(self) -&gt; bool:        &quot;&quot;&quot;        `True` indicates that the consumer will only go processing        if both of the data corresponds with the two vectors have changes        And by default, `Consumer::all` is False        &quot;&quot;&quot;        return True    @property    def concurrency(self) -&gt; int:        &quot;&quot;&quot;        Concurrency limit for method `process()`        By default, `Consumer::concurrency` is `0` which means no limit        &quot;&quot;&quot;        return 1    def should_process(self, *payloads) -&gt; bool:        &quot;&quot;&quot;        If this method returns `False`, then the data update will not be processed        &quot;&quot;&quot;        return True    # Then there will be    # both `kline_day` and `kline_week` passed into method `process`    async def process(self, symbol, kline_day, kline_week):        await doSomething(symbol, kline_day, kline_week)```## License[MIT](LICENSE)</longdescription>
</pkgmetadata>