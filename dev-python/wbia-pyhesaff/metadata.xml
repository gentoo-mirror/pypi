<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======================Wildbook IA - PyHesaff======================|Build| |Pypi| |ReadTheDocs|Hessian Affine + SIFT keypoints in Python! - Part of the WildMe / Wildbook IA Project.This is an implementation of Hessian-Affine detector.The implementation uses a Lowe's (Lowe 1999, Lowe 2004) like pyramidto sample Gaussian scale-space and localizes local extrema of theDetetminant of Hessian Matrix operator computed on normalizedderivatives. Then a Baumberg-Lindeberg discovery of a local affineshape is employed (Lindeberg 1998, Baumberg 2000, Mikolajzyk 2002) tocompute affine shape of each det of Hessian extrema. Finally a localneighbourhood is normalized to a fixed size patch and SIFTdescriptor(Lowe 1999, Lowe 2004) computed.IMPLEMENTATION--------------Implementation depends on OpenCV (2.3.1+). Although, the code isoriginal, the affine iteration and normalization was derived from thecode of Krystian Mikolajczyk.The SIFT descriptor code was patented under a US Patent 6,711,293, whichexpired on March 7th 2019, so the license is no longer required for use.OUTPUT------NOTE THIS IS NO LONGER THE CASE. WE MAY REINSTATE THIS.The built binary rewrites output file: &lt;input_image_name&gt;.hesaff.siftThe output format is compatible with the binaries available from thepage &quot;Affine Covariant Features&quot;. The geometry of an affine region isspecified by: u,v,a,b,c in a(x-u)(x-u)+2b(x-u)(y-v)+c(y-v)(y-v)=1. Thetop left corner of the image is at (u,v)=(0,0). The geometry of anaffine region is followed by N descriptor values (N = 128).File format:::    N    m    u1 v1 a1 b1 c1 d1(1) d1(2) d1(3) ... d1(N)          :          :    um vm am bm cm dm(1) dm(2) dm(3) ... dm(N)PROPER USE----------If you use this code, please refer toPerdoch, M. and Chum, O. and Matas, J.: Efficient Representation ofLocal Geometry for Large Scale Object Retrieval. In proceedings ofCVPR09. June 2009.TBD: A reference to technical report describing the details and someretrieval results will be placed here.NOTES-----Requires opencv. On ubuntu you can: ``sudo apt-get install libopencv-dev``. You can also build / use wheels. If cmake is unable to find OpenCV, manually set the location of OpenCV to the OpenCV_DIR environment variable.. |Build| image:: https://img.shields.io/github/workflow/status/WildMeOrg/wbia-tpl-pyhesaff/Build%20and%20upload%20to%20PyPI/main    :target: https://github.com/WildMeOrg/wbia-tpl-pyhesaff/actions?query=branch%3Amain+workflow%3A%22Build+and+upload+to+PyPI%22    :alt: Build and upload to PyPI (main).. |Pypi| image:: https://img.shields.io/pypi/v/wbia-pyhesaff.svg   :target: https://pypi.python.org/pypi/wbia-pyhesaff   :alt: Latest PyPI version.. |ReadTheDocs| image:: https://readthedocs.org/projects/wbia-tpl-pyhesaff/badge/?version=latest    :target: http://wbia-tpl-pyhesaff.readthedocs.io/en/latest/    :alt: Documentation on ReadTheDocs</longdescription>
</pkgmetadata>