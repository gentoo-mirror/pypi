<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Distributed RunnerThis library allows for the easy construction and management of Dask clusters via a simple context manager.![license](https://img.shields.io/gitlab/license/crossref/labs/distrunner) ![activity](https://img.shields.io/gitlab/last-commit/crossref/labs/distrunner) &lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;![Dask](https://img.shields.io/badge/dask-%23092E20.svg?style=for-the-badge&amp;logo=dask&amp;logoColor=white) ![Git](https://img.shields.io/badge/git-%23F05033.svg?style=for-the-badge&amp;logo=git&amp;logoColor=white) ![GitLab](https://img.shields.io/badge/gitlab-%23121011.svg?style=for-the-badge&amp;logo=gitlab&amp;logoColor=white) ![Linux](https://img.shields.io/badge/Linux-FCC624?style=for-the-badge&amp;logo=linux&amp;logoColor=black) ![Python](https://img.shields.io/badge/python-3670A0?style=for-the-badge&amp;logo=python&amp;logoColor=ffdd54)## Installation    pip install distrunner## UsageIn your scheduler (Airfow etc.) use something like this:    from distrunner import DistRunner    import whatismyip    def main():        with DistRunner(workers=10) as cldr:            results = cldr.client.map(print_ip, range(10))            outcome = cldr.client.gather(results)                print(outcome)    def print_ip(x):        return f&quot;My IP address is {whatismyip.whatismyip()}&quot;The &quot;local&quot; flag will determine whether a remote cluster is created. For example, the following will all run locally instead of spinning up infrastructure:    from distrunner import DistRunner    import whatismyip    def main():        with DistRunner(workers=10, local=True) as cldr:            results = cldr.client.map(print_ip, range(10))            outcome = cldr.client.gather(results)                print(outcome)    def print_ip(x):        return f&quot;My IP address is {whatismyip.whatismyip()}&quot;You will need to set the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables to use the Fargate clusters (or run from an environment with an authorised IAM role).## Features* Context manager handling of Dask Fargate clusters with scale-to-zero on complete* Easy ability to switch between local and distributed/remote development## What it DoesThis library allows you to easily run functions across a Dask cluster.## Credits* [AWS/Boto](https://github.com/boto/botocore)* [Coiled](https://coiled.io)* [Dask](https://www.dask.org/)* [Git](https://git-scm.com/)* [GitPython](https://github.com/gitpython-developers/GitPython)Copyright &amp;copy; Crossref 2023 </longdescription>
</pkgmetadata>