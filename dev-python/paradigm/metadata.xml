<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>paradigm========[![](https://github.com/lycantropos/paradigm/workflows/CI/badge.svg)](https://github.com/lycantropos/paradigm/actions/workflows/ci.yml &quot;Github Actions&quot;)[![](https://codecov.io/gh/lycantropos/paradigm/branch/master/graph/badge.svg)](https://codecov.io/gh/lycantropos/paradigm &quot;Codecov&quot;)[![](https://img.shields.io/github/license/lycantropos/paradigm.svg)](https://github.com/lycantropos/paradigm/blob/master/LICENSE &quot;License&quot;)[![](https://badge.fury.io/py/paradigm.svg)](https://badge.fury.io/py/paradigm &quot;PyPI&quot;)In what follows `python` is an alias for `python3.7` or `pypy3.7`or any later version (`python3.8`, `pypy3.8` and so on).Installation------------Install the latest `pip` &amp; `setuptools` packages versions```bashpython -m pip install --upgrade pip setuptools```### UserDownload and install the latest stable version from `PyPI` repository```bashpython -m pip install --upgrade paradigm```### DeveloperDownload the latest version from `GitHub` repository```bashgit clone https://github.com/lycantropos/paradigm.gitcd paradigm```Install dependencies```bashpython -m pip install -r requirements.txt```Install```bashpython setup.py install```Usage-----With setup```python&gt;&gt;&gt; import typing&gt;&gt;&gt; from paradigm.base import (OptionalParameter,...                            ParameterKind,...                            PlainSignature,...                            RequiredParameter,...                            signature_from_callable)&gt;&gt;&gt; from typing_extensions import Self&gt;&gt;&gt; class UpperOut:...     def __init__(self, outfile: typing.IO[typing.AnyStr]) -&gt; None:...         self._outfile = outfile... ...     def write(self, s: typing.AnyStr) -&gt; None:...         self._outfile.write(s.upper())... ...     def __getattr__(self, name: str) -&gt; typing.Any:...         return getattr(self._outfile, name)&gt;&gt;&gt; def func(foo: int, bar: float, *, baz: bool = False, **kwargs: str) -&gt; None:...     pass```we can obtain a signature of- user-defined functions  ```python  &gt;&gt;&gt; signature_from_callable(func) == PlainSignature(  ...     RequiredParameter(annotation=int,  ...                       kind=ParameterKind.POSITIONAL_OR_KEYWORD,  ...                       name='foo'),  ...     RequiredParameter(annotation=float,  ...                       kind=ParameterKind.POSITIONAL_OR_KEYWORD,  ...                       name='bar'),  ...     OptionalParameter(annotation=bool,  ...                       default=False,  ...                       kind=ParameterKind.KEYWORD_ONLY,  ...                       name='baz'),  ...     OptionalParameter(annotation=str,  ...                       kind=ParameterKind.VARIADIC_KEYWORD,  ...                       name='kwargs'),  ...     returns=None  ... )  True    ```- user-defined classes  ```python  &gt;&gt;&gt; signature_from_callable(UpperOut) == PlainSignature(  ...     RequiredParameter(annotation=typing.IO[typing.AnyStr],  ...                       kind=ParameterKind.POSITIONAL_OR_KEYWORD,  ...                       name='outfile'),  ...     returns=Self  ... )  True    ```- user-defined classes methods  ```python  &gt;&gt;&gt; signature_from_callable(UpperOut.write) == PlainSignature(  ...     RequiredParameter(annotation=typing.Any,  ...                       kind=ParameterKind.POSITIONAL_OR_KEYWORD,  ...                       name='self'),  ...     RequiredParameter(annotation=typing.AnyStr,  ...                       kind=ParameterKind.POSITIONAL_OR_KEYWORD,  ...                       name='s'),  ...     returns=None  ... )  True    ```- built-in functions  ```python  &gt;&gt;&gt; signature_from_callable(any) == PlainSignature(  ...     RequiredParameter(annotation=typing.Iterable[object],  ...                       kind=ParameterKind.POSITIONAL_ONLY,  ...                       name='__iterable'),  ...     returns=bool  ... )  True    ```- built-in classes  ```python  &gt;&gt;&gt; signature_from_callable(bool) == PlainSignature(  ...     OptionalParameter(annotation=object,  ...                       kind=ParameterKind.POSITIONAL_ONLY,  ...                       name='__o'),  ...     returns=Self  ... )  True    ```- built-in classes methods  ```python  &gt;&gt;&gt; signature_from_callable(float.hex) == PlainSignature(  ...     RequiredParameter(annotation=Self,  ...                       kind=ParameterKind.POSITIONAL_ONLY,  ...                       name='self'),  ...     returns=str  ... )  True    ```Development-----------### Bumping version#### PreparationInstall[bump2version](https://github.com/c4urself/bump2version#installation).#### Pre-releaseChoose which version number category to bump following [semverspecification](http://semver.org/).Test bumping version```bashbump2version --dry-run --verbose $CATEGORY```where `$CATEGORY` is the target version number category name, possiblevalues are `patch`/`minor`/`major`.Bump version```bashbump2version --verbose $CATEGORY```This will set version to `major.minor.patch-alpha`. #### ReleaseTest bumping version```bashbump2version --dry-run --verbose release```Bump version```bashbump2version --verbose release```This will set version to `major.minor.patch`.### Running testsInstall dependencies```bashpython -m pip install -r requirements-tests.txt```PlainSignature```bashpytest```Inside `Docker` container:- with `CPython`  ```bash  docker-compose --file docker-compose.cpython.yml up  ```- with `PyPy`  ```bash  docker-compose --file docker-compose.pypy.yml up  ````Bash` script (e.g. can be used in `Git` hooks):- with `CPython`  ```bash  ./run-tests.sh  ```  or  ```bash  ./run-tests.sh cpython  ```- with `PyPy`  ```bash  ./run-tests.sh pypy  ````PowerShell` script (e.g. can be used in `Git` hooks):- with `CPython`  ```powershell  .\run-tests.ps1  ```  or  ```powershell  .\run-tests.ps1 cpython  ```- with `PyPy`  ```powershell  .\run-tests.ps1 pypy  ```</longdescription>
</pkgmetadata>