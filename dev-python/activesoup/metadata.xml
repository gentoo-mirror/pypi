<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>activesoup==========.. image:: https://github.com/jelford/activesoup/workflows/Build/badge.svg    :target: https://github.com/jelford/activesoup/actions?query=workflow%3Abuild.. image:: https://img.shields.io/pypi/v/activesoup.svg?maxAge=3600    :target: https://pypi.python.org/pypi?:action=display&amp;name=activesoupA simple library for interacting with the web from pythonDescription-----------``activesoup`` combines familiar python web capabilities for convenientheadless &quot;browsing&quot; functionality:* Modern HTTP support with `requests &lt;https://docs.python-requests.org/&gt;`__ -  connection pooling, sessions, ...* Convenient access to the web page with an interface inspired by  `beautifulsoup &lt;https://www.crummy.com/software/BeautifulSoup/&gt;`__ -  convenient HTML navigation.* Robust HTML parsing with  `html5lib &lt;https://html5lib.readthedocs.org/en/latest/&gt;`__ - parse the web  like browsers do.Full documentation can be found at https://activesoup.dev.Use cases---------``activesoup`` aims to provide just enough functionality for basic web automation/ crawler tasks. Consider using ``activesoup`` when:* You've already checked out `requests-html &lt;https://github.com/kennethreitz/requests-html&gt;`__* You need to actively interact with some web-page from Python (e.g. submitting  forms, downloading files)* You don't control the site you need to interact with (if you do, just make an  API).* You don't need javascript support (you'll need  `selenium &lt;http://www.seleniumhq.org/projects/webdriver/&gt;`__ or  `phantomjs &lt;http://phantomjs.org/&gt;`__).Usage examples--------------In the example below, we'll load a page with a simple form, enumeratethe fields, and make a submission:.. code-block:: python    &gt;&gt;&gt; import activesoup    &gt;&gt;&gt; # Start a session    &gt;&gt;&gt; d = activesoup.Driver()    &gt;&gt;&gt; page = d.get(&quot;https://httpbin.org/forms/post&quot;)    &gt;&gt;&gt; # conveniently access elements, inspired by BeautifulSoup    &gt;&gt;&gt; form = page.form    &gt;&gt;&gt; # get the power of raw xpath search too    &gt;&gt;&gt; form.find('.//input[@name=&quot;size&quot;]')    BoundTag&lt;input&gt;    &gt;&gt;&gt; # any element, searching by attribute    &gt;&gt;&gt; form.find('.//*', name=&quot;size&quot;)    BoundTag&lt;input&gt;    &gt;&gt;&gt; # or just search by attribute    &gt;&gt;&gt; form.find(name=&quot;size&quot;)    BoundTag&lt;input&gt;    &gt;&gt;&gt; # inspect element attributes    &gt;&gt;&gt; print([i['name'] for i in form.find_all('input')])    ['custname', 'custtel', 'custemail', 'size', 'size', 'size', 'topping', 'topping', 'topping', 'topping', 'delivery']    &gt;&gt;&gt; # work actively with objects on the page    &gt;&gt;&gt; r = form.submit({&quot;custname&quot;: &quot;john&quot;, &quot;size&quot;: &quot;small&quot;})    &gt;&gt;&gt; # responses parsed and ready based on content type    &gt;&gt;&gt; r.keys()    dict_keys(['args', 'data', 'files', 'form', 'headers', 'json', 'origin', 'url'])    &gt;&gt;&gt; r['form']    {'custname': 'john', 'size': 'small', 'topping': 'mushroom'}    &gt;&gt;&gt; # access the underlying requests.Session too    &gt;&gt;&gt; d.session    &lt;requests.sessions.Session object at 0x7f283dc95700&gt;    &gt;&gt;&gt; # log in with cookie support    &gt;&gt;&gt; d.get('https://httpbin.org/cookies/set/foo/bar')    &gt;&gt;&gt; d.session.cookies['foo']    'bar'</longdescription>
</pkgmetadata>