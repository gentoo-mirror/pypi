<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Licence](https://img.shields.io/badge/License-MIT-9cf.svg)](https://choosealicense.com/licenses/mit/)[![Test](https://img.shields.io/github/actions/workflow/status/akikuno/cstag/pytest.yml?branch=main&amp;label=Test&amp;color=brightgreen)](https://github.com/akikuno/cstag/actions)[![Python](https://img.shields.io/pypi/pyversions/cstag.svg?label=Python&amp;color=blue)](https://pypi.org/project/cstag/)[![PyPI](https://img.shields.io/pypi/v/cstag.svg?label=PyPI&amp;color=orange)](https://pypi.org/project/cstag/)[![Bioconda](https://img.shields.io/conda/v/bioconda/cstag?label=Bioconda&amp;color=orange)](https://anaconda.org/bioconda/cstag)[![DOI](https://zenodo.org/badge/468937655.svg)](https://zenodo.org/badge/latestdoi/468937655)# cstag`cstag` is a Python library tailored for the manipulation and handling of [minimap2's CS tags](https://github.com/lh3/minimap2#cs).## üåü Features- `cstag.call()`: Generate a CS tag- `cstag.shorten()`: Convert a CS tag from its long to short format- `cstag.lengthen()`: Convert a CS tag from its short to long format- `cstag.consensus()`: Create a consensus CS tag from multiple CS tags- `cstag.mask()`: Mask low-quality bases within a CS tag- `cstag.split()`: Break down a CS tag into its constituent parts- `cstag.revcomp()`: Convert a CS tag to its reverse complement- `cstag.to_sequence()`: Reconstruct a reference subsequence from the alignment- `cstag.to_vcf()`: Generate a VCF representation- `cstag.to_html()`: Generate an HTML representation- `cstag.to_pdf()`: Produce a PDF fileFor comprehensive documentation, please visit [our docs](https://akikuno.github.io/cstag/cstag/).  To add CS tags to SAM/BAM files, check out [`cstag-cli`](https://github.com/akikuno/cstag-cli).  ## üõ† InstallationUsing [PyPI](https://pypi.org/project/cstag/):```bashpip install cstag```Using [Bioconda](https://anaconda.org/bioconda/cstag):```bashconda install -c bioconda cstag```## üí° Usage### Generating CS Tags```pythonimport cstagcigar = &quot;8M2D4M2I3N1M&quot;md = &quot;2A5^AG7&quot;seq = &quot;ACGTACGTACGTACG&quot;print(cstag.call(cigar, md, seq))# :2*ag:5-ag:4+ac~nn3nn:1print(cstag.call(cigar, md, seq, long=True))# =AC*ag=TACGT-ag=ACGT+ac~nn3nn=G```### Shortening or Lengthening CS Tags```pythonimport cstag# Convert a CS tag from long to shortcs_tag = &quot;=ACGT*ag=CGT&quot;print(cstag.shorten(cs_tag))# :4*ag:3# Convert a CS tag from short to longcs_tag = &quot;:4*ag:3&quot;cigar = &quot;8M&quot;seq = &quot;ACGTACGT&quot;print(cstag.lengthen(cs_tag, cigar, seq))# =ACGT*ag=CGT```### Creating a Consensus```pythonimport cstagcs_tags = [&quot;=ACGT&quot;, &quot;=AC*gt=T&quot;, &quot;=C*gt=T&quot;, &quot;=C*gt=T&quot;, &quot;=ACT+ccc=T&quot;]positions = [1, 1, 2, 2, 1]print(cstag.consensus(cs_tags, positions))# =AC*gt=T```### Masking Low-Quality Bases```pythonimport cstagcs_tag = &quot;=ACGT*ac+gg-cc=T&quot;cigar = &quot;5M2I2D1M&quot;qual = &quot;AA!!!!AA&quot;phred_threshold = 10print(cstag.mask(cs_tag, cigar, qual, phred_threshold))# =ACNN*an+ng-cc=T```### Splitting a CS Tag```pythonimport cstagcs_tag = &quot;=ACGT*ac+gg-cc=T&quot;print(cstag.split(cs_tag))# ['=ACGT', '*ac', '+gg', '-cc', '=T']```### Reverse Complement of a CS Tag```pythonimport cstagcs_tag = &quot;=ACGT*ac+gg-cc=T&quot;print(cstag.revcomp(cs_tag))# =A-gg+cc*tg=ACGT```### Reconstructing the Reference Subsequence```pythonimport cstagcs_tag = &quot;=AC*gt=T-gg=C+tt=A&quot;print(cstag.to_sequence(cs_tag))# ACTTCTTA```### Generating a VCF Report```pythonimport cstagcs_tag = &quot;=AC*gt=T-gg=C+tt=A&quot;chrom = &quot;chr1&quot;pos = 1print(cstag.to_vcf(cs_tag, chrom, pos))&quot;&quot;&quot;##fileformat=VCFv4.2#CHROMPOSIDREFALTQUALFILTERINFOchr13.GT...chr14.TGGT...chr15.CCTT...&quot;&quot;&quot;```The multiple CS tags enable reporting of the variant allele frequency (VAF).```pythonimport cstagcs_tags = [&quot;=ACGT&quot;, &quot;=AC*gt=T&quot;, &quot;=C*gt=T&quot;, &quot;=ACGT&quot;, &quot;=AC*gt=T&quot;]chroms = [&quot;chr1&quot;, &quot;chr1&quot;, &quot;chr1&quot;, &quot;chr2&quot;, &quot;chr2&quot;]positions = [2, 2, 3, 10, 100]print(cstag.to_vcf(cs_tags, chroms, positions))&quot;&quot;&quot;##fileformat=VCFv4.2##INFO=&lt;ID=DP,Number=1,Type=Integer,Description=&quot;Total Depth&quot;&gt;##INFO=&lt;ID=RD,Number=1,Type=Integer,Description=&quot;Depth of Ref allele&quot;&gt;##INFO=&lt;ID=AD,Number=1,Type=Integer,Description=&quot;Depth of Alt allele&quot;&gt;##INFO=&lt;ID=VAF,Number=1,Type=Float,Description=&quot;Variant allele frequency (AD/DP)&quot;&gt;#CHROMPOSIDREFALTQUALFILTERINFOchr14.GT..DP=3;RD=1;AD=2;VAF=0.667chr2102.GT..DP=1;RD=0;AD=1;VAF=1.0&quot;&quot;&quot;```### Generating an HTML Report```pythonimport cstagfrom pathlib import Pathcs_tag = &quot;=AC+ggg=T-acgt*at~gt10ag=GNNN&quot;description = &quot;Example&quot;cs_tag_html = cstag.to_html(cs_tag, description)Path(&quot;report.html&quot;).write_text(cs_tag_html)# Output &quot;report.html&quot;```You can visualize mutations indicated by the CS tag using the generated `report.html` file as shown below:&lt;img width=&quot;511&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/15861316/265405607-a3cc1b76-f6a2-441d-b282-6f2dc06fc03d.png&quot;&gt;### Generating a PDF Report```pythonimport cstagcs_tag = &quot;=AC+ggg=T-acgt*at~gt10ag=GNNN&quot;description = &quot;Example&quot;path_out = &quot;report.pdf&quot;cstag.to_pdf(cs_tag, description, path_out)# Output &quot;report.pdf&quot;```You can obtain the same images of `cstag.to_html` as a PDF file.## üì£ Feedback and SupportFor questions, bug reports, or other forms of feedback, we'd love to hear from you!  Please use [GitHub Issues](https://github.com/akikuno/cstag/issues) for all reporting purposes.  ## ü§ù Code of ConductPlease note that this project is released with a [Contributor Code of Conduct](https://github.com/akikuno/cstag/blob/main/CODE_OF_CONDUCT.md).  By participating in this project you agree to abide by its terms.  </longdescription>
</pkgmetadata>