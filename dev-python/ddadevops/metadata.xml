<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dda-devops-build[![Slack](https://img.shields.io/badge/chat-clojurians-green.svg?style=flat)](https://clojurians.slack.com/messages/#dda-pallet/) | [&lt;img src=&quot;https://meissa-gmbh.de/img/community/Mastodon_Logotype.svg&quot; width=20 alt=&quot;team@social.meissa-gmbh.de&quot;&gt; team@social.meissa-gmbh.de](https://social.meissa-gmbh.de/@team) | [Website &amp; Blog](https://domaindrivenarchitecture.org)![release prod](https://github.com/DomainDrivenArchitecture/dda-devops-build/workflows/release%20prod/badge.svg)dda-devops-build provide a environment to tie several DevOps tools together for easy interoperation. Supported tools are:* aws with  * simple api-key auth  * mfa &amp; assume-role auth* hetzner with simple api-key auth* terraform v0.11, v0.12 supporting  * local file backends  * s3 backends* docker / dockerhub* user / team credentials managed by gopass* dda-pallet# SetupEnsure that yout python3 version is at least Python 3.7!```sudo apt install python3-pippip3 install pip3 --upgradepip3 install pybuilder ddadevops deprecationexport PATH=$PATH:~/.local/bin# in case of using terraformpip3 install dda-python-terraform packaging# in case of using AwsMixinpip3 install boto3# in case of using AwsMfaMixinpip3 install boto3 mfa```# Example Buildlets assume the following project structure```my-project   | -&gt; my-module   |       | -&gt; build.py   |       | -&gt; some-terraform.tf   | -&gt; an-other-module   | -&gt; target  (here will the build happen)   |       | -&gt; ...``````from pybuilder.core import task, initfrom ddadevops import *name = 'my-project'MODULE = 'my-module'PROJECT_ROOT_PATH = '..'class MyBuild(DevopsTerraformBuild):    pass@initdef initialize(project):    project.build_depends_on('ddadevops&gt;=0.5.0')    account_name = 'my-aws-account-name'    account_id = 'my-aws-account-id'    stage = 'my stage i.e. dev|test|prod'    additional_vars = {'var_to_use_insied_terraform': '...'}    additional_var_files = ['variable-' + account_name + '-' + stage + '.tfvars']    config = create_devops_terraform_build_config(stage, PROJECT_ROOT_PATH,                                                  MODULE, additional_vars,                                                  additional_tfvar_files=additional_var_files)    build = MyBuild(project, config)    build.initialize_build_dir()@taskdef plan(project):    build = get_devops_build(project)    build.plan()@taskdef apply(project):    build = get_devops_build(project)    build.apply()@taskdef destroy(project):    build = get_devops_build(project)    build.destroy()@taskdef tf_import(project):    build = get_devops_build(project)    build.tf_import('aws_resource.choosen_name', 'the_aws_id')```## Feature aws-backendWill use a file `backend.dev.live.properties` where dev is the [account-name], live is the  [stage].the backend.dev.live.properties file content:```key = &quot;..&quot;region = &quot;the aws region&quot;profile = &quot;the profile used for aws&quot;bucket = &quot;the s3 bucket name&quot;kms_key_id = &quot;the aws key id&quot;```the build.py file content:```class MyBuild(AwsBackendPropertiesMixin, DevopsTerraformBuild):    pass@initdef initialize(project):    project.build_depends_on('ddadevops&gt;=1.0')    account_name = 'my-aws-account-name'    account_id = 'my-aws-account-id'    stage = 'my stage i.e. dev|test|prod'    additional_vars = {}    config = create_devops_terraform_build_config(stage, PROJECT_ROOT_PATH,                                                  MODULE, additional_vars)    config = add_aws_backend_properties_mixin_config(config, account_name)    build = MyBuild(project, config)    build.initialize_build_dir()```## Feature aws-mfa-assume-roleIn order to use aws assume role in combination with the mfa-tool (`pip install mfa`):the build.py file content:```class MyBuild(class MyBuild(AwsMfaMixin, DevopsTerraformBuild):    pass@initdef initialize(project):    project.build_depends_on('ddadevops&gt;=1.0')    account_name = 'my-aws-account-name'    account_id = 'my-aws-account-id'    stage = 'my stage i.e. dev|test|prod'    additional_vars = {}    config = create_devops_terraform_build_config(stage, PROJECT_ROOT_PATH,                                                  MODULE, additional_vars)    config = add_aws_backend_properties_mixin_config(config, account_name)    config = add_aws_mfa_mixin_config(config, account_id, 'eu-central-1',                                      mfa_role='my_developer_role',                                      mfa_account_prefix='company-',                                      mfa_login_account_suffix='users_are_defined_here')    build = MyBuild(project, config)    build.initialize_build_dir()@taskdef access(project):    build = get_devops_build(project)    build.get_mfa_session()```## Feature DdaDockerBuildThe docker build supports image building, tagging, testing and login to dockerhost.For bash based builds we support often used script-parts as predefined functions [see install_functions.sh](src/main/resources/docker/image/resources/install_functions.sh).A full working example: [doc/example/50_docker_module](doc/example/50_docker_module)## Feature AwsRdsPgMixinThe AwsRdsPgMixin provides * execute_pg_rds_sql - function will optionally resolve dns-c-names for trusted ssl-handshakes* alter_db_user_password* add_new_user* deactivate_userthe build.py file content:```class MyBuild(..., AwsRdsPgMixin):    pass@initdef initialize(project):    project.build_depends_on('ddadevops&gt;=1.0')    ...    config = add_aws_rds_pg_mixin_config(config,                                         stage + &quot;-db.bcsimport.kauf.&quot; + account_name + &quot;.breuni.de&quot;,                                         &quot;kauf_bcsimport&quot;,                                         rds_resolve_dns=True,)    build = MyBuild(project, config)    build.initialize_build_dir()@taskdef rotate_credentials_in(project):    build = get_devops_build(project)    build.alter_db_user_password('/postgres/support')    build.alter_db_user_password('/postgres/superuser')    build.add_new_user('/postgres/superuser', '/postgres/app', 'pg_group_role')@taskdef rotate_credentials_out(project):    build = get_devops_build(project)    build.deactivate_user('/postgres/superuser', 'old_user_name')```# Releasing and updating## Publish snapshot1. every push will be published as dev-dependency## Release```adjust version no in build.py to release version no.git commit -am &quot;release&quot;git tag -am &quot;release&quot; [release version no]git push --follow-tagsincrease version no in build.pygit commit -am &quot;version bump&quot;git pushpip3 install --upgrade --user ddadevops```# LicenseCopyright Â© 2021 meissa GmbHLicensed under the [Apache License, Version 2.0](LICENSE) (the &quot;License&quot;)</longdescription>
</pkgmetadata>