<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## aiohttp-basicauth[![Build Status](https://api.travis-ci.com/romis2012/aiohttp-basicauth.svg?branch=master)](https://travis-ci.com/github/romis2012/aiohttp-basicauth)[![Coverage Status](https://coveralls.io/repos/github/romis2012/aiohttp-basicauth/badge.svg?branch=master)](https://coveralls.io/github/romis2012/aiohttp-basicauth?branch=master)[![PyPI version](https://badge.fury.io/py/aiohttp-basicauth.svg?_=a)](https://badge.fury.io/py/aiohttp-basicauth)HTTP basic authentication middleware for aiohttp 3.0+. Inspired by [Flask-BasicAuth](https://github.com/jpvanhal/flask-basicauth).## Requirements- Python &gt;= 3.5.3- aiohttp &gt;= 3.0## Installation```pip install aiohttp_basicauth```## Simple usage```pythonfrom aiohttp import webfrom aiohttp_basicauth import BasicAuthMiddlewareauth = BasicAuthMiddleware(username='user', password='password')app = web.Application(middlewares=[auth])web.run_app(app, host='127.0.0.1', port=80)```## Protect specific view(s)```pythonfrom aiohttp import webfrom aiohttp_basicauth import BasicAuthMiddlewareauth = BasicAuthMiddleware(username='user', password='password', force=False)async def public_view(request):    return web.Response(text='Public view')@auth.requiredasync def secret_view(request):    return web.Response(text='Secret view')app = web.Application(middlewares=[auth])app.router.add_route('GET', '/public', public_view)app.router.add_route('GET', '/secret', secret_view)web.run_app(app, host='127.0.0.1', port=80)```## Advanced usageYou can override ```check_credentials``` method to implement more complex user verification logic:```pythonfrom aiohttp import webfrom aiohttp_basicauth import BasicAuthMiddlewareclass CustomBasicAuth(BasicAuthMiddleware):    async def check_credentials(self, username, password, request):        # here, for example, you can search user in the database by passed `username` and `password`, etc.        return username == 'user' and password == 'password'auth = CustomBasicAuth()app = web.Application(middlewares=[auth])web.run_app(app, host='127.0.0.1', port=80)```</longdescription>
</pkgmetadata>