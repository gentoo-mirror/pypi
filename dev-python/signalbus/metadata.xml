<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SignalbusSimple and small library to broadcast signals with typing support[![Tests Status](https://github.com/klen/signalbus/workflows/tests/badge.svg)](https://github.com/klen/signalbus/actions/workflows/tests.yml)[![Publish Status](https://github.com/klen/signalbus/workflows/publish/badge.svg)](https://github.com/klen/signalbus/actions/workflows/publish.yml)Features:* Async support* Full typing support (get errors)* Small (around 100 lines of code) and fast* You may incapsulate some logic inside a signal## Why another library?Other signals library don't have a good typing support.## Installation    $ pip install signalbus## Usage```pythonfrom signalbus import create_signal# Create a signals# Just define a (generator) function and wrap it with `signalbus.create_signal`@create_signaldef order_changed(order_status: str, *, order_id: int):  #    &quot;&quot;&quot;    The function contains the signal code.    Feel free to do some operations before and after the sending.    Pay attention to the function's params    All receivers for the signal have to be able to accept the same params.    Typing libraries will show you errors.    &quot;&quot;&quot;    # first, you have to get `emit` to be able to send the signal    emit = yield    # then send the signal to the receivers (you may want to skip it in some cases)    res: list = emit(order_status, order_id=order_id)    # you may check the results, do some additional work, etc# Register a receiver for the signal# The receiver has to have the same params (types will be checked)@order_changed.registerdef notify_user(order_status: str, *, order_id: int):    ...@order_changed.registerdef update_stats(order_status: str, *, order_id: int):    ...# To send the signal just call it like a function with all required paramsorder_changed('done', order_id=42)```### Async SignalsEverything is almost the same except async/await```pythonfrom signalbus import create_signal@create_signalasync def order_changed(order_status: str, *, order_id: int):    emit = yield    res: list = await emit(order_status, order_id=order_id)# Receiver has to be async too@order_changed.registerasync def notify_user(order_status: str, *, order_id: int):    ...@order_changed.registerasync def update_stats(order_status: str, *, order_id: int):    ...# Do not forget to await the signalawait order_changed('done', order_id=42)```### Filter signals by argumentsYou may set any arguments to filter a receiver with the register function. Thereceiver would be called only when corresponding arguments match.Let's consider the following example:```pythonfrom signalbus import create_signal@create_signalasync def order_changed(order_status: str, *, order_id: int):    emit = yield    res: list = await emit(order_status, order_id=order_id)# pay attention to that we define an attribute in register@order_changed.register('done')async def notify_user(order_status: str, *, order_id: int):    ...@order_changed.registerasync def update_stats(order_status: str, *, order_id: int):    ...await order_changed('done', order_id=42)  # both the receivers above will be calledawait order_changed('cancel', order_id=42)  # only update stats will be called```### Mypy supportFor better typing with mypy, you have to set correct returning type for your signals:```pythonfrom signalbus import create_signalfrom typing import Generator, AsyncGenerator@create_signaldef sync_signal() -&gt; Generator:    emit = yield    res: list = await emit()@create_signalasync def async_signal() -&gt; AsyncGenerator:    emit = yield    res: list = await emit()```No need to do it with Pyright, because the Pyright calculates the types correctly## Bug trackerIf you have any suggestions, bug reports or annoyances please report them tothe issue tracker at https://github.com/klen/signalbus/issues## ContributingDevelopment of The library happens at: https://github.com/klen/signalbus##  LicenseLicensed under a [MIT license](https://opensource.org/license/mit/)</longdescription>
</pkgmetadata>