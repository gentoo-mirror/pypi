<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Plac: Parsing the Command Line the Easy Way`plac` is a Python package that can generate command line parametersfrom function signatures.`plac` works on Python 2.6 through all versions of Python 3.`plac` has no dependencies beyond modules already present in the Pythonstandard library.`plac` implements most of its functionality in a single file that may beincluded in your source code.# QuickstartHere is how to turn a script that does some processing on a databasetable into a full, command-line enabled program:```python# updatedb.pyfrom datetime import datetimedef main(dsn, table='product', today=datetime.today()):    &quot;Do something on the database&quot;    print(dsn, table, today)if __name__ == '__main__':    import plac    plac.call(main)```Here is the help message automatically generated by plac:```python updatedb.py -h```prints:```usage: updatedb.py [-h] dsn [table] [today]Do something on the databasepositional arguments:  dsn  table       [product]  today       [2019-07-28 07:18:20.054708]optional arguments:   -h, --help  show this help message and exit```# Next stepsThe automatic inference takes us only so far, usually we need morecontrol over the parameters. `plac` offers simple decorator helpers forpositional, option and flag type parameters:```pythonimport placfrom pathlib import Path@plac.pos('model', &quot;Model name&quot;, choices=['A', 'B', 'C'])@plac.opt('output_dir', &quot;Optional output directory&quot;, type=Path)@plac.opt('n_iter', &quot;Number of training iterations&quot;, type=int)@plac.flg('debug', &quot;Enable debug mode&quot;)def main(model, output_dir='.', n_iter=100, debug=False):    &quot;&quot;&quot;A script for machine learning&quot;&quot;&quot;    passif __name__ == '__main__':    plac.call(main)```Running the script with `$ python example.py -h` will give you thefollowing help message: :```usage: example.py [-h] [-o .] [-n 100] [-d] {A,B,C}A script for machine learningpositional arguments:  {A,B,C}               Model nameoptional arguments:  -h, --help            show this help message and exit  -o ., --output-dir .  Optional output directory  -n 100, --n-iter 100  Number of training iterations  -d, --debug           Enable debug mode```# Quick referenceThe following decorator reference helps you recall what parameters arevalid for each decorator type:```python# Positional parameters.def pos(arg, help=None, type=None, choices=None, metavar=None):# Option parameters.def opt(arg, help=None, type=None, abbrev=None, choices=None, metavar=None):# Flag parameters.def flg(arg, help=None, abbrev=None):```Notably, the main functionality of `plac` is implemented in a singlemodule called `plac_core.py` that, if necessary, may be included anddistributed with your source code thus reducing external dependencies inyour code.# Avoiding name clashesPython syntax, or your variable naming may impose constraints on whatwords may be used as parameters. To circumvent that limitation append atrailing underscore to the name. `plac` will strip that underscore fromthe command line parameter name:```pythonimport plac@plac.flg('list_')  # avoid clash with builtin@plac.flg('yield_')  # avoid clash with keyword@plac.opt('sys_')  # avoid clash with a very common namedef main(list_, yield_=False, sys_=100):    print(list_)    print(yield_)    print(sys_)if __name__ == '__main__':    plac.call(main)```produces the usage:```usage: example13.py [-h] [-l] [-y] [-s 100]optional arguments:  -h, --help         show this help message and exit  -l, --list  -y, --yield        [False]  -s 100, --sys 100  [100]```# Variable argumentsYour `plac` enabled program may accept multiple positional arguments and even additional key=value pairs:```pythonimport plac@plac.pos('args', help=&quot;words&quot;)@plac.opt('kwds', help=&quot;key=value&quot;, )def main(*args, **kwds):    print(args)    print(kwds)if __name__ == '__main__':    plac.call(main)```the usage will be:```usage: example15.py [-h] [args ...] [kwds ...]positional arguments:  args        words  kwds        key=valueoptional arguments:  -h, --help  show this help message and exit```when running it as:    python example15.py A B x=10 y=20the program prints:    ('A', 'B')    {'x': '10', 'y': '20'}# DocumentationIn addition, plac can do a lot more, up to the creation ofdomain-specific languages(!). See the full documentation for moredetails.-   &lt;https://plac.readthedocs.io/en/latest/&gt;# InstallationIf you wish to install the package do    pip install placIf you prefer to install the full distribution from source, includingthe documentation, download the[tarball](https://pypi.org/project/plac/#files), unpack it and run    python setup.py install# TestingRun    python doc/test_plac.pyYou will see several apparent errors, but this is right, since the testsare checking for several error conditions. The important thing is thatyou get at the a line like`Executed XX tests OK`# Code-   &lt;https://github.com/ialbert/plac&gt;Author: Michele Simionato, &lt;michele.simionato@gmail.com&gt;Maintainer: Istvan Albert, &lt;istvan.albert@gmail.com&gt;# Issues-   &lt;https://github.com/ialbert/plac/issues&gt;# LicenseBSD License</longdescription>
</pkgmetadata>