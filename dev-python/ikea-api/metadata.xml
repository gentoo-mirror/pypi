<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Client for several IKEA APIs.[![Test](https://github.com/vrslev/ikea-api-client/actions/workflows/test.yml/badge.svg)](https://github.com/vrslev/ikea-api-client/actions/workflows/test.yml)[![Python](https://img.shields.io/pypi/pyversions/ikea_api?label=Python)](https://pypi.org/project/ikea_api)[![Downloads](https://img.shields.io/pypi/dm/ikea_api?label=Downloads&amp;color=blueviolet)](https://pypi.org/project/ikea_api)# FeaturesWith this library you can access following IKEA's APIs:- Cart,- Home Delivery and Collect Services (actually, Order Capture),- Items info (3 different services),- Purchases (history and order info),- Search,- Stock.Also the package:- Is **backend agnostic**: choose HTTP library you want (async, too!),- Is **fully typed and tested**,- Has optional wrappers around some APIs based on Pydantic.# Installation```bashpip install ikea_api```- Use [httpx](https://www.python-httpx.org) â€” awesome async HTTP library â€”Â as backend:```bashpip install &quot;ikea_api[httpx]&quot;```- Use [requests](https://docs.python-requests.org)Â as backend:```bashpip install &quot;ikea_api[requests]&quot;```- Use wrappers:```bashpip install &quot;ikea_api[wrappers]&quot;```- Install everything:```bashpip install &quot;ikea_api[all]&quot;```# Usage_ikea_api_ is unusual API client. It decouples I/O from logic for easier testing and maintenance. As a bonus, you can use literally _any_ HTTP library.Let's have a look at how to work with ikea_api.```pythonimport ikea_api# Constants like country, language, base urlconstants = ikea_api.Constants(country=&quot;us&quot;, language=&quot;en&quot;)# Search APIsearch = ikea_api.Search(constants)# Search endpoint with prepared dataendpoint = search.search(&quot;Billy&quot;)```As you can see, nothing happened up to this point. Code suggests that we already should get the result of the search but we don't. What happened is `search()` returned a data class that contains information about endpoint that can be interpreted by an endpoint runner. There are two built-in: for [requests](https://docs.python-requests.org) (sync) and [httpx](https://www.python-httpx.org) (async), but you can easily write one yourself.Here's how you would use _requests_ one:```pythonikea_api.run(endpoint)```And _httpx_ one:```pythonawait ikea_api.run_async(endpoint)````ikea_api.run_async()` is async function, so you have to &quot;await&quot; it or run using `asyncio.run()`.## Endpoints reference### ðŸ”‘ AuthorizationFirst time you open ikea.com, guest token is being generated and stored in cookies. Same thing must be done in here before using any endpoint.This token expires in 30 days.```pythonikea_api.Auth(constants).get_guest_token()```Previously you could login as user (with login and password), but now there's very advanced telemetry that I wouldn't be able to solve in hundred years ðŸ¤ª### ðŸ›’ CartWith this endpoint you can do everything you can using IKEA's frontend:```pythoncart = ikea_api.Cart(constants, token=...)```- Show the cart```pythoncart.show()```- Clear it```pythoncart.clear()```- Add, update and delete items```pythoncart.add_items({&quot;30457903&quot;: 1})  # { item_code: quantity }cart.update_items({&quot;30457903&quot;: 5})cart.remove_items([&quot;30457903&quot;])```- Set and clear coupon```pythoncart.set_coupon(...)cart.clear_coupon()```- and even copy another user's cart.```pythoncart.copy_items(source_user_id=...)```You can edit your user's actual cart if you use authorized token (copy-paste from cookies).&gt; ðŸ’¡Â There's wrapper that clears current cart and adds items with error handling: if requested item doesn't exist, the function just skips it and tries again.&gt;&gt; ```python&gt; ikea_api.add_items_to_cart(  # Function returns items that can't be added. In this case: ['11111111']&gt;     cart=cart,&gt;     items={&gt;         &quot;30457903&quot;: 1,&gt;         &quot;11111111&quot;: 2,  # invalid item that will be skipped&gt;     },&gt; )&gt; ```### ðŸš› Order CaptureCheck pickup or delivery availability. If you need to know whether items are available _in stores_, use [Item availability endpoint](#%F0%9F%9F%A2-item-availability) or [ikea-availability-checker](https://github.com/Ephigenia/ikea-availability-checker).```pythonorder = ikea_api.OrderCapture(constants, token=token)cart_show = run(cart.show())items = ikea_api.convert_cart_to_checkout_items(cart_show)checkout_id = run(order.get_checkout(items))service_area_id = run(    order.get_service_area(        checkout_id,        zip_code=&quot;02215&quot;,        state_code=&quot;MA&quot;,  # pass State Code only if your country has them    ))home_services = run(order.get_home_delivery_services(checkout_id, service_area_id))collect_services = run(    order.get_collect_delivery_services(checkout_id, service_area_id))```&gt; ðŸ’¡Â You can use wrapper to add items to cart (clearing cart before and handling unknown item errors if they appear) and parse response in nice Pydantic models:&gt;&gt; ```python&gt; services = await ikea_api.get_delivery_services(&gt;     constants=constants,&gt;     token=...,&gt;     items={&gt;         &quot;30457903&quot;: 1,&gt;         &quot;11111111&quot;: 2,  # invalid item that will be skipped&gt;     },&gt;     zip_code=&quot;101000&quot;,&gt; )&gt; services.delivery_options  # List of parsed delivery services&gt; services.cannot_add  # ['11111111']&gt; ```### ðŸ“¦ Purchases```pythonpurchases = ikea_api.Purchases(constants, token=token)```#### HistoryThis method requires authentication, so if you don't have authorized token, it won't work.```pythonpurchases.history()# Get all purchases:purchases.history(take=10000)# Pagination:purchases.history(take=10, skip=1)```&gt; ðŸ’¡ Get parsed response with the wrapper:&gt;&gt; ```python&gt; ikea_api.get_purchase_history(purchases)  # Returns a list of parsed purchases&gt; ```#### Order info```pythonpurchases.order_info(order_number=..., email=...)# If you have authorized token, you can drop email:purchases.order_info(order_number=&quot;111111111&quot;)# The method also has other params but they're mostly internal:purchases.order_info(    order_number=...,    email=...,    queries=...,  # Queries that will be included in request, combine any of: [&quot;StatusBannerOrder&quot;, &quot;CostsOrder&quot;, &quot;ProductListOrder&quot;]. By default, all of them are included.    # Params below are relevant to ProductListOrder    skip_products=...,    skip_product_prices=...,    take_products=...,)```&gt; ðŸ’¡ Get parsed response with the wrapper:&gt;&gt; ```python&gt; ikea_api.get_purchase_info(  # Returns parsed purchase object. Items are not listed.&gt;    purchases=purchases,&gt;    order_number=...,&gt;    email=...,&gt; )&gt; ```### ðŸª‘ Item infoGet item specification by item code (product number or whatever). There are 3 endpoints to do this because you can't get all the data about all the items using only one endpoint.```pythoniows_items = ikea_api.IowsItems(constants)iows_items.get_items([&quot;30457903&quot;])ingka_items = ikea_api.IngkaItems(constants)ingka_items.get_items([&quot;30457903&quot;])pip_item = ikea_api.PipItem(constants)pip_item.get_item(&quot;30457903&quot;)```&gt; ðŸ’¡ You probably won't want to use raw APIs when there's convenient &quot;smart&quot; wrapper that combines them all and parses basic info:&gt;&gt; ```python&gt; ikea_api.get_items([&quot;30457903&quot;])&gt; ```### ðŸŸ¢ Item availabilityGet availability by item code (product number or whatever).```pythonstock = ikea_api.Stock(constants)stock.get_stock(&quot;30457903&quot;)```### ðŸ”Ž SearchSearch for products in the product catalog by product name. Optionally also specify a maximum amount of returned search results (defaults to 24) and types of required search results.```pythonsearch = ikea_api.Search(constants)search.search(&quot;Billy&quot;)# Retrieve 10 search results (default is 24)search.search(&quot;Billy&quot;, limit=10)# Configure search results typessearch.search(    &quot;Billy&quot;,    types=...,  # Combine any of: [&quot;PRODUCT&quot;, &quot;CONTENT&quot;, &quot;PLANNER&quot;, &quot;REFINED_SEARCHES&quot;, &quot;ANSWER&quot;])```### ðŸ›  Utilities#### Parse item codesParse item codes from string or list.```pythonassert ikea_api.parse_item_codes(&quot;111.111.11&quot;) == [&quot;11111111&quot;]assert ikea_api.parse_item_codes(&quot;11111111, 222.222.22&quot;) == [&quot;11111111&quot;, &quot;22222222&quot;]assert ikea_api.parse_item_codes(&quot;111&quot;) == []```#### Format item codeParse item code and format it.```pythonassert ikea_api.format_item_code(&quot;11111111&quot;) == &quot;111.111.11&quot;assert ikea_api.format_item_code(&quot;111-111-11&quot;) == &quot;111.111.11&quot;assert ikea_api.format_item_code(&quot;111.111.11&quot;) == &quot;111.111.11&quot;```</longdescription>
</pkgmetadata>