<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://polymer-molecular-dynamics.netlify.app/&quot;&gt;&lt;img src=&quot;https://github.com/Ramprasad-Group/Polymer-Molecular-Dynamics/raw/main/website/static/img/logo-with-text.svg&quot; alt=&quot;PMD&quot; width=&quot;450rem&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;Polymer Molecular Dynamics toolkit, easy to learn, fast to code, ready for polymer property production&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Ramprasad-Group/Polymer-Molecular-Dynamics/actions/workflows/main.yml/badge.svg?event=push&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/Ramprasad-Group/Polymer-Molecular-Dynamics/actions/workflows/main.yml/badge.svg?event=push&quot; alt=&quot;GitHub Workflow&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://coveralls.io/github/Ramprasad-Group/Polymer-Molecular-Dynamics&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://coveralls.io/repos/github/Ramprasad-Group/Polymer-Molecular-Dynamics/badge.svg?service=github&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.python.org/pypi/pmd&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;http://img.shields.io/pypi/v/pmd.svg&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/pmd&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/pmd&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pepy.tech/project/pmd&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://pepy.tech/badge/pmd&quot; alt=&quot;Package download&quot;&gt;&lt;/a&gt;&lt;/p&gt;---**Documentation**: &lt;a href=&quot;https://polymer-molecular-dynamics.netlify.app&quot; target=&quot;_blank&quot;&gt;https://polymer-molecular-dynamics.netlify.app&lt;/a&gt;**Source Code**: &lt;a href=&quot;https://github.com/Ramprasad-Group/Polymer-Molecular-Dynamics&quot; target=&quot;_blank&quot;&gt;https://github.com/Ramprasad-Group/Polymer-Molecular-Dynamics&lt;/a&gt;---PMD is a modern, fast, python framework for building LAMMPS input and data files for predicting polymer propertiesThe key properties are:- **Glass transition temperature (Tg)** - [[Guide](http://polymer-molecular-dynamics.netlify.app/docs/guides/glass-transition-temperature)] [[Scripts](https://github.com/Ramprasad-Group/Polymer-Molecular-Dynamics/tree/main/scripts/Tg)]- **Gas diffusivity** - [[Guide](http://polymer-molecular-dynamics.netlify.app/docs/guides/gas-diffusivity)] [[Scripts](https://github.com/Ramprasad-Group/Polymer-Molecular-Dynamics/tree/main/scripts/Gas_diffusivity)]- **Solvent diffusivity** - [[Guide](http://polymer-molecular-dynamics.netlify.app/docs/guides/solvent-diffusivity)] [[Scripts](https://github.com/Ramprasad-Group/Polymer-Molecular-Dynamics/tree/main/scripts/Solvent_diffusivity)]- **Viscosity** - [[Guide](https://polymer-molecular-dynamics.netlify.app/docs/guides/viscosity)] [[Scripts](https://github.com/Ramprasad-Group/Polymer-Molecular-Dynamics/tree/main/scripts/Shear_deformation)]- **Young's modulus** and **tensile strengths** - [[Guide](https://polymer-molecular-dynamics.netlify.app/docs/guides/mechanical-properties)] [[Scripts](https://github.com/Ramprasad-Group/Polymer-Molecular-Dynamics/tree/main/scripts/Tensile_deformation)]- **Thermal conductivity** - [[Scripts](https://github.com/Ramprasad-Group/Polymer-Molecular-Dynamics/tree/main/scripts/HeatFluxMeasurement)]- **Solubility** - Planned- **Melting temperature (Tm)** - Planned## Installation```bashpip install pmd```## ExampleBelow is an example where we use PMD to generate LAMMPS data and input files for Tg measurement with a list of SMILES strings.### From a python script#### example.py```pythonimport pmd# A list of polymer SMILES strings to create simulations forsmiles_list = ['*CC*', '*CC(*)CC', '*CC(*)CCCC', '*CC(*)c1ccccc1']for smiles in smiles_list:    # Define polymer and system specs    syst = pmd.System(smiles=smiles,                      density=0.8,                      natoms_total=5000,                      natoms_per_chain=150,                      builder=pmd.EMC(force_field='pcff'))    # Customize LAMMPS simulation    lmp = pmd.Lammps(read_data_from=syst,                     procedures=[                         pmd.Minimization(min_style='cg'),                         pmd.Equilibration(Teq=600, Tmax=800),                         pmd.TgMeasurement(Tinit=600, Tfinal=200)                     ])    # Create job scheduler settings    job = pmd.Torque(run_lammps=lmp,                     jobname=smiles,                     project='Your-project-id',                     nodes=2,                     ppn=24,                     walltime='48:00:00')    # Generate all necessary files at each SMILES folder    run = pmd.Pmd(system=syst, lammps=lmp, job=job)    run.create(output_dir=smiles, save_config=True)```### From the command linePMD can generate config file in YAML format out of the box, which helps you keep track of all the parameters used for each simulation. At the same time, you can build PMD systems directly via the config file from the command line. For example, run the `pmd-load` command with the following `config.yaml` to get exact same setup as the above example python script (but only for '\*CC\*').```bash$ pmd-load config.yaml [-o output_dir]```#### config.yaml```yamlpmd.System:  smiles: &quot;*CC*&quot;  density: 0.8  builder:    pmd.EMC:      force_field: pcff  natoms_total: 5000  natoms_per_chain: 150  data_fname: data.lmpspmd.Lammps:  read_data: data.lmps # This file name has to match data_fname if build from a yaml file  get_functional_form_from: # A PMD Builder has to be provided if build from a yaml file    pmd.EMC:      force_field: pcff  procedures:    - pmd.Minimization:        min_style: cg    - pmd.Equilibration:        Teq: 600        Tmax: 800    - pmd.TgMeasurement:        Tinit: 600        Tfinal: 200  lmp_input_fname: lmp.inpmd.Torque:  run_lammps: lmp.in # This file name has to match the above lmp_input_fname if build from a yaml file  jobname: &quot;*CC*&quot;  project: Your-project-id  nodes: 2  ppn: 24  walltime: &quot;48:00:00&quot;  job_fname: job.pbs```</longdescription>
</pkgmetadata>