<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PeachDB&lt;h3 align=&quot;center&quot;&gt;&lt;strong&gt;PeachDB - the AI-First, Embeddings Database&lt;/strong&gt;&lt;/h3&gt;&lt;h4 align=&quot;center&quot;&gt;Build memory for your AI products in &lt;strong&gt;minutes!&lt;/strong&gt;&lt;/h4&gt;&lt;br/&gt;**Our core API has 4 functions**```pythonfrom peachdb import PeachDB# Create a new PeachDB instance or reference an existing onedb = PeachDB(    project_name=&quot;my_app&quot;,    embedding_generator=&quot;imagebind&quot;,  # &quot;imagebind&quot; or &quot;sentence_transformer_L12&quot;    embedding_backend=&quot;exact_cpu&quot;,  # &quot;exact_cpu&quot;, &quot;exact_gpu&quot;, or &quot;approx&quot;    distance_metric=&quot;cosine&quot;,  # &quot;cosine&quot; or &quot;l2&quot;)# Auto-compute &amp; upsert embeddings at scale using the specified `embedding_generator` model on Modaldb.upsert_text(  # or &quot;upsert_image&quot; or &quot;upsert_audio&quot;    csv_path=&quot;/path/to/local/csv&quot;,  # or &quot;s3://path/to/csv&quot;    column_to_embed=&quot;foo&quot;,  # column values can either be string or public URI to image/audio    id_column_name=&quot;id&quot;,    embeddings_output_s3_bucket_uri=None,  # required when using S3 URI for `csv_path`    max_rows=None,  # or N to process N rows)# Query top 5 similar resultsids, distances, results_df = db.query(    query_input='An example query',  # or path to an image/audio file    modality='text',  # &quot;text&quot;, &quot;image&quot;, or &quot;audio&quot;    top_k=5)# Deploy database as a publicly accessible FastAPI server# GET /query?query_input='An example query'&amp;modality=[text|image|audio]&amp;top_k=5 to fetch 5 most similar resultsdb.deploy()```## Why another embedding database?We've streamlined the entire end-to-end process of creating, storing, and retrieving embeddings, making it developer-friendly, seamless, and cost-effective. You no longer have to build custom pipelines or fret over hardware setups &amp; scalability issues. PeachDB ensures you can get started within minutes, leaving the worries of cost optimization and scale to us.Our key features include:* **Automated, cost-effective &amp; large-scale embedding computation**: We leverage serverless GPU functions (through [Modal](https://modal.com/)) to compute embeddings on a large scale efficiently and affordably.    - For instance, we processed the [Kaggle 5M song lyrics dataset](https://www.kaggle.com/datasets/nikhilnayak123/5-million-song-lyrics-dataset?resource=download&amp;select=ds2.csv) in just *12 minutes at a cost of $4.90*, using sentence transformers!    - We've developed Modal wrappers for:        - [Sentence Transformer L12](https://huggingface.co/sentence-transformers/all-MiniLM-L12-v2)        - [ImageBind](https://github.com/facebookresearch/ImageBind),        - *Coming soon*, support for:            - Open-source embedding models such as [OpenCLIP](https://github.com/mlfoundations/open_clip), [Microsoft E5-v2](https://arxiv.org/pdf/2212.03533.pdf), and more.            - Multi-threaded [OpenAI](https://platform.openai.com/docs/guides/embeddings) embedding calculation.    - *Coming soon*: Bring your own embeddings.    - *Coming soon*: Custom embedding functions for even more flexibility.* **Multimodality**: Native support for data with mixture of modalities (such as image/audio/video).* **Highly Customizable**: PeachDB allows you to tailor its features to your needs. You can customize:    - Embedding computation: as described above.    - Backend: choose between `exact_cpu` (numpy), `exact_gpu` (torch), or `approx` (HNSW).    - Distance metrics: `cosine` or `l2`.* **Effortless Deployment**: Deploy PeachDB as a publicly available server with a single API. No need to worry about nginx or SSL certs.    - *Coming soon*: Managed, scalable deployment.* **Consistent API**: Experience the same API across all environments - dev, test, and prod.* **Open Source**: Apache 2.0.## ExampleBelow is a walkthrough of creating a web server for a music recommendation app. To power the app, we are using the [Kaggle 5M song lyric dataset](https://www.kaggle.com/datasets/nikhilnayak123/5-million-song-lyrics-dataset?resource=download&amp;select=ds2.csv)- Ssh into your remote instance (doesn't need GPU)- Create &amp; activate a new conda environment `conda create -n spoti_vibe python=3.10` &amp; `conda activate spoti_vibe`- Install PeachDB: `pip install peachdb`- Setup [Modal](https://modal.com)    - Create an account at [modal.com](https://modal.com)    - Install the modal-client package: `pip install modal-client`    - Setup token: `modal token new`- (optional: for AWS S3) PeachDB accepts local &amp; S3 paths to datasets for embedding computation. To use S3 URIs, ensure you've installed the `aws` cli and run `aws configure`. The credentials should have read &amp; write access to the relevant bucket you plan to use.- `mkdir spoti_vibe/`- Create a new module inside the directory `server.py`- Add the following code    ```python    from peachdb import PeachDB    import os    # Fetch the username &amp; key by creating a new API token at https://www.kaggle.com/settings    os.environ[&quot;KAGGLE_USERNAME&quot;] = None  # set user name    os.environ[&quot;KAGGLE_KEY&quot;] = None  # set key    import kaggle  # make sure you've run `pip install kaggle`    kaggle.api.authenticate()    # It can take a few mins to download depending on the network speed    kaggle.api.dataset_download_files(&quot;nikhilnayak123/5-million-song-lyrics-dataset&quot;, path=&quot;.&quot;, unzip=True)    db = PeachDB(        project_name=&quot;spoti_vibe&quot;,        distance_metric=&quot;cosine&quot;,        embedding_backend=&quot;exact_cpu&quot;,        embedding_generator=&quot;sentence_transformer_L12&quot;,    )    db.upsert_text(        csv_path=&quot;./ds2.csv&quot;,  # dataset name as observed on Kaggle        column_to_embed=&quot;lyrics&quot;,        id_column_name=&quot;id&quot;,    )    db.deploy()  # Public URL will be printed to console    ```And that's it! You should now have a publicly available server that can listen to query requests from the user on: &lt;br/&gt;`GET &lt;PUBLIC_URL&gt;/query?text='Happy, upbeat summer'&amp;top_k=5`## Use-cases- Build web apps like - [clip.audio](https://www.clip.audio/) &amp; [awesome-movies.life](https://awesome-movies.life/)- Build ChatGPT for X- Build ChatGPT plugins## FAQsQ) How can I delete a project?Run `db.delete(project_name=&quot;my_app&quot;)`## Get InvolvedWe welcome PR contributors and ideas for how to improve the project.## License[Apache 2.0](./LICENSE)</longdescription>
</pkgmetadata>