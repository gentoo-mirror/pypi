<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/nschloe/tuna&quot;&gt;&lt;img alt=&quot;tuna&quot; src=&quot;https://nschloe.github.io/tuna/logo-with-text.svg&quot; width=&quot;50%&quot;&gt;&lt;/a&gt;  &lt;p align=&quot;center&quot;&gt;Performance analysis for Python.&lt;/p&gt;&lt;/p&gt;[![PyPi Version](https://img.shields.io/pypi/v/tuna.svg?style=flat-square)](https://pypi.org/project/tuna)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/tuna.svg?style=flat-square)](https://pypi.org/pypi/tuna/)[![GitHub stars](https://img.shields.io/github/stars/nschloe/tuna.svg?style=flat-square&amp;logo=github&amp;label=Stars&amp;logoColor=white)](https://github.com/nschloe/tuna)[![Downloads](https://pepy.tech/badge/tuna/month?style=flat-square)](https://pepy.tech/project/tuna)&lt;!--[![PyPi downloads](https://img.shields.io/pypi/dm/tuna.svg?style=flat-square)](https://pypistats.org/packages/tuna)--&gt;[![Discord](https://img.shields.io/static/v1?logo=discord&amp;label=chat&amp;message=on%20discord&amp;color=7289da&amp;style=flat-square)](https://discord.gg/hnTJ5MRX2Y)[![gh-actions](https://img.shields.io/github/workflow/status/nschloe/tuna/ci?style=flat-square)](https://github.com/nschloe/tuna/actions?query=workflow%3Aci)[![LGTM](https://img.shields.io/lgtm/grade/python/github/nschloe/tuna.svg?style=flat-square)](https://lgtm.com/projects/g/nschloe/tuna)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)tuna is a modern, lightweight Python profile viewer inspired by[SnakeViz](https://github.com/jiffyclub/snakeviz). It handles runtime and importprofiles, has minimal dependencies, uses [d3](https://d3js.org/) and[bootstrap](https://getbootstrap.com/), and avoids[certain](https://github.com/jiffyclub/snakeviz/issues/111)[errors](https://github.com/jiffyclub/snakeviz/issues/112) present in SnakeViz (seebelow) and is faster, too.Create a runtime profile with```python -mcProfile -o program.prof yourfile.py```or an [importprofile](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPROFILEIMPORTTIME)with```python -X importtime yourfile.py 2&gt; import.log```and show it with```tuna program.prof```![](https://nschloe.github.io/tuna/screencast.gif)### Why tuna doesn't show the whole call treeThe whole timed call tree _cannot_ be retrieved from profile data. Python developersmade the decision to only store _parent data_ in profiles because it can be computedwith little overhead. To illustrate, consider the following program.```pythonimport timedef a(t0, t1):    c(t0)    d(t1)def b():    a(1, 4)def c(t):    time.sleep(t)def d(t):    time.sleep(t)if __name__ == &quot;__main__&quot;:    a(4, 1)    b()```The root process (`__main__`) calls `a()` which spends 4 seconds in `c()` and 1 secondin `d()`. `__main__` also calls `b()` which calls `a()`, this time spending 1 second in`c()` and 4 seconds in `d()`. The profile, however, will only store that `c()` spent atotal of 5 seconds when called from `a()`, and likewise `d()`. The information that theprogram spent more time in `c()` when called in `root -&gt; a() -&gt; c()` than when called in`root -&gt; b() -&gt; a() -&gt; c()` is not present in the profile.tuna only displays the part of the timed call tree that can be deduced from the profile.SnakeViz, on the other hand, tries to construct the entire call tree, but ends upproviding lots of _wrong_ timings.| ![](https://nschloe.github.io/tuna/snakeviz-example-wrong.png) |           ![](https://nschloe.github.io/tuna/foo.png)           || :------------------------------------------------------------: | :-------------------------------------------------------------: ||                  SnakeViz output. **Wrong.**                   | tuna output. Only shows what can be retrieved from the profile. |### Installationtuna is [available from the Python Package Index](https://pypi.org/project/tuna/), sosimply do```pip install tuna```to install.### TestingTo run the tuna unit tests, check out this repository and type```pytest```### IPython magicstuna includes a `tuna` line / cell magic which can be used as a drop-in replacement forthe `prun` magic. Simply run `%load_ext tuna` to load the magic and then call it like`%tuna sleep(3)` or```python%%tunasleep(3)````prun` is still used to do the actual profiling and then the results are displayed inthe notebook.### DevelopmentAfter forking and cloning the repository, make sure to run `make dep` to installadditional dependencies (bootstrap and d3) which aren't stored in the repo.### LicenseThis software is published under the [GPLv3 license](https://www.gnu.org/licenses/gpl-3.0.en.html).</longdescription>
</pkgmetadata>