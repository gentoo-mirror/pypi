<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># A toolchain to parse, analyze, and format Zeek scripts[![Build and test](https://github.com/zeek/zeekscript/actions/workflows/build_wheels.yml/badge.svg)](https://github.com/zeek/zeekscript/actions/workflows/build_wheels.yml)`zeekscript` is a Python package that provides tooling to operate on [Zeek](https://zeek.org)scripts. `zeekscript` comes with command line tools that make common tasks accessible,but its functionality is just an `import zeekscript` away in your own Python tools.`zeekscript` is powered by [Tree-Sitter](https://tree-sitter.github.io/tree-sitter/),its [Python bindings](https://github.com/tree-sitter/py-tree-sitter), and our[tree-sitter-zeek](https://github.com/zeek/tree-sitter-zeek) grammar.## Supported platforms and Python versions`zeekscript` supports Python 3.7+ on Linux, MacOS, and Windows. We recommendCPython. PyPy looks prone to crashing on Windows and MacOS, and we're notcurrently building PyPy wheels on those platforms. (We've not investigated PyPyin depth and feedback is welcome.)## InstallationTo install our ready-made Python wheels, say:    $ pip install zeekscriptFor a full list of available builds, you can check out the[PyPI downloads](https://pypi.org/project/zeekscript/#files) or take a look at our[CI build matrix](https://github.com/zeek/zeekscript/blob/main/.github/workflows/build_wheels.yml).The `zeekscript` package includes native code (the compiled [tree-sitter Zeekgrammar](https://github.com/zeek/tree-sitter-zeek)). We strive to provide wheelsfor popular platforms and Python versions. In case your setup isn't covered, theinstallation process will build the package locally on your system, for whichsome dependencies need to be available. Read on for details, and feel free tofile a ticket detailing your setup.### Building from sourceIf our build matrix doesn't cover your platform and Python version, or if you'dsimply like to build and install the `zeekscript` package yourself, you need toprovide two dependencies:* The [tree-sitter Python bindings](https://pypi.org/project/tree-sitter/), available via    $ pip install tree_sitter* A C compiler, such as `gcc` or `clang`.To obtain the sources, please clone this repository. **Note**: make sure toclone recursively (`git clone --recurse-submodules`), since this pulls in theneeded Zeek grammar. We don't provide source packages on Github, but allreleases are tagged in `git`.For installation from local sources, say:    $ pip install .The `zeekscript` package doesn't implement the Zeek grammar compilation itself,it outsources it to the `tree-sitter` Python bindings, which provide thisability directly from Python. `zeekscript` merely initiates compilation duringthe package build. See our[setup.py](https://github.com/zeek/zeekscript/blob/main/setup.py) for details.### TestingThe package comes with a testsuite. To run it, say    $ makefrom the toplevel. If `pylint` is available on your system, testing includes a`pylint` run to check for problems. For details on the tests, take a look at the`tests` directory.## Usage### zeek-formatMost significantly, the package includes `zeek-format`, a tool that formats Zeekscripts. Our philosophy is similar to `gofmt` and the opposite of`clang-format`: there is only one way to layout Zeek scripts, and this toolprovides it. Accordingly, it features zero options for tweaking the formatting:```$ zeek-format --helpusage: zeek-format [-h] [--version] [--inplace] [--recursive] [FILES ...]A Zeek script formatterpositional arguments:  FILES            Zeek script(s) to process. Use &quot;-&quot; to specify stdin as a filename. Omitting filenames entirely implies                   reading from stdin.options:  -h, --help       show this help message and exit  --version, -v    show version and exit  --inplace, -i    change provided files instead of writing to stdout  --recursive, -r  process *.zeek files recursively when provided directories instead of files. Requires --inplace.```Parsing errors are not fatal, and `zeek-format` does its best to continueformatting in the presence of errors. When it encounters parser errors,`zeek-format` exits with a non-zero exit code and reports the trouble itencountered to stderr.```$ echo 'event  foo( a:count ) {print  &quot;hi&quot; ; }' | zeek-formatevent foo(a: count)        {        print &quot;hi&quot;;        }```To format entire directory trees, combine `--inplace` and `--recursive`, andpoint it at a directory:```$ cd zeek$ zeek-format -ir scripts430 files processed successfully```### zeek-scriptThe `zeek-script` command is the Swiss army knife in the toolbox: it providesaccess to a range of script-processing tools (including formatting) viasubcommands. (Okay, so far &quot;range&quot; == two, but expect that to grow in the future.)```$ zeek-script --helpusage: zeek-script [-h] [--version] {format,parse} ...A Zeek script analyzeroptions:  -h, --help      show this help message and exit  --version, -v   show version and exitcommands:  {format,parse}  See `zeek-script &lt;command&gt; -h` for per-command usage info.    format        Format/indent Zeek scripts    parse         Show Zeek script parse tree with parser metadata.```The `parse` command renders its script input as a parse tree. It resembles`tree-sitter parse`, but shows more context about the relevant snippets ofcontent, including parsing errors.```$ echo 'event zeek_init() { }' | zeek-script parsesource_file (0.0,1.0) 'event zeek_init() { }\n'    decl (0.0,0.21) 'event zeek_init() { }'        func_decl (0.0,0.21) 'event zeek_init() { }'            func_hdr (0.0,0.17) 'event zeek_init()'                event (0.0,0.17) 'event zeek_init()'                    event (0.0,0.5)                    id (0.6,0.15) 'zeek_init'                    func_params (0.15,0.17) '()'                        ( (0.15,0.16)                        ) (0.16,0.17)            func_body (0.18,0.21) '{ }'                { (0.18,0.19)                } (0.20,0.21)```Here's a syntax error:```$ echo 'event zeek_init)() { }' | zeek-script parsesource_file (0.0,1.0) [error] 'event zeek_init)() { }\n'    decl (0.0,0.22) [error] 'event zeek_init)() { }'        func_decl (0.0,0.22) [error] 'event zeek_init)() { }'            func_hdr (0.0,0.18) [error] 'event zeek_init)()'                event (0.0,0.18) [error] 'event zeek_init)()'                    event (0.0,0.5)                    id (0.6,0.15) 'zeek_init'                    ERROR (0.15,0.16) [error] ')'                        ) (0.15,0.16)                    func_params (0.16,0.18) '()'                        ( (0.16,0.17)                        ) (0.17,0.18)            func_body (0.19,0.22) '{ }'                { (0.19,0.20)                } (0.21,0.22)parse tree has problems: cannot parse line 0, col 15: &quot;)&quot;```See `zeek-script parse --help` for more information.## Autocomplete`zeekscript` features command-line auto-completion for users of[argcomplete](https://github.com/kislyuk/argcomplete).## Integration into text editorsYou can integrate `zeekscript` into any editor that supports the execution ofshell commands on the currently edited files. The relevant `zeekscript` commandssupport reading from stdin or filename.### EmacsWe offer an [Emacs mode](https://github.com/zeek/emacs-zeek-mode) with supportfor script formatting and parse tree inspection via keyboard shortcuts.### vimThe following snippet hooks up `zeek-format` to format the current script:```function RunZeekScript()    &quot; Create a new undo block for reverting formatting without changing cursor    &quot; position. https://github.com/rhysd/vim-clang-format/pull/55    silent execute &quot;noautocmd normal! ii\&lt;esc&gt;\&quot;_x&quot;    let l:save = winsaveview()    execute &quot;%!zeek-format&quot;    call winrestview(l:save)endfunctionnnoremap &lt;silent&gt;&lt;buffer&gt; &lt;leader&gt;cf :call RunZeekScript()&lt;CR&gt;```</longdescription>
</pkgmetadata>