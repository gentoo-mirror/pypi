<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pynidus[![Build Status](https://travis-ci.org/appchoose/pynidus.svg?branch=master)](https://travis-ci.org/appchoose/pynidus)[![Coverage status](https://codecov.io/gh/appchoose/pynidus/branch/master/graph/badge.svg)](https://codecov.io/github/appchoose/pynidus?branch=master)[![PyPI](https://img.shields.io/pypi/dm/pynidus.svg)](https://pypi.python.org/pypi)[![PyPI](https://img.shields.io/pypi/v/pynidus.svg)](https://pypi.python.org/pypi)A handful of utilities predominantly made to develop basic Cloud Run services that connect tothe same databases. Any configuration variable should be passed as an environment variable from Cloud Run.### UsageTraining a ML model usually require multiple databases access. Although it is doable to instantiate a connection to `Postgresql` or `Elasticsearch` everytime one needs to, it can actually become quickly cumbersome to do it for a certain number or models. To make everything a tiny bit more DRY, `pynidus` wraps very small chunks of code to deal with config files and clients instantiation.```pythonfrom pynidus.base import MultiClientconfig = {    &quot;pg_dev&quot;: {        &quot;host&quot;: &quot;host&quot;,        &quot;user&quot;: &quot;user&quot;,        &quot;password&quot;: &quot;password&quot;,        &quot;database&quot;: &quot;database&quot;,        &quot;port&quot;: 5432    },    &quot;pg_logs&quot;: {        &quot;host&quot;: &quot;host&quot;,        &quot;user&quot;: &quot;user&quot;,        &quot;password&quot;: &quot;password&quot;        &quot;database&quot;: &quot;database&quot;    },    &quot;es_dev&quot;: {        &quot;host&quot;: &quot;host&quot;,        &quot;user&quot;: &quot;user&quot;,        &quot;password&quot;: &quot;password&quot;    }}mc = MultiClient(config)mc.pg_client[&quot;logs&quot;].query(&quot;SELECT * FROM some_table&quot;)mc.pg_client[&quot;dev&quot;].query(&quot;SELECT * FROM another_table&quot;)```Or if you want to use it inside a custom Class:```pythonclass CustomClass(MultiClient):    def __init__(self, **kwargs):        super().__init__(**kwargs)cc.pg_client[&quot;logs&quot;].query(&quot;SELECT * FROM some_table&quot;)cc.pg_client[&quot;dev&quot;].query(&quot;SELECT * FROM another_table&quot;)```### TODO- Add a dev branch</longdescription>
</pkgmetadata>