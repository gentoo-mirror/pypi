<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Getting Started![workflow](https://github.com/fyndiq/rules-engine/actions/workflows/ci.yaml/badge.svg)[![Downloads](https://pepy.tech/badge/rules-engine)](https://pepy.tech/project/rules-engine) ![GitHub](https://img.shields.io/github/license/fyndiq/rules-engine)## DescriptionSimple rules engine inspired by [Martin Fowler's blog post in2009](https://www.martinfowler.com/bliki/RulesEngine.html) and[funnel-rules-engine](https://github.com/funnel-io/funnel-rules-engine).Full Documentation can be found [here](https://fyndiq.github.io/rules-engine/)## Requirements    python &gt;= 3.6## How to install    pip install rules-engine## How to use```pythonfrom rules_engine import Rule, RulesEngine, when, thenname = &quot;fyndiq&quot;RulesEngine(Rule(when(name == &quot;fyndiq&quot;),then(True))).run(name)&gt;&gt;&gt; True```## WhenEvaluates a condition.let's check if a value is `None` and raise an exception.```pythonfrom rules_engine import Rule, RulesEngine, whenobj = Nonedef cannot_be_none_error():    return &quot;not a string error&quot;RulesEngine(Rule(when(obj is None), cannot_be_none_error)).run(obj)&gt;&gt;&gt; 'not a string error'```## ThenEvaluates an action.```pythonfrom rules_engine import Rule, RulesEngine, whenobj = NoneRulesEngine(Rule(when(obj is None), then('not a string error'))).run(obj)&gt;&gt;&gt; 'not a string error'```## NotThe `not_` keyword is a logical operator.The return value will be `True` if the statement(s) are not `True`, otherwise it will return `False`.```pythonfrom rules_engine import Rule, RulesEngine, not_def is_missing(obj):    return not objobj=&quot;Hello&quot;RulesEngine(Rule(not_(is_missing), then(True))).run(obj)&gt;&gt;&gt; True```## AllEvaluates multiple conditions and if all conditions are `True` the action is executed- Example:    - We need to check if an object `obj` is not missing and is of type `list````pythonfrom rules_engine import Rule, RulesEngine, all_def is_missing(obj):    return not objdef is_a_list(obj):    return isinstance(obj, list)obj = [1,2]RulesEngine(Rule(all_(not_(is_missing), is_a_list), then(True))).run(obj)&gt;&gt;&gt; True```## AnyEvaluates multiple conditions and if any of the conditions is `True` the action is executed- Example:    - We need to check if an object `obj` is a `str` or a `list````pythonfrom rules_engine import Rule, RulesEngine, any_def is_a_str(obj):    return isinstance(obj, str)def is_a_list(obj):    return isinstance(obj, list)obj = &quot;Hello&quot;RulesEngine(Rule(any_(is_a_str, is_a_list), then(True))).run(obj)&gt;&gt;&gt; True```## Run/RunAll### RunRuns rules sequentially and exists executes the action for the first passing condition.```pythonfrom rules_engine import Rule, RulesEngine, thenobj = Nonedef is_integer(value):    return isinstance(value, int)def is_string(value):   return isinstance(value, str)value=1234RulesEngine(      Rule(is_integer, then(&quot;integer&quot;)),      Rule(is_string, then(&quot;string&quot;)),      ).run(value)&gt;&gt;&gt; &quot;integer&quot;```Since the first rule satisfies the conditions the rules engine will go no further### RunAllEvaluates all conditions and adds them to a list```pythonfrom rules_engine import Rule, RulesEngine, thendef is_integer(value):    return isinstance(value, int)def is_string(value):   return isinstance(value, str)def is_gr_3_chars(value):   return len(value) &gt; 3value=&quot;Hello&quot;RulesEngine(      Rule(is_integer, then(&quot;integer&quot;)),      Rule(is_string, then(&quot;string&quot;)),      Rule(is_gr_3_chars, then(&quot;greater than 3 charcters&quot;)),      ).run_all(value)&gt;&gt;&gt; [&quot;string&quot;, &quot;greater than 3 charcters&quot;]```# Full ExampleIn order for an article to be completed it must have the following rules1. stock is &gt; 0.2. image url is present.3. price exists.```pythonfrom collections import namedtuplefrom typing import Unionfrom rules_engine import Otherwise, Rule, RulesEngine, thenArticle = namedtuple(&quot;Article&quot;, &quot;title price image_url stock&quot;)article = Article(title=&quot;Iphone Case&quot;, price=1000, image_url=&quot;http://localhost/image&quot;, stock=None)def produce_article_completed_event():    return Nonedef article_controller(article: Article):    if not article.stock:        return False    if not article.price:        raise ValueError(&quot;Article price missing&quot;)    if not article.image_url:        raise ValueError(&quot;Article image_url missing&quot;)    return produce_article_completed_event()```To be able to change to rules engine, we need to split the conditions and actions.Rules engine is pretty simple if the condition is `True`, its corresponding action will be executed.```python### Conditionsdef no_article_stock(article):    return not article.stockdef no_article_price(article):    return not article.pricedef no_article_image_url(article):    return not article.image_url### Actionsdef article_price_missing_error(article):    raise ValueError(&quot;Article price missing&quot;)def article_image_missing_error(article):    raise ValueError(&quot;Article image_url missing&quot;)### Rules Enginedef article_complete_rules(article):    RulesEngine(        Rule(no_article_stock, then(False)),        Rule(no_article_price, article_price_missing_error),        Rule(no_article_image_url, article_image_missing_error),        Otherwise(produce_article_completed_event()),    ).run(article)```</longdescription>
</pkgmetadata>