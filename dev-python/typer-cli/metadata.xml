<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Typer CLI&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;Run &lt;strong&gt;Typer&lt;/strong&gt; scripts with completion, without having to create a package, using &lt;strong&gt;Typer CLI&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/tiangolo/typer-cli/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/tiangolo/typer-cli/workflows/Test/badge.svg?event=push&amp;branch=master&quot; alt=&quot;Test&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://coverage-badge.samuelcolvin.workers.dev/redirect/tiangolo/typer-cli&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://coverage-badge.samuelcolvin.workers.dev/tiangolo/typer-cli.svg&quot; alt=&quot;Coverage&quot;&gt;&lt;a href=&quot;https://pypi.org/project/typer-cli&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://badge.fury.io/py/typer-cli.svg&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;/p&gt;There is an optional utility tool called **Typer CLI**, additional to **Typer** itself.It's main feature is to provide ‚ú® completion ‚ú® in the Terminal for your own small programs built with **Typer**....without you having to create a complete installable Python package.It's probably most useful if you have a small custom Python script using **Typer** (maybe as part of some project), for some small tasks, and it's not complex/important enough to create a whole installable Python package for it (something to be installed with `pip`).In that case, you can install **Typer CLI**, and run your program with the `typer` command in your Terminal, and it will provide completion for your script.You can also use **Typer CLI** to generate Markdown documentation for your own **Typer** programs üìù.---**Documentation**: &lt;a href=&quot;https://typer.tiangolo.com/typer-cli/&quot; target=&quot;_blank&quot;&gt;https://typer.tiangolo.com/typer-cli/&lt;/a&gt;**Source Code for Typer CLI**: &lt;a href=&quot;https://github.com/tiangolo/typer-cli&quot; target=&quot;_blank&quot;&gt;https://github.com/tiangolo/typer-cli&lt;/a&gt;---## **Typer** or **Typer CLI****Typer** is a library for building CLIs (Command Line Interface applications).You use **Typer** in your Python scripts. Like in:```Pythonimport typerdef main():    typer.echo(&quot;Hello World&quot;)if __name__ == &quot;__main__&quot;:    typer.run(main)```**Typer CLI** is a command line application to run simple programs created with **Typer**, with completion in your terminal üöÄ.You use **Typer CLI** in your terminal, to run your scripts (as an alternative to calling `python` directly). Like in:&lt;div class=&quot;termy&quot;&gt;```console$ typer my_script.py runHello World```&lt;/div&gt;But you never import anything from **Typer CLI** in your own scripts.## Usage### InstallInstall **Typer CLI**:&lt;div class=&quot;termy&quot;&gt;```console$ python -m pip install typer-cli---&gt; 100%Successfully installed typer-cli```&lt;/div&gt;That creates a `typer` command you can call in your terminal, much like `python`, `git`, or `echo`.You can then install completion for it:&lt;div class=&quot;termy&quot;&gt;```console$ typer --install-completionzsh completion installed in /home/user/.bashrc.Completion will take effect once you restart the terminal.```&lt;/div&gt;### Sample scriptLet's say you have a script that uses **Typer** in `my_custom_script.py`:```Pythonfrom typing import Optionalimport typerapp = typer.Typer()@app.command()def hello(name: Optional[str] = None):    if name:        typer.echo(f&quot;Hello {name}&quot;)    else:        typer.echo(&quot;Hello World!&quot;)@app.command()def bye(name: Optional[str] = None):    if name:        typer.echo(f&quot;Bye {name}&quot;)    else:        typer.echo(&quot;Goodbye!&quot;)if __name__ == &quot;__main__&quot;:    app()```For it to work, you would also install **Typer**:&lt;div class=&quot;termy&quot;&gt;```console$ python -m pip install typer---&gt; 100%Successfully installed typer```&lt;/div&gt;### Run with PythonThen you could run your script with normal Python:&lt;div class=&quot;termy&quot;&gt;```console$ python my_custom_script.py helloHello World!$ python my_custom_script.py hello --name CamilaHello Camila!$ python my_custom_script.py bye --name CamilaBye Camila```&lt;/div&gt;There's nothing wrong with using Python directly to run it. And, in fact, if some other code or program uses your script, that would probably be the best way to do it.‚õîÔ∏è But in your terminal, you won't get completion when hitting &lt;kbd&gt;TAB&lt;/kbd&gt; for any of the subcommands or options, like `hello`, `bye`, and `--name`.### Run with **Typer CLI**Here's where **Typer CLI** is useful.You can also run the same script with the `typer` command you get after installing `typer-cli`:&lt;div class=&quot;termy&quot;&gt;```console$ typer my_custom_script.py run helloHello World!$ typer my_custom_script.py run hello --name CamilaHello Camila!$ typer my_custom_script.py run bye --name CamilaBye Camila```&lt;/div&gt;* Instead of using `python` directly you use the `typer` command.* After the name of the file, add the subcommand `run`.‚úîÔ∏è If you installed completion for **Typer CLI** (for the `typer` command) as described above, when you hit &lt;kbd&gt;TAB&lt;/kbd&gt; you will have ‚ú® completion for everything ‚ú®, including all the subcommands and options of your script, like `hello`, `bye`, and `--name` üöÄ.## If mainBecause **Typer CLI** won't use the block with:```Pythonif __name__ == &quot;__main__&quot;:    app()```...you can also remove it if you are calling that script only with **Typer CLI** (using the `typer` command).## Run other files**Typer CLI** can run any script with **Typer**, but the script doesn't even have to use **Typer** at all.**Typer CLI** could even run a file with a function that could be used with `typer.run()`, even if the script doesn't use `typer.run()` or anything else.For example, a file `main.py` like this will still work:```Pythondef main(name: str = &quot;World&quot;):    &quot;&quot;&quot;    Say hi to someone, by default to the World.    &quot;&quot;&quot;    print(f&quot;Hello {name}&quot;)```Then you can call it with:&lt;div class=&quot;termy&quot;&gt;```console$ typer main.py run --helpUsage: typer run [OPTIONS]  Say hi to someone, by default to the World.Options:  --name TEXT  --help       Show this message and exit.$ typer main.py run --name CamilaHello Camila```&lt;/div&gt;And it will also have completion for things like the `--name` *CLI Option*.## Run a package or moduleInstead of a file path you can pass a module (possibly in a package) to import.For example:&lt;div class=&quot;termy&quot;&gt;```console$ typer my_package.main run --helpUsage: typer run [OPTIONS]Options:  --name TEXT  --help       Show this message and exit.$ typer my_package.main run --name CamilaHello Camila```&lt;/div&gt;## OptionsYou can specify one of the following **CLI options**:* `--app`: the name of the variable with a `Typer()` object to run as the main app.* `--func`: the name of the variable with a function that would be used with `typer.run()`.### DefaultsWhen your run a script with the **Typer CLI** (the `typer` command) it will use the app from the following priority:* An app object from the `--app` *CLI Option*.* A function to convert to a **Typer** app from `--func` *CLI Option* (like when using `typer.run()`).* A **Typer** app in a variable with a name of `app`, `cli`, or `main`.* The first **Typer** app available in the file, with any name.* A function in a variable with a name of `main`, `cli`, or `app`.* The first function in the file, with any name.## Generate docs**Typer CLI** can also generate Markdown documentation for your **Typer** application.### Sample script with docsFor example, you could have a script like:```Pythonimport typerapp = typer.Typer(help=&quot;Awesome CLI user manager.&quot;)@app.command()def create(username: str):    &quot;&quot;&quot;    Create a new user with USERNAME.    &quot;&quot;&quot;    typer.echo(f&quot;Creating user: {username}&quot;)@app.command()def delete(    username: str,    force: bool = typer.Option(        ...,        prompt=&quot;Are you sure you want to delete the user?&quot;,        help=&quot;Force deletion without confirmation.&quot;,    ),):    &quot;&quot;&quot;    Delete a user with USERNAME.    If --force is not used, will ask for confirmation.    &quot;&quot;&quot;    if force:        typer.echo(f&quot;Deleting user: {username}&quot;)    else:        typer.echo(&quot;Operation cancelled&quot;)@app.command()def delete_all(    force: bool = typer.Option(        ...,        prompt=&quot;Are you sure you want to delete ALL users?&quot;,        help=&quot;Force deletion without confirmation.&quot;,    )):    &quot;&quot;&quot;    Delete ALL users in the database.    If --force is not used, will ask for confirmation.    &quot;&quot;&quot;    if force:        typer.echo(&quot;Deleting all users&quot;)    else:        typer.echo(&quot;Operation cancelled&quot;)@app.command()def init():    &quot;&quot;&quot;    Initialize the users database.    &quot;&quot;&quot;    typer.echo(&quot;Initializing user database&quot;)if __name__ == &quot;__main__&quot;:    app()```### Generate docs with Typer CLIThen you could generate docs for it with **Typer CLI**.You can use the subcommand `utils`.And then the subcommand `docs`.&lt;div class=&quot;termy&quot;&gt;```console$ typer some_script.py utils docs```&lt;/div&gt;**Options**:* `--name TEXT`: The name of the CLI program to use in docs.* `--output FILE`: An output file to write docs to, like README.md.For example:&lt;div class=&quot;termy&quot;&gt;```console$ typer my_package.main utils docs --name awesome-cli --output README.mdDocs saved to: README.md```&lt;/div&gt;### Sample docs outputFor example, for the previous script, the generated docs would look like:---## `awesome-cli`Awesome CLI user manager.**Usage**:```console$ awesome-cli [OPTIONS] COMMAND [ARGS]...```**Options**:* `--install-completion`: Install completion for the current shell.* `--show-completion`: Show completion for the current shell, to copy it or customize the installation.* `--help`: Show this message and exit.**Commands**:* `create`: Create a new user with USERNAME.* `delete`: Delete a user with USERNAME.* `delete-all`: Delete ALL users in the database.* `init`: Initialize the users database.## `awesome-cli create`Create a new user with USERNAME.**Usage**:```console$ awesome-cli create [OPTIONS] USERNAME```**Options**:* `--help`: Show this message and exit.## `awesome-cli delete`Delete a user with USERNAME.If --force is not used, will ask for confirmation.**Usage**:```console$ awesome-cli delete [OPTIONS] USERNAME```**Options**:* `--force / --no-force`: Force deletion without confirmation.  [required]* `--help`: Show this message and exit.## `awesome-cli delete-all`Delete ALL users in the database.If --force is not used, will ask for confirmation.**Usage**:```console$ awesome-cli delete-all [OPTIONS]```**Options**:* `--force / --no-force`: Force deletion without confirmation.  [required]* `--help`: Show this message and exit.## `awesome-cli init`Initialize the users database.**Usage**:```console$ awesome-cli init [OPTIONS]```**Options**:* `--help`: Show this message and exit.---## License**Typer CLI**, the same as **Typer**, is licensed under the terms of the MIT license.</longdescription>
</pkgmetadata>