<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sqlalchemy-mockThe package for working with SQLAlchemy in unit tests,it mocks requests to database, and provides necessary functionality within unit testsIt doesn't work with existing databases and doesn't create any tests databases, thanks to this it works enouth fast## InstallingExists a few aproaches to install package:- You can clone this repository and run the next command to install package from local sourse:    ```    pip install -e /path/to/repository    ```- You can install this package from github:    ```    pip install git+https://github.com/ivanostapiuk/sqlalchemy-mock.git    ```- There is a package also in pypi:    ```    pip install sqlalchemy-mock    ```## How to useBy default primary key is 'uuid', but you can set another field as primary key and function to generate value, for example:```pythonimport uuiddb = Session(primary_key=&quot;uuid&quot;, primary_key_generate=lambda: str(uuid.uuid4()))```A simple example how to use it in flask:```pythonimport unittestfrom app import flask_appfrom sqlalchemy_mock import Sessionfrom models import Modelclass TestCase(unittest.TestCase):    @classmethod    def setUp(cls):        cls.app = flask_app.test_client()        cls.db = Session()    def test(self):        row = Model(field1=&quot;value1&quot;, field2=&quot;value2&quot;, field3=&quot;value3&quot;)        self.db.add(row)        self.db.commit()        with self.db.mock_session():            response = self.app.get(f&quot;/get/model/object/{row.uuid}&quot;)            self.assertEqual(response.json[&quot;field1&quot;], row.field1)```## Runinng unittestsTo run unittests use command:```python -m unittest```</longdescription>
</pkgmetadata>