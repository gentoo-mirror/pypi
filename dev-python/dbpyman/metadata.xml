<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Discord Mysql Management FrameworkThis package is used to dynamically **add new data** to your existing Mysql tables.&lt;br&gt;You're also able to **delete** or **view** data.&lt;br&gt;It'll return you an embed &amp; a view for you to send back.### Built With[![Python][python]][python-url][![MySQL][mysql]][mysql-url]![Discord](https://img.shields.io/badge/Discord-%235865F2.svg?style=for-the-badge&amp;logo=discord&amp;logoColor=white)### How to get started1. Install the package```pypip install dbpyman```2. Create a new command for your discord Bot and create a `database` object inside that.```pydatabase = Database(host='db_host',                    user='db_user',                    password='db_password',                    port=3306,                    database_name='db_name',                    charset='utf8mb4')```3. Call `create_db_management` and pass the `database` object as the parameter and return your **embed** &amp; **view** ```pydatabase = Database(host='db_host',                    user='db_user',                    password='db_password',                    port=3306,                    database_name='db_name',                    charset='utf8mb4')embed, view = dbpyman.create_db_management(database)```4. Use the returned embed &amp; view and attach them to your message```pydatabase = Database(host='db_host',                    user='db_user',                    password='db_password',                    port=3306,                    database_name='db_name',                    charset='utf8mb4')embed, view = dbpyman.create_db_management(database)await interaction.response.send_message(embed=embed, view=view)```### Advanced usageThe framework features various methodes to further customize the UI &amp; behavior of your data management process.#### Hide certain tables from the embedIn general the framework will attach all tables as buttons to the view.&lt;br&gt;You can prevent that by using```pydatabase = Database(...)database.set_table_hidden('MyTableName')database.set_table_hidden('MySecondTableName')embed, view = dbpyman.create_db_management(database)```#### Set a default value for a columnThis will set a **default value** for that specific column. When **adding data** to a table, you'll see the **default value** as the input preview.This will also allow you to *skip* the insertion of those specific column input fields and simply use the assigned **default value** when that input field is empty ( even if the table is marked as `NOT NULL` ).```pydatabase = Database(...)database.set_column_default_value('MyTableName', 'MyColumnName', 0)database.set_column_default_value('MySecondTableName', 'MySecondColumnName', 'Banana')embed, view = dbpyman.create_db_management(database)```### ContributeFeel free to contribute to the project, it's open source.&lt;br&gt;It's probably possible to *not only* support MySQL and work with inheritance to allow other database types.&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt;[python]: https://img.shields.io/badge/Python-3776AB?style=for-the-badge&amp;logo=python&amp;logoColor=white[mysql]: https://img.shields.io/badge/MySQL-00000F?style=for-the-badge&amp;logo=mysql&amp;logoColor=white[mysql-url]: https://www.mysql.com/[python-url]: https://www.python.org/</longdescription>
</pkgmetadata>