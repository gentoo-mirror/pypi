<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-smartfields##################.. image:: https://readthedocs.org/projects/django-smartfields/badge/?version=latest   :target: https://readthedocs.org/projects/django-smartfields/?badge=latest   :alt: Documentation Status.. image:: https://img.shields.io/pypi/v/django-smartfields.svg   :target: https://pypi.python.org/pypi/django-smartfields/   :alt: Latest Version.. image:: https://landscape.io/github/lehins/django-smartfields/master/landscape.png   :target: https://landscape.io/github/lehins/django-smartfields/master   :alt: Code Health.. image:: https://img.shields.io/coveralls/lehins/django-smartfields.svg   :target: https://coveralls.io/r/lehins/django-smartfields   :alt: Tests Coverage.. image:: https://travis-ci.org/lehins/django-smartfields.svg?branch=master   :target: https://travis-ci.org/lehins/django-smartfields   :alt: Travis-CIDjango Model Fields that are smart.-----------------------------------This app introduces a declarative way of handling fields' values. It can beespecially useful when one field depends on a value from another field, even ifa field depends on itself. At first it might sound useless, but, as it turnsout, it is an amazing concept that helps in writing clear, concise and DRY code.Best way to describe is on a simple example. Let's say there is a field whereyou store a custom html page and you would like to have another field attachedto the same model store the same page but with html tags stripped out, moreoveryou would like it to update whenever the first field changes it's value. Acommon way to handle that issue is to overwrite model's ``save`` method and putall the logic there, right? What if you could just give a field a function thatdoes the stripping and everything else is taking care of? Wouldn't that be nice,huh?  Well, that's one of many things this app let's you do.Another great example is django's ``ImageField`` that can update ``width_field``and ``height_field`` whenever image is changed. This app uses similar conceptsto achive that functionality. But here is a more powerful example thatdemonstrates the value of this app. Let's say you would like to have a user beable to upload an image in any format and automatically add another version ofthis image converted to JPEG and shrunk to fit in a box size of 1024x768. Hereis how it could look with utilization of `django-smartfields`:.. code-block:: python    from django.db import models    from smartfields import fields    from smartfields.dependencies import FileDependency    from smartfields.processors import ImageProcessor    class User(models.Model):        # ... more fields ....        avatar = fields.ImageField(upload_to='avatar', dependencies=[            FileDependency(attname='avatar_jpeg', processor=ImageProcessor(                format='JPEG', scale={'max_width': 1024, 'max_height': 768})),        ])        avatar_jpeg = fields.ImageField(upload_to='avatar')        # ... more fields ...That's it. Did I mention that it will also clean up old files, when new ones areuploaded?So, hopefully I got you convinced to give this app a try. There is fulldocumentation also on the way, but for now you can check out 'tests' folder forsome examples.Django settings---------------Required django apps for most of the functionality:.. code-block:: python    INSTALLED_APPS = [        'django.contrib.auth',        'django.contrib.sessions',        'django.contrib.contenttypes',        'django.contrib.sites',        'smartfields',        # optional, needed for forms        'crispy_forms'    ]Other required settings.. code-block:: python    MIDDLEWARE = [        'django.contrib.sessions.middleware.SessionMiddleware',        'django.contrib.auth.middleware.AuthenticationMiddleware',        'django.contrib.messages.middleware.MessageMiddleware'    ]    SITE_ID = 1Dependencies------------* `Django &lt;https://djangoproject.com/&gt;`_ versions &gt;= 1.7 (also works for 2.x and 3.x)* `Python Pillow &lt;https://pillow.readthedocs.org&gt;`_ - (optional) used for  image conversion/resizing. AND/OR* `Wand &lt;http://docs.wand-py.org&gt;`_ - (optional) also for image processing.* `ffmpeg &lt;https://www.ffmpeg.org/&gt;`_ - (optional) for video conversion. (can  be easily adopted for `avconv &lt;https://libav.org/avconv.html&gt;`_).* `BeautifulSoup4 &lt;https://pypi.python.org/pypi/beautifulsoup4/&gt;`_ - (optional)  for HTML stripping* `lxml &lt;https://pypi.python.org/pypi/lxml&gt;`_ - (optional) for BeautifulSoup.* `django-crispy-forms  &lt;https://readthedocs.org/projects/django-crispy-forms/&gt;`_ - (optional) for  ajax uploading.* `Plupload &lt;http://www.plupload.com/&gt;`_ - (optional) for ajax uploading.* `Bootstrap3 &lt;http://getbootstrap.com/&gt;`_ - (optional) for ajax uploading.Changelog=========1.1.3-----* Addition of `CloudImageProcessor` and `CloudFFMEGPRocessor`1.1.2-----* Support for Django=3.1.*1.1.1-----* Support for Django=3.0.*1.1.0-----* renamed ``Dependency.async`` to ``Dependency.async_``.  Fix for `#16 &lt;https://github.com/lehins/django-smartfields/issues/16&gt;`_.  Thanks `@zglennie &lt;https://github.com/zglennie&gt;`_* Fix compatibility with ``Django=2.x``:  * Added ``app_name='smartifelds'`` to ``urls.py`` file  * Stop using ``_size`` and ``_set_size()`` attributes in ``NamedTemporaryFile``,    since those where only available in ``Django=1.x``1.0.7-----* added ``gis`` fields.* made ``lxml`` a default parser for HTMLProcessor.1.0.6-----* added ``RenameFileProcessor``1.0.5-----* minor bug fixes.1.0.4-----* Switched to MIT License* Added ``stashed_value`` to processors.1.0.3-----* Added support for ``Wand`` with ``WandImageProcessor``.* Made it compatible with Django 1.8* Updated compiled JavaScript file.1.0.2-----* Introduced ``pre_processor``.* Made ``UploadTo`` serializible.* Got rid of custom handlers.* Minor bugfixes.1.0.0-----* Initial release</longdescription>
</pkgmetadata>