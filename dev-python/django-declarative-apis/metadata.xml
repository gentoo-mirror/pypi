<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Documentation Status](https://readthedocs.org/projects/django-declarative-apis/badge/?version=stable)](https://django-declarative-apis.readthedocs.io/en/stable/?badge=stable)Overview========django-declarative-apis is a framework built on top of Django aimed at teams implementing RESTful APis. It provides a simple interface to define endpoints declaratively. Some benefits to using django-declarative-apis:-   Define endpoints declaratively-   Define model-bound and unbound resource endpoints with a consistent interface-   OAuth 1.0a authentication out of the box-   Define resource and endpoint-bound tasks, promoting modularity-   Define synchronous and asynchronous tasks (asynchronous tasks implemented with Celery)-   Separation of concerns between request body processing and business logicQuick start===========This guide is intended to demonstrate the bare minimum in order to get a django-declarative-apis project up and running. The example directory contains further examples using endpoint to model relationships, authentication and response attribute filtering.Create django app-----------------``` sourceCode./manage startapp myapp```Add app to INSTALLED\_APPS--------------------------``` pythonINSTALLED_APPS = [   'django_declarative_apis',   'myapp',]```Add required config-------------------``` pythonDECLARATIVE_ENDPOINT_RESOURCE_ADAPTER = 'django_declarative_apis.adapters.EndpointResource'DECLARATIVE_ENDPOINT_AUTHENTICATION_HANDLERS = 'django_declarative_apis.authentication.oauthlib.oauth1.TwoLeggedOauth1'```myapp/urls.py-------------``` pythonfrom django_declarative_apis import adaptersimport myapp.resourcesclass NoAuth:   @staticmethod   def is_authenticated(request):      return Trueurlpatterns = [    url(        r'^ping$',        adapters.resource_adapter(            get=myapp.resources.PingDefinition,            authentication=NoAuth        )    ),]```myproject/myproject/urls.py---------------------------``` pythonfrom django.conf.urls import url, includeimport myapp.urlsurlpatterns = [   url(r'^', include(myapp.urls)),]```myapp/resources.py------------------``` pythonfrom django_declarative_apis import machineryclass PingDefinition(machinery.BaseEndpointDefinition):    def is_authorized(self):        return True    @property    def resource(self):        return {'ping': 'pong'}```</longdescription>
</pkgmetadata>