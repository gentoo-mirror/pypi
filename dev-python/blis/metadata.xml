<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a href=&quot;https://explosion.ai&quot;&gt;&lt;img src=&quot;https://explosion.ai/assets/img/logo.svg&quot; width=&quot;125&quot; height=&quot;125&quot; align=&quot;right&quot; /&gt;&lt;/a&gt;# Cython BLIS: Fast BLAS-like operations from Python and Cython, without the tearsThis repository provides the [Blis linear algebra](https://github.com/flame/blis)routines as a self-contained Python C-extension.Currently, we only supports single-threaded execution, as this is actually best for our workloads (ML inference).[![Azure Pipelines](https://img.shields.io/azure-devops/build/explosion-ai/public/6/master.svg?logo=azure-pipelines&amp;style=flat-square)](https://dev.azure.com/explosion-ai/public/_build?definitionId=6)[![pypi Version](https://img.shields.io/pypi/v/blis.svg?style=flat-square&amp;logo=pypi&amp;logoColor=white)](https://pypi.python.org/pypi/blis)[![conda](https://img.shields.io/conda/vn/conda-forge/cython-blis.svg?style=flat-square&amp;logo=conda-forge&amp;logoColor=white)](https://anaconda.org/conda-forge/cython-blis)[![Python wheels](https://img.shields.io/badge/wheels-%E2%9C%93-4c1.svg?longCache=true&amp;style=flat-square&amp;logo=python&amp;logoColor=white)](https://github.com/explosion/wheelwright/releases)## InstallationYou can install the package via pip, first making sure that `pip`, `setuptools`,and `wheel` are up-to-date:```bashpip install -U pip setuptools wheelpip install blis```Wheels should be available, so installation should be fast. If you want to install from source and you're on Windows, you'll need to install LLVM.### Building BLIS for alternative architecturesThe provided wheels should work on x86_64 and osx/arm64 architectures. Unfortunately we do not currently know a way to provide different wheels for alternative architectures, and we cannot provide a single binary that works everywhere. So if the wheel doesn't work for your CPU, you'll need to specify source distribution, and tell Blis your CPU architecture using the `BLIS_ARCH` environment variable.#### a) Install with auto-detected CPU support```bashpip install spacy --no-binary blis```#### b) Install using an existing configurationProvide an architecture from the [supported configurations](https://github.com/explosion/cython-blis/tree/v0.9.0/blis/_src/make).```bashBLIS_ARCH=&quot;power9&quot; pip install spacy --no-binary blis```#### c) Install with generic arch support&gt; ⚠️ `generic` is not optimized for any particular CPU and is extremely slow. Only recommended for testing!```bashBLIS_ARCH=&quot;generic&quot; pip install spacy --no-binary blis```#### d) Build specific supportIn order to compile Blis, `cython-blis` bundles makefile scripts for specific architectures, that are compiled by running the Blis build system and logging the commands. We do not yet have logs for every architecture, as there are some architectures we have not had access to.[See here](https://github.com/flame/blis/blob/0.9.0/config_registry) for list ofarchitectures. For example, here's how to build support for the Intel architecture `knl`:```bashgit clone https://github.com/explosion/cython-blis &amp;&amp; cd cython-blisgit pull &amp;&amp; git submodule init &amp;&amp; git submodule update &amp;&amp; git submodule statuspython3 -m venv venvsource venv/bin/activatepip install -U pip setuptools wheelpip install -r requirements.txt./bin/generate-make-jsonl linux knlBLIS_ARCH=&quot;knl&quot; python setup.py build_ext --inplaceBLIS_ARCH=&quot;knl&quot; python setup.py bdist_wheel```Fingers crossed, this will build you a wheel that supports your platform. Youcould then [submit a PR](https://github.com/explosion/cython-blis/pulls) withthe `blis/_src/make/linux-knl.jsonl` and`blis/_src/include/linux-knl/blis.h` files so that you can run:```bashBLIS_ARCH=&quot;knl&quot; pip install --no-binary=blis```## UsageTwo APIs are provided: a high-level Python API, and direct[Cython](http://cython.org) access, which provides fused-type, nogilCython bindings to the underlying Blis linear algebra library. Fusedtypes are a simple template mechanism, allowing just a touch ofcompile-time generic programming:```pythoncimport blis.cyA = &lt;float*&gt;calloc(nN * nI, sizeof(float))B = &lt;float*&gt;calloc(nO * nI, sizeof(float))C = &lt;float*&gt;calloc(nr_b0 * nr_b1, sizeof(float))blis.cy.gemm(blis.cy.NO_TRANSPOSE, blis.cy.NO_TRANSPOSE,             nO, nI, nN,             1.0, A, nI, 1, B, nO, 1,             1.0, C, nO, 1)```Bindings have been added as we've needed them. Please submit pull requests ifthe library is missing some functions you require.## DevelopmentTo build the source package, you should run the following command:```bash./bin/update-vendored-source```This populates the `blis/_src` folder for the various architectures, using the`flame-blis` submodule.## Updating the build filesIn order to compile the Blis sources, we use jsonl files that provide theexplicit compiler flags. We build these jsonl files by running Blis's buildsystem, and then converting the log. This avoids us having to replicate thebuild system within Python: we just use the jsonl to make a bunch of subprocesscalls. To support a new OS/architecture combination, we have to provide thejsonl file and the header.### LinuxThe Linux build files need to be produced from within the manylinux2014Docker container, so that they will be compatible with the wheel buildingprocess.First, install docker. Then do the following to start the container:    sudo docker run -it quay.io/pypa/manylinux2014_x86_64:latestOnce within the container, the following commands should check out the repo andbuild the jsonl files for the generic arch:    mkdir /usr/local/repos    cd /usr/local/repos    git clone https://github.com/explosion/cython-blis &amp;&amp; cd cython-blis    git pull &amp;&amp; git submodule init &amp;&amp; git submodule update &amp;&amp; git submodule    status    /opt/python/cp36-cp36m/bin/python -m venv env3.6    source env3.6/bin/activate    pip install -r requirements.txt    ./bin/generate-make-jsonl linux generic --export    BLIS_ARCH=generic python setup.py build_ext --inplace    # N.B.: don't copy to /tmp, docker cp doesn't work from there.    cp blis/_src/include/linux-generic/blis.h /linux-generic-blis.h    cp blis/_src/make/linux-generic.jsonl /Then from a new terminal, retrieve the two files we need out of the container:    sudo docker ps -l # Get the container ID    # When I'm in Vagrant, I need to go via cat -- but then I end up with dummy    # lines at the top and bottom. Sigh. If you don't have that problem and    # sudo docker cp just works, just copy the file.    sudo docker cp aa9d42588791:/linux-generic-blis.h - | cat &gt; linux-generic-blis.h    sudo docker cp aa9d42588791:/linux-generic.jsonl - | cat &gt; linux-generic.jsonl</longdescription>
</pkgmetadata>