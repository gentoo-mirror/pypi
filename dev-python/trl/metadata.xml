<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://huggingface.co/datasets/trl-internal-testing/example-images/resolve/main/images/trl_banner_dark.png&quot;&gt;&lt;/div&gt;# TRL - Transformer Reinforcement Learning&gt; Full stack transformer language models with reinforcement learning.&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/lvwerra/trl/blob/main/LICENSE&quot;&gt;        &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/lvwerra/trl.svg?color=blue&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://huggingface.co/docs/trl/index&quot;&gt;        &lt;img alt=&quot;Documentation&quot; src=&quot;https://img.shields.io/website/http/huggingface.co/docs/trl/index.svg?down_color=red&amp;down_message=offline&amp;up_message=online&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/lvwerra/trl/releases&quot;&gt;        &lt;img alt=&quot;GitHub release&quot; src=&quot;https://img.shields.io/github/release/lvwerra/trl.svg&quot;&gt;    &lt;/a&gt;&lt;/p&gt;## What is it?&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://huggingface.co/datasets/trl-internal-testing/example-images/resolve/main/images/TRL-readme.png&quot;&gt;&lt;/div&gt;`trl` is a full stack library where we provide a set of tools to train transformer language models with Reinforcement Learning, from the Supervised Fine-tuning step (SFT), Reward Modeling step (RM) to the Proximal Policy Optimization (PPO) step. The library is built on top of the [`transformers`](https://github.com/huggingface/transformers) library by  ðŸ¤— Hugging Face. Therefore, pre-trained language models can be directly loaded via `transformers`. At this point most of decoder architectures and encoder-decoder architectures are supported. Refer to the documentation or the `examples/` folder for example code snippets and how to run these tools.**Highlights:**- [`SFTTrainer`](https://huggingface.co/docs/trl/sft_trainer): A light and friendly wrapper around `transformers` Trainer to easily fine-tune language models or adapters on a custom dataset.- [`RewardTrainer`](https://huggingface.co/docs/trl/reward_trainer): A light wrapper around `transformers` Trainer to easily fine-tune language models for human preferences (Reward Modeling).- [`PPOTrainer`](https://huggingface.co/docs/trl/trainer#trl.PPOTrainer): A PPO trainer for language models that just needs (query, response, reward) triplets to optimise the language model.- [`AutoModelForCausalLMWithValueHead`](https://huggingface.co/docs/trl/models#trl.AutoModelForCausalLMWithValueHead) &amp; [`AutoModelForSeq2SeqLMWithValueHead`](https://huggingface.co/docs/trl/models#trl.AutoModelForSeq2SeqLMWithValueHead): A transformer model with an additional scalar output for each token which can be used as a value function in reinforcement learning.- [Examples](https://github.com/lvwerra/trl/tree/main/examples): Train GPT2 to generate positive movie reviews with a BERT sentiment classifier, full RLHF using adapters only, train GPT-j to be less toxic, [Stack-Llama example](https://huggingface.co/blog/stackllama), etc.## How PPO worksFine-tuning a language model via PPO consists of roughly three steps:1. **Rollout**: The language model generates a response or continuation based on query which could be the start of a sentence.2. **Evaluation**: The query and response are evaluated with a function, model, human feedback or some combination of them. The important thing is that this process should yield a scalar value for each query/response pair.3. **Optimization**: This is the most complex part. In the optimisation step the query/response pairs are used to calculate the log-probabilities of the tokens in the sequences. This is done with the model that is trained and and a reference model, which is usually the pre-trained model before fine-tuning. The KL-divergence between the two outputs is used as an additional reward signal to make sure the generated responses don't deviate to far from the reference language model. The active language model is then trained with PPO.This process is illustrated in the sketch below:&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://huggingface.co/datasets/trl-internal-testing/example-images/resolve/main/images/trl_overview.png&quot; width=&quot;800&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt; &lt;b&gt;Figure:&lt;/b&gt; Sketch of the workflow. &lt;/p&gt;&lt;/div&gt;## Installation### Python packageInstall the library with pip:```bashpip install trl```### From sourceIf you want to run the examples in the repository a few additional libraries are required. Clone the repository and install it with pip:```bashgit clone https://github.com/lvwerra/trl.gitcd trl/pip install .```If you wish to develop TRL, you should install in editable mode:```bashpip install -e .```## How to use### `SFTTrainer`This is a basic example on how to use the `SFTTrainer` from the library. The `SFTTrainer` is a light wrapper around the `transformers` Trainer to easily fine-tune language models or adapters on a custom dataset.```python# importsfrom datasets import load_datasetfrom trl import SFTTrainer# get datasetdataset = load_dataset(&quot;imdb&quot;, split=&quot;train&quot;)# get trainertrainer = SFTTrainer(    &quot;facebook/opt-350m&quot;,    train_dataset=dataset,    dataset_text_field=&quot;text&quot;,    max_seq_length=512,)# traintrainer.train()```### `RewardTrainer`This is a basic example on how to use the `RewardTrainer` from the library. The `RewardTrainer` is a wrapper around the `transformers` Trainer to easily fine-tune reward models or adapters on a custom preference dataset.```python# importsfrom transformers import AutoModelForSequenceClassification, AutoTokenizerfrom trl import RewardTrainer# load model and dataset - dataset needs to be in a specific formatmodel = AutoModelForSequenceClassification.from_pretrained(&quot;gpt2&quot;)tokenizer = AutoTokenizer.from_pretrained(&quot;gpt2&quot;)...# load trainertrainer = RewardTrainer(    model=model,    tokenizer=tokenizer,    train_dataset=dataset,)# traintrainer.train()```### `PPOTrainer`This is a basic example on how to use the `PPOTrainer` from the library. Based on a query the language model creates a response which is then evaluated. The evaluation could be a human in the loop or another model's output.```python# importsimport torchfrom transformers import AutoTokenizerfrom trl import PPOTrainer, PPOConfig, AutoModelForCausalLMWithValueHead, create_reference_modelfrom trl.core import respond_to_batch# get modelsmodel = AutoModelForCausalLMWithValueHead.from_pretrained('gpt2')model_ref = create_reference_model(model)tokenizer = AutoTokenizer.from_pretrained('gpt2')# initialize trainerppo_config = PPOConfig(    batch_size=1,)# encode a queryquery_txt = &quot;This morning I went to the &quot;query_tensor = tokenizer.encode(query_txt, return_tensors=&quot;pt&quot;)# get model responseresponse_tensor  = respond_to_batch(model, query_tensor)# create a ppo trainerppo_trainer = PPOTrainer(ppo_config, model, model_ref, tokenizer)# define a reward for response# (this could be any reward such as human feedback or output from another model)reward = [torch.tensor(1.0)]# train model for one step with ppotrain_stats = ppo_trainer.step([query_tensor[0]], [response_tensor[0]], reward)```### Advanced example: IMDB sentimentFor a detailed example check out the example python script `examples/scripts/sentiment_tuning.py`, where GPT2 is fine-tuned to generate positive movie reviews. An few examples from the language models before and after optimisation are given below:&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://huggingface.co/datasets/trl-internal-testing/example-images/resolve/main/images/table_imdb_preview.png&quot; width=&quot;800&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt; &lt;b&gt;Figure:&lt;/b&gt; A few review continuations before and after optimisation. &lt;/p&gt;&lt;/div&gt;Have a look at more examples inside [`examples/`](https://github.com/lvwerra/trl/tree/main/examples) folder.## References### Proximal Policy OptimisationThe PPO implementation largely follows the structure introduced in the paper **&quot;Fine-Tuning Language Models from Human Preferences&quot;** by D. Ziegler et al. \[[paper](https://arxiv.org/pdf/1909.08593.pdf), [code](https://github.com/openai/lm-human-preferences)].### Language modelsThe language models utilize the `transformers` library by ðŸ¤— Hugging Face.## Citation```bibtex@misc{vonwerra2022trl,  author = {Leandro von Werra and Younes Belkada and Lewis Tunstall and Edward Beeching and Tristan Thrush and Nathan Lambert},  title = {TRL: Transformer Reinforcement Learning},  year = {2020},  publisher = {GitHub},  journal = {GitHub repository},  howpublished = {\url{https://github.com/lvwerra/trl}}}```</longdescription>
</pkgmetadata>