<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription> # nintendeals&gt; &quot;nintendeals was a bot, he loved learning and deals on nintendo's eshop.&quot; **LetsFunHans** üí¨Ô∏è[![Version](https://img.shields.io/pypi/v/nintendeals?logo=pypi)](https://pypi.org/project/nintendeals)[![Quality Gate Status](https://img.shields.io/sonar/alert_status/fedecalendino_nintendeals?logo=sonarcloud&amp;server=https://sonarcloud.io)](https://sonarcloud.io/dashboard?id=fedecalendino_nintendeals)[![CodeCoverage](https://img.shields.io/sonar/coverage/fedecalendino_nintendeals?logo=sonarcloud&amp;server=https://sonarcloud.io)](https://sonarcloud.io/dashboard?id=fedecalendino_nintendeals)-----Named after the my old [reddit bot](https://reddit.com/u/nintendeals), nintendeals is now a library with all the scrapers and integrations of nintendo services that I used.## TerminologyBefore getting into any details first we need too get into the same page with a few terms:### RegionHere we have three regions NA, EU and JP each one corresponding to Nintendo of America (NoA), Nintendo of Europe (NoE)and Nintendo of Japan (NoJ). Each of these regions have set of countries they are &quot;in charge of&quot;:NoA:  * Canada  * Mexico  * United Stated  NoE:  * Every country in the European Union  * Australia  * New Zealand  * South Africa  NoJ:  * Japan  ### nsuidAn nsuid is a 14 digit long string which Nintendo uses to identify games on each region. Taking Breath of the Wild as an example, we have these 3 nsuids for it (one per region):```      * 70010000000025 (NA)  * 70010000000023 (EU)  * 70010000000026 (JP)```    ### Product CodeThe product code is another type of ID that Nintendo uses, it usually is a 8/9 character long string.Taking Splatoon 2 as an example, we have these 3 product codes for it (one per region):```  * HACPAAB6B (NA)  * HACPAAB6C (EU)  *  HACAAB6A (JP)```The difference with the nsuid is that the product code has a constant between all regions (`AAB6` in this example), and this is what I decided to call [unique_id](https://github.com/fedecalendino/nintendeals/blob/master/nintendeals/commons/classes/games.py#L56) and it is what we can you to join a game across all regions.You can also see this code in the front of your Nintendo Switch [cartridge](https://media.karousell.com/media/photos/products/2019/08/17/splatoon_2_cartridge_only_1566040350_4f38e061_progressive.jpg).## ServicesThis library provides three types of services: Info, Listing, Searching and Pricing. Each region has a different version of Info, Listing and Searching, but Pricing is the same for all as it only requires a country and an nsuid.### ListingEven thought there are different version for each region, they all work in the same way. Given a supported platform ([for this library](https://github.com/fedecalendino/nintendeals/blob/master/nintendeals/constants.py#L15))they will retrieve a list games in the selected region (in the form of an iterator).```pythonfrom nintendeals import noafor game in noa.list_switch_games():    print(game.title, &quot;/&quot;, game.nsuid)``````text&gt;&gt; ARMS / 70010000000392&gt;&gt; Astro Duel Deluxe / 70010000000301&gt;&gt; Axiom Verge / 70010000000821&gt;&gt; Azure Striker GUNVOLT: STRIKER PACK / 70010000000645&gt;&gt; Beach Buggy Racing / 70010000000721``````pythonfrom nintendeals import noefor game in noe.list_switch_games():    print(game.title, &quot;/&quot;, game.nsuid)``````text&gt;&gt; I and Me / 70010000000314&gt;&gt; In Between / 70010000009184&gt;&gt; Ghost 1.0 / 70010000001386&gt;&gt; Resident Evil 0 / 70010000012848&gt;&gt; 64.0 / 70010000020867```### SearchingBuilt on top of the listing services, these provide a simple way to search for games by title or release_date:```pythonfrom nintendeals import noafor game in noa.search_switch_games(query=&quot;Zelda&quot;):    print(game.title, &quot;/&quot;, game.nsuid)``````text&gt;&gt; The Legend of Zelda‚Ñ¢: Link‚Äôs Awakening / 70010000020033&gt;&gt; The Legend of Zelda‚Ñ¢: Link's Awakening: Dreamer Edition / None&gt;&gt; Cadence of Hyrule: Crypt of the NecroDancer Featuring The Legend of Zelda / 70010000021364&gt;&gt; The Legend of Zelda‚Ñ¢: Breath of the Wild / 70010000000025```### InfoOnce you have the nsuid of the game that you want, you can call the `game_info` service. And again, each region has theirown version but they all work the same, but keep in mind that you need to use the correct nsuid for each region.Coming back to the nsuid of Breath of the Wild as an example:```pythonfrom nintendeals import noagame = noa.game_info(&quot;70010000000025&quot;)print(game.title)print(game.product_code, game.unique_id)print(game.release_date)print(game.players)print(str(game.rating[0]), game.rating[1])print(game.eshop.ca_fr)for feature, value in game.features.items():    print(&quot; *&quot;, str(feature), &quot;:&quot;, value)``````text&gt;&gt; The Legend of Zelda‚Ñ¢: Breath of the Wild&gt;&gt; HACPAAAAA AAAA&gt;&gt; 2017-03-03 00:00:00&gt;&gt; 1&gt;&gt; ESRB Everyone 10+&gt;&gt; https://www.nintendo.com/fr_CA/games/detail/the-legend-of-zelda-breath-of-the-wild-switch&gt;&gt;  * Demo Available : False&gt;&gt;  * DLC Available : False&gt;&gt;  * Nintendo Switch Online Required : True&gt;&gt;  * Save Data Cloud Supported : True``````pythonfrom nintendeals import noegame = noe.game_info(&quot;70010000000023&quot;)print(game.title)print(game.product_code, game.unique_id)print(game.release_date)print(game.players)print(str(game.rating[0]), game.rating[1])print(game.eshop.uk_en)for feature, value in game.features.items():    print(&quot; *&quot;, str(feature), &quot;:&quot;, value)``````text&gt;&gt; The Legend of Zelda: Breath of the Wild&gt;&gt; HACPAAAAA AAAA&gt;&gt; 2017-03-03 00:00:00&gt;&gt; 1&gt;&gt; PEGI 12&gt;&gt; https://www.nintendo.co.uk/Games/Nintendo-Switch/The-Legend-of-Zelda-Breath-of-the-Wild-1173609.html&gt;&gt;  * Amiibo Supported : True&gt;&gt;  * Demo Available : False&gt;&gt;  * DLC Available : False&gt;&gt;  * Nintendo Switch Online Required : False&gt;&gt;  * Save Data Cloud Supported : True&gt;&gt;  * Voice Chat Supported : False``````pythonfrom nintendeals import nojgame = noj.game_info(&quot;70010000000026&quot;)print(game.title)print(game.product_code, game.unique_id)print(game.release_date)print(game.players)print(str(game.rating[0]), game.rating[1])print(game.eshop.jp_jp)for feature, value in game.features.items():    print(&quot; *&quot;, str(feature), &quot;:&quot;, value)``````text&gt;&gt; „Çº„É´„ÉÄ„ÅÆ‰ºùË™¨„ÄÄ„Éñ„É¨„Çπ „Ç™„Éñ „Ç∂ „ÉØ„Ç§„É´„Éâ&gt;&gt; HACAAAAA AAAA&gt;&gt; 2017-03-03 00:00:00&gt;&gt; 1&gt;&gt; CERO B&gt;&gt; https://store-jp.nintendo.com/list/software/70010000000026.html&gt;&gt;  * Amiibo Supported : True&gt;&gt;  * DLC Available : True&gt;&gt;  * Nintendo Switch Online Required : False```### PricingGiven a country code (using the alpha-2 iso standard) and a game or list of games this service will fetch the current pricing of that/those games for that country. Since this service uses nsuids to fetch the price, make sure that thegames that you provide have the regional nsuid that matches the country that you want. For example, only the nsuid forthe American region will be able to fetch you the prices of Canada, Mexico and United Stated but not for Japan or Spain.```pythonfrom nintendeals import noefrom nintendeals.api import pricesgame = noe.game_info(&quot;70010000007705&quot;)print(game.title)print()price = prices.get_price(game, country=&quot;CZ&quot;)  # Czech Republicprint(price.currency)print(price.value)print(price.sale_discount, &quot;%&quot;)print(price.sale_value)print(price.sale_start)print(price.sale_end)# Alternatively you can do this for the same effect:price = game.price(country=&quot;CZ&quot;) ``` ```textDead CellsCZK625.080 %500.02020-04-19 22:00:002020-05-03 21:59:59```To reduce the amount of call to the prices api, you can also use the `get_prices` service that works in a similar waybut it expects a list of games instead of only one:```pythonfrom nintendeals import noafrom nintendeals.api import pricesbotw = noa.game_info(&quot;70010000000025&quot;)print(botw.title)celeste = noa.game_info(&quot;70010000006442&quot;)print(celeste.title)print()prices = prices.get_prices([botw, celeste], country=&quot;US&quot;)for nsuid, price in prices:    print(nsuid)    print(price.value)    print(price.sale_value)    print()``````textThe Legend of Zelda‚Ñ¢: Breath of the WildCeleste7001000000002559.99None7001000000644219.994.99```</longdescription>
</pkgmetadata>