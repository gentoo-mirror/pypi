<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># navalmartin_mir_vision_utilsA collection of various utilities for working with images in the _mir_ project. The provided utilities use to a large extent the python &lt;a href=&quot;https://pillow.readthedocs.io/en/stable/&quot;&gt;PIL&lt;/a&gt; library.## Acknowledgements The project incorporates the following repositories- ```image-quality``` https://github.com/ocampor/image-quality (for BRISQUE)- ```imutils```: https://github.com/PyImageSearch/imutils (for various utilities with OpenCV)## DependenciesThe general dependencies are:- numpy- Pillow- scipy- scikit-image- libsvmIn addition, utilities for working to PyTorch and OpenCV exists but you need to install these dependencies yourself. The ```mir_vision_config``` provides various configuration flags to customize the API. These are- ```WITH_TORCH``` - ```WITH_CV2``` - ```WITH_SKIMAGE_VERSION```## InstallationInstalling the utilities via ```pip``````pip install navalmartin-mir-vision-utils```For a specific version use```pip install navalmartin-mir-vision-utils==x.x.x```You can uninstall the project via```pip3 uninstall navalmartin-mir-vision-utils```## How to useBelow are some use-case samples. You can find more in the &lt;a href=&quot;./src/navalmartin_mir_vision_utils/examples&quot;&gt;examples&lt;/a&gt;.### Using ```image_utils```Various image utilities are provided in this module. The example belowshowcases some.```from pathlib import Pathfrom navalmartin_mir_vision_utils import (is_valid_pil_image_file,                                          get_pil_image_size,                                          get_img_files,                                          pil_image_to_bytes_string,                                          create_thumbnail_from_pil_image)from navalmartin_mir_vision_utils.mir_vison_io import get_md5_checksumif __name__ == '__main__':    image_file = Path(&quot;/home/alex/qi3/mir-engine/datasets/cracks_v_3_id_8/train/cracked/img_9_9.jpg&quot;)    image = is_valid_pil_image_file(image=image_file)    if image is not None:        print(&quot;The provided image is OK&quot;)        image_size = get_pil_image_size(image=image)        print(f&quot;Image size is {image_size}&quot;)    else:        print(&quot;The provided image is NOT OK&quot;)    base_path = Path(&quot;/home/alex/qi3/mir-engine/datasets/cracks_v_3_id_8/train/cracked/&quot;)    image_files = get_img_files(base_path=base_path)    print(f&quot;There are {len(image_files)} in {base_path}&quot;)    # calculate file checksum    image_checksum = get_md5_checksum(file=image_file)    print(f&quot;Calculated MD5 checksum {image_checksum}&quot;)    image_checksum = get_md5_checksum(file=image.tobytes())    print(f&quot;Calculated MD5 checksum {image_checksum}&quot;)        # create a thumbnail    image = create_thumbnail_from_pil_image(max_size=(50, 50),                                            image_filename=image_file)    image.show()```### Using ```image_transformers``````from pathlib import Pathfrom navalmartin_mir_vision_utils.image_transformers import pil_image_to_bytes_stringfrom navalmartin_mir_vision_utils.image_utils import load_imgfrom navalmartin_mir_vision_utils.image_enums import ImageLoadersEnumTypefrom navalmartin_mir_vision_utils.image_utils import is_valid_pil_image_from_bytes_stringfrom navalmartin_mir_vision_utils.image_utils import show_pil_imageif __name__ == '__main__':    image_path = Path(&quot;/home/alex/qi3/mir-engine/datasets/cracks_v_3_id_8/train/cracked/img_9_9.jpg&quot;)    image = load_img(path=image_path, loader=ImageLoadersEnumType.PIL)    show_pil_image(image=image)    image_bytes = pil_image_to_bytes_string(image=image)    image = is_valid_pil_image_from_bytes_string(image_byte_string=image_bytes)    show_pil_image(image=image)```### Compute basic image statistics```from pathlib import Pathfrom navalmartin_mir_vision_utils import load_img, ImageLoadersEnumTypefrom navalmartin_mir_vision_utils.statistics import compute_image_statistics, fit_gaussian_distribution_on_imageif __name__ == '__main__':    image_path = Path(&quot;/home/alex/qi3/mir-engine/datasets/cracks_v_3_id_8/train/cracked/img_9_9.jpg&quot;)    image = load_img(path=image_path, loader=ImageLoadersEnumType.PIL)    print(f&quot;Image size {image.size}&quot;)    print(f&quot;Image bands {image.getbands()}&quot;)    image_stats = compute_image_statistics(image)    print(f&quot;Image channel mean {image_stats.mean}&quot;)    print(f&quot;Image channel var {image_stats.var}&quot;)    print(f&quot;Image channel median {image_stats.median}&quot;)    channels_fit = fit_gaussian_distribution_on_image(image=image)    print(f&quot;Gaussian distribution channel fit: {channels_fit}&quot;)```### Compute image quality calculationCurrently, only the BRISQUE algorithm is supported. The implementationfrom https://github.com/ocampor/image-quality has been integrated into the utilities.```from pathlib import Pathfrom navalmartin_mir_vision_utils import load_img, ImageLoadersEnumTypefrom navalmartin_mir_vision_utils.image_quality import brisqueif __name__ == '__main__':    image_path = Path(&quot;/home/alex/qi3/mir-engine/datasets/cracks_v_3_id_8/train/cracked/img_9_9.jpg&quot;)    image = load_img(path=image_path, loader=ImageLoadersEnumType.PIL)    brisque_score = brisque.score(image)    print(brisque_score)```### Issues- ```rescale() got an unexpected keyword argument 'multichannel'```This issue may be related to the version of the skimage package you have installed. You can checkwith version is installed on your system by using```import skimageprint(skimage.__version__)```or use the variable ```WITH_SKIMAGE_VERSION``` in ```mir_vision_config```. </longdescription>
</pkgmetadata>