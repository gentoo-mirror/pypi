<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/mberr/torch-max-mem/raw/main/docs/source/logo.png&quot; height=&quot;150&quot;&gt;&lt;/p&gt;--&gt;&lt;h1 align=&quot;center&quot;&gt;  torch-max-mem&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/mberr/torch-max-mem/actions?query=workflow%3ATests&quot;&gt;        &lt;img alt=&quot;Tests&quot; src=&quot;https://github.com/mberr/torch-max-mem/workflows/Tests/badge.svg&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/cthoyt/cookiecutter-python-package&quot;&gt;        &lt;img alt=&quot;Cookiecutter template from @cthoyt&quot; src=&quot;https://img.shields.io/badge/Cookiecutter-snekpack-blue&quot; /&gt;     &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/torch_max_mem&quot;&gt;        &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/torch_max_mem&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/torch_max_mem&quot;&gt;        &lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/torch_max_mem&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/mberr/torch-max-mem/blob/main/LICENSE&quot;&gt;        &lt;img alt=&quot;PyPI - License&quot; src=&quot;https://img.shields.io/pypi/l/torch_max_mem&quot; /&gt;    &lt;/a&gt;    &lt;a href='https://torch_max_mem.readthedocs.io/en/latest/?badge=latest'&gt;        &lt;img src='https://readthedocs.org/projects/torch_max_mem/badge/?version=latest' alt='Documentation Status' /&gt;    &lt;/a&gt;    &lt;a href='https://github.com/psf/black'&gt;        &lt;img src='https://img.shields.io/badge/code%20style-black-000000.svg' alt='Code style: black' /&gt;    &lt;/a&gt;&lt;/p&gt;This package provides decorators for memory utilization maximization with PyTorch and CUDA by starting with a maximum parameter size and applying successive halving until no more out-of-memory exception occurs.## üí™ Getting StartedAssume you have a function for batched computation of nearest neighbors using brute-force distance calculation.```pythonimport torchdef knn(x, y, batch_size, k: int = 3):    return torch.cat(        [            torch.cdist(x[start : start + batch_size], y).topk(k=k, dim=1, largest=False).indices            for start in range(0, x.shape[0], batch_size)        ],        dim=0,    )```With `torch_max_mem` you can decorate this function to reduce the batch size until no more out-of-memory error occurs.```pythonimport torchfrom torch_max_mem import maximize_memory_utilization@maximize_memory_utilization()def knn(x, y, batch_size, k: int = 3):    return torch.cat(        [            torch.cdist(x[start : start + batch_size], y).topk(k=k, dim=0, largest=False).indices            for start in range(0, x.shape[0], batch_size)        ],        dim=0,    )```In the code, you can now always pass the largest sensible batch size, e.g.,```pythonx = torch.rand(100, 100, device=&quot;cuda&quot;)y = torch.rand(200, 100, device=&quot;cuda&quot;)knn(x, y, batch_size=x.shape[0])```## üöÄ InstallationThe most recent release can be installed from[PyPI](https://pypi.org/project/torch_max_mem/) with:```bash$ pip install torch_max_mem```The most recent code and data can be installed directly from GitHub with:```bash$ pip install git+https://github.com/mberr/torch-max-mem.git```To install in development mode, use the following:```bash$ git clone git+https://github.com/mberr/torch-max-mem.git$ cd torch-max-mem$ pip install -e .```## üëê ContributingContributions, whether filing an issue, making a pull request, or forking, are appreciated. See[CONTRIBUTING.md](https://github.com/mberr/torch-max-mem/blob/master/CONTRIBUTING.md) for more information on getting involved.## üëã AttributionParts of the logic have been developed with [Laurent Vermue](https://github.com/lvermue) for [PyKEEN](https://github.com/pykeen/pykeen).### ‚öñÔ∏è LicenseThe code in this package is licensed under the MIT License.### üç™ CookiecutterThis package was created with [@audreyfeldroy](https://github.com/audreyfeldroy)'s[cookiecutter](https://github.com/cookiecutter/cookiecutter) package using [@cthoyt](https://github.com/cthoyt)'s[cookiecutter-snekpack](https://github.com/cthoyt/cookiecutter-snekpack) template.## üõ†Ô∏è For Developers&lt;details&gt;  &lt;summary&gt;See developer instrutions&lt;/summary&gt;  The final section of the README is for if you want to get involved by making a code contribution.### ü•º TestingAfter cloning the repository and installing `tox` with `pip install tox`, the unit tests in the `tests/` folder can berun reproducibly with:```shell$ tox```Additionally, these tests are automatically re-run with each commit in a [GitHub Action](https://github.com/mberr/torch-max-mem/actions?query=workflow%3ATests).### üìñ Building the Documentation```shell$ tox -e docs``` ### üì¶ Making a ReleaseAfter installing the package in development mode and installing`tox` with `pip install tox`, the commands for making a new release are contained within the `finish` environmentin `tox.ini`. Run the following from the shell:```shell$ tox -e finish```This script does the following:1. Uses [Bump2Version](https://github.com/c4urself/bump2version) to switch the version number in the `setup.cfg` and   `src/torch_max_mem/version.py` to not have the `-dev` suffix2. Packages the code in both a tar archive and a wheel3. Uploads to PyPI using `twine`. Be sure to have a `.pypirc` file configured to avoid the need for manual input at this   step4. Push to GitHub. You'll need to make a release going with the commit where the version was bumped.5. Bump the version to the next patch. If you made big changes and want to bump the version by minor, you can   use `tox -e bumpversion minor` after.&lt;/details&gt;</longdescription>
</pkgmetadata>