<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>----This project has now been incorporated into [GPJax](https://github.com/JaxGaussianProcesses/GPJax).----# [JaxUtils](https://github.com/JaxGaussianProcesses/JaxUtils)[![CircleCI](https://dl.circleci.com/status-badge/img/gh/JaxGaussianProcesses/JaxUtils/tree/master.svg?style=svg)](https://dl.circleci.com/status-badge/redirect/gh/JaxGaussianProcesses/JaxUtils/tree/master)`JaxUtils` provides utility functions for the [`JaxGaussianProcesses`]() ecosystem.&lt;/h2&gt;# Contents- [PyTree](#pytree)- [Dataset](#dataset)# PyTree## Overview`jaxutils.PyTree` is a mixin class for [registering a python class as a JAX PyTree](https://jax.readthedocs.io/en/latest/pytrees.html#extending-pytrees). You would define your Python class as follows.```pythonclass MyClass(jaxutils.PyTree):    ...```## Example```pythonimport jaxutilsfrom jaxtyping import Float, Arrayclass Line(jaxutils.PyTree):    def __init__(self, gradient: Float[Array, &quot;1&quot;], intercept: Float[Array, &quot;1&quot;]) -&gt; None        self.gradient = gradient        self.intercept = intercept    def y(self, x: Float[Array, &quot;N&quot;]) -&gt; Float[Array, &quot;N&quot;]        return x * self.gradient + self.intercept```# Dataset## Overview`jaxutils.Dataset` is a datset abstraction. In future, we wish to extend this to a heterotopic and isotopic data abstraction.## Example```pythonimport jaxutilsimport jax.numpy as jnp# InputsX = jnp.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]])# Outputsy = jnp.array([[7.0], [8.0], [9.0]])# DatsetD = jaxutils.Dataset(X=X, y=y)print(f'The number of datapoints is {D.n}')print(f'The input dimension is {D.in_dim}')print(f'The output dimension is {D.out_dim}')print(f'The input data is {D.X}')print(f'The output data is {D.y}')print(f'The data is supervised {D.is_supervised()}')print(f'The data is unsupervised {D.is_unsupervised()}')``````The number of datapoints is 3The input dimension is 2The output dimension is 1The input data is [[1. 2.] [3. 4.] [5. 6.]]The output data is [[7.] [8.] [9.]]The data is supervised TrueThe data is unsupervised False```You can also add dataset together to concatenate them.```python# New inputsX_new = jnp.array([[1.5, 2.5], [3.5, 4.5], [5.5, 6.5]])# New outputsy_new = jnp.array([[7.0], [8.0], [9.0]])# New datasetD_new = jaxutils.Dataset(X=X_new, y=y_new)# Concatenate the two datasetsD = D + D_newprint(f'The number of datapoints is {D.n}')print(f'The input dimension is {D.in_dim}')print(f'The output dimension is {D.out_dim}')print(f'The input data is {D.X}')print(f'The output data is {D.y}')print(f'The data is supervised {D.is_supervised()}')print(f'The data is unsupervised {D.is_unsupervised()}')``````The number of datapoints is 6The input dimension is 2The output dimension is 1The input data is [[1.  2. ] [3.  4. ] [5.  6. ] [1.5 2.5] [3.5 4.5] [5.5 6.5]]The output data is [[7.] [8.] [9.] [7.] [8.] [9.]]The data is supervised TrueThe data is unsupervised False```</longdescription>
</pkgmetadata>