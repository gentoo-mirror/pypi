<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># NewVersion - PEP 440 version manager[![PyPI - newversion](https://img.shields.io/pypi/v/newversion.svg?color=blue&amp;label=newversion)](https://pypi.org/project/newversion)[![Docs](https://img.shields.io/readthedocs/newversion.svg?color=blue&amp;label=Builder%20docs)](https://newversion.readthedocs.io/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/newversion.svg?color=blue)](https://pypi.org/project/newversion)[![Coverage](https://img.shields.io/codecov/c/github/vemel/newversion)](https://codecov.io/gh/vemel/newversion)- [NewVersion - Your version manager](#newversion---your-version-manager)  - [Features](#features)  - [Installation](#installation)  - [Usage](#usage)    - [CLI](#cli)    - [Python library](#python-library)  - [Versioning](#versioning)  - [Latest changes](#latest-changes)## Features- Follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)- Fully compatible with [packaging.Version](https://packaging.pypa.io/en/latest/version.html)- Brings version bumping from [semver](https://pypi.org/project/semver/)- Comes with a helpful CLI tool `newversion`- Shines in CI## Installation```bashpython -m pip install newversion```## Usage### CLI```bashnewversion            # 0.0.0newversion bump major # 1.0.0# get package version from pyproject.toml, setup.cfg or setup.pynewversion package # 1.2.3newversion package | newversion bump  # 1.2.4newversion package | newversion get minor  # 2# bump minor version and update package versionnewversion package | newversion bump minor | newversion set_packageecho &quot;1.2.3rc1&quot; | newversion bump micro   # 1.2.3echo &quot;1.2.3rc1&quot; | newversion bump minor   # 1.3.0echo &quot;1.2.3rc1&quot; | newversion bump major   # 2.0.0echo &quot;1.2.3rc1&quot; | newversion bump pre     # 1.2.3rc2echo &quot;1.2.3rc1&quot; | newversion bump rc      # 1.2.3rc2echo &quot;1.2.3rc1&quot; | newversion bump alpha   # 1.2.4a1echo &quot;1.2.3rc1&quot; | newversion set micro 5  # 1.2.5rc1echo &quot;1.2.3rc1&quot; | newversion set minor 5  # 1.5.3rc1echo &quot;1.2.3rc1&quot; | newversion set major 5  # 5.2.3rc1echo &quot;1.2.3rc1&quot; | newversion set pre 5    # 1.2.3rc5echo &quot;1.2.3rc1&quot; | newversion set rc 5     # 1.2.3rc5echo &quot;1.2.3rc1&quot; | newversion set alpha 5  # 1.2.3a5echo &quot;1.2.3rc1&quot; | newversion get micro    # 1echo &quot;1.2.3rc1&quot; | newversion get minor    # 2echo &quot;1.2.3rc1&quot; | newversion get major    # 3echo &quot;1.2.3rc1&quot; | newversion get pre      # rc1echo &quot;1.2.3rc1&quot; | newversion get rc       # 1echo &quot;1.2.3rc1&quot; | newversion get alpha    # 0echo &quot;1.2.3rc1&quot; | newversion stable # 1.2.3echo &quot;1.2.3rc1&quot; | newversion is_stable       # error!echo &quot;1.2.3&quot; | newversion is_stable          # 1.2.3echo &quot;1.2.3&quot; | newversion is_stable &amp;&amp; echo &quot;Stable!&quot; # Stable!echo &quot;1.2.3rc1&quot; | newversion gt &quot;1.2.3&quot;   # error!echo &quot;1.2.3rc1&quot; | newversion lte &quot;1.2.3&quot;  # &quot;1.2.3rc1&quot;```### Python library```pythonfrom newversion import Versionversion = Version(&quot;1.2.3&quot;)next_version = version.bump_minor() # Version(&quot;1.3.0&quot;)# bump version same way as SemVerversion.dumps() # &quot;1.2.3&quot;version.bump_micro().dumps() # &quot;1.2.4&quot;version.bump_minor().dumps() # &quot;1.3.0&quot;version.bump_major().dumps() # &quot;2.0.0&quot;# create and bump pre-releasesversion.bump_prerelease().dumps() # &quot;1.2.4rc1&quot;version.bump_prerelease(bump_release=&quot;minor&quot;).dumps() # &quot;1.3.0rc1&quot;version.bump_prerelease(&quot;alpha&quot;).dumps() # &quot;1.2.4a1&quot;Version(&quot;1.2.3b4&quot;).bump_prerelease().dumps() # &quot;1.2.3b5&quot;version.bump_micro().replace(dev=1234).dumps() # &quot;1.2.4.dev1234&quot;# and post-releasesversion.bump_postrelease().dumps() # &quot;1.2.3.post1&quot;Version(&quot;1.2.3.post3&quot;).bump_postrelease(2).dumps() # &quot;1.2.3.post5&quot;# easily check if this is a pre- or dev release or a stable versionVersion(&quot;1.2.3&quot;).is_stable # TrueVersion(&quot;1.2.3a6&quot;).is_stable # FalseVersion(&quot;1.2.3.post3&quot;).is_stable # TrueVersion(&quot;1.2.3.post3&quot;).get_stable().dumps() # &quot;1.2.3&quot;```## Versioning`newversion` version follows [PEP 440](https://www.python.org/dev/peps/pep-0440/).## Latest changesFull changelog can be found in [Releases](https://github.com/vemel/newversion/releases).</longdescription>
</pkgmetadata>