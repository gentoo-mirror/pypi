<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================django-sortedm2m================.. image:: https://jazzband.co/static/img/badge.svg   :target: https://jazzband.co/   :alt: Jazzband.. image:: https://img.shields.io/pypi/v/django-sortedm2m.svg   :target: https://pypi.python.org/pypi/django-sortedm2m   :alt: PyPI Release.. image:: https://travis-ci.org/jazzband/django-sortedm2m.svg?branch=master   :target: https://travis-ci.org/jazzband/django-sortedm2m   :alt: Build Status.. image:: https://codecov.io/gh/jazzband/django-sortedm2m/branch/master/graph/badge.svg   :target: https://codecov.io/gh/jazzband/django-sortedm2m   :alt: Code coverage``sortedm2m`` is a drop-in replacement for django's own ``ManyToManyField``.The provided ``SortedManyToManyField`` behaves like the original one butremembers the order of added relations.Use Cases=========Imagine that you have a gallery model and a photo model. Usually you want arelation between these models so you can add multiple photos to one gallerybut also want to be able to have the same photo on many galleries.This is where you usually can use many to many relation. The downside is thatdjango's default implementation doesn't provide a way to order the photos inthe gallery. So you only have a random ordering which is not suitable in mostcases.You can work around this limitation by using the ``SortedManyToManyField``provided by this package as drop in replacement for django's``ManyToManyField``.Requirements============**django-sortedm2m** runs on Python 3.6+ and Django from 2.1 to 3.0.Usage=====Use ``SortedManyToManyField`` like ``ManyToManyField`` in your models::    from django.db import models    from sortedm2m.fields import SortedManyToManyField    class Photo(models.Model):        name = models.CharField(max_length=50)        image = models.ImageField(upload_to='...')    class Gallery(models.Model):        name = models.CharField(max_length=50)        photos = SortedManyToManyField(Photo)If you use the relation in your code like the following, it will remember theorder in which you have added photos to the gallery. ::    gallery = Gallery.objects.create(name='Photos ordered by name')    for photo in Photo.objects.order_by('name'):        gallery.photos.add(photo)``SortedManyToManyField``-------------------------You can use the following arguments to modify the default behavior:``sorted``~~~~~~~~~~**Default:** ``True``You can set the ``sorted`` to ``False`` which will force the``SortedManyToManyField`` in behaving like Django's original``ManyToManyField``. No ordering will be performed on relation nor will theintermediate table have a database field for storing ordering information.``sort_value_field_name``~~~~~~~~~~~~~~~~~~~~~~~~~**Default:** ``'sort_value'``Specifies how the field is called in the intermediate database table by whichthe relationship is ordered. You can change its name if you have a legacydatabase that you need to integrate into your application.``base_class``~~~~~~~~~~~~~~**Default:** ``None``You can set the ``base_class``, which is the base class of the through model ofthe sortedm2m relationship between models to an abstract base class containinga ``__str__`` method to improve the string representations of sortedm2mrelationships... note::    You also could use it to add additional fields to the through model. But    please beware: These fields will not be created or modified by an    automatically created migration. You will need to take care of migrations    yourself. In most cases when you want to add another field, consider    *not* using sortedm2m but use a ordinary Django ManyToManyField and    specify `your own through model`_... _your own through model: https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.ManyToManyField.throughMigrating a ``ManyToManyField`` to be a ``SortedManyToManyField``=================================================================If you are using Django's migration framework and want to change a``ManyToManyField`` to be a ``SortedManyToManyField`` (or the other wayaround), you will find that a migration created by Django's ``makemigrations``will not work as expected.In order to migrate a ``ManyToManyField`` to a ``SortedManyToManyField``, youchange the field in your models to be a ``SortedManyToManyField`` asappropriate and create a new migration with ``manage.py makemigrations``.Before applying it, edit the migration file and change in the ``operations``list ``migrations.AlterField`` to ``AlterSortedManyToManyField`` (import itfrom ``sortedm2m.operations``).  This operation will take care of changing theintermediate tables, add the ordering field and fill in default values.Admin=====``SortedManyToManyField`` provides a custom widget which can be used to sortthe selected items. It renders a list of checkboxes that can be sorted bydrag'n'drop.To use the widget in the admin you need to add ``sortedm2m`` to yourINSTALLED_APPS settings, like::   INSTALLED_APPS = (       'django.contrib.auth',       'django.contrib.contenttypes',       'django.contrib.sessions',       'django.contrib.sites',       'django.contrib.messages',       'django.contrib.staticfiles',       'django.contrib.admin',       'sortedm2m',       '...',   )Otherwise it will not find the css and js files needed to sort by drag'n'drop.Finally, make sure *not* to have the model listed in any ``filter_horizontal``or ``filter_vertical`` tuples inside of your ``ModelAdmin`` definitions.If you did it right, you'll wind up with something like this:.. image:: http://i.imgur.com/HjIW7MI.jpgIt's also possible to use the ``SortedManyToManyField`` with admin's``raw_id_fields`` option in the ``ModelAdmin`` definition. Add the name of the``SortedManyToManyField`` to this list to get a simple text input field. Theorder in which the ids are entered into the input box is used to sort theitems of the sorted m2m relation.Example::    from django.contrib import admin    class GalleryAdmin(admin.ModelAdmin):        raw_id_fields = ('photos',)Contribute==========This is a `Jazzband &lt;https://jazzband.co&gt;`_ project. By contributing you agree to abide by the`Contributor Code of Conduct &lt;https://jazzband.co/about/conduct&gt;`_ and follow the`guidelines &lt;https://jazzband.co/about/guidelines&gt;`_.You can find the latest development version on Github_. Get there and fork it, file bugs or send well wishes... _github: http://github.com/jazzband/django-sortedm2mRunning the tests-----------------I recommend to use ``tox`` to run the tests for all relevant python versionsall at once. Therefore install ``tox`` with ``pip install tox``, then type inthe root directory of the ``django-sortedm2m`` checkout::   toxThe tests are run against SQLite, then against PostgreSQL, then against mySQL -so you need to install PostgreSQL and mySQL on your dev environment, and shouldhave a role/user ``sortedm2m`` set up for both PostgreSQL and mySQL.Code Quality------------This project uses `isort &lt;https://github.com/timothycrosley/isort&gt;`_, `pycodestyle &lt;https://github.com/PyCQA/pycodestyle&gt;`_,and `pylint &lt;https://www.pylint.org&gt;`_ to manage validate code quality. These validations can be run with thefollowing command::   tox -e qualityChangelog=========3.1.1-----* `#191`_: Fixed JS bug for popup in Django admin.. _#191: https://github.com/jazzband/django-sortedm2m/pull/1913.1.0-----* `#178`_: Bug fixes* `#178`_: Fixed Pylint error* `#175`_: Fixed jQuery UI error* `#183`_: Migrated to GitHub Actions for CI* `#184`_: Added support for Django 3.2.. _#170: https://github.com/jazzband/django-sortedm2m/pull/170.. _#178: https://github.com/jazzband/django-sortedm2m/pull/178.. _#175: https://github.com/jazzband/django-sortedm2m/pull/175.. _#183: https://github.com/jazzband/django-sortedm2m/pull/183.. _#184: https://github.com/jazzband/django-sortedm2m/pull/1843.0.2-----* `#168`_: Restored `admin/js/jquery.init.js`.. _#168: https://github.com/jazzband/django-sortedm2m/pull/1683.0.1-----* `#164`_: Added all locales to distributable* `#162`_: Added missing files to MANIFEST.in, and removed .DS_Store files* `#150`_: Added German and Spanish translations* `#149`_: Removed `admin/js/jquery.init.js` from `SortedCheckboxSelectMultiple`.. _#164: https://github.com/jazzband/django-sortedm2m/pull/164.. _#162: https://github.com/jazzband/django-sortedm2m/pull/162.. _#150: https://github.com/jazzband/django-sortedm2m/pull/150.. _#149: https://github.com/jazzband/django-sortedm2m/pull/1493.0.0-----* `#147`_: Dropped support for Django 2.0* `#152`_: Dropped support for Django 1.10* `#152`_: Add support for Python 3.8* `#152`_: Add support for Django 3.0.. _#147: https://github.com/jazzband/django-sortedm2m/issues/147.. _#152: https://github.com/jazzband/django-sortedm2m/issues/1522.0.0-----* `#135`_: Updated README with Jazzband details, and added CONTRIBUTING.md* `#136`_: Dropped support for Python 2.6 and 3.3, and Django &lt; 1.11* `#130`_: Added support for Python 3.7 and Django 2.0 to 2.2* `#130`_: Add support of custom through models (only for Django &gt;= 2.2)* `#138`_: Added coverage reporting.. _#130: https://github.com/jazzband/django-sortedm2m/issues/130.. _#135: https://github.com/jazzband/django-sortedm2m/pull/135.. _#136: https://github.com/jazzband/django-sortedm2m/pull/136.. _#138: https://github.com/jazzband/django-sortedm2m/pull/1381.5.0-----* `#101`_: Add support for a custom base class for the many to many intermediate  class. See the README for documentation. Thank you Rohith Asrk for the patch.* `#87`_: Fix ``AlterSortedManyToManyField`` operation to support custom set  ``_sort_field_name``... _#101: https://github.com/jazzband/django-sortedm2m/pull/101.. _#87: https://github.com/jazzband/django-sortedm2m/issues/871.4.0-----* `#104`_: Add compatibility for Django 1.10 and 1.11!  Thank you Frankie Dintino for the patch.* `#94`_: Add french translation files. Mainly for strings in the admin.  Thanks to ppython for the patch.* `#93`_: Prevent users from accidentally importing and using  ``ManyToManyField`` instead of ``SortedManyToManyField`` from ``sortedm2m``.  Thanks Dayne May for the patch... _#104: https://github.com/jazzband/django-sortedm2m/pull/104.. _#94: https://github.com/jazzband/django-sortedm2m/pull/94.. _#93: https://github.com/jazzband/django-sortedm2m/pull/931.3.3-----* `#91`_ &amp; `#92`_: Fix admin widget, when used with Django 1.10. The add a new  item opup was not closing. Thanks to Tipuch for the patch... _#91: https://github.com/jazzband/django-sortedm2m/issues/91.. _#92: https://github.com/jazzband/django-sortedm2m/pull/921.3.2-----* `#80`_ &amp; `#83`_: Fix ``SortedMultipleChoiceField.clean`` if the validated  value is ``None``. Thanks to Alex Mannhold for the patch... _#80: https://github.com/jazzband/django-sortedm2m/issues/80.. _#83: https://github.com/jazzband/django-sortedm2m/pull/831.3.1-----* `#57`_ &amp; `#81`_: Fix add related object popup error prevents operation when  no related objects already exist. Thanks to Vadim Sikora for the fix... _#57: https://github.com/jazzband/django-sortedm2m/issue/57.. _#81: https://github.com/jazzband/django-sortedm2m/pull/811.3.0-----* `#79`_: Use `.sortedm2m-item` selector in the widget's JavaScript code to  target the list items. This was previously `ul.sortedm2m li`. This improves  compatibility other markup that does not want to use `ul`/`li` tags. Thanks  to Michal Dabski for the patch.  **Note:** If you use custom markup with the JavaScript code, you need to make  sure that the items now have the `sortedm2m-item` class name.* `#76`_: Add support for to_field_name to SortedMultipleChoiceField. Thanks  to Conrad Kramer for the patch... _#76: https://github.com/jazzband/django-sortedm2m/pull/76.. _#79: https://github.com/jazzband/django-sortedm2m/pull/791.2.2-----* `#75`_: Fix &quot;add another&quot; admin popup. It didn't refresh the list of items in Django  1.8+. Thanks to Vadim Sikora for the patch... _#75: https://github.com/jazzband/django-sortedm2m/pull/751.2.1-----* *skipped*1.2.0-----* Dropping Python 3.2 support. It has reached end of life in February 2016.1.1.2-----* `#71`_: Don't break collectstatic for some cases. Therefore we removed the  STATIC_URL prefix from the form media definition in  ``SortedCheckboxSelectMultiple``. Thanks to Kirill Ermolov for the  patch... _#71: https://github.com/jazzband/django-sortedm2m/issues/711.1.1-----* `#70`_: CSS fix for Django 1.9 new admin design. Thanks to Maarten Draijer  for the patch... _#70: https://github.com/jazzband/django-sortedm2m/pull/701.1.0-----* `#59`_, `#65`_, `#68`_: Django 1.9 support. Thanks to Scott Kyle and Jasper Maes for  patches.* `#67`_: Support for disabling migrations for some models, that can be  decided by Django's DB router (with the ``allow_migrate_model`` method).  Thanks to @hstanev for the patch... _#59: https://github.com/jazzband/django-sortedm2m/pull/59.. _#65: https://github.com/jazzband/django-sortedm2m/pull/65.. _#67: https://github.com/jazzband/django-sortedm2m/pull/67.. _#68: https://github.com/jazzband/django-sortedm2m/pull/681.0.2-----* `#56`_: Fix bug where order is wrong after adding objects. That had to do  with using the ``count`` of the m2m objects for the next ``sort_value``  value. We now use the corret ``Max`` aggregation to make sure that newly  added objects will be in order. Thanks to Scott Kyle for the report and  patch... _#56: https://github.com/jazzband/django-sortedm2m/pull/561.0.1-----* Performance fix for sorted m2m admin widget. See `#54`_ for details. Thanks  to Jonathan Liuti for fixing this... _#54: https://github.com/jazzband/django-sortedm2m/pull/541.0.0-----* Hooray, we officially declare **django-sortedm2m** to be stable and  promise to be backwards compatible to new releases (we already doing good  since since the beginning in that regard).* Django 1.8 support for ``AlterSortedManyToManyField`` operation. Thanks to  Nicolas Trésegnie for starting the implementation.0.10.0------* The creation of the sortedm2m intermediate model and database table is now  fully done inside of the ``SortedManyToManyField`` class. That makes it much  easier to modify the creation of this when creating a custom subclass of this  field. See `#49`_ for an example usecase.* Adding support for the custom field arguments like ``sorted`` and  ``sort_value_field_name`` in Django 1.7 migrations. Thanks to Christian  Kohlstedde for the patch... _#49: https://github.com/jazzband/django-sortedm2m/issues/490.9.5-----* Fixing ``setup.py`` when run on a system that does not use UTF-8 as default  encoding. See `#48`_ for details. Thanks to Richard Mitchell for the patch... _#48: https://github.com/jazzband/django-sortedm2m/pull/480.9.4-----* Fix: ``SortedMultipleChoiceField`` did not properly report changes of the  data to ``Form.changed_data``. Thanks to @smcoll for the patch.0.9.3-----* Fix: ``AlterSortedManyToManyField`` operation failed for postgres databases.* Testing against MySQL databases.0.9.2-----* Fix: ``AlterSortedManyToManyField`` operation failed for many to many fields  which already contained some data.0.9.1-----* Fix: When using the sortable admin widget, deselecting an item in the list  had not effect. Thank you to madEng84 for the report and patch!0.9.0-----* Adding ``AlterSortedManyToManyField`` migration operation that allows you to  migrate from ``ManyToManyField`` to ``SortedManyToManyField`` and vice  versa. Thanks to Joaquín Pérez for the patch!* Fix: Supporting migrations in Django 1.7.4.* Fix: The admin widget is not broken anymore for dynamically added inline  forms. Thanks to Rubén Díaz for the patch!0.8.1-----* Adding support for Django 1.7 migrations. Thanks to Patryk Hes and Richard  Barran for their reports.* Adding czech translations. Thanks to @cuchac for the pull request.0.8.0-----* Adding support for Django 1.7 and dropping support for Django 1.4.0.7.0-----* Adding support for ``prefetch_related()``. Thanks to Marcin Ossowski for  the idea and patch.0.6.1-----* Correct escaping of *for* attribute in label for the sortedm2m widget. Thanks  to Mystic-Mirage for the report and fix.0.6.0-----* Python 3 support!* Better widget. Thanks to Mike Knoop for the initial patch.0.5.0-----* Django 1.5 support. Thanks to Antti Kaihola for the patches.* Dropping Django 1.3 support. Please use django-sortedm2m&lt;0.5 if you need to  use Django 1.3.* Adding support for a ``sort_value_field_name`` argument in  ``SortedManyToManyField``. Thanks to Trey Hunner for the idea.0.4.0-----* Django 1.4 support. Thanks to Flavio Curella for the patch.* south support is only enabled if south is actually in your INSTALLED_APPS  setting. Thanks to tcmb for the report and Florian Ilgenfritz for the patch.0.3.3-----* South support (via monkeypatching, but anyway... it's there!). Thanks to  Chris Church for the patch. South migrations won't pick up a changed  ``sorted`` argument though.0.3.2-----* Use already included jQuery version in global scope and don't override with  django's version. Thank you to Hendrik van der Linde for reporting this  issue.0.3.1-----* Fixed packaging error.0.3.0-----* Heavy internal refactorings. These were necessary to solve a problem with  ``SortedManyToManyField`` and a reference to ``'self'``.0.2.5-----* Forgot to exclude debug print/console.log statements from code. Sorry.0.2.4-----* Fixing problems with ``SortedCheckboxSelectMultiple`` widget, especially in  admin where a &quot;create and add another item&quot; popup is available.0.2.3-----* Fixing issue with primary keys instead of model instances for ``.add()`` and  ``.remove()`` methods in ``SortedRelatedManager``.0.2.2-----* Fixing validation error for ``SortedCheckboxSelectMultiple``. It caused  errors if only one value was passed.0.2.1-----* Removed unnecessary reference of jquery ui css file in  ``SortedCheckboxSelectMultiple``. Thanks to Klaas van Schelven and Yuwei Yu  for the hint.0.2.0-----* Added a widget for use in admin.</longdescription>
</pkgmetadata>