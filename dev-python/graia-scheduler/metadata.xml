<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Graia Scheduler一个基于 `asyncio`, 设计简洁, 代码简单的计划任务库, 使用 `loop.create_task` 创建计划任务;  同时使用生成器特性与 `croniter` 的定时设计, 轻盈而强大.## Install```bashpip install graia-scheduler# or use pdmpdm add graia-scheduler```## 使用**0.1以前的版本:**```pythonimport asynciofrom graia.broadcast import Broadcastfrom graia.scheduler import GraiaSchedulerfrom graia.scheduler.timers import crontabifyloop = asyncio.new_event_loop()bcc = Broadcast(loop=loop)scheduler = GraiaScheduler(loop, bcc)@scheduler.schedule(crontabify(&quot;* * * * * *&quot;))def something_scheduled():    print(&quot;print every second.&quot;)loop.run_forever()```**0.1及后续的版本:**```pythonimport asynciofrom graia.broadcast import Broadcastfrom graia.scheduler import GraiaSchedulerfrom graia.scheduler.timers import crontabifyloop = asyncio.new_event_loop()bcc = Broadcast(loop=loop)scheduler = GraiaScheduler(loop, bcc)@scheduler.schedule(crontabify(&quot;* * * * * *&quot;))def something_scheduled():    print(&quot;print every second.&quot;)loop.run_until_complete(scheduler.run())```因为基于 `BroadcastControl`, 你可以享受使用 `Dispatcher`, `Interrupt`, `Decorator` 的开发体验.</longdescription>
</pkgmetadata>