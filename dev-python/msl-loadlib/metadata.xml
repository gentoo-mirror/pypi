<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===========MSL-LoadLib===========|docs| |pypi| |travis| |appveyor|This package loads a shared library in Python. It is basically just a thin wrapperaround ctypes_ (for libraries that use the ``__cdecl`` or ``__stdcall`` callingconvention), `Python for .NET`_ (for libraries that use Microsoft's .NET Framework,``CLR``), Py4J_ (for Java ``.jar`` or ``.class`` files) and comtypes_ (forlibraries that use the `Component Object Model`_).However, the primary advantage is that it is possible to communicate with a 32-bitlibrary from 64-bit Python.MSL-LoadLib is a pure-python package, but, `Python for .NET`_ depends on the .NETCommon Language Runtime (CLR) on Windows and Mono Runtime on Linux and macOS andPy4J_ depends on having a `Java Virtual Machine`_ installed.Install-------To install **MSL-LoadLib** run:.. code-block:: console   pip install msl-loadlibAlternatively, using the `MSL Package Manager`_ run:.. code-block:: console   msl install loadlibOptional dependencies:* `Python for .NET`_* Py4J_* comtypes_To set up your environment on Linux, please follow the instructions on the`prerequisites &lt;https://msl-loadlib.readthedocs.io/en/latest/install.html#prerequisites&gt;`_section of the documentation.Examples--------If you are loading a 64-bit library in 64-bit Python (or a 32-bit library in32-bit Python), then you can directly load the library using ``LoadLibrary``.The following examples load a 64-bit library in a 64-bit Python interpreter.If you are using a 32-bit Python interpreter then replace the **64** with **32**in the filename.Import the ``LoadLibrary`` class and the directory where the example librariesare located.. code-block:: pycon   &gt;&gt;&gt; from msl.loadlib import LoadLibrary   &gt;&gt;&gt; from msl.examples.loadlib import EXAMPLES_DIRIf the file extension is not included then a default extension,``.dll`` (Windows) or ``.so`` (Linux), is used.Load a `C++ &lt;https://github.com/MSLNZ/msl-loadlib/blob/main/msl/examples/loadlib/cpp_lib.cpp&gt;`_library and call the ``add`` function.. invisible-code-block: pycon   &gt;&gt;&gt; SKIP_IF_32BIT().. code-block:: pycon   &gt;&gt;&gt; cpp = LoadLibrary(EXAMPLES_DIR + '/cpp_lib64')   &gt;&gt;&gt; cpp.lib.add(1, 2)   3Load a `FORTRAN &lt;https://github.com/MSLNZ/msl-loadlib/blob/main/msl/examples/loadlib/fortran_lib.f90&gt;`_library and call the ``factorial`` function.. code-block:: pycon   &gt;&gt;&gt; fortran = LoadLibrary(EXAMPLES_DIR + '/fortran_lib64')With a FORTRAN library you must pass values by reference using ctypes_, and, sincethe returned value is not of type ``int`` we must configure ctypes_ for a valueof type ``double`` to be returned.. code-block:: pycon   &gt;&gt;&gt; from ctypes import byref, c_int, c_double   &gt;&gt;&gt; fortran.lib.factorial.restype = c_double   &gt;&gt;&gt; fortran.lib.factorial(byref(c_int(37)))   1.3763753091226343e+43Load a `.NET &lt;https://github.com/MSLNZ/msl-loadlib/blob/main/msl/examples/loadlib/dotnet_lib.cs&gt;`_library and call the ``reverse_string`` function, we must specify that the librarytype is a .NET library by passing in the ``'net'`` argument.. code-block:: pycon   &gt;&gt;&gt; net = LoadLibrary(EXAMPLES_DIR + '/dotnet_lib64.dll', 'net')   &gt;&gt;&gt; net.lib.StringManipulation().reverse_string('abcdefghijklmnopqrstuvwxyz')   'zyxwvutsrqponmlkjihgfedcba'Load `Java &lt;https://github.com/MSLNZ/msl-loadlib/blob/main/msl/examples/loadlib/Trig.java&gt;`_byte code and call the ``cos`` function.. code-block:: pycon   &gt;&gt;&gt; java = LoadLibrary(EXAMPLES_DIR + '/Trig.class')   &gt;&gt;&gt; java.lib.Trig.cos(1.234)   0.33046510807172985Python interacts with the `Java Virtual Machine`_ via a local network socket andtherefore the connection needs to be closed when you are done using the Java library.. code-block:: pycon   &gt;&gt;&gt; java.gateway.shutdown()To load a `Component Object Model`_ (COM) library pass in the library's Program ID.*NOTE: This example will only work on Windows.*Here we load the FileSystemObject_ library and include the ``'com'`` argument toindicate that it is a COM library... invisible-code-block: pycon   &gt;&gt;&gt; SKIP_IF_NOT_WINDOWS().. code-block:: pycon   &gt;&gt;&gt; com = LoadLibrary('Scripting.FileSystemObject', 'com')We then use the library to create, edit and close a text file.. code-block:: pycon   &gt;&gt;&gt; fp = com.lib.CreateTextFile('a_new_file.txt')   &gt;&gt;&gt; fp.WriteLine('This is a test')   0   &gt;&gt;&gt; fp.Close()   0.. invisible-code-block: pycon   &gt;&gt;&gt; import os   &gt;&gt;&gt; os.remove('a_new_file.txt')`Inter-process communication &lt;ipc_&gt;`_ is used to access a 32-bit shared libraryfrom a module that is running within a 64-bit Python interpreter. The procedureuses a client-server protocol where the client is a subclass of ``msl.loadlib.Client64``and the server is a subclass of ``msl.loadlib.Server32``. See the`tutorials &lt;https://msl-loadlib.readthedocs.io/en/latest/interprocess_communication.html&gt;`_for examples on how to implement `inter-process communication &lt;ipc_&gt;`_.Documentation-------------The documentation for **MSL-LoadLib** can be found`here &lt;https://msl-loadlib.readthedocs.io/en/latest/index.html&gt;`_... |docs| image:: https://readthedocs.org/projects/msl-loadlib/badge/?version=stable   :target: https://msl-loadlib.readthedocs.io/en/stable/   :alt: Documentation Status.. |pypi| image:: https://badge.fury.io/py/msl-loadlib.svg   :target: https://badge.fury.io/py/msl-loadlib.. |travis| image:: https://img.shields.io/travis/MSLNZ/msl-loadlib/main.svg?label=Travis-CI   :target: https://travis-ci.org/MSLNZ/msl-loadlib.. |appveyor| image:: https://img.shields.io/appveyor/ci/jborbely/msl-loadlib/main.svg?label=AppVeyor   :target: https://ci.appveyor.com/project/jborbely/msl-loadlib/branch/main.. _ctypes: https://docs.python.org/3/library/ctypes.html.. _Python for .NET: https://pythonnet.github.io/.. _Py4J: https://www.py4j.org/.. _ipc: https://en.wikipedia.org/wiki/Inter-process_communication.. _Java Virtual Machine: https://en.wikipedia.org/wiki/Java_virtual_machine.. _MSL Package Manager: https://msl-package-manager.readthedocs.io/en/latest/.. _comtypes: https://pythonhosted.org/comtypes/#.. _Component Object Model: https://en.wikipedia.org/wiki/Component_Object_Model.. _FileSystemObject: https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/filesystemobject-object</longdescription>
</pkgmetadata>