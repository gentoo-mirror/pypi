<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SAX&gt; S + Autograd + XLA![SAX LOGO](docs/source/_static/img/logo.svg)Autograd and XLA for S-parameters - a scatter parameter circuit simulator andoptimizer for the frequency domain based on [JAX](https://github.com/google/jax).The simulator was developed for simulating Photonic Integrated Circuits but in fact isable to perform any S-parameter based circuit simulation. The goal of SAX is to be athin wrapper around JAX with some basic tools for S-parameter based circuit simulationand optimization. Therefore, SAX does not define any special datastructures and tries tostay as close as possible to the functional nature of JAX. This makes it very easy toget started with SAX as you only need functions and standard python dictionaries. Let'sdive in...## Quick Start[Full Quick Start page](https://flaport.github.io/sax/examples/01_quick_start.html) -[Documentation](https://flaport.github.io/sax).Let's first import the SAX library, along with JAX and the JAX-version of numpy:```pythonimport saximport jaximport jax.numpy as jnp```Define a model function for your component. A SAX model is just a function that returnsan 'S-dictionary'. For example a directional coupler:```pythondef coupler(coupling=0.5):    kappa = coupling**0.5    tau = (1-coupling)**0.5    sdict = sax.reciprocal({        (&quot;in0&quot;, &quot;out0&quot;): tau,        (&quot;in0&quot;, &quot;out1&quot;): 1j*kappa,        (&quot;in1&quot;, &quot;out0&quot;): 1j*kappa,        (&quot;in1&quot;, &quot;out1&quot;): tau,    })    return sdictcoupler(coupling=0.3)```    {('in0', 'out0'): 0.8366600265340756,     ('in0', 'out1'): 0.5477225575051661j,     ('in1', 'out0'): 0.5477225575051661j,     ('in1', 'out1'): 0.8366600265340756,     ('out0', 'in0'): 0.8366600265340756,     ('out1', 'in0'): 0.5477225575051661j,     ('out0', 'in1'): 0.5477225575051661j,     ('out1', 'in1'): 0.8366600265340756}Or a waveguide:```pythondef waveguide(wl=1.55, wl0=1.55, neff=2.34, ng=3.4, length=10.0, loss=0.0):    dwl = wl - wl0    dneff_dwl = (ng - neff) / wl0    neff = neff - dwl * dneff_dwl    phase = 2 * jnp.pi * neff * length / wl    amplitude = jnp.asarray(10 ** (-loss * length / 20), dtype=complex)    transmission =  amplitude * jnp.exp(1j * phase)    sdict = sax.reciprocal({(&quot;in0&quot;, &quot;out0&quot;): transmission})    return sdictwaveguide(length=100.0)```    {('in0', 'out0'): 0.97953-0.2013j, ('out0', 'in0'): 0.97953-0.2013j}These component models can then be combined into a circuit:```pythonmzi, _ = sax.circuit(    netlist={        &quot;instances&quot;: {            &quot;lft&quot;: coupler,            &quot;top&quot;: waveguide,            &quot;rgt&quot;: coupler,        },        &quot;connections&quot;: {            &quot;lft,out0&quot;: &quot;rgt,in0&quot;,            &quot;lft,out1&quot;: &quot;top,in0&quot;,            &quot;top,out0&quot;: &quot;rgt,in1&quot;,        },        &quot;ports&quot;: {            &quot;in0&quot;: &quot;lft,in0&quot;,            &quot;in1&quot;: &quot;lft,in1&quot;,            &quot;out0&quot;: &quot;rgt,out0&quot;,            &quot;out1&quot;: &quot;rgt,out1&quot;,        },    })type(mzi)```    functionAs you can see, the mzi we just created is just another component model function! To simulate it, call the mzi function with the (possibly nested) settings of its subcomponents. Global settings can be added to the 'root' of the circuit call and will be distributed over all subcomponents which have a parameter with the same name (e.g. 'wl'):```pythonwl = jnp.linspace(1.53, 1.57, 1000)result = mzi(wl=wl, lft={'coupling': 0.3}, top={'length': 200.0}, rgt={'coupling': 0.8})plt.plot(1e3*wl, jnp.abs(result['in0', 'out0'])**2, label=&quot;in0-&gt;out0&quot;)plt.plot(1e3*wl, jnp.abs(result['in0', 'out1'])**2, label=&quot;in0-&gt;out1&quot;, ls=&quot;--&quot;)plt.xlabel(&quot;λ [nm]&quot;)plt.ylabel(&quot;T&quot;)plt.grid(True)plt.figlegend(ncol=2, loc=&quot;upper center&quot;)plt.show()```![output](docs/source/_static/img/output_10_0.png)Those are the basics. For more info, check out the **full**[SAX Quick Start page](https://flaport.github.io/sax/examples/01_quick_start.html) or the rest of the [Documentation](https://flaport.github.io/sax).## InstallationYou can install SAX with pip:```shpip install sax```If you want to be able to run all the example notebooks, you'll need python&gt;=3.10 andyou should install the development version of SAX:```shpip install 'sax[dev]'```## LicenseCopyright © 2023, Floris Laporte, [Apache-2.0 License](https://github.com/flaport/sax/blob/master/LICENSE)</longdescription>
</pkgmetadata>