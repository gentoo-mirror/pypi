<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Mdclogpy========Structured logging library with Mapped Diagnostic Context* Outputs the log entries to standard out in structured format, json currently.* Severity based filtering.* Supports Mapped Diagnostic Context (MDC).  Set MDC pairs are automatically added to log entries by the library.Log entry format----------------Each log entry written with mdclog_write() function contains* Timestamp* Logger identity* Log entry severity* All existing MDC pairs* Log message textCurrently the library only supports JSON formatted output written to standardout of the process.*Example log output*`{&quot;ts&quot;: 1603103945651, &quot;crit&quot;: &quot;ERROR&quot;, &quot;id&quot;: &quot;test.py&quot;, &quot;mdc&quot;: {&quot;PID&quot;:101,&quot;SYSTEM_NAME&quot;: &quot;Cloud-Space&quot;, &quot;HOST_NAME&quot;: &quot;master&quot;, &quot;SERVICE_NAME&quot;: &quot;TestApp&quot;, &quot;CONTAINER_NAME&quot;: &quot;&quot;, &quot;POD_NAME&quot;: &quot;&quot;}, &quot;msg&quot;: &quot;Hello World!&quot;}`Install-------Install from PyPi```python3 -m pip install mdclogpy```Install using the source```python3 setup.py install```Usage-----The library can be used in two ways shown below.1) Use the root logger```python  import mdclogpy  mdclogpy.mdclog_format_init(configmap_monitor=True)   mdclogpy.error(&quot;This is an error log&quot;)```2) Create a logger instance```python  from mdclogpy import Logger  my_logger = Logger()  my_logger.mdclog_format_init(configmap_monitor=True)  my_logger.error(&quot;This is an error log&quot;)```A program can create several logger instances.mdclog_format_init() Adds the MDC log format with HostName, PodName, ContainerName, ServiceName,PID,CallbackNotifyforLogFieldChangePass configmap_monitor = False in mdclog_format_init() function to stop dynamic log level change based on configmap.Mapped Diagnostics Context--------------------------The MDCs are logger instance specific key-value pairs, which are included toall log entries written via the logger instance.By default, the library implements a root logger instance.MDCs added to the root logger instance are added only to the log entrieswritten via the root logger instance.License-------Copyright (c) 2019 AT&amp;T Intellectual Property.Copyright (c) 2018-2019 Nokia.Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.This source code is part of the near-RT RIC (RAN Intelligent Controller)platform project (RICP).Unit testing------------To run the unit tests run the following command in the package directory::`python3 -m unittest discover`CI--The ci is done with the `tox` tool. See `tox.ini` file for details.</longdescription>
</pkgmetadata>