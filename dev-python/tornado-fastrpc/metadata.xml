<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**WARNING****tornado-fastrpc** is deprecated, for XML-RPC usehttps://github.com/seifert/async-rpc instead of this library.**async-rpc** is based on **asyncio**, so it is not only forTornado, but for **asyncio** in generral. Do you need**FastRPC**? Create an issue, I have library for **FastRPC**too, but it has not been published yet. However, I thint, itnever mind, probably nobody outsite Seznam.cz use **FastRPC**:-).===============tornado-fastrpc===============Non-blocking XML-RPC and FastRPC (see https://github.com/seznam/fastrpc)client for Python's Tornado. If FastRPC is not available, only XML-RPCprotocol will be supported. Python 2.7 and Python 3.4 (or higher) aresupported.Instalation-----------Requirements:+ *pycurl*+ *Tornado* 3.2 or higherOptional requirements:+ *fastrpc* (*libfastrpc* + *fastrpc* Python's module)Instalation and tests:::    python setup.py install    python setup.py testBuild Debian Jessie package (requires ``dpkg-buildpackage`` + ``lintian``and dependencies in ``Build-Depends`` option in ``debian/control`` file.Before building package, checkout debian-* branch.::    python setup.py bdist_debUssage------::    proxy = ServerProxy('http://example.com/RPC2:8000',                        connect_timeout=5.0,                        timeout=5.0,                        use_binary=True)    class BazHandler(tornado.web.RequestHandler):        @tornado.gen.coroutine        def get(self):            try:                res = yield proxy.getData(123)            except Exception as e:                self.write('Error: {}'.format(e))            else:                self.write('Data: {}'.format(res.value))    class BarHandler(tornado.web.RequestHandler):        @tornado.gen.coroutine        def get(self):            res = yield proxy.getData(123, quiet=True)            if res.success:                self.write('Data: {}'.format(res.value))            else:                self.write('Error: {}'.format(res.exception))Documentation-------------ServerProxy class`````````````````*class* tornado_fastrpc.client.\ **ServerProxy**\(*uri,connect_timeout=5.0, timeout=5.0, use_binary=False, user_agent=None,keep_alive=False, use_http10=True, http_proxy=None, max_clients=10*)    Async FastRPC client for Tornado, tt uses ``pycurl`` backend.    Manages communication with a remote RPC server.    - **url** *&lt;string&gt;*          URL address    - **connect_timeout** *&lt;float&gt;*          Timeout for initial connection in seconds    - **request_timeout** *&lt;float&gt;*          Timeout for entire request in seconds    - **use_binary** *&lt;bool&gt;*          Force binary protocol    - **user_agent** *&lt;string&gt;*          User-Agent string    - **keep_alive** *&lt;bool&gt;*          Allow keep-alive connection    - **use_http10** *&lt;bool&gt;*          Force HTTP/1.0 protocol instead of HTTP/1.1    - **http_proxy** *&lt;string&gt;*          HTTP proxy, eg. http://user:pass@example.com:80    - **max_clients** *&lt;int&gt;*          Size of the Curl's connection poolResult object`````````````*class* tornado_fastrpc.client.\ **Result**\(*success, value, exception*)Return type for FastRPC call. Contains attributes:    - **success** *&lt;bool&gt;*          ``True`` if operation succeeded, else ``False``    - **value**          contains returning value if operation succeeded, else ``None``    - **exception** *&lt;bool&gt;*          contains instance of the exception if operation failed, else ``None``Fault object````````````*class* tornado_fastrpc.client.\ **Fault**\(*faultCode, faultString*)    Exception, indicates an XML-RPC error.    - **faultCode** *&lt;string&gt;*          Error code    - **faultString** *&lt;string&gt;*          Error messageLicense-------3-clause BSD</longdescription>
</pkgmetadata>