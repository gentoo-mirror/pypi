<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Origami&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;docs/papersnake.svg&quot; width=&quot;250px&quot; /&gt;&lt;br /&gt;Launch, edit, and share Jupyter notebooks &lt;i&gt;in automation&lt;/i&gt;.&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/noteable-io/origami/actions/workflows/ci.yaml&quot;&gt;    &lt;img src=&quot;https://github.com/noteable-io/origami/actions/workflows/ci.yaml/badge.svg&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/noteable-io/origami&quot; &gt;  &lt;img src=&quot;https://codecov.io/gh/noteable-io/origami/branch/main/graph/badge.svg&quot; alt=&quot;codecov code coverage&quot;/&gt;  &lt;/a&gt;&lt;img alt=&quot;PyPI - License&quot; src=&quot;https://img.shields.io/pypi/l/noteable-origami&quot; /&gt;&lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/noteable-origami&quot; /&gt;&lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/noteable-origami&quot;&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;&lt;/p&gt;---[Install](#installation) | [Getting Started](#getting-started) | [Documentation](https://noteable-origami.readthedocs.io) | [License](./LICENSE) | [Code of Conduct](./CODE_OF_CONDUCT.md) | [Contributing](./CONTRIBUTING.md)&lt;!-- --8&lt;-- [start:intro] --&gt;## Intro to OrigamiOrigami is a üêç Python library for talking to [Noteable notebooks](https://noteable.io/). This is the official way to access the full breadth of API calls and access patterns in async Python for rich programmatic access to notebooks. You can use [Noteable for free](https://app.noteable.io) with a quick signup.&lt;!-- --8&lt;-- [end:intro] --&gt;&lt;!-- --8&lt;-- [start:requirements] --&gt;## RequirementsPython 3.8+&lt;!-- --8&lt;-- [end:requirements] --&gt;&lt;!-- --8&lt;-- [start:install] --&gt;## InstallationFor stable release:```bashpip install noteable-origami``````bashpoetry add noteable-origami```For alpha pre-release:```bashpip install noteable-origami --pre```&lt;!-- --8&lt;-- [end:install] --&gt;## Getting Started&gt; **Note**&gt; Developer note: For pre-1.0 release information, see the [pre-1.0 README](https://github.com/noteable-io/origami/blob/release/0.0.35/README.md)### API Tokens&lt;!-- --8&lt;-- [start:api-tokens] --&gt;The Noteable API requires an authentication token. You can manage tokens at the Noteable user settings page.1. Log in to [Noteable](https://app.noteable.io) (sign up is free).2. In the User Settings tab, navigate to `API Tokens` and generate a new token.![](./screenshots/user_settings__api_tokens.png)3. Copy the generated token to the clipboard and save in a secure location, to be read into your Python environment later.![](./screenshots/user_settings__api_tokens2.png)The token can be passed directly in to `APIClient` on initialization, or set it as env var `NOTEABLE_TOKEN`.### Usage&lt;!-- --8&lt;-- [end:api-tokens] --&gt;The example below will guide you through the basics of creating a notebook, adding content, executing code, and seeing the output. For more examples, see our [Use Cases](../usage) section.### Setting up the `APIClient`&lt;!-- --8&lt;-- [start:api-client] --&gt;Using the API token you created previously, load it into your notebook environment so it can be passed into the `APIClient` directly. (If you're in [Noteable](https://app.noteable.io), you can create a [Secret](https://docs.noteable.io/product-docs/collaborate/access-and-visibility/secrets-permissions) that can be read in as an environment variable.)```pythonimport osfrom origami.clients.api import APIClient# if we have the `NOTEABLE_TOKEN` environment variable set,# we don't need to pass it in to the APIClient directlyapi_client = APIClient()```*The `APIClient` is what we'll use to make HTTP requests to Noteable's REST API.*&lt;!-- --8&lt;-- [end:api-client] --&gt;### Checking your user information&lt;!-- --8&lt;-- [start:user-info] --&gt;```pythonuser = await api_client.user_info()user`````` {.python .no-copy }User(    id=UUID('f1a2b3c4-5678-4d90-ef01-23456789abcd'),    created_at=datetime.datetime(2023, 1, 1, 0, 0, 0, 0, tzinfo=datetime.timezone.utc),    updated_at=datetime.datetime(2023, 1, 1, 0, 0, 0, 0, tzinfo=datetime.timezone.utc),    deleted_at=None,    handle='ori.gami',    email='origami@noteable.io',    first_name='Ori',    last_name='Gami',    origamist_default_project_id=UUID('a1b2c3d4-e5f6-4a7b-8123-abcdef123456'),    principal_sub='pat:0a1b2c3d4e5f6g7h8i9j10k11l',    auth_type='pat:0a1b2c3d4e5f6g7h8i9j10k11l')```(The information returned should match your user account information associated with the previously-generated API token.)&lt;!-- --8&lt;-- [end:user-info] --&gt;### Creating a new Notebook&gt; **Note**&gt; For this example, we're using the `origamist_default_project_id`, which is the default project designed to be used by the ChatGPT plugin. Feel free to replace it with projects you have access to in [Noteable](https://app.noteable.io/)!&lt;!-- --8&lt;-- [start:create-notebook] --&gt;Provide a file `path` as well as a `project_id` (UUID) where the Notebook will exist.```pythonproject_id = user.origamist_default_project_idfile = await api_client.create_notebook(    project_id=project_id,    path=&quot;Origami Demo.ipynb&quot;)file`````` {.python .no-copy }File(    id=UUID('bcd12345-6789-4abc-d012-3456abcdef90'),    created_at=datetime.datetime(2023, 2, 2, 0, 0, 0, 0, tzinfo=datetime.timezone.utc),    updated_at=datetime.datetime(2023, 2, 2, 0, 0, 0, 0, tzinfo=datetime.timezone.utc),    deleted_at=None,    filename='Origami Demo.ipynb',    path=PosixPath('Origami Demo.ipynb'),    project_id=UUID('a1b2c3d4-e5f6-4a7b-8123-abcdef123456'),    space_id=UUID('7890ab12-3412-4cde-8901-2345abcdef67'),    size=0,    mimetype=None,    type='notebook',    current_version_id=None,    presigned_download_url=None,    url='https://app.noteable.io/f/abc12312-3412-4abc-8123-abc12312abc1/Origami Demo.ipynb')```&lt;!-- --8&lt;-- [end:create-notebook] --&gt;### Launching a Kernel&lt;!-- --8&lt;-- [start:launch-kernel] --&gt;At a minimum, the `file_id` from the Notebook is required. Additionally, you can specify:+ `kernel_name` (default `python3`, see more about [available kernels](https://docs.noteable.io/product-docs/work-with-notebooks/manage-kernels/noteable-provided-kernels))+ `hardware_size` (default `small`, see more about [hardware options](https://docs.noteable.io/product-docs/work-with-notebooks/manage-hardware)).```pythonkernel_session = await api_client.launch_kernel(file_id=file.id)kernel_session``````{.python .no-copy}KernelSession(    id=UUID('e1f2a345-6789-4b01-cdef-1234567890ab'),    kernel=KernelDetails(        name='python3',        last_activity=datetime.datetime(2023, 2, 2, 1, 0, 0, 0, tzinfo=datetime.timezone.utc),        execution_state='idle'    ))```&lt;!-- --8&lt;-- [end:launch-kernel] --&gt;### Adding Cells&lt;!-- --8&lt;-- [start:connect-rtu] --&gt;Content updates and code execution is handled through the Noteable Real-Time Update (RTU) websocket connection.```pythonrealtime_notebook = await api_client.connect_realtime(file)```&lt;!-- --8&lt;-- [end:connect-rtu] --&gt;&gt; **Warning**&gt; You may see messages like `Received un-modeled RTU message msg.channel= ...`. This is expected as we update the Noteable backend services' messaging.&lt;!-- --8&lt;-- [start:add-cells] --&gt;Once the RTU client is connected, we can begin adding cells, executing code, and more! First, let's add a code cell with a basic Python `print` statement.```pythonfrom origami.models.notebook import CodeCellcell = CodeCell(source=&quot;print('Hello World')&quot;)await realtime_notebook.add_cell(cell=cell)```(You can also pass code source directly into `.add_cell(source='CODE HERE')` as a shortcut.)&lt;!-- --8&lt;-- [end:add-cells] --&gt;### Running a Code Cell&lt;!-- --8&lt;-- [start:run-code-cell] --&gt;The returned value is a dictionary of `asyncio.Future`s. Awaiting those futures will block until the cells have completed execution.The return value of the Futures is the up-to-date cell. If there's output, an output collection id will be set on the cell metadata.```pythonimport asyncioqueued_execution = await realtime_notebook.queue_execution(cell.id)cells = await asyncio.gather(*queued_execution)cell = cells[0]cell``````{.python .no-copy}CodeCell(    id='2345ab6c-de78-4901-bcde-f1234567890a',    source=&quot;print('Hello World')&quot;,    metadata={        'noteable': {'output_collection_id': UUID('d1234e5f-6789-4a0b-c123-4567890abcdef')},        'ExecuteTime': {            'start_time': '2023-02-02T01:00:00.000000+00:00',            'end_time': '2023-02-02T01:00:00.050000+00:00'        }    },    cell_type='code',    execution_count=None,    outputs=[])```&lt;!-- --8&lt;-- [end:run-code-cell] --&gt;### Getting Cell Output&lt;!-- --8&lt;-- [start:get-cell-output] --&gt;We can call the `.output_collection_id` property on cells directly, rather than having to parse the cell metadata.```pythonoutput_collection = await api_client.get_output_collection(cell.output_collection_id)output_collection``````{.python .no-copy}KernelOutputCollection(    id=UUID('d1234e5f-6789-4a0b-c123-4567890abcdef'),    created_at=datetime.datetime(2023, 2, 2, 1, 0, 1, 000000, tzinfo=datetime.timezone.utc),    updated_at=datetime.datetime(2023, 2, 2, 1, 0, 1, 000000, tzinfo=datetime.timezone.utc),    deleted_at=None,    cell_id='2345ab6c-de78-4901-bcde-f1234567890a',    widget_model_id=None,    file_id=UUID('bcd12345-6789-4abc-d012-3456abcdef90'),    outputs=[        KernelOutput(            id=UUID('abcdef90-1234-4a56-7890-abcdef123456'),            created_at=datetime.datetime(2023, 2, 2, 1, 0, 1, 000000, tzinfo=datetime.timezone.utc),            updated_at=datetime.datetime(2023, 2, 2, 1, 0, 1, 000000, tzinfo=datetime.timezone.utc),            deleted_at=None,            type='stream',            display_id=None,            available_mimetypes=['text/plain'],            content_metadata=KernelOutputContent(raw='{&quot;name&quot;:&quot;stdout&quot;}', url=None, mimetype='application/json'),            content=KernelOutputContent(raw='Hello World\n', url=None, mimetype='text/plain'),            content_for_llm=KernelOutputContent(raw='Hello World\n', url=None, mimetype='text/plain'),            parent_collection_id=UUID('d1234e5f-6789-4a0b-c123-4567890abcdef')        )    ])```&lt;!-- --8&lt;-- [end:get-cell-output] --&gt;## CLIOrigami has a small CLI for fetching the content of a Notebook, and tailing a Notebook to see all RTU messages being emitted on the relevant RTU channels.```pip install noteable-origami[cli]poetry install -E cli```1. Fetch the content of a Notebook and write to file: `origami fetch &lt;file-id&gt; &gt; notebook.ipynb`2. Tail a Notebook, useful when debugging RTU messages: `origami tail &lt;file-id&gt;`## Dev ENV settings- Use `NOTEABLE_API_URL` to point to non-production clusters, such as `http://localhost:8001/api` for local Gate development- E2E tests will use `TEST_SPACE_ID`, `TEST_PROJECT_ID`, and `TEST_USER_ID` env vars when running, useful in CI## ContributingSee [CONTRIBUTING.md](./CONTRIBUTING.md).---&lt;p align=&quot;center&quot;&gt;Open sourced with ‚ù§Ô∏è by &lt;a href=&quot;https://noteable.io&quot;&gt;Noteable&lt;/a&gt; for the community.&lt;/p&gt;&lt;img href=&quot;https://pages.noteable.io/private-beta-access&quot; src=&quot;https://assets.noteable.io/github/2022-07-29/noteable.png&quot; alt=&quot;Boost Data Collaboration with Notebooks&quot;&gt;</longdescription>
</pkgmetadata>