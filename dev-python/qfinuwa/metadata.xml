<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># QFIN's Algorithmic Backtester (QFAB)## SetupTo install on your system, use pip:```pip install qfinuwa```## API ClassTo pull market data ensure you have a text file with the API key and call ``API.fetch_stocks``:```pyfrom qfinuwa import APIpath_to_API = 'API_key.txt'download_folder = './data'API.fetch_stocks(['AAPL', 'GOOG', 'TSLA'], path_to_API, download_folder)```## Indicator Class#### Multi-IndicatorsA multi-indicator takes in a single signal (price of an arbitary stock) and outputs a transformation of that stock.It is called ``MultiIndicator`` because the indicator will have multiple values (one for each stock)```py# Example class CustomIndicators(Indicators):        @Indicators.MultiIndicator    def bollinger_bands(self, stock: pd.DataFrame):        BOLLINGER_WIDTH = 2        WINDOW_SIZE = 100                mid_price = (stock['high'] + stock['low']) / 2        rolling_mid = mid_price.rolling(WINDOW_SIZE).mean()        rolling_std = mid_price.rolling(WINDOW_SIZE).std()        return {&quot;upper_bollinger&quot;: rolling_mid + BOLLINGER_WIDTH*rolling_std,                &quot;lower_bollinger&quot;: rolling_mid - BOLLINGER_WIDTH*rolling_std}```### Single-IndicatorsSimilar to ``MultiIndicator``, ``SingleIndicator`` is implemented as a function that takes in stock data and returns an indicator or indicators.It is called ``SingleIndicator`` because there is only a single signal.```py# Example class CustomIndicators(Indicators):    @Indicators.SingleIndicator    def etf(self, stock: dict):        apple = 0.2        tsla = 0.5        goog = 0.3        return {'etf': apple*stock['AAPL'] + tsla*stock['TSLA'] + goog*stock['GOOG']}```### Manually TestingYou can manually test you indicators as follows:```pystock_a = pd.from_csv('stockA.csv')stock_b = pd.from_csv('stockA.csv')# multi-indicator for stockA (returns dict of dict of pd.Series)output_a = CustomIndicators.bollinger(stockA)# multi-indicator for stockB (returns dict of dict of pd.Series)output_b = CustomIndicators.bollinger(stockA)# single-indicator for stockA + stockB (returns dict of pd.Series)output = CustomIndicators.etf({'stockA': stock_a, 'stockB': stock_b})```### Hyper-parametersEach function you implement can be thought of as a hyperparameter &quot;group&quot; that bundles the indicator it returns (the keys to the dictionary the indicator function returns).The backtester can change hyperparameters for you, but to do so you need to give each one a name, in the form of ``kwargs``.The ``kwargs`` must include a default value which will be used if you do not specify a value.```pyclass CustomIndicators(Indicators):        @Indicators.MultiIndicator    def bollinger_bands(self, stock: pd.DataFrame, BOLLINGER_WIDTH = 2, WINDOW_SIZE=100):                mid_price = (stock['high'] + stock['low']) / 2        rolling_mid = mid_price.rolling(WINDOW_SIZE).mean()        rolling_std = mid_price.rolling(WINDOW_SIZE).std()        return {&quot;upper_bollinger&quot;: rolling_mid + BOLLINGER_WIDTH*rolling_std,                &quot;lower_bollinger&quot;: rolling_mid - BOLLINGER_WIDTH*rolling_std}    @Indicators.SingleIndicator    def etf(self, stock: dict, apple = 0.2, tsla= 0.5, goog=0.3):        return {'etf': apple*stock['AAPL'] + tsla*stock['TSLA'] + goog*stock['GOOG']}```## Strategy ClassTo define your strategy extend ``qfin.Strategy`` to inherit its functionalities. Implement your own ``on_data`` function.Your ``on_data`` function will be expected to take 4 positional arguments.- ``self``: reference to this object- ``prices``: a dictionary of numpy arrays of historical prices- ``portfolio``: object that manages positionsSimilar to ``qfin.Indicators``, you can define hyperparameters for your model in ``__init__``.```py# Example Strategyclass BasicBollinger(Strategy):    def __init__(self, quantity=5):        self.quantity = quantity        self.n_failed_orders = 0        def on_data(self, prices, indicators, portfolio):        # If current price is below lower Bollinger Band, enter a long position        for stock in portfolio.stocks:            if(prices['close'][stock][-1] &lt; indicators['lower_bollinger'][stock][-1]):                order_success = portfolio.order(stock, quantity=self.quantity)                if not order_success:                    self.n_failed_orders += 1                        # If current price is above upper Bollinger Band, enter a short position            if(prices['close'][stock][-1] &gt; indicators['upper_bollinger'][stock][-1]):                order_success = portfolio.order(stock, quantity=-self.quantity)                if not order_success:                    self.n_failed_orders += 1    def on_finish(self):        # Added to results object - access using result.on_finish        return self.n_failed_orders```Additionally, you can specify a function ``on_finish`` that will run on the completion of a run, if you want to save your own data. Whatever this function returns will can be accessed in the results (see ``SingleRunResults.on_finish``).## Backtester ClassThe ``Backtester`` class asks for a custom strategy, custom indicators and data from the user. Once created, it can run multiple backtests without having to recalculate the indicators - when used in a Notebook environment the backtester object can persist and incrementally updated with new values.### Creating a BacktesterSee ``qfinuwa.Backtester`` docstrings for specifics.```pyfrom qfinuwa import Backtesterbacktester = Backtester(CustomStrategy, CustomIndicators,                         data=r'\data', days=90,                         delta_limits=1000, fee=0.01)```## Updating Indicator Parameters### Update Parameters```pybacktester.indicators.update_params(dict_of_updates)```### Get Current Parameters```pybacktester.indicators.params```### Get Defaults```pybacktester.indicators.defaults```### Updating Class```pybacktester.indicators = NewIndicatorClass```## Updating Strategy Parameters### Update Parameters```pybacktester.strategy.update_params(dict_of_updates)```### Get Current Parameters```pybacktester.strategy.params```### Get Defaults```pybacktester.strategy.defaults```### Updating  Class```pybacktester.strategy = NewStrategyClass```## Running a Backtester## Time Complexity Analysis ![Time scaling of Backtester.__init__](./imgs/__init__.png?raw=true)![Time scaling of Backtester.run](./imgs/run.png?raw=true)MIT LicenseCopyright (c) 2022 Isaac Bergl, QFIN UWAPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</longdescription>
</pkgmetadata>