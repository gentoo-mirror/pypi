<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Greenbone Logo](https://www.greenbone.net/wp-content/uploads/gb_new-logo_horizontal_rgb_small.png)# Greenbone Vulnerability Management Tools &lt;!-- omit in toc --&gt;[![GitHub releases](https://img.shields.io/github/release-pre/greenbone/gvm-tools.svg)](https://github.com/greenbone/gvm-tools/releases)[![PyPI release](https://img.shields.io/pypi/v/gvm-tools.svg)](https://pypi.org/project/gvm-tools/)[![code test coverage](https://codecov.io/gh/greenbone/gvm-tools/branch/master/graph/badge.svg)](https://codecov.io/gh/greenbone/gvm-tools)[![Build and test](https://github.com/greenbone/gvm-tools/actions/workflows/ci-python.yml/badge.svg)](https://github.com/greenbone/gvm-tools/actions/workflows/ci-python.yml)The Greenbone Vulnerability Management Tools `gvm-tools` are a collection oftools that help with remote controlling a Greenbone Enterprise Appliance andGreenbone Community Edition installations. The tools aid in accessing thecommunication protocols GMP (Greenbone Management Protocol) and OSP(Open Scanner Protocol).This module is comprised of interactive and non-interactive clients.The programming language Python is supported directly for interactive scripting.But it is also possible to issue remote GMP/OSP commands without programming inPython.## Table of Contents &lt;!-- omit in toc --&gt;- [Documentation](#documentation)- [Installation](#installation)  - [Version](#version)  - [Requirements](#requirements)  - [Install using pip](#install-using-pip)- [Usage](#usage)  - [gvm-cli](#gvm-cli)    - [Examples](#examples)  - [gvm-script](#gvm-script)    - [Example script](#example-script)    - [More example scripts](#more-example-scripts)  - [gvm-pyshell](#gvm-pyshell)    - [Example program use](#example-program-use)- [Support](#support)- [Maintainer](#maintainer)- [Contributing](#contributing)- [License](#license)## DocumentationThe documentation for `gvm-tools` can be found at[https://greenbone.github.io/gvm-tools/](https://greenbone.github.io/gvm-tools/).Please refer to the documentation for more details as this README justgives a short overview.## InstallationSee the [documentation](https://greenbone.github.io/gvm-tools/install.html)for all supported installation options.### VersionPlease consider to always use the **newest** version of `gvm-tools` and `python-gvm`.We frequently update this projects to add features and keep them free from bugs.This is why installing `gvm-tools` using pip is recommended.**To use `gvm-tools` with an old GMP version (7, 8, 9) you must use a release version****that is `&lt;21.06`, combined with an `python-gvm` version `&lt;21.05`.****In the `21.06` release the support of these older versions has been dropped.**### RequirementsPython 3.7 and later is supported.### Install using pipYou can install the latest stable release of gvm-tools from the Python PackageIndex using [pip](https://pip.pypa.io/):```bashpython3 -m pip install --user gvm-tools```## UsageThere are several clients to communicate via GMP/OSP.All clients have the ability to build a connection in various ways:* Unix Socket* TLS Connection* SSH Connection### gvm-cliThis tool sends plain GMP/OSP commands and prints the result to the standardoutput.#### ExamplesReturn the current protocol version used by the server:```bashgvm-cli socket --xml &quot;&lt;get_version/&gt;&quot;```Return all tasks visible to the GMP user with the provided credentials:```bashgvm-cli --gmp-username foo --gmp-password bar socket --xml &quot;&lt;get_tasks/&gt;&quot;```Read a file with GMP commands and return the result:```bashgvm-cli --gmp-username foo --gmp-password bar socket myfile.xml```Note that `gvm-cli` will by default print an error message and exit with anon-zero exit code when a command is rejected by the server. If this kind oferror handling is not desired, the unparsed XML response can be requested usingthe `--raw` parameter:```bashgvm-cli socket --raw --xml &quot;&lt;authenticate/&gt;&quot;```### gvm-scriptThis tool has a lot more features than the simple `gvm-cli` client. Youhave the possibility to create your own custom gmp or osp scripts with commandsfrom the [python-gvm library](https://github.com/greenbone/python-gvm) and fromPython 3 itself.#### Example script```python# Retrieve current GMP versionversion = gmp.get_version()# Prints the XML in beautiful formfrom gvmtools.helper import pretty_printpretty_print(version)# Retrieve all taskstasks = gmp.get_tasks()# Get names of taskstask_names = tasks.xpath('task/name/text()')pretty_print(task_names)```#### More example scriptsThere is a growing collection of gmp-scripts in the[&quot;scripts/&quot;](scripts/) folder.Some of them might be exactly what you need and all of them help writingyour own gmp scripts.### gvm-pyshellThis tool is for running gmp or osp scripts interactively. It provides the sameAPI as [gvm-script](#gvm-script) using the[python-gvm library](https://github.com/greenbone/python-gvm).#### Example program useConnect with given credentials via a unix domain socket and open an interactiveshell:```bashgvm-pyshell --gmp-username user --gmp-password pass socket```Connect through SSH connection and open the interactive shell:```bashgvm-pyshell --hostname 127.0.0.1 ssh```## SupportFor any question on the usage of `gvm-tools` or gmp scripts please use the[Greenbone Community Portal](https://community.greenbone.net/c/gmp). If youfound a problem with the software, please[create an issue](https://github.com/greenbone/gvm-tools/issues) on GitHub.## MaintainerThis project is maintained by [Greenbone AG](https://www.greenbone.net/).## ContributingYour contributions are highly appreciated. Please[create a pull request](https://github.com/greenbone/gvm-tools/pulls) on GitHub.For bigger changes, please discuss it first in the[issues](https://github.com/greenbone/gvm-tools/issues).For development you should use [poetry](https://python-poetry.org/)to keep you python packages separated in different environments. First installpoetry via pip    python3 -m pip install --user poetryAfterwards run    poetry installin the checkout directory of `gvm-tools` (the directory containing the`pyproject.toml` file) to install all dependencies including the packages onlyrequired for development.Afterwards active the git hooks for auto-formatting and linting via[autohooks](https://github.com/greenbone/autohooks).    poetry run autohooks activate --force## LicenseCopyright (C) 2017-2022 [Greenbone AG](https://www.greenbone.net/)Licensed under the [GNU General Public License v3.0 or later](LICENSE).</longdescription>
</pkgmetadata>