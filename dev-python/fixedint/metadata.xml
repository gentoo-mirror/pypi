<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=====================================fixedint: simple fixed-width integers=====================================This module provides fixed-size integer classes which retain their fixed nature acrossarithmetic operations. It is geared towards users who need to emulate machine integers.It provides flexible classes for defining integers with a fixed number of bits, as wellas predefined classes for common machine integer sizes. These classes can be used asdrop-in replacements for int/long, and can be sliced to extract bitfields.Mutable versions of these integers are provided, enabling usages such as emulation ofmachine registers.Basic Usage===========A collection of predefined fixed-width integers for widths 8, 16, 32 and 64 are availablein signed and unsigned varieties. Mutable and immutable versions of each type are provided.These are named as ``[Mutable][U]Int&lt;N&gt;``, e.g. ``UInt64`` or ``MutableInt8``. Use theseclasses as you would ``int``; arithmetic operations involving these classes will preservefixed width. For example::    x = UInt32(0)    print(hex(~x)) # prints 0xffffffffMutable instances can be modified in-place, preserving their type::    x = MutableUInt32(0)    y = x    x += 100    print(y) # prints 100To set a mutable integer without losing its type, use slicing::    x = MutableUInt32(0)    x[:] = -1    print(hex(x)) # prints 0xffffffffArithmetic Operations=====================``FixedInt`` instances support all arithmetic operators. For binary operators, bothoperands are converted to plain Python ``int`` and then operated on. With a fewexceptions, the result will be cast back to a ``FixedInt`` large enough to hold eitheroperand, provided one of the operands was a ``FixedInt``. Note that the resulting``FixedInt`` may not be large enough to hold the complete result, in which case theresult will be truncated.The exceptions are as follows:* ``divmod`` returns a tuple of plain ``int`` s* true division returns a float* ``**``, ``&lt;&lt;`` and ``&gt;&gt;`` will return a ``FixedInt`` if the left operand was a  ``FixedInt``, and plain ``int`` otherwise.Mutable instances additionally support in-place operations, which will modify thevalue without altering its type.Arithmetic operations between two integers of different sizes follow C integer promotionrules when determining the type of the final result. These rules boil down to thefollowing:* If the operands are both signed, or both unsigned, the wider of the two operand types is chosen.* Otherwise, if the unsigned operand is wider, the unsigned operand is chosen.* Otherwise, the signed operand is chosen.Slicing=======``FixedInt`` instances support slicing. Slicing with a single integer produces a singleBoolean value representing the bit at that position. Slicing with a range produces a``FixedInt`` containing the range of bits. Mutable instances additionally support sliceassignment. This makes e.g. manipulating a flag register straightforward, without needingto use bitwise operations.All indexing operations treat the least-significant bit (LSB) as bit 0. Currently, onlycontiguous bit sections can be obtained; for more flexibility consider using a modulesuch as `bitarray`.Getting a slice results in a ``FixedInt`` instance with exactly as many bits as the range.This can be used to perform wraparound arithmetic on a bit field.Slices support two main syntaxes::    value[&lt;start&gt;:&lt;end&gt;]    value[&lt;start&gt;:&lt;length&gt;j]The latter syntax is more convenient when dealing with fixed-width fields. Either of theslice arguments may be omitted, in which case they will default to the LSB and MSB ofthe ``FixedInt`` respectively.Byte Conversion===============``FixedInt`` instances can be converted to and from raw byte representations by using the``.to_bytes`` instance method and the ``.from_bytes`` classmethod. The usage of thesemethods matches that of Python 3.4's ``int.to_bytes`` and ``int.from_bytes`` methods, butthe length is automatically inferred from the integer width.</longdescription>
</pkgmetadata>