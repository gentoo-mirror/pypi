<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- markdownlint-disable --&gt;&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/litestar-org/branding/blob/473f54621e55cde9acbb6fcab7fc03036173eb3d/assets/Branding%20-%20SVG%20-%20Transparent/Logo%20-%20Banner%20-%20Inline%20-%20Light.svg#gh-light-mode-only&quot; alt=&quot;Litestar Logo - Light&quot; width=&quot;100%&quot; height=&quot;auto&quot; /&gt;  &lt;img src=&quot;https://github.com/litestar-org/branding/blob/473f54621e55cde9acbb6fcab7fc03036173eb3d/assets/Branding%20-%20SVG%20-%20Transparent/Logo%20-%20Banner%20-%20Inline%20-%20Dark.svg#gh-dark-mode-only&quot; alt=&quot;Litestar Logo - Dark&quot; width=&quot;100%&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;&lt;!-- markdownlint-restore --&gt;&lt;div align=&quot;center&quot;&gt;&lt;!-- prettier-ignore-start --&gt;| Project   |     | Status||-----------|:----||| CI/CD     |     | [![Publish](https://github.com/litestar-org/fast-query-parsers/actions/workflows/publish.yaml/badge.svg)](https://github.com/litestar-org/fast-query-parsers/actions/workflows/publish.yaml) [![CI](https://github.com/litestar-org/fast-query-parsers/actions/workflows/ci.yaml/badge.svg)](https://github.com/litestar-org/fast-query-parsers/actions/workflows/ci.yaml|| Package   |     | [![PyPI - Version](https://img.shields.io/pypi/v/fast-query-parsers?labelColor=202235&amp;color=edb641&amp;logo=python&amp;logoColor=edb641)](https://badge.fury.io/py/litestar) ![PyPI - Support Python Versions](https://img.shields.io/pypi/pyversions/fast-query-parsers?labelColor=202235&amp;color=edb641&amp;logo=python&amp;logoColor=edb641) ![PyPI - Downloads](https://img.shields.io/pypi/dm/fast-query-parsers?logo=python&amp;label=fast-query-parsers%20downloads&amp;labelColor=202235&amp;color=edb641&amp;logoColor=edb641)                                                                                                                                                                                                                                                                                                                                                                                                                   || Community |     | [![Reddit](https://img.shields.io/reddit/subreddit-subscribers/litestarapi?label=r%2FLitestar&amp;logo=reddit&amp;labelColor=202235&amp;color=edb641&amp;logoColor=edb641)](https://reddit.com/r/litestarapi) [![Discord](https://img.shields.io/discord/919193495116337154?labelColor=202235&amp;color=edb641&amp;label=chat%20on%20discord&amp;logo=discord&amp;logoColor=edb641)](https://discord.gg/X3FJqy8d2j) [![Matrix](https://img.shields.io/badge/chat%20on%20Matrix-bridged-202235?labelColor=202235&amp;color=edb641&amp;logo=matrix&amp;logoColor=edb641)](https://matrix.to/#/#litestar:matrix.org) [![Medium](https://img.shields.io/badge/Medium-202235?labelColor=202235&amp;color=edb641&amp;logo=medium&amp;logoColor=edb641)](https://blog.litestar.dev) [![Twitter](https://img.shields.io/twitter/follow/LitestarAPI?labelColor=202235&amp;color=edb641&amp;logo=twitter&amp;logoColor=edb641&amp;style=flat)](https://twitter.com/LitestarAPI) [![Blog](https://img.shields.io/badge/Blog-litestar.dev-202235?logo=blogger&amp;labelColor=202235&amp;color=edb641&amp;logoColor=edb641)](https://blog.litestar.dev) || Meta      |     | [![Litestar Project](https://img.shields.io/badge/Litestar%20Org-%E2%AD%90%20Fast%20Query%20Parsers-202235.svg?logo=python&amp;labelColor=202235&amp;color=edb641&amp;logoColor=edb641)](https://github.com/litestar-org/fast-query-parsers) [![License - MIT](https://img.shields.io/badge/license-MIT-202235.svg?logo=python&amp;labelColor=202235&amp;color=edb641&amp;logoColor=edb641)](https://spdx.org/licenses/) [![Litestar Sponsors](https://img.shields.io/badge/Sponsor-%E2%9D%A4-%23edb641.svg?&amp;logo=github&amp;logoColor=edb641&amp;labelColor=202235)](https://github.com/sponsors/litestar-org) [![linting - Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json&amp;labelColor=202235)](https://github.com/astral-sh/ruff) [![code style - Black](https://img.shields.io/badge/code%20style-black-000000.svg?logo=python&amp;labelColor=202235&amp;logoColor=edb641)](https://github.com/psf/black)                                                                                                         |&lt;!-- prettier-ignore-end --&gt;&lt;/div&gt;# Fast Query ParsersThis library includes ultra-fast Rust based query string and urlencoded parsers. These parsers are usedby [`Litestar`](https://github.com/litestar-org/litestar), but are developed separately - and can of course be used separately.&gt; [!IMPORTANT]\&gt; [**_Starlite has been renamed to Litestar_**](https://litestar.dev/about/organization.html#litestar-and-starlite)&lt;/div&gt;## Installation```shellpip install fast-query-parsers```## UsageThe library exposes two function `parse_query_string` and `parse_url_encoded_dict`.### `parse_query_string`This function is used to parse a query string into a list of key/value tuples.```pythonfrom fast_query_parsers import parse_query_stringresult = parse_query_string(b&quot;value=1&amp;value=2&amp;type=dollar&amp;country=US&quot;, &quot;&amp;&quot;)# [(&quot;value&quot;, &quot;1&quot;), (&quot;value&quot;, &quot;2&quot;), (&quot;type&quot;, &quot;dollar&quot;), (&quot;country&quot;, &quot;US&quot;)]```The first argument to this function is a byte string that includes the query string to be parsed, the second argument isthe separator used.#### BenchmarksQuery string parsing is more than x5 times faster than the standard library:```textstdlib parse_qsl parsing query string: Mean +- std dev: 2.86 us +- 0.03 us.....................parse_query_string parsing query string: Mean +- std dev: 916 ns +- 13 ns.....................stdlib parse_qsl parsing urlencoded query string: Mean +- std dev: 8.30 us +- 0.10 us.....................parse_query_string urlencoded query string: Mean +- std dev: 1.50 us +- 0.03 us```### `parse_url_encoded_dict`This function is used to parse a url-encoded form data dictionary and parse it into the python equivalent of JSON types.```pythonfrom urllib.parse import urlencodefrom fast_query_parsers import parse_url_encoded_dictencoded = urlencode(    [        (&quot;value&quot;, &quot;10&quot;),        (&quot;value&quot;, &quot;12&quot;),        (&quot;veggies&quot;, '[&quot;tomato&quot;, &quot;potato&quot;, &quot;aubergine&quot;]'),        (&quot;nested&quot;, '{&quot;some_key&quot;: &quot;some_value&quot;}'),        (&quot;calories&quot;, &quot;122.53&quot;),        (&quot;healthy&quot;, &quot;true&quot;),        (&quot;polluting&quot;, &quot;false&quot;),        (&quot;json&quot;, &quot;null&quot;),    ]).encode()result = parse_url_encoded_dict(encoded, parse_numbers=True)# result == {#     &quot;value&quot;: [10, 12],#     &quot;veggies&quot;: [&quot;tomato&quot;, &quot;potato&quot;, &quot;aubergine&quot;],#     &quot;nested&quot;: {&quot;some_key&quot;: &quot;some_value&quot;},#     &quot;calories&quot;: 122.53,#     &quot;healthy&quot;: True,#     &quot;polluting&quot;: False,#     &quot;json&quot;: None,# }```This function handles type conversions correctly - unlike the standard library function `parse_qs`. Additionally, itdoes not nest all values inside lists.Note: the second argument passed to `parse_url_encoded_dict` dictates whether numbers should be parsed. If `True`,the value will be parsed into an int or float as appropriate, otherwise it will be kept as a string.By default the value of this arg is `True`.#### BenchmarksUrl Encoded parsing is more than x2 times faster than the standard library, without accounting for parsing of values:```textstdlib parse_qs parsing url-encoded values into dict: Mean +- std dev: 8.99 us +- 0.09 us.....................parse_url_encoded_dict parse url-encoded values into dict: Mean +- std dev: 3.77 us +- 0.08 us```To actually mimic the parsing done by `parse_url_encoded_dict` we will need a utility along these lines:```pythonfrom collections import defaultdictfrom contextlib import suppressfrom json import loads, JSONDecodeErrorfrom typing import Any, DefaultDict, Dict, Listfrom urllib.parse import parse_qsldef parse_url_encoded_form_data(encoded_data: bytes) -&gt; Dict[str, Any]:    &quot;&quot;&quot;Parse an url encoded form data into dict of parsed values&quot;&quot;&quot;    decoded_dict: DefaultDict[str, List[Any]] = defaultdict(list)    for k, v in parse_qsl(encoded_data.decode(), keep_blank_values=True):        with suppress(JSONDecodeError):            v = loads(v) if isinstance(v, str) else v        decoded_dict[k].append(v)    return {k: v if len(v) &gt; 1 else v[0] for k, v in decoded_dict.items()}```With the above, the benchmarks looks like so:```textpython parse_url_encoded_form_data parsing url-encoded values into dict: Mean +- std dev: 19.7 us +- 0.1 us.....................parse_url_encoded_dict parsing url-encoded values into dict: Mean +- std dev: 3.69 us +- 0.03 us```## ContributingAll contributions are of course welcome!### Repository Setup1. Run `cargo install` to setup the rust dependencies and `poetry install` to setup the python dependencies.2. Install the pre-commit hooks with `pre-commit install` (requires [pre-commit](https://pre-commit.com/)).### BuildingRun `poetry run maturin develop --release --strip` to install a release wheel (without debugging info). This wheel can beused in tests and benchmarks.### BenchmarkingThere are basic benchmarks using pyperf in place. To run these execute `poetry run python benchrmarks.py`.</longdescription>
</pkgmetadata>