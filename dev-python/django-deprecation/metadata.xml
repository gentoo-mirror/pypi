<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-deprecation[![build status](https://img.shields.io/travis/openbox/django-deprecation.svg)](https://travis-ci.org/openbox/django-deprecation)[![coverage](https://img.shields.io/codecov/c/github/openbox/django-deprecation.svg)](https://codecov.io/gh/openbox/django-deprecation)[![PyPI version](https://img.shields.io/pypi/v/django-deprecation.svg)](https://pypi.org/project/django-deprecation/)![python version](https://img.shields.io/pypi/pyversions/django-deprecation.svg)![django version](https://img.shields.io/pypi/djversions/django-deprecation.svg)Deprecate django fields and make migrations without breaking existing code.## Install```bashpip install django-deprecation```## Usage### TL;DR```py# Before:class Album(models.Model):    name = models.CharField(max_length=50)# After:class Album(models.Model):    name = DeprecatedField('title')    title = models.CharField(max_length=50)assert album.name == album.titleassert list(Album.objects.filter(name='foo')) == list(Album.objects.filter(title='foo'))```### Long explanationLet's suppose we have the following models:```pyfrom django.db import modelsclass Musician(models.Model):    name = models.CharField(max_length=50)class Album(models.Model):    musician = models.ForeignKey(Musician, on_delete=models.CASCADE)    name = models.CharField(max_length=100)```Now, for some reason, let's suppose we want to rename the field `Album#musician` to `Album#artist`.So we make the migration using the[RenameField](https://docs.djangoproject.com/en/1.11/ref/migration-operations/#renamefield)operation. The problem is that any existing code that used the old field would break.We could create a property as an alias:```pyclass Album(models.Model):    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)    name = models.CharField(max_length=100)    @property    def musician(self):        return self.artist    @musician.setter    def musician(self, value):        self.artist = value```But any code using[QuerySet#filter](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#filter)would break if it uses the `musician` field.This is where `django-deprecation` comes handy.We set the `musician` field as a `DeprecatedField` and point it to the `artist` field:```pyfrom django_deprecation import DeprecatedFieldclass Album(models.Model):    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)    musician = DeprecatedField('artist')    name = models.CharField(max_length=100)```Now, the following code snippet will work:```pyfrom .models import Album, Musicianalbum = Album.objects.first()assert album.musician == album.artistnew_musician = Musician.objects.create(    first_name='John',    last_name='Doe',    instrument='Guitar',)album.musician = new_musicianassert album.artist == new_musiciannew_musician_album = Album.objects.filter(    musician=new_musician,).first()new_artist_album = Album.objects.filter(    artist=new_musician,).first()assert new_musician_album == new_artist_album```If you want to control how to report the error,replace the `DeprecatedField.warn` function with a custom one:```pyfrom django_deprecation import DeprecatedFielddef warn_function(message):    # do stuff    import warnings    warnings.warn(message, DeprecationWarning)DeprecatedField.warn = warn_function```</longdescription>
</pkgmetadata>