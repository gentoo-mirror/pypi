<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>*****************webargs-starlette*****************.. image:: https://badgen.net/pypi/v/webargs-starlette    :target: https://badge.fury.io/py/webargs-starlette    :alt: PyPI version.. image:: https://dev.azure.com/sloria/sloria/_apis/build/status/sloria.webargs-starlette?branchName=master    :target: https://dev.azure.com/sloria/sloria/_build/latest?definitionId=11&amp;branchName=master    :alt: Build status.. image:: https://badgen.net/badge/marshmallow/3    :target: https://marshmallow.readthedocs.io/en/stable/    :alt: marshmallow 3 compatible.. image:: https://badgen.net/badge/code%20style/black/000    :target: https://github.com/ambv/black    :alt: code style: blackwebargs-starlette is a library for declarative request parsing andvalidation with `Starlette &lt;https://github.com/encode/starlette&gt;`_,built on top of `webargs &lt;https://github.com/marshmallow-code/webargs&gt;`_.It has all the goodness of `webargs &lt;https://github.com/marshmallow-code/webargs&gt;`_, with some extra sugar for type annotations... code-block:: python    import uvicorn    from starlette.applications import Starlette    from starlette.responses import JSONResponse    from webargs_starlette import use_annotations    app = Starlette()    @app.route(&quot;/&quot;)    @use_annotations(location=&quot;query&quot;)    async def index(request, name: str = &quot;World&quot;):        return JSONResponse({&quot;Hello&quot;: name})    if __name__ == &quot;__main__&quot;:        uvicorn.run(app, port=5000)    # curl 'http://localhost:5000/'    # {&quot;Hello&quot;: &quot;World&quot;}    # curl 'http://localhost:5000/?name=Ada'    # {&quot;Hello&quot;: &quot;Ada&quot;}Install=======::    pip install -U webargs-starletteUsage=====Parser Usage------------Use ``parser.parse`` to parse a Starlette ``Request`` with adictionary of fields... code-block:: python    from starlette.applications import Starlette    from starlette.responses import JSONResponse    from webargs import fields    from webargs_starlette import parser    app = Starlette()    @app.route(&quot;/&quot;)    async def homepage(request):        args = {            &quot;name&quot;: fields.Str(required=True),            &quot;greeting&quot;: fields.Str(load_default=&quot;hello&quot;),        }        parsed = await parser.parse(args, request)        greeting = parsed[&quot;greeting&quot;]        name = parsed[&quot;name&quot;]        return JSONResponse({&quot;message&quot;: f&quot;{greeting} {name}&quot;})Decorators----------Use the ``use_args`` decorator to inject the parsed argumentsdictionary into the handler function. The following snippet is equivalent to thefirst example.**Important**: Decorated functions MUST be coroutine functions... code-block:: python    from starlette.applications import Starlette    from starlette.responses import JSONResponse    from webargs import fields    from webargs_starlette import use_args    app = Starlette()    @app.route(&quot;/&quot;)    @use_args(        {&quot;name&quot;: fields.Str(required=True), &quot;greeting&quot;: fields.Str(load_default=&quot;hello&quot;)}    )    async def homepage(request, args):        greeting = args[&quot;greeting&quot;]        name = args[&quot;name&quot;]        return JSONResponse({&quot;message&quot;: f&quot;{greeting} {name}&quot;})The ``use_kwargs`` decorator injects the parsed arguments as keyword arguments... code-block:: python    from starlette.applications import Starlette    from starlette.responses import JSONResponse    from webargs import fields    from webargs_starlette import use_args    app = Starlette()    @app.route(&quot;/&quot;)    @use_kwargs(        {&quot;name&quot;: fields.Str(required=True), &quot;greeting&quot;: fields.Str(load_default=&quot;hello&quot;)}    )    async def homepage(request, name, greeting):        return JSONResponse({&quot;message&quot;: f&quot;{greeting} {name}&quot;})See `decorator_example.py &lt;https://github.com/sloria/webargs-starlette/blob/master/examples/decorator_example.py&gt;`_for a more complete example of ``use_args`` and ``use_kwargs`` usage.Error Handling--------------When validation fails, the parser will raise a ``WebargsHTTPException``,which is the same as Starlette's ``HTTPException`` with the addition ofof the ``messages`` (validation messages), ``headers`` , ``exception`` (underlying exception), and ``schema`` (marshmallow ``Schema``) attributes.You can use a custom exception handler to return the error messages asJSON... code-block:: python    from starlette.responses import JSONResponse    from webargs_starlette import WebargsHTTPException    @app.exception_handler(WebargsHTTPException)    async def http_exception(request, exc):        return JSONResponse(exc.messages, status_code=exc.status_code, headers=exc.headers)Annotations-----------The ``use_annotations`` decorator allows you to parse request objectsusing type annotations... code-block:: python    from starlette.applications import Starlette    from starlette.responses import JSONResponse    from webargs_starlette import use_annotations    app = Starlette()    @app.route(&quot;/&quot;)    @use_annotations(location=&quot;query&quot;)    async def welcome(request, name: str = &quot;Friend&quot;):        return JSONResponse({&quot;message&quot;: f&quot;Welcome, {name}!&quot;})    # curl 'http://localhost:5000/'.    # {&quot;message&quot;:&quot;Welcome, Friend!&quot;}    # curl 'http://localhost:5000/?name=Ada'.    # {&quot;message&quot;:&quot;Welcome, Ada!&quot;}Any annotated argument that doesn't have a default value will be required.For example, if we remove the default for ``name`` in the above example,an 422 error response is returned if ``?name`` isn't passed... code-block:: python    from starlette.applications import Starlette    from starlette.responses import JSONResponse    from webargs_starlette import use_annotations, WebargsHTTPException    app = Starlette()    @app.route(&quot;/&quot;)    @use_annotations(location=&quot;query&quot;)    async def welcome(request, name: str):        return JSONResponse({&quot;message&quot;: f&quot;Welcome, {name}!&quot;})    @app.exception_handler(WebargsHTTPException)    async def http_exception(request, exc):        return JSONResponse(exc.messages, status_code=exc.status_code, headers=exc.headers)    # curl &quot;http://localhost:5000/&quot;    # {&quot;name&quot;:[&quot;Missing data for required field.&quot;]}Arguments may also be annotated with ``Field`` instances when you needmore control. For example, you may want to add a validator... code-block:: python    from starlette.applications import Starlette    from starlette.responses import JSONResponse    from webargs import fields    from marshmallow import validate    from webargs_starlette import use_annotations, WebargsHTTPException    app = Starlette()    @app.route(&quot;/&quot;)    @use_annotations(location=&quot;query&quot;)    async def welcome(request, name: fields.Str(validate=validate.Length(min=2))):        return JSONResponse({&quot;message&quot;: f&quot;Welcome, {name}!&quot;})    @app.exception_handler(WebargsHTTPException)    async def http_exception(request, exc):        return JSONResponse(exc.messages, status_code=exc.status_code, headers=exc.headers)    # curl &quot;http://localhost:5000/?name=A&quot;    # {&quot;name&quot;:[&quot;Shorter than minimum length 2.&quot;]}``HTTPEndpoint`` methods may also be decorated with ``use_annotations``... code-block:: python    from starlette.applications import Starlette    from starlette.responses import JSONResponse    from starlette.endpoints import HTTPEndpoint    from webargs_starlette import use_annotations    app = Starlette()    @app.route(&quot;/&quot;)    class WelcomeEndpoint(HTTPEndpoint):        @use_annotations(location=&quot;query&quot;)        async def get(self, request, name: str = &quot;World&quot;):            return JSONResponse({&quot;message&quot;: f&quot;Welcome, {name}!&quot;})See `annotation_example.py &lt;https://github.com/sloria/webargs-starlette/blob/master/examples/annotation_example.py&gt;`_for a more complete example of ``use_annotations`` usage.More----For more information on how to use webargs, see the `webargs documentation &lt;https://webargs.readthedocs.io/&gt;`_.License=======MIT licensed. See the `LICENSE &lt;https://github.com/sloria/webargs-starlette/blob/master/LICENSE&gt;`_ file for more details.</longdescription>
</pkgmetadata>