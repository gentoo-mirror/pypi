<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># mETRICS - rEproducible sofTware peRformance analysIs in perfeCt Simplicity[![License](https://img.shields.io/pypi/l/crillab-metrics)](LICENSE.md)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/crillab-metrics)![PyPI - Status](https://img.shields.io/pypi/status/crillab-metrics)![Travis (.org)](https://img.shields.io/travis/crillab/metrics)![Sonar Quality Gate](https://img.shields.io/sonar/quality_gate/crillab_metrics?server=https%3A%2F%2Fsonarcloud.io)![Sonar Coverage](https://img.shields.io/sonar/coverage/crillab_metrics?server=https%3A%2F%2Fsonarcloud.io)## Authors- Thibault Falque - Exakis Nelite- [Romain Wallon - CRIL, Univ Artois &amp; CNRS](https://www.cril.univ-artois.fr/~wallon) - [Hugues Wattez - Laboratoire d'Informatique de l'X (LIX), École Polytechnique](https://hwattez.github.io/markdown-cv/)## About *Metrics**Metrics* is an open-source Python library developed at[CRIL](http://www.cril.fr), designed to facilitate the conduction ofexperiments and their analysis.The main objective of *Metrics* is to provide a complete toolchain fromthe execution of software programs to the analysis of their performance.In particular, the development of *Metrics* started with the observationthat, in the SAT community, the process of experimenting solver remainsmostly the same: everybody collects almost the same statistics about thesolver execution.However, there are probably as many scripts as researchers in the domainfor retrieving experimental data and drawing figures.There is thus clearly a need for a tool that unifies and makes easier theanalysis of solver experiments.The ambition of Metrics is thus to simplify the retrieval of experimental datafrom many different kinds of inputs (including the solver's output), andprovide a nice interface for drawing commonly used plots, computing statisticsabout the execution of the solver, and effortlessly organizing them.In the end, the main purpose of Metrics is to favor the sharing andreproducibility of experimental results and their analysis.## InstallationTo execute *Metrics* on your computer, you first need to install[Python](https://www.python.org/downloads/) (at least version **3.8**).You may install *Metrics* using `pip`, as the `metrics` library is[available on PyPI](https://pypi.org/project/crillab-metrics/).```bashpip install crillab-metrics```Note that, depending on your Python installation, you may need to use `pip3`to install it, or to execute `pip` as a module, as follows.```bashpython3 -m pip install crillab-metrics```To improve the reproducibility of the experiments, we highly recommend to usea [*virtual environment*](https://docs.python.org/3/tutorial/venv.html) foreach analysis you create with *Metrics*, and thus to install the `metrics`library in this virtual environment rather than with a system-wideinstallation.## Using *Metrics*You may find more information on how to use *Metrics* in the[documentation](https://metrics.readthedocs.io) we provide for the package.## Citing *Metrics*If you are using *Metrics* in your papers, we kindly ask you to either refer tothis repository or to one of the following papers:+ [*Metrics : Mission Expérimentations*.](https://hal.archives-ouvertes.fr/hal-03295285/document)  Thibault Falque, Romain Wallon and Hugues Wattez.  16es Journées Francophones de Programmation par Contraintes (JFPC'21), 2021.+ *Metrics: Towards a Unified Library for Experimenting Solvers*.  Thibault Falque, Romain Wallon and Hugues Wattez.  11th International Workshop on Pragmatics of SAT (POS'20), 2020.</longdescription>
</pkgmetadata>