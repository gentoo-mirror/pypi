<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;CRC&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;Calculate CRC checksums, verify CRC checksum, predefined CRC configurations, custom CRC configurations&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Nicoretti/crc/actions&quot;&gt;    &lt;img src=&quot;https://img.shields.io/github/checks-status/nicoretti/crc/master&quot; alt=&quot;Checks Master&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://coveralls.io/github/Nicoretti/crc&quot;&gt;    &lt;img src=&quot;https://img.shields.io/coverallsCoverage/github/Nicoretti/crc&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://opensource.org/licenses/BSD-2-Clause&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/l/crc&quot; alt=&quot;License&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/crc/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/dm/crc&quot; alt=&quot;Downloads&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/crc/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/crc&quot; alt=&quot;Supported Python Versions&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/crc/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/crc&quot; alt=&quot;PyPi Package&quot;&gt;&lt;/a&gt;&lt;/p&gt;---* Documentation: [https://nicoretti.github.io/crc](https://nicoretti.github.io/crc)* Source Code: [https://github.com/Nicoretti/crc](https://github.com/Nicoretti/crc)---## Available CRC ConfigurationsFor convince various frequently used crc configurations ship with the library out of the box.| CRC8 | CRC16    | CRC32 | CRC64 ||------|----------|-------|-------|| CCITT | CCITT    | CRC32 | CRC64 || AUTOSAR | GSM      | AUTOSAR | || SAJ1850 | PROFIBUS | BZIP2 | || BLUETOOTH | MODBUS   | POSIX | || MAXIM-DOW |          | | | |If you find yourself in the position, where having a new configuration available out of thebox would be desirable, feel free to create a [PR](https://github.com/Nicoretti/crc/pulls) or file an [issue](https://github.com/Nicoretti/crc/issues).## Custom ConfigurationsIf you want to create a custom configuration, you should have the following information available:ðŸ—’ Note:    This library currently only supports bit widths of full bytes 8, 16, 24, 32, ...* **width*** **polynom*** **init value*** **final xor value*** **reversed input*** **reversed output**In case you only have a name of a specific crc configuration/algorithm and you are unsure what are the specific parametersof it, a look into this [crc-catalogue](http://reveng.sourceforge.net/crc-catalogue/all.htm) might help.## Requirements* [\&gt;= Python 3.8](https://www.python.org)## Installation```shellpip install crc```## Examples### Create a Calculator#### Pre defined configuration```pythonfrom crc import Calculator, Crc8calculator = Calculator(Crc8.CCITT)```#### Custom configuration```pythonfrom crc import Calculator, Configurationconfig = Configuration(    width=8,    polynomial=0x07,    init_value=0x00,    final_xor_value=0x00,    reverse_input=False,    reverse_output=False,)calculator = Calculator(config)```### Calculate a checksum#### Standard```pythonfrom crc import Calculator, Crc8expected = 0xBCdata = bytes([0, 1, 2, 3, 4, 5])calculator = Calculator(Crc8.CCITT)assert expected == calculator.checksum(data)```#### Optimized for speed```pythonfrom crc import Calculator, Crc8expected = 0xBCdata = bytes([0, 1, 2, 3, 4, 5])calculator = Calculator(Crc8.CCITT, optimized=True)assert expected == calculator.checksum(data)```### Verify a checksum#### Standard```pythonfrom crc import Calculator, Crc8expected = 0xBCdata = bytes([0, 1, 2, 3, 4, 5])calculator = Calculator(Crc8.CCITT)assert calculator.verify(data, expected)```#### Optimized for speed```pythonfrom crc import Calculator, Crc8expected = 0xBCdata = bytes([0, 1, 2, 3, 4, 5])calculator = Calculator(Crc8.CCITT, optimized=True)assert calculator.verify(data, expected)```### Calculate a checksum with raw registers#### Register```pythonfrom crc import Crc8, Registerexpected = 0xBCdata = bytes([0, 1, 2, 3, 4, 5])register = Register(Crc8.CCITT)register.init()register.update(data)assert expected == register.digest()```#### TableBasedRegister```pythonfrom crc import Crc8, TableBasedRegisterexpected = 0xBCdata = bytes([0, 1, 2, 3, 4, 5])register = TableBasedRegister(Crc8.CCITT)register.init()register.update(data)assert expected == register.digest()```References &amp; Resources-----------------------* [A Painless guide to crc error detection algorithms](http://www.zlib.net/crc_v3.txt)* [CRC-Catalogue](http://reveng.sourceforge.net/crc-catalogue/all.htm)</longdescription>
</pkgmetadata>