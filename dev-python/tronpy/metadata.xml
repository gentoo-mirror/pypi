<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># tronpy[![PyPI version](https://badge.fury.io/py/tronpy.svg)](https://pypi.org/project/tronpy/)[![CircleCI](https://dl.circleci.com/status-badge/img/gh/andelf/tronpy/tree/master.svg?style=svg)](https://dl.circleci.com/status-badge/redirect/gh/andelf/tronpy/tree/master)TRON Python Client Library. [Documentation](https://tronpy.readthedocs.io/en/latest/index.html)&gt; Note: in case you want to use cryptocurrency functions in an universal way or e.g. reliably calculate transaction fees for BTC, ETH, Tron and many others, check out the [BitcartCC project](https://bitcartcc.com)## How to use```pythonfrom tronpy import Tronfrom tronpy.keys import PrivateKeyclient = Tron(network='nile')# Private key of TJzXt1sZautjqXnpjQT4xSCBHNSYgBkDr3priv_key = PrivateKey(bytes.fromhex(&quot;8888888888888888888888888888888888888888888888888888888888888888&quot;))txn = (    client.trx.transfer(&quot;TJzXt1sZautjqXnpjQT4xSCBHNSYgBkDr3&quot;, &quot;TVjsyZ7fYF3qLF6BQgPmTEZy1xrNNyVAAA&quot;, 1_000)    .memo(&quot;test memo&quot;)    .build()    .inspect()    .sign(priv_key)    .broadcast())print(txn)# &gt; {'result': True, 'txid': '5182b96bc0d74f416d6ba8e22380e5920d8627f8fb5ef5a6a11d4df030459132'}print(txn.wait())# &gt; {'id': '5182b96bc0d74f416d6ba8e22380e5920d8627f8fb5ef5a6a11d4df030459132', 'blockNumber': 6415370, 'blockTimeStamp': 1591951155000, 'contractResult': [''], 'receipt': {'net_usage': 283}}```### Async Client```pythonimport asynciofrom tronpy import AsyncTronfrom tronpy.keys import PrivateKey# private key of TMisHYBVvFHwKXHPYTqo8DhrRPTbWeAM6zpriv_key = PrivateKey(bytes.fromhex(&quot;8888888888888888888888888888888888888888888888888888888888888888&quot;))async def transfer():    async with AsyncTron(network='nile') as client:        print(client)        txb = (            client.trx.transfer(&quot;TJzXt1sZautjqXnpjQT4xSCBHNSYgBkDr3&quot;, &quot;TVjsyZ7fYF3qLF6BQgPmTEZy1xrNNyVAAA&quot;, 1_000)            .memo(&quot;test memo&quot;)            .fee_limit(100_000_000)        )        txn = await txb.build()        print(txn)        txn_ret = await txn.sign(priv_key).broadcast()        print(txn_ret)        # &gt; {'result': True, 'txid': 'edc2a625752b9c71fdd0d68117802860c6adb1a45c19fd631a41757fa334d72b'}        print(await txn_ret.wait())        # &gt; {'id': 'edc2a625752b9c71fdd0d68117802860c6adb1a45c19fd631a41757fa334d72b', 'blockNumber': 10163821, 'blockTimeStamp': 1603368072000, 'contractResult': [''], 'receipt': {'net_usage': 283}}if __name__ == '__main__':    asyncio.run(transfer())```Or close async client manually:```pythonfrom httpx import AsyncClient, Timeoutfrom tronpy.providers.async_http import AsyncHTTPProviderfrom tronpy.defaults import CONF_NILEasync def transfer():    _http_client = AsyncClient(limits=Limits(max_connections=100, max_keepalive_connections=20),                               timeout=Timeout(timeout=10, connect=5, read=5))    provider = AsyncHTTPProvider(CONF_NILE, client=_http_client)    client = AsyncTron(provider=provider)    print(client)    priv_key = PrivateKey(bytes.fromhex(&quot;8888888888888888888888888888888888888888888888888888888888888888&quot;))    txb = (        client.trx.transfer(&quot;TJzXt1sZautjqXnpjQT4xSCBHNSYgBkDr3&quot;, &quot;TVjsyZ7fYF3qLF6BQgPmTEZy1xrNNyVAAA&quot;, 1_000)        .memo(&quot;test memo&quot;)        .fee_limit(100_000_000)    )    txn = await txb.build()    print(txn)    txn_ret = await txn.sign(priv_key).broadcast()    print(txn_ret)    print(await txn_ret.wait())    await client.close()if __name__ == '__main__':    asyncio.run(transfer())```</longdescription>
</pkgmetadata>