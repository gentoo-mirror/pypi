<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![tile-diagram](https://raw.githubusercontent.com/banesullivan/localtileserver/main/imgs/oam-tiles.jpg)# üåê Local Tile Server for Geospatial Rasters[![codecov](https://codecov.io/gh/banesullivan/localtileserver/branch/main/graph/badge.svg?token=S0HQ64FW8G)](https://codecov.io/gh/banesullivan/localtileserver)[![PyPI](https://img.shields.io/pypi/v/localtileserver.svg?logo=python&amp;logoColor=white)](https://pypi.org/project/localtileserver/)[![conda](https://img.shields.io/conda/vn/conda-forge/localtileserver.svg?logo=conda-forge&amp;logoColor=white)](https://anaconda.org/conda-forge/localtileserver)*Need to visualize a rather large (gigabytes+) raster?* **This is for you.**A Python package for serving tiles from large raster files inthe [Slippy Maps standard](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames)(i.e., `/zoom/x/y.png`) for visualization in Jupyter with `ipyleaflet` or `folium`.Launch a [demo](https://github.com/banesullivan/localtileserver-demo) on MyBinder [![MyBinder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/banesullivan/localtileserver-demo/HEAD)Documentation: https://localtileserver.banesullivan.com/Under the hood, this is also a Flask blueprint/application for use as astandalone web app or in your own web deployments needing dynamic tile serving.## üåü Highlights- Launch a tile server for large geospatial images- View local or remote* raster files with `ipyleaflet` or `folium` in Jupyter- View rasters with CesiumJS with the built-in Flask web application- Extract regions of interest (ROIs) interactively- Use the example datasets to generate Digital Elevation Models**remote raster files should be pre-tiled Cloud Optimized GeoTiffs*## üöÄ UsageUsage details and examples can be found in the documentation: https://localtileserver.banesullivan.com/The following is a minimal example to visualize a local raster file with`ipyleaflet`:```pyfrom localtileserver import get_leaflet_tile_layer, TileClientfrom ipyleaflet import Map# First, create a tile server from local raster fileclient = TileClient('path/to/geo.tif')# Create ipyleaflet tile layer from that servert = get_leaflet_tile_layer(client)m = Map(center=client.center(), zoom=client.default_zoom)m.add_layer(t)m```![ipyleaflet](https://raw.githubusercontent.com/banesullivan/localtileserver/main/imgs/ipyleaflet.png)## ‚ÑπÔ∏è OverviewThe `TileClient` class can be used to to launch a tile server in a backgroundthread which will serve raster imagery to a viewer (usually `ipyleaflet` or`folium` in Jupyter notebooks).This tile server can efficiently deliver varying resolutions of yourraster imagery to your viewer; it helps to have pre-tiled,[Cloud Optimized GeoTIFFs (COGs)](https://www.cogeo.org/), but no wories ifnot as the backing library, [`large_image`](https://github.com/girder/large_image),will tile and cache for you when opening the raster.There is an included, standalone web viewer leveraging[CesiumJS](https://cesium.com/platform/cesiumjs/) and [GeoJS](https://opengeoscience.github.io/geojs/).You can use the web viewer to select and extract regions of interest from rasters.## ‚¨áÔ∏è InstallationGet started with `localtileserver` to view rasters in Jupyter or deploy as yourown Flask application.### üêç Installing with `conda`Conda makes managing `localtileserver`'s dependencies across platforms quiteeasy and this is the recommended method to install:```bashconda install -c conda-forge localtileserver```### üé° Installing with `pip`If you prefer pip, and know how to install GDAL on your system, then you caninstall from PyPI: https://pypi.org/project/localtileserver/```pip install localtileserver```#### üìù A Brief Note on Installing GDALGDAL can be a pain in the üçë to install, so you may want to handle GDALbefore installing `localtileserver` when using `pip`.If on linux, I highly recommend using the [large_image_wheels](https://github.com/girder/large_image_wheels) from Kitware.```pip install --find-links=https://girder.github.io/large_image_wheels --no-cache GDAL```## üí≠ FeedbackPlease share your thoughts and questions on the [Discussions](https://github.com/banesullivan/localtileserver/discussions) board.If you would like to report any bugs or make feature requests, please open an issue.If filing a bug report, please share a scooby `Report`:```pyimport localtileserverprint(localtileserver.Report())```</longdescription>
</pkgmetadata>