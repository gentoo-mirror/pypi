<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-markdownfield  [![PyPI](https://img.shields.io/pypi/v/django-markdownfield)](https://pypi.org/project/django-markdownfield/)A simple custom field for Django that can safely render Markdown and store it in the database.Your text is stored in a `MarkdownField`. When the model is saved, django-markdownfield willparse the Markdown, render it, sanitise it with [bleach](https://github.com/mozilla/bleach), and storethe result in a `RenderedMarkdownField` for display to end users.django-markdownfield also bundles a minified version of the [EasyMDE](https://github.com/Ionaru/easy-markdown-editor)editor (v2.14.0) in admin views to make working with Markdown easier.![alt test](https://raw.githubusercontent.com/dmptrluke/django-markdownfield/master/screenshots/editor.png)## Installationdjango-markdownfield can be installed from PyPi:```console# Install directly or add to your requirements.txtpip install django-markdownfield```After installation, you need to add `markdownfield` to `INSTALLED_APPS` of your Django project's settings.```pythonINSTALLED_APPS = [    &quot;markdownfield&quot;,    ...    &quot;django.contrib.staticfiles&quot;,]```## UsageImplementing django-markdownfield is simple. See the below example.```pythonfrom django.db import modelsfrom markdownfield.models import MarkdownField, RenderedMarkdownFieldfrom markdownfield.validators import VALIDATOR_STANDARDclass Page(models.Model):    text = MarkdownField(rendered_field='text_rendered', validator=VALIDATOR_STANDARD)    text_rendered = RenderedMarkdownField()```Please also set `SITE_URL` in your Django configuration - it will be needed for detectingexternal links.```pythonSITE_URL = &quot;https://example.com&quot;```To disable the EasyMDE editor, see the amended line below.```pythontext = MarkdownField(rendered_field='text_rendered', use_editor=False, use_admin_editor=True)```### Use in templatesTo use the rendered markdown in templates, just use the `RenderedMarkdownField()` you created onyour model, like below. This field should be marked as safe with the `safe` filter to ensure itdisplays correctly.```djangotemplate{{ post.text_rendered | safe }}```## Validatorsdjango-markdownfield comes with a number of validators, which are used to process and cleanthe output of the markdown engine### VALIDATOR_STANDARD```pythonfrom markdownfield.validators import VALIDATOR_STANDARD```This validator strips any tags that are not used by standard Markdown. It also automatically linksany URLs in the output, adding `class=&quot;external&quot;`, `rel=&quot;nofollow noopener noreferrer&quot;`, and`target=&quot;_blank&quot;` to any URLs which it determines to be external.### VALIDATOR_CLASSY```pythonfrom markdownfield.validators import VALIDATOR_CLASSY```This validator does much the same as `VALIDATOR_STANDARD`, but it allows you to set the class onlinks and images. This is useful to create buttons and other enhanced links.### VALIDATOR_NULL```pythonfrom markdownfield.validators import VALIDATOR_NULL```This validator does not call [bleach](https://github.com/mozilla/bleach) to sanitize the output at all.This is **not safe for user input**.  It allows arbitrary (unsafe) HTML in your markdown input.### Creating Custom ValidatorsTo create a custom validator, just create an instance of  the `markdownfield.validators.Validator`dataclass. An example of this is shown below.```pythonfrom markdownfield.validators import Validator# allows only bold and italic textVALIDATOR_COMMENTS = Validator(    allowed_tags=[&quot;b&quot;, &quot;i&quot;, &quot;strong&quot;, &quot;em&quot;],    allowed_attrs={},    linkify=False)```You can also find a standard set of markdown-safe tags and attrs in `markdownfield.validators`, and extendthat.```pythonfrom markdownfield.validators import Validator, MARKDOWN_TAGS, MARKDOWN_ATTRS# allows all standard markdown features,# but also allows the class to be set on images and linksVALIDATOR_CLASSY = Validator(    allowed_tags=MARKDOWN_TAGS,    allowed_attrs={        **MARKDOWN_ATTRS,        'img': ['src', 'alt', 'title', 'class'],        'a': ['href', 'alt', 'title', 'name', 'class']    })```## MigrationsIf you need to migrate from TextField or CharField to the MarkdownField you need to migrate the stored `text` also in the `rendered_text` field.Update your auto-created migration fiele and add the method below. Use a method to `save()` every instance of your model once after the migrations, so the text will be copied into the `text_rendered` field correctly.```pythonfrom django.db import migrationsimport markdownfield.modelsdef save_text_rendered(apps, schema_editor):    ExampleModel = apps.get_model('yourapp', 'ExampleModel')    for examplemodel in ExampleModel.objects.all():        examplemodel.save()class Migration(migrations.Migration):    dependencies = [        ('yourapp', '000X_migrate_to_markdownfield'),    ]    operations = [        migrations.AddField(            model_name='yourapp',            name='text_rendered',            field=markdownfield.models.RenderedMarkdownField(default=''),            preserve_default=False,        ),        migrations.AlterField(            model_name='ExampleModel',            name='text',            field=markdownfield.models.MarkdownField(rendered_field='text_rendered'),        ),        migrations.RunPython(save_text_rendered),    ]```## LicenseThis software is released under the MIT license.```Copyright (c) 2019-2021 Luke RogersPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.```</longdescription>
</pkgmetadata>