<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-log-labeler=====================**Django middleware and log filter to attach values from the headers to every log message generated as part of a request.****Author:** Hermann Stephane NtsamoExample-------```{&quot;message&quot;: &quot;Hello World&quot;, &quot;correlation_id&quot;: &quot;6da1d73a-9a72-4206-93a4-bac892b76784&quot;, &quot;session_id&quot;: &quot;none&quot;, &quot;app_id&quot;: &quot;none&quot;, &quot;nim_user&quot;: &quot;none&quot;, &quot;app_version&quot;: &quot;none&quot;}```Installation and usage----------------------First, install the package: `pip install django-log-labeler`Add the middleware to your `MIDDLEWARE_CLASSES` setting.```pythonINSTALLED_APPS = [    ...    'log_labeler',    'pythonjsonlogger']MIDDLEWARE_CLASSES = (    'log_labeler.middleware.HeaderToLabelMiddleware',    # ... other middleware goes here)```An example `LOGGING` setting is below:```pythonDEFAULT_LOG_LEVEL = os.getenv('LOGGING_LEVEL', 'INFO')LOG_LABEL_REQUEST_SETTING = {    &quot;correlation_id&quot;: &quot;HTTP_NIM_CORRELATION_ID&quot;,    &quot;session_id&quot;: &quot;HTTP_NIM_SESSION_ID&quot;,    &quot;app_id&quot;: &quot;HTTP_NIM_APP_ID&quot;,    &quot;nim_user&quot;: &quot;HTTP_NIM_USER&quot;,    &quot;app_version&quot;: &quot;HTTP_NIM_APP_VERSION&quot;,}LOG_LABEL_EXCLUDE_LOG_LIST = [    &quot;&quot;,    &quot;django&quot;]#Case InsensitiveLOG_LABEL_OBFUSCATE = {    &quot;headers&quot;: [&quot;Authorization&quot;],    &quot;body&quot;: [        (&quot;PasswordText&quot;, Obfuscation_Type.XML),        (&quot;sessionID&quot;, Obfuscation_Type.XML),        (&quot;password&quot;, Obfuscation_Type.JSON),        (&quot;token&quot;, Obfuscation_Type.JSON)    ],    &quot;response&quot;: [        (&quot;sessionID&quot;, Obfuscation_Type.XML),        (&quot;password&quot;, Obfuscation_Type.JSON),        (&quot;token&quot;, Obfuscation_Type.JSON),        (&quot;sessionid&quot;, Obfuscation_Type.JSON,)    ],    &quot;url&quot;: [        (&quot;token&quot;, Obfuscation_Type.URL),    ]}LOGGING = {    'version': 1,    'disable_existing_loggers': False,    'filters': {        'request_id': {            '()': 'log_labeler.filters.HeaderToLabelFilter'        }    },    'formatters': {        'json': {              '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',              'format': '%(message)s'          }    },    'handlers': {        'console': {            'level': 'DEBUG',            'class': 'logging.StreamHandler',            'filters': ['request_id'],            'formatter': 'json',        },    },    'loggers': {        'log_labeler.middleware': {            'handlers': ['console'],            'level': 'DEBUG',            'propagate': False,        },        'gunicorn.access': {            'handlers': ['console'],            'level': 'INFO',            'propagate': False,        },    }}NIM_DJANGO_REQUEST_LOG_LEVEL_NAME = &quot;HTTP_NIM_DJANGO_REQUEST_LOG_LEVEL&quot;MAX_REQUEST_RESPONSE_SIZE = os.getenv('MAX_REQUEST_RESPONSE_SIZE', 'OFF')```You can then output log messages as usual:```pythonimport logginglogger = logging.getLogger(__name__)logger.debug(&quot;Hello world!&quot;)```Settings Description:---------------------######DEFAULT_LOG_LEVELThe default log level to apply on the logger if not other log level is specified######LOG_LABEL_REQUEST_SETTINGThe list of key/value pair that maps an HTTP header to a log entry######LOG_LABEL_EXCLUDE_LOG_LISTThe list of loggers to ignore when dynamically changing log levels######LOG_LABEL_OBFUSCATEThe dictionary with obfuscation rules######NIM_DJANGO_REQUEST_LOG_LEVEL_NAMEThe name of the header to use to change the logging level. EG: DEBUG, INFO, ERROR...######MAX_REQUEST_RESPONSE_SIZEThe maximum allowed size for request and responses in case they are successful. Error message are not truncated.License-------Copyright Â© 2012-2018, DabApps.All rights reserved.Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</longdescription>
</pkgmetadata>