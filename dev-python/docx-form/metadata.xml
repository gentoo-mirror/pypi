<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># docx-form![API Documentation Status](https://github.com/Southeastern-Louisiana-University/docx-form/actions/workflows/publish_api_documentation.yml/badge.svg) ![PyPi Deployment Status](https://github.com/Southeastern-Louisiana-University/docx-form/actions/workflows/deploy.yml/badge.svg) ![Unit Test Status](https://github.com/Southeastern-Louisiana-University/docx-form/actions/workflows/run_unit_tests.yml/badge.svg)### [API Documentation](https://southeastern-louisiana-university.github.io/docx-form/ 'API Documentation') | [PyPi Page](https://pypi.org/project/docx-form/ 'PyPi Page')### DescriptionThis package allows you to easily modify the values of content controls &amp; form fields in `.docx` files with Python.### Supported Content Controls- [x] Plain Text- [x] Rich Text- [x] Drop Down List- [x] Combo Box- [x] Date Picker- [x] Check Box### Supported Form Fields (To-Do)- [ ] Text- [ ] Drop Down- [ ] Check Box## Installation1. Install [Python](https://www.python.org/downloads/ 'Python') (**minimum version: 3.10.6**)   1. **Warning: Python 3.11 breaks some dependencies as of 10/28/2022. This warning will be removed when this is no longer the case.**2. In a terminal, run: `pip install docx-form`## UsageThe file `./docx_form_tests/test.docx` wil be used for the following guide.1. Create a new python file `example.py`2. Import docx-form:```pythonfrom docx_form import DocxForm```3. Initialize a `DocxForm` instance:```python...full_path = 'path/to/docx/file/test.docx'document = DocxForm(full_path)```4. Print the content controls:```python...document.print_all_content_controls_and_form_fields()```5. View the console output &amp; make note of the indexes:```0: RichTextContentControl | id: -1012910137 | text: Rich Text Content Control1: RichTextContentControl | id: -1135860421 | text: Another Rich Text Content Control2: PlainTextContentControl | id: -132710284 | text: Plain Text Content Control3: PlainTextContentControl | id: 28152470 | text: Another Plain Text Content Control4: CheckBoxContentControl | id: -1942055255 | text: ☐5: CheckBoxContentControl | id: -635946620 | text: ☒6: ComboBoxContentControl | id: 199831773 | text: Combo t Option 17: ComboBoxContentControl | id: -1984237200 | text: Choose an item.8: DropDownListContentControl | id: -827207619 | text: Drop-Down Content Control9: DropDownListContentControl | id: 2026666311 | text: Another Drop-Down Content Control10: DatePickerContentControl | id: 645172330 | text: 9/6/202211: DatePickerContentControl | id: 539787165 | text: 9/7/2022```**Note: The Content Controls are listed starting from the top-left of the document going from left to right on each line of the document all the way to the bottom.**6. Edit the second Rich Text Content Control:```python...# Import type for proper intellisense in your editor/IDEfrom docx_form.content_controls import RichTextContentControl...rich_text_control: RichTextContentControl = document.content_control_forms_and_form_fields[1]rich_text_control.set_text(&quot;The example worked!&quot;)```7. Save the file:```python...# Note: This will overwrite the original filedocument.save()```8. If `document.print_all_content_controls_and_form_fields()` is run again:```...1: RichTextContentControl | id: -1135860421 | text: The example worked!...```9. Full File:```pythonfrom docx_form import DocxFormfrom docx_form.content_controls import RichTextContentControl# Create a DocxForm instancefull_path = &quot;path/to/docx/file/test.docx&quot;document = DocxForm(full_path)# Kept for reference# document.print_all_content_controls_and_form_fields()# Edit the second Rich Text content controlrich_text_control: RichTextContentControl = (    document.content_control_forms_and_form_fields[1])rich_text_control.set_text(&quot;The example worked!&quot;)# Note: This will overwrite the original filedocument.save()```## ExamplesThe file `./docx_form_tests/test.docx` wil be used for the following examples.### Plain Text```pythonfrom docx_form import DocxFormfrom docx_form.content_controls import PlainTextContentControl# Create a DocxForm instancefull_path = &quot;path/to/docx/file/test.docx&quot;document = DocxForm(full_path)# Kept for reference# document.print_all_content_controls_and_form_fields()# Edit the content control (remember the console output)content_control: PlainTextContentControl = (    document.content_control_forms_and_form_fields[2])content_control.set_text(&quot;Plain text edit&quot;)# Note: This will overwrite the original filedocument.save()```### Check Box```pythonfrom docx_form import DocxFormfrom docx_form.content_controls import CheckBoxContentControl# Create a DocxForm instancefull_path = &quot;path/to/docx/file/test.docx&quot;document = DocxForm(full_path)# Kept for reference# document.print_all_content_controls_and_form_fields()# Edit the content control (remember the console output)content_control: CheckBoxContentControl = (    document.content_control_forms_and_form_fields[4])content_control.set_check_box(True)# Note: This will overwrite the original filedocument.save()```### Combo Box```pythonfrom docx_form import DocxFormfrom docx_form.content_controls import ComboBoxContentControl# Create a DocxForm instancefull_path = &quot;path/to/docx/file/test.docx&quot;document = DocxForm(full_path)# Kept for reference# document.print_all_content_controls_and_form_fields()# Edit the content control (remember the console output)content_control: ComboBoxContentControl = (    document.content_control_forms_and_form_fields[6])content_control.print_options()&quot;&quot;&quot;Output:0: Display Value = &quot;None&quot; || Value = &quot;Choose an item.&quot;1: Display Value = &quot;Combo Box Option 1&quot; || Value = &quot;Combo Box Option 1&quot;2: Display Value = &quot;Combo Box Option 2&quot; || Value = &quot;Combo Box Option 2&quot;&quot;&quot;&quot;content_control.set_text(2)# Note: This will overwrite the original filedocument.save()```### Drop Down List```pythonfrom docx_form import DocxFormfrom docx_form.content_controls import DropDownListContentControl# Create a DocxForm instancefull_path = &quot;path/to/docx/file/test.docx&quot;document = DocxForm(full_path)# Kept for reference# document.print_all_content_controls_and_form_fields()# Edit the content control (remember the console output)content_control: DropDownListContentControl = (    document.content_control_forms_and_form_fields[8])content_control.print_options()&quot;&quot;&quot;Output:0: Display Value = &quot;None&quot; || Value = &quot;Choose an item.&quot;1: Display Value = &quot;Drop-Down Content Control&quot; || Value = &quot;Drop-Down Content Control&quot;&quot;&quot;&quot;content_control.set_option(0)# Note: This will overwrite the original filedocument.save()```### Date Picker```pythonfrom datetime import datetimefrom docx_form import DocxFormfrom docx_form.content_controls import DatePickerContentControl# Create a DocxForm instancefull_path = &quot;path/to/docx/file/test.docx&quot;document = DocxForm(full_path)# Kept for reference# document.print_all_content_controls_and_form_fields()# Edit the content control (remember the console output)content_control: DatePickerContentControl = (    document.content_control_forms_and_form_fields[10])print(content_control.date_format) # Output: &quot;M/d/yyyy&quot;new_date = datetime(1999, 12, 31)content_control.set_date(new_date)# Note: This will overwrite the original filedocument.save()```## Setup For Contribution### Requirements:- [Python](https://www.python.org/downloads/ 'Python') (**minimum version: 3.10.6**)  - **Warning: Python 3.11 breaks some dependencies as of 10/28/2022. This warning will be removed when this is no longer the case.**- [Poetry](https://python-poetry.org/docs/)  - **DO NOT** forget to add Poetry to your `PATH` (step 3)#### Environment SetupThe following will be done in Visual Studio Code on a Windows machine:1. Open a terminal in the repository's root2. Run `poetry install`3. Run `poetry env info`   1. Copy the path listed under `Virtualenv &gt; Executable:`4. Change the Python interpreter to the newly created Poetry virtual environment:   1. `CTRL + SHIFT + P` to open the command menu   2. Type `interpreter` and hit `ENTER`   3. Select `+ Enter interpreter path...`   4. Paste the path to the virtual environment   5. Hit `ENTER`5. Open `./docx_form/docx_form.py` (This is the root file, so do any local testing within the `if __name__ == &quot;__main__&quot;:` scope)6. Click the `Run` button in the top-right of the editor (assuming the [Python Extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python) is installed)   1. If no errors are thrown, you are ready to execute locally and using poetry!7. Open a `Git Bash` terminal in the repository's root   1. Run `curl -o- https://raw.githubusercontent.com/tapsellorg/conventional-commits-git-hook/master/scripts/install.sh | sh`      1. Here is the repository for the git hook: [conventional-commits-git-hook](https://github.com/BrianGilbert/conventional-commits-git-hook)   2. Run `git init`   3. You now have the git hook installed to ensure proper commit messages      1. Follow [these guidelines](https://www.conventionalcommits.org/en/v1.0.0/) for commit messages#### Code Style Guide1. Do your best to follow [PEP8 Guidelines](https://pep8.org/ 'PEP8 Guidelines')2. **ALL** code must have [Type Hints](https://peps.python.org/pep-0484/ 'Type Hints')   1. If a variable, parameter, or function return has a type of `Any`, it **WILL NOT** be accepted</longdescription>
</pkgmetadata>