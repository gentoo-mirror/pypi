<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># The Charmed Operator FrameworkThis Charmed Operator Framework simplifies [operator](https://charmhub.io/about) developmentfor [model-driven application management](https://juju.is/model-driven-operations).Operators emerged from the Kubernetes community; an operator is software that drives lifecyclemanagement, configuration, integration and daily actions for an application. Operators simplifysoftware management and operations. They capture reusable app domain knowledge from experts in asoftware component that can be shared.This project extends the operator pattern to enable[charmed operators](https://juju.is/universal-operators), not just for Kubernetes but alsooperators for traditional Linux application management.Operators use a [Charmed Operator Lifecycle Manager(Charmed OLM)](https://juju.is/operator-lifecycle-manager) to coordinate their work in a cluster.The system uses Golang for concurrent event processing under the hood, but enables the operators tobe written in Python.## Simple, composable operatorsOperators should 'do one thing and do it well'. Each operator drives a single microservice and canbe [composed with other operators](https://juju.is/integration) to deliver a complex application.It is better to have small, reusable operators that each drive a single microservice very well.The operator handles instantiation, scaling, configuration, optimisation, networking, service mesh,observability, and day-2 operations specific to that microservice.Operator composition takes place through declarative integration in the OLM. Operators declareintegration endpoints, and discover lines of integration between those endpoints dynamically atruntime.## Pure Python operatorsThe framework provides a standard Python library and object model that represents the applicationgraph, and an event distribution mechanism for distributed system coordination and communication.The OLM is written in Golang for efficient concurrency in event handling and distribution.Operators can be written in any language. We recommend this Python framework for ease of design,development and collaboration.## Better collaborationOperator developers publish Python libraries that make it easy to integrate your operator withtheir operator. The framework includes standard tools to distribute these integration libraries andkeep them up to date.Development collaboration happens at [Charmhub.io](https://charmhub.io/) where operators arepublished along with integration libraries. Design and code review discussions are hosted in theCharmhub [discourse]. We recommend the [Open Operator Manifesto](https://charmhub.io/manifesto)as a guideline for high quality operator engineering.## Event serialization and operator servicesDistributed systems can be hard! So this framework exists to make it much simpler to reason aboutoperator behaviour, especially in complex deployments. The Charmed OLM provides[operator services](https://juju.is/operator-services) such as provisioning, event delivery,leader election and model management.Coordination between operators is provided by a cluster-wide event distribution system. Events areserialized to avoid race conditions in any given container or machine. This greatly simplifies thedevelopment of operators for high availability, scale-out and integrated applications.## Model-driven Operator Lifecycle ManagerA key goal of the project is to improve the user experience for admins working with multipledifferent operators.We embrace [model-driven operations](https://juju.is/model-driven-operations) in the CharmedOperator Lifecycle Manager. The model encompasses capacity, storage, networking, the applicationgraph and administrative access.Admins describe the application graph of integrated microservices, and the OLM then drivesinstantiation. A change in the model is propagated to all affected operators, reducing theduplication of effort and repetition normally found in operating a complex topology of services.Administrative actions, updates, configuration and integration are all driven through the OLM.# Getting startedA package of operator code is called a charmed operator or â€œcharm. You will use `charmcraft` toregister your operator name, and publish it when you are ready. There are more details on how toget a complete development environment setup over in the[documentation](https://juju.is/docs/sdk/dev-setup)Charmed Operators written using the Charmed Operator Framework are just Python code. The goalis to feel natural for somebody used to coding in Python, and reasonably easy to learn for somebodywho is not a pythonista.The dependencies of the operator framework are kept as minimal as possible; currently that's Python3.8 or greater, and the small number of Python libraries referenced in [requirements.txt](requirements.txt).For a brief intro on how to get started, check out the[Hello, World!](https://juju.is/docs/sdk/hello-world) section of the documentation!# Testing your charmed operatorsThe operator framework provides a testing harness, so you can check your charmed operator does theright thing in different scenarios, without having to create a full deployment.`pydoc3 ops.testing` has the details, including this example:```pythonharness = Harness(MyCharm)# Do initial setup hererelation_id = harness.add_relation('db', 'postgresql')# Now instantiate the charm to see events as the model changesharness.begin()harness.add_relation_unit(relation_id, 'postgresql/0')harness.update_relation_data(relation_id, 'postgresql/0', {'key': 'val'})# Check that charm has properly handled the relation_joined event for postgresql/0self.assertEqual(harness.charm. ...)```## Talk to usIf you need help, have ideas, or would just like to chat with us, reach out onthe Charmhub [Mattermost].We also pay attention to the Charmhub [Discourse]You can deep dive into the [API docs] if that's your thing.[discourse]: https://discourse.charmhub.io[api docs]: https://ops.rtfd.io/[sdk docs]: https://juju.is/docs/sdk[mattermost]: https://chat.charmhub.io/charmhub/channels/charm-dev## Operator Framework developmentSee [HACKING.md](HACKING.md) for details on dev environments, testing, etc.</longdescription>
</pkgmetadata>