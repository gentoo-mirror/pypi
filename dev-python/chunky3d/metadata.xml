<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># chunky3dA 3D array-like NumPy-based data structure for large sparsely-populated volumes## Build[![Build Status](https://travis-ci.org/K3D-tools/chunky3d.svg?branch=master)](https://travis-ci.org/K3D-tools/chunky3d)# IntroductionThis library provides a data structure, `Sparse`, which represents 3D volumetric dataand supports a subset of `np.ndarray` features.## Example```&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; from chunky3d import Sparse&gt;&gt;&gt; s = Sparse(shape=(64, 64, 64))&gt;&gt;&gt; s[0, 0, 0]0&gt;&gt;&gt; s.dtypenumpy.float64&gt;&gt;&gt; s.nchunks8&gt;&gt;&gt; s.nchunks_initialized0&gt;&gt;&gt; s[1, 2, 3] = 3&gt;&gt;&gt; s.nchunks_initialized1&gt;&gt;&gt; s[:2, 2, 3:5]array([[0., 0.],       [3., 0.]])```# Features* `chunky3d.sparse_func` - a collection of functions for analyzing chunked arrays, including   morphological operations (opening, closing), thinning, connected components* Fast load and save using `msgpack`* Operations on arrays using `.run()`, with possible acceleration using `multiprocessing`* `multiprocessing`-based acceleration in most of existing `sparse_func`* Accelerated lookup using `numba`* Interpolation (point probe)* Origin and spacing: representing 3D space with non-uniform spacing for different axes* Easy visualization of arrays with `dtype=np.uint8` via `chunky3d.k3d_connector.get_k3d_object()`</longdescription>
</pkgmetadata>