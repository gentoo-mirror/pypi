<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aiocsvAsynchronous CSV reading and writing.  ## InstallationPython 3.6+ is required.  `pip3 install aiocsv`## UsageAsyncReader &amp; AsyncDictReader accept any object that has a `read(size: int)` coroutine,which should return a string.AsyncWriter &amp; AsyncDictWriter accept any object that has a `write(b: str)` coroutine.Reading is implemented using a custom CSV parser, which should behave exactly like the CPython parser.Writing is implemented using the synchronous csv.writer and csv.DictWriter objects - the serializers write data to a StringIO, and that buffer is then rewritten to the underlayingasynchronous file.## ExampleExample usage with [aiofiles](https://pypi.org/project/aiofiles/).```pythonimport asyncioimport csvimport aiofilesfrom aiocsv import AsyncReader, AsyncDictReader, AsyncWriter, AsyncDictWriterasync def main():    # simple reading    async with aiofiles.open(&quot;some_file.csv&quot;, mode=&quot;r&quot;, encoding=&quot;utf-8&quot;, newline=&quot;&quot;) as afp:        async for row in AsyncReader(afp):            print(row)  # row is a list    # dict reading, tab-separated    async with aiofiles.open(&quot;some_other_file.tsv&quot;, mode=&quot;r&quot;, encoding=&quot;utf-8&quot;, newline=&quot;&quot;) as afp:        async for row in AsyncDictReader(afp, delimiter=&quot;\t&quot;):            print(row)  # row is a dict    # simple writing, &quot;unix&quot;-dialect    async with aiofiles.open(&quot;new_file.csv&quot;, mode=&quot;w&quot;, encoding=&quot;utf-8&quot;, newline=&quot;&quot;) as afp:        writer = AsyncWriter(afp, dialect=&quot;unix&quot;)        await writer.writerow([&quot;name&quot;, &quot;age&quot;])        await writer.writerows([            [&quot;John&quot;, 26], [&quot;Sasha&quot;, 42], [&quot;Hana&quot;, 37]        ])    # dict writing, all quoted, &quot;NULL&quot; for missing fields    async with aiofiles.open(&quot;new_file2.csv&quot;, mode=&quot;w&quot;, encoding=&quot;utf-8&quot;, newline=&quot;&quot;) as afp:        writer = AsyncDictWriter(afp, [&quot;name&quot;, &quot;age&quot;], restval=&quot;NULL&quot;, quoting=csv.QUOTE_ALL)        await writer.writeheader()        await writer.writerow({&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 26})        await writer.writerows([            {&quot;name&quot;: &quot;Sasha&quot;, &quot;age&quot;: 42},            {&quot;name&quot;: &quot;Hana&quot;}        ])asyncio.run(main())```## Reference### aiocsv.AsyncReader`AsyncReader(asyncfile: aiocsv.protocols.WithAsyncRead, **csvreaderparams)`An object that iterates over lines in given asynchronous file.  Additional keyword arguments are understood as dialect parameters.Iterating over this object returns parsed CSV rows (`List[str]`).*Methods*:- `__aiter__(self) -&gt; self`- `async __anext__(self) -&gt; List[str]`*Properties*:- `dialect`: The csv.Dialect used when parsing*Read-only properties*:- `line_num`: Not implemented in aiocsv - issues a warning and always returns -1.### aiocsv.AsyncDictReader```AsyncDictReader(asyncfile: aiocsv.protocols.WithAsyncRead,                fieldnames: Optional[Sequence[str]] = None, restkey: Optional[str] = None, restval: Optional[str] = None, **csvreaderparams)```An object that iterates over lines in given asynchronous file.  All arguments work exactly the same like in csv.DictReader.Iterating over this object returns parsed CSV rows (`Dict[str, str]`).*Methods*:- `__aiter__(self) -&gt; self`- `async __anext__(self) -&gt; Dict[str, str]`*Properties*:- `fieldnames`: field names used when converting rows to dictionaries      **⚠️** Unlike csv.DictReader, if not provided in the constructor, at least one row has to be retrieved before getting the fieldnames.    ```py    reader = csv.DictReader(some_file)    reader.fieldnames  # [&quot;cells&quot;, &quot;from&quot;, &quot;the&quot;, &quot;header&quot;]    areader = aiofiles.AsyncDictReader(same_file_but_async)    areader.fieldnames   # ⚠️ None    await areader.__anext__()    areader.fieldnames  # [&quot;cells&quot;, &quot;from&quot;, &quot;the&quot;, &quot;header&quot;]    ```- `restkey`: If a row has more cells then the header, all remaining cells are stored under  this key in the returned dictionary. Defaults to `None`.- `restval`: If a row has less cells then the header, then missing keys will use this  value. Defaults to `None`.- `reader`: Underlaying `aiofiles.AsyncReader` instance*Read-only properties*:- `dialect`: Link to `self.reader.dialect` - the current csv.Dialect- `line_num`: Not implemented in aiocsv - issues a warning and always returns -1### aiocsv.AsyncWriter`AsyncWriter(asyncfile: aiocsv.protocols.WithAsyncWrite, **csvwriterparams)`An object that writes csv rows to the given asynchronous file.  In this object &quot;row&quot; is a sequence of values.Additional keyword arguments are passed to the underlying csv.writer instance.*Methods*:- `async writerow(self, row: Iterable[Any]) -&gt; None`      Writes one row to the specified file.- `async writerows(self, rows: Iterable[Iterable[Any]]) -&gt; None`      Writes multiple rows to the specified file.        All rows are temporarly stored in RAM before actually being written to the file,      so don't provide a generator of loads of rows.*Readonly properties*:- `dialect`: Link to underlying's csv.reader's `dialect` attribute### aiocsv.AsyncDictWriter`AsyncDictWriter(asyncfile: aiocsv.protocols.WithAsyncWrite, fieldnames: Sequence[str], **csvdictwriterparams)`An object that writes csv rows to the given asynchronous file.  In this object &quot;row&quot; is a mapping from fieldnames to values.Additional keyword arguments are passed to the underlying csv.DictWriter instance.*Methods*:- `async writeheader(self) -&gt; None`      Writes header row to the specified file.- `async writerow(self, row: Mapping[str, Any]) -&gt; None`      Writes one row to the specified file.- `async writerows(self, rows: Iterable[Mapping[str, Any]]) -&gt; None`      Writes multiple rows to the specified file.        All rows are temporarly stored in RAM before actually being written to the file,    so don't provide a generator of loads of rows.*Readonly properties*:- `dialect`: Link to underlying's csv.reader's `dialect` attribute### aiocsv.protocols.WithAsyncReadA `typing.Protocol` describing an asynchronous file, which can be read.### aiocsv.protocols.WithAsyncWriteA `typing.Protocol` describing an asynchronous file, which can be written to.</longdescription>
</pkgmetadata>