<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># carefree-toolkit`carefree-toolkit` implemented some commonly used functions and modules## Installation`carefree-toolkit` requires Python 3.8 or higher.```bashpip install carefree-toolkit```or```bashgit clone https://github.com/carefree0910/carefree-toolkit.gitcd carefree-toolkitpip install -e .```## Usages### **`timeit`**```pythonclass timeit(context_error_handler):    def __init__(self, msg)```Timing context manager.#### Parameters+ **`msg`** : **str**, name of the context which we want to timeit.#### Example```pythonimport timefrom cftool.misc import timeit# ~~~  [ info ] timing for     sleep 1s     : 1.0002with timeit(&quot;sleep 1s&quot;):    time.sleep(1)```### **`timestamp`**```pythondef timestamp(simplify=False, ensure_different=False) -&gt; str```Return current timestamp.#### Parameters+ **`simplify`** : **bool**. If `True`, format will be simplified to 'year-month-day'.+ **`ensure_different`** : **bool**. If `True`, format will include millisecond.#### Example```pythonfrom cftool.misc import timestamp# 2019-09-30_21-49-56print(timestamp())# 2019-09-30print(timestamp(simplify=True))# 2019-09-30_21-49-56-279768print(timestamp(ensure_different=True))```### **`prod`**```pythondef prod(iterable) -&gt; float```Return cumulative production of an **`iterable`**.#### Parameters+ **`iterable`** : **iterable**.#### Example```pythonfrom cftool.misc import prod# 120.0print(prod(range(1, 6)))```### **`hash_code`**```pythondef hash_code(code) -&gt; str```Return hash code for string **`code`**.#### Parameters+ **`code`** : **str**.#### Example```pythonfrom cftool.misc import hash_code# Truehash_code(&quot;a&quot;) != hash_code(&quot;b&quot;)```### **`prefix_dict`**```pythondef prefix_dict(d, prefix) -&gt; dict```Prefix every key in dict **`d`** with **`prefix`**, connected with `'_'`.#### Parameters+ **`d`** : **dict**.+ **`prefix`** : **str**.#### Example```pythonfrom cftool.misc import prefix_dict# {&quot;foo_a&quot;: 1, &quot;foo_b&quot;: 2}print(prefix_dict({&quot;a&quot;: 1, &quot;b&quot;: 2}, &quot;foo&quot;))```### **`shallow_copy_dict`**```pythondef shallow_copy_dict(d) -&gt; dict```Shallow copy dict **`d`**, nested dict is also supported.#### Parameters+ **`d`** : **dict**.#### Example```pythonfrom cftool.misc import shallow_copy_dictd = {&quot;a&quot;: 1, &quot;b&quot;: {&quot;c&quot;: 2, &quot;d&quot;: 3}}sd = shallow_copy_dict(d)d_copy = d.copy()d[&quot;b&quot;].pop(&quot;c&quot;)# {'a': 1, 'b': {'d': 3}}print(d)# {'a': 1, 'b': {'c': 2, 'd': 3}}print(sd)# {'a': 1, 'b': {'d': 3}}print(d_copy)```### **`update_dict`**```pythondef update_dict(src_dict, tgt_dict) -&gt; dict```Update **`tgt_dict`** with **`src_dict`**.&gt; Changes will happen only on keys which **`src_dict`** holds, and the update procedure will be recursive.&gt; Changed will happen inplace.#### Parameters+ **`src_dict`** : **dict**.+ **`tgt_dict`** : **str**.#### Example```pythonfrom cftool.misc import update_dictsrc_dict = {&quot;a&quot;: {&quot;b&quot;: 1}, &quot;c&quot;: 2}tgt_dict = {&quot;a&quot;: {&quot;b&quot;: 0, &quot;b1&quot;: 1}, &quot;c&quot;: 0, &quot;d&quot;: 1}# {&quot;a&quot;: {&quot;b&quot;: 1, &quot;b1&quot;: 1}, &quot;c&quot;: 2, &quot;d&quot;: 1}print(update_dict(src_dict, tgt_dict))```### **`fix_float_to_length`**```pythondef fix_float_to_length(num, length) -&gt; str```Change a float number to string format with fixed length.#### Parameters+ **`num`** : **float**.+ **`length`** : **int**.#### Example```pythonimport mathfrom cftool.misc import fix_float_to_length# 1.000000print(fix_float_to_length(1, 8))# 1.000000print(fix_float_to_length(1., 8))# 1.000000print(fix_float_to_length(1.0, 8))# -1.00000print(fix_float_to_length(-1, 8))# -1.00000print(fix_float_to_length(-1., 8))# -1.00000print(fix_float_to_length(-1.0, 8))# 1234567.print(fix_float_to_length(1234567, 8))# 12345678print(fix_float_to_length(12345678, 8))# 123456789print(fix_float_to_length(123456789, 8))# +  nan   +print(&quot;+&quot; + fix_float_to_length(math.nan, 8) + &quot;+&quot;)```### **`truncate_string_to_length`**```pythondef truncate_string_to_length(string, length) -&gt; str```Truncate a string to make sure its length not exceeding a given length.#### Parameters+ **`string`** : **str**.+ **`length`** : **int**.#### Example```pythonfrom cftool.misc import truncate_string_to_length# 123456print(truncate_string_to_length(&quot;123456&quot;, 6))# 12..67print(truncate_string_to_length(&quot;1234567&quot;, 6))# 12..78print(truncate_string_to_length(&quot;12345678&quot;, 6))# 12...78print(truncate_string_to_length(&quot;12345678&quot;, 7))```### **`grouped`**```pythondef grouped(iterable, n, *, keep_tail) -&gt; list```Group an **`iterable`** every **`n`** elements.#### Parameters+ **`iterable`** : **iterable**.+ **`n`** : **int**.+ **`keep_tail`** : **bool**, whether keep the 'tail' (see example below).#### Example```pythonfrom cftool.misc import grouped# [(0, 1), (2, 3), (4, 5)]print(grouped(range(6), 2))# [(0, 1, 2), (3, 4, 5)]print(grouped(range(6), 3))# [(0, 1, 2, 3)]print(grouped(range(6), 4))# [(0, 1, 2, 3), (4, 5)]print(grouped(range(6), 4, keep_tail=True))```### **`is_number`**```pythondef is_numeric(s) -&gt; bool```Check whether string **`s`** is numeric.#### Parameters+ **`s`** : **str**.#### Example```pythonfrom cftool.misc import is_numeric# Trueprint(is_numeric(0x1))# Trueprint(is_numeric(1e0))# Trueprint(is_numeric(&quot;1&quot;))# Trueprint(is_numeric(&quot;1.&quot;))# Trueprint(is_numeric(&quot;1.0&quot;))# Trueprint(is_numeric(&quot;1.00&quot;))# Falseprint(is_numeric(&quot;1.0.0&quot;))# Trueprint(is_numeric(&quot;nan&quot;))```### **`get_one_hot`**```pythondef get_one_hot(feature, dim) -&gt; np.ndarray```Get one-hot representation.#### Parameters+ **`feature`** : **array-like**, source data of one-hot representation.+ **`dim`** : **int**, dimension of the one-hot representation. #### Example```pythonimport numpy as npfrom cftool.array import get_one_hotfeature = np.array([0, 1, 0])# [[1 0], [0 1], [1 0]]print(get_one_hot(feature, 2))# [[1 0 0] [0 1 0] [1 0 0]]print(get_one_hot(feature, 3))# [[1 0 0] [0 1 0] [1 0 0]]print(get_one_hot(feature.tolist(), 3))```### **`get_indices_from_another`**```pythondef get_indices_from_another(base, segment) -&gt; np.ndarray```Get **`segment`** elements' indices in **`base`**. This function will return positions where elements in **`segment`** appear in **`base`**.&gt; All elements in segment should appear in base to ensure validity.#### Parameters+ **`base`** : **np.ndarray**, base array.+ **`segment`** : **np.ndarray**, segment array. #### Example```pythonimport numpy as npfrom cftool.array import get_indices_from_anotherbase, segment = np.array([1, 2, 3, 5, 7, 8, 9]), np.array([1, 3, 5, 7, 9])# [0 2 3 4 6]print(get_indices_from_another(base, segment))# [0 1 2 3 4]print(get_indices_from_another(segment, segment))# [4 3 2 1 0]print(get_indices_from_another(segment[::-1], segment))```### **`get_unique_indices`**```pythondef get_unique_indices(arr) -&gt; UniqueIndices``` Get indices for unique values of an array.#### Parameters+ **`arr`** : **np.ndarray**, target array which we wish to find indices of each unique value.+ **`return_raw`** : **bool**, whether returning raw information.#### Example```pythonimport numpy as npfrom cftool.array import get_unique_indicesarr = np.array([1, 2, 3, 2, 4, 1, 0, 1], np.int64)unique_indices = get_unique_indices(arr)# UniqueIndices(#   unique          = array([0, 1, 2, 3, 4], dtype=int64),#   unique_cnt      = array([1, 3, 2, 1, 1], dtype=int64),#   sorting_indices = array([6, 0, 5, 7, 1, 3, 2, 4], dtype=int64),#   split_arr       = array([1, 4, 6, 7], dtype=int64))#   split_indices   = [array([6], dtype=int64), array([0, 5, 7], dtype=int64), array([1, 3], dtype=int64),#                      array([2], dtype=int64), array([4], dtype=int64)]print(get_unique_indices(arr))```### And more...`carefree-toolkit` is well documented, feel free to dive into the codes and explore something you may need!## License`carefree-toolkit` is MIT licensed, as found in the [`LICENSE`](https://github.com/carefree0910/carefree-toolkit/blob/master/LICENSE) file.---</longdescription>
</pkgmetadata>