<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># basecfg`basecfg` is a Python library designed to simplify and standardize the process of configuring a Python application, particularly a Dockerized application.Users of this library create a class which inherits from `basecfg.BaseCfg`. For each configuration option an app should support, a type-annotated class attribute is defined using a call to `opt`.Once a config class is instantiated it automatically populates the configuration from these sources:1. default values declared in the configuration class2. a JSON config file (such as a [Kubernetes ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/))3. a `.env` file (in `docker run` envfile format)4. environment variables5. docker secrets6. command-line arguments## ExampleThis file is an excerpt from [a more extensive example](docs/example.md) implementation of the library:```python#!/usr/bin/env python3from typing import Optionalfrom basecfg import BaseCfg, optclass ExampleAppConf(BaseCfg):    server_username: str = opt(        default=&quot;demoperson&quot;,        doc=&quot;The username to use on the server&quot;,    )    server_password: Optional[str] = opt(        default=None,        doc=&quot;The password to use on the server&quot;,        redact=True,    )    verbose: bool = opt(        default=False,        doc=&quot;whether to log verbosely&quot;,    )    batch_size: Optional[int] = opt(        default=None,        doc=&quot;how many objects to transfer at a time&quot;,    )```</longdescription>
</pkgmetadata>