<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>randmac.py==========a utility that generates 12-digit mac addresses; either the NIC portion or full 12-digit MAC. the optional `-f` argument will return a random 12-digit MAC address that can be identified by the locally administrated address (LAA) format. This means you will always see `x2`, `x6`, `xA`, or `xE` at the beginning of a MAC address generated by randmac.# installationto install with pip:`pip install randmac`# requirementsPython &gt;3.2 required.# mac address formatsSupported MAC address formats: - MM:MM:MM:SS:SS:SS - MM-MM-MM-SS-SS-SS - MM.MM.MM.SS.SS.SS - MMMM.MMSS.SSSS - MMMMMMSSSSSSwhere `M` stands for the manufacturer or vendor, and `S` stands for the NIC specific portion. # usageyou can `from randmac import RandMac` and use it like `RandMac()`.if you wish to change the mac address format. provide a sample mac so `randmac` knows what the output format should be.you can `from randmac import RandMac` and use it like `RandMac(&quot;0000.0000.0000&quot;)`.from a terminal (if the the console scripts entry point `randmac` is in your path and executable) you can use `randmac` to get a generate a new 12-digit LAA address, or `randmac 00:00:00:00:00:00 -p` to generate a MAC with the same OUI, but a different NIC portion.# example usage```&gt;&gt;&gt; from randmac import RandMac&gt;&gt;&gt; RandMac()'a6:9b:6b:8e:b3:42'&gt;&gt;&gt; RandMac(&quot;00:00:00:00:00:00&quot;, True)'00:00:00:3f:8a:06'&gt;&gt;&gt; RandMac(&quot;0000:0000:0000&quot;, True)'0000007ce662'&gt;&gt;&gt; RandMac(&quot;0000:0000:0000&quot;)'06eb4584d1e3'```or```&gt; randmacfa:bf:7c:5d:65:3e&gt; randmac 00-00-00-00-00-00 -p00-00-00-dd-5f-16``` # licenselicense can be found [here](https://github.com/joshschmelzle/randmac/blob/master/LICENSE).</longdescription>
</pkgmetadata>