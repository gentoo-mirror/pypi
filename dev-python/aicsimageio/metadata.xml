<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AICSImageIO[![Build Status](https://github.com/AllenCellModeling/aicsimageio/actions/workflows/build-main.yml/badge.svg)](https://github.com/AllenCellModeling/aicsimageio/actions)[![Documentation](https://github.com/AllenCellModeling/aicsimageio/workflows/Documentation/badge.svg)](https://AllenCellModeling.github.io/aicsimageio/)[![Code Coverage](https://codecov.io/gh/AllenCellModeling/aicsimageio/branch/main/graph/badge.svg)](https://app.codecov.io/gh/AllenCellModeling/aicsimageio/branch/main)[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.4906608.svg)](https://doi.org/10.5281/zenodo.4906608)Image Reading, Metadata Conversion, and Image Writing for Microscopy Images in Pure Python---## Features-   Supports reading metadata and imaging data for:    -   `OME-TIFF`    -   `TIFF`    -   `ND2` -- (`pip install aicsimageio[nd2]`)    -   `DV` -- (`pip install aicsimageio[dv]`)    -   `CZI` -- (`pip install aicspylibczi&gt;=3.1.1 fsspec&gt;=2022.8.0`)    -   `LIF` -- (`pip install readlif&gt;=0.6.4`)    -   `PNG`, `GIF`, [etc.](https://github.com/imageio/imageio) -- (`pip install aicsimageio[base-imageio]`)    -   Files supported by [Bio-Formats](https://docs.openmicroscopy.org/bio-formats/latest/supported-formats.html) -- (`pip install aicsimageio bioformats_jar`) (Note: requires `java` and `maven`, see below for details.)-   Supports writing metadata and imaging data for:    -   `OME-TIFF`    -   `PNG`, `GIF`, [etc.](https://github.com/imageio/imageio) -- (`pip install aicsimageio[base-imageio]`)-   Supports reading and writing to    [fsspec](https://github.com/intake/filesystem_spec) supported file systems    wherever possible:    -   Local paths (i.e. `my-file.png`)    -   HTTP URLs (i.e. `https://my-domain.com/my-file.png`)    -   [s3fs](https://github.com/dask/s3fs) (i.e. `s3://my-bucket/my-file.png`)    -   [gcsfs](https://github.com/dask/gcsfs) (i.e. `gcs://my-bucket/my-file.png`)    See [Cloud IO Support](#cloud-io-support) for more details.## Installation**Stable Release:** `pip install aicsimageio`&lt;br&gt;**Development Head:** `pip install git+https://github.com/AllenCellModeling/aicsimageio.git`AICSImageIO is supported on Windows, Mac, and Ubuntu.For other platforms, you will likely need to build from source.#### Extra Format InstallationTIFF and OME-TIFF reading and writing is always available afterinstalling `aicsimageio`, but extra supported formats can beoptionally installed using `[...]` syntax.-   For a single additional supported format (e.g. ND2): `pip install aicsimageio[nd2]`-   For a single additional supported format (e.g. ND2), development head: `pip install &quot;aicsimageio[nd2] @ git+https://github.com/AllenCellModeling/aicsimageio.git&quot;`-   For a single additional supported format (e.g. ND2), specific tag (e.g. `v4.0.0.dev6`): `pip install &quot;aicsimageio[nd2] @ git+https://github.com/AllenCellModeling/aicsimageio.git@v4.0.0.dev6&quot;`-   For faster OME-TIFF reading with tile tags: `pip install aicsimageio[bfio]`-   For multiple additional supported formats: `pip install aicsimageio[base-imageio,nd2]`-   For all additional supported (and openly licensed) formats: `pip install aicsimageio[all]`-   Due to the GPL license, LIF support is not included with the `[all]` extra, and must be installed manually with `pip install aicsimageio readlif&gt;=0.6.4`-   Due to the GPL license, CZI support is not included with the `[all]` extra, and must be installed manually with `pip install aicsimageio aicspylibczi&gt;=3.1.1 fsspec&gt;=2022.8.0`-   Due to the GPL license, Bio-Formats support is not included with the `[all]` extra, and must be installed manually with `pip install aicsimageio bioformats_jar`. **Important!!** Bio-Formats support also requires a `java` and `mvn` executable in the environment. The simplest method is to install `bioformats_jar` from conda: `conda install -c conda-forge bioformats_jar` (which will additionally bring `openjdk` and `maven` packages).## DocumentationFor full package documentation please visit[allencellmodeling.github.io/aicsimageio](https://allencellmodeling.github.io/aicsimageio/index.html).## Quickstart### Full Image ReadingIf your image fits in memory:```pythonfrom aicsimageio import AICSImage# Get an AICSImage objectimg = AICSImage(&quot;my_file.tiff&quot;)  # selects the first scene foundimg.data  # returns 5D TCZYX numpy arrayimg.xarray_data  # returns 5D TCZYX xarray data array backed by numpyimg.dims  # returns a Dimensions objectimg.dims.order  # returns string &quot;TCZYX&quot;img.dims.X  # returns size of X dimensionimg.shape  # returns tuple of dimension sizes in TCZYX orderimg.get_image_data(&quot;CZYX&quot;, T=0)  # returns 4D CZYX numpy array# Get the id of the current operating sceneimg.current_scene# Get a list valid scene idsimg.scenes# Change scene using nameimg.set_scene(&quot;Image:1&quot;)# Or by scene indeximg.set_scene(1)# Use the same operations on a different scene# ...```#### Full Image Reading NotesThe `.data` and `.xarray_data` properties will load the whole scene into memory.The `.get_image_data` function will load the whole scene into memory and then retrievethe specified chunk.### Delayed Image ReadingIf your image doesn't fit in memory:```pythonfrom aicsimageio import AICSImage# Get an AICSImage objectimg = AICSImage(&quot;my_file.tiff&quot;)  # selects the first scene foundimg.dask_data  # returns 5D TCZYX dask arrayimg.xarray_dask_data  # returns 5D TCZYX xarray data array backed by dask arrayimg.dims  # returns a Dimensions objectimg.dims.order  # returns string &quot;TCZYX&quot;img.dims.X  # returns size of X dimensionimg.shape  # returns tuple of dimension sizes in TCZYX order# Pull only a specific chunk in-memorylazy_t0 = img.get_image_dask_data(&quot;CZYX&quot;, T=0)  # returns out-of-memory 4D dask arrayt0 = lazy_t0.compute()  # returns in-memory 4D numpy array# Get the id of the current operating sceneimg.current_scene# Get a list valid scene idsimg.scenes# Change scene using nameimg.set_scene(&quot;Image:1&quot;)# Or by scene indeximg.set_scene(1)# Use the same operations on a different scene# ...```#### Delayed Image Reading NotesThe `.dask_data` and `.xarray_dask_data` properties and the `.get_image_dask_data`function will not load any piece of the imaging data into memory until you specificallycall `.compute` on the returned Dask array. In doing so, you will only then load theselected chunk in-memory.### Mosaic Image ReadingRead stitched data or single tiles as a dimension.Readers that support mosaic tile stitching:-   `LifReader`-   `CziReader`#### AICSImageIf the file format reader supports stitching mosaic tiles together, the`AICSImage` object will default to stitching the tiles back together.```pythonimg = AICSImage(&quot;very-large-mosaic.lif&quot;)img.dims.order  # T, C, Z, big Y, big X, (S optional)img.dask_data  # Dask chunks fall on tile boundaries, pull YX chunks out of the image```This behavior can be manually turned off:```pythonimg = AICSImage(&quot;very-large-mosaic.lif&quot;, reconstruct_mosaic=False)img.dims.order  # M (tile index), T, C, Z, small Y, small X, (S optional)img.dask_data  # Chunks use normal ZYX```If the reader does not support stitching tiles together the M tile index will beavailable on the `AICSImage` object:```pythonimg = AICSImage(&quot;some-unsupported-mosaic-stitching-format.ext&quot;)img.dims.order  # M (tile index), T, C, Z, small Y, small X, (S optional)img.dask_data  # Chunks use normal ZYX```#### ReaderIf the file format reader detects mosaic tiles in the image, the `Reader` objectwill store the tiles as a dimension.If tile stitching is implemented, the `Reader` can also return the stitched image.```pythonreader = LifReader(&quot;ver-large-mosaic.lif&quot;)reader.dims.order  # M, T, C, Z, tile size Y, tile size X, (S optional)reader.dask_data  # normal operations, can use M dimension to select individual tilesreader.mosaic_dask_data  # returns stitched mosaic - T, C, Z, big Y, big, X, (S optional)```#### Single Tile Absolute PositioningThere are functions available on both the `AICSImage` and `Reader` objectsto help with single tile positioning:```pythonimg = AICSImage(&quot;very-large-mosaic.lif&quot;)img.mosaic_tile_dims  # Returns a Dimensions object with just Y and X dim sizesimg.mosaic_tile_dims.Y  # 512 (for example)# Get the tile start indices (top left corner of tile)y_start_index, x_start_index = img.get_mosaic_tile_position(12)```### Metadata Reading```pythonfrom aicsimageio import AICSImage# Get an AICSImage objectimg = AICSImage(&quot;my_file.tiff&quot;)  # selects the first scene foundimg.metadata  # returns the metadata object for this file format (XML, JSON, etc.)img.channel_names  # returns a list of string channel names found in the metadataimg.physical_pixel_sizes.Z  # returns the Z dimension pixel size as found in the metadataimg.physical_pixel_sizes.Y  # returns the Y dimension pixel size as found in the metadataimg.physical_pixel_sizes.X  # returns the X dimension pixel size as found in the metadata```### Xarray Coordinate Plane AttachmentIf `aicsimageio` finds coordinate information for the spatial-temporal dimensions ofthe image in metadata, you can use[xarray](http://xarray.pydata.org/en/stable/index.html) for indexing by coordinates.```pythonfrom aicsimageio import AICSImage# Get an AICSImage objectimg = AICSImage(&quot;my_file.ome.tiff&quot;)# Get the first ten seconds (not frames)first_ten_seconds = img.xarray_data.loc[:10]  # returns an xarray.DataArray# Get the first ten major units (usually micrometers, not indices) in Zfirst_ten_mm_in_z = img.xarray_data.loc[:, :, :10]# Get the first ten major units (usually micrometers, not indices) in Yfirst_ten_mm_in_y = img.xarray_data.loc[:, :, :, :10]# Get the first ten major units (usually micrometers, not indices) in Xfirst_ten_mm_in_x = img.xarray_data.loc[:, :, :, :, :10]```See `xarray`[&quot;Indexing and Selecting Data&quot; Documentation](http://xarray.pydata.org/en/stable/indexing.html)for more information.### Cloud IO Support[File-System Specification (fsspec)](https://github.com/intake/filesystem_spec) allowsfor common object storage services (S3, GCS, etc.) to act like normal filesystems byfollowing the same base specification across them all. AICSImageIO utilizes thisstandard specification to make it possible to read directly from remote resources whenthe specification is installed.```pythonfrom aicsimageio import AICSImage# Get an AICSImage objectimg = AICSImage(&quot;http://my-website.com/my_file.tiff&quot;)img = AICSImage(&quot;s3://my-bucket/my_file.tiff&quot;)img = AICSImage(&quot;gcs://my-bucket/my_file.tiff&quot;)# Or read with specific filesystem creation argumentsimg = AICSImage(&quot;s3://my-bucket/my_file.tiff&quot;, fs_kwargs=dict(anon=True))img = AICSImage(&quot;gcs://my-bucket/my_file.tiff&quot;, fs_kwargs=dict(anon=True))# All other normal operations work just fine```Remote reading requires that the file-system specification implementation for thetarget backend is installed.-   For `s3`: `pip install s3fs`-   For `gs`: `pip install gcsfs`See the [list of known implementations](https://filesystem-spec.readthedocs.io/en/latest/?badge=latest#implementations).### Saving to OME-TIFFThe simpliest method to save your image as an OME-TIFF file with key pieces ofmetadata is to use the `save` function.```pythonfrom aicsimageio import AICSImageAICSImage(&quot;my_file.czi&quot;).save(&quot;my_file.ome.tiff&quot;)```**Note:** By default `aicsimageio` will generate only a portion of metadata to passalong from the reader to the OME model. This function currently does not do a fullmetadata translation.For finer grain customization of the metadata, scenes, or if you want to save an arrayas an OME-TIFF, the writer class can also be used to customize as needed.```pythonimport numpy as npfrom aicsimageio.writers import OmeTiffWriterimage = np.random.rand(10, 3, 1024, 2048)OmeTiffWriter.save(image, &quot;file.ome.tif&quot;, dim_order=&quot;ZCYX&quot;)```See[OmeTiffWriter documentation](./aicsimageio.writers.html#aicsimageio.writers.ome_tiff_writer.OmeTiffWriter.save)for more details.#### Other WritersIn most cases, `AICSImage.save` is usually a good default but there are other imagewriters available. For more information, please refer to[our writers documentation](https://allencellmodeling.github.io/aicsimageio/aicsimageio.writers.html).## BenchmarksAICSImageIO is benchmarked using [asv](https://asv.readthedocs.io/en/stable/).You can find the benchmark results for every commit to `main` starting at the 4.0release on our[benchmarks page](https://AllenCellModeling.github.io/aicsimageio/_benchmarks/index.html).## DevelopmentSee our[developer resources](https://allencellmodeling.github.io/aicsimageio/developer_resources)for information related to developing the code.## CitationIf you find `aicsimageio` useful, please cite this repository as:&gt; Eva Maxfield Brown, Dan Toloudis, Jamie Sherman, Madison Swain-Bowden, Talley Lambert, AICSImageIO Contributors (2021). AICSImageIO: Image Reading, Metadata Conversion, and Image Writing for Microscopy Images in Pure Python [Computer software]. GitHub. https://github.com/AllenCellModeling/aicsimageiobibtex:```bibtex@misc{aicsimageio,  author    = {Brown, Eva Maxfield and Toloudis, Dan and Sherman, Jamie and Swain-Bowden, Madison and Lambert, Talley and {AICSImageIO Contributors}},  title     = {AICSImageIO: Image Reading, Metadata Conversion, and Image Writing for Microscopy Images in Pure Python},  year      = {2021},  publisher = {GitHub},  url       = {https://github.com/AllenCellModeling/aicsimageio}}```_Free software: BSD-3-Clause__(The LIF component is licensed under GPLv3 and is not included in this package)__(The Bio-Formats component is licensed under GPLv2 and is not included in this package)__(The CZI component is licensed under GPLv3 and is not included in this package)_</longdescription>
</pkgmetadata>