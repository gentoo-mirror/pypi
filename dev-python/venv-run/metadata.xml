<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========venv-run========Doing this..... code:: bash    venv-run myapp.py...is *more convenient* than this..... code:: bash    source myvenv/bin/activate    python myapp.py    deactivateThat is the main motivation of this tool!.. contents::``venv-run`` is a tool for running commands with a Python virtual environmentwithout *explicitly* activating it (and deactivating it when you are done).Essentially it runs your command with the virtual environment's binary pathprepended to the system's ``PATH`` environment variable. Another nice thingabout ``venv-run`` is that it tries to find the environment's directory fromyour current working directory so you can save some typing.Installation============Using ``pip``-------------.. code:: bash    pip install venv-runFrom source-----------If you have ``pip`` available in your system, then the recommended way toinstall from source is doing:.. code:: bash    # From the source root    pip install .Alternatively, you can call ``setup.py`` directly, but remember that it *doesnot provide an &quot;uninstall&quot; command* (this form is useful for OS distributionpackagers):.. code:: bash    python setup.py installUsage=====``venv-run`` can be called directly as a shell command:.. code:: bash    venv-run [OPTIONS] [--] [CMD]When called, the first thing ``venv-run`` does is to look for a (single)virtual environment under your current working directory. After it encountersthe environment's directory, it runs your command with the environment's binarypath prepended to the system's binary path.All the examples in this section assume you have a virtual environment createdin the working directory.Running a Python script-----------------------Suppose you have a Python project in ``my-python-project`` and have created avirtual environment like the example below:.. code:: bash    $ cd my-python-project    $ python -m venv myvenvYou can call a Python script of your project using that environment with thecommand:.. code:: bash    $ venv-run myapp.pyIf ``myapp.py`` accepts arguments, you can pass them normally:.. code:: bash    $ venv-run myapp.py --foo --bar baz.. note::    Running Python scripts like this is possible because ``venv-run`` guesses    that you want to run ``myapp.py`` with the environment's Python    interpreter. If myapp.py has execution permission for your user, then    ``venv-run`` *will not* invoke the interpreter for you. You can call    ``venv-run python myapp.py`` for such cases.Calling Python--------------The virtual environment's Python interpreter is implicitly called in thefollowing situations:    - When no command is passed to ``venv-run``;    - When the first word of ``CMD`` is not an executable and either starts      with ``-`` or ends with ``.py``. In this case, ``python`` is prepended to      ``CMD`` (the example in the previous section falls under this condition).Thus, for example, you can start an interactive session with the environment'sPython by simply calling:.. code:: bash    $ venv-runAnd you can call a module installed in the environment with:.. code:: bash    $ venv -m path.to.moduleFor both cases, it's also okay to explicitly call the interpreter (e.g.``venv-run python -m path.to.module``).Calling executables-------------------If you want to call an executable installed in your virtual environment, youcan call it like in the example below:.. code:: bash    # Suppose I'm using flask to develop a Web application and want to start    # the development server    $ venv-run flask runThe executable does not need to be really installed in the environment. Thenext example starts the system's ``bash`` with ``venv/bin`` prepended to``PATH``:.. code:: bash    $ venv-run bashLocally installing and using a Python package---------------------------------------------Let's say you want to use `bpython &lt;https://bpython-interpreter.org/&gt;`_ tointeractively use and test your project's modules.You can install it:.. code:: bash    $ venv-run pip install bpythonAnd the run it at will:.. code:: bash    $ venv-run bpythonMultiple virtual environments-----------------------------``venv-run`` refuses to continue if it finds more than one virtual environment.You can pass ``--venv PATH_TO_VENV`` to point the environment to be used forsuch cases.Options ambiguity-----------------If ``CMD`` uses options conflicting with ``venv-run``'s own options, then youcan prepend ``CMD`` with ``--`` to mark the beginning of ``CMD``. Example:.. code:: bash    $ venv-run python -h # Shows venv-run's help message    $ venv-run -- python -h # Shows python's help messageUse cases=========With pre-commit---------------A common specific use case is to be able to run pre-commit_ ``system``and ``script`` hooks written in Python so that they're run within thevirtual environment of the project, even if it hadn't been activatedbeforehand. This may happen for example when ``pre-commit`` islaunched when committing from an IDE that is not virtualenvself-aware, initially launched in an environment different from theproject's virtual one.Another one is to get tools that need to be run in the project'svirtual environment to work properly -- such as mypy_, pylint_, andpytype_ to name a few -- to actually run in it. To do this, instead ofusing the usual project provided hooks, install the respective toolpackage along with its dependencies and plugins in the project'svirtual environment and use a ``local`` pre-commit hook like:.. code:: yaml  - repo: local    hooks:      - id: pylint        name: pylint        language: python        additional_dependencies: [venv-run]        entry: venv-run pylint        types: [python]Be sure to look into the project provided hooks to see if there areany additional needed settings, for example ``args``, anything specialin ``entry``, ``require_serial`` or the like, and replicate in yourlocal hook as applicable... _pre-commit: https://pre-commit.com.. _mypy: http://mypy-lang.org.. _pylint: https://pylint.org.. _pytype: https://google.github.io/pytype/Authors=======- Gustavo Jos√© de Sousa (@guludo)</longdescription>
</pkgmetadata>