<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Streamlit Uploads Library[![Open in Streamlit](https://static.streamlit.io/badges/streamlit_badge_black_white.svg)](https://hreikin-streamlit-uploads-library-home-ar6h9h.streamlit.app/)A simple uploads library and gallery for use in Streamlit projects. Check out the demo using the Streamlit Cloud button above. This package provides a simple wrapper around `st.file_uploader` with a save function included and also provides library and gallery views for use in Streamlit projects.## InstallationInstallation is available via pip:```pip install streamlit-uploads-library```## UsageUsing any of the provided views is easy, import `streamlit_uploads_library` and then instantiate the class with the required `directory` variable. Other options can be configured by passing in different variables when instantiating the class.### Library View- `directory` (required): A str() of the path to the folder containing the library images, for example, &quot;assets&quot;.- `file_extensions` (optional): A tuple() containing strings of the file extensions to include in the library, default is (&quot;.png&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;).- `image_alignment` (optional): A str() with the CSS keyword used to align the images and details columns.- `number_of_columns` (optional): An int() defining the number of required columns, default is 5.- `show_details` (optional): A bool() to show or hide the file and edit details, False hides them, default is True to show them.- `uid` (optional): A str() containing a unique identifier allowing you to create multiple libraries on the same page containing the same images.```pythonimport streamlit as stfrom streamlit_uploads_library.library import Libraryst.set_page_config(page_title=&quot;Streamlit Uploads Library&quot;, layout=&quot;wide&quot;)library = Library(directory=&quot;assets/landscape/&quot;)library_columns = Library(directory=&quot;assets/portrait/&quot;, number_of_columns=4, uid=&quot;library-columns&quot;)library_mixed = Library(directory=&quot;assets/mixed/&quot;, uid=&quot;mixed-library&quot;)```### Gallery View- `directory` (required): A str() of the path to the folder containing the gallery images, for example, &quot;assets&quot;.- `file_extensions` (optional): A tuple() containing strings of the file extensions to include in the gallery, default is (&quot;.png&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;).- `image_alignment` (optional): A str() with the CSS keyword used to align the images and details columns.- `number_of_columns` (optional): An int() defining the number of required columns, default is 5.- `show_details` (optional): A bool() to show or hide the file and edit details, True shows them, default is False to hide them and create a gallery.- `uid` (optional): A str() containing a unique identifier allowing you to create multiple galleries on the same page containing the same images.```pythonimport streamlit as stfrom streamlit_uploads_library.gallery import Galleryst.set_page_config(page_title=&quot;Streamlit Uploads Library&quot;, layout=&quot;wide&quot;)default_gallery = Gallery(directory=&quot;assets/landscape/&quot;)columns_gallery = Gallery(directory=&quot;assets/portrait/&quot;, number_of_columns=4, uid=&quot;gallery-columns&quot;)mixed_gallery = Gallery(directory=&quot;assets/mixed/&quot;, uid=&quot;mixed-gallery&quot;)```### Upload ViewThe file uploader comes with multiple options able to be configured including 2 different view types. It is not required to use this and you can easily replace it with your own, it is provided as a convenience so you don't need to create the code yourself or replicate it across multiple projects.- `save_location` (required): A str() of the path to the folder you wish to save images to, for example, &quot;assets&quot;.- `expander` (optional): A bool() used to set the initial state of the expander, only used when using the &quot;expander&quot; widget_type.- `file_extensions` (optional): A list() containing strings of the file extensions to include in the library, default is (&quot;.png&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;).- `info_msg` (optional): A str() used to set an info message above the uploader, default is &quot;Upload new files here.&quot;.- `header` (optional): A str() used to set the header of the &quot;expander&quot; or the header in the &quot;container&quot; type widget, default is &quot;Upload Files&quot;, can be set to None to not display it.- `uid` (optional): A str() containing a unique identifier allowing you to create multiple file uploaders on the same page.- `upload_label` (optional): A str() used to set the label of the file uploader widget, default is &quot;Upload Files&quot;, can be set to None to display an empty string instead.- `widget_type` (optional): A str() defining the type of widget to use to display the file uploader, options are &quot;container&quot; or &quot;expander&quot;, default is &quot;container&quot;.```pythonimport streamlit as stfrom streamlit_uploads_library.uploads import UploadFilesst.set_page_config(page_title=&quot;Streamlit Uploads Library&quot;, layout=&quot;wide&quot;)default_uploader = UploadFiles(save_location=&quot;assets&quot;)expander_uploader = UploadFiles(save_location=&quot;assets&quot;, widget_type=&quot;expander&quot;)```## Custom File DetailsA default set of basic file details is provided for each image within the library. Using class inheritance this can be overridden to create your own file details section if you wish to include more information or different options.```import streamlit as stfrom streamlit_uploads_library.library import Libraryclass CustomLibrary(Library):    def __init__(self, directory, file_extensions=(&quot;.png&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;), image_alignment=&quot;center&quot;, number_of_columns=5, show_details=True, uid=&quot;custom&quot;):        self.directory = directory        self.file_extensions = file_extensions        self.image_alignment = image_alignment        self.number_of_columns = number_of_columns        self.show_details = show_details        self.uid = uid        super(CustomLibrary, self).__init__(self.directory, self.file_extensions, self.image_alignment, self.number_of_columns, self.show_details, self.uid)    def create_details(_self, img, filename_idx, uid):        # Your details section code here```## CachingStreamlit Uploads Library makes use of the `st.cache_resource` decorator so the library and gallery on this page will load from the cache instead of reloading the images each time the app is run. You will probably want to clear your cache after uploading new files to your app, the file uploader view provided by this package takes care of that for you but if you use your own file uploader and save function then to clear the cache you can use the `st.cache_resource.clear()` function provided by Streamlit.## Example App (Demo)To run the example application provided in the repository:```bashgit clone https://github.com/hreikin/streamlit-uploads-librarycd streamlit-uploads-library/python -m venv .venvsource .venv/bin/activatepip install -r requirements.txtstreamlit run Home.py```</longdescription>
</pkgmetadata>