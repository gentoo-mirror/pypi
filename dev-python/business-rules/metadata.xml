<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>business-rules==============As a software system grows in complexity and usage, it can become burdensome ifevery change to the logic/behavior of the system also requires you to write anddeploy new code. The goal of this business rules engine is to provide a simpleinterface allowing anyone to capture new rules and logic defining the behaviorof a system, and a way to then process those rules on the backend.You might, for example, find this is a useful way for analysts to definemarketing logic around when certain customers or items are eligible for adiscount or to automate emails after users enter a certain state or go througha particular sequence of events.## Usage### 1. Define Your set of variablesVariables represent values in your system, usually the value of some particular object.  You create rules by setting threshold conditions such that when a variable is computed that triggers the condition some action is taken.You define all the available variables for a certain kind of object in your code, and then later dynamically set the conditions and thresholds for those.For example:```pythonclass ProductVariables(BaseVariables):    def __init__(self, product):        self.product = product    @numeric_rule_variable    def current_inventory(self):        return self.product.current_inventory    @numeric_rule_variable(label='Days until expiration')    def expiration_days(self)        last_order = self.product.orders[-1]        return (last_order.expiration_date - datetime.date.today()).days    @string_rule_variable()    def current_month(self):        return datetime.datetime.now().strftime(&quot;%B&quot;)    @select_rule_variable(options=Products.top_holiday_items())    def goes_well_with(self):        return products.related_products```### 2. Define your set of actionsThese are the actions that are available to be taken when a condition is triggered.For example:```pythonclass ProductActions(BaseActions):    def __init__(self, product):        self.product = product    @rule_action(params={&quot;sale_percentage&quot;: FIELD_NUMERIC})    def put_on_sale(self, sale_percentage):        self.product.price = (1.0 - sale_percentage) * self.product.price        self.product.save()    @rule_action(params={&quot;number_to_order&quot;: FIELD_NUMERIC})    def order_more(self, number_to_order):        ProductOrder.objects.create(product_id=self.product.id,                                    quantity=number_to_order)```If you need a select field for an action parameter, another -more verbose- syntax is available:```pythonclass ProductActions(BaseActions):    def __init__(self, product):        self.product = product    @rule_action(params=[{'fieldType': FIELD_SELECT,                          'name': 'stock_state',                          'label': 'Stock state',                          'options': [                            {'label': 'Available', 'name': 'available'},                            {'label': 'Last items', 'name': 'last_items'},                            {'label': 'Out of stock', 'name': 'out_of_stock'}                        ]}])    def change_stock_state(self, stock_state):        self.product.stock_state = stock_state        self.product.save()```### 3. Build the rulesA rule is just a JSON object that gets interpreted by the business-rules engine.Note that the JSON is expected to be auto-generated by a UI, which makes it simple for anyone to set and tweak business rules without knowing anything about the code.  The javascript library used for generating these on the web can be found [here](https://github.com/venmo/business-rules-ui).An example of the resulting python lists/dicts is:```pythonrules = [# expiration_days &lt; 5 AND current_inventory &gt; 20{ &quot;conditions&quot;: { &quot;all&quot;: [      { &quot;name&quot;: &quot;expiration_days&quot;,        &quot;operator&quot;: &quot;less_than&quot;,        &quot;value&quot;: 5,      },      { &quot;name&quot;: &quot;current_inventory&quot;,        &quot;operator&quot;: &quot;greater_than&quot;,        &quot;value&quot;: 20,      },  ]},  &quot;actions&quot;: [      { &quot;name&quot;: &quot;put_on_sale&quot;,        &quot;params&quot;: {&quot;sale_percentage&quot;: 0.25},      },  ],},# current_inventory &lt; 5 OR (current_month = &quot;December&quot; AND current_inventory &lt; 20){ &quot;conditions&quot;: { &quot;any&quot;: [      { &quot;name&quot;: &quot;current_inventory&quot;,        &quot;operator&quot;: &quot;less_than&quot;,        &quot;value&quot;: 5,      },    ]},      { &quot;all&quot;: [        {  &quot;name&quot;: &quot;current_month&quot;,          &quot;operator&quot;: &quot;equal_to&quot;,          &quot;value&quot;: &quot;December&quot;,        },        { &quot;name&quot;: &quot;current_inventory&quot;,          &quot;operator&quot;: &quot;less_than&quot;,          &quot;value&quot;: 20,        }      ]},  },  &quot;actions&quot;: [    { &quot;name&quot;: &quot;order_more&quot;,      &quot;params&quot;:{&quot;number_to_order&quot;: 40},    },  ],}]```### Export the available variables, operators and actionsTo e.g. send to your client so it knows how to build rules```pythonfrom business_rules import export_rule_dataexport_rule_data(ProductVariables, ProductActions)```that returns```python{&quot;variables&quot;: [    { &quot;name&quot;: &quot;expiration_days&quot;,      &quot;label&quot;: &quot;Days until expiration&quot;,      &quot;field_type&quot;: &quot;numeric&quot;,      &quot;options&quot;: []},    { &quot;name&quot;: &quot;current_month&quot;,      &quot;label&quot;: &quot;Current Month&quot;,      &quot;field_type&quot;: &quot;string&quot;,      &quot;options&quot;: []},    { &quot;name&quot;: &quot;goes_well_with&quot;,      &quot;label&quot;: &quot;Goes Well With&quot;,      &quot;field_type&quot;: &quot;select&quot;,      &quot;options&quot;: [&quot;Eggnog&quot;, &quot;Cookies&quot;, &quot;Beef Jerkey&quot;]}                ],  &quot;actions&quot;: [    { &quot;name&quot;: &quot;put_on_sale&quot;,      &quot;label&quot;: &quot;Put On Sale&quot;,      &quot;params&quot;: {&quot;sale_percentage&quot;: &quot;numeric&quot;}},    { &quot;name&quot;: &quot;order_more&quot;,      &quot;label&quot;: &quot;Order More&quot;,      &quot;params&quot;: {&quot;number_to_order&quot;: &quot;numeric&quot;}}  ],  &quot;variable_type_operators&quot;: {    &quot;numeric&quot;: [ {&quot;name&quot;: &quot;equal_to&quot;,                  &quot;label&quot;: &quot;Equal To&quot;,                  &quot;input_type&quot;: &quot;numeric&quot;},                 {&quot;name&quot;: &quot;less_than&quot;,                  &quot;label&quot;: &quot;Less Than&quot;,                  &quot;input_type&quot;: &quot;numeric&quot;},                 {&quot;name&quot;: &quot;greater_than&quot;,                  &quot;label&quot;: &quot;Greater Than&quot;,                  &quot;input_type&quot;: &quot;numeric&quot;}],    &quot;string&quot;: [ { &quot;name&quot;: &quot;equal_to&quot;,                  &quot;label&quot;: &quot;Equal To&quot;,                  &quot;input_type&quot;: &quot;text&quot;},                { &quot;name&quot;: &quot;non_empty&quot;,                  &quot;label&quot;: &quot;Non Empty&quot;,                  &quot;input_type&quot;: &quot;none&quot;}]  }}```### Run your rules```pythonfrom business_rules import run_allrules = _some_function_to_receive_from_client()for product in Products.objects.all():    run_all(rule_list=rules,            defined_variables=ProductVariables(product),            defined_actions=ProductActions(product),            stop_on_first_trigger=True           )```## API#### Variable Types and Decorators:The type represents the type of the value that will be returned for the variable and is necessary since there are different available comparison operators for different types, and the front-end that's generating the rules needs to know which operators are available.All decorators can optionally take a label:- `label` - A human-readable label to show on the frontend. By default we just split the variable name on underscores and capitalize the words.The available types and decorators are:**numeric** - an integer, float, or python Decimal.`@numeric_rule_variable` operators:* `equal_to`* `greater_than`* `less_than`* `greater_than_or_equal_to`* `less_than_or_equal_to`Note: to compare floating point equality we just check that the difference is less than some small epsilon**string** - a python bytestring or unicode string.`@string_rule_variable` operators:* `equal_to`* `starts_with`* `ends_with`* `contains`* `matches_regex`* `non_empty`**boolean** - a True or False value.`@boolean_rule_variable` operators:* `is_true`* `is_false`**select** - a set of values, where the threshold will be a single item.`@select_rule_variable` operators:* `contains`* `does_not_contain`**select_multiple** - a set of values, where the threshold will be a set of items.`@select_multiple_rule_variable` operators:* `contains_all`* `is_contained_by`* `shares_at_least_one_element_with`* `shares_exactly_one_element_with`* `shares_no_elements_with`### Returning data to your client## ContributingOpen up a pull request, making sure to add tests for any new functionality. To set up the dev environment (assuming you're using [virtualenvwrapper](http://docs.python-guide.org/en/latest/dev/virtualenvs/#virtualenvwrapper)):```bash$ python -m virtualenv venv$ source ./venv/bin/activate$ pip install -r dev-requirements.txt -e .$ pytest```Alternatively, you can also use Tox:```bash$ pip install &quot;tox&lt;4&quot;$ tox -p auto --skip-missing-interpreters```History=========## 1.1.1Release date: 2022-3-18- Fix package description and long description## 1.1.0Release date: 2022-3-18- Add support for Python 3.5-3.7## 1.0.1Release date: 2016-3-16- Fixes a packaging bug preventing 1.0.0 from being installed on some platforms.## 1.0.0Release date: 2016-3-16- Removes caching layer on rule decorator</longdescription>
</pkgmetadata>