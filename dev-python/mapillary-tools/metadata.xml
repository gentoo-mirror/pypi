<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/mapillary/mapillary_tools/&quot;&gt;    &lt;img src=&quot;https://raw.githubusercontent.com/mapillary/mapillary_tools/main/docs/images/logo.png&quot;&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://pypi.org/project/mapillary_tools/&quot;&gt;&lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/mapillary_tools&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mapillary/mapillary_tools/actions&quot;&gt;&lt;img alt=&quot;Actions Status&quot; src=&quot;https://github.com/mapillary/mapillary_tools/actions/workflows/python-package.yml/badge.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mapillary/mapillary_tools/blob/main/LICENSE&quot;&gt;&lt;img alt=&quot;GitHub license&quot; src=&quot;https://img.shields.io/github/license/mapillary/mapillary_tools&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mapillary/mapillary_tools/stargazers&quot;&gt;&lt;img alt=&quot;GitHub stars&quot; src=&quot;https://img.shields.io/github/stars/mapillary/mapillary_tools&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pepy.tech/project/mapillary_tools&quot;&gt;&lt;img alt=&quot;Downloads&quot; src=&quot;https://pepy.tech/badge/mapillary_tools&quot;&gt;&lt;/a&gt;&lt;/p&gt;mapillary_tools is a command line tool that uploads geotagged images and videos to Mapillary.```sh# Install mapillary_toolspip install mapillary_tools# Process and upload images and videos in the directorymapillary_tools process_and_upload MY_CAPTURE_DIR# List all commandsmapillary_tools --help```&lt;!--ts--&gt;- [Supported File Formats](#supported-file-formats)- [Installation](#installation)- [Usage](#usage)  - [Process and Upload](#process-and-upload)  - [Process](#process)  - [Upload](#upload)- [Advanced Usage](#advanced-usage)  - [Local Video Processing](#local-video-processing)  - [Geotagging with GPX](#geotagging-with-gpx)  - [Authenticate](#authenticate)  - [Image Description](#image-description)  - [Zip Images](#zip-images)- [Development](#development)&lt;!--te--&gt;# Supported File Formatsmapillary_tools can upload both images and videos.## Image Formatsmapillary_tools supports JPG/JEPG images (.jpg, .jpeg), with the following EXIF tags minimally required:- GPS Longitude- GPS Latitude- Date/Time Original or GPS Date/Time## Video Formatsmapillary_tools supports videos (.mp4, .360) that contain any of the following telemetry structures:- [GPMF](https://github.com/gopro/gpmf-parser): mostly GoPro videos  - [GoPro HERO series](https://gopro.com/en/us/shop/cameras/hero11-black/CHDHX-111-master.html) (from 5 to 11)  - [GoPro MAX](https://gopro.com/en/us/shop/cameras/max/CHDHZ-202-master.html)- [CAMM](https://developers.google.com/streetview/publish/camm-spec): an open-standard telemetry spec supported by a number of cameras  - [Insta360 Pro2](https://www.insta360.com/product/insta360-pro2/)  - [Insta360 Titan](https://www.insta360.com/product/insta360-titan)  - [Ricoh Theta X](https://theta360.com/en/about/theta/x.html)  - [Labpano](https://www.labpano.com/)  - and more...- [BlackVue](https://blackvue.com/) videos  - [DR900S-1CH](https://shop.blackvue.com/product/dr900x-1ch-plus/)  - [DR900X Plus](https://shop.blackvue.com/product/dr900x-2ch-plus/)# Installation## Standalone Executable1. Download the latest executable for your platform from the [releases](https://github.com/mapillary/mapillary_tools/releases).2. Move the executable to your system `$PATH`&gt; **_NOTE:_** If you see the error &quot;**mapillary_tools is damaged and can’t be opened**&quot; on macOS, try to clear the extended attributes:&gt;&gt; ```&gt; xattr -c mapillary_tools&gt; ```## Installing via pipTo install or upgrade to the latest stable version:```shpip install --upgrade mapillary_tools```If you can't wait for the latest features in development, install it from GitHub:```shpip install --upgrade git+https://github.com/mapillary/mapillary_tools```&gt; **_NOTE:_** If you see &quot;**Permission Denied**&quot; error, try to run the command above with `sudo`, or install it in your&gt; local [virtualenv](#setup) (recommended).### Installing on Android DevicesA command line program such as Termux is required. Installation can be done without root privileges. The followingcommands will install Python 3, pip3, git, and all required libraries for mapillary_tools on Termux:```shpkg install python git build-essential libgeos openssl libjpeg-turbopip install --upgrade pip wheelpip install --upgrade mapillary_tools```Termux must access the device's internal storage to process and upload images. To do this, use the following command:```shtermux-setup-storage```Finally, on devices running Android 11, using a command line program, mapillary_tools will process images very slowly ifthey are in shared internal storage during processing. It is advisable to first move images to the command lineprogram’s native directory before running mapillary_tools. For an example using Termux, if imagery is stored in thefolder `Internal storage/DCIM/mapillaryimages` the following command will move that folder from shared storage toTermux:```shmv -v storage/dcim/mapillaryimages mapillaryimages```# Usage## Process and UploadFor most users, `process_and_upload` is the command to go:```sh# Process and upload all images and videos in MY_CAPTURE_DIR and its subfolders, and all videos under MY_VIDEO_DIRmapillary_tools process_and_upload MY_CAPTURE_DIR MY_VIDEO_DIR/*.mp4```If any process error occurs, e.g. GPS not found in an image, mapillary_tools will exit with non-zero status code.To ignore these errors and continue uploading the rest:```sh# Skip process errors and upload to the specified user and organizationmapillary_tools process_and_upload MY_CAPTURE_DIR MY_VIDEO_DIR/*.mp4 \    --skip_process_errors \    --user_name &quot;my_username&quot; \    --organization_key &quot;my_organization_id&quot;```The `process_and_upload` command will run the [`process`](#process) and the [`upload`](#upload) commands consecutively with combined required and optional arguments.The command above is equivalent to:```shmapillary_tools process MY_CAPTURE_DIR MY_VIDEO_DIR/*.mp4 \    --skip_process_errors \    --desc_path /tmp/mapillary_description_file.jsonmapillary_tools upload MY_CAPTURE_DIR MY_VIDEO_DIR/*.mp4 \    --desc_path /tmp/mapillary_description_file.json \    --user_name &quot;my_username&quot; \    --organization_key &quot;my_organization_id&quot;```## ProcessThe `process` command is an intermediate step that extracts the metadata from images and videos,and writes them in an [image description file](#image-description). Users should pass it to the [`upload`](#upload) command.```shmapillary_tools process MY_CAPTURE_DIR MY_VIDEO_DIR/*.mp4```Duplicate check with custom distance and angle:```sh# Mark images that are 3 meters closer to its previous one as duplicates.# Duplicates won't be uploadedmapillary_tools process MY_CAPTURE_DIR \    --duplicate_distance 3 \    --duplicate_angle 360  # Set 360 to disable angle check```Split sequences with the custom cutoff distance or custom capture time gap:```sh# If two successive images are 100 meters apart,# OR their capture times are 120 seconds apart,# then split the sequence from theremapillary_tools process MY_CAPTURE_DIR \    --offset_angle 90 \    --cutoff_distance 100 \    --cutoff_time 120 \```## UploadAfter processing you should get the [image description file](#image-description). Pass it to the `upload` command to upload them:```sh# Upload processed images and videos to the specified user account and organizationmapillary_tools upload  MY_CAPTURE_DIR \    --desc_path /tmp/mapillary_image_description.json \    --user_name &quot;my_username&quot; \    --organization_key &quot;my_organization_id&quot;```# Advanced Usage## Local Video ProcessingLocal video processing samples a video into a sequence of sample images and ensures the images are geotagged and ready for uploading.It gives users more control over the sampling process, for example, you can specify the sampling distance to control the density.Also, the sample images have smaller file sizes than videos, hence saving bandwidth.### Install FFmpeg[FFmpeg](https://ffmpeg.org/) is required for local video processing.You can download `ffmpeg` and `ffprobe` from [here](https://ffmpeg.org/download.html),or install them with your favorite package manager.### Video Processingmapillary_tools first extracts the GPS track from the video's telemetry structure, and then locates video frames along the GPS track.When all are located, it then extracts one frame (image) every 3 meters by default.```sh# Sample videos in MY_VIDEO_DIR and write the sample images in MY_SAMPLES with a custom sampling distancemapillary_tools video_process MY_VIDEO_DIR MY_SAMPLES --video_sample_distance 5# The command above is equivalent tomapillary_tools sample_video MY_VIDEO_DIR MY_SAMPLES --video_sample_distance 5mapillary_tools process MY_SAMPLES```To process and upload the sample images consecutively, run:```shmapillary_tools video_process_and_upload MY_VIDEO_DIR MY_SAMPLES --video_sample_distance 5# The command above is equivalent tomapillary_tools video_process MY_VIDEO_DIR MY_SAMPLES --video_sample_distance 5 --desc_path=/tmp/mapillary_description.jsonmapillary_tools upload MY_SAMPLES --desc_path=/tmp/mapillary_description.json```## Geotagging with GPXIf you use external GPS devices for mapping, you will need to geotag your captures with the external GPS tracks.To geotag images with a GPX file, the capture time (extracted from EXIF tag &quot;Date/Time Original&quot; or &quot;GPS Date/Time&quot;) is minimally required.It is used to locate the images along the GPS tracks.```shmapillary_tools process MY_IMAGE_DIR --geotag_source &quot;gpx&quot; --geotag_source_path MY_EXTERNAL_GPS.gpx```To geotag videos with a GPX file, video start time (video creation time minus video duration) is required to locate the sample images along the GPS tracks.```sh# Geotagging with GPX works with interval-based sampling only,# the two options --video_sample_distance -1 --video_sample_interval 2 are therefore required# to switch from the default distance-based sampling to the legacy interval-based samplingmapillary_tools video_process MY_VIDEO_DIR \    --geotag_source &quot;gpx&quot; \    --geotag_source_path MY_EXTERNAL_GPS.gpx \    --video_sample_distance -1 --video_sample_interval 2```Ideally, the GPS device and the capture device should use the same clock to get the timestamps synchronized.If not, as is often the case, the image locations will be shifted. To solve that, mapillary_tools provides anoption `--interpolation_offset_time N` that adds N seconds to image capture times for synchronizing the timestamps.```sh# The capture device's clock is 8 hours (i.e. -8 * 3600 = -28800 seconds) ahead of the GPS device's clockmapillary_tools process MY_IMAGE_DIR \    --geotag_source &quot;gpx&quot; \    --geotag_source_path MY_EXTERNAL_GPS.gpx \    --interpolation_offset_time -28800```Another option `--interpolation_use_gpx_start_time` moves your images to align with the beginning of the GPS track.This is useful when you can confirm that you start GPS recording and capturing at the same time, or with a known delay.```sh# Start capturing 2.5 seconds after start GPS recordingmapillary_tools video_process MY_VIDEO_DIR \    --geotag_source &quot;gpx&quot; \    --geotag_source_path MY_EXTERNAL_GPS.gpx \    --interpolation_use_gpx_start_time \    --interpolation_offset_time 2.5 \    --video_sample_distance -1 --video_sample_interval 2```## AuthenticateThe command `authenticate` will update the user credentials stored in the config file.### ExamplesAuthenticate new user:```shmapillary_tools authenticate```Authenticate for user `my_username`. If the user is already authenticated, it will update the credentials in the config:```shmapillary_tools authenticate --user_name &quot;my_username&quot;```## Image DescriptionThe output of the [`process`](#process) command is a JSON array of objects that describes metadata for each image or video.The metadata is validated by the [image description schema](https://github.com/mapillary/mapillary_tools/blob/main/schema/image_description_schema.json).Here is a minimal example:```json[  {    &quot;MAPLatitude&quot;: 58.5927694,    &quot;MAPLongitude&quot;: 16.1840944,    &quot;MAPCaptureTime&quot;: &quot;2021_02_13_13_24_41_140&quot;,    &quot;filename&quot;: &quot;/MY_IMAGE_DIR/IMG_0291.jpg&quot;  },  {    &quot;error&quot;: {      &quot;type&quot;: &quot;MapillaryGeoTaggingError&quot;,      &quot;message&quot;: &quot;Unable to extract GPS Longitude or GPS Latitude from the image&quot;    },    &quot;filename&quot;: &quot;/MY_IMAGE_DIR/IMG_0292.jpg&quot;  }]```Users may create or manipulate the image description file before passing them to the [`upload`](#upload) command. Here are a few examples:```sh# Remove images outside the bounding box and map matching the rest images on the road networkmapillary_tools process MY_IMAGE_DIR | \    ./filter_by_bbox.py 5.9559,45.818,10.4921,47.8084  | \    ./map_match.py &gt; /tmp/mapillary_image_description.json# Upload the processed imagesmapillary_tools upload  MY_IMAGE_DIR --desc_path /tmp/mapillary_image_description.json``````sh# Converts captures.csv to an image description file./custom_csv_to_description.sh captures.csv | mapillary_tools upload MY_IMAGE_DIR --desc_path -```## Zip ImagesWhen [uploading](#upload) an image directory, internally the `upload` command will zip sequences in the temporarydirectory (`TMPDIR`) and then upload these zip files.mapillary_tools provides `zip` command that allows users to specify where to store the zip files, usually somewhere withfaster IO or more free space.```sh# Zip processed images in MY_IMAGE_DIR and write zip files in MY_ZIPFILESmapillary_tools zip MY_IMAGE_DIR MY_ZIPFILES# Upload all the zip files (*.zip) in MY_ZIPFILES:mapillary_tools upload --file_types zip MY_ZIPFILES```# Development## SetupClone the repository:```shgit clone git@github.com:mapillary/mapillary_tools.gitcd mapillary_tools```Set up the virtual environment. It is optional but recommended:```shpip install pipenv```Install dependencies:```shpipenv install -r requirements.txtpipenv install -r requirements-dev.txt```Enter the virtualenv shell:```shpipenv shell```Run the code from the repository:```shpython3 -m mapillary_tools.commands --version```## TestsRun tests:```sh# test all casespython3 -m pytest -s -vv tests# or test a single case specificallypython3 -m pytest -s -vv tests/unit/test_camm_parser.py::test_build_and_parse```Run linting:```sh# format codeblack mapillary_tools tests# sort importsusort format mapillary_tools tests```## Release and Build```sh# Assume you are releasing v0.9.1a2 (alpha2)# Tag your local branch# Use -f here to replace the existing onegit tag -f v0.9.1a2# Push the tagged commit first if it is not there yetgit push origin# Push ALL local tags (TODO: How to push a specific tag?)# Use -f here to replace the existing tags in the remote repogit push origin --tags -f# The last step will trigger CI to publish a draft release with binaries built# in https://github.com/mapillary/mapillary_tools/releases```</longdescription>
</pkgmetadata>