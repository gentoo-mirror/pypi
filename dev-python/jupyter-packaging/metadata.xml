<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Jupyter PackagingTools to help build and install Jupyter Python packages that require a pre-build step that may include JavaScript build steps.## Install`pip install jupyter-packaging`## UsageThere are three ways to use `jupyter-packaging` in another package.In general, you should not depend on `jupyter_packaging` as a runtime dependency, only as a build dependency.### As a Build RequirementUse a `pyproject.toml` file as outlined in [pep-518](https://www.python.org/dev/peps/pep-0518/).An example:```toml[build-system]requires = [&quot;jupyter_packaging&gt;=0.10,&lt;2&quot;]build-backend = &quot;setuptools.build_meta&quot;```Below is an example `setup.py` using the above config.It assumes the rest of your metadata is in [`setup.cfg`](https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html).We wrap the import in a try/catch to allow the file to be run without `jupyter_packaging`so that `python setup.py` can be run directly when not building.```pyfrom setuptools import setuptry:    from jupyter_packaging import wrap_installers, npm_builder    builder = npm_builder()    cmdclass = wrap_installers(pre_develop=builder, pre_dist=builder)except ImportError:    cmdclass = {}setup(cmdclass=cmdclass))```### As a Build BackendUse the `jupyter_packaging` build backend.The pre-build command is specified as metadata in `pyproject.toml`:```toml[build-system]requires = [&quot;jupyter_packaging&gt;=0.10,&lt;2&quot;]build-backend = &quot;jupyter_packaging.build_api&quot;[tool.jupyter-packaging.builder]factory = &quot;jupyter_packaging.npm_builder&quot;[tool.jupyter-packaging.build-args]build_cmd = &quot;build:src&quot;```The corresponding `setup.py` would be greatly simplified:```pyfrom setuptools import setupsetup()```The `tool.jupyter-packaging.builder` section expects a `func` value that points to an importablemodule and a function with dot separators.  If not given, no pre-build function will run.The optional `tool.jupyter-packaging.build-args` sections accepts a dict of keyword arguments togive to the pre-build command.The build backend does not handle the `develop` command (`pip install -e .`).If desired, you can wrap just that command:```pyimport setuptoolstry:    from jupyter_packaging import wrap_installers, npm_builder    builder = npm_builder(build_cmd=&quot;build:dev&quot;)    cmdclass = wrap_installers(pre_develop=builder)except ImportError:    cmdclass = {}setup(cmdclass=cmdclass))```The optional `tool.jupyter-packaging.options` section accepts the following options:- `skip-if-exists`: A list of local files whose presence causes the prebuild to skip- `ensured-targets`: A list of local file paths that should exist when the dist commands are run### As a Vendored FileVendor `setupbase.py` locally alongside `setup.py` and import the module directly.```pyimport setuptoolsfrom setupbase import wrap_installers, npm_builderfunc = npm_builder()cmdclass = wrap_installers(post_develop=func, pre_dist=func)setup(cmdclass=cmdclass)```## Usage Notes- This package does not work with the deprecated `python setup.py bdist_wheel` or `python setup.py sdist` commands, PyPA recommends using the [build](https://pypa-build.readthedocs.io/en/latest/index.html) package (`pip install build &amp;&amp; python -m build .`).- We recommend using `include_package_data=True` and `MANIFEST.in` to control the assets included in the [package](https://setuptools.readthedocs.io/en/latest/userguide/datafiles.html).- Tools like [`check-manifest`](https://github.com/mgedmin/check-manifest) or [`manifix`](https://github.com/vidartf/manifix) can be used to ensure the desired assets are included.- Simple uses of `data_files` can be handled in `setup.cfg` or in `setup.py`.  If recursive directories are needed use `get_data_files()` from this package.- Unfortunately `data_files` are not supported in `develop` mode (a limitation of `setuptools`).  You can work around it by doing a full install (`pip install .`) before the develop install (`pip install -e .`), or by adding a script to push the data files to `sys.base_prefix`.## Development Install```bashgit clone https://github.com/jupyter/jupyter-packaging.gitcd jupyter-packagingpip install -e .[test]pre-commit install```You can test changes locally by creating a `pyproject.toml` with the following, replacing the local path to the git checkout:```toml[build-system]requires = [&quot;jupyter_packaging@file://&lt;path-to-git-checkout&gt;&quot;]build-backend = &quot;setuptools.build_meta&quot;```Note: you need to run `pip cache remove jupyter_packaging` any time changes are made to prevent `pip` from using a cached version of the source.</longdescription>
</pkgmetadata>