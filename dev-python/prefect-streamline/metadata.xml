<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## prefect streamlineprefect_streamline is an opinionated extension that provides helpers to deploy and test Prefect flows quickly and easily.With its deployment and testing features, you can easily ensure the quality and reliability of your workflows before deploying them.&lt;!-- TOC start --&gt;- [Getting started](#getting-started)- [Usage](#usage)  * [Deploy flows using decorator](#deploy-flows-using-decorator)  * [Accelerate flow testing using native python invocation](#accelerate-flow-testing-using-native-python-invocation)- [Latest version](#latest-version)- [Developper guideline](#developper-guideline)  * [Install development environment](#install-development-environment)  * [update the locked dependencies](#update-the-locked-dependencies)  * [Run the continuous integration process](#run-the-continuous-integration-process)- [Contributors](#contributors)- [License](#license)&lt;!-- TOC end --&gt;## Getting started```bashpip install prefect_streamline```## Usage### Deploy flows using decorator``prefect_streamline`` allows you to configure the deployment of flows with a decorator.Vous pouvez définir plusieurs déploiements pour un même flow.*myapp/flow.py*```pythonfrom prefect import flowfrom prefect_streamline import deploybook@deploybook.register(interval=90, name=&quot;hello2&quot;)@deploybook.register(cron=&quot;*/3 * * * *&quot;)@deploybook.register(name=&quot;manual&quot;)@flow(name=&quot;main.myflow&quot;)def myflow() -&gt; int:    return 43```the prefect-streamline cli browses all the subfolders of your application.```bash# deploy all the flows register into myapp/flow.pyprefect-streamline deploy myapp/flow.py# search all flow records in all myapp modules.prefect-streamline deploy --discover src/myapp```### Accelerate flow testing using native python invocation```pythonfrom prefect_streamline import flowtestdef test_test_flow_should_handle_the_logger():    with flowtest.use_native_runner():        assert flowtest.fn(myflow)() == 12``````python@flow()def myflow() -&gt; int:    logger = get_run_logger()    return 12```## Latest versionYou can find the latest version to ...```bashgit clone https://github.com/FabienArcellier/prefect_streamline.git```## Developper guideline```poetry shell```### Install development environmentUse make to instanciate a python virtual environment in ./venv and install thepython dependencies.```bashpoetry install```### update the locked dependencies```bashpoetry update```### Run the continuous integration processBefore commit or send a pull request, you have to execute the continuous integration process.```bashpoetry run alfred ci```## Contributors* Fabien Arcellier## LicenseMIT LicenseCopyright (c) 2018-2022 Fabien ArcellierPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>