<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========Overview========A magic shortcut to generate __repr__ methods for your classes.* Free software: BSD licenseInstallation============::    pip install reprThis package contains a single module ``magic_repr`` called soto not conflict with standart python's ``repr``.Reasoning=========What do you think each time, writing such code?.. code:: python  def __repr__(self):      return &quot;&quot;&quot;  Issue(changelog={self.changelog},        type={self.type},        comment={self.comment},        created_at={self.created_at},        resolved_at={self.resolved_at})&quot;&quot;&quot;.format(self=self).strip().encode('utf-8')Isn't this much better and readable?.. code:: python      __repr__ = make_repr('changelog', 'type', 'comment', 'created_at', 'resolved_at')And this produces much nicer output:.. code:: python  &lt;Issue changelog=&lt;Changelog namespace=u'python'                              name=u'geocoder'                              source=u'https://github.com/DenisCarriere/geocoder'&gt;         type=u'wrong-version-content'         comment=u'AllMyChanges should take release notes from the web site.'         created_at=datetime.datetime(2016, 6, 17, 6, 44, 52, 16760, tzinfo=&lt;UTC&gt;)         resolved_at=None&gt;Another advantage of the magic_repr-----------------------------------Is it's recursiveness. If you use ``magic_repr`` for your objects and theyinclude each other, then representation of the parent object will includechild objects properly nested:.. code:: python  &lt;Foo bars={1: &lt;Bar first=1                     second=2                     third=3&gt;,             2: &lt;Bar first=1                     second=2                     third=3&gt;,             u'три': &lt;Bar first=1                          second=2                          third=3&gt;}&gt;And all this for free! Just do ``__repr__ = make_repr()``.Usage=====For simple cases it is enough to call ``make_repr`` without arguments. It will figure outwhich attributes object has and will output them sorted alphabetically.You can also specify which attributes you want to include in &quot;representaion&quot;:.. code:: python  from magic_repr import make_repr  __repr__ = make_repr('foo', 'bar')And to specify a function to create a value for an attribute, using keywords:.. code:: python  from magic_repr import make_repr    class Some(object):      def is_active(self):          return True  Some.__repr__ = make_repr(active=Some.is_active)Pay attention, that in this case ``__repr__`` was created after the class definition.This is because inside of the class it can't reference itself.Documentation=============https://python-repr.readthedocs.io/Development===========To run the all tests run::    toxNote, to combine the coverage data from all the tox environments run:.. list-table::    :widths: 10 90    :stub-columns: 1    - - Windows      - ::            set PYTEST_ADDOPTS=--cov-append            tox    - - Other      - ::            PYTEST_ADDOPTS=--cov-append toxChangelog=========0.3.1 (2016-06-22)------------------* Fixed issue #1 prevented generated __repr__ methods to work in mutithreaded programs.0.3.0 (2016-06-20)------------------* Now ``make_repr`` can be used for recursive datastructures.0.2.1 (2016-06-19)------------------* Documentation improved.0.2.0 (2016-06-19)------------------* Better handling of nested datastructure.* Callables as source of the attribute's value.* Some documentation.0.1.0 (2016-06-09)------------------* First release on PyPI.</longdescription>
</pkgmetadata>