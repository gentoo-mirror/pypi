<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PRECIS-i18n: Internationalized Usernames and Passwords======================================================|MIT licensed| |Build Status| |codecov.io|If you want your application to accept Unicode user names and passwords,you must be careful in how you validate and compare them. The PRECISframework makes internationalized user names and passwords safer for useby applications. PRECIS profiles transform Unicode strings into acanonical form, suitable for comparison.This module implements the PRECIS Framework as described in:-  PRECIS Framework: Preparation, Enforcement, and Comparison of   Internationalized Strings in Application Protocols (`RFC   8264 &lt;https://tools.ietf.org/html/rfc8264&gt;`__)-  Preparation, Enforcement, and Comparison of Internationalized Strings   Representing Usernames and Passwords (`RFC   8265 &lt;https://tools.ietf.org/html/rfc8265&gt;`__)-  Preparation, Enforcement, and Comparison of Internationalized Strings   Representing Nicknames (`RFC   8266 &lt;https://tools.ietf.org/html/rfc8266&gt;`__)Requires Python 3.3 or later.Usage-----Use the ``get_profile`` function to obtain a profile object, then useits ``enforce`` method. The ``enforce`` method returns a Unicode string.::    &gt;&gt;&gt; from precis_i18n import get_profile    &gt;&gt;&gt; username = get_profile('UsernameCaseMapped')    &gt;&gt;&gt; username.enforce('Kevin')    'kevin'    &gt;&gt;&gt; username.enforce('\u212Aevin')    'kevin'    &gt;&gt;&gt; username.enforce('\uFF2Bevin')    'kevin'    &gt;&gt;&gt; username.enforce('\U0001F17Aevin')    Traceback (most recent call last):        ...    UnicodeEncodeError: 'UsernameCaseMapped' codec can't encode character '\U0001f17a' in position 0: DISALLOWED/symbolsAlternatively, you can use the Python ``str.encode`` API. Import the``precis_i18n.codec`` module to register the PRECIS codec names. Now youcan use the ``str.encode`` method with any Unicode string. The resultwill be a UTF-8 encoded byte string or a ``UnicodeEncodeError`` if thestring is disallowed.::    &gt;&gt;&gt; import precis_i18n.codec    &gt;&gt;&gt; 'Kevin'.encode('UsernameCasePreserved')    b'Kevin'    &gt;&gt;&gt; '\u212Aevin'.encode('UsernameCasePreserved')    b'Kevin'    &gt;&gt;&gt; '\uFF2Bevin'.encode('UsernameCasePreserved')    b'Kevin'    &gt;&gt;&gt; '\u212Aevin'.encode('UsernameCaseMapped')    b'kevin'    &gt;&gt;&gt; '\uFF2Bevin'.encode('OpaqueString')    b'\xef\xbc\xabevin'    &gt;&gt;&gt; '\U0001F17Aevin'.encode('UsernameCasePreserved')    Traceback (most recent call last):        ...    UnicodeEncodeError: 'UsernameCasePreserved' codec can't encode character '\U0001f17a' in position 0: DISALLOWED/symbolsAlternative Unicode Versions----------------------------The ``get_profile`` function uses whatever version of ``unicodedata`` isprovided by the Python runtime. The Unicode version is usually tied to themajor version of the Python runtime. Python 3.7.x uses Unicode 11.0. Python3.6.x uses Unicode 10.0.To use an alternative ``unicodedata`` implementation, pass the ``unicodedata``keyword argument to ``get_profile``.For example, you could separately install version 12.0 of the``unicodedata2`` module from PyPI. Then, pass it to get_profile to retrieve aprofile that uses Unicode 12.0.::    &gt;&gt; import unicodedata2    &gt;&gt; from precis_i18n import get_profile    &gt;&gt; username = get_profile('UsernameCaseMapped', unicodedata=unicodedata2)    &gt;&gt; username.enforce('Kevin')    'kevin'Supported Profiles and Codecs-----------------------------Each PRECIS profile has a corresponding codec name. The ``CaseMapped``variant converts the string to lower case for implementingcase-insensitive comparison.-  UsernameCasePreserved-  UsernameCaseMapped-  OpaqueString-  NicknameCasePreserved-  NicknameCaseMappedThe ``CaseMapped`` profiles use Unicode ``ToLower`` per the latest RFC. Previousversions of this package used Unicode Default Case Folding. There are CaseMapped variantsfor different case transformations. These profile names are deprecated:-  UsernameCaseMapped:ToLower-  UsernameCaseMapped:CaseFold-  NicknameCaseMapped:ToLower-  NicknameCaseMapped:CaseFoldThe PRECIS base string classes are also available as codecs:-  IdentifierClass-  FreeFormClassUserparts and Space Delimited Usernames---------------------------------------The Username profiles in this implementation do not allow spaces. The Usernameprofiles correspond to the definition of &quot;userparts&quot; in RFC 8265. If you want toallow spaces in your application's user names, you must split the string first.::    def enforce_app_username(name):        profile = precis_i18n.get_profile('UsernameCasePreserved')        userparts = [profile.enforce(userpart) for userpart in name.split(' ')]        return ' '.join(userparts)Be aware that a username constructed this way can contain bidirectional text inthe separate userparts.Error Messages--------------A PRECIS profile raises a ``UnicodeEncodeError`` exception if a stringis disallowed. The ``reason`` field specifies the kind of error.+------------------------------+---------------------------------------------+| Reason                       | Explanation                                 |+==============================+=============================================+| DISALLOWED/arabic\_indic     | Arabic-Indic digits cannot be mixed with    ||                              | Extended Arabic-Indic Digits. (Context)     |+------------------------------+---------------------------------------------+| DISALLOWED/bidi\_rule        | Right-to-left string cannot contain         ||                              | left-to-right characters due to the &quot;Bidi&quot;  ||                              | rule. (Context)                             |+------------------------------+---------------------------------------------+| DISALLOWED/controls          | Control character is not allowed.           |+------------------------------+---------------------------------------------+| DISALLOWED/empty             | After applying the profile, the result      ||                              | cannot be empty.                            |+------------------------------+---------------------------------------------+| DISALLOWED/exceptions        | Exception character is not allowed.         |+------------------------------+---------------------------------------------+| DISALLOWED/extended\_arabic\ | Extended Arabic-Indic digits cannot be      || _indic                       | mixed with Arabic-Indic Digits. (Context)   |+------------------------------+---------------------------------------------+| DISALLOWED/greek\_keraia     | Greek keraia must be followed by a Greek    ||                              | character. (Context)                        |+------------------------------+---------------------------------------------+| DISALLOWED/has\_compat       | Compatibility characters are not allowed.   |+------------------------------+---------------------------------------------+| DISALLOWED/hebrew\           | Hebrew punctuation geresh or gershayim must || _punctuation                 | be preceded by Hebrew character. (Context)  |+------------------------------+---------------------------------------------+| DISALLOWED/katakana\_middle\ | Katakana middle dot must be accompanied by  || _dot                         | a Hiragana, Katakana, or Han character.     ||                              | (Context)                                   |+------------------------------+---------------------------------------------+| DISALLOWED/middle\_dot       | Middle dot must be surrounded by the letter ||                              | 'l'. (Context)                              |+------------------------------+---------------------------------------------+| DISALLOWED/not\_idempotent   | After reapplying the profile, the result is ||                              | not stable.                                 |+------------------------------+---------------------------------------------+| DISALLOWED/old\_hangul\_jamo | Conjoining Hangul Jamo is not allowed.      |+------------------------------+---------------------------------------------+| DISALLOWED/other             | Other character is not allowed.             |+------------------------------+---------------------------------------------+| DISALLOWED/other\_letter\    | Non-traditional letter or digit is not      || _digits                      | allowed.                                    |+------------------------------+---------------------------------------------+| DISALLOWED/precis\           | Default ignorable or non-character is not   || _ignorable\_properties       | allowed.                                    |+------------------------------+---------------------------------------------+| DISALLOWED/punctuation       | Non-ASCII punctuation character is not      ||                              | allowed.                                    |+------------------------------+---------------------------------------------+| DISALLOWED/spaces            | Space character is not allowed.             |+------------------------------+---------------------------------------------+| DISALLOWED/symbols           | Non-ASCII symbol character is not allowed.  |+------------------------------+---------------------------------------------+| DISALLOWED/unassigned        | Unassigned Unicode character is not         ||                              | allowed.                                    |+------------------------------+---------------------------------------------+| DISALLOWED/zero\_width\      | Zero width joiner must immediately follow a || _joiner                      | combining virama. (Context)                 |+------------------------------+---------------------------------------------+| DISALLOWED/zero\_width\      | Zero width non-joiner must immediately      || _nonjoiner                   | follow a combining virama, or appear where  ||                              | it breaks a cursive connection in a         ||                              | formally cursive script. (Context)          |+------------------------------+---------------------------------------------+Unicode Version Update Procedure--------------------------------When Unicode releases a new version, take the following steps to updateinternal tables and pass unit tests:-  Under a version of Python that supports the new Unicode version, run the tests using   ``python -m unittest discover`` and check that the ``test_derived_props`` test FAILS   due to a missing file.-  Generate a new ``derived-props`` file by running ``PYTHONPATH=. python test/test_derived_props.py &gt; derived-props-VERSION.txt``.   Rename the file using the Unicode version, and re-run the tests. The unit tests will further check   that no derived properties in the new file contradict the previous values.-  Check for changes to internal tables used for context rules by running    ``PYTHONPATH=. python tools/check_codepoints.py``. Update the corresponding tables in   precis_i18n/unicode.py if necessary... |MIT licensed| image:: https://img.shields.io/badge/license-MIT-blue.svg   :target: https://raw.githubusercontent.com/byllyfish/precis_i18n/master/LICENSE.txt.. |Build Status| image:: https://github.com/byllyfish/precis_i18n/actions/workflows/ci.yml/badge.svg   :target: https://github.com/byllyfish/precis_i18n/actions/workflows/ci.yml.. |codecov.io| image:: https://codecov.io/gh/byllyfish/precis_i18n/coverage.svg?branch=master   :target: https://codecov.io/gh/byllyfish/precis_i18n?branch=master</longdescription>
</pkgmetadata>