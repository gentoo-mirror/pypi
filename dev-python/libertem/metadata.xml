<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|docs|_ |gitter|_ |azure|_ |github|_ |codeclimate|_ |precommit|_ |joss|_ |zenodo|_.. |docs| image:: https://img.shields.io/badge/%F0%9F%95%AE-docs-green.svg.. _docs: https://libertem.github.io/LiberTEM/.. |gitter| image:: https://badges.gitter.im/Join%20Chat.svg.. _gitter: https://gitter.im/LiberTEM/Lobby.. |azure| image:: https://dev.azure.com/LiberTEM/LiberTEM/_apis/build/status/LiberTEM.LiberTEM-data?branchName=master.. _azure: https://dev.azure.com/LiberTEM/LiberTEM/_build/latest?definitionId=4&amp;branchName=master.. |zenodo| image:: https://zenodo.org/badge/DOI/10.5281/zenodo.1477847.svg.. _zenodo: https://doi.org/10.5281/zenodo.1477847.. |github| image:: https://img.shields.io/badge/GitHub-GPL--3.0-informational.. _github: https://github.com/LiberTEM/LiberTEM/.. |codeclimate| image:: https://api.codeclimate.com/v1/badges/dee042f64380f64737e5/maintainability.. _codeclimate: https://codeclimate.com/github/LiberTEM/LiberTEM.. |joss| image:: https://joss.theoj.org/papers/10.21105/joss.02006/status.svg.. _joss: https://doi.org/10.21105/joss.02006.. |precommit| image:: https://results.pre-commit.ci/badge/github/LiberTEM/LiberTEM/master.svg.. _precommit: https://results.pre-commit.ci/latest/github/LiberTEM/LiberTEM/masterLiberTEM is an open source platform for high-throughput distributed processingof large-scale binary data sets and live data streams using a modified`MapReduce programming model &lt;https://en.wikipedia.org/wiki/MapReduce&gt;`_. Thecurrent focus is `pixelated&lt;https://en.wikipedia.org/wiki/Scanning_transmission_electron_microscopy#Universal_detectors_(4D_STEM)&gt;`_scanning transmission electron microscopy (`STEM&lt;https://en.wikipedia.org/wiki/Scanning_transmission_electron_microscopy&gt;`_)and scanning electronbeam diffraction data.MapReduce-like processing allows to specify an algorithm through two functions:One function that is mapped on portions of the input data, and another functionthat merges (reduces) a partial result from this mapping step into the completeresult. A wide range of TEM and 4D STEM processing tasks can be expressed inthis fashion, see `Applications`_.The UDF interface of LiberTEM offers a standardized, versatile API to decouplethe mathematical core of an algorithm from details of data source, parallelism,and use of results. Mapping and merging can be performed in any order and withdifferent subdivisions of the input data, including running parts of thecalculation concurrently. That means the same implementation can be used in awide range of modalities, including massive scaling on clusters. Since eachmerge step produces an intermediate result, this style of processing is suitablefor displaying live results from a running calculation in a GUI application andfor `processing live data streams &lt;https://github.com/LiberTEM/LiberTEM-live&gt;`_.A closed-loop feedback between processing and instrument control can be realizedas well. See `User-defined functions&lt;https://libertem.github.io/LiberTEM/udf.html&gt;`_ for more details on theLiberTEM UDF interface.The LiberTEM back-end offers `high throughput and scalability&lt;https://libertem.github.io/LiberTEM/architecture.html&gt;`_ on PCs, single servernodes, clusters and cloud services. On clusters it can use fast distributedlocal storage on high-performance SSDs. That way it achieves `very highaggregate IO performance&lt;https://libertem.github.io/LiberTEM/performance.html&gt;`_ on a compact andcost-efficient system built from stock components. All CPU cores and CUDAdevices in a system can be used in parallel.LiberTEM is supported on Linux, Mac OS X and Windows. Other platforms that allowinstallation of Python 3.6+ and the required packages will likely work as well. TheGUI is running in a web browser.Installation------------The short version:.. code-block:: shell    $ virtualenv -p python3 ~/libertem-venv/    $ source ~/libertem-venv/bin/activate    (libertem-venv) $ python -m pip install &quot;libertem[torch]&quot;    # optional for GPU support    # See also https://docs.cupy.dev/en/stable/install.html    (libertem-venv) $ python -m pip install cupyPlease see `our documentation&lt;https://libertem.github.io/LiberTEM/install.html&gt;`_ for details!Alternatively, to run the `LiberTEM Docker image&lt;https://libertem.github.io/LiberTEM/deployment/clustercontainer.html&gt;`_:.. code-block:: shell    $ docker run -p localhost:9000:9000 --mount type=bind,source=/path/to/your/data/,dst=/data/,ro libertem/libertemor.. code-block:: shell    $ singularity exec docker://libertem/libertem /venv/bin/libertem-serverDeployment for offline data processing on a single-node system for a local useris thoroughly tested and can be considered stable. Deployment on a cluster isexperimental and still requires some additional work, see `Issue #105&lt;https://github.com/LiberTEM/LiberTEM/issues/105&gt;`_. Back-end support for live data processingis still experimental as well, see https://github.com/LiberTEM/LiberTEM-live.Applications------------Since LiberTEM is programmable through `user-defined functions (UDFs)&lt;https://libertem.github.io/LiberTEM/udf.html&gt;`_, it can be used for a widerange of processing tasks on array-like data and data streams. The followingapplications have been implemented already:- Virtual detectors (virtual bright field, virtual HAADF, center of mass ,  custom shapes via masks)- `Analysis of amorphous materials &lt;https://libertem.github.io/LiberTEM/app/amorphous.html&gt;`_- `Strain mapping &lt;https://libertem.github.io/LiberTEM-blobfinder/&gt;`_- `Off-axis electron holography reconstruction &lt;https://libertem.github.io/LiberTEM/app/holography.html&gt;`_- `Single Side Band ptychography &lt;https://ptychography-4-0.github.io/ptychography/&gt;`_Some of these applications are available through an `interactive web GUI&lt;https://libertem.github.io/LiberTEM/usage.html#gui-usage&gt;`_. Please see `theapplications section &lt;https://libertem.github.io/LiberTEM/applications.html&gt;`_of our documentation for details!The Python API and user-defined functions (UDFs) can be used for complexoperations such as arbitrary linear operations and other features like dataexport. Example Jupyter notebooks are available in the `examples directory&lt;https://github.com/LiberTEM/LiberTEM/tree/master/examples&gt;`_. If you are havingtrouble running the examples, please let us know by filing an issue orby `joining our Gitter chat &lt;https://gitter.im/LiberTEM/Lobby&gt;`_.LiberTEM is suitable as a high-performance processing backend for otherapplications, including live data streams. `Contact us&lt;https://gitter.im/LiberTEM/Lobby&gt;`_ if you are interested!LiberTEM is evolving rapidly and prioritizes features following user demand andcontributions. Currently we are working on `live data processing&lt;https://github.com/LiberTEM/LiberTEM-live&gt;`_, `integration with Dask arrays andHyperSpy &lt;https://github.com/LiberTEM/LiberTEM/issues/922&gt;`_, support for sparsedata, and implementing analysis methods for various applications of pixelatedSTEM and other large-scale detector data. If you like to influence the directionthis project is taking, or if you'd like to `contribute&lt;https://libertem.github.io/LiberTEM/contributing.html&gt;`_, please join our`gitter chat &lt;https://gitter.im/LiberTEM/Lobby&gt;`_ and our `general mailing list&lt;https://groups.google.com/forum/#!forum/libertem&gt;`_.File formats------------LiberTEM currently opens most file formats used for pixelated STEM. See `ourgeneral information on loading data&lt;https://libertem.github.io/LiberTEM/formats.html&gt;`_ and `format-specificdocumentation&lt;https://libertem.github.io/LiberTEM/reference/dataset.html#formats&gt;`_ for moreinformation!- Raw binary files- NumPy .npy binary files- Thermo Fisher EMPAD detector files- `Quantum Detectors MIB format &lt;http://quantumdetectors.com/wp-content/uploads/2017/01/1532-Merlin-for-EM-Technical-Datasheet-v2.pdf&gt;`_- Nanomegas .blo block files- Direct Electron DE5 files (HDF5-based) and Norpix SEQ files for `DE-Series &lt;http://www.directelectron.com/de-series/&gt;`_ detectors- `Gatan K2 IS &lt;https://web.archive.org/web/20180809021832/http://www.gatan.com/products/tem-imaging-spectroscopy/k2-camera&gt;`_ raw format- Stacks of Gatan DM3 and DM4 files (via `openNCEM &lt;https://github.com/ercius/openNCEM&gt;`_)- FRMS6 from PNDetector pnCCD cameras (currently alpha, gain correction still needs UI changes)- FEI SER files (via `openNCEM &lt;https://github.com/ercius/openNCEM&gt;`_)- MRC (via `openNCEM &lt;https://github.com/ercius/openNCEM&gt;`_)- HDF5-based formats such as HyperSpy files, NeXus and EMD- TVIPS binary files- Please contact us if you are interested in support for an additional format!Detectors (experimental)------------------------Currently the Quantum Detectors Merlin camera is supported for live processing.Support for DECTRIS cameras and the Gatan K2 IS camera are in a prototype state. Please`contact us &lt;https://gitter.im/LiberTEM/Lobby&gt;`_ if you are interested in thisfeature! See https://github.com/LiberTEM/LiberTEM-live for more details on liveprocessing.License-------LiberTEM is licensed under GPLv3. The I/O parts are also available under the MITlicense, please see LICENSE files in the subdirectories for details.</longdescription>
</pkgmetadata>