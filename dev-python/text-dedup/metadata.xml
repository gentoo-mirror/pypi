<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;center&gt;&lt;img src=&quot;./banner.png&quot;/ style=&quot;background-color:white;&quot;&gt;&lt;/center&gt;![GitHub](https://img.shields.io/github/license/ChenghaoMou/text-dedup) [![Codacy Badge](https://app.codacy.com/project/badge/Grade/cc66178e49d24908ac1fb2b2dbe4e5b3)](https://www.codacy.com/gh/ChenghaoMou/text-dedup/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ChenghaoMou/text-dedup&amp;utm_campaign=Badge_Grade) [![Codacy Badge](https://app.codacy.com/project/badge/Coverage/cc66178e49d24908ac1fb2b2dbe4e5b3)](https://www.codacy.com/gh/ChenghaoMou/text-dedup/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ChenghaoMou/text-dedup&amp;utm_campaign=Badge_Coverage)## FeaturesThis repository contains a collection of text deduplication scripts that are ready to use, or modify based on your needs:- MinHash + MinHashLSH, including a spark implementation suitable for large (TB) datasets- 64 or 128 bit SimHash- SuffixArray Substring- Bloom Filter- Exact HashI also have big plans for the future:- [ ] Memory benchmark for streaming processing- [ ] Inter-dataset deduplication- [ ] Rewrite suffix array in Python- [ ] A collections of other deduplication methods: SuperMinHash, ProbMinHash, TreeMinHash, BagMinHash, [Optimal Densification for Fast and Accurate Minwise Hashing](https://arxiv.org/abs/1703.04664), [Fast Similarity Sketching](https://arxiv.org/abs/1704.04370)- [ ] A collections of other deduplication methods used in other places: [CCNet](https://github.com/facebookresearch/cc_net/blob/main/cc_net/dedup.py).However, I do not intent to build a general purpose deduplication library, which was the goal of this repo early on. I will gradually retire the pypi package as well. The reason behind it is that each use-case can be wildly different and requires careful design and consideration. I sincerely encourage you to read the script first (they are relatively short) so you can understand what are at stake here when using it. You can use it to bootstrap your own script, or just use it as a reference.## AcknowledgementsThis repository is inspired by the following projects, and is heavily influenced by lessons learned from my own participation in [BigScience (Apache 2.0)](https://github.com/bigscience-workshop) and [BigCode (Apache 2.0)](https://github.com/bigcode-project). There is a [blog post](https://publish.obsidian.md/chenghao/posts/20230220150602) about the journey. Feedbacks are welcome!- [Datasketch](https://github.com/ekzhu/datasketch) (MIT)- [simhash-py](https://github.com/seomoz/simhash-py/tree/master/simhash) and [simhash-cpp](https://github.com/seomoz/simhash-cpp) (MIT)- [Deduplicating Training Data Makes Language Models Better](https://github.com/google-research/deduplicate-text-datasets) (Apache 2.0)- [Gaoya](https://github.com/serega/gaoya) (MIT)## Quick Examples### PySpark with DataProcNot a lot of people have access to enough compute resources or the need to deduplicate TB-scale datasets, but if you do, this is a good example of how to use it with GCP DataProc.*MODIFY `text_dedup/minhash_spark.py` FOR YOUR OWN PROJECT AND DATASET FIRST!*```bashexport CLUSTER_NAME=chenghao-tempexport PROJECT_ID=xxgcloud dataproc clusters create $CLUSTER_NAME \    --enable-component-gateway \    --region us-central1 \    --zone us-central1-a \    --master-machine-type c2d-standard-16 \    --master-boot-disk-size 500 \    --num-workers 10 \    --worker-machine-type c2d-standard-16 \    --worker-boot-disk-size 500 \    --image-version 2.0-debian10 \    --project $PROJECT_IDgcloud dataproc jobs submit pyspark --cluster ${CLUSTER_NAME} \    --region us-central1 \    --jars gs://spark-lib/bigquery/spark-bigquery-latest_2.12.jar \    --driver-log-levels root=WARN \    --properties=&quot;spark.executor.memory&quot;=&quot;50g&quot;,&quot;spark.driver.memory&quot;=&quot;8g&quot;,&quot;spark.executor.cores&quot;=&quot;14&quot; \    minhash_spark.py -- \    --table &quot;huggingface-science-codeparrot.the_stack_java.java&quot; \    --output &quot;gs://chenghao-data/dataproc_output/deduplicated&quot;```For reference, the script finished deduplicating 42 million rows in less than 40 minutes with above settings (160 cores, 640GB memory in total), while the python version would take around 10 hours with a 80-core machine with 1.8TB memory.In the following part, we are going to deduplicate one dataset: `gl` subset of `oscar-corpus/OSCAR-2201`.### Suffix Array Substring Exact Deduplication```bash# inputpython -m text_dedup.suffix_array \    --path &quot;oscar-corpus/OSCAR-2201&quot; \    --name &quot;gl&quot; \    --split &quot;train&quot; \    --cache_dir &quot;./cache&quot; \    --output &quot;output/suffix_array/oscar_gl_dedup&quot; \    --column &quot;text&quot; \    --google_repo_path &quot;/Users/chenghao/Downloads/Projects/text-dedup/deduplicate-text-datasets&quot;# outputINFO     Loading                       : 2.75 secondsINFO     Preprocessing                 : 4.78 secondsINFO     SuffixArray                   : 98.29 secondsINFO     SelfSimilar                   : 4.24 secondsINFO     Restore                       : 0.25 secondsINFO     Deduplicate                   : 6.23 secondsINFO     Saving                        : 8.91 secondsINFO     Total                         : 125.45 secondsINFO     Before                        : 180332342 bytes (88803)INFO     After                         : 97646271 bytes (40404)```### MinHash Near Deduplication```bash# inputpython -m text_dedup.minhash \  --path &quot;oscar-corpus/OSCAR-2201&quot; \  --name &quot;gl&quot; \  --split &quot;train&quot; \  --cache_dir &quot;./cache&quot; \  --output &quot;output/minhash/oscar_gl_dedup&quot; \  --column &quot;text&quot; \  --batch_size 10000# outputINFO     Loading                         : 2.62 secondsINFO     MinHashing                      : 0.08 secondsINFO     Clustering                      : 2.20 secondsINFO     Filtering                       : 0.53 secondsINFO     Saving                          : 9.86 secondsINFO     Total                           : 15.29 secondsINFO     Data Number (before)            : 88803INFO     Data Number (after)             : 44124 (49.69%)INFO     Duplicate Number                : 44679 (50.31%)INFO     ðŸ¤— Happy Deduplicating ðŸ¤—```### SimHash Near Deduplication```bash# inputpython -m text_dedup.simhash \  --path &quot;oscar-corpus/OSCAR-2201&quot; \  --name &quot;gl&quot; \  --split &quot;train&quot; \  --cache_dir &quot;./cache&quot; \  --output &quot;output/simhash/oscar_gl_dedup&quot; \  --column &quot;text&quot; \  --batch_size 10000# outputINFO     Loading                         : 2.60 secondsINFO     SimHashing                      : 0.04 secondsINFO     Indexing                        : 28.88 secondsINFO     Filtering                       : 0.88 secondsINFO     Saving                          : 10.41 secondsINFO     Total                           : 42.80 secondsINFO     Data Number (before)            : 88803INFO     Data Number (after)             : 46163 (51.98%)INFO     Duplicate Number                : 42640 (48.02%)INFO     ðŸ¤— Happy Deduplicating ðŸ¤—```### Exact Hash Exact Deduplication```bash# inputpython -m text_dedup.exact_hash \    --path &quot;oscar-corpus/OSCAR-2201&quot; \    --name &quot;gl&quot; \    --split &quot;train&quot; \    --cache_dir &quot;./cache&quot; \    --output &quot;output/exact_hash/oscar_gl_dedup&quot; \    --column &quot;text&quot; \    --batch_size 1000# outputINFO     Loading                       : 2.95sINFO     Processing                    : 3.79sINFO     Filtering                     : 0.10sINFO     Saving                        : 2.89sINFO     Total                         : 9.72sINFO     Before                        : 88803INFO     After                         : 47049```### Bloom Filter Exact Deduplication```bash# inputpython -m text_dedup.bloom_filter \    --path &quot;oscar-corpus/OSCAR-2201&quot; \    --name &quot;gl&quot; \    --split &quot;train&quot; \    --cache_dir &quot;./cache&quot; \    --output &quot;output/bloom_filter/oscar_gl_dedup&quot; \    --error_rate 1e-5 \    --column &quot;text&quot; \    --batch_size 1000# outputINFO     Loading                       : 2.72sINFO     Processing                    : 4.84sINFO     Filtering                     : 0.10sINFO     Saving                        : 2.88sINFO     Total                         : 10.54sINFO     Before                        : 88803INFO     After                         : 47045```## BenchmarksA benchmark of different methods here can be found in `benchmarks/wiki40.ipynb`. A notebook in evaluating MinHash on `pinecone/core-2020-05-10-deduplication` can be found in `benchmarks/pinecone.ipynb`.For quick reference, here are the results:| Method                                                                          | Precision        | Recall           | F1               | Time || ------------------------------------------------------------------------------- | ---------------- | ---------------- | ---------------- | ---- || MinHash                                                                         | **0.9464** | **0.9446** | **0.9455** | 24s  || SimHash\*                                                                       | 0.9011           | 0.6959           | 0.7853           | 210s || SimHash[(Gyawali et al., LREC 2020)](https://aclanthology.org/2020.lrec-1.113)     | 0.697            | 0.247            | 0.3647           | -    || Exact Title (my implementation)                                                 | 0.8302           | 0.5521           | 0.6632           | -    || Exact Title[(Gyawali et al., LREC 2020)](https://aclanthology.org/2020.lrec-1.113) | 0.830            | 0.50             | 0.624            | -    |\*Best SimHash result from `benchmarks/hyperparameter.ipynb`.&lt;!-- ## FAQ### Why use scripts instead of OOD classes and functions?Early versions of the code uses object-oriented design for hashing and indexing, which was very difficult because different methods share little to no abstraction. In order to complie something that is useful, a lot of the wrapper code was used, and that actually increased the overhead of using this library. Additionally, deduplicating is often a one-time thing in data preprocessing pipeline, there isn't really a need for inline access. --&gt;&lt;!-- ### Why license change?Because the google repo is licensed under Apache 2.0, I have to update from MIT. Util that part of code is completely re-implemented, Apache 2.0. will be the license I use. --&gt;## License[Apache 2.0](https://duckduckgo.com/l/?uddg=https%3A%2F%2Fwww.apache.org%2Flicenses%2FLICENSE%2D2.0.html&amp;rut=617d395c7a807de85e5707aca1f765e5b69a1627ed84c0aefa950e54e00a3094)</longdescription>
</pkgmetadata>