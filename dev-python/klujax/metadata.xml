<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># KLUJAXA sparse linear solver for JAX based on theefficient [KLU algorithm](https://ufdcimages.uflib.ufl.edu/UF/E0/01/17/21/00001/palamadai_e.pdf).## CPU &amp; float64This library is a wrapper around the [SuiteSparse](https://github.com/DrTimothyAldenDavis/SuiteSparse) KLUalgorithms. This means the algorithm is only implemented forC-arrays and hence is **only available for CPUarrays with double precision**, i.e. float64 or complex128.Note that this will be enforced at import of `klujax`!## UsageThe `klujax` library provides a single function `solve(A, b)`, which solves for `x` inthe linear system `Ax=b` A is a sparse tensor in COO-format with shape `mxm` and x and bhave shape `mxn`. Note that JAX does not have a native sparse matrix representation andhence A should be represented as a tuple of two index arrays and a valuearray: `(Ai, Aj, Ax)`.```pythonimport jax.numpy as jnpfrom klujax import solveb = jnp.array([8, 45, -3, 3, 19], dtype=jnp.float64)A_dense = jnp.array([[2, 3, 0, 0, 0],                     [3, 0, 4, 0, 6],                     [0, -1, -3, 2, 0],                     [0, 0, 1, 0, 0],                     [0, 4, 2, 0, 1]], dtype=jnp.float64)Ai, Aj = jnp.where(jnp.abs(A_dense) &gt; 0)Ax = A_dense[Ai, Aj]result_ref = jnp.linalg.inv(A_dense)@bresult = solve(Ai, Aj, Ax, b)print(jnp.abs(result - result_ref) &lt; 1e-12)print(result)``````[ True True True True True][1. 2. 3. 4. 5.]```## InstallationThe library is statically linked to the SuiteSparse C++ library. It can be installed onmost platforms as follows:```bashpip install klujax```**There exist pre-built wheels for Linux and Windows (python 3.8+).** If no compatiblewheel is found, however, pip will attempt to install the library from source... makesure you have the necessary build dependencies installed.### LinuxOn linux, you'll need `gcc` and `g++`. Then just do a normal pip install:```shpip install klujax```### WindowsOn Windows, installing from source is a bit more involved as typically the builddependencies are not installed. To install those, download Visual Studio Community 2017from [here](https://my.visualstudio.com/Downloads?q=visual%20studio%202017&amp;wt.mc_id=o~msft~vscom~older-downloads). During installation, go to Workloads and select the following workloads:- Desktop development with C++- Python developmentThen go to Individual Components and select the following additional items:- C++/CLI support- VC++ 2015.3 v14.00 (v140) toolset for desktopThen, download and install Microsoft Visual C++ Redistributable from [here](https://aka.ms/vs/16/release/vc_redist.x64.exe).After these installation steps, run the following commands inside a x64 Native ToolsCommand Prompt for VS 2017:```set DISTUTILS_USE_SDK=1pip install klujax```## License &amp; CreditsÂ© Floris Laporte 2022, LGPL-2.1This library was partly based on:- [torch_sparse_solve](https://github.com/flaport/torch_sparse_solve), LGPL-2.1- [SuiteSparse](https://github.com/DrTimothyAldenDavis/SuiteSparse), LGPL-2.1- [kagami-c/PyKLU](https://github.com/kagami-c/PyKLU), LGPL-2.1- [scipy.sparse](https://github.com/scipy/scipy/tree/master/scipy/sparse), BSD-3This library vendors an unmodified version of the[SuiteSparse](https://github.com/DrTimothyAldenDavis/SuiteSparse) libraries in its source(.tar.gz) distribution to allow for static linking.This is in accordance with their[LGPL licence](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/LICENSE.txt).</longdescription>
</pkgmetadata>