<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AsyncOMAsync OM it's a super basic Object mapper based almost all on sqlalchemyORM layer.We use the declarative extension for building the classes, and also,factor instances of them on querys. (*Limited support)There is still no support for relations.Depens on [encode/databases](https://github.com/encode/databases) dependency.## MotivationI don't like the asyncpgsa approach where they are just using,the core layer, to build run the sqlgenerator. I like to build,around the declarative layer of sqlachemy, and later found thatI can patch some of the methods on the session.query, touse it's own sql generator, and turn async the query system.Object persistent is minimal, and needs some love.## Usage```pythonfrom sqlalchemy.ext.declarative import declarative_baseimport sqlalchemy as safrom databases import DatabaseURLBase = declarative_base()class OrmTest(Base):    __tablename__ = 'orm_test'    id = sa.Column(sa.Integer, primary_key=True)    name = sa.Column(sa.String(100), index=True)    value = sa.Column(sa.Text)# Instead of usign Database from databases, you can use:db = OMDatabase(DatabaseURL('postgres://root@postgres:{port}/guillotina'))# instances of the object can be created with:test = OrmTest(name='xx', value='yy')await db.add(test)print(test.id)  # pk column is correct set# get an instanceins = await db.query(OrmTest).get(1)total = await db.query(OrmTest).count()assert total == 1# remove itawait db.delete(ins)# filter themres = await db.query(OrmTest).filter(    OrmTest.name.like('xx')).all()# Or just iterate over the results with a cursor:async for row in db.query(OrmTest).filter(OrmTest.name.like('xx')):    print(f'Row {row.name}: {row.value}')# There is basic support for table inheritance query OneToOne# Look at tests```## Changelog0.3.3------ Fix collections import for Python 3.100.3.2------ Support query multiple primary keys0.3.1------ Be able to provide mapper_factory to `OMQuery`  [vangheem]0.3.0---- Fix bug with om.delete an inherited objects0.2.3---- Fix boolean expr on adding prods.  Allowing to add values with 00.2.1---- Small fix when checking none on json fields arrays0.1.9----- Added Column default and onupdate on update and add  (only for scalar values and callables)- Added small proxy prop on OMDatabaes, to raw asyncpg connection0.1.8---- Yaml data importer0.1.7----- Support adding basic inherited models0.1.6---- query should be an async iterator0.1.5---- Load inherited models.0.1.4----- query(Object).get should return None if not found0.1.3----- Fixes and improvements. Lay out basic API0.1.0 (2019-04-07)------------------* First release on PyPI.</longdescription>
</pkgmetadata>