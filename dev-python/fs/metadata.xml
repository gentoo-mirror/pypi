<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyFilesystem2Python's Filesystem abstraction layer.[![PyPI version](https://img.shields.io/pypi/v/fs)](https://pypi.org/project/fs/)[![PyPI](https://img.shields.io/pypi/pyversions/fs.svg)](https://pypi.org/project/fs/)[![Downloads](https://pepy.tech/badge/fs/month)](https://pepy.tech/project/fs/)[![Build Status](https://img.shields.io/github/workflow/status/PyFilesystem/pyfilesystem2/Test/master?logo=github&amp;cacheSeconds=600)](https://github.com/PyFilesystem/pyfilesystem2/actions?query=branch%3Amaster)[![Windows Build Status](https://img.shields.io/appveyor/build/willmcgugan/pyfilesystem2/master?logo=appveyor&amp;cacheSeconds=600)](https://ci.appveyor.com/project/willmcgugan/pyfilesystem2)[![Coverage Status](https://img.shields.io/coveralls/github/PyFilesystem/pyfilesystem2/master?cacheSeconds=600)](https://coveralls.io/github/PyFilesystem/pyfilesystem2)[![Codacy Badge](https://img.shields.io/codacy/grade/30ad6445427349218425d93886ade9ee/master?logo=codacy)](https://www.codacy.com/app/will-mcgugan/pyfilesystem2?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=PyFilesystem/pyfilesystem2&amp;utm_campaign=Badge_Grade)[![Docs](https://img.shields.io/readthedocs/pyfilesystem2?maxAge=3600)](http://pyfilesystem2.readthedocs.io/en/stable/?badge=stable)## Documentation- [Wiki](https://www.pyfilesystem.org)- [API Documentation](https://docs.pyfilesystem.org/)- [GitHub Repository](https://github.com/PyFilesystem/pyfilesystem2)- [Blog](https://www.willmcgugan.com/tag/fs/)## IntroductionThink of PyFilesystem's `FS` objects as the next logical step toPython's `file` objects. In the same way that file objects abstract asingle file, FS objects abstract an entire filesystem.Let's look at a simple piece of code as an example. The followingfunction uses the PyFilesystem API to count the number of non-blanklines of Python code in a directory. It works _recursively_, so it willfind `.py` files in all sub-directories.```pythondef count_python_loc(fs):    &quot;&quot;&quot;Count non-blank lines of Python code.&quot;&quot;&quot;    count = 0    for path in fs.walk.files(filter=['*.py']):        with fs.open(path) as python_file:            count += sum(1 for line in python_file if line.strip())    return count```We can call `count_python_loc` as follows:```pythonfrom fs import open_fsprojects_fs = open_fs('~/projects')print(count_python_loc(projects_fs))```The line `project_fs = open_fs('~/projects')` opens an FS object thatmaps to the `projects` directory in your home folder. That object isused by `count_python_loc` when counting lines of code.To count the lines of Python code in a _zip file_, we can make thefollowing change:```pythonprojects_fs = open_fs('zip://projects.zip')```Or to count the Python lines on an FTP server:```pythonprojects_fs = open_fs('ftp://ftp.example.org/projects')```No changes to `count_python_loc` are necessary, because PyFileystemprovides a simple consistent interface to anything that resembles acollection of files and directories. Essentially, it allows you to writecode that is independent of where and how the files are physicallystored.Contrast that with a version that purely uses the standard library:```pythondef count_py_loc(path):    count = 0    for root, dirs, files in os.walk(path):        for name in files:            if name.endswith('.py'):                with open(os.path.join(root, name), 'rt') as python_file:                    count += sum(1 for line in python_file if line.strip())    return count```This version is similar to the PyFilesystem code above, but would onlywork with the OS filesystem. Any other filesystem would require anentirely different API, and you would likely have to re-implement thedirectory walking functionality of `os.walk`.## CreditsThe following developers have contributed code and their time to this projects:- [Will McGugan](https://github.com/willmcgugan)- [Martin Larralde](https://github.com/althonos)- [Giampaolo Cimino](https://github.com/gpcimino)- [Geoff Jukes](https://github.com/geoffjukes)See [CONTRIBUTORS.md](https://github.com/PyFilesystem/pyfilesystem2/blob/master/CONTRIBUTORS.md)for a full list of contributors.PyFilesystem2 owes a massive debt of gratitude to the followingdevelopers who contributed code and ideas to the original version.- Ryan Kelly- Andrew Scheller- Ben TimbyApologies if I missed anyone, feel free to prompt me if your name ismissing here.## SupportIf commercial support is required, please contact [Will McGugan](mailto:willmcgugan@gmail.com).</longdescription>
</pkgmetadata>