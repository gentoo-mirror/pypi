<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======Konfig======Yet another configuration object. Compatible with the updated `configparser&lt;https://pypi.python.org/pypi/configparser&gt;`_.|travis| |master-coverage|.. |master-coverage| image::    https://coveralls.io/repos/mozilla-services/konfig/badge.svg?branch=master    :alt: Coverage    :target: https://coveralls.io/r/mozilla-services/konfig.. |travis| image:: https://travis-ci.org/mozilla-services/konfig.svg?branch=master    :target: https://travis-ci.org/mozilla-services/konfigUsage=====.. code-block:: python   &gt;&gt;&gt; from konfig import Config   &gt;&gt;&gt; c = Config('myconfig.ini')Then read `configparser's documentation&lt;http://docs.python.org/3/library/configparser.html&gt;`_ for the APIs.Konfig as some extra APIs like **as_args()**, which will returnthe config file as argparse compatible arguments::    &gt;&gt;&gt; c.as_args()    ['--other-stuff', '10', '--httpd', '--statsd-endpoint', 'http://ok']For automatic filtering, you can also pass an argparse parser objectto **scan_args()**. I will iterate over the arguments you've defined in theparser and look for them in the config file, then return a list of argslike **as_args()**. You can then use this list directlywith **parser.parse_args()** - or complete it with sys.argv or whatever.    &gt;&gt;&gt; import argparse    &gt;&gt;&gt; parser = argparse.ArgumentParser()    &gt;&gt;&gt; parser.add_argument('--log-level', dest='loglevel')    &gt;&gt;&gt; parser.add_argument('--log-output', dest='logoutput')    &gt;&gt;&gt; parser.add_argument('--daemon', dest='daemonize', action='store_true')    &gt;&gt;&gt; config = Config('myconfig.ini')    &gt;&gt;&gt; args_from_config = config.scan_args(parser)    &gt;&gt;&gt; parser.parse_args(args=sys.argv[1:]+args_from_config)Syntax Definition=================The configuration file is a ini-based file. (Seehttp://en.wikipedia.org/wiki/INI_file for more details.) Variables name can beassigned values, and grouped into sections. A line that starts with &quot;#&quot; iscommented out. Empty lines are also removed.Example:.. code-block:: ini  [section1]  # comment  name = value  name2 = &quot;other value&quot;  [section2]  foo = barIni readers in Python, PHP and other languages understand this syntax.Although, there are subtle differences in the way they interpret values and inparticular if/how they convert them.Values conversion=================Here are a set of rules for converting values:- If value is quoted with &quot; chars, it's a string. This notation is useful to  include &quot;=&quot; characters in the value. In case the value contains a &quot; character,  it must be escaped with a &quot;\&quot; character.- When the value is composed of digits and optionally prefixed by &quot;-&quot;, it's  tentatively converted to an integer or a long depending on the language. If the  number exceeds the range available in the language, it's left as a string.- If the value is &quot;true&quot; or &quot;false&quot;, it's converted to a boolean, or 0 and 1  when the language does not have a boolean type.- A value can be an environment variable : &quot;${VAR}&quot; is replaced by the value of  VAR if found in the environment. If the variable is not found, an error must be  raised.- A value can contains multiple lines. When read, lines are converted into a  sequence of values. Each new line for a multiple lines value must start with a  least one space or tab character.Examples:.. code-block:: ini  [section1]  # comment  a_flag = True  a_number = 1  a_string = &quot;other=value&quot;  another_string = other value  a_list = one           two           three  user = ${USERNAME}Extending a file================An INI file can extend another file. For this, a &quot;DEFAULT&quot; section must containan &quot;extends&quot; variable that can point to one or several INI files which will bemerged to the current file by adding new sections and values.If the file pointed in &quot;extends&quot; contains section/variable names that alreadyexist in the original file, they will not override existing ones.Here's an example: you have a public config file and want to keep some databasepasswords private. You can have those password in a separate file.public.ini:.. code-block:: ini  [database]  user = tarek  password = PUBLIC  [section2]  foo = baz  bas = barAnd then in private.ini:.. code-block:: ini  [DEFAULT]  extends = public.ini  [database]  password = secretNow if you use *private.ini* you will get:.. code-block:: ini  [database]  user = tarek  password = secret  [section2]  foo = baz  bas = barTo point several files, the multi-line notation can be used:.. code-block:: ini  [DEFAULT]  extends = public1.ini            public2.iniWhen several files are provided, they are processed sequentially. So if thefirst one has a value that is also present in the second, the second one willbe ignored. This means that the configuration goes from the most specialized tothe most common.Override mode=============If you want to extend a file and have existing values overridden,you can use &quot;overrides&quot; instead of &quot;extends&quot;.Here's an example.  file2.ini:.. code-block:: ini  [section1]  name2 = &quot;other value&quot;  [section2]  foo = baz  bas = barfile1.ini:.. code-block:: ini  [DEFAULT]  overrides = file2.ini  [section2]  foo = barResult if you use *file1.ini*:.. code-block:: ini  [section1]  name2 = &quot;other value&quot;  [section2]  foo = baz  bas = barIn *section2*, notice that *foo* is now *baz*.</longdescription>
</pkgmetadata>