<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `more_properties`A collection of `property` variants.## Basic UsageVariants behave mostly as the built-in `property`, except where noted.Given the following class,```pythonfrom more_properties import property, class_property, static_propertyclass Parrot:    @property    def name(self):        return &quot;Fred&quot;    @class_property    def order(cls):        return Psittaciformes    @static_property    def planet():        return Earth```the properties may be accessed like so:```pycon&gt;&gt;&gt; Parrot().name'Fred'&gt;&gt;&gt; Parrot.order&lt;class 'Psittaciformes'&gt;&gt;&gt;&gt; Parrot.planet&lt;class 'Earth'&gt;```## Setters/DeletersSetters and deleters are defined in the same way as the built-in `property`.Either with the decorator method```pythonfrom more_properties import class_propertyclass Foo:    name = &quot;Foo&quot;    @class_property    def identifier(cls):        &quot;&quot;&quot;Object identifier&quot;&quot;&quot;        return cls.name.lower()    @identifier.setter    def identifier(cls, value):        cls.name = value.title()    @identifier.deleter    def identifier(cls):        cls.name = None```or the inline method```pythonfrom more_properties import class_propertyclass Foo:    name = &quot;Foo&quot;    @classmethod    def get_identifier(cls):        return cls.name.lower()    @classmethod    def set_identifier(cls, value):        cls.name = value.title()    @classmethod    def del_identifier(cls):        cls.name = None    identifier = class_property(        get_identifier,        set_identifier,        del_identifier,        &quot;Object identifier&quot;    )```## Reference### `property`A modified version of the built-in [`property`](https://docs.python.org/3/library/functions.html#property).Always behaves as a[data descriptor](https://docs.python.org/3/howto/descriptor.html#descriptor-protocol),regardless of which (if any) of getter, setter, and deleter are set.Behaviour when accessed on a class, is undefined.### `class_property`A `property` for classes.Both `cls.x` and `instance.x` call the getter with the class.Setting `instance.x` calls the setter with the class and value.Deleting `instance.x` call the deleter with the class only.```pythonfrom more_properties import class_propertyclass Foo:    @class_property    def identifier(cls):        &quot;&quot;&quot;Class identifier&quot;&quot;&quot;        return cls.__name__.lower()class Bar(Foo):    pass``````pycon&gt;&gt;&gt; Foo.identifier'foo'&gt;&gt;&gt; Foo().identifier'foo'``````pycon&gt;&gt;&gt; Bar.identifier'bar'&gt;&gt;&gt; Bar().identifier'bar'````classproperty` provided as a synonym, for consistency with `classmethod`.&lt;aside class=&quot;warning&quot;&gt;    &lt;p&gt;        Due to the        &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#object.__set__&quot;&gt;Python data model&lt;/a&gt;,        using the setters/deleters on &lt;em&gt;classes&lt;/em&gt; may not work as intended.    &lt;/p&gt;    &lt;p&gt;        Getters always work as intended, and using setters/deleters on &lt;em&gt;instances&lt;/em&gt; work as intended.    &lt;/p&gt;&lt;/aside&gt;### `static_property`A `property` independent of its accessor.Both `cls.x` and `instance.x` call the getter with no parameters.Setting `instance.x` calls the setter with the value only.Deleting `instance.x` call the deleter with no parameters.```pythonfrom more_properties import static_propertyx = &quot;bar&quot;class Foo:    @static_property    def val():        return x``````pycon&gt;&gt;&gt; Foo.val'bar'&gt;&gt;&gt; Foo().val'bar'````staticproperty` provided as a synonym, for consistency with `staticmethod`.&lt;aside class=&quot;warning&quot;&gt;    &lt;p&gt;        Due to the        &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#object.__set__&quot;&gt;Python data model&lt;/a&gt;,        using the setters/deleters on &lt;em&gt;classes&lt;/em&gt; may not work as intended.    &lt;/p&gt;    &lt;p&gt;        Getters always work as intended, and using setters/deleters on &lt;em&gt;instances&lt;/em&gt; work as intended.    &lt;/p&gt;&lt;/aside&gt;### `cached_property`### `cached_class_property`### `cached_static_property`Variants of `property`, `class_property`, and `static_property`, respectively.They are each used in the same way as the originals,but cache the value of the getters.```pythonfrom dataclasses import dataclassfrom more_properties import cached_property@dataclassclass Foo:    x: int    @cached_property    def y(self):        print(&quot;Doing work&quot;)        return self.x + 1``````pycon&gt;&gt;&gt; bar = Foo(1)&gt;&gt;&gt; bar.yDoing work2&gt;&gt;&gt; bar.y2```If the setters/deleters are defined,then the cache is cleared before they are called.Further, the cache may be explicitly cleared through the `clear_cache` method,exposed only during class creation.```python@dataclassclass Foo:    x: int    @cached_property    def y(self):        print(&quot;Doing work&quot;)        return self.x + 1    y_clear_cache = y.clear_cache``````pycon&gt;&gt;&gt; bar = Foo(1)&gt;&gt;&gt; bar.yDoing work2&gt;&gt;&gt; bar.y2&gt;&gt;&gt; bar.y_clear_cache()&gt;&gt;&gt; bar.yDoing work2```## InstallationInstall and update using the standard Python package manager [pip](https://pip.pypa.io/en/stable/):```bashpip install more_properties```</longdescription>
</pkgmetadata>