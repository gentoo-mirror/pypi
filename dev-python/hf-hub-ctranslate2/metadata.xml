<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>hf_hub_ctranslate2==============================Connecting Transformers on HuggingfaceHub with Ctranslate2 - a small utility for keeping tokenizer and model around Huggingface Hub.[![codecov](https://codecov.io/gh/michaelfeil/hf-hub-ctranslate2/branch/main/graph/badge.svg?token=U9VIEFEELS)](https://codecov.io/gh/michaelfeil/hf-hub-ctranslate2)![CI pytest](https://github.com/michaelfeil/hf-hub-ctranslate2/actions/workflows/test_release.yml/badge.svg)[Read the docs](https://michaelfeil.github.io/hf-hub-ctranslate2/)&lt;!-- PROJECT SHIELDS --&gt;[![Contributors][contributors-shield]][contributors-url][![Forks][forks-shield]][forks-url][![Stargazers][stars-shield]][stars-url][![Issues][issues-shield]][issues-url][![MIT License][license-shield]][license-url][![LinkedIn][linkedin-shield]][linkedin-url]--------## Usage:## Decoder-only Transformer:```python# download ctranslate.Generator repos from Huggingface Hub (GPT-J, ..)from hf_hub_ctranslate2 import TranslatorCT2fromHfHub, GeneratorCT2fromHfHubmodel_name_1=&quot;michaelfeil/ct2fast-pythia-160m&quot;model = GeneratorCT2fromHfHub(    # load in int8 on CPU    model_name_or_path=model_name_1, device=&quot;cpu&quot;, compute_type=&quot;int8&quot;)outputs = model.generate(    text=[&quot;How do you call a fast Flan-ingo?&quot;, &quot;User: How are you doing?&quot;]    # add arguments specifically to ctranslate2.Generator here)```## Encoder-Decoder:```pythonfrom hf_hub_ctranslate2 import TranslatorCT2fromHfHub# download ctranslate.Translator repos from Huggingface Hub (T5, ..)model_name_2 = &quot;michaelfeil/ct2fast-flan-alpaca-base&quot;model = TranslatorCT2fromHfHub(        # load in int8 on CUDA        model_name_or_path=model_name_2, device=&quot;cuda&quot;, compute_type=&quot;int8_float16&quot;)outputs = model.generate(    text=[&quot;How do you call a fast Flan-ingo?&quot;, &quot;Translate to german: How are you doing?&quot;],    # use arguments specifically to ctranslate2.Translator below:    min_decoding_length=8,    max_decoding_length=16,    max_input_length=512,    beam_size=3)print(outputs)```## Encoder-Decoder for multilingual translations (m2m-100):```pythonfrom hf_hub_ctranslate2 import MultiLingualTranslatorCT2fromHfHubmodel = MultiLingualTranslatorCT2fromHfHub(    model_name_or_path=&quot;michaelfeil/ct2fast-m2m100_418M&quot;, device=&quot;cpu&quot;, compute_type=&quot;int8&quot;,    tokenizer=AutoTokenizer.from_pretrained(f&quot;facebook/m2m100_418M&quot;))outputs = model.generate(    [&quot;How do you call a fast Flamingo?&quot;, &quot;Wie geht es dir?&quot;],    src_lang=[&quot;en&quot;, &quot;de&quot;],    tgt_lang=[&quot;de&quot;, &quot;fr&quot;])```## Encoder-only Sentence Transformers```pythonfrom hf_hub_ctranslate2 import CT2SentenceTransformermodel_name_pytorch = &quot;intfloat/e5-small&quot;model = CT2SentenceTransformer(    model_name_pytorch, compute_type=&quot;int8&quot;, device=&quot;cuda&quot;, )embeddings = model.encode(    [&quot;I like soccer&quot;, &quot;I like tennis&quot;, &quot;The eiffel tower is in Paris&quot;],    batch_size=32,    convert_to_numpy=True,    normalize_embeddings=True,)print(embeddings.shape, embeddings)scores = (embeddings @ embeddings.T) * 100```## Encoder-only```pythonfrom hf_hub_ctranslate2 import EncoderCT2fromHfHubmodel_name = &quot;michaelfeil/ct2fast-e5-small&quot;model = EncoderCT2fromHfHub(        # load in int8 on CUDA        model_name_or_path=model_name,        device=&quot;cuda&quot;,        compute_type=&quot;int8_float16&quot;,)outputs = model.generate(    text=[&quot;I like soccer&quot;, &quot;I like tennis&quot;, &quot;The eiffel tower is in Paris&quot;],    max_length=64,)```--------## PYPI Install```bashpip install hf-hub-ctranslate2```--------&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt;&lt;!-- https://www.markdownguide.org/basic-syntax/#reference-style-links --&gt;[contributors-shield]: https://img.shields.io/github/contributors/michaelfeil/hf-hub-ctranslate2.svg?style=for-the-badge[contributors-url]: https://github.com/michaelfeil/hf-hub-ctranslate2/graphs/contributors[forks-shield]: https://img.shields.io/github/forks/michaelfeil/hf-hub-ctranslate2.svg?style=for-the-badge[forks-url]: https://github.com/michaelfeil/hf-hub-ctranslate2/network/members[stars-shield]: https://img.shields.io/github/stars/michaelfeil/hf-hub-ctranslate2.svg?style=for-the-badge[stars-url]: https://github.com/michaelfeil/hf-hub-ctranslate2/stargazers[issues-shield]: https://img.shields.io/github/issues/michaelfeil/hf-hub-ctranslate2.svg?style=for-the-badge[issues-url]: https://github.com/michaelfeil/hf-hub-ctranslate2/issues[license-shield]: https://img.shields.io/github/license/michaelfeil/hf-hub-ctranslate2.svg?style=for-the-badge[license-url]: https://github.com/michaelfeil/hf-hub-ctranslate2/blob/master/LICENSE.txt[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=for-the-badge&amp;logo=linkedin&amp;colorB=555[linkedin-url]: https://linkedin.com/in/michael-feil</longdescription>
</pkgmetadata>