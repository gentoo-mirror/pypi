<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Sherlock: Distributed Locks with a choice of backend====================================================Sherlock is a library that provides easy-to-use distributed inter-processlocks and also allows you to choose a backend of your choice for locksynchronization.|Build Status| |Coverage Status|.. |Build Status| image:: https://github.com/py-sherlock/sherlock/actions/workflows/ci.yml/badge.svg   :target: https://github.com/py-sherlock/sherlock/actions?query=workflow%3ACI/CD.. |Coverage Status| image:: https://codecov.io/gh/py-sherlock/sherlock/branch/master/graph/badge.svg?token=QJXCZVSAEF :target: https://codecov.io/gh/py-sherlock/sherlockOverview--------When you are working with resources which are accessed by multiple services ordistributed services, more than often you need some kind of locking mechanismto make it possible to access some resources at a time.Distributed Locks or Mutexes can help you with this. Sherlock providesthe exact same facility, with some extra goodies. It provides an easy-to-use APIthat resembles standard library's `threading.Lock` semantics.Apart from this, Sherlock gives you the flexibility of using a backend ofyour choice for managing locks.Sherlock also makes it simple for you to extend Sherlock to usebackends that are not supported.Features++++++++* API similar to standard library's `threading.Lock`.* Support for With statement, to cleanly acquire and release locks.* Backend agnostic: supports File, `Redis`_, `Memcached`_, `Etcd`_, and `Kubernetes`_ as choice of  backends.* Extendable: can be easily extended to work with any other of backend of  choice by extending base lock class. Read ``extending``... _Redis: http://redis.io.. _Memcached: http://memcached.org.. _Etcd: http://github.com/coreos/etcd.. _Kubernetes: https://kubernetes.ioSupported Backends and Client Libraries+++++++++++++++++++++++++++++++++++++++Following client libraries are supported for every supported backend:* File: `filelock &lt;https://github.com/tox-dev/py-filelock&gt;`__* Redis: `redis-py &lt;https://github.com/redis/redis-py/tree/master/redis&gt;`__* Memcached: `pylibmc &lt;https://github.com/lericson/pylibmc&gt;`__* Etcd: `python-etcd &lt;https://github.com/jplana/python-etcd&gt;`__* Kubernetes: `kubernetes &lt;https://github.com/kubernetes-client/python&gt;`__As of now, only the above mentioned libraries are supported. AlthoughSherlock takes custom client objects so that you can easily providesettings that you want to use for that backend store, but Sherlock alsochecks if the provided client object is an instance of the supported clientsand accepts client objects which pass this check, even if the APIs are thesame. Sherlock might get rid of this issue later, if need be and ifthere is a demand for that.Installation------------Installation is simple... code:: bash    pip install sherlock[all].. note:: Sherlock will install all the client libraries for all the          supported backends.Basic Usage-----------Sherlock is simple to use as at the API and semantics level, it tries toconform to standard library's ``threading.Lock`` APIs... code-block:: python    import sherlock    from sherlock import Lock    # Configure Sherlock's locks to use Redis as the backend,    # never expire locks and retry acquiring an acquired lock after an    # interval of 0.1 second.    sherlock.configure(backend=sherlock.backends.REDIS,                       expire=None,                       retry_interval=0.1)    # Note: configuring sherlock to use a backend does not limit you    # another backend at the same time. You can import backend specific locks    # like RedisLock, MCLock and EtcdLock and use them just the same way you    # use a generic lock (see below). In fact, the generic Lock provided by    # sherlock is just a proxy that uses these specific locks under the hood.    # acquire a lock called my_lock    lock = Lock('my_lock')    # acquire a blocking lock    lock.acquire()    # check if the lock has been acquired or not    lock.locked() == True    # attempt to renew the lock    lock.renew()    # release the lock    lock.release()Support for ``with`` statement++++++++++++++++++++++++++++++.. code-block:: python    # using with statement    with Lock('my_lock') as lock:        # do something constructive with your locked resource here        passBlocking and Non-blocking API+++++++++++++++++++++++++++++.. code-block:: python    # acquire non-blocking lock    lock1 = Lock('my_lock')    lock2 = Lock('my_lock')    # successfully acquire lock1    lock1.acquire()    # try to acquire lock in a non-blocking way    lock2.acquire(False) == True # returns False    # try to acquire lock in a blocking way    lock2.acquire() # blocks until lock is acquired to timeout happensUsing two backends at the same time+++++++++++++++++++++++++++++++++++Configuring Sherlock to use a backend does not limit you from usinganother backend at the same time. You can import backend specific locks likeRedisLock, MCLock and EtcdLock and use them just the same way you use a genericlock (see below). In fact, the generic Lock provided by Sherlock is justa proxy that uses these specific locks under the hood... code-block:: python    import sherlock    from sherlock import Lock    # Configure Sherlock's locks to use Redis as the backend    sherlock.configure(backend=sherlock.backends.REDIS)    # Acquire a lock called my_lock, this lock uses Redis    lock = Lock('my_lock')    # Now acquire locks in Memcached    from sherlock import MCLock    mclock = MCLock('my_mc_lock')    mclock.acquire()Tests-----To run all the tests (including integration), you have to make sure that allthe databases are running. Make sure all the services are running:.. code:: bash    # memcached    memcached    # redis-server    redis-server    # etcd (etcd is probably not available as package, here is the simplest way    # to run it).    wget https://github.com/coreos/etcd/releases/download/&lt;version&gt;/etcd-&lt;version&gt;-&lt;platform&gt;.tar.gz    tar -zxvf etcd-&lt;version&gt;-&lt;platform&gt;.gz    ./etcd-&lt;version&gt;-&lt;platform&gt;/etcdRun tests like so:.. code:: bash    python setup.py testDocumentation-------------Available `here`_... _here: http://sher-lock.readthedocs.orgLicense-------See `LICENSE`_.**In short**: This is an open-source project and exists for anyone to use itand/or modify it for personal use. Just be nice and attribute the creditswherever you can. :).. _LICENSE: http://github.com/vaidik/sherlock/blob/master/LICENSE.rstQuestions?----------You are encouraged to ask questions using `issues`_ as that helps everyone andmyself when people with better know-how contribute to the discussion. However,if you wish to get in touch with me personally, then I can be contacted at**kapoor.vaidik++github+sherlock@gmail.com**... _issues: https://github.com/vaidik/sherlock/issuesDistributed Locking in Other Languages--------------------------------------* NodeJS - https://github.com/thedeveloper/warlock</longdescription>
</pkgmetadata>