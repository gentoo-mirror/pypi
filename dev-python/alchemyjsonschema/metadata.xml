<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>alchemyjsonschema=================.. |Python package| image:: https://github.com/podhmo/alchemyjsonschema/actions/workflows/python-package.yml/badge.svg    :target: https://github.com/podhmo/alchemyjsonschema/actions/workflows/python-package.ymlfeatures----------------------------------------alchemyjsonschema is the library for converting sqlalchemys's model to jsonschema.- using alchemyjsonschema as command- using alchemyjsonschema as libraryas library----------------------------------------having three output styles.- NoForeignKeyWalker -- ignore relationships- ForeignKeyWalker -- expecting the information about relationship is foreign key- StructuralWalker -- fullset output(expecting the information about relationship is full JSON data)examples^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^dumping json with above three output styles.target models are here. Group and User... code:: python   # -*- coding:utf-8 -*-   import sqlalchemy as sa   import sqlalchemy.orm as orm   from sqlalchemy.ext.declarative import declarative_base   Base = declarative_base()   class Group(Base):       &quot;&quot;&quot;model for test&quot;&quot;&quot;       __tablename__ = &quot;Group&quot;       pk = sa.Column(sa.Integer, primary_key=True, doc=&quot;primary key&quot;)       name = sa.Column(sa.String(255), default=&quot;&quot;, nullable=False)   class User(Base):       __tablename__ = &quot;User&quot;       pk = sa.Column(sa.Integer, primary_key=True, doc=&quot;primary key&quot;)       name = sa.Column(sa.String(255), default=&quot;&quot;, nullable=True)       group_id = sa.Column(sa.Integer, sa.ForeignKey(Group.pk), nullable=False)       group = orm.relationship(Group, uselist=False, backref=&quot;users&quot;)NoForeignKeyWalker~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python   import pprint as pp   from alchemyjsonschema import SchemaFactory   from alchemyjsonschema import NoForeignKeyWalker   factory = SchemaFactory(NoForeignKeyWalker)   pp.pprint(factory(User))   &quot;&quot;&quot;   {'properties': {'name': {'maxLength': 255, 'type': 'string'},                   'pk': {'description': 'primary key', 'type': 'integer'}},    'required': ['pk'],    'title': 'User',    'type': 'object'}   &quot;&quot;&quot;ForeignKeyWalker~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python   import pprint as pp   from alchemyjsonschema import SchemaFactory   from alchemyjsonschema import ForeignKeyWalker   factory = SchemaFactory(ForeignKeyWalker)   pp.pprint(factory(User))   &quot;&quot;&quot;   {'properties': {'group_id': {'type': 'integer'},                   'name': {'maxLength': 255, 'type': 'string'},                   'pk': {'description': 'primary key', 'type': 'integer'}},    'required': ['pk', 'group_id'],    'title': 'User',    'type': 'object'}   &quot;&quot;&quot;StructuralWalker~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python   import pprint as pp   from alchemyjsonschema import SchemaFactory   from alchemyjsonschema import StructuralWalker   factory = SchemaFactory(StructuralWalker)   pp.pprint(factory(User))   &quot;&quot;&quot;   {'definitions': {'Group': {'properties': {'pk': {'description': 'primary key',                                                    'type': 'integer'},                                             'name': {'maxLength': 255,                                                      'type': 'string'}},                              'type': 'object'}},    'properties': {'pk': {'description': 'primary key', 'type': 'integer'},                   'name': {'maxLength': 255, 'type': 'string'},                   'group': {'$ref': '#/definitions/Group'}},    'required': ['pk'],    'title': 'User',    'type': 'object'}   &quot;&quot;&quot;   pp.pprint(factory(Group))   &quot;&quot;&quot;   {'definitions': {'User': {'properties': {'pk': {'description': 'primary key',                                                   'type': 'integer'},                                            'name': {'maxLength': 255,                                                     'type': 'string'}},                             'type': 'object'}},    'description': 'model for test',    'properties': {'pk': {'description': 'primary key', 'type': 'integer'},                   'name': {'maxLength': 255, 'type': 'string'},                   'users': {'items': {'$ref': '#/definitions/User'},                             'type': 'array'}},    'required': ['pk', 'name'],    'title': 'Group',    'type': 'object'}   &quot;&quot;&quot;as command----------------------------------------using alchemyjsonschema as command (the command name is also `alchemyjsonschema`).help.. code:: bash    $ alchemyjsonschema --help    usage: alchemyjsonschema [-h] [--walker {noforeignkey,foreignkey,structural}]                             [--decision {default,fullset}] [--depth DEPTH]                             [--out OUT]                             target    positional arguments:      target                the module or class to extract schemas from    optional arguments:      -h, --help            show this help message and exit      --walker {noforeignkey,foreignkey,structural}      --decision {default,fullset}      --depth DEPTH      --out OUT             output to fileIf above two model definitions (User,Group) are existed in `alchemyjsonschema.tests.models` .Target is the class position or module position. for example,- class position -- `alchemyjsonschema.tests.models:User`- module position -- `alchemyjsonschema.tests.models`example^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Using StructuralWalker via command line (--walker structural).Of course, NoForeignKeyWalker is noforeignkey, and ForeignKeyWalker is foreignkey... code:: bash    $ alchemyjsonschema --walker structural alchemyjsonschema.tests.models:Group    {      &quot;definitions&quot;: {        &quot;Group&quot;: {          &quot;properties&quot;: {            &quot;color&quot;: {              &quot;enum&quot;: [                &quot;red&quot;,                &quot;green&quot;,                &quot;yellow&quot;,                &quot;blue&quot;              ],              &quot;maxLength&quot;: 6,              &quot;type&quot;: &quot;string&quot;            },            &quot;created_at&quot;: {              &quot;format&quot;: &quot;date-time&quot;,              &quot;type&quot;: &quot;string&quot;            },            &quot;name&quot;: {              &quot;maxLength&quot;: 255,              &quot;type&quot;: &quot;string&quot;            },            &quot;pk&quot;: {              &quot;description&quot;: &quot;primary key&quot;,              &quot;type&quot;: &quot;integer&quot;            },            &quot;users&quot;: {              &quot;items&quot;: {                &quot;$ref&quot;: &quot;#/definitions/User&quot;              },              &quot;type&quot;: &quot;array&quot;            }          },          &quot;required&quot;: [            &quot;pk&quot;          ],          &quot;title&quot;: &quot;Group&quot;,          &quot;type&quot;: &quot;object&quot;        },        &quot;User&quot;: {          &quot;properties&quot;: {            &quot;created_at&quot;: {              &quot;format&quot;: &quot;date-time&quot;,              &quot;type&quot;: &quot;string&quot;            },            &quot;name&quot;: {              &quot;maxLength&quot;: 255,              &quot;type&quot;: &quot;string&quot;            },            &quot;pk&quot;: {              &quot;description&quot;: &quot;primary key&quot;,              &quot;type&quot;: &quot;integer&quot;            }          },          &quot;required&quot;: [            &quot;pk&quot;          ],          &quot;type&quot;: &quot;object&quot;        }      }    }Output is not same when using Walker-class, directly. This is handy output for something like a swagger(OpenAPI 2.0)'s tool.appendix: what is `--decision` ?^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^what is `--decision`? (TODO: gentle description).. code-block:: bash   $ alchemyjsonschema --walker structural alchemyjsonschema.tests.models:User | jq . -S &gt; /tmp/default.json   $ alchemyjsonschema --decision useforeignkey --walker structural alchemyjsonschema.tests.models:User | jq . -S &gt; /tmp/useforeignkey.json   $ diff -u /tmp/default.json /tmp/useforeignkey.json.. code-block:: diff  --- /tmp/default.json2017-01-02 22:49:44.000000000 +0900  +++ /tmp/useforeignkey.json2017-01-02 22:53:13.000000000 +0900  @@ -1,43 +1,14 @@   {     &quot;definitions&quot;: {  -    &quot;Group&quot;: {  -      &quot;properties&quot;: {  -        &quot;color&quot;: {  -          &quot;enum&quot;: [  -            &quot;red&quot;,  -            &quot;green&quot;,  -            &quot;yellow&quot;,  -            &quot;blue&quot;  -          ],  -          &quot;maxLength&quot;: 6,  -          &quot;type&quot;: &quot;string&quot;  -        },  -        &quot;created_at&quot;: {  -          &quot;format&quot;: &quot;date-time&quot;,  -          &quot;type&quot;: &quot;string&quot;  -        },  -        &quot;name&quot;: {  -          &quot;maxLength&quot;: 255,  -          &quot;type&quot;: &quot;string&quot;  -        },  -        &quot;pk&quot;: {  -          &quot;description&quot;: &quot;primary key&quot;,  -          &quot;type&quot;: &quot;integer&quot;  -        }  -      },  -      &quot;required&quot;: [  -        &quot;pk&quot;  -      ],  -      &quot;type&quot;: &quot;object&quot;  -    },       &quot;User&quot;: {         &quot;properties&quot;: {           &quot;created_at&quot;: {             &quot;format&quot;: &quot;date-time&quot;,             &quot;type&quot;: &quot;string&quot;           },  -        &quot;group&quot;: {  -          &quot;$ref&quot;: &quot;#/definitions/Group&quot;  +        &quot;group_id&quot;: {  +          &quot;relation&quot;: &quot;group&quot;,  +          &quot;type&quot;: &quot;integer&quot;           },           &quot;name&quot;: {             &quot;maxLength&quot;: 255,0.7.1- adjust_required() option0.7.0- see server_default- omit python 2.x0.6.1- catch up magicalimport 0.8.10.6.0- fix for jsonschema-update0.4.2- fix bug calling command with module (not model class)0.4.0- remove needless feature(#11)0.3- swagger support(thanks of isysd)</longdescription>
</pkgmetadata>