<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>logmatic-python===============*Link to the Logmatic.io documentation: http://doc.logmatic.io/docs/python*Python helpers to send logs to Logmatic.io.It mainly contains a proper JSON formatter and a socket handler thatstreams logs directly to Logmatic.io - so no need to use a log shipperif you don't wan't to.Pre-requirements================To install this library, use the following command:::    pip install logmatic-pythonUsage=====Use the JSON formatter----------------------To use the JSON formatter, simply associate it to any handler such asthe StreamHandler here... code:: python    import logmatic    import logging    logger = logging.getLogger()    handler = logging.StreamHandler()    handler.setFormatter(logmatic.JsonFormatter(extra={&quot;hostname&quot;:socket.gethostname()}))    logger.addHandler(handler)    logger.setLevel(logging.INFO)Once this setup is done, any child logger will use this configuration(eg ``logging.getlogger(&quot;my_logger&quot;)``). As you can see, you canassociate any extra information to the base formatter such as thehostname here or any environment variable you'll need depending of yourusage... code:: python    test_logger = logging.getLogger(&quot;test&quot;)    test_logger.info(&quot;classic message&quot;, extra={&quot;special&quot;: &quot;value&quot;, &quot;run&quot;: 12})Returns the following format:.. code:: javascript    {      &quot;asctime&quot;: &quot;2016-02-16T09:51:31Z&quot;,      &quot;name&quot;: &quot;test&quot;, &quot;processName&quot;: &quot;MainProcess&quot;,      &quot;filename&quot;: &quot;write_in_console.py&quot;,      &quot;funcName&quot;: &quot;&lt;module&gt;&quot;,      &quot;levelname&quot;: &quot;INFO&quot;,      &quot;lineno&quot;: 20,      &quot;module&quot;: &quot;write_in_console&quot;,      &quot;threadName&quot;: &quot;MainThread&quot;,      &quot;message&quot;: &quot;classic message&quot;,      &quot;special&quot;: &quot;value&quot;,      &quot;run&quot;: 12,      &quot;timestamp&quot;: &quot;2016-02-16T09:51:31Z&quot;,      &quot;hostname&quot;: &quot;&lt;your_hostname&gt;&quot;    }Let's take some time here to understand what we have:-  The default format is &quot;%(asctime) %(name) %(processName) %(filename)   %(funcName) %(levelname) %(lineno) %(module) %(threadName)   %(message)&quot;. So that's why all these attributes are present on all   the log events. If you need less, you can change the format when   defining the formatter: ``logmatic.JsonFormatter(fmt=&quot;&quot;,...)``-  The ``hostname`` attribute here is added all the time as it was   defined on the root logger.-  The ``special`` and ``run`` attributes were added specifically to   this log event.Good to know, an traceback from an exception is totally wrapped into theJSON event. That's suppress the handling of multiline formatting:.. code:: javascript    {      ...      &quot;exc_info&quot;: &quot;Traceback (most recent call last):\n  File \&quot;test/write_in_console.py\&quot;, line 24, in exception_test\n    raise Exception('test')\nException: test&quot;,      ...    }Stream log straight to Logmatic.io----------------------------------The LogmaticHandler can be coupled to the JsonFormatter as follow:.. code:: python    import logmatic    import logging    logger = logging.getLogger()    handler = logmatic.LogmaticHandler(&quot;&lt;your_api_key&gt;&quot;)    handler.setFormatter(logmatic.JsonFormatter(extra={&quot;hostname&quot;:socket.gethostname()}))    logger.addHandler(handler)    logger.setLevel(logging.INFO)Don't forget to replace by the one provided on your Logmatic.io'splatform.With this configuration, any log coming from your Python's applicationwill be sent to your platform and will fulfill the same format asdescribed in the previous section.Please contact us if you want anything more to be added in this toolset!</longdescription>
</pkgmetadata>