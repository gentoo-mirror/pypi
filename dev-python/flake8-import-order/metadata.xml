<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>flake8-import-order===================|Build Status|A `flake8 &lt;http://flake8.readthedocs.org/en/latest/&gt;`__ and `Pylama&lt;https://github.com/klen/pylama&gt;`__ plugin that checks the ordering ofyour imports. It does not check anything else about theimports. Merely that they are grouped and ordered correctly.In general stdlib comes first, then 3rd party, then local packages,and that each group is individually alphabetized, however this dependson the style used. Flake8-Import-Order supports a number of `styles&lt;#styles&gt;`_ and is extensible allowing for `custom styles&lt;#extending-styles&gt;`_.This plugin was originally developed to match the style preferences ofthe `cryptography &lt;https://github.com/pyca/cryptography&gt;`__ project,with this style remaining the default.Warnings--------This package adds 4 new flake8 warnings-  ``I100``: Your import statements are in the wrong order.-  ``I101``: The names in your from import are in the wrong order.-  ``I201``: Missing newline between import groups.-  ``I202``: Additional newline in a group of imports.Styles------The following styles are directly supported,* ``cryptography`` - see an `example &lt;https://github.com/PyCQA/flake8-import-order/blob/master/tests/test_cases/complete_cryptography.py&gt;`__* ``google`` - style described in `Google Style Guidelines &lt;https://google.github.io/styleguide/pyguide.html?showone=Imports_formatting#Imports_formatting&gt;`__, see an `example &lt;https://github.com/PyCQA/flake8-import-order/blob/master/tests/test_cases/complete_google.py&gt;`__* ``smarkets`` - style as ``google`` only with `import` statements before `from X import ...` statements, see an `example &lt;https://github.com/PyCQA/flake8-import-order/blob/master/tests/test_cases/complete_smarkets.py&gt;`__* ``appnexus`` - style as ``google`` only with `import` statements for packages local to your company or organisation coming after `import` statements for third-party packages, see an `example &lt;https://github.com/PyCQA/flake8-import-order/blob/master/tests/test_cases/complete_appnexus.py&gt;`__* ``edited`` - see an `example &lt;https://github.com/PyCQA/flake8-import-order/blob/master/tests/test_cases/complete_edited.py&gt;`__* ``pycharm`` - style as ``smarkets`` only with case sensitive sorting imported names* ``pep8`` - style that only enforces groups without enforcing the order within the groupsYou can also `add your own style &lt;#extending-styles&gt;`_ by extending ``Style``class.Configuration-------------You will want to set the ``application-import-names`` option to acomma separated list of names that should be considered local to yourapplication. These will be used to help categorise your importstatements into the correct groups. Note that relative imports arealways considered local.You will want to set the ``application-package-names`` option to acomma separated list of names that should be considered local to yourcompany or organisation, but which are obtained using some sort ofpackage manager like Pip, Apt, or Yum.  Typically, code representingthe values listed in this option is located in a different repositorythan the code being developed.  This option is only accepted in thesupported ``appnexus`` or ``edited`` styles or in any style thataccepts application package names.The ``application-import-names`` and ``application-package-names`` cancontain namespaced packages or even exact nested module names. (Thisis possible with 0.16 onwards).``import-order-style`` controls what style the plugin follows(``cryptography`` is the default).Limitations-----------Currently these checks are limited to module scope imports only.Conditional imports in module scope will also be ignored.Classification of an imported module is achieved by checking themodule against a stdlib list and then if there is no match against the``application-import-names`` list and ``application-package-names`` ifthe style accepts application-package names. Only if none of theselists contain the imported module will it be classified as thirdparty.These checks only consider an import against its previous import,rather than considering all the imports together. This means that``I100`` errors are only raised for the latter of adjacent imports outof order. For example,.. code-block:: python    import X.B    import X  # I100    import X.Aonly ``import X`` raises an ``I100`` error, yet ``import X.A`` is alsoout of order compared with the ``import X.B``.Imported modules are classified as stdlib if the module is in avendored list of stdlib modules. This list is based on the latestrelease of Python and hence the results can be misleading. This listis also the same for all Python versions because otherwise it wouldbe impossible to write programs that work under both Python 2 and 3*and* pass the import order check.The ``I202`` check will consider any blank line between imports tocount, even if the line is not contextually related to theimports. For example,.. code-block:: python    import logging    try:        from logging import NullHandler    except ImportError:        class NullHandler(logging.Handler):            &quot;&quot;&quot;Shim for version of Python &lt; 2.7.&quot;&quot;&quot;            def emit(self, record):                pass    import sys  # I202 due to the blank line before the 'def emit'will trigger a ``I202`` error despite the blank line not beingcontextually related.Extending styles----------------You can add your own style by extending ``flake8_import_order.styles.Style``class. Here's an example:.. code-block:: python    from flake8_import_order.styles import Cryptography    class ReversedCryptography(Cryptography):        # Note that Cryptography is a subclass of Style.        @staticmethod        def sorted_names(names):            return reversed(Cryptography.sorted_names(names))By default there are five import groupings or sections; future,stdlib, third party, application, and relative imports. A style canchoose to accept another grouping, application-package, by setting the``Style`` class variable ``accepts_application_package_names`` toTrue, e.g... code-block:: python    class PackageNameCryptography(Cryptography):        accepts_application_package_names = TrueTo make flake8-import-order able to discover your extended style, you need toregister it as ``flake8_import_order.styles`` using setuptools' `entry points&lt;https://setuptools.readthedocs.io/en/latest/pkg_resources.html#entry-points&gt;`__mechanism:.. code-block:: python    # setup.py of your style package    setup(        name='flake8-import-order-reversed-cryptography',        ...,        entry_points={            'flake8_import_order.styles': [                'reversed = reversedcryptography:ReversedCryptography',                # 'reversed' is a style name.  You can pass it to                # --import-order-style option                # 'reversedcryptography:ReversedCryptography' is an import path                # of your extended style class.            ]        }    ).. |Build Status| image:: https://travis-ci.org/PyCQA/flake8-import-order.svg?branch=master   :target: https://travis-ci.org/PyCQA/flake8-import-order</longdescription>
</pkgmetadata>