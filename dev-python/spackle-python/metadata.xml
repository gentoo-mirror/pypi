<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Spackle Python Library[![CI](https://github.com/spackleso/spackle-python/actions/workflows/test.yml/badge.svg)](https://github.com/spackleso/spackle-python/actions/workflows/test.yml) [![pypi](https://img.shields.io/pypi/v/spackle-python.svg)](https://pypi.python.org/pypi/spackle-python)The Spackle Python library provides optimized access to billing aware flags created on the Spackle platform.## DocumentationSee the [Python API docs](https://docs.spackle.so/python).## Setup### Install the Spackle library```shpip install -U spackle-python```### Configure your environmentIn order to use Spackle, you need to configure your API key on the `spackle` module. You can find your API key in Spackle app [settings page](https://dashboard.stripe.com/settings/apps/so.spackle.stripe).```pythonimport spacklespackle.api_key = &quot;&lt;api key&gt;&quot;```## Usage### Pricing tables#### Fetch a pricing table```pythonpricing_table = spackle.PricingTable.retrieve(&quot;abcde123&quot;)```#### Pricing table object```ts{  id: string  name: string  intervals: string[]  products: {    id: string    features: {      id: string      name: string      key: string      type: number      value_flag: boolean      value_limit: number | null    }[]    name: string    prices: {      month?: {        unit_amount: number        currency: string      }      year?: {        unit_amount: number        currency: string      }    }  }[]}```### Entitlements#### Fetch a customerSpackle uses stripe ids as references to customer features.```pythoncustomer = spackle.Customer.retrieve(&quot;cus_00000000&quot;)```#### Verify feature access```pythoncustomer.enabled(&quot;feature_key&quot;)```#### Fetch a feature limit```pythoncustomer.limit(&quot;feature_key&quot;)```#### Examine a customer's subscriptionsA customer's current subscriptions are available on the `subscriptions` property. These are valid `stripe.Subscription` objects as defined in the [Stripe Python library](https://stripe.com/docs/api/subscriptions/object?lang=python).```pythoncustomer.subscriptions```#### WaitersThere is a brief delay between when an action takes place in Stripe and when it is reflected in Spackle. To account for this, Spackle provides a `waiters` module that can be used to wait for a Stripe object to be updated and replicated.1. Wait for a customer to be created   ```python   spackle.wait_for_customer(&quot;cus_00000000&quot;)   ```2. Wait for a subscription to be created   ```python   spackle.wait_for_subscription(&quot;cus_000000000&quot;, &quot;sub_00000000&quot;)   ```3. Wait for a subscription to be updated   ```python   spackle.wait_for_subscription(&quot;cus_000000000&quot;, &quot;sub_00000000&quot;, status=&quot;active&quot;)   ```These will block until Spackle is updated with the latest information from Stripe or until a timeout occurs.#### Usage in development environmentsIn production, Spackle requires a valid Stripe customer. However, that is not development environments where state needs to be controlled. As an alternative, you can use a file store to test your application with seed data.```json/app/spackle.json{  &quot;cus_000000000&quot;: {    &quot;features&quot;: [      {        &quot;type&quot;: 0,        &quot;key&quot;: &quot;flag_feature&quot;,        &quot;value_flag&quot;: true      },      {        &quot;type&quot;: 1,        &quot;key&quot;: &quot;limit_feature&quot;,        &quot;value_limit&quot;: 100      }    ],    &quot;subscriptions&quot;: [      {        &quot;id&quot;: &quot;sub_000000000&quot;,        &quot;status&quot;: &quot;trialing&quot;,        &quot;quantity&quot;: 1      }    ]  }}```Then configure the file store in your application:```pythonspackle.set_store(spackle.FileStore(&quot;/app/spackle.json&quot;))```## Usage in testing environmentsIn production, Spackle requires a valid Stripe customer. However, that is not ideal in testing or some development environments. As an alternative, you can use an in-memory store to test your application with seed data.```pythonspackle.set_store(spackle.MemoryStore())spackle.get_store().set_customer_data(&quot;cus_000000000&quot;, {  &quot;features&quot;: [    {      &quot;type&quot;: 0,      &quot;key&quot;: &quot;flag_feature&quot;,      &quot;value_flag&quot;: True,    },    {      &quot;type&quot;: 1,      &quot;key&quot;: &quot;limit_feature&quot;,      &quot;value_limit&quot;: 100,    },  ],  &quot;subscriptions&quot;: [     {       &quot;id&quot;: &quot;sub_000000000&quot;,       &quot;status&quot;: &quot;trialing&quot;,       &quot;quantity&quot;: 1,     }  ]})```**Note:** The in-memory store is not thread-safe and state will reset on each application restart.## LoggingThe Spackle Python library emits logs as it performs various internal tasks. You can control the verbosity of Spackle's logging a few different ways:1. Set the environment variable SPACKLE_LOG to the value `debug`, `info`, or `warn`   ```sh   $ export SPACKLE_LOG=debug   ```2. Set spackle.log:   ```python   import spackle   spackle.log = 'debug'   ```3. Enable it through Python's logging module:   ```python   import logging   logging.basicConfig()   logging.getLogger('spackle').setLevel(logging.DEBUG)   ```</longdescription>
</pkgmetadata>