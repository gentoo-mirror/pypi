<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ðŸ¦™ Python Bindings for `llama.cpp`[![Documentation Status](https://readthedocs.org/projects/llama-cpp-python/badge/?version=latest)](https://llama-cpp-python.readthedocs.io/en/latest/?badge=latest)[![Tests](https://github.com/abetlen/llama-cpp-python/actions/workflows/test.yaml/badge.svg?branch=main)](https://github.com/abetlen/llama-cpp-python/actions/workflows/test.yaml)[![PyPI](https://img.shields.io/pypi/v/llama-cpp-python)](https://pypi.org/project/llama-cpp-python/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/llama-cpp-python)](https://pypi.org/project/llama-cpp-python/)[![PyPI - License](https://img.shields.io/pypi/l/llama-cpp-python)](https://pypi.org/project/llama-cpp-python/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/llama-cpp-python)](https://pypi.org/project/llama-cpp-python/)Simple Python bindings for **@ggerganov's** [`llama.cpp`](https://github.com/ggerganov/llama.cpp) library.This package provides:- Low-level access to C API via `ctypes` interface.- High-level Python API for text completion  - OpenAI-like API  - LangChain compatibilityDocumentation is available at [https://llama-cpp-python.readthedocs.io/en/latest](https://llama-cpp-python.readthedocs.io/en/latest).&gt; [!WARNING]  &gt; Starting with version 0.1.79 the model format has changed from `ggmlv3` to `gguf`. Old model files can be converted using the `convert-llama-ggmlv3-to-gguf.py` script in [`llama.cpp`](https://github.com/ggerganov/llama.cpp)## Installation from PyPIInstall from PyPI (requires a c compiler):```bashpip install llama-cpp-python```The above command will attempt to install the package and build `llama.cpp` from source.This is the recommended installation method as it ensures that `llama.cpp` is built with the available optimizations for your system.If you have previously installed `llama-cpp-python` through pip and want to upgrade your version or rebuild the package with different  compiler options, please add the following flags to ensure that the package is rebuilt correctly:```bashpip install llama-cpp-python --force-reinstall --upgrade --no-cache-dir```Note: If you are using Apple Silicon (M1) Mac, make sure you have installed a version of Python that supports arm64 architecture. For example:```wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-arm64.shbash Miniforge3-MacOSX-arm64.sh```Otherwise, while installing it will build the llama.ccp x86 version which will be 10x slower on Apple Silicon (M1) Mac.### Installation with Hardware Acceleration`llama.cpp` supports multiple BLAS backends for faster processing.Use the `FORCE_CMAKE=1` environment variable to force the use of `cmake` and install the pip package for the desired BLAS backend.To install with OpenBLAS, set the `LLAMA_BLAS and LLAMA_BLAS_VENDOR` environment variables before installing:```bashCMAKE_ARGS=&quot;-DLLAMA_BLAS=ON -DLLAMA_BLAS_VENDOR=OpenBLAS&quot; FORCE_CMAKE=1 pip install llama-cpp-python```To install with cuBLAS, set the `LLAMA_CUBLAS=1` environment variable before installing:```bashCMAKE_ARGS=&quot;-DLLAMA_CUBLAS=on&quot; FORCE_CMAKE=1 pip install llama-cpp-python```To install with CLBlast, set the `LLAMA_CLBLAST=1` environment variable before installing:```bashCMAKE_ARGS=&quot;-DLLAMA_CLBLAST=on&quot; FORCE_CMAKE=1 pip install llama-cpp-python```To install with Metal (MPS), set the `LLAMA_METAL=on` environment variable before installing:```bashCMAKE_ARGS=&quot;-DLLAMA_METAL=on&quot; FORCE_CMAKE=1 pip install llama-cpp-python```To install with hipBLAS / ROCm support for AMD cards, set the `LLAMA_HIPBLAS=on` environment variable before installing:```bashCMAKE_ARGS=&quot;-DLLAMA_HIPBLAS=on&quot; FORCE_CMAKE=1 pip install llama-cpp-python```#### Windows remarksTo set the variables `CMAKE_ARGS` and `FORCE_CMAKE` in PowerShell, follow the next steps (Example using, OpenBLAS):```ps$env:CMAKE_ARGS = &quot;-DLLAMA_OPENBLAS=on&quot;``````ps$env:FORCE_CMAKE = 1```Then, call `pip` after setting the variables:```pip install llama-cpp-python```See the above instructions and set `CMAKE_ARGS` to the BLAS backend you want to use.#### MacOS remarksDetailed MacOS Metal GPU install documentation is available at [docs/install/macos.md](docs/install/macos.md)## High-level APIThe high-level API provides a simple managed interface through the `Llama` class.Below is a short example demonstrating how to use the high-level API to generate text:```python&gt;&gt;&gt; from llama_cpp import Llama&gt;&gt;&gt; llm = Llama(model_path=&quot;./models/7B/ggml-model.bin&quot;)&gt;&gt;&gt; output = llm(&quot;Q: Name the planets in the solar system? A: &quot;, max_tokens=32, stop=[&quot;Q:&quot;, &quot;\n&quot;], echo=True)&gt;&gt;&gt; print(output){  &quot;id&quot;: &quot;cmpl-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;,  &quot;object&quot;: &quot;text_completion&quot;,  &quot;created&quot;: 1679561337,  &quot;model&quot;: &quot;./models/7B/ggml-model.bin&quot;,  &quot;choices&quot;: [    {      &quot;text&quot;: &quot;Q: Name the planets in the solar system? A: Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune and Pluto.&quot;,      &quot;index&quot;: 0,      &quot;logprobs&quot;: None,      &quot;finish_reason&quot;: &quot;stop&quot;    }  ],  &quot;usage&quot;: {    &quot;prompt_tokens&quot;: 14,    &quot;completion_tokens&quot;: 28,    &quot;total_tokens&quot;: 42  }}```### Adjusting the Context WindowThe context window of the Llama models determines the maximum number of tokens that can be processed at once. By default, this is set to 512 tokens, but can be adjusted based on your requirements.For instance, if you want to work with larger contexts, you can expand the context window by setting the n_ctx parameter when initializing the Llama object:```pythonllm = Llama(model_path=&quot;./models/7B/ggml-model.bin&quot;, n_ctx=2048)```### Loading llama-2 70bLlama2 70b must set the `n_gqa` parameter (grouped-query attention factor) to 8 when loading:```pythonllm = Llama(model_path=&quot;./models/70B/ggml-model.bin&quot;, n_gqa=8)```## Web Server`llama-cpp-python` offers a web server which aims to act as a drop-in replacement for the OpenAI API.This allows you to use llama.cpp compatible models with any OpenAI compatible client (language libraries, services, etc).To install the server package and get started:```bashpip install llama-cpp-python[server]python3 -m llama_cpp.server --model models/7B/ggml-model.bin```Navigate to [http://localhost:8000/docs](http://localhost:8000/docs) to see the OpenAPI documentation.## Docker imageA Docker image is available on [GHCR](https://ghcr.io/abetlen/llama-cpp-python). To run the server:```bashdocker run --rm -it -p 8000:8000 -v /path/to/models:/models -e MODEL=/models/ggml-model-name.bin ghcr.io/abetlen/llama-cpp-python:latest```[Docker on termux (requires root)](https://gist.github.com/FreddieOliveira/efe850df7ff3951cb62d74bd770dce27) is currently the only known way to run this on phones, see [termux support issue](https://github.com/abetlen/llama-cpp-python/issues/389) ## Low-level APIThe low-level API is a direct [`ctypes`](https://docs.python.org/3/library/ctypes.html) binding to the C API provided by `llama.cpp`.The entire low-level API can be found in [llama_cpp/llama_cpp.py](https://github.com/abetlen/llama-cpp-python/blob/master/llama_cpp/llama_cpp.py) and directly mirrors the C API in [llama.h](https://github.com/ggerganov/llama.cpp/blob/master/llama.h).Below is a short example demonstrating how to use the low-level API to tokenize a prompt:```python&gt;&gt;&gt; import llama_cpp&gt;&gt;&gt; import ctypes&gt;&gt;&gt; params = llama_cpp.llama_context_default_params()# use bytes for char * params&gt;&gt;&gt; ctx = llama_cpp.llama_init_from_file(b&quot;./models/7b/ggml-model.bin&quot;, params)&gt;&gt;&gt; max_tokens = params.n_ctx# use ctypes arrays for array params&gt;&gt;&gt; tokens = (llama_cpp.llama_token * int(max_tokens))()&gt;&gt;&gt; n_tokens = llama_cpp.llama_tokenize(ctx, b&quot;Q: Name the planets in the solar system? A: &quot;, tokens, max_tokens, add_bos=llama_cpp.c_bool(True))&gt;&gt;&gt; llama_cpp.llama_free(ctx)```Check out the [examples folder](examples/low_level_api) for more examples of using the low-level API.# DocumentationDocumentation is available at [https://abetlen.github.io/llama-cpp-python](https://abetlen.github.io/llama-cpp-python).If you find any issues with the documentation, please open an issue or submit a PR.# DevelopmentThis package is under active development and I welcome any contributions.To get started, clone the repository and install the package in development mode:```bashgit clone --recurse-submodules https://github.com/abetlen/llama-cpp-python.gitcd llama-cpp-python# Install with pippip install -e .# if you want to use the fastapi / openapi serverpip install -e .[server]# If you're a poetry user, installing will also include a virtual environmentpoetry install --all-extras. .venv/bin/activate# Will need to be re-run any time vendor/llama.cpp is updatedpython3 setup.py develop```# How does this compare to other Python bindings of `llama.cpp`?I originally wrote this package for my own use with two goals in mind:- Provide a simple process to install `llama.cpp` and access the full C API in `llama.h` from Python- Provide a high-level Python API that can be used as a drop-in replacement for the OpenAI API so existing apps can be easily ported to use `llama.cpp`Any contributions and changes to this package will be made with these goals in mind.# LicenseThis project is licensed under the terms of the MIT license.</longdescription>
</pkgmetadata>