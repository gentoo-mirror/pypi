<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python wrapper for JFROG Xray REST API`jfrog-xray-api` is a live python package for JFrog Xray REST API. [![jfrog-xray-api on PyPI](https://img.shields.io/pypi/v/jfrog-xray-api.svg)][1][![jfrog-xray-api license](https://img.shields.io/pypi/l/jfrog-xray-api.svg)][2][![jfrog-xray-api downloads](https://pepy.tech/badge/jfrog-xray-api)][3][![jfrog-xray-api downloads/month](https://static.pepy.tech/badge/jfrog-xray-api/month)][3]![pylint](https://github.com/donhui/jfrog-xray-api/actions/workflows/pylint.yml/badge.svg)[1]: https://pypi.python.org/pypi/jfrog-xray-api[2]: https://github.com/donhui/jfrog-xray-api/blob/master/LICENSE[3]: https://pepy.tech/project/jfrog-xray-api# Tables of Contents&lt;!-- toc --&gt;- [Install](#install)- [Usage](#usage)  * [Authentication](#authentication)  * [SYSTEM](#system)    + [Create Bundle](#create-bundle)    + [Ping Request](#ping-request)      + [Get Version](#get-version)    + [Metrics](#metrics)  * [Components](#components)    + [Find Component by Name](#find-component-by-name)    + [Find Components by CVEs](#find-components-by-cves)    + [Find CVEs by Components](#find-cves-by-components)    + [Get Component List Per Watch](#get-component-list-per-watch)    + [Get Artifact Dependency Graph](#get-artifact-dependency-graph)    + [Compare Artifacts](#compare-artifacts)    + [Get Build Dependency Graph](#get-build-dependency-graph)    + [Compare Builds](#compare-builds)    + [Export Component Details](#export-component-details)  * [SUMMARY](#summary)    + [Build Summary](#build-summary)    + [Artifact Summary](#artifact-summary)  * [ISSUES](#issues)       + [Create Issue Event](#create-issue-event)    + [Update Issue Event](#update-issue-event)    + [Get Issue Event](#get-issue-event)  * [SCANNING](#scanning)       + [Scan Artifact](#scan-artifact)      + [Scan Build](#scan-build)    + [Scan Status](#scan-status)    + [Scan Now](#scan-now)&lt;!-- tocstop --&gt;# Install```pip install jfrog-xray-api```# Usage## Authentication```python# User and password OR API_KEYfrom xray import XrayRestClientxray_rest_client = XrayRestClient(    base_url=&quot;http://localhost:8082/xray&quot;,    username='USERNAME',    password='PASSWORD or API_KEY')```## SYSTEM### Create Bundle```pythonsystem = xray_rest_client.systemresponse = system.create_bundle(&quot;bundle-2023-001&quot;)print(response.json())```### Ping Request```pythonsystem = xray_rest_client.systemresponse = system.system.send_ping()print(response.json())```### Get Version```pythonsystem = xray_rest_client.systemresponse = system.get_version()print(response.json())```### Metrics```pythonsystem = xray_rest_client.systemresponse = system.get_metrics()print(response.json())```## Components### Find Component by Name```pythoncomponents = xray_rest_client.componentsresponse = components.find_component_by_name(&quot;jenkinsapi&quot;)print(response.json())```### Find Components by CVEs```pythoncomponents = xray_rest_client.componentscve_list = ['CVE-2021-4104']response = components.find_components_by_cves(cve_list)print(response.json())```### Find CVEs by Components```pythoncomponents = xray_rest_client.componentscomponents_id_list = ['gav://commons-collections:commons-collections:3.2.1', 'gav://commons-collections:commons-collections:3.2.2']response = components.find_cves_by_components(components_id_list)print(response.json())```### Get Component List Per Watch```python# TODO```### Get Artifact Dependency Graph```pythoncomponents = xray_rest_client.componentsartifact_path = '/Artifactory/pnnl/goss/goss-core-client/0.1.7/goss-core-client-0.1.7-sources.jar'response = components.get_artifact_dependency_graph(artifact_path)print(response.json())```### Compare Artifacts```pythoncomponents = xray_rest_client.componentssource_artifact_path = '/Artifactory/pnnl/goss/goss-core-client/0.1.7/goss-core-client-0.1.7-sources.jar'target_artifact_path = '/Artifactory/pnnl/goss/goss-core-client/0.1.8/goss-core-client-0.1.8-sources.jar'response = components.compare_artifacts(source_artifact_path, target_artifact_path)print(response.json())```### Get Build Dependency Graph```pythoncomponents = xray_rest_client.componentsartifactory_instance = &quot;myInstance&quot;,build_name = &quot;someBuild&quot;,build_number = &quot;someNumber&quot;response = components.get_build_dependency_graph(artifactory_instance, build_name, build_number)print(response.json())```### Compare Builds```pythoncomponents = xray_rest_client.componentsresponse = components.compare_builds(    &quot;my-instance&quot;, &quot;someOriginBuild&quot;, &quot;111&quot;,    &quot;my-instance&quot;, &quot;someTargetBuild&quot;, &quot;222&quot;,)print(response.json())```### Export Component Details```python# TODO```## SUMMARY### Build Summary```pythonsummary = xray_rest_client.summaryresponse = summary.get_build_summary(&quot;build_name&quot;, &quot;123&quot;)print(response.json())```### Artifact Summary```pythonsummary = xray_rest_client.summaryresponse = summary.get_artifact_summary(paths=[&quot;/Artifactory/pnnl/goss/goss-core-client/0.1.7/goss-core-client-0.1.7-sources.jar&quot;])print(response.json())```## Issues### Create Issue Event```pythonfrom xray.common import PackageTypeissues = xray_rest_client.issuesresponse = issues.create_issue_event(    issue_id='test-2023-0221',    summary='test-2023-0221',    description='test-2023-0221',    package_type=PackageType.MAVEN.value,    component_id='com.test:test',    vulnerable_versions=[&quot;[1.0.10.2,)&quot;],)print(response.json())```### Update Issue Event```pythonfrom xray.common import PackageTypeissues = xray_rest_client.issuesresponse = issues.update_issue_event(    issue_id='test-2023-0221',    summary='test-2023-0221',    description='test-2023-0221 update',    package_type=PackageType.MAVEN.value,    component_id='com.test:test',    vulnerable_versions=[&quot;[1.0.10.2,)&quot;],)print(response.content)```### Get Issue Event```pythonissues = xray_rest_client.issues# get issue event v1# Note: This API is deprecated in Xray version 3.51.0response = issues.get_issue_event(&quot;test-2023-0221&quot;)# get issue event v2# Since: Xray  3.51.0response = issues.get_issue_event(&quot;test-2023-0221&quot;, api_version=&quot;v2&quot;)print(response.json())```## SCANNING### Scan Artifact```pythonscanning = xray_rest_client.scanningresponse = scanning.scan_artifact(&quot;docker://image_name:image_tag&quot;)print(response.json())```### Scan Build```pythonscanning = xray_rest_client.scanning# scan build v1response = scanning.scan_build(&quot;build_name&quot;, &quot;build_number&quot;)# scan build v2# Starting from Xray version 3.42.3response = scanning.scan_build(&quot;build_name&quot;, &quot;build_number&quot;, api_version='v2')print(response.json())```### Scan Status```pythonfrom xray.common import PackageTypescanning = xray_rest_client.scanning# get scan status for artifactresponse = scanning.get_scan_status_for_artifact(    PackageType.NPM.value,    'npm-local/static-module-3.0.4.tar.gz',    'b0a887f6e5c16134b7d1280c2150d38811357642d56c622c6f7f6b239f668608')print(response.json())# get scan status for buildscanning = xray_rest_client.scanningresponse = scanning.get_scan_status_for_build(&quot;test-build&quot;, &quot;1&quot;)print(response.json())# get scan status for build with projectscanning = xray_rest_client.scanningresponse = scanning.get_scan_status_for_build(&quot;test-build&quot;, &quot;1&quot;, project=&quot;proj1&quot;)print(response.json())```### Scan Now```pythonfrom xray.common import PackageTypescanning = xray_rest_client.scanning# scan nowresponse = scanning.scan_now(&quot;local-maven-repo/org/jenkins-ci/main/jenkins-war/2.289.1/jenkins-war-2.289.1.war&quot;)print(response.json())```</longdescription>
</pkgmetadata>