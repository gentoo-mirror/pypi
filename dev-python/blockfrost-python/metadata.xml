<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Package Test](https://img.shields.io/github/actions/workflow/status/blockfrost/blockfrost-python/package-test.yml?logo=GitHub&amp;label=package%20test)](https://github.com/blockfrost/blockfrost-python/actions/workflows/package-test.yml)[![PyPI Latest Release](https://img.shields.io/pypi/v/blockfrost-python.svg?logo=pypi&amp;label=pypi%20latest)](https://pypi.org/project/blockfrost-python/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/blockfrost-python?logo=pypi&amp;label=pypi%20downloads)](https://pypistats.org/packages/blockfrost-python)[![Package Status](https://img.shields.io/pypi/status/blockfrost-python.svg)](https://pypi.org/project/blockfrost-python/)[![License](https://img.shields.io/pypi/l/blockfrost-python.svg)](https://github.com/blockfrost/blockfrost-python/blob/master/LICENSE)[![Made by Five Binaries](https://img.shields.io/badge/made%20by-Five%20Binaries-darkviolet.svg)](https://fivebinaries.com/)[![Maintained by Mathias Frohlich](https://img.shields.io/badge/maintained%20by-Mathias%20Frohlich-blue.svg)](https://github.com/mathiasfrohlich)&lt;img src=&quot;https://blockfrost.io/images/logo.svg&quot; width=&quot;250&quot; align=&quot;right&quot; height=&quot;90&quot;&gt;# blockfrost-python&lt;br/&gt;&lt;p align=&quot;center&quot;&gt;A Python SDK for Blockfrost.io API.&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;#getting-started&quot;&gt;Getting started&lt;/a&gt; •  &lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt; •  &lt;a href=&quot;#usage&quot;&gt;Usage&lt;/a&gt;&lt;/p&gt;&lt;br&gt;## Getting startedTo use this SDK, you first need login into to [blockfrost.io](https://blockfrost.io) create your project to retrieveyour API key.&lt;img src=&quot;https://i.imgur.com/smY12ro.png&quot;&gt;&lt;br/&gt;## Installation[![PyPI Latest Release](https://img.shields.io/pypi/v/blockfrost-python.svg)](https://pypi.org/project/blockfrost-python/)```console$ pip install blockfrost-python```&lt;br/&gt;## UsageUsing the SDK is pretty straight-forward as you can see from the following examples.### Cardano```pythonfrom blockfrost import BlockFrostApi, ApiError, ApiUrlsapi = BlockFrostApi(    project_id='YOUR API KEY HERE',  # or export environment variable BLOCKFROST_PROJECT_ID    # optional: pass base_url or export BLOCKFROST_API_URL to use testnet, defaults to ApiUrls.mainnet.value    base_url=ApiUrls.testnet.value,)try:    health = api.health()    print(health)   # prints object:    HealthResponse(is_healthy=True)    health = api.health(return_type='json') # Can be useful if python wrapper is behind api version    print(health)   # prints json:      {&quot;is_healthy&quot;:True}    health = api.health(return_type='pandas')    print(health)   # prints Dataframe:         is_healthy                    #                       0         True    account_rewards = api.account_rewards(        stake_address='stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7',        count=20,    )    print(account_rewards[0].epoch)  # prints 221    print(len(account_rewards))  # prints 20    account_rewards = api.account_rewards(        stake_address='stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7',        count=20,        gather_pages=True, # will collect all pages    )    print(account_rewards[0].epoch)  # prints 221    print(len(account_rewards))  # prints 57    address = api.address(        address='addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz')    print(address.type)  # prints 'shelley'    for amount in address.amount:        print(amount.unit)  # prints 'lovelace'except ApiError as e:    print(e)```### IPFS```pythonfrom blockfrost import BlockFrostIPFS, ApiErroripfs = BlockFrostIPFS(    project_id='YOUR API KEY HERE'  # or export environment variable BLOCKFROST_PROJECT_ID)file_hash = Nonetry:    ipfs_object = ipfs.add('./README.md')    file_hash = ipfs_object.ipfs_hash    print(file_hash)except ApiError as e:    print(e)try:    with open('./README_downloaded.md', 'w') as file:        file_data = ipfs.gateway(IPFS_path=file_hash).text        file.write(file_data)except ApiError as e:    print(e)```### Verifying Secure Webhook signatureWebhooks enable Blockfrost to push real-time notifications to your application. In order to prevent malicious actor from pretending to be Blockfrost every webhook request is signed. The signature is included in a request's `Blockfrost-Signature` header. This allows you to verify that the events were sent by Blockfrost, not by a third party.To learn more about Secure Webhooks, see [Secure Webhooks Docs](https://blockfrost.dev/docs/start-building/webhooks/).You can verify the signature using `verifyWebhookSignature` function.Example:```python# Example of Python Flask app with /webhook endpoint# for processing events sent by Blockfrost Secure Webhooksfrom flask import Flask, request, jsonfrom blockfrost import verify_webhook_signature, SignatureVerificationErrorSECRET_AUTH_TOKEN = &quot;SECRET-WEBHOOK-AUTH-TOKEN&quot;app = Flask(__name__)@app.route('/webhook', methods=['POST'])def webhook():    if request.method == 'POST':        # Validate webhook signature        request_bytes = request.get_data()        try:            verify_webhook_signature(                request_bytes, request.headers['Blockfrost-Signature'], SECRET_AUTH_TOKEN)        except SignatureVerificationError as e:            # for easier debugging you can access passed header and request_body values (e.header, e.request_body)            print('Webhook signature is invalid.', e)            return 'Invalid signature', 403        # Get the payload as JSON        event = request.json        print('Received request id {}, webhook_id: {}'.format(            event['id'], event['webhook_id']))        if event['type'] == &quot;block&quot;:            # process Block event            print('Received block hash {}'.format(event['payload']['hash']))        elif event['type'] == &quot;...&quot;:            # truncated        else:            # Unexpected event type            print('Unexpected event type {}'.format(event['type']))        return 'Webhook received', 200    else:        return 'POST Method not supported', 405if __name__ == &quot;__main__&quot;:    app.run(host='0.0.0.0', port=6666)```</longdescription>
</pkgmetadata>