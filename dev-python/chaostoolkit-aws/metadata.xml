<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># [Chaos Toolkit Extension for AWS](https://docs.chaostoolkit.org/drivers/aws/)[![Build Status](https://github.com/chaostoolkit-incubator/chaostoolkit-aws/actions/workflows/build-and-test.yaml/badge.svg)](https://github.com/chaostoolkit-incubator/chaostoolkit-aws/actions/workflows/build-and-test.yaml)[![Python versions](https://img.shields.io/pypi/pyversions/chaostoolkit-aws.svg)](https://www.python.org/)This project is a collection of [actions][] and [probes][], gathered as anextension to the [Chaos Toolkit][chaostoolkit].[actions]: http://chaostoolkit.org/reference/api/experiment/#action[probes]: http://chaostoolkit.org/reference/api/experiment/#probe[chaostoolkit]: http://chaostoolkit.org## InstallThis package requires Python 3.6+To be used from your experiment, this package must be installed in the Pythonenvironment where [chaostoolkit][] already lives.```$ pip install -U chaostoolkit-aws```## UsageTo use the probes and actions from this package, add the following to yourexperiment file:```json{    &quot;name&quot;: &quot;stop-an-ec2-instance&quot;,    &quot;provider&quot;: {        &quot;type&quot;: &quot;python&quot;,        &quot;module&quot;: &quot;chaosaws.ec2.actions&quot;,        &quot;func&quot;: &quot;stop_instance&quot;,        &quot;arguments&quot;: {            &quot;instance_id&quot;: &quot;i-123456&quot;        }    }},{    &quot;name&quot;: &quot;create-a-new-policy&quot;,    &quot;provider&quot;: {        &quot;type&quot;: &quot;python&quot;,        &quot;module&quot;: &quot;chaosaws.iam.actions&quot;,        &quot;func&quot;: &quot;create_policy&quot;,        &quot;arguments&quot;: {            &quot;name&quot;: &quot;mypolicy&quot;,            &quot;path&quot;: &quot;user/Jane&quot;,            &quot;policy&quot;: {                &quot;Version&quot;: &quot;2012-10-17&quot;,                &quot;Statement&quot;: [                    {                        &quot;Effect&quot;: &quot;Allow&quot;,                        &quot;Action&quot;: [                            &quot;s3:ListAllMyBuckets&quot;,                            &quot;s3:GetBucketLocation&quot;                        ],                        &quot;Resource&quot;: &quot;arn:aws:s3:::*&quot;                    }                ]            }        }    }}```Or select one at random from an AZ:```json{    &quot;name&quot;: &quot;stop-an-ec2-instance-in-az-at-random&quot;,    &quot;provider&quot;: {        &quot;type&quot;: &quot;python&quot;,        &quot;module&quot;: &quot;chaosaws.ec2.actions&quot;,        &quot;func&quot;: &quot;stop_instance&quot;,        &quot;arguments&quot;: {            &quot;az&quot;: &quot;us-west-1&quot;        }    }}```That's it!Please explore the code to see existing probes and actions.## Configuration### CredentialsThis extension uses the [boto3][] library under the hood. This library expectsthat you have properly [configured][creds] your environment to connect andauthenticate with the AWS services.[boto3]: https://boto3.readthedocs.io[creds]: https://boto3.readthedocs.io/en/latest/guide/configuration.html#### Use default profile from `~/.aws/credentials` or `~/.aws/config`This is the most basic case, assuming your `default` profile is properly[configured][default] in `~/.aws/credentials` (or `~/.aws/config`),then you do not need to pass any specific credentials to the experiment.[default]: https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html#shared-credentials-file#### Use a non-default profile from `~/.aws/credentials` or `~/.aws/config`Assuming you have configure a profile in your `~/.aws/credentials`(or `~/.aws/config`) file, you may declare it in your experiment as follows:```json{    &quot;configuration&quot;: {        &quot;aws_profile_name&quot;: &quot;dev&quot;    }}```Your `~/.aws/credentials` should look like this:```[dev]aws_access_key_id = XYZaws_secret_access_key = UIOPIY```Or, your `~/.aws/config` should look like this:```[profile dev]output = jsonaws_access_key_id = XYZaws_secret_access_key = UIOPIY```#### Assume an ARN role from a non-default profileAssuming you have configure a profile in your `~/.aws/config` file witha specific [ARN role][role] you want to assume during the run:[role]: https://boto3.readthedocs.io/en/latest/guide/configuration.html#aws-config-file```json{    &quot;configuration&quot;: {        &quot;aws_profile_name&quot;: &quot;dev&quot;    }}```Your `~/.aws/config` should look like this:```[default]output = json[profile dev]role_arn = arn:aws:iam::XXXXXXX:role/role-namesource_profile = default```#### Assume an ARN role from within the experimentYou mays also assume a role by declaring the role ARN in the experimentdirectly. In that case, the profile has no impact if you also set it.```json    &quot;configuration&quot;: {        &quot;aws_assume_role_arn&quot;: &quot;arn:aws:iam::XXXXXXX:role/role-name&quot;,        &quot;aws_assume_role_session_name&quot;: &quot;my-chaos&quot;    }```The `aws_assume_role_session_name` key is optional and will be set to`&quot;ChaosToolkit&quot;` when not provided.When this approach is used, the extension performs a [assume role][assumerole]call against the [AWS STS][sts] service to fetch credentials dynamically.[assumerole]: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html#STS.Client.assume_role[sts]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#### Pass credentials explicitelyYou can pass the credentials as a secret to the experiment definition asfollows:```json{    &quot;secrets&quot;: {        &quot;aws&quot;: {            &quot;aws_access_key_id&quot;: &quot;your key&quot;,            &quot;aws_secret_access_key&quot;: &quot;access key&quot;,            &quot;aws_session_token&quot;: &quot;token&quot;,        }    }}```Note that the token is optional.Then, use it as follows:```json{    &quot;name&quot;: &quot;stop-an-ec2-instance&quot;,    &quot;provider&quot;: {        &quot;type&quot;: &quot;python&quot;,        &quot;module&quot;: &quot;chaosaws.ec2.actions&quot;,        &quot;func&quot;: &quot;stop_instance&quot;,        &quot;secrets&quot;: [&quot;aws&quot;],        &quot;arguments&quot;: {            &quot;instance_id&quot;: &quot;i-123456&quot;        }    }}```[sources]: https://boto3.readthedocs.io/en/latest/guide/configuration.html#configuring-credentials### Setting the regionIn additon to the authentication credentials, you must configure the regionagainst which you want to use.You can either declare it at the top level of the experiment, add:```json{    &quot;configuration&quot;: {        &quot;aws_region&quot;: &quot;us-east-1&quot;    }}```or```json{    &quot;configuration&quot;: {        &quot;aws_region&quot;: {            &quot;type&quot;: &quot;env&quot;,            &quot;key&quot;: &quot;AWS_REGION&quot;        }    }}```But you can also simply set either `AWS_REGION` or `AWS_DEFAULT_REGION` inyour terminal session without declaring anything in the experiment.If none of these are set, your experiment will likely fail.## ContributeIf you wish to contribute more functions to this package, you are more thanwelcome to do so. Please, fork this project, write unit tests to cover the proposed changes,implement the changes, ensure they meet the formatting standards set out by `black`,`flake8`, and `isort`, and then raise a PR to the repository for review.Please refer to the [formatting](#formatting-and-linting) section for more informationon the formatting standards.The Chaos Toolkit projects require all contributors must sign a[Developer Certificate of Origin][dco] on each commit they would like to mergeinto the master branch of the repository. Please, make sure you can abide bythe rules of the DCO before submitting a PR.[dco]: https://github.com/probot/dco#how-it-works### DevelopIf you wish to develop on this project, make sure to install the developmentdependencies. But first, [create a virtual environment][venv] and then installthose dependencies.[venv]: http://chaostoolkit.org/reference/usage/install/#create-a-virtual-environment```console$ make install-dev```Now, you can edit the files and they will be automatically be seen by yourenvironment, even when running from the `chaos` command locally.### TestsTo run the tests for the project execute the following:```console$ make tests```### Formatting and LintingWe use a combination of [`black`][black], [`flake8`][flake8], and [`isort`][isort] to bothlint and format this repositories code.[black]: https://github.com/psf/black[flake8]: https://github.com/PyCQA/flake8[isort]: https://github.com/PyCQA/isortBefore raising a Pull Request, we recommend you run formatting against your code with:```console$ make format```This will automatically format any code that doesn't adhere to the formatting standards.As some things are not picked up by the formatting, we also recommend you run:```console$ make lint```To ensure that any unused import statements/strings that are too long, etc. are also picked up.### Add new AWS API SupportOnce you have setup your environment, you can start adding new[AWS API support][awsapi] by adding new actions, probes and entire sub-packagesfor those.[awsapi]: https://boto3.readthedocs.io/en/latest/reference/services/index.html#### Services supported by botoThis package relies on [boto3][] to wrap the API calls into a fluent PythonAPI. Some newer AWS services are not yet available in boto3, in that case,you should read the next section.[boto3]: https://boto3.readthedocs.io/en/latest/reference/services/index.htmlLet's say you want to support a new action in the EC2 sub-package.Start by creating a new function in `ec2/actions.py`:```pythonfrom chaoslib.types import Configuration, Secretsfrom chaosaws import aws_clientfrom chaosaws.types import AWSResponsedef reboot_instance(instance_id: str, dry_run: bool=False,                    configuration: Configuration=None,                    secrets: Secrets=None) -&gt; AWSResponse:    &quot;&quot;&quot;    Reboot a given EC2 instance.    &quot;&quot;&quot;    client = aws_client('ec2', configuration, secrets)    return client.reboot_instances(InstanceIds=[instance_id], DryRun=dry_run)```As you can see, the actual code is straightforward. You first create a[EC2 client][ec2client] and simply call the appropriate method on that clientwith the expected arguments. We return the action as-is so that it can belogged by the chaostoolkit, or even be used as part of a steady-statehypothesis probe (if this was a probe, not action that is).You could decide to make more than one AWS API call but, it is better to keepit simple so that composition is easier from the experiment. Nonetheless,you may also compose those directly into a single action as well for specificuse-cases.Please refer to the Chaos Toolkit documentation to learn more about the[configuration][] and [secrets][] objects.[ec2client]: https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#client[configuration]: http://chaostoolkit.org/reference/api/experiment/#configuration[secrets]: http://chaostoolkit.org/reference/api/experiment/#secretsOnce you have implemented that action, you must create at least one unit testfor it in the `tests/ec2/test_ec2_actions.py` test module. For example:```pythonfrom chaosaws.ec2.actions import reboot_instancex@patch('chaosaws.ec2.actions.aws_client', autospec=True)def test_reboot_instance(aws_client):    client = MagicMock()    aws_client.return_value = client    inst_id = &quot;i-1234567890abcdef0&quot;    response = reboot_instance(inst_id)    client.reboot_instances.assert_called_with(        InstanceIds=[inst_id], DryRun=False)```By using the [built-in Python module to mock objects][pymock], we can mock theEC2 client and assert that we do indeed call the appropriate method with the rightarguments. You are encouraged to write more than a single test for variousconditions.[pymock]: https://docs.python.org/3/library/unittest.mock.html#module-unittest.mockFinally, should you choose to add support for a new AWS API resource altogether,you should create the according sub-package.#### Services not supported by boto (new AWS features)If the support you want to provide is for a new AWS service that [boto][] doesnot support yet, this requires direct call to the API endpoint via the[requests][] package. Say we have a new service, not yet supported by boto3[eks]: https://aws.amazon.com/eks/[boto]: https://boto3.readthedocs.io/en/latest/index.html[requests]: http://docs.python-requests.org/en/master/```pythonfrom chaoslib.types import Configuration, Secretsfrom chaosaws import signed_api_callfrom chaosaws.types import AWSResponsedef terminate_worker_node(worker_node_id: str,                          configuration: Configuration=None,                          secrets: Secrets=None) -&gt; AWSResponse:    &quot;&quot;&quot;    Terminate a worker node.    &quot;&quot;&quot;    params = {        &quot;DryRun&quot;: True,        &quot;WorkerNodeId.1&quot;: worker_node_id    }    response = signed_api_call(        'some-new-service-name', path='/2018-01-01/worker/terminate',        method='POST', params=params,        configuration=configuration, secrets=secrets)    return response.json()```Here is an example on existing API call (as a more concrete snippet):```pythonfrom chaoslib.types import Configuration, Secretsfrom chaosaws import signed_api_calldef stop_instance(instance_id: str, configuration: Configuration=None,                  secrets: Secrets=None) -&gt; str:    response = signed_api_call(        'ec2',        configuration=configuration,        secrets=secrets,        params={            &quot;Action&quot;: &quot;StopInstances&quot;,            &quot;InstanceId.1&quot;: instance_id,            &quot;Version&quot;: &quot;2013-06-15&quot;        }    )    # this API returns XML, not JSON    return response.text```When using the `signed_api_call`, you are responsible for the right way ofpassing the parameters. Basically, look at the AWS documentation for eachAPI call.**WARNING:** It should be noted that, whenever boto3 implements an API, thispackage should be updated accordingly, as boto3 is much more versatile andsolid.#### Make your new sub-package discoverableFinally, if you have created a new sub-package entirely, you need to make itscapability discoverable by the chaos toolkit. Simply amend the `discover`function in the `chaosaws/__init__.py`. For example, assuming a new `eks`sub-package, with actions and probes:```python    activities.extend(discover_actions(&quot;chaosaws.eks.actions&quot;))    activities.extend(discover_probes(&quot;chaosaws.eks.probes&quot;))```</longdescription>
</pkgmetadata>