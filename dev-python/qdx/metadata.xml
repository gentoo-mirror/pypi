<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># QDX-py: Python SDK for the QDX APIThis package exposes a simple provider and CLI for the different tools exposed by the QDX GraphQL API.## Usage### As a library``` pythonimport jsonfrom pathlib import Pathimport qdxfrom  qdx.data import run_convert, QDXV1QCMol, QDXV1QCInputURL = &quot;url to the qdx api&quot;TOKEN = &quot;your qdx access token&quot;# get our client to talk with the APIclient = qdx.QDXProvider(url=URL,                          access_token=TOKEN)# path to protein pdb with correct charges and protonationprotein_pdb = Path(&quot;./examples/4w9f_prepared_protein.pdb&quot;)# path to ligand sdf with correct charges and protonationligand_sdf = Path(&quot;./examples/3JU_prepared.sdf&quot;)# convert pdb to qdxfprotein_qdxf = client.obabel_to_complex(file=protein_pdb, format=&quot;pdb&quot;)# convert ligand sdf to qdxfligand_qdxf = client.obabel_to_complex(file=ligand_sdf, format=&quot;sdf&quot;)# We need to treat the ligand as a single fragmentligand_qdxf[&quot;topology&quot;][&quot;fragments&quot;] = [[ x for x, _ in enumerate(ligand_qdxf[&quot;topology&quot;][&quot;symbols&quot;])]]ligand_qdxf[&quot;topology&quot;][&quot;fragment_charges&quot;] = [0]# We also need to drop connectivity information (temporary)ligand_qdxf[&quot;topology&quot;][&quot;connectivity&quot;] = []# fragment proteinfragged_protein = client.fragment_complex(protein_qdxf, backbone_steps=5)# combine fragmented protein and ligand into a single complexcomplex = client.combine_complexes(fragged_protein, ligand_qdxf)# create a qdx/hermes input file for complexqdx_input = qdx.data.run_convert(json.dumps(complex), &quot;qdxcomplex2qdxv1&quot;)# Configure input for lattice calculationqdx_input.model.fragmentation = Trueqdx_input.keywords.frag.lattice_energy_calc = True# The reference monomer should be the final fragment,# as that will be the ligandqdx_input.keywords.frag.reference_monomer = len(    qdx_input.molecule.fragments) - 1qdx_input.keywords.frag.monomer_cutoff = 20qdx_input.keywords.frag.dimer_cutoff = 10qdx_input.model.method = &quot;RIMP2&quot;# Start hermes calculation - # remember to set tags that reference your systemproc = client.start_quantum_energy_calculation(    qdx_input, tags=[&quot;rimp2&quot;, &quot;4w9f&quot;, &quot;3ju&quot;, &quot;manual_prep&quot;, &quot;debug_charges&quot;])# Fetch results - you will have to run this multiple times until# the calculation is doneresult = client.get_proc(proc)```### As a CLI``` sh# All cli calls have these standard arguments, referred to as … in future examplesqdx --url QDX_API_URL --access-token QDX_ACCESS_TOKEN# Post a hermes job, returning a task id… --post-quantum-energy &lt; ./path_to_qdxv1_input.json# Retrieve the hermes job, or its progress… --get-proc TASK_ID## Other functions# Return a qdx complex json object and save it as complex.json… --pdb-to-complex PATH_TO_PDB_FILE &gt; complex.json# Prepare a protein for quauntum energy calculation… --prepare-protein simulation --poll &lt; ./complex.json &gt; prepped_protein_complex.json# Fragment a qdx complex json object… --fragment-complex [MIN_STEPS_ALONG_PROTEIN_BACKBONE_BEFORE_CUTTING_AT_C-C_BOND] &lt; prepped_protein_complex.json &gt; fragmented_protein_complex.json# Prepare a ligand for quauntum energy calculation… --prepare-ligand simulation --poll &lt; ./path_to_ligand.sdf &gt; prepped_ligand_complex.json# Combine protein and ligand complexes for simulation… --combine-complexes ./prepped_protein_complex.json &lt; ./prepped_ligand_complex.sdf &gt; protein_ligand_complex.json# Convert a qdx complex into a qdx input file… --convert ./protein_ligand_complex.json --direction qdxcomplex2qdxv1 &gt; qdx_input.json# Convert a qdx complex into a exess input file… --convert ./protein_ligand_complex.json --direction qdxcomplex2exess &gt; exess_input.json# Convert a qdx input file into an exess input file… --convert qdx_input.json --direction qdxv12exess &gt; exess_input.json```</longdescription>
</pkgmetadata>