<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Welcome to Fabsetup!**Set up and maintain configurations, software installations and otherthings on a local or remote linux system.**Source: &lt;https://github.com/theno/fabsetup&gt;Documentation: &lt;https://fabsetup.readthedocs.io&gt;Features:* Fabsetup's **tasks** do the things:  * tasks execute commands commented and comprehensible  * tasks produce output formatted in Markdown or HTML  * run a task local or on a remote host* **Addons**:  * only install the tasks you need  * create Your own addon with Your task* The Command **`fabsetup`**, based on [Fabric](https://www.fabfile.org/),  is a pimped [`fab` command](  https://docs.fabfile.org/en/latest/getting-started.html#addendum-the-fab-command-line-tool)  with the same [options and  arguments](https://docs.fabfile.org/en/latest/cli.html). And some more:  * Control markdown formatted output:    * `--hide-code-block`    * `--hide-command-line`    * `--hide-command-output`    * `--hide-docstring`    * `--hide-header`    * `--hide-print`    * `--unnumbered`    * `--pandoc-add-toc`  * Write output to file:    * `--outfile`    * `--pandoc-html-file`  * Control ANSI color codes:    * `--color-off`    * `--color-keep`  * Control execution of commands:    * `--interactive`  * Load fabfiles and invoke tasks:    * `--load-fab`    * `--load-inv`  * Show effective config:    * `--show-config`  * List known Fabsetup addons:    * `--known-addons`* **API**:  * for Your own Fabsetup addon  * use Fabsetup in Your own [Fabric tasks](    https://docs.fabfile.org/en/2.5/api/tasks.html#fabric.tasks.task)    and [Invoke tasks](    http://docs.pyinvoke.org/en/latest/getting-started.html#defining-and-running-task-functions)## InstallationInstall fabsetup the same way like[fabric](https://www.fabfile.org/installing.html), best via[pip](https://pip.pypa.io/):```shpip install fabsetup```## UsageRun task `info`:```shfabsetup info```Important options:```sh# Show versionsfabsetup --version# Helpfabsetup -h# List tasksfabsetup -l# Show task helpfabsetup info --helpfabsetup new --help```## Tab CompletionInvokes [shell tab completion](https://docs.pyinvoke.org/en/stable/invoke.html#tab-completion) also workswith fabsetup:```shfabsetup -h | grep -A1 &quot;completion&quot;```Apply this simple setup of tab completion in bash:```shecho 'source &lt;(fabsetup --print-completion-script bash)' &gt;&gt; ~/.bashrcsource ~/.bashrc```Now You are able to &quot;tab&quot; through the available fabsetup tasks and options:```shfabsetup --h&lt;TAB&gt;&lt;TAB&gt;  -&gt;  --help  --hide  --hostsfabsetup --he&lt;TAB&gt;      -&gt;  fabsetup --helpfabsetup --help i&lt;TAB&gt;  -&gt;  fabsetup --help info```More features:[Advanced Usage](https://fabsetup.readthedocs.io/en/latest/advanced-usage.html)## AddonsFabsetup itself only comes with two tasks, `info` and `new`.  The tasksthat &quot;really do things&quot; reside in separate fabsetup addons.They will be installed the same way like fabsetup and fabric, best via pip.For example:```shpip install fabsetup-theno-termdown```Now You are able to run the task `theno.termdown`.  This task sets up[termdown](https://github.com/trehn/termdown), locally or on a remotehost:```sh# localfabsetup theno.termdown# remotefabsetup -H user@host theno.termdown```More infos:[Fabsetup Addons](https://fabsetup.readthedocs.io/en/latest/addons.html)## Your AddonCreate Your own fabsetup addon doing great things! Start now:```shfabsetup new```More infos:[Create a Fabsetup Addon](https://fabsetup.readthedocs.io/en/latest/create-addon.html)</longdescription>
</pkgmetadata>