<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># clld-morphology-pluginA plugin for modelling morphology in CLLD apps.[![Versions](https://img.shields.io/pypi/pyversions/clld_morphology_plugin)](https://www.python.org/)[![PyPI](https://img.shields.io/pypi/v/clld_morphology_plugin.svg)](https://pypi.org/project/clld_morphology_plugin)[![License](https://img.shields.io/github/license/fmatter/clld-morphology-plugin)](https://www.apache.org/licenses/LICENSE-2.0)## ModelsThe [models](/src/clld_morphology_plugin/models.py) largely reflect the structure of the morphological components of the [cldf-ldd](https://github.com/fmatter/cldf-ldd) collection.The basic mechanism of segmentation is implemented such that `Wordform`s and `Stem`s have a list column `parts` containing the segmentation.These parts are referenced via indices by `WordformPart`s, `StemPart`s, and `WordformStem`s, so these entities &quot;know&quot; their constituents.X`Parts` can in turn be referenced by `Inflection`s, meaning that `InflectionalValue`s (which belong to `InflectionalCategorie`s) are associated with part of a wordform.Wordform structure and inflectional information is rendered as follows:&lt;img src=&quot;https://user-images.githubusercontent.com/2378389/221690084-36690385-7f9d-4bd6-99ac-d87c1964f06b.png&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;`Morpheme` detail view with `Morph`s, inflectional values, and wordforms/corpus tokens:&lt;img src=&quot;https://user-images.githubusercontent.com/2378389/221693305-6e97c3be-b0cc-455a-b435-fd9ac9ddf585.png&quot; width=&quot;30%&quot; height=&quot;30%&quot;&gt;If a `WordformPart` is not associated with a `Morph`, this is interpreted as zero marking (usually for inflection):&lt;img src=&quot;https://user-images.githubusercontent.com/2378389/221693358-7f8d3ffe-d008-4efe-a49c-b90c7de1e7dc.png&quot; width=&quot;60%&quot; height=&quot;60%&quot;&gt;Morphophonological change is modeled by `MorphoPhonoInstance`s connecting `MorphoPhonologicalChange`s with one or more of the following things: an `Inflection`, a `WordformPart`, or a `StemPart`:&lt;img src=&quot;https://user-images.githubusercontent.com/2378389/221693377-b45ae02b-45b0-4480-9b10-7b271cdb56cc.png&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;Since `InflectionalValue`s are connected via `Inflection`s to `WordformPart`s, their exponents can be easily visualized:&lt;img src=&quot;https://user-images.githubusercontent.com/2378389/221693413-3d95b17c-b67b-434d-8db3-68e9ffe99a4b.png&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;`Stems` can have a `Lexeme`, and `WordformPart`s + `Wordforms` + `InflectionalValue` + `InflectionalCategory` contain all the necessary information to automatically generate inflectional paradigms for lexemes:&lt;img src=&quot;https://user-images.githubusercontent.com/2378389/221693515-b0adcf48-f68a-4040-9f7e-47898bc73b38.png&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;`Derivation`s connect `Stems` with other `Stem`s (or `Morph`s, when derived from a root) and `DerivationalProcess`es.These derivational links can then be used to render the &quot;derivational lineage&quot; of a stem:&lt;img src=&quot;https://user-images.githubusercontent.com/2378389/221693470-9c811e78-8fef-45be-a648-fb73c6314dc7.png&quot; width=&quot;70%&quot; height=&quot;70%&quot;&gt;Detail views of stems also show all derived (directly or indirectly) stems:&lt;img src=&quot;https://user-images.githubusercontent.com/2378389/221693580-91e07656-3b0b-401c-b961-a5f5ca7dc1d0.png&quot; width=&quot;70%&quot; height=&quot;70%&quot;&gt;`DerivationalProcess`es know what stems they create (optionally using specific morphs):&lt;img src=&quot;https://user-images.githubusercontent.com/2378389/221693636-6f952768-ebda-4966-9b3b-10f5e0e8be8c.png&quot; width=&quot;60%&quot; height=&quot;60%&quot;&gt;## MarkdownSince this plugin is primarily being developed for an [interactive digital corpus-based grammar](https://github.com/fmatter/indicogram), comments on models are rendered using markdown.However, it is up to the app developer to choose what markdown you want to use; the templates here assume that the parent mako template provides a function `markdown(request, content)`.If you want to use the [clld-markdown-plugin](https://github.com/clld/clld-markdown-plugin/), use the following code in your top-level `.mako`:    &lt;%def name=&quot;markdown(request, content)&quot;&gt;        &lt;%from clld_markdown_plugin import markdown%&gt;        ${markdown(request, content)|n}    &lt;/%def&gt;to use plain markdown instead:    &lt;%def name=&quot;markdown(request, content)&quot;&gt;        &lt;%from markdown import Markdown%&gt;        ${Markdown(content)|n}    &lt;/%def&gt;</longdescription>
</pkgmetadata>