<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Junebug=======Junebug is an open-source server application providing SMS and USSDgateway connectivity for integrators, operators and applicationdevelopers.Junebug enables integrators to automate the setup, monitoring,logging, and health checking of population scale messagingintegrations.Junebug is a system for managing text messaging transports via aRESTful HTTP interface that supports:* Creating, introspecting, updating and deleting transports* Sending and receiving text messages* Receiving status updates on text messages sent* Monitoring transport health and performance* Retrieving recent transport logs for debugging transport issues.Design Principles-----------------Junebug aims to satisfy the following broad criteria:* Easy to install* Minimal useful feature set* Sane set of dependenciesDocumentation-------------Documentation is available online at http://junebug.readthedocs.org/and in the `docs` directory of the repository... |junebug-docs| image:: https://readthedocs.org/projects/junebug/badge/?version=latest    :alt: Documentation    :scale: 100%    :target: http://junebug.readthedocs.org/To build the docs locally::    $ virtualenv ve    $ source ve/bin/activate    (ve)$ pip install -e .-r requirements-docs.txt    (ve)$ cd docs    (ve)$ make htmlYou'll find the docs in `docs/_build/index.html`You can contact the Junebug development team in the following ways:* via *email* by joining the the `junebug@googlegroups.com`_ mailing list* on *irc* in *#junebug* on the `Freenode IRC network`_.. _junebug@googlegroups.com: https://groups.google.com/forum/?fromgroups#!forum/junebug.. _Freenode IRC network: https://webchat.freenode.net/?channels=#junebugIssues can be filed in the GitHub issue tracker. Please don't use the issuetracker for general support queries.Running tests-------------To run the tests locally::    $ virtualenv ve    $ source ve/bin/activate    (ve) pip install -e . -r requirements-dev.txt    (ve)$ trial junebugMaking releases---------------Releases are done according to git flow, and sticks to semantic versioning forselecting a new version number. You should ensure that the release notes indocs/release-notes.rst are up to date before doing a new release.To create a new release, make sure you're on the develop branch, and then usethe utils script to change the package version::    $ git checkout develop    $ ./utils/bump-version.sh 0.1.0Then, commit the changed files and tag that commit::    $ git commit -m &quot;Release 0.1.0&quot;    $ git tag junebug-0.1.0Then, push the changes to develop, and push the new tag. This will start atravis build, which when it passes, will create a new release to PyPI::    $ git push origin develop    $ git push origin junebug-0.1.0Then, you can merge and push this code to the master and relevant releasebranches::    $ git checkout master    $ git merge junebug-0.1.0    $ git push origin master    $ git checkout release/0.1.x    $ git merge junebug-0.1.0    $ git push origin release/0.1.xDeveloping on Junebug---------------------For every python file in the junebug directory, there is a corresponding filein the junebug/tests directory, that contains the unit tests for that file.Any added fixes should have a relevant test added to ensure that any futurechanges cannot reintroduce the bug.Any added features should have relevant tests to ensure that the features workas intended.Each pull request should include any relevant changes to the documentation,including updating the release notes to include the changes made in the pullrequest.junebug.amqp~~~~~~~~~~~~This module is responsible for maintaining an AMQP connection, and sending anreceiving messages over that connection.junebug.api~~~~~~~~~~~This module is responsible for housing the logic of each of the HTTP APIendpoints. It uses `Klein`_, which is a web framework similar to `Flask`_, butruns on top of `Twisted`_ and supports returning deferreds, which allows us toperform async actions in our response generation, without blocking... _Klein: https://klein.readthedocs.io/en/latest/.. _Flask: http://flask.pocoo.org/.. _Twisted: https://twistedmatrix.com/trac/junebug.channel~~~~~~~~~~~~~~~This module contains our currently only implementation of a Junebug channel.This implementation is an in-memory implementation, where new channels arestarted as `Twisted`_ services.Other possible future implementations might include a process basedimplementation, where each channel is started as a new process, or a Mesosbased implementation, where each channel is started as a new container within acluster.Any new channel implementations would need to implement all public methods onthe Channel class.junebug.command_line~~~~~~~~~~~~~~~~~~~~This module contains all configuration, processing, and running of servicesrelated to starting Junebug using the command line interface.Any changes to the configuration options should also be made to the file-basedyaml configuration options, found in junebug/config.pyjunebug.config~~~~~~~~~~~~~~This module contains a `confmodel`_ class, which is used to validate the yamlfile that can be used to specify configuration options for Junebug.Any changes to the configuration options should also be made in the commandline arguments, found in junebug/command_line.py.. _confmodel: https://confmodel.readthedocs.io/en/latest/junebug.error~~~~~~~~~~~~~This module contains error classes that are shared between all Junebug modules.junebug.logging_service~~~~~~~~~~~~~~~~~~~~~~~This module contains the logging observer, which is used to observe logs fromspecific channels, and to write these logs to separate files, so that eachchannel can have its logs displayed separately.It also contains some utility methods to read these log files into a list ofobjects.junebug.plugin~~~~~~~~~~~~~~This module contains the base class for all Junebug plugins. It shows whatfunctions plugin implementors would need to implement.junebug.plugins.*~~~~~~~~~~~~~~~~~Each module in this package contains a junebug plugin that is built into thecore Junebug code base.junebug.service~~~~~~~~~~~~~~~This module houses the main Junebug twisted services, which runs the http API,and has all the transports as its children.junebug.stores~~~~~~~~~~~~~~This module houses all the different stores that we have. Currently they're allbacked by Redis, and store channel, message, and event related information.junebug.utils~~~~~~~~~~~~~This module houses utility functions that are used all over Junebug.junebug.validate~~~~~~~~~~~~~~~~This module contains some helper functions for defining validators that are useto validate requests coming into the HTTP API.junebug.workers~~~~~~~~~~~~~~~This module contains the Vumi workers that Junebug runs for each channel. Thisincludes things like the message forwarding worker, which forwards inboundmessages over AMQP and HTTP, and stores the messages and events in the variousstores, and the channel status worker, which stores and forwards channel statusupdates.</longdescription>
</pkgmetadata>