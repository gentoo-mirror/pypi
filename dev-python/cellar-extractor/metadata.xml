<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Cellar extractorThis library contains two functions to get cellar case law data from eurlex.## VersionPython 3.9## Contributors&lt;!-- readme: contributors,gijsvd -start --&gt;&lt;table&gt;&lt;tr&gt;    &lt;td align=&quot;center&quot;&gt;        &lt;a href=&quot;https://github.com/pranavnbapat&quot;&gt;            &lt;img src=&quot;https://avatars.githubusercontent.com/u/7271334?v=4&quot; width=&quot;100;&quot; alt=&quot;pranavnbapat&quot;/&gt;            &lt;br /&gt;            &lt;sub&gt;&lt;b&gt;Pranav Bapat&lt;/b&gt;&lt;/sub&gt;        &lt;/a&gt;    &lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;        &lt;a href=&quot;https://github.com/Cloud956&quot;&gt;            &lt;img src=&quot;https://avatars.githubusercontent.com/u/24865274?v=4&quot; width=&quot;100;&quot; alt=&quot;Cloud956&quot;/&gt;            &lt;br /&gt;            &lt;sub&gt;&lt;b&gt;Piotr Lewandowski&lt;/b&gt;&lt;/sub&gt;        &lt;/a&gt;    &lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;        &lt;a href=&quot;https://github.com/shashankmc&quot;&gt;            &lt;img src=&quot;https://avatars.githubusercontent.com/u/3445114?v=4&quot; width=&quot;100;&quot; alt=&quot;shashankmc&quot;/&gt;            &lt;br /&gt;            &lt;sub&gt;&lt;b&gt;shashankmc&lt;/b&gt;&lt;/sub&gt;        &lt;/a&gt;    &lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;        &lt;a href=&quot;https://github.com/gijsvd&quot;&gt;            &lt;img src=&quot;https://avatars.githubusercontent.com/u/31765316?v=4&quot; width=&quot;100;&quot; alt=&quot;gijsvd&quot;/&gt;            &lt;br /&gt;            &lt;sub&gt;&lt;b&gt;gijsvd&lt;/b&gt;&lt;/sub&gt;        &lt;/a&gt;    &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;!-- readme: contributors,gijsvd -end --&gt;## How to install?&lt;code&gt;pip install cellar-extractor&lt;/code&gt;## What are the functions?&lt;ol&gt;    &lt;li&gt;&lt;code&gt;get_cellar&lt;/code&gt;&lt;/li&gt;    Gets all the ECLI data from the eurlex sparql endpoint and saves them in the CSV or JSON format, in-memory or as a saved file.    &lt;br&gt;    &lt;li&gt;&lt;code&gt;get_cellar_extra&lt;/code&gt;&lt;/li&gt;    Gets all the ECLI data from the eurlex sparql endpoint, and on top of that scrapes the eurlex websites to acquire     the full text, keywords, case law directory code and eurovoc identifiers. If the user does have an eurlex account with access to the eurlex webservices, he can also     pass his webservices login credentials to the method, in order to extract data about works citing work and works     being cited by work. The full text is returned as a JSON file, rest of data as a CSV.  Can be in-memory or as saved files.    &lt;li&gt;&lt;code&gt;get_nodes_and_edges_lists&lt;/code&gt;&lt;/li&gt;    Gets 2 list objects, one for the nodes and edges of the citations within the passed dataframe.    Allows the creation of a network graph of the citations. Can only be returned in-memory.    &lt;br&gt;&lt;/ol&gt;## What are the parameters?&lt;ol&gt;    &lt;li&gt;&lt;code&gt;get_cellar&lt;/code&gt;&lt;/li&gt;    &lt;strong&gt;Parameters:&lt;/strong&gt;    &lt;ul&gt;        &lt;li&gt;&lt;strong&gt;max_ecli: int, optional, default 100&lt;/strong&gt;&lt;/li&gt;        Maximum number of ECLIs to retrieve.        &lt;li&gt;&lt;strong&gt;sd: date, optional, default '2022-05-01'&lt;/strong&gt;&lt;/li&gt;        The start last modification date (yyyy-mm-dd).        &lt;li&gt;&lt;strong&gt;ed: date, optional, default current date&lt;/strong&gt;&lt;/li&gt;        The end last modification date (yyyy-mm-dd).        &lt;li&gt;&lt;strong&gt;save_file: ['y', 'n'],optional, default 'y'&lt;/strong&gt;&lt;/li&gt;        Save data in a data folder, or return in-memory.        &lt;li&gt;&lt;strong&gt;file_format: ['csv', 'json'],optional, default 'csv'&lt;/strong&gt;&lt;/li&gt;        Returns the data as a JSON/dictionary, or as a CSV/Pandas Dataframe object.    &lt;/ul&gt;    &lt;li&gt;&lt;code&gt;get_cellar_extra&lt;/code&gt;&lt;/li&gt;    &lt;ul&gt;         &lt;li&gt;&lt;strong&gt;max_ecli: int, optional, default 100&lt;/strong&gt;&lt;/li&gt;        Maximum number of ECLIs to retrieve.        &lt;li&gt;&lt;strong&gt;sd: date, optional, default '2022-05-01'&lt;/strong&gt;&lt;/li&gt;        The start last modification date (yyyy-mm-dd).        &lt;li&gt;&lt;strong&gt;ed: date, optional, default current date&lt;/strong&gt;&lt;/li&gt;        The end last modification date (yyyy-mm-dd).        &lt;li&gt;&lt;strong&gt;save_file: ['y', 'n'],optional, default 'y'&lt;/strong&gt;&lt;/li&gt;        Save the full text of cases as JSON file / return as a dictionary and save the rest of        the data as a CSV file / return as a Pandas Dataframe object.        &lt;li&gt;&lt;strong&gt;threads: int ,optional, default 10&lt;/strong&gt;&lt;/li&gt;        Extracting the additional data takes a lot of time. The use of multi-threading can cut down this time.        Even with this, the method may take a couple of minutes for a couple of hundred cases. A maximum number        of 10 recommended, as this method may also affect the device's internet connection.        &lt;li&gt;&lt;strong&gt;username: string, optional, default empty string&lt;/strong&gt;&lt;/li&gt;        The username to the eurlex webservices.        &lt;li&gt;&lt;strong&gt;password: string, optional, default empty string&lt;/strong&gt;&lt;/li&gt;        The password to the eurlex webservices.        &lt;br&gt;    &lt;/ul&gt;    &lt;li&gt;&lt;code&gt;get_nodes_and_edges_lists&lt;/code&gt;&lt;/li&gt;    &lt;ul&gt;        &lt;li&gt;&lt;strong&gt;df: DataFrame object, required, default None&lt;/strong&gt;&lt;/li&gt;        DataFrame of cellar metadata acquired from the get_cellar_extra method with eurlex webservice credentials passed.        This method will only work on dataframes with citations data.    &lt;/ul&gt;&lt;/ol&gt;## Examples```import cellar_extractor as cellBelow are examples for in-file saving:cell.get_cellar(save_file='y', max_ecli=200, sd='2022-01-01', file_format='csv')cell.get_cellar_extra(max_ecli=100, sd='2022-01-01', threads=10)Below are examples for in-memory saving:df = cell.get_cellar(save_file='n', file_format='csv', sd='2022-01-01', max_ecli=1000)df,json = cell.get_cellar_extra(save_file='n', max_ecli=100, sd='2022-01-01', threads=10)```## License[![License: Apache 2.0](https://img.shields.io/github/license/maastrichtlawtech/extraction_libraries)](https://opensource.org/licenses/Apache-2.0)Previously under the [MIT License](https://opensource.org/licenses/MIT), as of 28/10/2022 this work is licensed under a [Apache License, Version 2.0](https://opensource.org/licenses/Apache-2.0).```Apache License, Version 2.0Copyright (c) 2022 Maastricht Law &amp; Tech LabLicensed under the Apache License, Version 2.0 (the &quot;License&quot;);you may not use this file except in compliance with the License.You may obtain a copy of the License at        http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.```</longdescription>
</pkgmetadata>