<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ASN.1 library for Python------------------------[![PyPI](https://img.shields.io/pypi/v/pysnmp-pyasn1.svg?maxAge=2592000)](https://pypi.org/project/pysnmp-pyasn1)[![Python Versions](https://img.shields.io/pypi/pyversions/pysnmp-pyasn1.svg)](https://pypi.org/project/pysnmp-pyasn1/)[![CI](https://github.com/pysnmp/pyasn1/actions/workflows/build-test-release.yml/badge.svg)](https://github.com/pysnmp/pyasn1/actions/workflows/build-test-release.yml)[![GitHub license](https://img.shields.io/badge/license-BSD-blue.svg)](https://raw.githubusercontent.com/pysnmp/pyasn1/master/LICENSE.txt)This is a free and open source implementation of ASN.1 types and codecsas a Python package. It has been first written to support particularprotocol (SNMP) but then generalized to be suitable for a wide rangeof protocols based on[ASN.1 specification](https://www.itu.int/rec/dologin_pub.asp?lang=e&amp;id=T-REC-X.208-198811-W!!PDF-E&amp;type=items).This project has been forked for ongoing maintenance and modernization.Features--------* Generic implementation of ASN.1 types (X.208)* Standards compliant BER/CER/DER codecs* Can operate on streams of serialized data* Dumps/loads ASN.1 structures from Python types* 100% Python, works with Python 2.7 and 3.5+* MT-safe* Contributed ASN.1 compiler [Asn1ate](https://github.com/kimgr/asn1ate)Why using pyasn1----------------ASN.1 solves the data serialisation problem. This solution wasdesigned long ago by the wise Ancients. Back then, they did nothave the luxury of wasting bits. That is why ASN.1 is designedto serialise data structures of unbounded complexity intosomething compact and efficient when it comes to processingthe data.That probably explains why many network protocols and file formatsstill rely on the 30+ years old technology. Including a number ofhigh-profile Internet protocols and file formats.Quite a number of books cover the topic of ASN.1. [Communication between heterogeneous systems](http://www.oss.com/asn1/dubuisson.html)by Olivier Dubuisson is one of those high quality books freely available on the Internet.The pyasn1 package is designed to help Python programmers tacklingnetwork protocols and file formats at the comfort of their Pythonprompt. The tool struggles to capture all aspects of a rathercomplicated ASN.1 system and to represent it on the Python terms.How to use pyasn1-----------------With pyasn1 you can build Python objects from ASN.1 data structures.For example, the following ASN.1 data structure:```bashRecord ::= SEQUENCE {  id        INTEGER,  room  [0] INTEGER OPTIONAL,  house [1] INTEGER DEFAULT 0}```Could be expressed in pyasn1 like this:```pythonclass Record(Sequence):    componentType = NamedTypes(        NamedType('id', Integer()),        OptionalNamedType(            'room', Integer().subtype(                implicitTag=Tag(tagClassContext, tagFormatSimple, 0)            )        ),        DefaultedNamedType(            'house', Integer(0).subtype(                implicitTag=Tag(tagClassContext, tagFormatSimple, 1)            )        )    )```It is in the spirit of ASN.1 to take abstract data description and turn it into a programming language specific form.Once you have your ASN.1 data structure expressed in Python, youcan use it along the lines of similar Python type (e.g. ASN.1`SET` is similar to Python `dict`, `SET OF` to `list`):```python&gt;&gt;&gt; record = Record()&gt;&gt;&gt; record['id'] = 123&gt;&gt;&gt; record['room'] = 321&gt;&gt;&gt; str(record)Record: id=123 room=321&gt;&gt;&gt;```Part of the power of ASN.1 comes from its serialisation features. Youcan serialise your data structure and send it over the network.```python&gt;&gt;&gt; from pyasn1.codec.der.encoder import encode&gt;&gt;&gt; substrate = encode(record)&gt;&gt;&gt; hexdump(substrate)00000: 30 07 02 01 7B 80 02 01 41```Conversely, you can turn serialised ASN.1 content, as received fromnetwork or read from a file, into a Python object which you canintrospect, modify, encode and send back.```python&gt;&gt;&gt; from pyasn1.codec.der.decoder import decode&gt;&gt;&gt; received_record, rest_of_substrate = decode(substrate, asn1Spec=Record())&gt;&gt;&gt;&gt;&gt;&gt; for field in received_record:&gt;&gt;&gt;    print('{} is {}'.format(field, received_record[field]))id is 123room is 321house is 0&gt;&gt;&gt;&gt;&gt;&gt; record == received_recordTrue&gt;&gt;&gt; received_record.update(room=123)&gt;&gt;&gt; substrate = encode(received_record)&gt;&gt;&gt; hexdump(substrate)00000: 30 06 02 01 7B 80 01 7B```The pyasn1 classes struggle to emulate their Python prototypes (e.g. int,list, dict etc.). But ASN.1 types exhibit more complicated behaviour.To make life easier for a Pythonista, they can turn their pyasn1classes into Python built-ins:```python&gt;&gt;&gt; from pyasn1.codec.native.encoder import encode&gt;&gt;&gt; encode(record){'id': 123, 'room': 321, 'house': 0}```Or vice-versa -- you can initialize an ASN.1 structure from a tree ofPython objects:```python&gt;&gt;&gt; from pyasn1.codec.native.decoder import decode&gt;&gt;&gt; record = decode({'id': 123, 'room': 321, 'house': 0}, asn1Spec=Record())&gt;&gt;&gt; str(record)Record: id=123 room=321&gt;&gt;&gt;```With ASN.1 design, serialisation codecs are decoupled from data objects,so you could turn every single ASN.1 object into many different serialised forms. As of this moment, pyasn1 supports BER, DER, CER andPython built-ins codecs. The extremely compact PER encoding is expectedto be introduced in the upcoming pyasn1 release.More information on pyasn1 APIs can be found in the[documentation](http://snmplabs.com/pysnmp/pyasn1/docs),compiled ASN.1 modules for different protocols and file formatscould be found in the pyasn1-modules [repo](https://github.com/pysnmp/pyasn1-modules).How to get pyasn1-----------------This project is forked from pyasn1. The pyasn1 package is distributed under termsand conditions of 2-clause BSD [license](http://snmplabs.com/pyasn1/license.html). Source code is freely available as a GitHub [repo](https://github.com/pysnmp/pyasn1).You could `pip install pysnmp-pyasn1` or download it from [PyPI](https://pypi.org/project/pysnmp-pyasn1).If something does not work as expected, [open an issue](https://github.com/pysnmp/pyasn1/issues) at GitHub orpost your question [on Stack Overflow](https://stackoverflow.com/questions/ask)or try browsing pyasn1 .Copyright (c) 2005-2020, [Ilya Etingof](mailto:etingof@gmail.com).All rights reserved.Copyright (c) 2021- [Splunk Inc.]</longdescription>
</pkgmetadata>