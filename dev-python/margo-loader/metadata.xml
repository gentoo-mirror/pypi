<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># margo-loader&gt; Import Jupyter Notebooks notebooks as Python modules## Video tutorial[Live Coding Demo: Using Jupyter Notebooks as Python Modules with Margo Loader](https://www.youtube.com/watch?v=6EgsAb56jY0).## Demo Notebooks* [Official tutorial (GitHub)](https://github.com/margo-notebooks/modular-notebook-tutorial) on using Margo loader to write Modular Jupyter notebooks. [Binder](https://mybinder.org/v2/gh/margo-notebooks/modular-notebook-tutorial/HEAD)* [Quick demo notebook (Google Colab)](https://colab.research.google.com/drive/1X1vuPRrj7SOpGl71wFCwFNgX40W18Kyl#scrollTo=WyrdS8A06eA6) in Google Colaboratory (no install needed).* [A more realistic suite of notebooks (GitHub)](https://github.com/jakekara/color-extraction-methodology) for background deletion and color extraction on William Blake prints, written for the Yale Digital Humanities Lab. [Binder](https://mybinder.org/v2/zenodo/10.5281/zenodo.7709475/)## InstallationTo install margo-loader, run:```bashpip install git+https://github.com/margo-notebooks/margo-loader-py```## Importing a notebookAssuming you have a file called &quot;notebook.ipynb&quot;:```pythonimport margo_loaderimport notebook```## ignore-cellNot every cell in a Notebook makes sense to include in its module representation.If you want to prevent a cell from being exported, start the cell with the specially-formatted comment line `# :: ignore-cell ::`, like this:```python# :: ignore-cell ::print(&quot;This code will not be executed when imported with margo-loader&quot;)```This special code comment is called a Margo note. Margo notes in Python cells begin with `# ::` to differentiate them from regular comments, and end with `::`.Learn more about the underlying Margo syntax [here](https://github.com/jakekara/nbdl/).An alias for `ignore-cell` is `skip`. So this does the same thing:```python# :: skip ::print(&quot;This code will not be executed when imported with margo-loader&quot;)``` ## Creating virtual submodulesYou can organize code cells into virtual submodules withina notebook. This in effect allows you to group cells from the same notebook.Here's an example of a few cells from the file`test_notebooks/greetings.ipynb` in this repo.```python# greetings.ipynb# :: submodule: &quot;grumpy&quot; ::def say_hello(to=&quot;world&quot;):    return f&quot;Oh, uhh, hi {to}...&quot;``````python# greetings.ipynb# :: submodule: &quot;nice&quot; ::def say_hello(to=&quot;world&quot;):  return f&quot;Hello, {to}! Nice to see you.&quot;```Notice we define the same `say_hello` function twice. If the entire notebookwere imported, the second `say_hello` would overwrite the first. However, we canimport either of these submodules or both using Python's standard import syntax once weimport `margo_loader`.```python&gt;&gt;&gt; import margo_loader&gt;&gt;&gt; from test_notebooks.greetings import nice, grumpy&gt;&gt;&gt; nice.say_hello()'Hello, world! Nice to see you.'&gt;&gt;&gt; grumpy.say_hello()'Oh, uhh, hi world...'&gt;&gt;&gt;```## Prevent a notebook from being importedTo prevent a notebook from being imported, use:```python# :: not-a-module ::```or ```python# :: do-not-import ::```These are currently aliases with the same behavior. If you try to import a notebook that contains a `do-not-import`/`not-a-module` declaration, it will raise an exception.## Skipping multiple cellsIf you want to ignore a lot of cells during import, you can use```python# :: module-stop ::```and```python# :: module-start :: ```to exclude blocks of cells.Any cell including and after a cell that contains `module-stop` will be excluded during import until a `module-start` cell is encountered.Conversely, any cell including and after a cell that contains `module-start` will be excluded during import until a `module-stop` is encountered.Note that you can also use `start` and `stop` instead of `module-start` and `module-stop`. These are aliases.You can use `module-stop` with no subsequent `module-start`. This will have the effect of ignoring all subsequent cells.## Working with percent-formatted notebooksThis library works with Jupyter Notebooks (.ipynb files) as well as python fileswith percent cell formatting using the file extension `.pynb`. These are plainsource Python files that use `# %%` to split the document into cells. [Read morehere](https://code.visualstudio.com/docs/python/jupyter-support-py).Look at `test_notebooks/hello_notebook_pynb.pynb` in this repo for an example ofa code-cell notebook.**STABILITY NOTE:** *This is an alpha feature. The .pynb extension may be changed in a future version*## Prior artThis project borrows its implementation approach from [a Jupyter Notebookdocumentationexample](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Importing%20Notebooks.html)that imports notebooks in their entirety as if they were `.py` files. The key difference Margo Loader adds is use of Margo notes to create preoprocessor directives  `ignore-cell` and `submodule`.</longdescription>
</pkgmetadata>