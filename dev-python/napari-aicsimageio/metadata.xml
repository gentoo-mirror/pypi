<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># napari-aicsimageio[![License](https://img.shields.io/pypi/l/napari-aicsimageio.svg?color=green)](https://github.com/AllenCellModeling/napari-aicsimageio/raw/main/LICENSE)[![Build Status](https://github.com/AllenCellModeling/napari-aicsimageio/workflows/Build%20Main/badge.svg)](https://github.com/AllenCellModeling/napari-aicsimageio/actions)[![Code Coverage](https://codecov.io/gh/AllenCellModeling/napari-aicsimageio/branch/main/graph/badge.svg)](https://codecov.io/gh/AllenCellModeling/napari-aicsimageio)AICSImageIO bindings for napari---## Features-   Supports reading metadata and imaging data for:    -   `OME-TIFF`    -   `TIFF`    -   `CZI` (Zeiss)    -   `LIF` (Leica)    -   `ND2` (Nikon)    -   `DV` (DeltaVision)    -   Any formats supported by [aicsimageio](https://github.com/AllenCellModeling/aicsimageio)    -   Any formats supported by [bioformats](https://github.com/tlambert03/bioformats_jar)        -   `SLD` (Slidebook)        -   `SVS` (Aperio)        -   [Full List](https://docs.openmicroscopy.org/bio-formats/6.5.1/supported-formats.html)    -   Any additional format supported by [imageio](https://github.com/imageio/imageio)        -   `PNG`        -   `JPG`        -   `GIF`        -   `AVI`        -   [Full List](https://imageio.readthedocs.io/en/v2.4.1/formats.html)_While upstream `aicsimageio` is released under BSD-3 license, this plugin is released under GPLv3 license because it installs all format reader dependencies._## Installation**Stable Release:** `pip install napari-aicsimageio` or `conda install napari-aicsimageio -c conda-forge`&lt;br&gt;**Development Head:** `pip install git+https://github.com/AllenCellModeling/napari-aicsimageio.git`### Reading Mode ThresholdThis image reading plugin will load the provided image directly into memory if it meetsthe following two conditions:1. The filesize is less than 4GB.2. The filesize is less than 30% of machine memory available.If either of these conditions isn't met, the image is loaded in chunks only as needed.### Use napari-aicsimageio as the Reader for All File FormatsIf you want to force napari to always use this plugin as the reader for all file formats,try running this snippet:```pythonfrom napari.settings import get_settingsget_settings().plugins.extension2reader = {'*': 'napari-aicsimageio', **get_settings().plugins.extension2reader}```For more details, see [#37](https://github.com/AllenCellModeling/napari-aicsimageio/issues/37).## Examples of Features#### General Image ReadingAll image file formats supported by[aicsimageio](https://github.com/AllenCellModeling/aicsimageio) will be read and allraw data will be available in the napari viewer.In addition, when reading an OME-TIFF, you can view all OME metadata directly in thenapari viewer thanks to `ome-types`.![screenshot of an OME-TIFF image view, multi-channel, z-stack, with metadata viewer](https://raw.githubusercontent.com/AllenCellModeling/napari-aicsimageio/main/images/ome-tiff-with-metadata-viewer.png)#### Multi-Scene SelectionWhen reading a multi-scene file, a widget will be added to the napari viewer to managescene selection (clearing the viewer each time you change scene or adding thescene content to the viewer) and a list of all scenes in the file.![gif of drag and drop file to scene selection and management](https://raw.githubusercontent.com/AllenCellModeling/napari-aicsimageio/main/images/scene-selection.gif)#### Access to the AICSImage Object and Metadata![napari viewer with console open showing `viewer.layers[0].metadata`](https://raw.githubusercontent.com/AllenCellModeling/napari-aicsimageio/main/images/console-access.png)You can access the `AICSImage` object used to load the image pixel data andimage metadata using the built-in napari console:```pythonimg = viewer.layers[0].metadata[&quot;aicsimage&quot;]img.dims.order  # TCZYXimg.channel_names  # [&quot;Bright&quot;, &quot;Struct&quot;, &quot;Nuc&quot;, &quot;Memb&quot;]img.get_image_dask_data(&quot;ZYX&quot;)  # dask.array.Array```The napari layer metadata dictionary also stores a shorthandfor the raw image metadata:```pythonviewer.layers[0].metadata[&quot;raw_image_metadata&quot;]```The metadata is returned in whichever format is used by the underlyingfile format reader, i.e. for CZI the raw metadata is returned asan `xml.etree.ElementTree.Element`, for OME-TIFF the raw metadata is returnedas an `OME` object from `ome-types`.Lastly, if the underlying file format reader has an OME metadata conversion function,you may additionally see a key in the napari layer metadata dictionarycalled `&quot;ome_types&quot;`. For example, because the AICSImageIO`CZIReader` and `BioformatsReader` both support converting raw image metadatato OME metadata, you will see an `&quot;ome_types&quot;` key that stores the metadata transformedinto the OME metadata model.```pythonviewer.layers[0].metadata[&quot;ome_types&quot;]  # OME object from ome-types```#### Mosaic ReadingWhen reading CZI or LIF images, if the image is a mosaic tiled image, `napari-aicsimageio`will return the reconstructed image:![screenshot of a reconstructed / restitched mosaic tile LIF](https://raw.githubusercontent.com/AllenCellModeling/napari-aicsimageio/main/images/tiled-lif.png)## DevelopmentSee [CONTRIBUTING.md](CONTRIBUTING.md) for information related to developing the code.For additional file format support, contributed directly to[AICSImageIO](https://github.com/AllenCellModeling/aicsimageio).New file format support will become directly available in thisplugin on new `aicsimageio` releases.## CitationIf you find `aicsimageio` _(or `napari-aicsimageio`)_ useful, please cite as:&gt; AICSImageIO Contributors (2021). AICSImageIO: Image Reading, Metadata Conversion, and Image Writing for Microscopy Images in Pure Python [Computer software]. GitHub. https://github.com/AllenCellModeling/aicsimageio_Free software: GPLv3_</longdescription>
</pkgmetadata>