<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Polywrap Plugin===============This package contains the runtime for the Polywrap plugin system.Quickstart----------Imports~~~~~~~&gt;&gt;&gt; from typing import Any, Dict, List, Union, Optional, cast&gt;&gt;&gt; from polywrap_manifest import AnyWrapManifest&gt;&gt;&gt; from polywrap_plugin import PluginModule&gt;&gt;&gt; from polywrap_core import InvokerClient, UriDefine a plugin module~~~~~~~~~~~~~~~~~~~~~~&gt;&gt;&gt; class GreetingModule(PluginModule[None]):...     def __init__(self, config: None):...         super().__init__(config)......     def greeting(self, args: Dict[str, Any], client: InvokerClient, env: Optional[Any] = None):...         return f&quot;Greetings from: {args['name']}&quot;Create a plugin wrapper~~~~~~~~~~~~~~~~~~~~~~~&gt;&gt;&gt; greeting_module = GreetingModule(None)&gt;&gt;&gt; manifest = cast(AnyWrapManifest, NotImplemented)&gt;&gt;&gt; wrapper = PluginWrapper(greeting_module, manifest)Invocation~~~~~~~~~~&gt;&gt;&gt; args = {...     &quot;name&quot;: &quot;Joe&quot;... }&gt;&gt;&gt; result = wrapper.invoke(...     uri=Uri.from_str(&quot;ens/greeting.eth&quot;),...     method=&quot;greeting&quot;,...     args=args,...     client=cast(InvokerClient, NotImplemented),... )&gt;&gt;&gt; assert result.result == &quot;Greetings from: Joe&quot;</longdescription>
</pkgmetadata>