<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[Markdown Checklists](https://github.com/tobiashochguertel/markdown-checklists)a [Python Markdown](http://pythonhosted.org/Markdown/) extension for lists oftasks with checkboxes inspured by [GitHub task lists](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments).Markdown-Checklists is forked from [Markdown Checklist](https://github.com/FND/markdown-checklist) and extended with addtional features.## Features* a dash can be used instead of an asterisk for list items* both upper- and lowercase &quot;x&quot; are accepted to activate checkboxes## Additional Features* MakeFile provides task to create for Sublime-Text 3 Plugin [OmniMarkupPreviewer](https://github.com/timonwong/OmniMarkupPreviewer) an Markdown-Renderer extension with additonal template files.* `class` attribute for `&lt;ul&gt;`-Tag for Checklists.* `class` attribute for `&lt;li&gt;`-Tag of Checklists.* Genearting key (hash) for each checkpoint text, using hash to make checklist check&quot;ed&quot; able.* `id` attribute for `&lt;input&gt;`-Tag of Checklists.* `for` attribute for `&lt;label&gt;`-Tag of Checklists.## Example HTML Output```h1&gt;Hello World&lt;/h1&gt;&lt;ul class=&quot;checklist&quot;&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; id=&quot;ca052d1d7e0a2f787f4ef9937840dcf91e647b08b208df4bbce2e78d527a4f8c&quot;&gt;&lt;label for=&quot;ca052d1d7e0a2f787f4ef9937840dcf91e647b08b208df4bbce2e78d527a4f8c&quot;&gt; foo&lt;/label&gt;&lt;/li&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; id=&quot;375719a43941c6a5e7f957c74b6f1d7e20cfefd0040181aaf6d3074c8eaac311&quot; checked&gt;&lt;label for=&quot;375719a43941c6a5e7f957c74b6f1d7e20cfefd0040181aaf6d3074c8eaac311&quot;&gt; bar&lt;/label&gt;&lt;/li&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; id=&quot;7d80d75283fdbf2a3d8a0e2eed45e9d844d1a7482372cd8bc59581725373c179&quot;&gt;&lt;label for=&quot;7d80d75283fdbf2a3d8a0e2eed45e9d844d1a7482372cd8bc59581725373c179&quot;&gt; baz&lt;/label&gt;&lt;/li&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt;&lt;/li&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;lorem ipsum&lt;/p&gt;```## Installation    $ pip install markdown-checklists### Markdown-Renderer Extension for OmniMarkupPreviewer*installs the extension to the current user.*    $ make OmniMarkupPreviewerInstall## Usage    import markdown    html = markdown.markdown(source, extensions=['markdown_checklists.extension'])or    import markdown    from markdown_checklists.extension import ChecklistsExtension    html = markdown.markdown(source, extensions=[ChecklistsExtension()])There is also a small JavaScript/jQuery library to make checkboxes interactive:    new Checklists(&quot;article&quot;, function(checkbox, callback) {        var uri = checkbox.closest(&quot;article&quot;).find(&quot;h1 a&quot;).attr(&quot;href&quot;);        jQuery.get(uri, callback);    }, function(markdown, checkbox, callback) {        var uri = checkbox.closest(&quot;article&quot;).find(&quot;h1 a&quot;).attr(&quot;href&quot;);        jQuery.ajax({            type: &quot;put&quot;,            uri: uri,            data: markdown,            success: callback        });    });See included `checklists.js` for details.</longdescription>
</pkgmetadata>