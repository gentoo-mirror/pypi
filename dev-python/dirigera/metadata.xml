<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dirigera Python Client![Test](https://github.com/Leggin/dirigera/actions/workflows/tests.yml/badge.svg)![Pypi](https://img.shields.io/pypi/v/dirigera)[![Downloads](https://static.pepy.tech/badge/dirigera/month)](https://pepy.tech/project/dirigera)![Downloads](https://img.shields.io/pypi/pyversions/dirigera)This repository provides an unofficial Python client for controlling the IKEA Dirigera Smart Home Hub. Current features:- [light control](#controlling-lights)- [outlet control](#controlling-outlets)- [blinds control](#controlling-blinds)- [remote controllers](#remote-controllers) (tested with STYRBAR)- [environment sensor](#environment-sensor) (tested with VINDSTYRKA)- [scene](#scene)- [event listener](#event-listener) for hub eventsSupport for other features will be added in the future and your input in form of issues and PRs is greatly appreciated.## Installation```bashpip install dirigera```## Quickstart1. Find out the ip-address of your Dirigera (check your router)2. Once you installed `dirigera` with pip you can run the included generate-token script. Here you can directly set the ip-address of you dirigera as parameter.   ```bash   generate-token &lt;Dirigera ip-address&gt;   ```3. The script starts the auth process. When prompted, you must push the action button on the bottom of your Dirigera.4. After that hit ENTER and your `token` will be printed to the console.     Example:   ```   Press the action button on Dirigera then hit ENTER ...   Your Token:   mgwB.aXqwpzV89N0aUwBhZMJjD8a.UBPyzy2InGtqgwo2MO5.xX4ug7.uBcVJquwYzLnAijF7SdYKvNxTo0uzQKahV10A-3ZQOz-UAubGP6sHWt1CJx3QmWZyE7ZcMZKgODXjSzWL1lumKgGz5dUIwFi3rhNxgK-IsBGeGVhNXPt8vGrYEcZePwPvNAIg8RqmlH27L-JZPnkAtP2wHoOdW72Djot3yJsohtEsb0p9mJvoZFSavTlTr4LDuf584vuH5fha5xoR9QhhIvvgbAP-s4EHFqENNi6vrYLHKR.sdqnv4sYw6UH-l6oiPnnRLxinoqBPOlWhlcL9doFviXQE.tZ9X8WVqyBrd0NYHlo9iorEvUbnZuD02BEJrg4NLwgh3rZtyF0Mi46HenynzBohbPn4RnuSYYCiHt5EZnWedxBtDqc7mSTm1ZtyD   ```5. Done. Use this token in the hub setup.   ```   dirigera.Hub(      token=&quot;mgwB.aXqwpzV89N0aUwBhZMJjD8a...&quot;,      ip_address=&quot;192.1...&quot;   )   ```## [Dirigera Hub](./src/dirigera/hub/hub.py)Setting up the client works by providing the token and ip address.```pythonimport dirigeradirigera_hub = dirigera.Hub(    token=&quot;mgwB.aXqwpzV89N0aUwBhZMJjD8a...&quot;,    ip_address=&quot;192.1...&quot;)```# [Devices](./src/dirigera/devices/device.py)All available devices (Light, Controller, Outlet, ...) consist of the core data defined in [device.py](./src/dirigera/devices/device.py):### Core Device Data```pythonid: strtype: strdevice_type: strcreated_at: datetime.datetimeis_reachable: boollast_seen: datetime.datetimeattributes: Attributescapabilities: Capabilitiesroom: Roomdevice_set: Listremote_links: List[str]is_hidden: Optional[bool] = None```### AttributesAll devices have attributes. Some devices have special attributes (for example Light has `is_on``). These are the core attributes each device has:```pythoncustom_name: strmodel: strmanufacturer: strfirmware_version: strhardware_version: strserial_number: Optional[str] = Noneproduct_code: Optional[str] = Noneota_status: Optional[str] = Noneota_state: Optional[str] = Noneota_progress: Optional[int] = Noneota_policy: Optional[str] = Noneota_schedule_start: Optional[datetime.time] = Noneota_schedule_end: Optional[datetime.time] = None```### CapabilitiesAll devices have capabilities (for some it is just empty lists). Capabilities desrcibe what send/receive actions can be performed:```pythoncan_send: List[str]can_receive: List[str]```All devices have a room with the corresponging infos.### Room```pythonid: strname: strcolor: stricon: str```## [Controlling Lights](./src/dirigera/devices/light.py)To get information about the available lights, you can use the `get_lights()` method:```pythonlights = dirigera_hub.get_lights()```The light object has the following attributes (additional to the core attributes):```pythonstartup_on_off: Optional[StartupEnum] = None # Optional attributes are not present on all lightsis_on: boollight_level: Optional[int] = Nonecolor_temperature: Optional[int] = Nonecolor_temperature_min: Optional[int] = Nonecolor_temperature_max: Optional[int] = Nonecolor_hue: Optional[int] = Nonecolor_saturation: Optional[float] = None```Available methods for light are:```pythonlight.set_name(name=&quot;kitchen light 1&quot;)light.set_light(lamp_on=True)light.set_light_level(light_level=90)light.set_color_temperature(color_temp=3000)light.set_light_color(hue=128, saturation=0.5)light.set_startup_behaviour(behaviour=StartupEnum.START_OFF)```## [Controlling Outlets](./src/dirigera/devices/outlet.py)To get information about the available outlets, you can use the `get_outlets()` method:```pythonoutlets = dirigera_hub.get_outlets()```The outlet object has the following attributes (additional to the core attributes):```pythonis_on: boolstartup_on_off: Optional[StartupEnum]```Available methods for outlet are:```pythonoutlet.set_name(name=&quot;kitchen socket 1&quot;)outlet.set_on(outlet_on=True)outlet.set_startup_behaviour(behaviour=StartupEnum.START_OFF)```## [Controlling Blinds](./src/dirigera/devices/blinds.py)To get information about the available blinds, you can use the `get_blinds()` method:```pythonblinds = dirigera_hub.get_blinds()```The blind object has the following attributes (additional to the core attributes):```pythonblinds_current_level: Optional[int] = Noneblinds_target_level: Optional[int] = Noneblinds_state: Optional[str] = None```Available methods for blinds are:```pythonblind.set_name(name=&quot;kitchen blind 1&quot;)blind.set_target_level(target_level=90)```## [Remote Controllers](./src/dirigera/devices/controller.py)Currently only tested with the STYRBAR remote.To get information about the available controllers, you can use the `get_controllers()` method:```pythoncontrollers = dirigera_hub.get_controllers()```The controller object has the following attributes (additional to the core attributes):```pythonis_on: boolbattery_percentage: Optional[int] = None```Available methods for controller are:```pythoncontroller.set_name(name=&quot;kitchen remote 1&quot;)```## [Environment Sensor](./src/dirigera/devices/environment_sensor.py)Currently only tested with the VINDSTYRKA sensor. If you have other sensors please send me the json and I will add support or create a PR.To get the environment sensors use:```pythonsensors = dirigera_hub.get_environment_sensors()```The environment sensor object has the following attributes (additional to the core attributes):```pythoncurrent_temperature: intcurrent_r_h: int # current humiditycurrent_p_m25: int # current particulate matter 2.5max_measured_p_m25: int # maximum measurable particulate matter 2.5min_measured_p_m25: int # minimum measurable particulate matter 2.5voc_index: int # current volatile organic compound```# [Scene](./src/dirigera/devices/scene.py)To get the scenes use:```pythonscenes = dirigera_hub.get_scenes()```The scene object has the following attributes:```pythonid: strtype: strinfo: Infotriggers: List[Trigger]actions: List[Action]created_at: datetime.datetimelast_completed: datetime.datetimelast_triggered: datetime.datetimelast_undo: datetime.datetimecommands: List[str]undo_allowed_duration: int```Details to the Trigger, Action and Info class can be found in [scene.py](./src/dirigera/devices/scene.py)Available methods for scene are:```pythonscene.trigger()scene.undo()```## Event ListenerThe event listener allows you to listen to events that are published by your Dirigera hub. This is useful if you want to automate tasks based on events such as when a light is turned on or off, or when the color temperature of a light is changed.```pythonimport jsonfrom typing import Anydef on_message(ws: Any, message: str):    message_dict = json.loads(message)    data = message_dict[&quot;data&quot;]    if data[&quot;id&quot;] == bed_light.light_id:        print(f&quot;{message_dict['type']} event on {bed_light.custom_name}, attributes: {data['attributes']}&quot;)def on_error(ws: Any, message: str):    print(message)dirigera_hub.create_event_listener(    on_message=on_message, on_error=on_error)``````deviceStateChanged event on Bed Light, attributes: {'isOn': False}```## MotivationThe primary motivation for this project was to provide users with the ability to control the startup behavior of their smart home lamps when there is a power outage.  The default behavior of the hub is to turn on all lights when power is restored, which can be problematic if the user is away from home or on vacation, and a small power fluctuation causes all lights to turn on and stay on. Unfortunately, the IKEA app does not offer a way to change this default behavior.  The `set_startup_behaviour()` function enables users to override the default behavior and choose the startup behavior that best suits their needs (START_ON = turn on light when power is back, START_OFF = light stays off when power is back).  I can not guarantee that all IKEA lamps offer this functionality.## ContributingContributions are welcome! If you have an idea for a new feature or a bug fix, please post and issue or submit a pull request.### Setup of devFor setting up the dev environment I recommend running the `setup.sh` script, which will create a venv and install the `requirements.txt` as well as the `dev-requirements.txt`.### TestsTo run the tests execute the `run-test.sh` script or just run `pytest .`  For linting you can run the `run-pylint.sh`.  For types you can run the `run-mypy.sh`  To test the different python versions you can use the `run-python-verions-test.sh` (this requires a running docker installation).  All of these tests are also run when a PR is openend (and the test run is triggered).## LicenseThe MIT License (MIT)Copyright (c) 2023 Leggin</longdescription>
</pkgmetadata>