<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># torchilityA tool for training pytorch deep learning model more simply which is based on Pytorch-lightning.## Install- `pip install torchility`### Dependency- pytorch&gt;=2.0- pytorch-lightning&gt;=2.0- torchmetrics&gt;=0.11- matplotlib&gt;=3.3## Usage- MNIST```pythonfrom torchility import Trainerimport torchfrom torch import nnfrom torch.nn import functional as Ffrom torchvision.datasets import MNISTfrom torchvision import transformsfrom torch.utils.data import DataLoader, random_splitimport warningswarnings.simplefilter(&quot;ignore&quot;)  # ignore annoying warnings# datasetsdata_dir = './datasets'transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])mnist_full = MNIST(data_dir, train=True, transform=transform, download=True)train_ds, val_ds = random_split(mnist_full, [55000, 5000])test_ds = MNIST(data_dir, train=False, transform=transform, download=True)# dataloaderstrain_dl = DataLoader(train_ds, batch_size=32)val_dl = DataLoader(val_ds, batch_size=32)test_dl = DataLoader(test_ds, batch_size=32)# pytorch modelchannels, width, height = (1, 28, 28)model = nn.Sequential(    nn.Flatten(),    nn.Linear(channels * width * height, 64),    nn.ReLU(),    nn.Dropout(0.1),    nn.Linear(64, 64),    nn.ReLU(),    nn.Dropout(0.1),    nn.Linear(64, 10))# optimizeropt = torch.optim.Adam(model.parameters(), lr=2e-4)# trainertrainer = Trainer(model, F.cross_entropy, opt, epochs=2)# train and validatetrainer.fit(train_dl, val_dl)# testtrainer.test(test_dl)```- See the `examples` for more examples </longdescription>
</pkgmetadata>