<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dependencies [![build](https://img.shields.io/github/workflow/status/proofit404/dependencies/release?style=flat-square)](https://github.com/proofit404/dependencies/actions/workflows/release.yml?query=branch%3Arelease) [![pypi](https://img.shields.io/pypi/v/dependencies?style=flat-square)](https://pypi.org/project/dependencies)Constructor injection designed with OOP in mind.**[Documentation](https://proofit404.github.io/dependencies) |[Source Code](https://github.com/proofit404/dependencies) |[Task Tracker](https://github.com/proofit404/dependencies/issues)**Dependency Injection (or simply DI) is a great technique. By using it you canorganize responsibilities in you codebase. Define high level policies and systembehavior in one part. Delegate control to low level mechanisms in another part.Simple and powerful.With help of DI you can use different parts of your system independently andcombine their behavior really easy.If you split logic and implementation into different classes, you will see howpleasant it becomes to change your system.This tiny library helps you to connect parts of your system, in particular - toinject low level implementation into high level behavior.## Pros- Provide composition instead of inheritance.- Solves top-down architecture problems.- Boilerplate-free object hierarchies.- API entrypoints, admin panels, CLI commands are oneliners.## ExampleDependency injection without `dependencies````pycon&gt;&gt;&gt; from app.robot import Robot, Servo, Amplifier, Controller, Settings&gt;&gt;&gt; robot = Robot(...     servo=Servo(amplifier=Amplifier()),...     controller=Controller(),...     settings=Settings(environment=&quot;production&quot;),... )&gt;&gt;&gt; robot.work()```Dependency injection with `dependencies````pycon&gt;&gt;&gt; from dependencies import Injector&gt;&gt;&gt; class Container(Injector):...     robot = Robot...     servo = Servo...     amplifier = Amplifier...     controller = Controller...     settings = Settings...     environment = &quot;production&quot;&gt;&gt;&gt; Container.robot.work()```## QuestionsIf you have any questions, feel free to create an issue in our[Task Tracker](https://github.com/proofit404/dependencies/issues). We have the[question label](https://github.com/proofit404/dependencies/issues?q=is%3Aopen+is%3Aissue+label%3Aquestion)exactly for this purpose.## Enterprise supportIf you have an issue with any version of the library, you can apply for a paidenterprise support contract. This will guarantee you that no breaking changeswill happen to you. No matter how old version you're using at the moment. Allnecessary features and bug fixes will be backported in a way that serves yourneeds.Please contact [proofit404@gmail.com](mailto:proofit404@gmail.com) if you'reinterested in it.## License`dependencies` library is offered under the two clause BSD license.&lt;p align=&quot;center&quot;&gt;&amp;mdash; ‚≠ê &amp;mdash;&lt;/p&gt;</longdescription>
</pkgmetadata>