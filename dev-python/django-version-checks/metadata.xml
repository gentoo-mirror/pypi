<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=====================django-version-checks=====================.. image:: https://img.shields.io/github/actions/workflow/status/adamchainz/django-version-checks/main.yml?branch=main&amp;style=for-the-badge   :target: https://github.com/adamchainz/django-version-checks/actions?workflow=CI.. image:: https://img.shields.io/badge/Coverage-100%25-success?style=for-the-badge   :target: https://github.com/adamchainz/django-version-checks/actions?workflow=CI.. image:: https://img.shields.io/pypi/v/django-version-checks.svg?style=for-the-badge   :target: https://pypi.org/project/django-version-checks/.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge   :target: https://github.com/psf/black.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white&amp;style=for-the-badge   :target: https://github.com/pre-commit/pre-commit   :alt: pre-commitSystem checks for your project's environment.Requirements============Python 3.7 to 3.12 supported.Django 3.2 to 4.2 supported.----**Want to work smarter and faster?**Check out my book `Boost Your Django DX &lt;https://adamchainz.gumroad.com/l/byddx&gt;`__ which covers many ways to improve your development experience.----Installation============First, install with **pip**:.. code-block:: bash    python -m pip install django-version-checksSecond, add the app to your ``INSTALLED_APPS`` setting:.. code-block:: python    INSTALLED_APPS = [        ...,        &quot;django_version_checks&quot;,        ...,    ]Third, add a ``VERSION_CHECKS`` setting with the version checks you want to enforce (as documented below).For example:.. code-block:: python    VERSION_CHECKS = {        &quot;python&quot;: &quot;==3.9.*&quot;,    }Usage=====See also the `introductory blog post &lt;https://adamj.eu/tech/2020/12/14/introducing-django-version-checks/&gt;`__.django-version-checks adds several `system checks &lt;https://docs.djangoproject.com/en/stable/topics/checks/&gt;`__ that can help ensure that the current environment has the right versions of Python, databases, etc.This is useful when coordinating upgrades across all your infrastructure.Note that django-version-checks does not check the versions of your Python dependencies.This is because mismatched dependency versions are likely to cause ``ImportError``\s or other import-time problems, before system checks run.To version check your Python dependencies, try `pip-lock &lt;https://github.com/adamchainz/pip-lock/&gt;`__.Checks use the `PEP 440 specifier format &lt;https://www.python.org/dev/peps/pep-0440/#id53&gt;`__ via the ``packaging`` module.This is the same format used by pip, and allows some flexibility in specifying valid version ranges.The ``~=`` operator is particularly useful.For example, you can use ``~=3.9.1`` to mean ‚Äú3.9.1+, but less than 3.10.0‚Äù, allowing environments to take on patch releases without changes, but nothing more.The individual checks are documented below.Each occupies a key in the ``VERSION_CHECKS`` dictionary, and documents its supported types for specifiers.If a check is misconfigured with a bad type or specifier you will see one of these system check errors:* ``dvc.E001``: ``&lt;check&gt;`` is misconfigured. Expected a ``&lt;type&gt;`` but got ``&lt;value&gt;``.* ``dvc.E002``: ``&lt;check&gt;`` is misconfigured. ``&lt;value&gt;`` is not a valid PEP440 specifier.``mysql`` check----------------This check compares the current version of MariaDB/MySQL to the given specifier.The range can specified either as a single string:.. code-block:: python    VERSION_CHECKS = {        &quot;mysql&quot;: &quot;~=10.5.8&quot;,    }‚Ä¶or as a dictionary mapping database aliases to their specifiers:.. code-block:: python    VERSION_CHECKS = {        &quot;postgresql&quot;: {            &quot;default&quot;: &quot;~=10.5.8&quot;,            &quot;analytics&quot;: &quot;~=10.4.17&quot;,        },    }Note: as a database check, Django will only run this during ``migrate`` or when using ``check --database`` (Django 3.1+) / ``check --tags database`` (Django &lt;3.1).See (`docs &lt;https://docs.djangoproject.com/en/3.1/ref/checks/#builtin-tags&gt;`__).If this check fails, the system check will report:* ``dvc.E005``: The current version of MariaDB/MySQL (``&lt;version&gt;``) for the ``&lt;alias&gt;`` database connection does not match the specified range (``&lt;range&gt;``).``postgresql`` check--------------------This check compares the current version of PostgreSQL to the given specifier.The range can specified either as a single string:.. code-block:: python    VERSION_CHECKS = {        &quot;postgresql&quot;: &quot;~=12.2&quot;,    }‚Ä¶or as a dictionary mapping database aliases to their specifiers:.. code-block:: python    VERSION_CHECKS = {        &quot;postgresql&quot;: {            &quot;default&quot;: &quot;~=12.2&quot;,            &quot;analytics&quot;: &quot;~=13.1&quot;,        },    }Note: as a database check, Django will only run this during ``migrate`` or when using ``check --database`` (Django 3.1+) / ``check --tags database`` (Django &lt;3.1).See (`docs &lt;https://docs.djangoproject.com/en/3.1/ref/checks/#builtin-tags&gt;`__).If this check fails, the system check will report:* ``dvc.E004``: The current version of PostgreSQL (``&lt;version&gt;``) for the ``&lt;alias&gt;`` database connection does not match the specified range (``&lt;range&gt;``).``python`` check----------------This check compares the current version of Python to the given single specifier:.. code-block:: python    VERSION_CHECKS = {        &quot;python&quot;: &quot;~=3.9.1&quot;,    }If this check fails, the system check will report:* ``dvc.E003``: The current version of Python (``&lt;version&gt;``) does not match the specified range (``&lt;range&gt;``).``sqlite`` check--------------------This check compares the current version of SQLite to the given single specifier:.. code-block:: python    VERSION_CHECKS = {        &quot;sqlite&quot;: &quot;~=3.37&quot;,    }Note: as a database check, Django will only run this during ``migrate`` or when using ``check --database`` (Django 3.1+) / ``check --tags database`` (Django &lt;3.1).See (`docs &lt;https://docs.djangoproject.com/en/3.1/ref/checks/#builtin-tags&gt;`__).If this check fails, the system check will report:* ``dvc.E006``: The current version of SQLite (``&lt;version&gt;``) does not match the specified range (``&lt;range&gt;``).Example Upgrade===============Let‚Äôs walk through using django-version-checks to upgrade Python from version 3.8 to 3.9.We have an infrastructure consisting of CI, staging, and production environments, and several developers‚Äô development machines.First, we add a pre-existing check to ensure that all environments are on Python 3.8:.. code-block:: python    VERSION_CHECKS = {        &quot;python&quot;: &quot;~=3.8.6&quot;,    }Second, we rewrite the specifier to allow versions of Python 3.9:.. code-block:: python    VERSION_CHECKS = {        &quot;python&quot;: &quot;&gt;=3.8.6,&lt;3.10.0&quot;,    }Third, we upgrade our infrastructure.We‚Äôd probably upgrade in the order: CI, development environments, staging, production.Each environment should have an automated run of ``manage.py check``, as per the `Django deployment checklist &lt;https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/&gt;`__.Fourth, we change the specifier again to allow Python 3.9 only:.. code-block:: python    VERSION_CHECKS = {        &quot;python&quot;: &quot;~=3.9.1&quot;,    }And we‚Äôre upgraded! üéâ</longdescription>
</pkgmetadata>