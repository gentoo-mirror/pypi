<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Frictionless CKAN MapperA library for mapping CKAN metadata &lt;=&gt; Frictionless metadata.The library has zero dependencies (not even on Data Package libs). You can use it directly or use it for inspiration. Detailed outline of the algorithm is in the docs or you can read the code.[![Travis](https://img.shields.io/travis/frictionlessdata/frictionless-ckan-mapper/master.svg)](https://travis-ci.org/frictionlessdata/frictionless-ckan-mapper)[![Coveralls](http://img.shields.io/coveralls/frictionlessdata/frictionless-ckan-mapper/master.svg)](https://coveralls.io/r/frictionlessdata/frictionless-ckan-mapper?branch=master)[![PyPi](https://img.shields.io/pypi/v/frictionless-ckan-mapper.svg)](https://pypi.python.org/pypi/frictionless-ckan-mapper)[![SemVer](https://img.shields.io/badge/versions-SemVer-brightgreen.svg)](http://semver.org/)[![Chat on Discord](https://img.shields.io/discord/695635777199145130)](https://discord.gg/2UgfM2k)&lt;!-- toc --&gt;- [Frictionless CKAN Mapper](#frictionless-ckan-mapper)  - [Installation](#installation)  - [Getting started](#getting-started)    - [CKAN =&gt; Frictionless](#ckan--frictionless)    - [Frictionless =&gt; CKAN](#frictionless--ckan)  - [Reference](#reference)    - [`ckan_to_frictionless`](#ckan_to_frictionless)      - [`resource(ckandict)`](#resourceckandict)      - [`dataset(ckandict)`](#datasetckandict)    - [`frictionless_to_ckan`](#frictionless_to_ckan)      - [`resource(fddict)`](#resourcefddict)      - [`package(fddict)`](#packagefddict)  - [Design](#design)    - [CKAN reference](#ckan-reference)    - [Algorithm: CKAN =&gt; Frictionless](#algorithm-ckan--frictionless)    - [Algorithm: Frictionless =&gt; CKAN](#algorithm-frictionless--ckan)  - [Developers](#developers)    - [Install the source](#install-the-source)    - [Run the tests](#run-the-tests)    - [Building and publishing the package](#building-and-publishing-the-package)      - [Build the distribution package locally for testing purposes](#build-the-distribution-package-locally-for-testing-purposes)      - [Test the package at test.pypi.org](#test-the-package-at-testpypiorg)      - [Tag a new Git release and publish to the official PyPi](#tag-a-new-git-release-and-publish-to-the-official-pypi)    &lt;!-- tocstop --&gt;## Installation- Python: install Python. The library is compatible with both Python 2.7+ and Python 3.3+.```bashpip install frictionless-ckan-mapper```**Note:** The package is installed as `frictionless-ckan-mapper` and then imported as `frictionless_ckan_mapper`.## Getting started### CKAN =&gt; Frictionless```python# get a CKAN metadata itemckan_dataset = {  &quot;name&quot;: &quot;my-dataset&quot;,  &quot;title&quot;: &quot;My awesome dataset&quot;,  &quot;url&quot;: &quot;http://www.example.com/data.csv&quot;}# or load from an API e.g.# ckan_dataset = json.load(urllib.urlopen(#     https://demo.ckan.org/api/3/package_show?id=my_dataset# ))from frictionless_ckan_mapper import ckan_to_frictionless as converter# convert to frictionlessfrictionless_package = converter.dataset(ckan_dict)print(frictionless_package)```### Frictionless =&gt; CKAN```pythonfrictionless = {  'name': &quot;f11s-dataset&quot;,  'path': &quot;https://datahub.io/data.csv&quot;}from frictionless_ckan_mapper import frictionless_to_ckan as f2cckanout = f2c.dataset(frictionless)print(ckanout)```## ReferenceThis package contains two modules:- `frictionless_to_ckan`- `ckan_to_frictionless`You can import them directly like so:```pythonfrom frictionless_ckan_mapper import ckan_to_frictionlessfrom frictionless_ckan_mapper import frictionless_to_ckan```### `ckan_to_frictionless`#### `resource(ckandict)````pythonfrom frictionless_ckan_mapper import ckan_to_frictionless as converter# ... Some code with a CKAN dictionary ...output_frictionless_dict = converter.resource(ckan_dictionary)```#### `dataset(ckandict)````pythonfrom frictionless_ckan_mapper import ckan_to_frictionless as converter# ... Some code with a CKAN dictionary ...output_frictionless_dict = converter.dataset(ckan_dictionary)```### `frictionless_to_ckan`#### `resource(fddict)````pythonfrom frictionless_ckan_mapper import frictionless_to_ckan as converter# ... Some code with a Frictionless dictionary ...output_ckan_dict = converter.resource(frictionless_dictionary)```#### `package(fddict)````pythonfrom frictionless_ckan_mapper import frictionless_to_ckan as converter# ... Some code with a Frictionless dictionary ...output_ckan_dict = converter.package(frictionless_dictionary)```## Design```textFrictionless   &lt;=&gt;        CKAN--------------------------------------Data Package   &lt;=&gt;   Package (Dataset)Data Resource  &lt;=&gt;   ResourceTable Schema   &lt;=&gt;   Data Dictionary?? (datastore resources can have schemas)```### CKAN reference**Summary:**- Class diagram below of key objects (without attributes)- Objects with their attributes in this spreadsheet: https://docs.google.com/spreadsheets/d/1XdqGTFni5Jfs8AMbcbfsP7m11h9mOHS0eDtUZtqGVSg/edit#gid=1925460244```mermaidclassDiagramclass Packageclass Resourceclass DataDictionaryPackage *-- ResourceResource o-- DataDictionary```![mermaid-diagram-20200703112520](https://user-images.githubusercontent.com/32682903/86486065-f9c08100-bd1f-11ea-8a1a-8f3befca0e6e.png)Source for CKAN metadata structure:- Dataset (Package): https://docs.ckan.org/en/2.8/api/index.html#ckan.logic.action.create.package_create  - `Package.as_dict` method: https://github.com/ckan/ckan/blob/2.8/ckan/model/package.py#L195-L223  - `package_show` ...* Resource: https://docs.ckan.org/en/2.8/api/index.html#ckan.logic.action.create.resource_create### Algorithm: CKAN =&gt; FrictionlessSee the code in [`frictionless_ckan_mapper/ckan_to_frictionless.py`](./frictionless_ckan_mapper/ckan_to_frictionless.py)### Algorithm: Frictionless =&gt; CKANSee the code in [`frictionless_ckan_mapper/frictionless_to_ckan.py`](./frictionless_ckan_mapper/frictionless_to_ckan.py)## Developers### Install the source- Clone the repo:  ```bash  git clone https://github.com/frictionlessdata/frictionless-ckan-mapper.git  ```- And install it with pip:  ```bash  pip install -e .  ```### Run the testsUse the excellent `pytest` suite as follows:```bashpytest tests```To test under both Python 2 and Python 3 environments, we use `tox`. You can run the following command:```bashmake test```**Note:** Make sure that the necessary Python versions are in your environment `PATH` (Python 2.7 and Python 3.6).### Building and publishing the packageTo see a list of available commands from the `Makefile`, execute:```bashmake list```#### Build the distribution package locally for testing purposesIf a previous build exists, make sure to also remove it before building again:```bashmake distclean```Then:```bashmake dist```Alternatively, this command will accomplish the same to build packages for both Python 2 and Python 3:```bashpython setup.py sdist bdist_wheel --universal```#### Test the package at test.pypi.org```bashpython -m twine upload --repository testpypi dist/*```The package will be publicly available at https://test.pypi.org/project/frictionless-ckan-mapper/ and you will be able to `pip install` it as usual.#### Tag a new Git release and publish to the official PyPiMake sure to update the version of the package in the file `frictionless_ckan_mapper/VERSION`. Then:```bashmake release```You can quickly review the version to release with `make version`, which will print the current version stored in `VERSION`.</longdescription>
</pkgmetadata>