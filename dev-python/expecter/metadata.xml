<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>BASICS        ======                Expecter Gadget helps you to write assertions. Never again will you forget        which is expected and which is actual!                Basic expectations are easy:                    &gt;&gt;&gt; from expecter import expect            &gt;&gt;&gt; expect('some' + 'thing') == 'something'            expect('something')            &gt;&gt;&gt; expect(1) &gt; 100            Traceback (most recent call last):            ...            AssertionError: Expected something greater than 100 but got 1                Just read the expectations like a sentence. &quot;expect(2) == 1 + 1&quot; reads as        &quot;Expect 2 to equal 1 + 1&quot;. Obviously, the expectation is about 2, and it's        being compared to 1 + 1. No ambiguity!                EXCEPTIONS        ==========                Expectations about exceptions use the &quot;with&quot; statement. Everything is good if        the expected exception is raised:                    &gt;&gt;&gt; from __future__ import with_statement            &gt;&gt;&gt; with expect.raises(KeyError):            ...     {}[123]                If it's not raised, Expecter Gadget will raise an AssertionError:                    &gt;&gt;&gt; with expect.raises(KeyError):            ...     pass            Traceback (most recent call last):            ...            AssertionError: Expected an exception of type KeyError but got none                Exceptions that don't match the expected one will not be swallowed, so your        test will error as you expect:                    &gt;&gt;&gt; from __future__ import with_statement            &gt;&gt;&gt; with expect.raises(NameError):            ...     {}[123]            Traceback (most recent call last):            ...            KeyError: 123                CUSTOM EXPECTATIONS        ===================                You can add a custom expectation with the add\_expectation method. You give it        a predicate that should return true if the expectation succeeds and false if        it fails. All expectation objects will grow a method with the name of your        predicate method (so don't use a lambda). Appropriate exception messages will        be generated when your predicate fails:                    &gt;&gt;&gt; import expecter            &gt;&gt;&gt; def can_meow(thing):            ...     return thing == 'kitty'            &gt;&gt;&gt; expecter.add_expectation(can_meow)            &gt;&gt;&gt; expect('kitty').can_meow()            &gt;&gt;&gt; expect('puppy').can_meow()            Traceback (most recent call last):            ...            AssertionError: Expected that 'puppy' can_meow, but it can't                API DOCUMENTATION        =================                See http://expecter-gadget.readthedocs.org/en/latest/</longdescription>
</pkgmetadata>