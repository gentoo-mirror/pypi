<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Tests](https://github.com/MagicStack/httptools/workflows/Tests/badge.svg)httptools is a Python binding for the nodejs HTTP parser.The package is available on PyPI: `pip install httptools`.# APIshttptools contains two classes `httptools.HttpRequestParser`,`httptools.HttpResponseParser` (fulfilled through[llhttp](https://github.com/nodejs/llhttp)) and a function forparsing URLs `httptools.parse_url` (through[http-parse](https://github.com/nodejs/http-parser) for now).See unittests for examples.```pythonclass HttpRequestParser:    def __init__(self, protocol):        &quot;&quot;&quot;HttpRequestParser        protocol -- a Python object with the following methods        (all optional):          - on_message_begin()          - on_url(url: bytes)          - on_header(name: bytes, value: bytes)          - on_headers_complete()          - on_body(body: bytes)          - on_message_complete()          - on_chunk_header()          - on_chunk_complete()          - on_status(status: bytes)        &quot;&quot;&quot;    def get_http_version(self) -&gt; str:        &quot;&quot;&quot;Return an HTTP protocol version.&quot;&quot;&quot;    def should_keep_alive(self) -&gt; bool:        &quot;&quot;&quot;Return ``True`` if keep-alive mode is preferred.&quot;&quot;&quot;    def should_upgrade(self) -&gt; bool:        &quot;&quot;&quot;Return ``True`` if the parsed request is a valid Upgrade request.The method exposes a flag set just before on_headers_complete.Calling this method earlier will only yield `False`.&quot;&quot;&quot;    def feed_data(self, data: bytes):        &quot;&quot;&quot;Feed data to the parser.        Will eventually trigger callbacks on the ``protocol``        object.        On HTTP upgrade, this method will raise an        ``HttpParserUpgrade`` exception, with its sole argument        set to the offset of the non-HTTP data in ``data``.        &quot;&quot;&quot;    def get_method(self) -&gt; bytes:        &quot;&quot;&quot;Return HTTP request method (GET, HEAD, etc)&quot;&quot;&quot;class HttpResponseParser:    &quot;&quot;&quot;Has all methods except ``get_method()`` that    HttpRequestParser has.&quot;&quot;&quot;    def get_status_code(self) -&gt; int:        &quot;&quot;&quot;Return the status code of the HTTP response&quot;&quot;&quot;def parse_url(url: bytes):    &quot;&quot;&quot;Parse URL strings into a structured Python object.    Returns an instance of ``httptools.URL`` class with the    following attributes:      - schema: bytes      - host: bytes      - port: int      - path: bytes      - query: bytes      - fragment: bytes      - userinfo: bytes    &quot;&quot;&quot;```# Development1. Clone this repository with   `git clone --recursive git@github.com:MagicStack/httptools.git`2. Create a virtual environment with Python 3:   `python3 -m venv envname`3. Activate the environment with `source envname/bin/activate`4. Install development requirements with `pip install -e .[test]`5. Run `make` and `make test`.# LicenseMIT.</longdescription>
</pkgmetadata>