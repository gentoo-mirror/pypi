<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Flask-Access [![CircleCI](https://circleci.com/gh/barischrooneyj/flask-access.svg?style=svg)](https://circleci.com/gh/barischrooneyj/flask-access)Simple protection of Flask endpoints.Integrates well with [Flask-Login](https://flask-login.readthedocs.io/en/latest/).## Protect endpointsHere, the endpoint `&quot;/secret-code&quot;` requires a user to have `&quot;admin&quot;` rights:``` Python@app.route(&quot;/secret-code&quot;)@flask_access.require(&quot;admin&quot;)def secret_code():    return &quot;1234&quot;```You could have other requirements:``` Python@flask_access.require(&quot;boss&quot;, 7, funny=True, bald=None)```## Register a user loaderFlas-Access needs to associate the current request with a user thathas permission or not. Flask-Access will look for the current userin `app.config[flask_access.CURRENT_USER]`, here you can assign afunction that returns the current user.``` Pythonapp.config[flask_access.CURRENT_USER] = my_current_user_func```The type of the returned user can be whatever you are using in yourapplication to model users already, the only condition is that the userclass implements a method `has_access`. If the user has no account return`True` to allow access. Anything other than `True` or an instance of aclass implementing `has_access` will have access denied.If you are also using Flask-Login you can simply apply the assignmentbelow :clap:``` Pythonapp.config[flask_access.CURRENT_USER] = flask_login.current_user```## User access logicIn short, implement `has_access(self, rights) -&gt; bool` on your user class.When a user attempts to access an endpoint, Flask-Access will load the currentuser object `user` and run `user.has_access(rights)`, the `rights` that getpassed in are the `&quot;boss&quot;, 7, funny=True, bald=None` from above.If a user doesn't have an `has_access` method, or the method doesn't return`True`, then access is denied :speak_no_evil:## Access denied handlerThe default access denied handler calls `flask.abort(403)`To set a custom access-denied handler:``` Pythonapp.config[flask_access.ABORT_FN] = my_custom_abort_func```## Login requiredIf you are using `flask_login.current_user` as your user loader then`flask_access.require` implies `flask_login.login_required`, so no need to alsospecify the latter.Why? Well, if a user is not logged-in, `flask_login.current_user` will return a`flask_login.AnonymousUserMixin` which does not have `has_access` implemented,hence no access for the user.## ExampleAn [example](example/example.py) with a primitive login/out system.</longdescription>
</pkgmetadata>