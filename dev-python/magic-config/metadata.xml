<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Magic ConfigA simple library for easy handling of .env files and environment variables configurations.This library is a class for working with configurations. The class is implemented as a singleton, which allows you to always have exactly one instance of the same data registry everywhere.The configuration data itself is taken from the .env file or from environment variables.## Installation```pip install magic-config```## Upgrade```pip install --upgrade magic-config```Pypi url: https://pypi.org/project/magic-config/## Example:```shDEBUG=1 myapp.py```My app script:```pyfrom magic_config import Config# You can access to variables as property of class objectif Config.DEBUG:  ...# You can access to variables in lower case (and camel case, and other case)if Config.debug:  ...# You can access to variables as key of dict objectif Config[&quot;debug&quot;]:  ...```## Configure custom variables```py# You can add variables to the object# as dictMagicConfig({    &quot;Number&quot;: 456,    &quot;Boolean&quot;: True})# as named argumentsMagicConfig(    Number=456,    Boolean=True)```## Prepared autogenerators for DB URIsFor example in .env  file you can write only this data:```MONGO_HOST=&quot;127.0.0.1&quot;MONGO_USER=&quot;user&quot;MONGO_PWD=&quot;*****&quot;MONGO_DB=&quot;test&quot;MONGO_PORT=27017```and in code you can call the MONGO_URL```pyfrom magic_config import ConfigConfig.MONGO_URL# output:# mongodb://user:passwd@127.0.0.1:27017/test?authSource=admin&amp;tls=false```## Set type casting for environment variablesFor example if you create in source root magic.config file and write:```bashDEBUG=&quot;bool&quot;DEBUG_STEP=&quot;bool&quot;DEBUG_USER_ID=&quot;int&quot;```then you run ```bashDEBUG=1 DEBUG_STEP=1 DEBUG_USER_ID=1 DEBUG_USER_ID=10011888 python server.py``````pyConfig.DEBUG # TrueConfig.DEBUG_STEP # TrueConfig.DEBUG_USER_ID # int(10011888)```## Custom file pathInstead default .env file in source root you can configure path to .env file:```py# for exampleenv_file = os.path.realpath(os.path.dirname(os.path.realpath(__file__)) + &quot;/../my.env&quot;)MagicConfig(env_file=env_file)```</longdescription>
</pkgmetadata>