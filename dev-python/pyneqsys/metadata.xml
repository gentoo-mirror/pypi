<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pyneqsys========.. image:: http://hera.physchem.kth.se:9090/api/badges/bjodah/pyneqsys/status.svg   :target: http://hera.physchem.kth.se:9090/bjodah/pyneqsys   :alt: Build status.. image:: https://circleci.com/gh/bjodah/pyneqsys.svg?style=svg   :target: https://circleci.com/gh/bjodah/pyneqsys   :alt: Build status on CircleCI.. image:: https://secure.travis-ci.org/bjodah/pyneqsys.svg?branch=master   :target: http://travis-ci.org/bjodah/pyneqsys   :alt: Build status on Travis-CI.. image:: https://img.shields.io/pypi/v/pyneqsys.svg   :target: https://pypi.python.org/pypi/pyneqsys   :alt: PyPI version.. image:: https://img.shields.io/badge/python-2.7,3.5,3.6-blue.svg   :target: https://www.python.org/   :alt: Python version.. image:: http://joss.theoj.org/papers/10.21105/joss.00531/status.svg   :target: https://doi.org/10.21105/joss.00531   :alt: DOI.. image:: https://img.shields.io/pypi/l/pyneqsys.svg   :target: https://github.com/bjodah/pyneqsys/blob/master/LICENSE   :alt: License file.. image:: http://hera.physchem.kth.se/~pyneqsys/branches/master/htmlcov/coverage.svg   :target: http://hera.physchem.kth.se/~pyneqsys/branches/master/htmlcov   :alt: coveragepyneqsys provides a convenience class for representing and solving non-linear equation systems from symbolic expressions(provided e.g. with the help of SymPy_).The numerical root finding is perfomed using either:- scipy: `scipy.optimize.root &lt;http://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root.html&gt;`_- mpmath (arbitrary precision): `mpmath.calculus.optimization.MDNewton &lt;http://mpmath.org/doc/1.0.0/calculus/optimization.html#mpmath.calculus.optimization.MDNewton&gt;`_- kinsol (from SUNDIALS): `pykinsol.solve &lt;http://bjodah.github.io/pykinsol/latest/pykinsol.html#pykinsol.solve&gt;`_- nleq2 (ZIB library free for academic use): `pynleq2.solve &lt;http://bjodah.github.io/pynleq2/pynleq2.html#pynleq2.solve&gt;`_- levmar (Levenberg-Marquardt): `levmar.levmar &lt;https://bjodah.github.io/levmar/latest/levmar.html#levmar.levmar&gt;`_In addition to offering a unified interface to different solvers, pyneqsyscan also derive the Jacobian analytically (when using ``pyneqsys.SymbolicSys``).This is useful since doing so manually is widely recognized as both tedious and errorprone.The symbolic representation is usually in the form of SymPy_ expressions,but the user may choose another symbolic back-end (see `sym &lt;https://github.com/bjodah/sym&gt;`_).In addition to deriving the Jacobian analytically the symbolic representation can forexample apply row-reduce. This is usful for when you have a overdetermined system (formed from e.g. applying conservation laws) and want to solve the system byroot-finding rather than using a least-square optimization of e.g. Levenberg-Marquardtstyle.Last, but not the least having a symbolic representation of your system of equationsallows you to generate publication quality latex representations of your equations (throughSymPy's latex printer) from a **single** source‒no more error prone hand-rewriting of the sameequations in another format for presentation!.. _SymPy: http://www.sympy.orgDocumentation-------------Autogenerated API documentation for latest stable release is found here:`&lt;https://bjodah.github.io/pyneqsys/latest&gt;`_(and the development version for the current master branch is found here:`&lt;http://hera.physchem.kth.se/~pyneqsys/branches/master/html&gt;`_).Installation------------Simplest way to install pyneqsys and its dependencies is through the `conda package manager &lt;http://conda.pydata.org/docs/&gt;`_:::   $ conda install -c bjodah pyneqsys pytest   $ pytest --pyargs pyneqsysOptional dependencies~~~~~~~~~~~~~~~~~~~~~If you used ``conda`` to install pyneqsys_ you can skip this section.But if you use ``pip`` you may want to know that the default installationof ``pyneqsys`` only requires SciPy::   $ pip install pyneqsys   $ pytest --pyargs pyneqsys -rsThe above command should finish without errors but with some skipped tests.The reason for why some tests are skipped should be because missing optional solvers.To install the optional solvers you will first need to install third party libraries forthe solvers and then their python bindings. The 3rd party requirements are as follows:- `pykinsol &lt;https://github.com/bjodah/pykinsol&gt;`_ (requires SUNDIALS_ ==2.7.0)- `levar &lt;https://github.com/bjodah/levmar&gt;`_- `mpmath &lt;http://www.mpmath.org&gt;`_if you want to see what packages need to be installed on a Debian based system you may look at this`Dockerfile &lt;scripts/environment/Dockerfile&gt;`_.If you manage to install all three external libraries you may install pyneqsys with the option &quot;all&quot;::  $ pip install pyneqsys[all]  $ pytest --pyargs pyneqsys -rsnow there should be no skipped tests. If you try to install pyneqsys on a machine where you do not haveroot permissions you may find the flag ``--user`` helpful when using pip. Also if there are multipleversions of python installed you may want to invoke python for an explicit version of python, e.g.::  $ python3.6 -m pip install --user pyneqsys[all]see `setup.py &lt;setup.py&gt;`_ for the exact list of requirements... _SUNDIALS: https://computation.llnl.gov/projects/sundialsUsing Docker~~~~~~~~~~~~If you have `Docker &lt;https://www.docker.com&gt;`_ installed, you may use it to host a jupyternotebook server::  $ ./scripts/host-jupyter-using-docker.sh . 8888the first time you run the command some dependencies will be downloaded. When the installationis complete there will be a link visible which you can open in your browser. You can also runthe test suite using the same docker-image::  $ ./scripts/host-jupyter-using-docker.sh . 0there will be one skipped test (due to symengine missing in this pip installed environment) andquite a few instances of RintimeWarning.Examples--------Example reformulated from `SciPy documentation &lt;http://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root.html&gt;`_:.. code:: python   &gt;&gt;&gt; from pyneqsys.symbolic import SymbolicSys   &gt;&gt;&gt; neqsys = SymbolicSys.from_callback(   ...     lambda x: [(x[0] - x[1])**3/2 + x[0] - 1,   ...                (x[1] - x[0])**3/2 + x[1]], 2)   &gt;&gt;&gt; x, info = neqsys.solve([1, 0])   &gt;&gt;&gt; assert info['success']   &gt;&gt;&gt; print(x)   [0.8411639 0.1588361]here we did not need to enter the jacobian manually, SymPy did that for us.For expressions containing transcendental functions we need to provide a&quot;backend&quot; keyword arguemnt to enable symbolic derivation of the jacobian:.. code:: python   &gt;&gt;&gt; import math   &gt;&gt;&gt; def powell(x, params, backend=math):   ...     A, exp = params[0], backend.exp   ...     return A*x[0]*x[1] - 1, exp(-x[0]) + exp(-x[1]) - (1 + A**-1)   &gt;&gt;&gt; powell_sys = SymbolicSys.from_callback(powell, 2, 1, names='x0 x1'.split())   &gt;&gt;&gt; x, info = powell_sys.solve([1, 1], [1000.0])   &gt;&gt;&gt; assert info['success']   &gt;&gt;&gt; print(', '.join(['%.6e' % _ for _ in sorted(x)]))   1.477106e-04, 6.769996e+00pyneqsys also allows the user to solve a system of equations for a span ofvalues for a parameter, and optionally plot the result vs. the varied value:.. code:: python   &gt;&gt;&gt; import matplotlib.pyplot as plt   &gt;&gt;&gt; import numpy as np   &gt;&gt;&gt; x0_varied, x0_idx = np.linspace(1e3, 3e3), 0   &gt;&gt;&gt; all_x, all_info = powell_sys.solve_and_plot_series(x, [1000.0], x0_varied, x0_idx)   &gt;&gt;&gt; plt.savefig('example.png').. image:: https://raw.githubusercontent.com/bjodah/pyneqsys/master/examples/example.pngFor more examples look see`examples/ &lt;https://github.com/bjodah/pyneqsys/tree/master/examples&gt;`_, and rendered jupyter notebooks here:`&lt;http://hera.physchem.kth.se/~pyneqsys/branches/master/examples&gt;`_Run notebooks using binder~~~~~~~~~~~~~~~~~~~~~~~~~~Using only a web-browser (and an internet connection) it is possible to explore thenotebooks here: (by the courtesy of the people behind mybinder).. image:: http://mybinder.org/badge.svg   :target: https://mybinder.org/v2/gh/bjodah/pyneqsys/d8775becc6f30b4d3e7920f53d5f318c0672195b?filepath=index.ipynb   :alt: BinderCiting------If you make use of pyneqsys in e.g. academic work you may cite the following peer-reviewed publication:.. image:: http://joss.theoj.org/papers/10.21105/joss.00531/status.svg   :target: https://doi.org/10.21105/joss.00531   :alt: Journal of Open Source Software DOIDepending on what underlying solver you are using you should also cite the appropriate paper(you can look at the list of references in the JOSS article). If you need to reference,in addition to the paper, a specific point version of pyneqsys (for e.g. reproducibility)you can get per-version DOIs from the zendodo archive:.. image:: https://zenodo.org/badge/43504371.svg   :target: https://zenodo.org/badge/latestdoi/43504371   :alt: Zenodo DOILicensing---------The source code is Open Source and is released under the simplified 2-clause BSD license. See LICENSE_ for further details... _LICENSE: LICENSEContributing------------Contributors are welcome to suggest improvements at https://github.com/bjodah/pyneqsys(see further details `here &lt;CONTRIBUTING.rst&gt;`_).Author------Björn I. Dahlgren, contact:- gmail address: bjodah</longdescription>
</pkgmetadata>