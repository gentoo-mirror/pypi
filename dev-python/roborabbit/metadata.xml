<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># RoboRabbitRoboRabbit is a simple to use, opinionated, asynchronous abstraction over amqp/RabbitMQ (using aio_pika) and configuration CLI.## Features- Create/assert Queues, Exchanges, and Bindings on connection- Declarative Queue, Exchange, Binding, and Connection configuration using YAML- Very straight forward async message handling- Command line interface for bootstrapping rabbit from your roborabbit yaml config file.## Installation#### pip$ `pip install roborabbit`#### poetry$ `poetry add roborabbit`## Handle queue messagesThe simplest worker possible. Connection information is in the `roborabbit.yaml` file. The method `run()` takes an dictionary with a key/value pair:- key: `queue` - string, the name of the queue to listen to- value: `handler` - function, the callback function messages will be sent to### Notes- Dead letter exchanges/queues are created and bound for you. (default is {queue_name}_dlq and {queue_name}_dlx)- Messages are `reject`ed and pushed into the dead letter queue when an exception is thrown.- Messages are `nack`ed and returned to queue when disconnected (asyncio.CancelledError).- Messages are `ack`ed automatically after the callback has run without exception.- Multiple queues can be listened to at the same time.- Connection is honored in the following order  - The `Connection()` class  - Connection parameters defined in your roborabbit.yaml file  - Environment variables (see environment variables section)  - Default RabbitMQ connection values### environment variables- `RABBIT_HOST` default 'localhost'- `RABBIT_USER` default 'guest'- `RABBIT_PASS` default 'guest'- `RABBIT_PORT` default 5432- `RABBIT_VIRTUALHOST` default '/'- `RABBIT_PREFETCH` default 10### Basic Example```pyfrom roborabbit.roborabbit import RoboRabbitfrom pathlib import Pathconfig_path = Path('roborabbit.yaml')robo = RoboRabbit(config_path)async def queue_handler(msg):    print(msg)  # your logic hereawait robo.run({'queue_1', queue_handler})```### Explicit connection exampleIf you want control over the configuration, you can pass in the roborabbit connection object.```pyfrom roborabbit.connection import Connectionfrom roborabbit.roborabbit import RoboRabbitfrom pathlib import Pathconfig_path = Path('roborabbit.yaml')connection = Connection(    host='not.localhost.com',    username='bob',    password='pas123',    port=4499,    virtualhost='/')robo = RoboRabbit(config_path, connection)async def queue_handler(msg):    print(msg)  # your logic hereasync def work():    await robo.run({'queue_1', queue_handler})```## Command`roborabbit --config path/to/roborabbit.yaml`### info```Usage: roborabbit [OPTIONS]  import yaml config file and creates a dictionary from itOptions:  --config TEXT       Path to rabbit config yaml file  --host TEXT         RabbitMQ host  --port TEXT         RabbitMQ port  --virtualhost TEXT  RabbitMQ virtualhost  --username TEXT     RabbitMQ username  --password TEXT     RabbitMQ password  --help              Show this message and exit.```## Override environment variables```RABBIT_USER=guestRABBIT_PASS=guestRABBIT_HOST=localhostRABBIT_PORT=5672RABBIT_VHOST=/```## Example yaml files### Simple declare queue, exchange, and bind```host: localhostusername: guestpassword: guestvirtualhost: /port: 5672exchanges:  - name: exchange_1    type: topicqueues:  - name: queue_1bindings:  - from:      type: exchange      name: exchange_1    to:      type: queue      name: queue_1    routing_keys:      - records.created```### Header exchange declaration and binding```host: localhostusername: guestpassword: guestvirtualhost: /port: 5672exchanges:  - name: exchange_2    type: headersqueues:  - name: queue_2bindings:  - from:      type: exchange      name: exchange_2    to:      type: queue      name: queue_1    bind_options:      - x-match: all        hw-action: header-value```## All Values Available```# Connection infohost: localhostusername: guestpassword: guestvirtualhost: /port: 5672# Exchange declarationsexchanges:  - name: string    type: topic|headers|direct|fanout # topic is default    durable: false # default    auto_delete: true # default# queue declarationsqueues:  - name: string    type: quorum # Not required. This is the default and currently only option available (For us, all our queues are quorum. We manually create the queue that needs other requirements). MR welcome    dlq: string # default {queue_name}_dlq    dlx: string # default {queue_name}_dlx    durable: true # default    robust: true # default    auto_delete: false # default    exclusive: false # default    auto_delete_delay: 0 # default    arguments: # rabbit specific key/value pairs      key_1: value_1      key_2: value_2# bindingsbindings:  - from:      type: exchange      name: string    to:      type: exchange|queue      name: string    routing_keys:      - record.created  # list of string, required, unless bind_options is defined    bind_options: # list of `x-match` and `header-key`, required if binding to a header exchange      - x-match: all|any # header type of matcher        header-key: string # header topic to be matched```## Planned features:- Simple message publishing- Expose the underlying channel so you can drop right into aio_pika if you want.</longdescription>
</pkgmetadata>