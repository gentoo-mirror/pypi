<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># TestdataGenerate Random Test Data.These are just a bunch of handy functions designed to make it easier to test your code.To use testdata in your tests, just import it into your testing module:    import testdataTo install, use Pip:    pip install testdataOr, with Pip using Github:    pip install --upgrade &quot;git+https://github.com/Jaymon/testdata#egg=testdata&quot;## FunctionalityThis is an overview of some of the functions and classes found in the Testdata module, there are other functions (like `get_birthday`) that aren't listed here, for the complete list just look at the [source](https://github.com/Jaymon/testdata/tree/master/testdata). Any methods on any child class that extends `testdata.base.TestData` will be available at `testdata.&lt;METHOD-NAME&gt;`.### patch#### Patching modules and classes```pythonpatch(mod, **patches)```Patches a module, instance, or class with the given patches.Suppose you had a module like this:```python# module foo.bardef boom():    return 1class FooPatch(object):    @classmethod    def bam(cls): return boom()```Now you can easily patch it for testing:```pythondef mock_boom():    return 2foo_bar = testdata.patch('foo.bar', boom=mock_boom)print foo_bar.FooPatch.bam() # 2# but you can also just pass in objects or modulesfrom foo.bar import FooPatchFooPatch = testdata.patch(FooPatch, boom=mock_boom)print FooPatch.bam() # 2from foo import barbar = testdata.patch(bar, boom=mock_boom)print bar.FooPatch.bam() # 2```#### Patching class instancesYou can also patch a specific instanceSuppose you had a module like this:```python# module foo.barclass Foo(object):    def boom(self): return 1```Now you can easily patch it for testing:```pythondef mock_boom():    return 2foo = Foo()foo_patched = testdata.patch(foo, boom=mock_boom)print foo_patched.boom() # 2# be aware though, the original instance was modified, foo_patched == fooprint foo.boom() # 2```-------------------------------------------------------------------------------### runRun a command on the command line```pythonr = testdata.run(&quot;echo 1&quot;)print(r) # 1```-------------------------------------------------------------------------------### fetchRequest a url```pythonr = testdata.fetch(&quot;http://example.com&quot;)print(r.code) # 200print(r.body) # the html body of example.com```-------------------------------------------------------------------------------### captureOutput buffering, handy when you want to make sure logging or print statements are doing what you think they should be doing.```pythonwith testdata.capture() as c:    print(&quot;foo&quot;)if &quot;foo&quot; in c:    print(&quot;foo was captured&quot;)```-------------------------------------------------------------------------------### ThreadingA wrapper around python's builtin `threading.Thread` class that bubbles errors up to the main thread because, by default, python's threading classes suppress errors, this makes it annoying when using threads for testing. __NOTE__ - This is buggier than I would like.```pythondef run():    raise ValueError(&quot;join_2&quot;)thread = testdata.Thread(target=run)thread.start()print(thread.exception)```-------------------------------------------------------------------------------### File ServerSometimes you need to test fetching remote files```pythonimport requestsserver = testdata.create_fileserver({    &quot;foo.txt&quot;: [&quot;foo&quot;],    &quot;bar.txt&quot;: [&quot;bar&quot;],})with server: # the with handles starting and stopping the server    res = testdata.fetch(server.url(&quot;foo.txt&quot;))    print(res.body) # foo```-------------------------------------------------------------------------------### environmentChange your environment with this context manager, if you don't pass in an object as the first value it will default to `os.environ````pythonwith testdata.enviroment(FOO=1):    print(os.environ[&quot;FOO&quot;]) # 1print(os.environ[&quot;FOO&quot;]) # raises KeyError# you can also modify objects:d = {}with testdata.enviroment(d, FOO=1):    print(d[&quot;FOO&quot;]) # 1print(d[&quot;FOO&quot;]) # raises KeyError```-------------------------------------------------------------------------------### create_dir```pythoncreate_dir(path=&quot;&quot;, tmpdir=&quot;&quot;)```create a directory hierarchy```pythonbase_dir = &quot;/tmp&quot;d = testdata.create_dir(&quot;/foo/bar&quot;, base_dir)print d # /tmp/foo/bar```### create_dirs```pythoncreate_dirs(dirs, tmpdir=&quot;&quot;)```Create a bunch of files and folders```pythontestdata.create_dirs({  &quot;foo&quot;: {    &quot;bar&quot;: {      &quot;che.txt&quot;: [&quot;line 1&quot;, &quot;line 2&quot;],    }  }})```-------------------------------------------------------------------------------### create_file```pythoncreate_file(data=&quot;&quot;, path=&quot;&quot;, tmpdir=&quot;&quot;, encoding=&quot;&quot;)```create a file with contents```pythonbase_dir = &quot;/tmp&quot;f = testdata.create_file(path=&quot;/foo/bar.txt&quot;, data=&quot;The file contents&quot;, tmpdir=base_dir)print f # /tmp/foo/bar.txt```-------------------------------------------------------------------------------### create_files```pythoncreate_files(file_dict, tmpdir=&quot;&quot;)```Create a whole bunch of files, the `file_dict` key is the filename, the value is the contents of the file.The `file_dict` is very similar to the `create_modules` param `module_dict````pythonfile_dict = {    &quot;foo/bar.txt&quot;: &quot;the foo file contents&quot;,    &quot;baz.txt&quot;: &quot;the baz file contents&quot;,}f = testdata.create_files(file_dict)```-------------------------------------------------------------------------------### get_file```pythonget_file(path=&quot;&quot;, tmpdir=&quot;&quot;)```This will return a `Filepath` instance that you can manipulate but unlike `create_file` it won't actually create the file, just give you a path to a file that could be created.-------------------------------------------------------------------------------### create_module```pythoncreate_module(data=&quot;&quot;, modpath=&quot;&quot;, tmpdir=&quot;&quot;, make_importable=True)```create a module with python contents that can be imported```pythonbase_dir = &quot;/tmp&quot;f = testdata.create_module(modpath=&quot;foo.bar&quot;, data=&quot;class Che(object): pass&quot;, tmpdir=base_dir)print f # /tmp/foo/bar.py```-------------------------------------------------------------------------------### create_modules```pythoncreate_modules(module_dict, tmpdir=&quot;&quot;, make_importable=True)```create a whole bunch of modules at once```pythonf = testdata.create_modules(  {    &quot;foo.bar&quot;: &quot;class Che(object): pass&quot;,    &quot;foo.bar.baz&quot;: &quot;class Boom(object): pass&quot;,    &quot;foo.che&quot;: &quot;class Bam(object): pass&quot;,  })```-------------------------------------------------------------------------------### get_ascii```pythonget_ascii(str_size=0)```return a string of ascii characters    &gt;&gt;&gt; testdata.get_ascii()    u'IFUKzVAauqgyRY6OV'-------------------------------------------------------------------------------### get_md5```pythonget_md5(val=&quot;&quot;)```return an md5 hash of val (if passed in) or a random val if val is empty    &gt;&gt;&gt; testdata.get_md5()    'e165765400b30772f1d9b3975ce77320'-------------------------------------------------------------------------------### get_hash```pythonget_hash(str_size=32)```return a random hash    &gt;&gt;&gt; testdata.get_hash()    &quot;jYw3HseUl8GLoMc8QejLYFogC2lUYoUs&quot;-------------------------------------------------------------------------------### get_bool```pythonget_bool()```return a boolean (either **True** or **False**)    &gt;&gt;&gt; testdata.get_bool()    False    &gt;&gt;&gt; testdata.get_bool()    True-------------------------------------------------------------------------------### get_float```pythonget_float(min_size=None, max_size=None)```return a floating point number between `min_size` and `max_size`.    &gt;&gt;&gt; testdata.get_float()    2.932229899095845e+307-------------------------------------------------------------------------------### get_int```pythonget_int(min_size=1, max_size=sys.maxsize)```return an integer between `min_size` and `max_size`.    &gt;&gt;&gt; testdata.get_int()    3820706953806377295-------------------------------------------------------------------------------### get_name```pythonget_name(name_count=2, as_str=True)```returns a random name that can be outside the ascii range (eg, name can be unicode)    &gt;&gt;&gt; testdata.get_name()    u'jamel clarke-cabrera'-------------------------------------------------------------------------------### get_email```pythonget_email(name=u'')```returns a random email address in the ascii range.    &gt;&gt;&gt; testdata.get_email()    u'shelley@gmail.com'-------------------------------------------------------------------------------### get_str```pythonget_str(str_size=0, chars=None)```return random characters, which can be unicode.    &gt;&gt;&gt; testdata.get_str()    &quot;q\x0bwZ\u79755\ud077\u027aYm\ud0d8JK\x07\U0010df418tx\x16&quot;-------------------------------------------------------------------------------### get_url```pythonget_url()```return a random url.    &gt;&gt;&gt; testdata.get_url()    u'https://sK6rxrCa626TkQddTyf.com'-------------------------------------------------------------------------------### get_words```pythonget_words(word_count=0, as_str=True)```return a random amount of words, which can be unicode.    &gt;&gt;&gt; testdata.get_words()    &quot;\u043f\u043e\u043d\u044f\u0442\u044c \u043c\u043e\u0436\u043d\u043e felis, habitasse ultrices Nam \u0436\u0435\u043d\u0430&quot;-------------------------------------------------------------------------------### get_past_datetime```pythonget_past_datetime([now])```return a datetime guaranteed to be in the past from `now`    &gt;&gt;&gt; testdata.get_past_datetime()    datetime.datetime(2000, 4, 2, 13, 40, 11, 133351)-------------------------------------------------------------------------------### get_future_datetime```pythonget_future_datetime([now])```return a datetime guaranteed to be in the future from `now`    &gt;&gt;&gt; testdata.get_future_datetime()    datetime.datetime(2017, 8, 3, 15, 54, 58, 670249)-------------------------------------------------------------------------------### get_between_datetime```pythonget_between_datetime(start[, stop])```return a datetime guaranteed to be in the future from `start` and in the past from `stop`    &gt;&gt;&gt; start = datetime.datetime.utcnow() - datetime.timedelta(days=100)    &gt;&gt;&gt; testdata.get_between_datetime(start)    datetime.datetime(2017, 8, 3, 15, 54, 58, 670249)-------------------------------------------------------------------------------## Development### TestingTesting on MacOS:    $ python -m unittest testdata_test### DependenciesDevelopment needs [datatypes](https://github.com/Jaymon/datatypes) on the path. This is kind of a strange thing because datatypes depends on `testdata` for testing. Making `datatypes` available to `testdata` for development should be as easy as:```export PYTHONPATH=$PYTHONPATH:/path/to/dir/containing/datatypes```</longdescription>
</pkgmetadata>