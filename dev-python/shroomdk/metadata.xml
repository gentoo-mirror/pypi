<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python SDK for ShroomDK, by Flipside Crypto[![Python Continuous Testing](https://github.com/FlipsideCrypto/sdk/actions/workflows/ci_python.yml/badge.svg)](https://github.com/FlipsideCrypto/sdk/actions/workflows/ci_python.yml)ShroomDK (SDK), by Flipside Crypto gives you programmatic query access to the most comprehensive blockchain data sets in Web3, for free. More details on ShroomDK [here](https://sdk.flipsidecrypto.xyz).ü•≥### Contents:[üìñ Official Docs](https://github.com/FlipsideCrypto/sdk/tree/main/python#-official-docs)[üß© The Data](https://github.com/FlipsideCrypto/sdk/tree/main/python#-the-data)[üíæ Install the SDK](https://github.com/FlipsideCrypto/sdk/tree/main/python#-install-the-sdk)[ü¶æ Getting Started](https://github.com/FlipsideCrypto/sdk/tree/main/python#-getting-started)[üßê Detailed Example](https://github.com/FlipsideCrypto/sdk/tree/main/python#the-details)[üìÑ Pagination](https://github.com/FlipsideCrypto/sdk/tree/main/python#pagination)[üö¶ Rate Limits](https://github.com/FlipsideCrypto/sdk/tree/main/python#rate-limits)[üôà Error Handling](https://github.com/FlipsideCrypto/sdk/tree/main/python#-error-handling)---&lt;br/&gt;&lt;br/&gt;## üìñ Official Docs[https://docs.flipsidecrypto.com/shroomdk-sdk/sdks/python](https://docs.flipsidecrypto.com/shroomdk-sdk/sdks/python)## üß© The DataFlipside Crypto's Analytics Team has curated dozens of blockchain data sets with more being added each week. All tables available to query in Flipside's [Visual Query Editor/Dashboard Builder](https://flipside.new) product can be queried programmatically using ShroomDK. ![blockchains available to query](https://sdk.flipsidecrypto.xyz/media/shroomdk/blockchains.png)## üíæ Install the SDK&lt;strong&gt;Python 3.7 and above, is required to use `shroomdk`&lt;/strong&gt;&lt;em&gt;If you don't already have an API Key mint one [here](https://sdk.flipsidecrypto.xyz).&lt;/em&gt;```bashpip install shroomdk```## ü¶æ Getting Started```pythonfrom shroomdk import ShroomDK# Initialize `ShroomDK` with your API Keysdk = ShroomDK(&quot;&lt;YOUR_API_KEY&gt;&quot;)# Parameters can be passed into SQL statements # via native string interpolationmy_address = &quot;0x....&quot;sql = f&quot;&quot;&quot;    SELECT         nft_address,         mint_price_eth,         mint_price_usd     FROM ethereum.core.ez_nft_mints     WHERE nft_to_address = LOWER('{my_address}')&quot;&quot;&quot;# Run the query against Flipside's query engine # and await the resultsquery_result_set = sdk.query(sql)# Iterate over the resultsfor record in query_result_set.records:    nft_address = record['nft_address']    mint_price_eth = record['mint_price_eth']    mint_price_usd = record['mint_price_usd']    print(f&quot;${nft_address} minted for {mint_price_eth}ETH (${mint_price_usd})&quot;)```## The Details### Executing a QueryWhen executing a query the following parameters can be passed into the `query` method on the `ShroomDK` object:| Argument               | Description                                                                        | Default Value   ||------------------------|------------------------------------------------------------------------------------|-----------------|| sql                    | The sql string to execute                                                          | None (required) || ttl_minutes            | The number of minutes to cache the query results                                   | 60              || cached                 | An override on the query result cache. A value of false will re-execute the query. | True            || timeout_minutes        | The number of minutes until your query run times out                               | 20              || retry_interval_seconds | The number of seconds to wait between polls to the server                           | 1               || page_size              | The number of rows/records to return                                               | 100,000         || page_number            | The page number to return (starts at 1)                                            | 1               |Let's create a query to retrieve all NFTs minted by an address:```pythonmy_address = &quot;0x....&quot;sql = f&quot;&quot;&quot;    SELECT         nft_address,         mint_price_eth,         mint_price_usd     FROM ethereum.core.ez_nft_mints     WHERE nft_to_address = LOWER('{my_address}')    LIMIT 100&quot;&quot;&quot;```Now let's execute the query and retrieve the first 5 rows of the result set. Note we will set `page_size` to 5 and `page_number` to 1 to retrieve just the first 5 rows. ```pythonquery_result_set = sdk.query(    sql,    ttl_minutes=60,    cached=True,    timeout_minutes=20,    retry_interval_seconds=1,    page_size=5,    page_number=1)```#### CachingThe results of this query will be cached for 60 minutes since the `ttl_minutes` parameter is set to 60. #### üìÑ Pagination If we wanted to retrieve the next 5 rows of the query result set simply increment the `page_number` to 2 and run:```pythonquery_result_set = sdk.query(    sql,    ttl_minutes=60,    cached=True,    timeout_minutes=20,    retry_interval_seconds=1,    page_size=5,    page_number=2)```&lt;em&gt;Note! This will not use up your daily query quota since the query results are cached (in accordance with the TTL) and we're not re-running the SQL just retrieving a slice of the overall result set.&lt;/em&gt;All query runs can return a maximum of 1,000,000 rows and a maximum of 100k records can be returned in a single page. More details on pagination can be found [here](https://docs.flipsidecrypto.com/shroomdk-sdk/query-pagination).Now let's examine the query result object that's returned.### The `QueryResultSet` ObjectAfter executing a query the results are stored in a `QueryResultSet` object:```pythonclass QueryResultSet(BaseModel):    query_id: Union[str, None] = Field(None, description=&quot;The server id of the query&quot;)    status: str = Field(False, description=&quot;The status of the query (`PENDING`, `FINISHED`, `ERROR`)&quot;)    columns: Union[List[str], None] = Field(None, description=&quot;The names of the columns in the result set&quot;)    column_types: Union[List[str], None] = Field(None, description=&quot;The type of the columns in the result set&quot;)    rows: Union[List[Any], None] = Field(None, description=&quot;The results of the query&quot;)    run_stats: Union[QueryRunStats, None] = Field(        None,        description=&quot;Summary stats on the query run (i.e. the number of rows returned, the elapsed time, etc)&quot;,    )    records: Union[List[Any], None] = Field(None, description=&quot;The results of the query transformed as an array of objects&quot;)    error: Any```Let's iterate over the results from our query above.&lt;br&gt;&lt;br&gt;Our query selected `nft_address`, `mint_price_eth`, and `mint_price_usd`. We can access the returned data via the `records` parameter. The column names in our query are assigned as keys in each record object.```pythonfor record in query_result_set.records:    nft_address = record['nft_address']    mint_price_eth = record['mint_price_eth']    mint_price_usd = record['mint_price_usd']    print(f&quot;${nft_address} minted for {mint_price_eth}E ({mint_price_usd})USD&quot;)```Other useful information can be accessed on the query result set object such as run stats, i.e. how long the query took to execute:```pythonstarted_at = query_result_set.run_stats.started_atended_at = query_result_set.run_stats.ended_atelapsed_seconds = query_result_set.run_stats.elapsed_secondsrecord_count = query_result_set.run_stats.record_countprint(f&quot;This query took ${elapsed_seconds} seconds to run and returned {record_count} records from the database.&quot;)```## üö¶ Rate LimitsEvery API key is subject to a rate limit over a moving 5 minute window, as well as an aggregate daily limit.&lt;br&gt;&lt;br&gt;If the limit is reached in a 5 minute period, the sdk will exponentially backoff and retry the query up to the `timeout_minutes` parameter set when calling the `query` method.## üôà Error HandlingThe sdk implements the following errors that can be handled when calling the `query` method:### Query Run Time Errors##### `QueryRunRateLimitError`Occurs when you have exceeded the rate limit for creating/running new queries. Example:```pythonfrom shroomdk.errors import QueryRunRateLimitErrortry:    sdk.query(sql)except QueryRunRateLimitError as e:    print(f&quot;you have been rate limited: {e.message}&quot;)```##### `QueryRunTimeoutError`Occurs when your query has exceeded the `timeout_minutes` parameter passed into the `query` method. Example:```pythonfrom shroomdk.errors import QueryRunTimeoutErrortry:    sdk.query(sql, timeout_minutes=10)except QueryRunTimeoutError as e:    print(f&quot;your query has taken longer than 10 minutes to run: {e.message}&quot;)```##### `QueryRunExecutionError`Occurs when your query fails to compile/run due to malformed SQL statements. Example:```pythonfrom shroomdk.errors import QueryRunExecutionErrortry:    sdk.query(sql)except QueryRunExecutionError as e:    print(f&quot;your sql is malformed: {e.message}&quot;)```### Server Error`ServerError` - occurs when there is a server-side error that cannot be resolved. This typically indicates an issue with Flipside Crypto's query engine API. If the issue persists please contact support in the Flipside Crypto discord server. ```pythonfrom shroomdk.errors import ServerErrortry:    sdk.query(sql)except ServerError as e:    print(f&quot;a server-side error has occurred: {e.message}&quot;)```### User Error`UserError` - occurs when you, the user, submit a bad request to the API. This often occurs when an invalid API Key is used and the SDK is unable to authenticate.```pythonfrom shroomdk.errors import UserErrortry:    sdk.query(sql)except UserError as e:    print(f&quot;a user error has occurred: {e.message}&quot;)```### SDK Error`SDKError` - this error is raised when a generic client-side error occurs that cannot be accounted for by the other errors. SDK level errors should be reported [here](https://github.com/FlipsideCrypto/sdk/issues) as a Github Issue with a full stack-trace and detailed steps to reproduce.```pythonfrom shroomdk.errors import SDKErrortry:    sdk.query(sql)except SDKError as e:    print(f&quot;a client-side SDK error has occurred: {e.message}&quot;)```</longdescription>
</pkgmetadata>