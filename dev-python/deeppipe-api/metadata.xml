<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DeepPipe: Deep Pipeline Embeddings for AutoML*DeepPipe* efficiently optimizes Machine Learning Pipelines using meta-learning. For detailed information, refer to our [paper](https://arxiv.org/abs/2305.14009) *Deep Pipeline Embeddings for AutoML* accepted at KDD 2023. Additionally, you can visit our [blog-post](https://releaunifreiburg.github.io/deepppipe/) to have a friendly insight on how our method works.&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;figures/DeepPipe_architecture.png&quot; alt=&quot;DeepPipe Architecture&quot; width=&quot;400px&quot;&gt;&lt;/p&gt;## InstallationWe present an API for optimizing pipelines in scikit-learn based on the TensorOboe search space. You can use it to search for accurate pipelines or for benchmarking your Machine Learning model on tabular data. ```bashconda create -n deeppipe_env python==3.9pip install deeppipe_api```## Getting startedWe present an example using an OpenML dataset. However, it works with any tabular data typed as pandas dataframe.```pythonfrom deeppipe_api.deeppipe import load_data, openml, DeepPipetask_id = 37task = openml.tasks.get_task(task_id)X_train, X_test, y_train, y_test = load_data(task, fold=0)deep_pipe = DeepPipe(n_iters = 50,  #bo iterations                    time_limit = 3600 #in seconds                    )deep_pipe.fit(X_train, y_train)y_pred = deep_pipe.predict(X_test)#Testscore = deep_pipe.score(X_test, y_test)print(&quot;Test acc.:&quot;, score)#print best pipelineprint(deep_pipe.model)```### Ensemble of PipelinesIt is possible to ensemble the best pipelines, by using a greedy approach. ```pythonfrom deeppipe_api.deeppipe import load_data, openml, DeepPipetask = openml.tasks.get_task(task_id=37)X_train, X_test, y_train, y_test = load_data(task, fold=0)deep_pipe = DeepPipe(n_iters = 50,  #bo iterations                    time_limit = 3600, #in seconds                    create_ensemble = False,                    ensemble_size = 10,                    )deep_pipe.fit(X_train, y_train)y_pred = deep_pipe.predict(X_test)score = deep_pipe.score(X_test, y_test)print(&quot;Test acc.:&quot;, score) ```## Advanced UsageFor meta-training *DeepPipe* or testing other search spaces, you can refer to the folder `src/deeppipe_api/experiments/`.## Our PaperIf you use this repository/package, please cite our paper:```@article{arango2023deep,  title={Deep Pipeline Embeddings for AutoML},  author={Arango, Sebastian Pineda and Grabocka, Josif},  journal={arXiv preprint arXiv:2305.14009},  year={2023}}```</longdescription>
</pkgmetadata>