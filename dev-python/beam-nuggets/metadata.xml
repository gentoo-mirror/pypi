<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI](https://img.shields.io/pypi/v/beam-nuggets.svg)](https://pypi.org/project/beam-nuggets/) [![PyPI - Downloads](https://img.shields.io/pypi/dm/beam-nuggets.svg)](https://pypi.org/project/beam-nuggets/)# AboutA collection of random transforms for the [Apache beam](https://beam.apache.org/) python SDK . Many are simple transforms. The most useful ones are those for reading/writing from/to relational databases.# Installation* Using pip```bashpip install beam-nuggets```* From source```bashgit clone git@github.com:mohaseeb/beam-nuggets.gitcd beam-nuggetspip install .```# Supported transforms### IO* [relational_db.ReadFromDB](http://mohaseeb.com/beam-nuggets/beam_nuggets.io.relational_db.html#beam_nuggets.io.relational_db.ReadFromDB) for reading from relational database tables. * [relational_db.Write](http://mohaseeb.com/beam-nuggets/beam_nuggets.io.relational_db.html#beam_nuggets.io.relational_db.Write) for writing to relational database tables.&lt;br&gt;Above transforms uses [SqlAlchemy](https://www.sqlalchemy.org/) to communicate with the database, and hence they can read from and write to all relational databases supported by SqlAlchemy. The transforms [are tested](https://github.com/mohaseeb/beam-nuggets/tree/master/beam_nuggets/io/test) against PostgreSQL, MySQL and SQLite.* [kafkaio.KafkaProduce](http://mohaseeb.com/beam-nuggets/beam_nuggets.io.kafkaio.html#beam_nuggets.io.kafkaio.KafkaProduce) for writing to Kafka topics.* [kafkaio.KafkaConsume](http://mohaseeb.com/beam-nuggets/beam_nuggets.io.kafkaio.html#beam_nuggets.io.kafkaio.KafkaConsume) for consuming from kafka topics.* [csvio.Read](http://mohaseeb.com/beam-nuggets/beam_nuggets.io.csvio.html#beam_nuggets.io.csvio.Read)for reading CSV files.&lt;!--read from sql database--&gt;&lt;!--read from postgres postgresql--&gt;&lt;!--read from mysql--&gt;&lt;!--read from oracle--&gt;&lt;!--write to sql database--&gt;&lt;!--write to postgres postgresql--&gt;&lt;!--write to mysql--&gt;&lt;!--write to oracle--&gt;&lt;!--read from kafka topic--&gt;&lt;!--write to kafka topic--&gt;### Others* [SelectFromNestedDict](http://mohaseeb.com/beam-nuggets/beam_nuggets.transforms.nested_dict.html#beam_nuggets.transforms.nested_dict.SelectFromNestedDict)Selects a subset from records formed of nested dictionaries.* [ParseJson](beam_nuggets.transforms.json_.html#beam_nuggets.transforms.json_.ParseJson)* [AssignUniqueId](beam_nuggets.transforms.json_.html#beam_nuggets.transforms.json_.ParseJson)# DocumentationSee [here](http://mohaseeb.com/beam-nuggets/).# UsageWrite data to an SQLite table using beam-nugget's [relational_db.Write](http://mohaseeb.com/beam-nuggets/beam_nuggets.io.relational_db.html#beam_nuggets.io.relational_db.Write) transform.```python# write_sqlite.py contentsimport apache_beam as beamfrom apache_beam.options.pipeline_options import PipelineOptionsfrom beam_nuggets.io import relational_dbrecords = [    {'name': 'Jan', 'num': 1},    {'name': 'Feb', 'num': 2}]source_config = relational_db.SourceConfiguration(    drivername='sqlite',    database='/tmp/months_db.sqlite',    create_if_missing=True  # create the database if not there )table_config = relational_db.TableConfiguration(    name='months',    create_if_missing=True,  # automatically create the table if not there    primary_key_columns=['num']  # and use 'num' column as primary key)    with beam.Pipeline(options=PipelineOptions()) as p:  # Will use local runner    months = p | &quot;Reading month records&quot; &gt;&gt; beam.Create(records)    months | 'Writing to DB' &gt;&gt; relational_db.Write(        source_config=source_config,        table_config=table_config    )```Execute the pipeline```bashpython write_sqlite.py ```Examine the contents```bashsqlite3 /tmp/months_db.sqlite 'select * from months'# output:# 1.0|Jan# 2.0|Feb```To write the same data to a PostgreSQL table instead, just create a suitable [relational_db.SourceConfiguration](http://mohaseeb.com/beam-nuggets/beam_nuggets.io.relational_db_api.html#beam_nuggets.io.relational_db_api.SourceConfiguration) as follows.```pythonsource_config = relational_db.SourceConfiguration(    drivername='postgresql+pg8000',    host='localhost',    port=5432,    username='postgres',    password='password',    database='calendar',    create_if_missing=True  # create the database if not there )```Click [here](https://github.com/mohaseeb/beam-nuggets/tree/master/examples/dataflow/)for more examples, including writing to PostgreSQL in Google Cloud Platform using the DataFlowRunner. &lt;br&gt;&lt;br&gt;An example showing how you can use beam-nugget's [relational_db.ReadFromDB](http://mohaseeb.com/beam-nuggets/beam_nuggets.io.relational_db.html#beam_nuggets.io.relational_db.ReadFromDB) transform to read from a PostgreSQL database table. ```pythonfrom __future__ import print_functionimport apache_beam as beamfrom apache_beam.options.pipeline_options import PipelineOptionsfrom beam_nuggets.io import relational_dbwith beam.Pipeline(options=PipelineOptions()) as p:    source_config = relational_db.SourceConfiguration(        drivername='postgresql+pg8000',        host='localhost',        port=5432,        username='postgres',        password='password',        database='calendar',    )    records = p | &quot;Reading records from db&quot; &gt;&gt; relational_db.ReadFromDB(        source_config=source_config,        table_name='months',        query='select num, name from months'  # optional. When omitted, all table records are returned.     )    records | 'Writing to stdout' &gt;&gt; beam.Map(print)```See [here](https://github.com/mohaseeb/beam-nuggets/tree/master/examples) for more examples.# Development* Install```bashgit clone git@github.com:mohaseeb/beam-nuggets.gitcd beam-nuggetsexport BEAM_NUGGETS_ROOT=`pwd`pip install -e .[dev]```* Make changes on dedicated dev branches* Run tests```bashcd $BEAM_NUGGETS_ROOTpython -m unittest discover -v```* Generate docs```bashcd $BEAM_NUGGETS_ROOTdocs/generate_docs.sh```* Create a PR against master.* After merging the accepted PR and updating the local master, upload a new build to pypi.```bashcd $BEAM_NUGGETS_ROOTscripts/build_test_deploy.sh```# Backlog * versioned docs?* Summarize the investigation of using Source/Sink Vs ParDo(and GroupBy) for IO* more nuggets: WriteToCsv* Investigate readiness of SDF ParDo, and possibility to use for relational_db.ReadFromDB* integration tests* DB transforms failures handling on IO transforms* more nuggets: Elasticsearch, Mongo * WriteToRelationalDB, logging# Contributions by[mohaseeb](https://github.com/mohaseeb), [astrocox](https://github.com/astrocox), [2514millerj](https://github.com/2514millerj), [alfredo](https://github.com/alfredo), [shivangkumar](https://github.com/shivangkumar)# LicenceMIT</longdescription>
</pkgmetadata>