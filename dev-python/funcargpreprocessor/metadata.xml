<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Function Argument Pre-ProcessorThis is a abstract library that need to be extended before put actual use.The primary use case is to extend it as a `Flask Extenstion` but is open to use with any other environment/framework that needs to deal with http endpoints eg: `AWS Lambda`   ## Implementations   [flask_requestpreprocesser](https://github.com/sabariramc/flask_requestpreprocesser)## Installation```bash $ pip install funcargpreprocessor```or download the code and run```bash $ python3 setup.py install```## What it does? - Extraction and transformation of function argument and raise appropriate exceptions## Example - Please refer [testimplementation.py](https://github.com/sabariramc/funcargpreprocessor/blob/master/testimplementation.py) and [fieldtest.py](https://github.com/sabariramc/funcargpreprocessor/blob/master/fieldtest.py) for examples### ExplanationThe following explanantion uses the example from `test` folder```pythondef get_current_time():    return datetime.now().replace(microsecond=0)def get_current_date():    return date.today()def get_future_date(date_factor=1):    def inner_fu():        return date.today() + timedelta(date_factor)    return inner_fufrom enum import Enumclass Gender(Enum):    MALE = &quot;male&quot;    FEMALE = &quot;female&quot;    TRANSGENDER = &quot;transgender&quot;definition = {    &quot;pageNo&quot;: { #Key name expected from the HTTP endpoint            &quot;data_type&quot;: int # Data type expected               , &quot;min_val&quot;: 0 # Min validation for the key             , &quot;max_val&quot;: 20 # Max validation for the key            , 'alias': 'page_no' # Key for the function argument, to the function the argument will be 'page_no'                                 # Need? most of the time the http request are expected json and the keys will be in camelCase            , &quot;default&quot;: 1 # Default value for the field if no value has been passed    }    , &quot;start_date&quot;: {                &quot;data_type&quot;: DateArg('%Y-%m-%d') # Expects a date argument in &lt;str&gt;'YYYY-MM-DD' format or datetime.date object accepts '2020-01-10', datetime.date(2020, 1, 10)  converts,in case of a string argument, to datetime.date(2020, 1, 10) and passes it to the function                , &quot;min_val&quot;: get_current_date # Function can be passed for min value, this function should not take any argument and should return a single value of the same type                , &quot;max_val&quot;: get_future_date(10) # Function can be passed for max value, this function should not take any argument and should return a single value of the same type                , &quot;required&quot;: True # This key is required to be there in the input    }    , &quot;id_list&quot;: {                &quot;data_type&quot;: list # Expects list of value                , &quot;nested&quot;: int # The values in the list should be int same rule as `date_type`                , &quot;value_list&quot;: [0, 1, 2, 3] # Accepted values, valid argument ex: [1,2], [1], [2,3,0]                                             # Need? Multiselect options    }    , &quot;gender&quot;: {&quot;data_type&quot;: str, &quot;value_list&quot;: Gender} #Enum can be used for the value list and will be marshalled    , &quot;random_flag&quot;: {&quot;data_type&quot;: int, &quot;value_list&quot;: [0,1]}     , 'reg_time': {&quot;data_type&quot;: DateTimeArg('%Y-%m-%d %H:%M:%S'),                     &quot;default&quot;: get_current_time # Function can be passed for default value, this function should not take any argument and should return a single value of the same type    }    , &quot;location&quot;: {&quot;data_type&quot;: list        , &quot;nested&quot;: { # Custom definition for objects in the list            &quot;address_line_1&quot;: {&quot;data_type&quot;: str, &quot;required&quot;: True}            , &quot;address_line_2&quot;: {&quot;data_type&quot;: str                                    , &quot;min_len&quot;: 5 #Mininum length expected for the argument                                    , &quot;max_len&quot;: 10 # Maximum length accepted for the argument                                }            , &quot;latitude&quot;: {&quot;data_type&quot;: DecimalArg(), &quot;min_val&quot;: Decimal(&quot;-90&quot;), &quot;max_val&quot;: Decimal(&quot;90&quot;)}            , &quot;longitude&quot;: {&quot;data_type&quot;: DecimalArg(), &quot;min_val&quot;: Decimal(&quot;-180&quot;), &quot;max_val&quot;: Decimal(&quot;180&quot;)}            , &quot;pincode&quot;: {&quot;data_type&quot;: int, &quot;required&quot;: True}            , &quot;contact_person&quot;: {                    &quot;data_type&quot;: dict                    , &quot;nested&quot;: {                        &quot;first_name&quot;: {&quot;data_type&quot;: str, &quot;required&quot;: True}                        , &quot;last_name&quot;: {&quot;data_type&quot;: str}                        , &quot;phone_number&quot;: {                                    &quot;data_type&quot;: str                                    , &quot;required&quot;: True                                    , &quot;regex&quot;: r&quot;[0-9]{10,12}&quot; # Regular expression validation                                    , &quot;regex_error_message&quot;: &quot;&lt;some message&gt;&quot; # Message when the RegEx validation fails                                 }                    }            }           }    }}```  </longdescription>
</pkgmetadata>