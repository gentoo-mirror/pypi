<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;stalcraft-api unofficial python library&lt;/h1&gt;&lt;div align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pypi.org/project/stalcraft-api&quot; alt=&quot;PyPi Package Version&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/stalcraft-api.svg?style=flat-square&quot;/&gt;&lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/stalcraft-api&quot; alt=&quot;Supported python versions&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/pyversions/stalcraft-api.svg?style=flat-square&quot;/&gt;&lt;/a&gt;    &lt;a href=&quot;https://opensource.org/licenses/MIT&quot; alt=&quot;MIT License&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/l/stalcraft-api.svg?style=flat-square&quot;/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div align=&quot;center&quot;&gt;    &lt;p&gt;        &lt;b&gt;Official API documentation:&lt;/b&gt; https://eapi.stalcraft.net    &lt;/p&gt;    &lt;p&gt;        &lt;b&gt;Before you can use the API, you must register your application and receive approval&lt;b&gt;    &lt;/p&gt;    &lt;p&gt;        &lt;b&gt;For testing Demo API is available&lt;b&gt;    &lt;/p&gt;    &lt;p&gt;        &lt;a href=&quot;https://eapi.stalcraft.net/registration.html&quot;&gt;more about applications&lt;/a&gt;    &lt;/p&gt;&lt;/div&gt;&lt;br&gt;# 🔧 Install### Pip```consolepip install stalcraft-api -U```&lt;details&gt;&lt;summary&gt;Manual&lt;/summary&gt;```consolegit clone git@github.com:onejeuu/stalcraft-api.git``````consolecd stalcraft-api``````consolepoetry install```&lt;/details&gt;&lt;br&gt;# ⚡ Quick Start```pythonfrom stalcraft import AppClient, Region# Only as example.# Do not store your credentials in code.TOKEN = &quot;YOUR_TOKEN&quot;client = AppClient(token=TOKEN)print(client.emission(Region.EU))```&lt;details&gt;&lt;summary&gt;🐇 Asyncio&lt;/summary&gt;```pythonimport asynciofrom stalcraft import Regionfrom stalcraft.asyncio import AsyncAppClientTOKEN = &quot;YOUR_TOKEN&quot;async def main():    client = AsyncAppClient(token=TOKEN)    print(await client.emission(Region.EU))asyncio.run(main())```&lt;/details&gt;&lt;br&gt;# 🚫 Exceptions```StalcraftApiException├── InvalidToken├── MissingCredentials├── ApiRequestError│   ├── RequestUnauthorised│   ├── RequestInvalidParameter│   ├── RequestNotFound│   └── RateLimitReached└── ItemIdError    ├── ListingJsonNotFound    └── ItemIdNotFound```&lt;br&gt;# 🔑 Authorization```pythonfrom stalcraft import AppAuth, UserAuth# Only as example.# Do not store your credentials in code.CLIENT_ID = &quot;YOUR_CLIENT_ID&quot;CLIENT_SECRET = &quot;YOUR_CLIENT_SECRET&quot;app_auth = AppAuth(CLIENT_ID, CLIENT_SECRET)user_auth = UserAuth(CLIENT_ID, CLIENT_SECRET)```&lt;details&gt;&lt;summary&gt;Get App Token&lt;/summary&gt;```pythonprint(app_auth.get_token())```&lt;/details&gt;&lt;br&gt;&lt;details&gt;&lt;summary&gt;Get User Token&lt;/summary&gt;```pythonprint(&quot;Go to:&quot;, user_auth.code_url)code = input(&quot;Enter code:&quot;)print()print(user_auth.get_token(code))```&lt;/details&gt;&lt;br&gt;&lt;details&gt;&lt;summary&gt;Refresh User Token&lt;/summary&gt;```pythonREFRESH_TOKEN = &quot;REFRESH_TOKEN&quot;print(user_auth.refresh_token(REFRESH_TOKEN))```&lt;/details&gt;&lt;br&gt;# 📋 Output Formats```pythonfrom stalcraft import AppClientTOKEN = &quot;YOUR_TOKEN&quot;client = AppClient(token=TOKEN)print(&quot;Pydantic Object:&quot;)print(client.emission())client = AppClient(TOKEN, json=True)# or# client.json = Trueprint()print(&quot;Json:&quot;)print(client.emission())```### Output:```pythonPydantic Object:Emission(    current_start=None,    previous_start=datetime.datetime(2023, 1, 30, 12, 0, 0, tzinfo=datetime.timezone.utc),    previous_end=datetime.datetime(2023, 1, 30, 12, 5, 0, tzinfo=datetime.timezone.utc))Json:{    'previousStart': '2023-01-30T12:00:00Z',    'previousEnd': '2023-01-30T12:05:00Z'}```</longdescription>
</pkgmetadata>