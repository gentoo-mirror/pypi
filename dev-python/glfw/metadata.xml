<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pyGLFW======This module provides Python bindings for `GLFW &lt;http://www.glfw.org/&gt;`__(on GitHub: `glfw/glfw &lt;http://github.com/glfw/glfw&gt;`__). It is a``ctypes`` wrapper which keeps very close to the original GLFW API,except for:-  function names use the pythonic ``words_with_underscores`` notation   instead of ``camelCase``-  ``GLFW_`` and ``glfw`` prefixes have been removed, as their function   is replaced by the module namespace   (you can use ``from glfw.GLFW import *`` if you prefer the naming   convention used by the GLFW C API)-  structs have been replaced with Python sequences and namedtuples-  functions like ``glfwGetMonitors`` return a list instead of a pointer   and an object count-  Gamma ramps use floats between 0.0 and 1.0 instead of unsigned shorts   (use ``glfw.NORMALIZE_GAMMA_RAMPS=False`` to disable this)-  GLFW errors are reported as ``glfw.GLFWError`` warnings if no error   callback is set (use ``glfw.ERROR_REPORTING=False`` to disable this,   set it to 'warn' instead to issue warnings, set it to 'log' to log it   using the 'glfw' logger or set it to a dict to define the behavior for   specific error codes)-  instead of a sequence for ``GLFWimage`` structs, PIL/pillow ``Image``   objects can be usedInstallation------------pyGLFW can be installed using pip:.. code:: sh    pip install glfwWindows~~~~~~~The GLFW shared library and Visual C++ runtime are included in the Python wheels.To use a different GLFW library, you can set ``PYGLFW_LIBRARY`` to its location.macOS~~~~~The GLFW shared library for 64-bit is included in the Python wheels for macOS.If you are using a 32-bit Python installation or otherwise cannot use thelibrary downloaded with the wheel, you can build and install it yourself by`compiling GLFW from source &lt;http://www.glfw.org/docs/latest/compile.html&gt;`__(use ``-DBUILD_SHARED_LIBS=ON``).pyGLFW will search for the library in a list of search paths (including thosein ``DYLD_LIBRARY_PATH``). If you want to use a specific library, you can setthe ``PYGLFW_LIBRARY`` environment variable to its path.Linux~~~~~The GLFW shared library is included in the Python wheels for Linux. AlthoughpyGLFW will try to detect whether the GLFW library for Wayland or X11 shouldbe used, you can set the ``PYGLFW_LIBRARY_VARIANT`` variable to ``wayland`` or``x11`` to select either variant of the library.If you cannot use these on your system, you can install the GLFW sharedlibrary using a package management system (e.g. ``apt install libglfw3``on Debian or Ubuntu) or you can build and install it yourself by`compiling GLFW from source &lt;http://www.glfw.org/docs/latest/compile.html&gt;`__(use ``-DBUILD_SHARED_LIBS=ON``).pyGLFW will search for the library in a list of search paths (including thosein ``LD_LIBRARY_PATH``). If you want to use a specific library, you can setthe ``PYGLFW_LIBRARY`` environment variable to its path.cx_Freeze / PyInstaller~~~~~~~~~~~~~~~~~~~~~~~pyGLFW will search for the GLFW library in the current working directory, the directoryof the executable and in the package on non-Windows platforms if running in anexecutable frozen with cx_Freeze or PyInstaller, unless the ``PYGLFW_LIBRARY``environment variable is set.Development Version~~~~~~~~~~~~~~~~~~~If you are using the development version of GLFW and would like to use wrappersfor currently unreleased macros and functions, you can instead install:.. code:: sh    pip install glfw[preview]or set the ``PYGLFW_PREVIEW`` environment variable.Note, however, that there will be a slight delay between the developmentversion of GLFW and the wrappers provided by this package.Example Code------------The example from the `GLFWdocumentation &lt;http://www.glfw.org/documentation.html&gt;`__ ported topyGLFW:.. code:: python    import glfw    def main():        # Initialize the library        if not glfw.init():            return        # Create a windowed mode window and its OpenGL context        window = glfw.create_window(640, 480, &quot;Hello World&quot;, None, None)        if not window:            glfw.terminate()            return        # Make the window's context current        glfw.make_context_current(window)        # Loop until the user closes the window        while not glfw.window_should_close(window):            # Render here, e.g. using pyOpenGL            # Swap front and back buffers            glfw.swap_buffers(window)            # Poll for and process events            glfw.poll_events()        glfw.terminate()    if __name__ == &quot;__main__&quot;:        main()</longdescription>
</pkgmetadata>