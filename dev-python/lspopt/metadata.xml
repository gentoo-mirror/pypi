<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># LSPOpt![Build and Test](https://github.com/hbldh/lspopt/workflows/Build%20and%20Test/badge.svg)[![PyPI version](https://img.shields.io/pypi/v/lspopt.svg)](https://pypi.org/project/lspopt/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)This module is a Python implementation of the multitaper window method described in [\[1\]](#references) for estimating Wigner spectra for certain locallystationary processes.Abstract from [\[1\]](#references):&gt; This paper investigates the time-discrete multitapers that give a mean square error optimal Wigner spectrum estimate for a class&gt; of locally stationary processes (LSPs). The accuracy in the estimation of the time-variable Wigner spectrum of the LSP is evaluated&gt; and compared with other frequently used methods. The optimal multitapers are also approximated by Hermite functions, which is&gt; computationally more efficient, and the errors introduced by this approximation are studied. Additionally, the number of windows&gt; included in a multitaper spectrum estimate is often crucial and an investigation of the error caused by limiting this number is made.&gt; Finally, the same optimal set of weights can be stored and utilized for different window lengths. As a result, the optimal multitapers&gt; are shown to be well approximated by Hermite functions, and a limited number of windows can be used for a mean square error&gt; optimal spectrogram estimate.    ## InstallationInstall via pip:    pip install lspoptIf you prefer to use `conda`, see [instructions in this repo](https://github.com/conda-forge/lspopt-feedstock).## TestingTest with `pytest`:    pytest tests/See test badge at the top of this README for link to test coverage and reports.## UsageTo generate the taper windows only, use the `lspopt` method:```pythonfrom lspopt import lspoptH, w = lspopt(N=256, c_parameter=20.0)```    There is also a convenience method for using the [SciPy spectrogram method](https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.spectrogram.html#scipy.signal.spectrogram)with the `lspopt` multitaper windows:```pythonfrom lspopt import spectrogram_lspoptf, t, Sxx = spectrogram_lspopt(x, fs, c_parameter=20.0)```    This can then be plotted with e.g. [matplotlib](http://matplotlib.org/).### ExampleOne can generate a [chirp](https://docs.scipy.org/doc/scipy-0.16.0/reference/generated/scipy.signal.chirp.html)process realisation and run spectrogram methods on this. ```pythonimport numpy as npfrom scipy.signal import chirp, spectrogramimport matplotlib.pyplot as pltfrom lspopt.lsp import spectrogram_lspoptfs = 10000N = 100000amp = 2 * np.sqrt(2)noise_power = 0.001 * fs / 2time = np.arange(N) / fsfreq = np.linspace(1000, 2000, N)x = amp * chirp(time, 1000, 2.0, 6000, method='quadratic') + \    np.random.normal(scale=np.sqrt(noise_power), size=time.shape)f, t, Sxx = spectrogram(x, fs)ax = plt.subplot(211)ax.pcolormesh(t, f, Sxx)ax.set_ylabel('Frequency [Hz]')ax.set_xlabel('Time [sec]')f, t, Sxx = spectrogram_lspopt(x, fs, c_parameter=20.0)ax = plt.subplot(212)ax.pcolormesh(t, f, Sxx)ax.set_ylabel('Frequency [Hz]')ax.set_xlabel('Time [sec]')plt.tight_layout()plt.show()```![Spectrogram plot](https://github.com/hbldh/lspopt/blob/master/plot.png &quot;Top: Using SciPy's spectrogram method. Bottom: Using LSPOpt's spectrogram solution.&quot;)*Top: Using SciPy's spectrogram method. Bottom: Using LSPOpt's spectrogram solution.*## References\[1\] [Hansson-Sandsten, M. (2011). Optimal multitaper Wigner spectrum estimation of a class of locally stationary processes using Hermite functions. EURASIP Journal on Advances in Signal Processing, 2011, 10.](https://dx.doi.org/10.1155/2011/980805)# ChangelogAll notable changes to this project will be documented in this file.The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).## [1.3.0] - 2023-01-24### Changed- Modified test matrix in CI### Removed- Support for Python 2.7 and 3.6.- Dependency on `six`.## [1.2.0] - 2022-06-08### Added- New plot file### Fixed- Source distribution was broken on PyPI. Modified `MANIFEST.in` to correct that (#5 and #6)- Url to missing plot file- Fixed some incorrect int declarations using `1e3` notation### Removed- Removed Pipfile## [1.1.1] - 2020-09-28### Added- Added `CHANGELOG.md`### Changed- Change CI from Azure Devops to Github Actions## [1.1.0] - 2019-06-19### Added- First PyPI-released version## [1.0.0] - 2016-08-22### Added- Regarded as a feature-complete, stable library.[Unreleased]: https://github.com/hbldh/lspopt/compare/v1.2.0...HEAD[1.2.0]: https://github.com/hbldh/lspopt/compare/v1.1.1...v1.2.0[1.1.1]: https://github.com/hbldh/lspopt/compare/v1.1.0...v1.1.1[1.1.0]: https://github.com/hbldh/lspopt/compare/v1.0.0...v1.1.0</longdescription>
</pkgmetadata>