<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># [wagtailmedia](https://pypi.org/project/wagtailmedia/)[![PyPI](https://img.shields.io/pypi/v/wagtailmedia.svg)](https://pypi.org/project/wagtailmedia/)[![PyPI downloads](https://img.shields.io/pypi/dm/wagtailmedia.svg)](https://pypi.org/project/wagtailmedia/)[![Build Status](https://github.com/torchbox/wagtailmedia/workflows/CI/badge.svg)](https://github.com/torchbox/wagtailmedia/actions)[![Coverage](https://codecov.io/github/torchbox/wagtailmedia/coverage.svg?branch=master)](https://codecov.io/github/torchbox/wagtailmedia?branch=master)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/torchbox/wagtailmedia/main.svg)](https://results.pre-commit.ci/latest/github/torchbox/wagtailmedia/main)A module for Wagtail that provides functionality similar to `wagtail.documents` module,but for audio and video files.## InstallInstall using pip:```shpip install wagtailmedia````wagtailmedia` is compatible with Wagtail 4.1 and above. Check out older releases for compatibility with older versions of Wagtail.### SettingsIn your settings file, add `wagtailmedia` to `INSTALLED_APPS`:```pythonINSTALLED_APPS = [    # ...    &quot;wagtailmedia&quot;,    # ...]```All wagtailmedia settings are defined in a single `WAGTAILMEDIA` dictionary in your settings file. Thedefaults are:```python# settings.pyWAGTAILMEDIA = {    &quot;MEDIA_MODEL&quot;: &quot;wagtailmedia.Media&quot;,  # string, dotted-notation.    &quot;MEDIA_FORM_BASE&quot;: &quot;&quot;,  # string, dotted-notation. Defaults to an empty string    &quot;AUDIO_EXTENSIONS&quot;: [        &quot;aac&quot;,        &quot;aiff&quot;,        &quot;flac&quot;,        &quot;m4a&quot;,        &quot;m4b&quot;,        &quot;mp3&quot;,        &quot;ogg&quot;,        &quot;wav&quot;,    ],  # list of extensions    &quot;VIDEO_EXTENSIONS&quot;: [        &quot;avi&quot;,        &quot;h264&quot;,        &quot;m4v&quot;,        &quot;mkv&quot;,        &quot;mov&quot;,        &quot;mp4&quot;,        &quot;mpeg&quot;,        &quot;mpg&quot;,        &quot;ogv&quot;,        &quot;webm&quot;,    ],  # list of extensions}```### URL configurationYour project needs to be set up to serve user-uploaded files from `MEDIA_ROOT`.Your Django project may already have this in place, but if not, add the following snippet to `urls.py`:```pythonfrom django.conf import settingsfrom django.conf.urls.static import staticurlpatterns = [    # ... the rest of your URLconf goes here ...] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)```Note that this only works in development mode (`DEBUG = True`);in production, you will need to configure your web server to serve files from `MEDIA_ROOT`.For further details, see the Django documentation: [Serving files uploaded by a user during development](https://docs.djangoproject.com/en/stable/howto/static-files/#serving-files-uploaded-by-a-user-during-development)and [Deploying static files](https://docs.djangoproject.com/en/stable/howto/static-files/deployment/).With this configuration in place, you are ready to run `./manage.py migrate` to create the database tables used by `wagtailmedia`.`wagtailmedia` loads additional assets for the chooser panel interface.Run `./manage.py collectstatic` after the migrations step to collect all the required assets.### Custom `Media` modelThe `Media` model can be customised. To do this, you needto add a new model to your project that inherits from `wagtailmedia.models.AbstractMedia`.Then set the `MEDIA_MODEL` attribute in the `WAGTAILMEDIA` settings dictionary to point to it:```python# settings.pyWAGTAILMEDIA = {    &quot;MEDIA_MODEL&quot;: &quot;my_app.CustomMedia&quot;,    # ...}```You can customize the model form used with your `Media` model using the `MEDIA_FORM_BASE` setting.It should be the dotted path to the form and will be used as the base form passed to `modelform_factory()` when constructing the media form.```python# settings.pyWAGTAILMEDIA = {    &quot;MEDIA_FORM_BASE&quot;: &quot;my_app.forms.CustomMediaForm&quot;,    # ...}```### Hooks#### `construct_media_chooser_queryset`Called when rendering the media chooser view, to allow the media listing QuerySet to be customised.The callable passed into the hook will receive the current media QuerySet and the request object,and must return a Media QuerySet (either the original one, or a new one).```pythonfrom wagtail import hooks@hooks.register(&quot;construct_media_chooser_queryset&quot;)def show_my_uploaded_media_only(media, request):    # Only show uploaded media    media = media.filter(uploaded_by_user=request.user)    return media```## How to use### As a regular Django fieldYou can use `Media` as a regular Django field. Here’s an example:```pythonfrom django.db import modelsfrom wagtail.fields import RichTextFieldfrom wagtail.models import Pagefrom wagtail.admin.panels import FieldPanelfrom wagtailmedia.edit_handlers import MediaChooserPanelclass BlogPageWithMedia(Page):    author = models.CharField(max_length=255)    date = models.DateField(&quot;Post date&quot;)    body = RichTextField(blank=False)    featured_media = models.ForeignKey(        &quot;wagtailmedia.Media&quot;,        null=True,        blank=True,        on_delete=models.SET_NULL,        related_name=&quot;+&quot;,    )    content_panels = Page.content_panels + [        FieldPanel(&quot;author&quot;),        FieldPanel(&quot;date&quot;),        FieldPanel(&quot;body&quot;),        MediaChooserPanel(&quot;featured_media&quot;),    ]```The `MediaChooserPanel` accepts the `media_type` keyword argument (kwarg) to limit the types of media that can be chosen or uploaded.At the moment only &quot;audio&quot; (`MediaChooserPanel(media_type=&quot;audio&quot;)`) and &quot;video&quot; (`MediaChooserPanel(media_type=&quot;audio&quot;)`) are supported,and any other type will make the chooser behave as if it did not get any kwarg.#### Name clash with WagtailDo not name the field `media`. When rendering the admin UI, Wagtail uses a `media` property for its fields’ CSS &amp; JS assets loading.Using `media` as a field name breaks the admin UI ([#54](https://github.com/torchbox/wagtailmedia/issues/54)).### In StreamFieldYou can use `Media` in StreamField. To do this, you needto add a new block class that inherits from `wagtailmedia.blocks.AbstractMediaChooserBlock`and implement your own `render_basic` method.Here is an example:```pythonfrom django.db import modelsfrom django.forms.utils import flatattfrom django.utils.html import format_html, format_html_joinfrom wagtail import blocksfrom wagtail.admin.panels import FieldPanelfrom wagtail.fields import StreamFieldfrom wagtail.models import Pagefrom wagtailmedia.blocks import AbstractMediaChooserBlockclass TestMediaBlock(AbstractMediaChooserBlock):    def render_basic(self, value, context=None):        if not value:            return &quot;&quot;        if value.type == &quot;video&quot;:            player_code = &quot;&quot;&quot;            &lt;div&gt;                &lt;video width=&quot;{1}&quot; height=&quot;{2}&quot; controls&gt;                    {0}                    Your browser does not support the video tag.                &lt;/video&gt;            &lt;/div&gt;            &quot;&quot;&quot;        else:            player_code = &quot;&quot;&quot;            &lt;div&gt;                &lt;audio controls&gt;                    {0}                    Your browser does not support the audio element.                &lt;/audio&gt;            &lt;/div&gt;            &quot;&quot;&quot;        return format_html(            player_code,            format_html_join(                &quot;\n&quot;, &quot;&lt;source{0}&gt;&quot;, [[flatatt(s)] for s in value.sources]            ),            value.width,            value.height,        )class BlogPage(Page):    author = models.CharField(max_length=255)    date = models.DateField(&quot;Post date&quot;)    body = StreamField(        [            (&quot;heading&quot;, blocks.CharBlock(classname=&quot;title&quot;, icon=&quot;title&quot;)),            (&quot;paragraph&quot;, blocks.RichTextBlock(icon=&quot;pilcrow&quot;)),            (&quot;media&quot;, TestMediaBlock(icon=&quot;media&quot;)),        ]    )    content_panels = Page.content_panels + [        FieldPanel(&quot;author&quot;),        FieldPanel(&quot;date&quot;),        FieldPanel(&quot;body&quot;),    ]```You can also use audio or video-specific choosers:```python# ...from wagtail.models import Pagefrom wagtail.fields import StreamFieldfrom wagtailmedia.blocks import AudioChooserBlock, VideoChooserBlockclass BlogPage(Page):    # ...    body = StreamField(        [            # ... other block definitions            (&quot;audio&quot;, AudioChooserBlock()),            (&quot;video&quot;, VideoChooserBlock()),        ]    )```### APITo expose media items in the API, you can follow the [Wagtail documentation guide](https://docs.wagtail.org/en/stable/advanced_topics/api/v2/configuration.html#api-v2-configuration)for API configuration with wagtailmedia specifics:```python# api.pyfrom wagtail.api.v2.router import WagtailAPIRouterfrom wagtailmedia.api.views import MediaAPIViewSet# Register the routerapi_router = WagtailAPIRouter(&quot;wagtailapi&quot;)# add any other enpoints you need, plus the wagtailmedia oneapi_router.register_endpoint(&quot;media&quot;, MediaAPIViewSet)```## Translationswagtailmedia has translations in French and Chinese. More translations welcome!## ContributingAll contributions are welcome!### InstallTo make changes to this project, first clone this repository:```shgit clone git@github.com:torchbox/wagtailmedia.gitcd wagtailmedia```With your preferred virtualenv activated, install testing dependencies:```shpip install -e '.[testing]' -U```### pre-commitNote that this project uses [pre-commit](https://github.com/pre-commit/pre-commit). To set up locally:```shell# if you don't have it yet, globally$ pip install pre-commit# go to the project directory$ cd wagtailmedia# initialize pre-commit$ pre-commit install# Optional, run all checks once for this, then the checks will run only on the changed files$ pre-commit run --all-files```### How to run testsNow you can run tests as shown below:```shtox```or, you can run them for a specific environment `tox -e py310-dj41-wagtail41` or specific test`tox -e py310-dj41-wagtail41 -- tests.test_views.TestMediaChooserUploadView`To run the test app interactively, use `tox -e interactive`, visit `http://127.0.0.1:8020/admin/` and log in with `admin`/`changeme`.</longdescription>
</pkgmetadata>