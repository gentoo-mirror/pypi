<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MyCluster[![PyPI version](https://badge.fury.io/py/mycluster.svg)](https://badge.fury.io/py/mycluster)Library and command line interface to support interacting with multiple HPC clusters  Provides the ability to interact with the most popular HPC job scheduling systems using a single interface and enables the creation of job submission scripts.  Tested with SGE, LSF and slurm (PBS/TORQUE support under development)## Getting startedMyCluster can be installed from PyPi.```pip install mycluster```## Configuration#### Storing your email addressMyCluster will write your email address into any submission files so you can recieve updates from the schedulers. You can supply this on the command line or store it in a configuration file.To store your email in the configuration file run:```mycluster configure```#### Setting a custom schedulerBy default MyCluster will try and detect the underlying scheduler but this can be overridden by setting the MYCLUSTER_SCHED environment variable. This should be set to a string name of a Python class that implements the `mycluster.schedulers.base.Scheduler` class.#### Override the submission templateIn some cases you may want to override the submission templates, for example if you want to include additional parameters or scheduler commands. To do this set the MYCLUSTER_TEMPLATE environment variable to the jinja template you wish to use. See mycluster/schedulers/templates for the base templates.## Command LineMyClusyter installs the &quot;mycluster&quot; cli command to interact with the local scheduler via the command line.Print command help```mycluster &lt;command&gt; --help```List all queues```mycluster queues```List jobs ```mycluster list```Create a new submission file, see --help for more submission options.```mycluster create JOBFILE QUEUE RUNSCRIPT```Submit a job file```mycluster submit JOBFILE```Cancel a job```mycluster cancel JOBID```The RUNSCRIPT to be executed by the JOB_SCRIPT can make use of the following predefined environment variables```bashexport NUM_TASKS=export TASKS_PER_NODE=export THREADS_PER_TASK=export NUM_NODES=# OpenMP configurationexport OMP_NUM_THREADS=$THREADS_PER_TASK# Default mpiexec commnads for each flavour of mpiexport OMPI_CMD=&quot;mpiexec -n $NUM_TASKS -npernode $TASKS_PER_NODE -bysocket -bind-to-socket&quot;export MVAPICH_CMD=&quot;mpiexec -n $NUM_TASKS -ppn $TASKS_PER_NODE -bind-to-socket&quot;export IMPI_CMD=&quot;mpiexec -n $NUM_TASKS -ppn $TASKS_PER_NODE&quot;```## APIMycluster can be used programatically using the mycluster module. All schedulers implement the base `mycluster.schedulers.base.Scheduler` class.```pythonimport mycluster# Detect the local schedulerscheduler = mycluster.detect_scheduling_sys()print(f&quot;Scheduler loaded: {scheduler.scheduler_type()}&quot;)# Create a batch script to submit a 48 task run of script.sh to the skylake queuescript = scheduler.create(&quot;skylake&quot;, 48, &quot;my_job&quot;, &quot;script.sh&quot;, &quot;01:00:00&quot;, tasks_per_node=24)# Write to a filewith open(&quot;mysub.job&quot;, &quot;w&quot;) as f:    f.write(script)# Submit the batch scriptjob_id = scheduler.submit(&quot;mysub.job&quot;)# Check the status of the jobprint(scheduler.get_job_details(job_id))# Cancel the jobscheduler.delete(job_id)```</longdescription>
</pkgmetadata>