<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># instagram-botnet [![Build Status](http://fuckclubs.club/api/badges/remorses/instagram-botnet/status.svg)](http://fuckclubs.club/remorses/instagram-botnet)Write readable declarative yaml files to control your botnet---template skema:```yaml```## TODO- ~~emit events for every action~~- ~~emit events for new followers, new comments, comment references, usertag references in notifications at login time~~- ~~rewrite tests using pytest~~- ~~use drone for ci~~- emit event at login, adding info like followers nuber, posts number, following, timestamp (so i can later analyse using time window consisting of begin and end sessions)- emit event at task end- ~~fix filter, filter should request a model data if given data is not sufficient~~- implement threads reading, at login time- implement thread read messages, emit every message as eventdirect_v2_inbox() -&gt;```yamlResponse:    viewer: User    inbox:        threads: [            thread_id: Str            thread_v2_id: Str            pending: Bool            read_state: ReadState            users: [User]            items: [                item_id: Int                item_type: &quot;media_share&quot; | &quot;text&quot; | &quot;link&quot;                timestamp: Int                user_id: Int                device_timestamp?: Int                media_share?: Media                text?: Str                link?:                    link_url: Str            ]            thread_type: private            has_newer: Bool            has_older: Bool            last_seen_at: Any            newest_cursor: Str            oldest_cursor: Str            is_spam: Bool            last_activity_at: Timestamp            last_seen_at:                [user_id]:                    timestamp: Timestamp                    item_id: Int        ]                next_cursor:            cursor_thread_v2_id: Int            cursor_timestamp_seconds: Int        unseen_count: Int        unseen_count_ts: Int    pending_requests_total: int    status: &quot;ok&quot; | StrReadState: 0 | 1```direct_v2_thread(thread_id) # not thread_v2_id -&gt;```yamlResponse:    thread: Thread```to get last unseen messages:1 call thread_v2_inbox()2 if res['inbox']['unseen_count'] &gt; 02 get the thread_ids where ```php            -&gt;addParam('persistentBadging', 'true')            -&gt;addParam('use_unified_inbox', 'true');    /**     * Marks an item from given thread as seen.     *     * @param string $threadId     Thread ID.     * @param string $threadItemId Thread item ID.     *     * @throws \InstagramAPI\Exception\InstagramException     *     * @return \InstagramAPI\Response\DirectSeenItemResponse     */    public function markItemSeen(        $threadId,        $threadItemId)    {        return $this-&gt;ig-&gt;request(&quot;direct_v2/threads/{$threadId}/items/{$threadItemId}/seen/&quot;)            -&gt;addPost('use_unified_inbox', 'true')            -&gt;addPost('action', 'mark_seen')            -&gt;addPost('thread_id', $threadId)            -&gt;addPost('item_id', $threadItemId)            -&gt;addPost('_uuid', $this-&gt;ig-&gt;uuid)            -&gt;addPost('_csrftoken', $this-&gt;ig-&gt;client-&gt;getToken())            -&gt;setSignedPost(false)            -&gt;getResponse(new Response\DirectSeenItemResponse());    }```## Shell usageThe main module works on yaml script like these:```yamlname:                     test_commentbot:        username:         username        password:         passwordactions:    -        name: comment on 10 posts from @kimkardashian        nodes:            - kimkardashian        edges:            - user_feed:                amount: 10            - comment:                max:      1                comments:                    - [&quot;hello {author}!!!&quot;]                    - [&quot;come stai?&quot;, &quot;come va?&quot;]                    - [&quot;url works too! http://instagram.com&quot;]```To execute the above `test_comment.yaml` run:```python3 -m instabotnet test_comment.yaml```## Python API usageTo use inside python modules:```pythonfrom instabotnet import executeexecute('test_comment.yaml', {'username': 'user', 'some_variables': 'bo'})```Environment variables are accessible under the env objectThe variables passed to execute can be mutated, the execute function returns an object that contains the data collected from he `scrape` action.The variables are mutated to support the multi script feature, where many templates are chained one after another in a single file and can pass data to the next template mutating the variables.It is also useful to mutate the settings variable to update the cookies and other data for the next bot iteration.All the code inside {{ }} is evaluated by an eval call, this means that the templates can be filled with conditional and complex behaviors, for example making an http call to get the caption for uploading a photo, or get a random item from an array variable.Inside eval code it is avaliable - variables- random module- all the funcy functions- variables inside the data object- urlopen module for making api calls- json moduleA limitation of the code inside {{Â }} is that it must consist only of one statement and can only return lists or strings.Every action inside a template will emit an event, all these events are avaliable in the object returned by execute:```json&quot;template_name&quot;: &quot;test_follow&quot;,&quot;action_name&quot;: &quot;test_follow_famous_people&quot;,&quot;type&quot;: &quot;follow&quot;,&quot;node&quot;: &quot;kimkarkdashian&quot;,&quot;args&quot;: {},&quot;metadata&quot;: {     &quot;username&quot;: &quot;&quot;,    &quot;proxy&quot;: &quot;&quot;}```Other events are emitted, for example when someone followes you:```&quot;type&quot;: &quot;got_followed&quot;,&quot;node&quot;: &quot;username&quot;```</longdescription>
</pkgmetadata>