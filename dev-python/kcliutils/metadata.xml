<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># kcliutils![PyPI - package version](https://img.shields.io/pypi/v/kcliutils?logo=pypi&amp;style=flat-square)![PyPI - license](https://img.shields.io/pypi/l/kcliutils?label=package%20license&amp;style=flat-square)![PyPI - python version](https://img.shields.io/pypi/pyversions/kcliutils?logo=pypi&amp;style=flat-square)![PyPI - downloads](https://img.shields.io/pypi/dm/kcliutils?logo=pypi&amp;style=flat-square)![GitHub - last commit](https://img.shields.io/github/last-commit/kkristof200/py_cli_utils?style=flat-square)![GitHub - commit activity](https://img.shields.io/github/commit-activity/m/kkristof200/py_cli_utils?style=flat-square)![GitHub - code size in bytes](https://img.shields.io/github/languages/code-size/kkristof200/py_cli_utils?style=flat-square)![GitHub - repo size](https://img.shields.io/github/repo-size/kkristof200/py_cli_utils?style=flat-square)![GitHub - lines of code](https://img.shields.io/tokei/lines/github/kkristof200/py_cli_utils?style=flat-square)![GitHub - license](https://img.shields.io/github/license/kkristof200/py_cli_utils?label=repo%20license&amp;style=flat-square)## DescriptionPython cli utils for faster development## Install~~~~bashpip install kcliutils# orpip3 install kcliutils~~~~## How to use### 1. Package related####  npp/new_python_package  - Run in an empty folder with git checked out  - Creates a new empty package, with default files, such as .gitignore, README.md, setup.py, demo.py, LICENSE, etc.~~~~shell# cd to desired folder with .git in itnpp package_name# ornew_python_package package_name~~~~`npp test_package_name` will generate![npp result](https://i.imgur.com/3UUMDjY.png)####  upp/upgrade_python_package  - Run in an already existing project folder  - Updates setup.py with dependencies, bumps version number  - Updates install_dependencies.sh and requirements.txt  - Updates readme with dependencies, copies the contents of 'demo.py' to the usage section of the reeadme  - NOTE: to make this work properly, the packege had to be created with npp.~~~~shell# cd to desired folder with .git in itupp# orupgrade_python_package~~~~####  ppp/publish_python_package  - Calls upp, publishes to pypi and installs the new version~~~~shell# cd to desired folder with .git in itppp &quot;Optional commit message&quot;# orpublish_python_package &quot;Optional commit message&quot;~~~~####  prpipush/upgrade_push_install  - Same as ppp, but without publishing on pypi (for private, github-hosted packages)~~~~shell# cd to desired folder with .git in itprpipush &quot;Optional commit message&quot;# orupgrade_push_install &quot;Optional commit message&quot;~~~~### 2. Formatting####  cl/clean_lines  - Cleans the ending useless spaces from every line~~~~shell# cd to desired foldercl# orclean_lines~~~~####  migrate_comment_line_len  - Updates the lengh of each separator comment line generated with the file generators from this package.~~~~shell# cd to desired foldermigrate_comment_line_len Optional_length_which_defaults_to_your_settings~~~~### 3. Git####  psh/push  - stages/commits everything and pushes to github~~~~shell# cd to desired folderpsh &quot;Optional commit message&quot;# orpush &quot;Optional commit message&quot;~~~~####  ftch/fetch  - git fetch~~~~shell# cd to desired folderftch# orfetch~~~~####  pll/pull  - git pull~~~~shell# cd to desired folderpll# orpull~~~~### 4. Pip####  pipu/pip_uninstall  - pip uninstall~~~~shellpipu PACKAGE_NAME# orpip_uninstall PACKAGE_NAME~~~~####  pipi/pipiu/pip_install  - pip install -U~~~~shellpipi PACKAGE_NAME# orpipiu PACKAGE_NAME# orpip_install PACKAGE_NAME~~~~####  pipir/pip_reinstall  - pip uninstall &amp;&amp; pip install~~~~shellpipir PACKAGE_NAME# orpip_reinstall PACKAGE_NAME~~~~### 5. New files####  pyreqs/python_requirements   - creates a requirements.txt file with all the used dependencies~~~~shellpyreqs# creates 'requirements.txt'# orpython_requirements~~~~####  pif/create_python_install_file   - creates an install_dependencies.sh file with all the used dependencies~~~~shellpif# creates 'install_dependencies.sh'# orcreate_python_install_file~~~~####  npc/new_python_class   - creates a python file with a class-like formatting~~~~shellnpc file_name# creates 'file_name.py' class 'FileName' in it# also accepts relative path 'relative/path/to/file_name'# ornew_python_class file_name~~~~generated file contents~~~~python# ------------------------------------------- Imports ------------------------------------------ ## System# Pip# Local# ---------------------------------------------------------------------------------------------- ## -------------------------------------- class: TestClass -------------------------------------- #class TestClass:    # ---------------------------------------- Init ---------------------------------------- #    def __init__(        self    ):        return    # ---------------------------------- Public properties --------------------------------- #    # ----------------------------------- Public methods ----------------------------------- #    # --------------------------------- Private properties --------------------------------- #    # ----------------------------------- Private methods ---------------------------------- ## ---------------------------------------------------------------------------------------------- #~~~~####  npa/new_python_api   - creates a python file with a api-like formatting (conforming [ksimpleapi](https://github.com/kkristof200/py_simpleapi))~~~~shellnpa file_name# creates 'file_name.py' class 'FileName' in it# also accepts relative path 'relative/path/to/file_name'# ornew_python_api file_name~~~~generated file contents~~~~python# ------------------------------------------- Imports ------------------------------------------ ## Systemfrom typing import Optional, Dict# Pipfrom ksimpleapi import Api# Local# ---------------------------------------------------------------------------------------------- ## --------------------------------------- class: FileName -------------------------------------- #class FileName(Api):# -------------------------------------- Overrides ------------------------------------- #    @classmethod    def extra_headers(cls) -&gt; Optional[Dict[str, any]]:        return {        }    # ---------------------------------- Public properties --------------------------------- #    # ----------------------------------- Public methods ----------------------------------- #    # --------------------------------- Private properties --------------------------------- #    # ----------------------------------- Private methods ---------------------------------- ## ---------------------------------------------------------------------------------------------- #~~~~####  npe/new_python_enum   - creates a python file with a enum-like formatting~~~~shellnpe file_name# creates 'file_name.py' enum 'FileName' in it# also accepts relative path 'relative/path/to/file_name'# ornew_python_enum file_name~~~~generated file contents~~~~python# ------------------------------------------- Imports ------------------------------------------ ## Systemfrom enum import Enum# ---------------------------------------------------------------------------------------------- ## --------------------------------------- enum: FileName --------------------------------------- #class FileName(Enum):    Template = 0# ---------------------------------------------------------------------------------------------- #~~~~####  npf/new_python_file   - creates a python file with a default file formatting~~~~shellnpf file_name# creates 'file_name.py'# also accepts relative path 'relative/path/to/file_name'# ornew_python_file file_name~~~~generated file contents~~~~python# ------------------------------------------- Imports ------------------------------------------ ## System# Pip# Local# ---------------------------------------------------------------------------------------------- ## ----------------------------------------- Public vars ---------------------------------------- ## ---------------------------------------- Private vars ---------------------------------------- ## ---------------------------------------- Private vars ---------------------------------------- ## ---------------------------------------- Private vars ---------------------------------------- ## ---------------------------------------------------------------------------------------------- #~~~~####  npfl/new_python_flow   - creates a python file with a flow-like formatting (check example)~~~~shellnpfl file_name# creates 'file_name.py'# also accepts relative path 'relative/path/to/file_name'# ornew_python_flow file_name~~~~generated file contents~~~~python# ------------------------------------------- Imports ------------------------------------------ ## System# Pip# Local# ---------------------------------------------------------------------------------------------- ## ------------------------------------------- Methods ------------------------------------------ ## -------------------------------------------- Paths ------------------------------------------- ## -------------------------------------------- Vars -------------------------------------------- ## -------------------------------------------- Flow -------------------------------------------- ## ---------------------------------------------------------------------------------------------- #~~~~####  nps/new_python_subpackage  - creates a new subpackage at the desired relative path~~~~shellnps SUB_PACKAGE_NAME_OR_RELATIVE_PATH# ornew_python_subpackage SUB_PACKAGE_NAME_OR_RELATIVE_PATH~~~~`nps test_subpackage` will generate![nps result](https://i.imgur.com/xNOBPPg.png)## Dependencies[bullet](https://pypi.org/project/bullet), [jsoncodable](https://pypi.org/project/jsoncodable), [kcu](https://pypi.org/project/kcu), [kdependencies](https://pypi.org/project/kdependencies)</longdescription>
</pkgmetadata>