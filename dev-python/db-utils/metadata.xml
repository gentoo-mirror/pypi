<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># db_utils library## Introductiondb-utils is a Python package that standardizes interactions with various types of databases.  db-utils is a collection of modules that lowers the bar to viewing, extracting, and analyzing data from various sources including: * Redshift * Snowflake * Postgres * Mysql * Sqlserver * sqlite * s3 * dynamoDB## DockerOne line command to start a Docker container with db-utils installed.  This will run on any system that is running Docker.  A jupyter notebook will open up on port 8888, just copy and paste the url from the terminal into your preferred browser.```bashdocker run -p 8888:8888 hannaj06/db-utils:latest```## docker-composeBelow is an example `docker-compose.yaml` file.  With this configuration jupyter notebook changes persist in the location defined by `&lt;local_notebooks&gt;`.  Below is a sample of the `.databases.conf` file which will be bindmounted to the docker image.`docker-compose.yaml````bashversion: &quot;2.1&quot;services:  dbutils_juypter:    image: hannaj06/db-utils    ports:      - 8888:8888    volumes:      - ${HOME}/.databases.conf:/root/.databases.conf      - &lt;local_notebooks&gt;:/notebooks````.databases.conf````ini[redshift]host=&lt;redshift_host&gt;user=&lt;user&gt;password=&lt;redshift_password&gt;port=&lt;port&gt;database=&lt;db&gt;[s3]aws_access_key_id=&lt;access_id&gt;aws_secret_access_key=&lt;secret_access&gt;region=&lt;aws_region&gt;default_bucket=&lt;default_bucket&gt;```## Installation on local envoirnment * sudo apt-get updateRequired system packages: * sudo apt-get install python3-dev (Ubuntu) * sudo apt-get apt-get install g++ (Ubuntu) * sudo apt-get install libpq-dev (Ubuntu) * sudo apt-get install unixodbc-dev (Ubuntu) * brew install postgresql (MacOS)```bashpip install db_utils```### pg_connect class (previously DBUtil)A database connection class to interact with  Postgres or RedshiftBasic Usage: * create database configuration file * example below is called .databases.conf```    [redshift_example]    host=redshift.example.com    user=test_user    password=password    port=5439    database=test_db    &gt;&gt;&gt; from db_utils.pg_connect import pg_connect    &gt;&gt;&gt;    &gt;&gt;&gt; db = pg_connect('redshift_example', '.databases.conf')    &gt;&gt;&gt; db.get_arr_from_query('select * from test', pprint=True)```### snowflake_connect classA database connection class to interact with snowflakeBasic Usage: * create database configuration file * example below is called .databases.conf```    [snowflake]    account=abc123.us-east-1    host=abc123.us-east-1.snowflakecomputing.com    user=test_user    password=password    port=443    database=test_db    aws_access_key_id=&lt;key_id&gt;    aws_secret_access_key=&lt;secret_key&gt;```### snowflake_s3 classA child class of snowflake_connect class used to retrieve large datasets in small chunksBasic Usage: * create database configuration file * example below is called .databases.conf * note the additional fields required```    [snowflake]    account=abc123.us-east-1    host=abc123.us-east-1.snowflakecomputing.com    user=test_user    password=password    port=443    database=test_db    aws_access_key_id=&lt;key_id&gt;    aws_secret_access_key=&lt;secret_key&gt;    default_bucket=```example) Loading large data set into memory in chunks```    &gt;&gt;&gt; from db_utils.snowflake_connect import snowflake_s3    &gt;&gt;&gt; import os    &gt;&gt;&gt;    &gt;&gt;&gt; file_format = '''    TYPE = CSV    COMPRESSION = NONE    '''    &gt;&gt;&gt;    &gt;&gt;&gt;    &gt;&gt;&gt; with snowflake_s3('snowflake', '.databases.conf') as db:    &gt;&gt;&gt;     db.cursor('SELECT * FROM example_large_table', file_format=file_format, pprint=True)    &gt;&gt;&gt;    &gt;&gt;&gt;     while True:    &gt;&gt;&gt;         file = db.fetch(contents=True)    &gt;&gt;&gt;    &gt;&gt;&gt;         if file:    &gt;&gt;&gt;             for row in file:    &gt;&gt;&gt;                 print(row)    &gt;&gt;&gt;    &gt;&gt;&gt;         else:    &gt;&gt;&gt;             break```### sqlite_connect classA database connection class to interact with SQLite```    &gt;&gt;&gt; from db_utils.sqlite_connect import sqlite_connect    &gt;&gt;&gt;    &gt;&gt;&gt; db = sqlite_connect('test.db')    &gt;&gt;&gt; db.get_df_from_query('select * from test_table', pprint=True)```### s3_connect classConnection library for interacting with S3Basic Usage: * add s3 section to .databases.conf file (created in previous example)```    [s3]        aws_access_key_id=&lt;key_id&gt;        aws_secret_access_key=&lt;secret_key&gt;        default_bucket=&lt;bucket&gt;    &gt;&gt;&gt; from db_utils.s3_connect import s3_connect    &gt;&gt;&gt;    &gt;&gt;&gt; s3 = s3_connect('.databases.conf', 's3')    &gt;&gt;&gt; s3.list_keys(prefix='examples')```example) grab file from s3 into memory as stringIO object```    &gt;&gt;&gt; from db_utils.s3_connect import s3_connect    &gt;&gt;&gt;    &gt;&gt;&gt; s3 = s3_connect('.databases.conf', 's3')    &gt;&gt;&gt; s3.get_contents('example_file', stringIO=True)    &gt;&gt;&gt; s3.read()```### sql_server connect classRequirements:  * sql server drivers - https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017Basic Usage: * add sql server section to .databases.conf file (created in previous example)```    [sql_server]    driver=ODBC Driver 17 for SQL Server    server=127.0.0.1    user=bill    password=gates    database=master    &gt;&gt;&gt; from db_utils.sql_server_connect import sql_server_connect    &gt;&gt;&gt; db = sql_server_connect('sql_server', 'databases.conf')    &gt;&gt;&gt;    &gt;&gt;&gt; db.get_arr_from_query('''SELECT * FROM SYSOBJECTS''', pprint=True))```### dynamodb_connect classConnection library for interacting with Dynamodb### timer classHelper class to time long running processesBasic Usage:```&gt;&gt;&gt; from db_utils.timer import timer&gt;&gt;&gt;&gt;&gt;&gt; t = timer()&gt;&gt;&gt; t.lap('s')5.469961```</longdescription>
</pkgmetadata>