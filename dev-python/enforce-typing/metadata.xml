<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Adds a simple decorator `enforce_types` that enables enforcing stricttyping on a function or dataclass using annotations.Works with collection types and subtypes for example `Dict[str,Tuple[int, int]]`, and with special types as `Optional` and `Any`.Seeing as this uses type annotations from[PEP 484](https://www.python.org/dev/peps/pep-0484/), \&gt;=Python 3.5 isrequired.PyPi project page: &lt;https://pypi.org/project/enforce-typing/&gt;Heavily inspired from [this SO post](https://stackoverflow.com/questions/50563546/validating-detailed-types-in-python-dataclasses/50622643#50622643) so credit goes mostly to him.## InstallationOther than downloading from PyPi with&lt;span class=&quot;title-ref&quot;&gt;pip&lt;/span&gt;, you may also clone the repositoryand run the usual setuptools process:    $&gt; git clone https://github.com/matchawine/python-enforce-typing.git &amp;&amp; cd python-enforce-typing    $&gt; python setup.py {build,install}## Usage``` pythonfrom typing import Any, Union, Optionalfrom dataclasses import dataclassfrom enforce_typing import enforce_types@enforce_types@dataclass(frozen=True)class Toto(object):    this_or_that: Union[str, int]    anything: Any    name: str = &quot;&quot;    value: int = 1    maybe_not: Optional[bool] = None&gt;&gt;&gt; Toto(this_or_that=list(), anything=2)TypeError: Expected type 'typing.Union[str, int]' for attribute 'this_or_that' but received type '&lt;class 'list'&gt;')&gt;&gt;&gt; Toto(this_or_that=1, anything=2, maybe_not=0)TypeError: Expected type 'typing.Union[bool, NoneType]' for attribute 'maybe_not' but received type '&lt;class 'int'&gt;')&gt;&gt;&gt; Toto(this_or_that=1, anything=2, name=3)TypeError: Expected type '&lt;class 'str'&gt;' for attribute 'name' but received type '&lt;class 'int'&gt;')&gt;&gt;&gt; Toto(this_or_that=1, anything=2, value=3.0)TypeError: Expected type '&lt;class 'int'&gt;' for attribute 'value' but received type '&lt;class 'float'&gt;')&gt;&gt;&gt; Toto(this_or_that=1, anything=2)Toto(this_or_that=1, anything=2, name='', value=1, maybe_not=None)&gt;&gt;&gt; Toto(this_or_that=&quot;titi&quot;, anything=list(), maybe_not=False)Toto(this_or_that='titi', anything=[], name='', value=1, maybe_not=False)```</longdescription>
</pkgmetadata>