<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># NorMatrixcheck some norm for you[![PyPI version](https://badge.fury.io/py/normatrix.svg)](https://badge.fury.io/py/normatrix)![python-version](https://img.shields.io/badge/python-%3E%3D3.7-green)![windows+ubuntu+macos;3.9,3.10](https://github.com/Saverio976/NorMatrix/actions/workflows/hallo_doctor.yml/badge.svg?event=push)[![NorMatrix Check](https://github.com/Saverio976/NorMatrix/actions/workflows/normatrix_check.yml/badge.svg)](https://github.com/Saverio976/NorMatrix/actions/workflows/normatrix_check.yml)[![Codacy Badge](https://app.codacy.com/project/badge/Grade/2ca7ba5d6a9e4619bd0cab7ae82ae7e1)](https://www.codacy.com/gh/Saverio976/NorMatrix/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=Saverio976/NorMatrix&amp;amp;utm_campaign=Badge_Grade)![GitHub repo size](https://img.shields.io/github/repo-size/Saverio976/NorMatrix?style=plastic)![GitHub language count](https://img.shields.io/github/languages/count/Saverio976/NorMatrix?style=plastic)![GitHub top language](https://img.shields.io/github/languages/top/Saverio976/NorMatrix?style=plastic)![GitHub last commit](https://img.shields.io/github/last-commit/Saverio976/NorMatrix?color=red&amp;style=plastic)## install### with pipy&lt;details&gt;  &lt;summary&gt;With Pipy&lt;/summary&gt;#### 1- if you want some &quot;stable&quot; version:```bashpip install normatrix```- if you want the most update to date version:```bashpip install git+https://github.com/Saverio976/NorMatrix.git```Now you can use it with `python3 -m normatrix` in your terminal#### 2And if you want to just write `normatrix` :```bashecho $SHELL```if you are using bash shell (the `echo` print `/something/bash`):```bashecho alias normatrix=\&quot;python3 -m normatrix\&quot; &gt;&gt; $HOME/.bashrc```else if you are using zsh shell (the `echo` print `/something/like/zsh`):```bashecho alias normatrix=\&quot;python3 -m normatrix\&quot; &gt;&gt; $HOME/.zshrc```else if you are using fish shell (the `echo` print `/something/like/fish`):```bashabbr --add 'normatrix' 'python3 -m normatrix'```else handle this yourself bruh;#### 3to update it, you just have to run```bashpip install -U normatrix```#### 4to uninstall it (sad), run```bashpip uninstall normatrix```&lt;/details&gt;### from source&lt;details&gt;  &lt;summary&gt;From source&lt;/summary&gt;#### 1```bashgit clone https://github.com/Saverio976/NorMatrix.gitcd NorMatrix```Now you can use it with `./path/to/folder/NorMatrix/main.py` in your terminal#### 2And if you want to just write `normatrix` :```bashecho $SHELL```if you are using bash shell (the `echo` print `/something/bash`):```bashecho alias normatrix=\&quot;$PWD/main.py\&quot; &gt;&gt; $HOME/.bashrc```else if you are using zsh shell (the `echo` print `/something/like/zsh`):```bashecho alias normatrix=\&quot;$PWD/main.py\&quot; &gt;&gt; $HOME/.zshrc```else handle this yourself bruh;#### 3to update it, just go where you have cloned normatrixrun```bashgit pull```#### 4to uninstall it (sad)Delete the folder&lt;/details&gt;## Current Checks-   [x] 80 cols per line-   [x] space/tab alone (in a line)/(at the end of line)-   [x] two newline at end of file-   [x] two newline between function (between all buf chhhtt)-   [x] libc function call (pr welcome to add some libc function always banned)-   [x] nested branch more than 3 branch-   [x] no more than 20 lines per function-   [x] comma with no space after-   [x] end of parenthesis with a open curly bracket next `){`-   [x] star char `*` like this `char* buf`-   [x] preprocessors indentations (`#if..`, `#endif`)-   [x] multiple statements-   [x] 5 functions per file-   [x] filename of source code only snake\_case-   [x] no line break at end of file-   [x] 5+5 7/9 that need a space (but some false positiv goes in)-   [x] no space after [ and space  before ]-   [x] header-   [x] #define in .c-   [x] make + check exe if the compiler add some banned function-   [ ] ...## doc### (if you use pipy) python -m normatrix&lt;details&gt;  &lt;summary&gt;(if you use pipy) python -m normatrix&lt;/summary&gt;```bashusage: python -m normatrix [-h] [--no-operators-pluggin] [--preview] [--conf] [--only-errors] [--no-fclean] [--link-line] [--tests-run]                           [--output format]                           [paths ...]The C Epitech Coding Style Norm Checkerpositional arguments:  paths                 list of path to check (default: the current working directory)options:  -h, --help            show this help message and exit  --no-operators-pluggin                        remove the operators pluggin (because it print some false positiv for now)  --preview             add some plugin that are added recently  --conf                [deprecated][now it check always for the file] tells if you have a .normatrix config file  --only-errors         print only bad files with errors  --no-fclean           if you want normatrix dont do a &quot;make fclean&quot; at the end  --link-line           to have the &quot;link&quot; to the file (in vscode terminal you can click it and it will open the file at the line of the error)  --tests-run           run the unit tests for normatrix  --output format       tell which output format to use [html, md, term_color, term_rich]; for html the file is normatrix-result.htlm; for md the                        file is normatrix-result.md```&lt;/details&gt;### (only from source) main.py&lt;details&gt;  &lt;summary&gt;(only from source) main.py&lt;/summary&gt;```bashusage: ./main.py [-h] [--no-operators-pluggin] [--preview] [--conf] [--only-errors] [--no-fclean] [--link-line] [--tests-run]                           [--output format]                           [paths ...]The C Epitech Coding Style Norm Checkerpositional arguments:  paths                 list of path to check (default: the current working directory)options:  -h, --help            show this help message and exit  --no-operators-pluggin                        remove the operators pluggin (because it print some false positiv for now)  --preview             add some plugin that are added recently  --conf                [deprecated][now it check always for the file] tells if you have a .normatrix config file  --only-errors         print only bad files with errors  --no-fclean           if you want normatrix dont do a &quot;make fclean&quot; at the end  --link-line           to have the &quot;link&quot; to the file (in vscode terminal you can click it and it will open the file at the line of the error)  --tests-run           run the unit tests for normatrix  --output format       tell which output format to use [html, md, term_color, term_rich]; for html the file is normatrix-result.htlm; for md the                        file is normatrix-result.md```&lt;/details&gt;### (only from source) exec.sh&lt;details&gt;  &lt;summary&gt;(only from source) exec.sh&lt;/summary&gt;(this file exists only to keep compatibility to older version)```bashusage: ./main.py [-h] [--no-operators-pluggin] [--preview] [--conf] [--only-errors] [--no-fclean] [--link-line] [--tests-run]                           [--output format]                           [paths ...]The C Epitech Coding Style Norm Checkerpositional arguments:  paths                 list of path to check (default: the current working directory)options:  -h, --help            show this help message and exit  --no-operators-pluggin                        remove the operators pluggin (because it print some false positiv for now)  --preview             add some plugin that are added recently  --conf                [deprecated][now it check always for the file] tells if you have a .normatrix config file  --only-errors         print only bad files with errors  --no-fclean           if you want normatrix dont do a &quot;make fclean&quot; at the end  --link-line           to have the &quot;link&quot; to the file (in vscode terminal you can click it and it will open the file at the line of the error)  --tests-run           run the unit tests for normatrix  --output format       tell which output format to use [html, md, term_color, term_rich]; for html the file is normatrix-result.htlm; for md the                        file is normatrix-result.md```&lt;/details&gt;### (only from source) Makefile&lt;details&gt;  &lt;summary&gt;(only from source) Makefile (deprecated)&lt;/summary&gt;(this file exists only to keep compatibility to older version)(if you can, move to another choice)```bashUSAGE:    make -C path/to/NorMatrix PATH_CHECK=$PWDDESCRIPTION:    check the norm! in the current working directory    (call main.py)ARGS:    -C path/to/NorMatrix    run the makefile that is in path/to/NorMatrix                            instead of the one where you are    PATH_CHECK=$PWD        check the norm in your current working                            directory```&lt;/details&gt;### configurationyou can now configure what functions are banned, and what are not,you can now configure what extension file are banned, and what are not,all you have to do is put a file `.normatrix.json` where you execute `normatrix`example with nothing banned and no preview (preview = not stable check) check`.normatrix.json````json{    &quot;banned&quot;: [],    &quot;no-banned&quot;: [],    &quot;extension&quot;: [],    &quot;no-extension&quot;: [],    &quot;enable-preview&quot;: false}```just add inside `[]` the string of what you want**other explanation with example**&lt;details&gt;  &lt;summary&gt;other explanation with example&lt;/summary&gt;- to no-banne memset (because you can use it)```json{    &quot;no-banned&quot;: [&quot;memset&quot;]}```- to ban my_printf (because you dont want to use it)```json{    &quot;banned&quot;: [&quot;my_printf&quot;]}```- to no-banne \*.o file (because you dont need this warning)```json{    &quot;no-extension&quot;: [&quot;*.o&quot;]}```- to banne \*.c file (because you want c file banned)```json{    &quot;extension&quot;: [&quot;*.c&quot;]}```- to enable preview check by default```json{    &quot;enable-preview&quot;: true}```&lt;/details&gt;by default there are somthing like this:```json{    &quot;banned&quot;: [&quot;printf&quot;, &quot;memset&quot;, &quot;strcpy&quot;, &quot;strcat&quot;, &quot;calloc&quot;],    &quot;no-banned&quot;: [],    &quot;extension&quot;: [&quot;*.a&quot;, &quot;*.o&quot;, &quot;*.so&quot;, &quot;.gch&quot;, &quot;*~&quot;, &quot;*#&quot;, &quot;*.d&quot;],    &quot;no-extension&quot;: [],    &quot;enable-preview&quot;: false}```this configuration will be added even if you add a `.normatrix.json` filebut if you want to remove `*.o`, just add it to the `no-extension`or you can put `*.o` in a `.gitignore`it will remove it from the default## Run as a **github workflow**this is not the latest normatrix but :link : [link](https://github.com/Saverio976/NorMatrix/runs/6242624947?check_suite_focus=true)![example](/assets/example_normatrix.png)![example1](/assets/example_normatrix_1.png)state : [![NorMatrix Check](https://github.com/Saverio976/NorMatrix/actions/workflows/normatrix_check.yml/badge.svg)](https://github.com/Saverio976/NorMatrix/actions/workflows/normatrix_check.yml)(N.B. : this workflow pass well, but it will not if you copy the code below)1. **in the repo root :**```bashmkdir .githubmkdir .github/workflowsecho 'name: NorMatrix Checkon: [push]jobs:  norm:    runs-on: ubuntu-latest    steps:    - uses: actions/checkout@v2    - name: set up python      uses: actions/setup-python@v2      with:        python-version: '3.9'    - name: clone NorMatrix      run: pip install git+https://github.com/Saverio976/NorMatrix.git    - name: NorMatrix      run: python3 -m normatrix --only-errors' &gt; .github/workflows/normatrix_check.yml```2. **you can push the modification to github**## Contribute***[more information on [CONTRIBUTNG.md](https://github.com/Saverio976/NorMatrix/blob/main/CONTRIBUTING.md)]***## Alternatives- [crNormz](https://github.com/CustomEntity/crNormz)- [Abricot-Norminette](https://github.com/Just1truc/Abricot-Norminette)- [jankun_norme](https://github.com/LeoSarochar/jankun_norme)- [Bubulle-Norminette](https://github.com/aureliancnx/Bubulle-Norminette)- [NormEZ](https://github.com/ronanboiteau/NormEZ)## Thanks-    chempa for his sample of file that dont follow the epitech norm-    and invisble testers that says **&quot;bha baah normatrix have a bug&quot;**## Contributors&lt;html&gt;&lt;table&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;&lt;a href=https://github.com/Saverio976&gt;&lt;img src=https://avatars.githubusercontent.com/u/57769503?v=4 width=&quot;50;&quot; alt=Xavier Mitault/&gt;&lt;br /&gt;&lt;sub style=&quot;font-size:14px&quot;&gt;&lt;b&gt;Xavier Mitault&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;&lt;a href=https://github.com/apps/github-actions&gt;&lt;img src=https://avatars.githubusercontent.com/in/15368?v=4 width=&quot;50;&quot; alt=apps/github-actions/&gt;&lt;br /&gt;&lt;sub style=&quot;font-size:14px&quot;&gt;&lt;b&gt;apps/github-actions&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;&lt;a href=https://github.com/TristanMasselot&gt;&lt;img src=https://avatars.githubusercontent.com/u/91824914?v=4 width=&quot;50;&quot; alt=Mizu/&gt;&lt;br /&gt;&lt;sub style=&quot;font-size:14px&quot;&gt;&lt;b&gt;Mizu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;&lt;a href=https://github.com/romainpanno&gt;&lt;img src=https://avatars.githubusercontent.com/u/91630499?v=4 width=&quot;50;&quot; alt=mE0w/&gt;&lt;br /&gt;&lt;sub style=&quot;font-size:14px&quot;&gt;&lt;b&gt;mE0w&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;&lt;a href=https://github.com/christophechr&gt;&lt;img src=https://avatars.githubusercontent.com/u/91553820?v=4 width=&quot;50;&quot; alt=Christophe CHHOR/&gt;&lt;br /&gt;&lt;sub style=&quot;font-size:14px&quot;&gt;&lt;b&gt;Christophe CHHOR&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/html&gt;</longdescription>
</pkgmetadata>