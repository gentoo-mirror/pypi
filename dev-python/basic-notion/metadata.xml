<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># basic-notionClient-agnostic model wrapper for Notion API.This library does not do any interaction over the network itself,so it can be used with any existing client that exposes as outputand accepts as input raw JSONable data.Note that this project is in active development, so major changesin its structure and API are quite possible in the near future.## InstallationJust like any other python package out there, it can be installed via `pip`:```bashpip install basic-notion```## Basic Examples### Defining ModelsAll of the examples assume that you put the following codein a file and name it `models.py`:```pythonfrom basic_notion.page import NotionPage, NotionPageListfrom basic_notion.field import SelectField, TitleField, MultiSelectFieldclass ReadingListItem(NotionPage):    type = SelectField(property_name='Type')    name = TitleField(property_name='Name')    status = SelectField(property_name='Status')    authors = MultiSelectField(property_name='Author')class ReadingList(NotionPageList[ReadingListItem]):    ITEM_CLS = ReadingListItem```All the other examples are using the `notion-client` packagefor sending and fetching data.See the package's [homepage on GitHub](https://github.com/ramnes/notion-sdk-py)### Fetching a page list from a database(assuming you put the contents of previous example in `models.py`)```pythonimport asyncioimport osfrom notion_client import AsyncClientfrom basic_notion.query import Queryfrom models import ReadingListasync def get_reading_list() -&gt; ReadingList:    database_id = os.environ['DATABASE_ID']    notion_token = os.environ['NOTION_TOKEN']    notion = AsyncClient(auth=notion_token)    data = await notion.databases.query(        **Query.database(            database_id        ).filter(            # Construct filter using model's field            # (only one filter expression is supported)            ReadingList.item.type.filter.equals('Book')        ).sorts(            # And, similarly, the result's sorting            # (multiple fields can be listed here)            ReadingList.item.name.sort.ascending        ).serialize()    )    return ReadingList(data=data)def print_reading_list(reading_list: ReadingList) -&gt; None:    for item in reading_list.items():        print(f'[{item.type.name}] {item.name.one_item.content}')async def main() -&gt; None:    reading_list = await get_reading_list()    print_reading_list(reading_list)asyncio.run(main())```### Creating a new page```pythonfrom notion_client import Clientfrom models import ReadingListItemdef create_page(client: Client, database_id: str) -&gt; ReadingListItem:    page = ReadingListItem.make(        parent={'database_id': database_id},        type='Book',        name=['The Best Book Ever'],        authors=['John Doe'],    )    response = client.pages.create(**page.data)    item = ReadingListItem(data=response)    # assert len(item.id) == 36    # assert item.type.name == 'Book'    # assert item.name.get_text() == 'The Best Book Ever'    # assert item.authors.get_text() == 'John Doe'    # assert not item.name[0].bold    return item```### Creating a new database```pythonfrom notion_client import Clientfrom basic_notion.database import NotionDatabasefrom models import ReadingListItemdef create_database(client: Client, parent_page_id: str) -&gt; NotionDatabase:    database = NotionDatabase.make(        title=['My New Shiny Database'],        parent={'page_id': parent_page_id},        properties=ReadingListItem.schema,    )    response = client.pages.create(**database.data)    created_database = NotionDatabase(data=response)    return created_database```You can also see the files in `tests/` for more examplesand more thorough usage of the various attributes and properties## Development and Testing### Configuring the test environmentInstall```bashpip install -Ue .[testing]```Create file `.env` with the following content:```NOTION_API_TOKEN=&lt;your-notion-token&gt;ROOT_PAGE_ID=&lt;your-page-id&gt;```Where:- `&lt;your-notion-token&gt;` is your Notion API developer's token.  You will need to create a Notion integration for this:  visit https://www.notion.so/my-integrations.- `&lt;your-page-id&gt;` is the ID of a page where the tests will  create new child pages and databases.  It must have read/write permissions for your access token.### TestingRun the tests:```bashpytest tests```And always validate typing:```bashmypy src/basic_notion```Or simply```bashmake test```(it will run all test commands)## LinksHomepage on GitHub: https://github.com/altvod/basic-notionProject's page on PyPi: https://pypi.org/project/basic-notion/Notion API: https://developers.notion.com/</longdescription>
</pkgmetadata>