<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;  &lt;img src=&quot;https://gitlab.com/Linaro/tuxsuite/raw/master/tuxsuite_logo.png&quot; alt=&quot;TuxSuite Logo&quot; width=&quot;50%&quot; /&gt;&lt;/div&gt;[![Pipeline Status](https://gitlab.com/Linaro/tuxsuite/badges/master/pipeline.svg)](https://gitlab.com/Linaro/tuxsuite/pipelines)[![coverage report](https://gitlab.com/Linaro/tuxsuite/badges/master/coverage.svg)](https://gitlab.com/Linaro/tuxsuite/commits/master)[![PyPI version](https://badge.fury.io/py/tuxsuite.svg)](https://pypi.org/project/tuxsuite/)[![Docker Pulls](https://img.shields.io/docker/pulls/tuxsuite/tuxsuite.svg)](https://hub.docker.com/r/tuxsuite/tuxsuite)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![PyPI - License](https://img.shields.io/pypi/l/tuxsuite)](https://gitlab.com/Linaro/tuxsuite/blob/master/LICENSE)[Documentation](https://docs.tuxsuite.com/) - [Repository](https://gitlab.com/Linaro/tuxsuite) - [Issues](https://gitlab.com/Linaro/tuxsuite/-/issues)[TuxSuite](https://tuxsuite.com), by Linaro, is a suite of tools and servicesto help with Linux kernel development. The TuxSuite CLI (this repo) is thesupported interface to TuxBuild, TuxTest and TuxOE.To request access, email us at tuxsuite@linaro.org or fill out our [accessrequest form](https://forms.gle/3NaW5fuNykGstsMq6).[[_TOC_]]# IntroductionThe TuxSuite CLI supports three services: TuxBuild, TuxTest and TuxOE.## TuxBuild&lt;img src=&quot;docs/images/tuxbuild_icon.svg&quot; alt=&quot;TuxBuild Logo&quot; width=&quot;100px&quot; align=&quot;left&quot;&gt;TuxBuild is an on demand API for building massive quantities of Linux kernelsin parallel. It is used at scale in production by[LKFT](https://lkft.linaro.org/) and[ClangBuiltLinux](https://clangbuiltlinux.github.io/) as well as manyindividual Linux kernel engineers.TuxBuild is accessed by running `tuxsuite build` and `tuxsuite plan`.## TuxTest&lt;img src=&quot;docs/images/tuxtest_icon.svg&quot; alt=&quot;TuxTest Logo&quot; width=&quot;100px&quot; align=&quot;left&quot;&gt;TuxTest is an on demand API for testing Linux kernels reliably and quickly. Itis currently in Beta phase and is already available to TuxBuild users.## TuxOE&lt;img src=&quot;docs/images/tuxoe_icon.svg&quot; alt=&quot;TuxOE Logo&quot; width=&quot;100px&quot; align=&quot;left&quot;&gt;TuxOE is an on demand API for building Yocto/OpenEmbedded in parallel at scale.It is used at scale in production by[LKFT](https://lkft.linaro.org/)## Install and Configure### Install using pipTuxSuite requires Python version 3.6 or greater, and is available using pip.To install tuxsuite on your system globally:```sudo pip3 install -U tuxsuite```To install tuxsuite to your home directory at ~/.local/bin:```pip3 install -U --user tuxsuite```To upgrade tuxsuite to the latest version, run the same command you ran toinstall it.### Install using Debian packagesTuxSuite provides Debian packages that have minimal dependencies, andshould work on any Debian or Debian-based (Ubuntu, etc) system.1) Download the repository signing key and save it to/etc/apt/trusted.gpg.d/tuxsuite.gpg.```# wget -O /etc/apt/trusted.gpg.d/tuxsuite.gpg https://repo.tuxsuite.com/packages/signing-key.gpg```2) Create /etc/apt/sources.list.d/tuxsuite.list with the following contents:```deb https://repo.tuxsuite.com/packages/ ./```3) Install tuxsuite as you would any other package:```apt updateapt install tuxsuite```Upgrading tuxsuite will work just like it would for any other package(apt update, apt upgrade).### Install using RPM packagesTuxSuite provides RPM packages that have minimal dependencies, andshould work on any RPM-based (Fedora, etc) system.1) Create /etc/yum.repos.d/tuxsuite.repo with the following contents:```[tuxsuite]name=tuxsuitetype=rpm-mdbaseurl=https://repo.tuxsuite.com/packages/gpgcheck=1gpgkey=https://repo.tuxsuite.com/packages/repodata/repomd.xml.keyenabled=1```2) Install tuxsuite as you would any other package:```dnf install tuxsuite```Upgrades will be available in the same repository, so you can get themusing the same procedure you already use to get other updates for yoursystem.### Install using dockertuxsuite is also available as a docker container at[tuxsuite/tuxsuite](https://hub.docker.com/r/tuxsuite/tuxsuite).For example, to run tuxsuite via docker:```docker run tuxsuite/tuxsuite tuxsuite build --help```### Install using docker from tuxsuite public ECRtuxsuite is also available as a docker container at[gallery.ecr.aws/tuxsuite/tuxsuite](https://gallery.ecr.aws/tuxsuite/tuxsuite).For example, to run tuxsuite via docker obtained from tuxsuite'spublic ECR:```docker run public.ecr.aws/tuxsuite/tuxsuite:latest tuxsuite build --help```### Running uninstalledIf you don't want to or can't install TuxSuite, you can run it directly from thesource directory. After getting the sources via git or something else, there isa `run` script that will do the right thing for you: you can either use thatscript directly, or symlink it to a directory in your `PATH`.```shell/path/to/tuxsuite/run --helpsudo ln -s /path/to/tuxsuite/run /usr/local/bin/tuxsuite &amp;&amp; tuxsuite --help```### Setup ConfigThe Authentication token needs to be stored in `~/.config/tuxsuite/config.ini`.The minimal format of the ini file is given below:```$ cat ~/.config/tuxsuite/config.ini[default]token=vXXXXXXXYYYYYYYYYZZZZZZZZZZZZZZZZZZZg```Alternatively, the `TUXSUITE_TOKEN` environment variable may be provided.If you do not have a tuxsuite token, please reach out to us attuxsuite@linaro.org.## Examples### tuxsuite buildSubmit a build request using the tuxsuite command line interface. This willwait for the build to complete before returning by default.```tuxsuite build --git-repo 'https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git' --git-ref master --target-arch arm64 --kconfig defconfig --toolchain gcc-9```### tuxsuite planSubmit a plan request using the tuxsuite command line interface. The plan filedescribes the list of builds along with the tests to run for each successfulbuild. When one build is finished, the corresponding test is automaticallystarted.Create a plan configuration file:```yamlversion: 1name: kernel validationdescription: Build and test linux kernel with every toolchainsjobs:- builds:  - {toolchain: gcc-8, target_arch: arm64, kconfig: defconfig}  - {toolchain: gcc-9, target_arch: arm64, kconfig: defconfig}  - {toolchain: gcc-10, target_arch: arm64, kconfig: defconfig}  - {toolchain: gcc-11, target_arch: arm64, kconfig: defconfig}  - {toolchain: gcc-12, target_arch: arm64, kconfig: defconfig}  - {toolchain: clang-10, target_arch: arm64, kconfig: defconfig}  - {toolchain: clang-11, target_arch: arm64, kconfig: defconfig}  - {toolchain: clang-12, target_arch: arm64, kconfig: defconfig}  - {toolchain: clang-13, target_arch: arm64, kconfig: defconfig}  - {toolchain: clang-14, target_arch: arm64, kconfig: defconfig}  - {toolchain: clang-15, target_arch: arm64, kconfig: defconfig}  - {toolchain: clang-16, target_arch: arm64, kconfig: defconfig}  - {toolchain: clang-nightly, target_arch: arm64, kconfig: defconfig}  test: {device: qemu-arm64, tests: [ltp-smoke]}- builds:  - {toolchain: gcc-8, target_arch: i386, kconfig: defconfig}  - {toolchain: gcc-9, target_arch: i386, kconfig: defconfig}  - {toolchain: gcc-10, target_arch: i386, kconfig: defconfig}  - {toolchain: gcc-11, target_arch: i386, kconfig: defconfig}  - {toolchain: gcc-12, target_arch: i386, kconfig: defconfig}  - {toolchain: clang-10, target_arch: i386, kconfig: defconfig}  - {toolchain: clang-11, target_arch: i386, kconfig: defconfig}  - {toolchain: clang-12, target_arch: i386, kconfig: defconfig}  - {toolchain: clang-13, target_arch: i386, kconfig: defconfig}  - {toolchain: clang-14, target_arch: i386, kconfig: defconfig}  - {toolchain: clang-15, target_arch: i386, kconfig: defconfig}  - {toolchain: clang-16, target_arch: i386, kconfig: defconfig}  - {toolchain: clang-nightly, target_arch: i386, kconfig: defconfig}  test: {device: qemu-i386, tests: [ltp-smoke]}- builds:  - {toolchain: gcc-8, target_arch: x86_64, kconfig: defconfig}  - {toolchain: gcc-9, target_arch: x86_64, kconfig: defconfig}  - {toolchain: gcc-10, target_arch: x86_64, kconfig: defconfig}  - {toolchain: gcc-11, target_arch: x86_64, kconfig: defconfig}  - {toolchain: gcc-12, target_arch: x86_64, kconfig: defconfig}  - {toolchain: clang-10, target_arch: x86_64, kconfig: defconfig}  - {toolchain: clang-11, target_arch: x86_64, kconfig: defconfig}  - {toolchain: clang-12, target_arch: x86_64, kconfig: defconfig}  - {toolchain: clang-13, target_arch: x86_64, kconfig: defconfig}  - {toolchain: clang-14, target_arch: x86_64, kconfig: defconfig}  - {toolchain: clang-15, target_arch: x86_64, kconfig: defconfig}  - {toolchain: clang-16, target_arch: x86_64, kconfig: defconfig}  - {toolchain: clang-nightly, target_arch: x86_64, kconfig: defconfig}  test: {device: qemu-x86_64, tests: [ltp-smoke]}```Submit the plan with:```tuxsuite plan --git-repo https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git --git-ref master plan.yaml```### tuxsuite testSubmit a test request using the tuxsuite command line interface. This will waitfor the test to complete before returning.```tuxsuite test --device qemu-x86_64 --kernel https://storage.tuxboot.com/x86_64/bzImage --tests ltp-smoke```### tuxsuite bakeSubmit an OE build request using the tuxsuite command line interface. This will waitfor the OE build to complete before returning.```tuxsuite bake submit build-definition.json```Sample build definition json file for OE bake build.```json{  &quot;container&quot;: &quot;ubuntu-20.04&quot;,  &quot;distro&quot;: &quot;oniro-linux&quot;,  &quot;environment&quot;: {    &quot;TEMPLATECONF&quot;: &quot;../oniro/flavours/linux&quot;  },  &quot;envsetup&quot;: &quot;oe-core/oe-init-build-env&quot;,  &quot;machine&quot;: &quot;qemux86-64&quot;,  &quot;sources&quot;: {    &quot;repo&quot;: {      &quot;branch&quot;: &quot;kirkstone&quot;,      &quot;manifest&quot;: &quot;default.xml&quot;,      &quot;url&quot;: &quot;https://gitlab.eclipse.org/eclipse/oniro-core/oniro&quot;    }  },  &quot;target&quot;: &quot;intltool-native&quot;}```### tuxsuite resultsThe `results` sub-command provide a way to get the status of abuild/test/plan that has been previously submitted.The `results` sub-command when invoked with `fetch` sub-command shows thelatest builds, tests, and plans that have been previously submitted bythe user.```shelltuxsuite results fetch```The `build` option fetches the `results` of the `build` based on thegiven `uid````shelltuxsuite results --build 1t26TJROt6zoxIw3YS2OlMXMGzK```The `test` option fetches the `results` of the `test` based on thegiven `uid````shelltuxsuite results --test 1s20dnMkE94e3BHW8pEbOWuyL6z```The `plan` option fetches the `results` of the `plan` based on thegiven `uid````shelltuxsuite results --plan 1t2UxTeU15WDwvhloPFUqjmr3CX```## Projects and Developers using tuxsuite- [LKFT](https://lkft.linaro.org/) - Linaro's Linux Kernel Functional Testing  uses tuxsuite with  [gitlab-ci](https://about.gitlab.com/stages-devops-lifecycle/continuous-integration/)  to continuously build upstream Linux kernels. The kernels are then  functionally tested on a variety of hardware using  [LAVA](https://www.lavasoftware.org/).- [ClangBuiltLinux](https://clangbuiltlinux.github.io/) uses TuxBuild to  validate hundreds of combinations of Linux kernels and LLVM environments.- Lee Jones uses a [GitLab CI  pipeline](https://gitlab.com/Linaro/lkft/users/lee.jones/lag-linaro-linux/-/pipelines)  to validate his 3.18 kernel maintainership. The gitlab pipeline, tuxsuite  config, and README.md documenting its setup are defined in the  [kernel-pipeline](https://gitlab.com/Linaro/lkft/users/lee.jones/kernel-pipeline)  repository.## Community and SupportThe TuxSuite team may be engaged through chat, email, or gitlab issues.To chat with us, [join our public Discord](https://discord.gg/4hhTzUrj5M), orour IRC channels #tuxsuite and #tuxmake on[Libera Chat](https://libera.chat/).Questions, comments or feedback are always welcome by private email attuxsuite@linaro.org.Finally, gitlab issues are used to track bugs and feature requests in both[tuxsuite](https://gitlab.com/Linaro/tuxsuite/-/issues) and[tuxmake](https://gitlab.com/Linaro/tuxmake/-/issues) projects.</longdescription>
</pkgmetadata>