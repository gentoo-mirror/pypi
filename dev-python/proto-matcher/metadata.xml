<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># proto-matcherTest matchers for Protobuffer in Python.This is based on [MessageDifferencer](https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.util.message_differencer) as well as the [EqualsProto](https://github.com/google/googletest/issues/1761) googletest matcher.## APIThis packages provides the following [PyHamcrest](https://github.com/hamcrest/PyHamcrest) matchers:### `equals_proto````pythonequals_proto(message: Union[Message, str])```Test the argument equals the given protobuf message.### `approximately````pythonapproximately(proto_matcher: Matcher[Message],              float_margin: Optional[float] = None,              float_fraction: Optional[float] = None)```Test the argument equals the given protobuf message, while comparing any float field using approximation.### `ignoring_field_paths````pythonignoring_field_paths(field_paths: Set[Tuple[str]],                     matcher: _ProtoMatcher)```Test the argument equals the given protobuf message, while ignoring those fields specified in the field paths.### `ignoring_repeated_field_ordering````pythonignoring_repeated_field_ordering(proto_matcher: Matcher[Message])```Test the argument equals the given protobuf message, ignoring the ordering of any repeated field.### `partially````pythonpartially(proto_matcher: Matcher[Message])```Test the argument partially equals the given protobuf message, i.e. if a field is in the argument but not in the expected message, it's ignored in the comparsion.</longdescription>
</pkgmetadata>