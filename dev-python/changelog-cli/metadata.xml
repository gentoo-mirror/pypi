<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Changelog CLI[![PyPI version](https://badge.fury.io/py/changelog-cli.svg)](https://badge.fury.io/py/changelog-cli)[![Build Status](https://travis-ci.org/mc706/changelog-cli.svg?branch=master)](https://travis-ci.org/mc706/changelog-cli)[![Code Health](https://landscape.io/github/mc706/changelog-cli/master/landscape.svg?style=flat)](https://landscape.io/github/mc706/changelog-cli/master)[![Coverage Status](https://coveralls.io/repos/github/mc706/changelog-cli/badge.svg?branch=master)](https://coveralls.io/github/mc706/changelog-cli?branch=master)[![PyPI](https://img.shields.io/pypi/pyversions/changelog-cli.svg)](https://pypi.org/project/changelog-cli/)[![Stories in Ready](https://badge.waffle.io/mc706/changelog-cli.png?label=ready&amp;title=Ready)](https://waffle.io/mc706/changelog-cli?utm_source=badge)A command line interface for managing your CHANGELOG.md files. Designed to make it easy to manage your repositoriesrelease history according to [Keep a Changelog](http://keepachangelog.com/).## Installationinstall using `pip` via:```pip install changelog-cli```## How ToTo keep an accurate changelog, whenenever you commit a change that affects how end users useyour project, use this command line tool to add a line to the changelog. If you added a new feature, use something like `changelog new &quot;added feature x&quot;`. This will add aline to your `CHANGELOG.md` under the `### New` section. When you are ready for release, run `changelog release` and that will infer the correct semantic version based on the types of changes since the last release. For example your `new` change shouldprompt a `minor (0.X.0)` release. A `breaks` change would prompt a `major (X.0.0)` version bump and `fix` or `change` changes would prompt a `patch (0.0.X)`.You can manually override what type of of release via `changelog release --minor` using the `--patch`, `--minor` or `--major`flags. ## Commands`changelog init` -&gt; Creates a CHANGELOG.md with some basic documentation in it.`changelog (new|change|fix|breaks) &quot;&lt;message&gt;&quot;` -&gt; adds a line to the appropriate section`changelog release (--major|minor|patch|suggest) (--yes)` -&gt; Cuts a release for the changelog, incrementing the version.`changelog current` -&gt; returns the current version of the project based on the changelog`changelog suggest` -&gt; returns the suggested version of the next release based on the current logged changes`changelog --version` -&gt; get the current version of the changelog tool`changelog --help` -&gt; show helps screen## ShortcutIf you get tired of typing out `changelog` for every command, it can also be accessed via its shorthand `cl`## Example Usage```&gt;&gt;&gt; changelog current1.4.1&gt;&gt;&gt; changelog new &quot;add new feature x&quot;&gt;&gt;&gt; changelog suggest1.5.0&gt;&gt;&gt; changelog breaks &quot;removing key feature y&quot;&gt;&gt;&gt; cl releasePlanning on releasing version 2.0.0. Proceed? [y/N]: n&gt;&gt;&gt; cl release --minor&gt;&gt;&gt; cl current1.5.0```Example Changelog as a result of the above```# CHANGELOGAll notable changes to this project will be documented in this file.This project adheres to [Semantic Versioning](http://semver.org/) and [Keep a Changelog](http://keepachangelog.com/).## Unreleased---### New### Changes### Fixes### Breaks## 1.5.0 - (2017-06-09)---### New* add new feature x### Breaks* remove key feature y## 1.4.1 - (2017-05-29)---### Changes* updating documentation...```</longdescription>
</pkgmetadata>