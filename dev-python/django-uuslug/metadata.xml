<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Uuslug**A Django slugify application that guarantees `Uniqueness` and handles `Unicode`**[![status-image]][status-link][![version-image]][version-link][![coverage-image]][coverage-link]# OverviewIn short: UUSlug == (`U`nique + `U`nicode) Slug# How to install    1. easy_install django-uuslug    2. pip install django-uuslug    3. git clone http://github.com/un33k/django-uuslug        a. cd django-uuslug        b. run python setup.py    4. wget https://github.com/un33k/django-uuslug/zipball/master        a. unzip the downloaded file        b. cd into django-uuslug-* directory        c. run python setup.py    5. pip install -e git+https://github.com/un33k/django-uuslug#egg=django-uuslug# How to use```python ####### Unicode Test ####### from uuslug import slugify txt = &quot;This is a test ---&quot; r = slugify(txt) self.assertEqual(r, &quot;this-is-a-test&quot;) txt = &quot;___This is a test ---&quot; r = slugify(txt) self.assertEqual(r, &quot;this-is-a-test&quot;) txt = &quot;___This is a test___&quot; r = slugify(txt) self.assertEqual(r, &quot;this-is-a-test&quot;) txt = &quot;This -- is a ## test ---&quot; r = slugify(txt) self.assertEqual(r, &quot;this-is-a-test&quot;) txt = '影師嗎' r = slugify(txt) self.assertEqual(r, &quot;ying-shi-ma&quot;) txt = 'C\'est déjà l\'été.' r = slugify(txt) self.assertEqual(r, &quot;c-est-deja-l-ete&quot;) txt = 'Nín hǎo. Wǒ shì zhōng guó rén' r = slugify(txt) self.assertEqual(r, &quot;nin-hao-wo-shi-zhong-guo-ren&quot;) txt = 'jaja---lol-méméméoo--a' r = slugify(txt) self.assertEqual(r, &quot;jaja-lol-mememeoo-a&quot;) txt = 'Компьютер' r = slugify(txt) self.assertEqual(r, &quot;kompiuter&quot;) txt = 'jaja---lol-méméméoo--a' r = slugify(txt, max_length=9) self.assertEqual(r, &quot;jaja-lol&quot;) txt = 'jaja---lol-méméméoo--a' r = slugify(txt, max_length=15) self.assertEqual(r, &quot;jaja-lol-mememe&quot;) txt = 'jaja---lol-méméméoo--a' r = slugify(txt, max_length=50) self.assertEqual(r, &quot;jaja-lol-mememeoo-a&quot;) txt = 'jaja---lol-méméméoo--a' r = slugify(txt, max_length=15, word_boundary=True) self.assertEqual(r, &quot;jaja-lol-a&quot;) txt = 'jaja---lol-méméméoo--a' r = slugify(txt, max_length=17, word_boundary=True) self.assertEqual(r, &quot;jaja-lol-mememeoo&quot;) txt = 'jaja---lol-méméméoo--a' r = slugify(txt, max_length=18, word_boundary=True) self.assertEqual(r, &quot;jaja-lol-mememeoo&quot;) txt = 'jaja---lol-méméméoo--a' r = slugify(txt, max_length=19, word_boundary=True) self.assertEqual(r, &quot;jaja-lol-mememeoo-a&quot;) txt = 'jaja---lol-méméméoo--a' r = slugify(txt, max_length=20, word_boundary=True, separator=&quot;.&quot;) self.assertEqual(r, &quot;jaja.lol.mememeoo.a&quot;) txt = 'jaja---lol-méméméoo--a' r = slugify(txt, max_length=20, word_boundary=True, separator=&quot;ZZZZZZ&quot;) self.assertEqual(r, &quot;jajaZZZZZZlolZZZZZZmememeooZZZZZZa&quot;) txt = 'one two three four five' r = slugify(txt, max_length=13, word_boundary=True, save_order=True) self.assertEqual(r, &quot;one-two-three&quot;) txt = 'one two three four five' r = slugify(txt, max_length=13, word_boundary=True, save_order=False) self.assertEqual(r, &quot;one-two-three&quot;) txt = 'one two three four five' r = slugify(txt, max_length=12, word_boundary=True, save_order=False) self.assertEqual(r, &quot;one-two-four&quot;) txt = 'one two three four five' r = slugify(txt, max_length=12, word_boundary=True, save_order=True) self.assertEqual(r, &quot;one-two&quot;) txt = 'this has a stopword' r = slugify(txt, stopwords=['stopword']) self.assertEqual(r, 'this-has-a') txt = 'the quick brown fox jumps over the lazy dog' r = slugify(txt, stopwords=['the']) self.assertEqual(r, 'quick-brown-fox-jumps-over-lazy-dog') txt = 'Foo A FOO B foo C' r = slugify(txt, stopwords=['foo']) self.assertEqual(r, 'a-b-c') txt = 'Foo A FOO B foo C' r = slugify(txt, stopwords=['FOO']) self.assertEqual(r, 'a-b-c') txt = 'the quick brown fox jumps over the lazy dog in a hurry' r = slugify(txt, stopwords=['the', 'in', 'a', 'hurry']) self.assertEqual(r, 'quick-brown-fox-jumps-over-lazy-dog') ####### Uniqueness Test ####### from django.db import models from uuslug import uuslug # Override your object's save method with something like this (models.py) class CoolSlug(models.Model):     name = models.CharField(max_length=100)     slug = models.CharField(max_length=200)     def __unicode__(self):         return self.name     def save(self, *args, **kwargs):         self.slug = uuslug(self.name, instance=self)         super(CoolSlug, self).save(*args, **kwargs) # Note: You can also specify the start number. # Example:     self.slug = uuslug(self.name, instance=self, start_no=2)     # the second slug should start with &quot;-2&quot; instead of &quot;-1&quot; name = &quot;john&quot; c = CoolSlug.objects.create(name=name) c.save() print(c.slug) # =&gt; &quot;john&quot; c1 = CoolSlug.objects.create(name=name) c1.save() print(c1.slug) # =&gt; &quot;john-1&quot; c2 = CoolSlug.objects.create(name=name) c2.save() print(c2.slug) # =&gt; &quot;john-2&quot; # If you need truncation of your slug to exact length, here is an example class SmartTruncatedSlug(models.Model):     name = models.CharField(max_length=19)     slug = models.CharField(max_length=10)     def __unicode__(self):         return self.name     def save(self, *args, **kwargs):         self.slug = uuslug(self.name, instance=self, max_length=10)         super(SmartTruncatedSlug, self).save(*args, **kwargs) # If you need automatic truncation of your slug, here is an example class AutoTruncatedSlug(models.Model):     name = models.CharField(max_length=19)     slug = models.CharField(max_length=19)     def __unicode__(self):         return self.name     def save(self, *args, **kwargs):         self.slug = uuslug(self.name, instance=self)         super(SmartTruncatedSlug, self).save(*args, **kwargs)```# Running the testsTo run the tests against the current environment:    python manage.py test# LicenseReleased under a ([BSD](LICENSE.md)) license.# VersionX.Y.Z Version    `MAJOR` version -- when you make incompatible API changes,    `MINOR` version -- when you add functionality in a backwards-compatible manner, and    `PATCH` version -- when you make backwards-compatible bug fixes.[status-image]: https://github.com/un33k/django-uuslug/actions/workflows/main.yml/badge.svg[status-link]: https://github.com/un33k/django-uuslug/actions/workflows/main.yml[status-image]: https://github.com/un33k/django-uuslug/actions/workflows/main.yml/badge.svg[version-image]: https://img.shields.io/pypi/v/django-uuslug.svg[version-link]: https://pypi.python.org/pypi/django-uuslug[coverage-image]: https://coveralls.io/repos/un33k/django-uuslug/badge.svg[coverage-link]: https://coveralls.io/r/un33k/django-uuslug[download-image]: https://img.shields.io/pypi/dm/django-uuslug.svg[download-link]: https://pypi.python.org/pypi/django-uuslug# Sponsors[Neekware Inc.](https://github.com/neekware)</longdescription>
</pkgmetadata>