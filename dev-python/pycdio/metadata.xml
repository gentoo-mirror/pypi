<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Package Status 1| |Package Status 2| |Pypi Installs|Introduction==============pycdio is a Python interface to the *libcdio*, the CD Input andControl library http://www.gnu.org/software/libcdioYou can get the source at the same place as libcdio:ftp://ftp.gnu.org:/pub/gnu/libcdio/The *pycdio* and *libcdio* libraries encapsulate CD-ROM reading andcontrol. Python programs wishing to be oblivious of the OS- anddevice-dependent properties of a CD-ROM can use this library.Sample Usage============Getting CD-ROM Drive Information--------------------------------.. code-block:: python    import sys    import cdio, pycdio    try:        d = cdio.Device(driver_id=pycdio.DRIVER_UNKNOWN)        drive_name = d.get_device()    except IOError:        print(&quot;Problem finding a CD-ROM&quot;)        sys.exit(1)    ok, vendor, model, release = d.get_hwinfo()    print(&quot;drive: %s, vendor: %s, model: %s, release: %s&quot; \      % (drive_name, vendor, model, release))    # Show CD-Text for an audio CD    cdt = d.get_cdtext()    i_tracks = d.get_num_tracks()    i_first_track = pycdio.get_first_track_num(d.cd)    for t in range(i_first_track, i_tracks + i_first_track):        for i in range(pycdio.MIN_CDTEXT_FIELD, pycdio.MAX_CDTEXT_FIELDS):            value = cdt.get(i, t)            # value can be empty but exist, compared to NULL values            if value is not None:                print(&quot;\t%s: %s&quot; % (pycdio.cdtext_field2str(i), value))                pass            pass        pass    return    d.close()Other sample code can be found in the *example* directory of the distribution.Requirements=============* A C compiler so the extension can be compiled when it is installed.* libcdio (http://www.gnu.org/software/libcdio) and it's header files installed.* SWIG http://www.swig.org* pkg-config http://pkg-config.freedesktop.orgTo build on Debian (e.g. Ubuntu):-------------------------------------::    $ apt-get install python-dev    $ apt-get install libcdio-dev    $ apt-get install libiso9660-dev    $ apt-get install swig pkg-config    $ pip install -e .    $ make checkSWIG Problems===============I've tried to make this work back to Python 2.3 or so.I've noticed however problems in various distutils.If you see a message like this when running `make check`:::     File &quot;/home/rocky/.pyenv/versions/3.5.6/lib/python3.5/distutils/unixccompiler.py&quot;, line 207, in library_dir_option      return &quot;-L&quot; + dir     TypeError: Can't convert 'bytes' object to str implicitlyCopy in a recent distutils `unixccompiler.py` like this:::   $ cp admin-tools/unixccompiler.py /home/rocky/.pyenv/versions/3.5.6/lib/python3.5/distutils/unixccompiler.pyThe distutils distribution says that it tries to be compatible with all Python versions from 2.3. The`unixccompiler.py` in `admin_tools` is from the Python 3.7.4 distribution.Completeness=============*libcdio* is rather large and yet may still grow a bit.What is in *pycdio* is incomplete; over time it may grow to completiondepending on various factors: e.g. interest, whether others helpout.Sections of *libcdio* that are currently missing are the (SCSI) MMCcommands, and the cdparanoia library. Of the audio controls, I put inthose things that didn't require any thought. The ISO 9660 library ispretty complete, except file *stat()* information which is at present ispretty minimal.That said, what's in there is very usable. It contains probably moreaccess capabilities than what most media players that don't uselibcdio have.The encapsulation by SWIG is done in two parts. The lower-level pythoninterface is called pycdio and is generated by SWIG.The more object-oriented module is *cdio*; it is a Python class thatuses pycdio. Although pycdio is perfectly usable on its own, it isexpected that *cdio* is what most people will use. As *pycdio* moreclosely models the C interface, it is conceivable (if unlikely) thatdiehard libcdio C users who are very familiar with that interfacecould prefer that.It is probably possible to change the SWIG in such a way to combinethese pieces. However there are the problems. First, I'm not that muchof a SWIG expert. Second it looks as though the resulting SWIG codewould be more complex. Third the separation makes translation verystraight forward to understand and maintain: first get what's in Cinto Python as a one-to-one translation. Then we implement some niceabstraction off of that. The abstraction can be modified withouthaving to redo the underlying translation. (But the reverse isgenerally not true: usually changes to the C-to-python translation,pycdio, do result in small, but obvious and straightforward changes tothe abstraction layer cdio.)There is much to be done - you want to help out, please do so!Standalone documentation is missing although many of the methods,classes and functions have some document strings. See also theprograms in the example directory.pycdio for enterprise=====================Available as part of the Tidelift Subscription.The maintainers of pycdio and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. `Learn more. &lt;https://tidelift.com/subscription/pkg/pypi-pycdio?utm_source=pypi-pycdio&amp;utm_medium=referral&amp;utm_campaign=readme&gt;`_Security contact information============================To report a security vulnerability, please use the `Tidelift security contact &lt;https://tidelift.com/security&gt;`_ and Tidelift will coordinate the fix and disclosure... |Package Status 1| image:: https://repology.org/badge/tiny-repos/pycdio.svg :target: https://repology.org/project/pycdio/versions.. |Package Status 2| image:: https://repology.org/badge/tiny-repos/python:pycdio.svg :target: https://repology.org/project/pycdio/versions.. |Pypi Installs| image:: https://pepy.tech/badge/pycdio</longdescription>
</pkgmetadata>