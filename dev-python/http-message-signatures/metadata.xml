<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>http-message-signatures: An implementation of the IETF HTTP Message Signatures draft standard=============================================================================================*http-message-signatures* is an implementation of the IETF`HTTP Message Signatures &lt;https://datatracker.ietf.org/doc/draft-ietf-httpbis-message-signatures&gt;`_ draft standard inPython.Installation------------::    pip3 install http-message-signaturesSynopsis--------.. code-block:: python    from http_message_signatures import HTTPMessageSigner, HTTPMessageVerifier, HTTPSignatureKeyResolver, algorithms    import requests, base64, hashlib, http_sfv    class MyHTTPSignatureKeyResolver(HTTPSignatureKeyResolver):        keys = {&quot;my-key&quot;: b&quot;top-secret-key&quot;}        def resolve_public_key(self, key_id: str):            return self.keys[key_id]        def resolve_private_key(self, key_id: str):            return self.keys[key_id]    request = requests.Request('POST', 'https://example.com/foo?param=Value&amp;Pet=dog', json={&quot;hello&quot;: &quot;world&quot;})    request = request.prepare()    request.headers[&quot;Content-Digest&quot;] = str(http_sfv.Dictionary({&quot;sha-256&quot;: hashlib.sha256(request.body).digest()}))    signer = HTTPMessageSigner(signature_algorithm=algorithms.HMAC_SHA256, key_resolver=MyHTTPSignatureKeyResolver())    signer.sign(request, key_id=&quot;my-key&quot;, covered_component_ids=(&quot;@method&quot;, &quot;@authority&quot;, &quot;@target-uri&quot;, &quot;content-digest&quot;))    verifier = HTTPMessageVerifier(signature_algorithm=algorithms.HMAC_SHA256, key_resolver=MyHTTPSignatureKeyResolver())    verifier.verify(request)Note that verifying the body content-digest is outside the scope of this package's functionality, so it remains thecaller's responsibility. The `requests-http-signature &lt;https://github.com/pyauth/requests-http-signature&gt;`_ librarybuilds upon this package to provide integrated signing and validation of the request body... admonition:: See what is signed It is important to understand and follow the best practice rule of &quot;See what is signed&quot; when verifying HTTP message signatures. The gist of this rule is: if your application neglects to verify that the information it trusts is what was actually signed, the attacker can supply a valid signature but point you to malicious data that wasn't signed by that signature. Failure to follow this rule can lead to vulnerability against signature wrapping and substitution attacks. In http-message-signatures, you can ensure that the information signed is what you expect to be signed by only trusting the data returned by the ``verify()`` method::   verify_result = verifier.verify(request) This returns VerifyResult, a namedtuple with the following attributes: * label (str): The label for the signature * algorithm: (same as signature_algorithm above) * covered_components: A mapping of component names to their values, as covered by the signature * parameters: A mapping of signature parameters to their values, as covered by the signature * body: Always ``None`` (the `requests-http-signature &lt;https://github.com/pyauth/requests-http-signature&gt;`_ package   implements returning the body upon successful digest validation).Authors-------* Andrey KislyukLinks-----* `Project home page (GitHub) &lt;https://github.com/pyauth/http-message-signatures&gt;`_* `Documentation &lt;https://FIXME&gt;`_* `Package distribution (PyPI) &lt;https://pypi.python.org/pypi/http-message-signatures&gt;`_* `Change log &lt;https://github.com/pyauth/http-message-signatures/blob/master/Changes.rst&gt;`_* `IETF HTTP Message Signatures standard tracker &lt;https://datatracker.ietf.org/doc/draft-ietf-httpbis-message-signatures/&gt;`_* `OWASP Top Ten &lt;https://owasp.org/www-project-top-ten/&gt;`_Bugs~~~~Please report bugs, issues, feature requests, etc. on `GitHub &lt;https://github.com/pyauth/http-message-signatures/issues&gt;`_.License-------Licensed under the terms of the `Apache License, Version 2.0 &lt;http://www.apache.org/licenses/LICENSE-2.0&gt;`_.</longdescription>
</pkgmetadata>