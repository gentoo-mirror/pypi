<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># litenv&lt;!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --&gt;This file will become your README and also the index of yourdocumentation.## Developer Guide### Setup``` sh# create conda environment$ mamba env create -f env.yml# update conda environment$ mamba env update -n litenv --file env.yml# $ mamba env update -n litenv --file env.mac.yml```### Install``` shpip install -e .# install from pypipip install litenv```### nbdev``` sh# activate conda environment$ conda activate litenv# make sure the litenv package is installed in development mode$ pip install -e .# make changes under nbs/ directory# ...# compile to have changes apply to the litenv package$ nbdev_prepare```### Publishing``` sh# publish to pypi$ nbdev_pypi# publish to conda$ nbdev_conda --build_args '-c conda-forge'```# Usage## InstallationInstall latest from the GitHub[repository](https://github.com/dsm-72/litenv):``` sh$ pip install git+https://github.com/dsm-72/litenv.git```or from [conda](https://anaconda.org/dsm-72/litenv)``` sh$ conda install -c dsm-72 litenv```or from [pypi](https://pypi.org/project/litenv/)``` sh$ pip install litenv```## DocumentationDocumentation can be found hosted on GitHub[repository](https://github.com/dsm-72/litenv)[pages](https://dsm-72.github.io/litenv/). Additionally you can findpackage manager specific guidelines on[conda](https://anaconda.org/dsm-72/litenv) and[pypi](https://pypi.org/project/litenv/) respectively.``` shell$ litenv --help```| Option                 | Short Option | Type | Description                                                                      | Default Value                                            ||------------------------|--------------|------|----------------------------------------------------------------------------------|----------------------------------------------------------|| `--name`               | `-n`         | TEXT | The name of the environment you want to make.                                    | `litenv`                                                 || `--file`               | `-f`         | TEXT | The YAML file to save the environment specifications to.                         | `env.yml`                                                || `--theme`              | `-t`         | TEXT | The theme from which to style choices.                                           | `blue_night`                                             || `--specification-file` | `-s`         | TEXT | The template file from which to generate choices.                                | `/Users/solst/Projects/litenv/litenv/../data/litenv.yml` || `--prefix-name`        | `-p`         |      | Prefix the environment name to the YAML file.                                    | `True`                                                   || `--print-tree`         | `-r`         |      | Print the dependency tree.                                                       |                                                          || `--conda`              | `-c`         |      | Use conda to create the environment. Otherwise, use mamba.                       |                                                          || `--make-env`           | `-m`         |      | Create the environment.                                                          |                                                          || `--install-completion` |              |      | Install completion for the current shell.                                        |                                                          || `--show-completion`    |              |      | Show completion for the current shell, to copy it or customize the installation. |                                                          || `--help`               |              |      | Show this message and exit.                                                      |                                                          |## Specification File### OverviewThe application specification file is a YAML (YAML Ain’t MarkupLanguage) file that is used to specify various configurations for yourapplication. It defines the requirements and dependencies for yourapplication, allowing you to control the environment in which yourapplication will run. YAML is a human-readable data serializationlanguage that has become a standard for configuration files in softwaredevelopment and deployment.### Structure of the Specification File#### `python`The `python` field specifies the required Python version for theapplication. For example:``` yamlpython: '&gt;=3.10'```This entry implies that the application requires a Python version of3.10 or higher.#### `channels`This field specifies additional channels that might be needed for yourapplication. Channels in Python are paths where packages are stored andcan be accessed when needed. For example:``` yamlchannels:    - pytorch  - conda-forge  ```This implies that packages for the application may be sourced from the`pytorch` or `conda-forge` channels.#### `categories`The `categories` field contains several subfields defining differentgroups of dependencies for your application.Each category has a `name`, a `checked` field (which may be set to trueor false, indicating whether this category should be checked by defaultor not), a `dependencies` field (which lists the specific packagesrequired in this category), and optional `subcategories`.Each dependency could optionally include attributes such as `channel`,`note`, `always`, `pypi_name`, `cuda_only`, `version`, `pip_only` and`no_arm_support`.For example:``` yamlcategories:  utils:    name: 'Utilities'    checked: true    dependencies:      tqdm:        always: true      pyyaml:```In this example, the `utils` category includes two dependencies, `tqdm`and `pyyaml`. The `always: true` field for `tqdm` implies that thisdependency should always be included when the `utils` category ischecked.#### `accelerators`The `accelerators` field specifies the type of hardware accelerator thatyour application supports. This includes options like ‘mps’, ‘cpu’, or‘cuda’.``` yamlaccelerators:  - mps  - cpu  - cuda```This entry implies that the application can use either MPS, CPU, or CUDAas the hardware accelerator.### Creating a Specification FileCreating a specification file involves defining these fields and valuesto suit your application’s needs. YAML’s indentation-based scoping andsimple syntax make this task straightforward. The values to be useddepend on the requirements of your specific application.For Python dependencies, you can often find the exact names and versionsyou need by using the package management system (like pip or conda) orby referring to the documentation of the library in question. Forhardware requirements, you will need to understand your application’sperformance needs and the capabilities of the hardware where theapplication will be run.Remember to keep the file updated as the requirements of yourapplication evolve. Regular updates will ensure that your applicationalways has the resources it needs to run efficiently.</longdescription>
</pkgmetadata>