<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django-Swap-User (Beta)## AboutIf you are tired from copying one custom user model from one project to another ones - use this package.This will do all for you. ## Installation```pip install django-swap-user```## Basic usage1. Choose one of models that suits for you and copy related settings from the table:| Application name | Username field | Description                                                            | `INSTALLED_APPS`                               | `AUTH_USER_MODEL`                      | Replace `django.contrib.admin` to          ||------------------|----------------|------------------------------------------------------------------------|------------------------------------------------|----------------------------------------|--------------------------------------------|| `to_email`       | `email`        | User with `email` username                                             | ```&quot;swap_user&quot;, &quot;swap_user.to_email&quot;,```       | `&quot;swap_to_email.EmailUser&quot;`            | not required                               |                                  | `to_email_otp`   | `email`        | User with `email` username, without `password` and OPT authentication  | ```&quot;swap_user&quot;, &quot;swap_user.to_email_otp&quot;,```   | `&quot;swap_to_email_otp.EmailOTPUser&quot;`     | `&quot;swap_user.to_email_otp.apps.SiteConfig&quot;` | | `to_phone`       | `phone`        | User with `phone` username                                             | ```&quot;swap_user&quot;, &quot;swap_user.to_phone&quot;,```       | `&quot;swap_to_phone.PhoneUser&quot;`            | not required                               |                                            | `to_phone_otp`   | `phone`        | User with `phone` username, without `password`  and OTP authentication | ```&quot;swap_user&quot;, &quot;swap_user.to_phone_otp&quot;,```   | `&quot;swap_to_phone_otp.PhoneOTPUser&quot;`     | `&quot;swap_user.to_phone_otp.apps.SiteConfig&quot;` | 2. Add corresponding app to `INSTALLED_APPS`:```pythonINSTALLED_APPS = [    ...    &quot;swap_user&quot;,    &quot;swap_user.to_email&quot;,    ...]```3. Change `AUTH_USER_MODEL` to corresponding:```pythonAUTH_USER_MODEL = &quot;swap_to_email.EmailUser&quot;```4. If required replace `django.contrib.admin` in `INSTALLED_APPS` to something.5. Apply migrations:```bashpython manage.py migrate swap_to_email```## ArchitectureApplication `swap_user` split into 3 apps:  - `to_email` - provides user with `email` username field  - `to_email_otp` - provides user with `email` username field and OTP (One Time Password) authentication  - `to_phone` - provides user with `phone` username field  - `to_phone_otp` - provides user with `phone` username field and OTP (One Time Password) authentication    ## Why so unusual architecture?Because if we leave them in one app, they all will create migrations and tables - such approach leads us to redundant tables.They will be treated as 3 custom models within the same app, which causes perplexing and cognitive burden.With such approach (when there is a common app which contains internal apps) - the user choose and connect only the specific user model which suits best for concrete business-logic. I have found such approach at Django REST Framework `authtoken` application and decide to use it - reference is [here](https://github.com/encode/django-rest-framework/tree/master/rest_framework/authtoken).## Providing User model at start of projectWhen you are starting a project from zero or scratch - this is a best moment to provide custom User model.Because you have't a lot of migrations or you can easily regenerate them. Moreover, Django's [official docs](https://docs.djangoproject.com/en/dev/topics/auth/customizing/#using-a-custom-user-model-when-starting-a-project)recommend to provide custom User model even if you are fully satisfied with default one - in future it will be easier to extend custom model that fits into your business cases.## Providing User model at mid of projectThis is a harder way of doing things, but it is still possible to do:- Do all the steps at testing database and ONLY IF all of them was successful - try to apply at production environment- Please note that these steps are **common** - they fit in most cases, but in some circumstances you need act on situation.- Create a backup of your database- Add stable tag into your repository or save a commit hash reference- Pray to the heavens- Remove all of yours migrations in every app of Django's project- Remove all records from `django_migrations` table, for example with SQL `TRUNCATE django_migrations`- Now we have a &quot;clean&quot; state, so we can change default model- Generate new migrations for all of your applications - `python manage.py makemigrations` - Now we need to [fake migrate](https://docs.djangoproject.com/en/4.0/ref/django-admin/#cmdoption-migrate-fake) because we already have all the tables with data- First fake the `auth` application because we are depending from this one - `python manage.py migrate --fake auth`- Install this library, follow instructions and apply migrations- Then fake rest of migrations we have - `python manage.py migrate --fake`- Run your application!</longdescription>
</pkgmetadata>