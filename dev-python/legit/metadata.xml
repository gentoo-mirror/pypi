<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. -*-restructuredtext-*-Legit: Git for Humans=====================Inspired by GitHub for Mac.The Concept-----------`GitHub for Mac &lt;http://mac.github.com&gt;`_ is not just a Git client.This `comment &lt;https://news.ycombinator.com/item?id=2684483&gt;`_ on Hacker Newssays it best:    They haven't re-created the git CLI tool in a GUI, they've created something different. They've created a tool that makes Git more accessible. Little things like auto-stashing when you switch branches will confuse git veterans, but it will make Git much easier to grok for newcomers because of the assumptions it makes about your Git workflow.Why not bring this innovation back to the command line?The Interface-------------``switch &lt;branch&gt;``    Switches to specified branch.    Defaults to current branch.    Automatically stashes and unstashes any changes. (alias: ``sw``)``sync [&lt;branch&gt;]``    Synchronizes the given branch. Defaults to current branch.    Stash, Fetch, Auto-Merge/Rebase, Push, and Unstash.    You can only sync published branches. (alias: ``sy``)``publish [&lt;branch&gt;]``    Publishes specified branch to the remote. (alias: ``pub``)``unpublish &lt;branch&gt;``    Removes specified branch from the remote. (alias: ``unp``)``undo``    Un-does the last commit in git history.  (alias: ``un``)``branches [&lt;wildcard pattern&gt;]``    Display a list of available branches.    Allows wildcard pattern matching of branch name.The Installation----------------.. image:: https://img.shields.io/pypi/v/legit.svg    :target: https://pypi.python.org/pypi/legit/.. image:: https://img.shields.io/travis/frostming/legit/master.svg    :target: https://travis-ci.org/frostming/legit/.. image:: https://img.shields.io/coveralls/github/frostming/legit.svg    :target: https://coveralls.io/r/frostming/legit/.. image:: https://repl.it/badge/github/frostming/legit    :target: https://repl.it/github/frostming/legitFrom `PyPI &lt;https://pypi.python.org/pypi/legit/&gt;`_ with the Python package manager::    pip install legitOr download a standalone Windows executable from `GitHub Releases &lt;https://github.com/frostming/legit/releases&gt;`_.To install the cutting edge version from the git repository::    git clone https://github.com/frostming/legit.git    cd legit    python setup.py installNote: if you encountered `Permission denied`,prepend `sudo` before the `pip` or `python setup.py` command.You'll then have the wonderful ``legit`` command available. Run it withina repository.To view usage and examples, run ``legit`` with no commands or options::    legitTo install the git aliases, run the following command::    legit --installTo uninstall the git aliases, run the following command::    legit --uninstallCommand Options---------------All legit commands support ``--verbose`` and ``--fake`` options.In order to view the git commands invoked by legit, use the ``--verbose`` option::    legit sync --verboseIf you want to see the git commands used by legit but don't want them invoked, use the ``--fake`` option::    legit publish --fakeCaveats-------- All remote operations are carried out by the remote identified in ``$ git config legit.remote remotename``- If a ``stash pop`` merge fails, Legit stops. I'd like to add checking for a failed merge, and undo the command with friendly error reporting.</longdescription>
</pkgmetadata>