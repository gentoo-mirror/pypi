<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MMDS: A general-purpose multimodal dataset wrapper&gt; This project is under construction, API may change from time to time.## Installation### Stable (not stable yet though)```pip install mmds```### Latest```pip install mmds --pre```## Example Usage```python# example.pyimport timeitfrom pathlib import Pathfrom multiprocessing import Managerfrom mmds import MultimodalDataset, MultimodalSamplefrom mmds.exceptions import PackageNotFoundErrorfrom mmds.modalities.rgbs import RgbsModalityfrom mmds.modalities.wav import WavModalityfrom mmds.modalities.mel import MelModalityfrom mmds.modalities.f0 import F0Modalityfrom mmds.modalities.ge2e import Ge2eModalityfrom mmds.utils.spectrogram import LogMelSpectrogramtry:    import youtube_dl    import ffmpeg    import torch    from torchvision import transformsexcept ImportError:    raise PackageNotFoundError(        &quot;youtube_dl&quot;,        &quot;ffmpeg-python&quot;,        &quot;torch&quot;,        &quot;torchvision&quot;,        by=&quot;example.py&quot;,    )def download():    Path(&quot;data&quot;).mkdir(exist_ok=True)    ydl_opts = {        &quot;postprocessors&quot;: [            {                &quot;key&quot;: &quot;FFmpegExtractAudio&quot;,                &quot;preferredcodec&quot;: &quot;mp3&quot;,                &quot;preferredquality&quot;: &quot;192&quot;,            }        ],        &quot;postprocessor_args&quot;: [&quot;-ar&quot;, &quot;16000&quot;],        &quot;outtmpl&quot;: &quot;data/%(id)s.%(ext)s&quot;,        &quot;keepvideo&quot;: True,    }    with youtube_dl.YoutubeDL(ydl_opts) as ydl:        ydl.download([&quot;https://www.youtube.com/watch?v=BaW_jenozKc&quot;])    path = Path(&quot;data/BaW_jenozKc&quot;)    if not path.exists():        path.mkdir(exist_ok=True)        (            ffmpeg.input(&quot;data/BaW_jenozKc.mp4&quot;)            .filter(&quot;fps&quot;, fps=&quot;25&quot;)            .output(&quot;data/BaW_jenozKc/%06d.png&quot;, start_number=0)            .overwrite_output()            .run(quiet=True)        )class MyMultimodalSample(MultimodalSample):    def generate_info(self):        wav_modality = self.get_modality_by_name(&quot;wav&quot;)        rgbs_modality = self.get_modality_by_name(&quot;rgbs&quot;)        return dict(            t0=0,            t1=wav_modality.duration / 10,            original_wav_seconds=wav_modality.duration,            original_rgbs_seconds=rgbs_modality.duration,        )class MyMultimodalDataset(MultimodalDataset):    Sample = MyMultimodalSampledef main():    download()    # optional multiprocessing cache manager    manager = Manager()    dataset = MyMultimodalDataset(        [&quot;BaW_jenozKc&quot;],        modality_factories=[            RgbsModality.create_factory(                name=&quot;rgbs&quot;,                root=&quot;data&quot;,                suffix=&quot;*.png&quot;,                sample_rate=25,                transform=transforms.Compose(                    [                        transforms.Resize((28, 28)),                        transforms.ToTensor(),                        transforms.Normalize(0.5, 1),                    ],                ),                aggragate=torch.stack,                cache=manager.dict(),            ),            WavModality.create_factory(                name=&quot;wav&quot;,                root=&quot;data&quot;,                suffix=&quot;.mp3&quot;,                sample_rate=16_000,                cache=manager.dict(),            ),            MelModality.create_factory(                name=&quot;mel&quot;,                root=&quot;data&quot;,                suffix=&quot;.mel.npz&quot;,                mel_fn=LogMelSpectrogram(sample_rate=16_000),                base_modality_name=&quot;wav&quot;,                cache=manager.dict(),            ),            F0Modality.create_factory(                name=&quot;f0&quot;,                root=&quot;data&quot;,                suffix=&quot;.f0.npz&quot;,                mel_fn=LogMelSpectrogram(sample_rate=16_000),                base_modality_name=&quot;wav&quot;,                cache=manager.dict(),            ),            Ge2eModality.create_factory(                name=&quot;ge2e&quot;,                root=&quot;data&quot;,                suffix=&quot;.ge2e.npz&quot;,                sample_rate=16_000,                base_modality_name=&quot;wav&quot;,                cache=manager.dict(),                fetching=False,            ),        ],    )    # first load    print(timeit.timeit(lambda: dataset[0], number=1))    # second load    print(timeit.timeit(lambda: dataset[0], number=1))    print(dataset[0][&quot;info&quot;])    for key, value in dataset[0].items():        try:            print(key, value.shape, type(value))        except:            passif __name__ == &quot;__main__&quot;:    main()```</longdescription>
</pkgmetadata>