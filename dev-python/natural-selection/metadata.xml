<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Natural Selection```      ,(*                                                    @@                                     *@       @@% *@                                   *@     @@   %@ @                                   @@/ @@   @@   @@                                    @@@(,@(   @/ @@@@@@@&amp;@@@@@                                      @ @&amp;  @@  /@@@#                                   /@  @@  ,@@   @@                                   ,@@   @@   @@  @                                    %@@@   @@    @@@@@@@@@@@@@                              ,,      @  @@  @@  &amp;@@@                                   %@@  @@  &amp;@@  @@                                   @%@@  &amp;@@     @                                    ,@,%@@                                               @@@@@@                  _                   _  _ __   __ _| |_ _   _ _ __ __ _| || '_ \ / _` | __| | | | '__/ _` | || | | | (_| | |_| |_| | | | (_| | ||_| |_|\__,_|\__|\__,_|_|  \__,_|_|                                             _           _   _              ___  ___| | ___  ___| |_(_) ___  _ __  / __|/ _ \ |/ _ \/ __| __| |/ _ \| '_ \ \__ \  __/ |  __/ (__| |_| | (_) | | | ||___/\___|_|\___|\___|\__|_|\___/|_| |_|                                        by Zipfian Science                               ```Python tools for creating and running Evolutionary Algorithm (EA) experiments by [Zipfian Science](https://zipfian.science/).* For documentation, see [docs](https://docs.zipfian.science/natural-selection/index.html).* Source on [GitHub](https://github.com/Zipfian-Science/natural-selection).* For history, see [changelog](https://docs.zipfian.science/natural-selection/changelog.html#changelog-page)## Install```shell script$ pip install natural-selection```## And use```pythonfrom natural_selection.genetic_algorithms import Gene, Chromosome, Individual, Islandfrom natural_selection.genetic_algorithms.utils.random_functions import random_int, random_gaussian# Create a geneg_1 = Gene(name=&quot;test_int&quot;, value=3, gene_max=10, gene_min=1, randomise_function=random_int)g_2 = Gene(name=&quot;test_real&quot;, value=0.5, gene_max=1.0, gene_min=0.1, randomise_function=random_gaussian)# Add a list of genes to a genomegen = Chromosome([g_1, g_2])# Next, create an individual to carry these genes and evaluate themfitness_function = lambda island, individual, x, y: individual.chromosome[0].value * x + individual.chromosome[0].value * yadam = Individual(fitness_function, name=&quot;Adam&quot;, chromosome=gen)# Now we can create an island for running the evolutionary process# Notice the fitness function parameters are given here.params = dict()params['x'] = 0.5params['y'] = 0.2isolated_island = Island(function_params=params)# Using a single individual, we can create a new populationisolated_island.initialise(adam, population_size=5)# And finally, we let the randomness of life do its thing: optimisebest_individual = isolated_island.evolve(n_generations=5)# After running for a few generations, we have an individual with the highest fitnessfitness = best_individual.fitnessgenes = best_individual.chromosomefor gene in genes:  print(gene.name, gene.value)```## Release- Date: 2023-02-15- Version: 0.2.33</longdescription>
</pkgmetadata>