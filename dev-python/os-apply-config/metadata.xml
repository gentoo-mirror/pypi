<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========================Team and repository tags========================.. image:: https://governance.openstack.org/tc/badges/os-apply-config.svg    :target: https://governance.openstack.org/tc/reference/tags/index.html.. Change things from this point on===============os-apply-config===============----------------------------------------------Apply configuration from cloud metadata (JSON)----------------------------------------------What does it do?================It turns metadata from one or more JSON files like this::    {&quot;keystone&quot;: {&quot;database&quot;: {&quot;host&quot;: &quot;127.0.0.1&quot;, &quot;user&quot;: &quot;keystone&quot;, &quot;password&quot;: &quot;foobar&quot;}}}into service config files like this::    [sql]    connection = mysql://keystone:foobar@127.0.0.1/keystone    ...other settings...Usage=====Just pass it the path to a directory tree of templates::    sudo os-apply-config -t /home/me/my_templatesBy default it will read config files according to the contents ofthe file `/var/lib/os-collect-config/os_config_files.json`. Inorder to remain backward compatible it will also fall back to/var/run/os-collect-config/os_config_files.json, but the fallbackpath is deprecated and will be removed in a later release. The mainpath can be changed with the command line switch `--os-config-files`,or the environment variable `OS_CONFIG_FILES_PATH`. The list canalso be overridden with the environment variable `OS_CONFIG_FILES`.If overriding with `OS_CONFIG_FILES`, the paths are expected to be colon,&quot;:&quot;, separated. Each json file referred to must have a mapping as theirroot structure. Keys in files mentioned later in the list will overridekeys in earlier files from this list. For example::    OS_CONFIG_FILES=/tmp/ec2.json:/tmp/cfn.json os-apply-configThis will read `ec2.json` and `cfn.json`, and if they have anyoverlapping keys, the value from `cfn.json` will be used. That willpopulate the tree for any templates found in the template path. Seehttps://opendev.org/openstack/os-collect-config for aprogram that will automatically collect data and populate this list.You can also override `OS_CONFIG_FILES` with the `--metadata` commandline option, specifying it multiple times instead of colon separatingthe list.`os-apply-config` will also always try to read metadata in the oldlegacy paths first to populate the tree. These paths can be changedwith `--fallback-metadata`.Templates=========The template directory structure should mimic a root filesystem, andcontain templates for only those files you want configured. Forexample::   ~/my_templates$ tree   .   +-- etc       +-- keystone       |    +-- keystone.conf       +-- mysql             +-- mysql.confAn example tree can be found `here &lt;https://opendev.org/openstack/tripleo-image-elements/src/branch/master/elements/os-apply-config&gt;`_.If a template is executable it will be treated as an *executabletemplate*.  Otherwise, it will be treated as a *mustache template*.Mustache Templates------------------If you don't need any logic, just some string substitution, use amustache template.Metadata settings are accessed with dot ('.') notation::  [sql]  connection = mysql://{{keystone.database.user}}:{{keystone.database.password}}@{{keystone.database.host}}/keystoneExecutable Templates--------------------Configuration requiring logic is expressed in executable templates.An executable template is a script which accepts configuration as aJSON string on standard in, and writes a config file to standard out.The script should exit non-zero if it encounters a problem, so thatos-apply-config knows what's up.The output of the script will be written to the path corresponding tothe executable template's path in the template tree::  #!/usr/bin/env ruby  require 'json'  params = JSON.parse STDIN.read  puts &quot;connection = mysql://#{c['keystone']['database']['user']}:#{c['keystone']['database']['password']}@#{c['keystone']['database']['host']}/keystone&quot;You could even embed mustache in a heredoc, and use that::  #!/usr/bin/env ruby  require 'json'  require 'mustache'  params = JSON.parse STDIN.read  template = &lt;&lt;-eos  [sql]  connection = mysql://{{keystone.database.user}}:{{keystone.database.password}}@{{keystone.database.host}}/keystone  [log]  ...  eos  # tweak params here...  puts Mustache.render(template, params)Quick Start===========::   # install it   sudo pip install -U git+https://opendev.org/openstack/os-apply-config.git   # grab example templates   git clone https://opendev.org/openstack/tripleo-image-elements /tmp/config   # run it   os-apply-config -t /tmp/config/elements/nova/os-apply-config/ -m /tmp/config/elements/seed-stack-config/config.json -o /tmp/config_output</longdescription>
</pkgmetadata>