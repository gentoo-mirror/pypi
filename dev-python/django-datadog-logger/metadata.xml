<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=====================Django DataDog Logger=====================.. image:: https://img.shields.io/pypi/v/django-datadog-logger.svg        :target: https://pypi.python.org/pypi/django-datadog-logger.. image:: https://img.shields.io/travis/namespace-ee/django-datadog-logger.svg        :target: https://travis-ci.com/namespace-ee/django-datadog-logger.. image:: https://readthedocs.org/projects/django-datadog-logger/badge/?version=latest        :target: https://django-datadog-logger.readthedocs.io/en/latest/?badge=latest        :alt: Documentation Status.. image:: https://pyup.io/repos/github/namespace-ee/django-datadog-logger/shield.svg     :target: https://pyup.io/repos/github/namespace-ee/django-datadog-logger/     :alt: UpdatesDjango DataDog Logger integration package.* Free software: MIT license* Documentation: https://django-datadog-logger.readthedocs.io.Quick start-----------Set up request id tracking (in front) and logging middlewares (at the end):.. code-block:: python    MIDDLEWARE = [        &quot;django_datadog_logger.middleware.request_id.RequestIdMiddleware&quot;,        # ...        &quot;django_datadog_logger.middleware.error_log.ErrorLoggingMiddleware&quot;,        &quot;django_datadog_logger.middleware.request_log.RequestLoggingMiddleware&quot;,    ]Configure LOGGERS in your Django settings file:.. code-block:: python    API_LOG_ROOT = env.str(&quot;API_LOG_ROOT&quot;)    LOGGING = {        &quot;version&quot;: 1,        &quot;disable_existing_loggers&quot;: False,        &quot;formatters&quot;: {            &quot;console&quot;: {&quot;format&quot;: &quot;{levelname} {message}&quot;, &quot;style&quot;: &quot;{&quot;},            &quot;json&quot;: {&quot;()&quot;: &quot;django_datadog_logger.formatters.datadog.DataDogJSONFormatter&quot;},        },        &quot;handlers&quot;: {            &quot;console&quot;: {&quot;level&quot;: &quot;INFO&quot;, &quot;class&quot;: &quot;logging.StreamHandler&quot;, &quot;formatter&quot;: &quot;console&quot;},            &quot;application&quot;: {                &quot;level&quot;: API_LOG_APPLICATION_LEVEL,                &quot;class&quot;: &quot;logging.FileHandler&quot;,                &quot;filename&quot;: os.path.join(API_LOG_ROOT, &quot;api.application.log&quot;),                &quot;formatter&quot;: &quot;json&quot;,            },            &quot;state&quot;: {                &quot;level&quot;: API_LOG_STATE_LEVEL,                &quot;class&quot;: &quot;logging.FileHandler&quot;,                &quot;filename&quot;: os.path.join(API_LOG_ROOT, &quot;api.state.log&quot;),                &quot;formatter&quot;: &quot;json&quot;,            },            &quot;request&quot;: {                &quot;level&quot;: API_LOG_REQUEST_LEVEL,                &quot;class&quot;: &quot;logging.FileHandler&quot;,                &quot;filename&quot;: os.path.join(API_LOG_ROOT, &quot;api.request.log&quot;),                &quot;formatter&quot;: &quot;json&quot;,            },            &quot;session&quot;: {                &quot;level&quot;: API_LOG_SESSION_LEVEL,                &quot;class&quot;: &quot;logging.FileHandler&quot;,                &quot;filename&quot;: os.path.join(API_LOG_ROOT, &quot;api.session.log&quot;),                &quot;formatter&quot;: &quot;json&quot;,            },            &quot;error&quot;: {                &quot;level&quot;: API_LOG_ERROR_LEVEL,                &quot;class&quot;: &quot;logging.FileHandler&quot;,                &quot;filename&quot;: os.path.join(API_LOG_ROOT, &quot;api.error.log&quot;),                &quot;formatter&quot;: &quot;json&quot;,            },        },        &quot;loggers&quot;: {            &quot;&quot;: {&quot;handlers&quot;: [&quot;console&quot;, &quot;error&quot;], &quot;level&quot;: &quot;DEBUG&quot;, &quot;propagate&quot;: True},            &quot;ddtrace&quot;: {&quot;handlers&quot;: [&quot;error&quot;], &quot;level&quot;: &quot;ERROR&quot;, &quot;propagate&quot;: False},            &quot;django.db.backends&quot;: {&quot;handlers&quot;: [&quot;error&quot;], &quot;level&quot;: &quot;ERROR&quot;, &quot;propagate&quot;: False},            &quot;twilio&quot;: {&quot;handlers&quot;: [&quot;error&quot;], &quot;level&quot;: &quot;ERROR&quot;, &quot;propagate&quot;: False},            &quot;my_project&quot;: {&quot;handlers&quot;: [&quot;application&quot;], &quot;level&quot;: &quot;INFO&quot;, &quot;propagate&quot;: False},            &quot;my_project.throttling&quot;: {&quot;handlers&quot;: [&quot;application&quot;], &quot;level&quot;: &quot;DEBUG&quot;, &quot;propagate&quot;: False},            &quot;my_project.vehicles.viewsets.state&quot;: {&quot;handlers&quot;: [&quot;state&quot;], &quot;level&quot;: &quot;INFO&quot;, &quot;propagate&quot;: False},            &quot;my_project.accounts.session&quot;: {&quot;handlers&quot;: [&quot;session&quot;], &quot;level&quot;: &quot;DEBUG&quot;, &quot;propagate&quot;: False},            &quot;my_project.session&quot;: {&quot;handlers&quot;: [&quot;session&quot;], &quot;level&quot;: &quot;DEBUG&quot;, &quot;propagate&quot;: False},            &quot;django_auth_ldap&quot;: {&quot;level&quot;: &quot;DEBUG&quot;, &quot;handlers&quot;: [&quot;session&quot;], &quot;propagate&quot;: False},            &quot;django_datadog_logger.middleware.error_log&quot;: {&quot;handlers&quot;: [&quot;error&quot;], &quot;level&quot;: &quot;INFO&quot;, &quot;propagate&quot;: False},            &quot;django_datadog_logger.middleware.request_log&quot;: {&quot;handlers&quot;: [&quot;request&quot;], &quot;level&quot;: &quot;INFO&quot;, &quot;propagate&quot;: False},            &quot;django_datadog_logger.rest_framework&quot;: {&quot;handlers&quot;: [&quot;application&quot;], &quot;level&quot;: &quot;INFO&quot;, &quot;propagate&quot;: False},        },    }    DJANGO_DATADOG_LOGGER_EXTRA_INCLUDE = r&quot;^(django_datadog_logger|my_project)(|\..+)$&quot;Add Celery logger configuration and request_id tracking decorator to tasks:.. code-block:: python    import logging    from celery import Celery, shared_task    from celery.result import AsyncResult    from celery.signals import after_setup_logger, after_setup_task_logger    from django.conf import settings    from django_datadog_logger.celery import store_celery_request    logger = logging.getLogger(__name__)    @after_setup_logger.connect    def on_after_setup_logger(logger, *args, **kwargs):        from django_datadog_logger.formatters.datadog import DataDogJSONFormatter        if settings.API_LOG_CELERY_JSON:            formatter = DataDogJSONFormatter()            for handler in list(logger.handlers):                handler.setFormatter(formatter)                handler.setLevel(settings.API_LOG_CELERY_LEVEL)    @after_setup_task_logger.connect    def on_after_setup_task_logger(logger, *args, **kwargs):        from django_datadog_logger.formatters.datadog import DataDogJSONFormatter        if settings.API_LOG_CELERY_JSON:            formatter = DataDogJSONFormatter()            for handler in list(logger.handlers):                handler.setFormatter(formatter)                handler.setLevel(settings.API_LOG_CELERY_LEVEL)    app = Celery(&quot;my_project&quot;)    # Using a string here means the worker will not have to    # pickle the object when using Windows.    app.config_from_object(&quot;django.conf:settings&quot;, namespace=&quot;CELERY&quot;)    app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)    @shared_task(bind=True)    @store_celery_request    def debug_task(self):        print(&quot;Request: {0!r}&quot;.format(self.request))        logger.critical(&quot;CRITICAL&quot;, extra={&quot;level&quot;: &quot;CRITICAL&quot;})        logger.error(&quot;ERROR&quot;, extra={&quot;level&quot;: &quot;ERROR&quot;})        logger.warning(&quot;WARNING&quot;, extra={&quot;level&quot;: &quot;WARNING&quot;})        logger.info(&quot;INFO&quot;, extra={&quot;level&quot;: &quot;INFO&quot;})        logger.debug(&quot;DEBUG&quot;, extra={&quot;level&quot;: &quot;DEBUG&quot;})        return 42        ddtrace-------The ddtrace library has an option to inject tracing context data into log records: https://ddtrace.readthedocs.io/en/stable/advanced_usage.html#logs-injectionThere is a helper to look for those attributes and add them automatically to the log entry created by this library... code-block:: python    # log.py    # Patch logging library to inject dd.* attributes on log records    import ddtrace    ddtrace.patch(logging=True)    # Configure logger with DataDogJSONFormatter    import logging    from django_datadog_logger.formatters.datadog import DataDogJSONFormatter    logger = logging.root    handler = logging.StreamHandler()    handler.formatter = DataDogJSONFormatter()    logger.addHandler(handler)    logger.setLevel(logging.INFO)    # Log a test message    logger.info(&quot;test&quot;).. code-block:: bash    $ DD_SERVICE=django DD_ENV=test DD_VERSION=1234 python log.py    {&quot;message&quot;: &quot;test&quot;, &quot;logger.name&quot;: &quot;root&quot;, &quot;logger.thread_name&quot;: &quot;MainThread&quot;, &quot;logger.method_name&quot;: &quot;&lt;module&gt;&quot;, &quot;syslog.timestamp&quot;: &quot;2021-08-23T18:26:10.391099+00:00&quot;, &quot;syslog.severity&quot;: &quot;INFO&quot;, &quot;dd.version&quot;: &quot;1234&quot;, &quot;dd.env&quot;: &quot;test&quot;, &quot;dd.service&quot;: &quot;django&quot;, &quot;dd.trace_id&quot;: &quot;0&quot;, &quot;dd.span_id&quot;: &quot;0&quot;}If you remove the call to `datadog.patch(logging=True)` you end up with:.. code-block:: bash    $ python test.py    {&quot;message&quot;: &quot;test&quot;, &quot;logger.name&quot;: &quot;root&quot;, &quot;logger.thread_name&quot;: &quot;MainThread&quot;, &quot;logger.method_name&quot;: &quot;&lt;module&gt;&quot;, &quot;syslog.timestamp&quot;: &quot;2021-08-23T18:27:47.951461+00:00&quot;, &quot;syslog.severity&quot;: &quot;INFO&quot;}Credits-------This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template... _Cookiecutter: https://github.com/audreyr/cookiecutter.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage=======History=======0.6.2 (2023-04-27)------------------* Fixed case where accessing request.auth may raise errors0.6.1 (2023-04-27)------------------* Removed dependency on Celery package, fixed import error0.6.0 (2023-04-27)------------------* Removed dependency on Celery package0.5.6 (2023-01-17)------------------* Datadog formatter: avoid recursion loop when accessing WSGI request auth attribute0.5.5 (2023-01-16)------------------* Improved support for request version reporting in `http.request_version`* Add support for `http.url_details.view_name`0.5.4 (2023-01-16)------------------* Added support for HTTP Accept header as `http.accept`0.5.3 (2022-12-19)------------------* Added support for JWT cid claim0.5.2 (2022-11-23)------------------* Fixed: don't let the logger throw a DisallowedHost error0.5.1 (2022-08-09)------------------* Fixed: ActionLoginMixin class methods `perform_create` and `perform_update` call `super()`. Remove atomic transaction0.5.0 (2021-10-20)------------------* Added support for Celery v5+0.4.0 (2021-08-27)------------------* Enhancement: Updated formatting in README.rst #5* Enhancement: Extract and add dd.* attributes from log record to log entry dict #6* Fixed: KeyError because a dict appears where a list is expected #70.3.5 (2021-06-14)------------------* Prevent recursion when warnings are logged whilst accessing WSGI request.user0.3.4 (2021-06-14)------------------* Fixed import error for future package0.3.3 (2020-11-04)------------------* Added support for incoming HTTP X-Request-ID header values0.3.2 (2020-04-24)------------------* Respect User.USERNAME_FIELD0.3.1 (2020-04-24)------------------* Removed API_LOG_REQUEST_DURATION_WARN_SECONDS0.3.0 (2020-04-15)------------------* Improved Celery task received messages logging.* Removed RequestIdFilter (not needed anymore).0.2.0 (2020-04-14)------------------* Added Celery request local.0.1.0 (2020-02-17)------------------* First release on PyPI.</longdescription>
</pkgmetadata>