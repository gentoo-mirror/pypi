<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Amazon Transcribe Streaming SDKThe Amazon Transcribe Streaming SDK allows users to directly interface withthe Amazon Transcribe Streaming service and their Python programs. The goal ofthe project is to enable users to integrate directly with Amazon Transcribewithout needing anything more than a stream of audio bytes and a basic handler.This project is still in early alpha so the interface is still subject to changeand may see rapid iteration. It's highly advised to pin to strict dependenciesif using this outside of local testing. Please note awscrt is a dependency sharedwith botocore (the core module of AWS CLI and boto3). You may need to keepamazon-transcribe at the latest version when installed in the same environment.## InstallationTo install from pip:````bashpython -m pip install amazon-transcribe````To install from Github:````bashgit clone https://github.com/awslabs/amazon-transcribe-streaming-sdk.gitcd amazon-transcribe-streaming-sdkpython -m pip install .````To use from your Python application, add `amazon-transcribe` as a dependency in your `requirements.txt` file.NOTE: This SDK is built on top of the[AWS Common Runtime (CRT)](https://github.com/awslabs/aws-crt-python), a collection ofC libraries we interact with through bindings. The CRT is available on PyPI([awscrt](https://pypi.org/project/awscrt/)) as precompiled wheels for common platforms(Linux, macOS, Windows). Non-standard operating systems may need to compile theselibraries themselves.## Usage### PrerequisitesIf you don't already have local credentials setup for your AWS account, you can followthis [guide](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html)for configuring them using the AWS CLI.In essence you'll need one of these authentication configurations setup in order forthe SDK to successfully resolve your API keys:1. Set the `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY` and optionally the`AWS_SESSION_TOKEN` environment variables2. Set the `AWS_PROFILE` pointing to your AWS profile directory3. Configure the `[default]` profile in `~/.aws/credentials`For more details on the AWS shared configuration file and credential providerusage, check the following developer guides:* [Shared Config Overview](https://docs.aws.amazon.com/sdkref/latest/guide/creds-config-files.html)* [Shared Config Format](https://docs.aws.amazon.com/sdkref/latest/guide/file-format.html)* [Example Credential Setups](https://docs.aws.amazon.com/sdkref/latest/guide/usage-examples.html)### Quick StartSetup for this SDK will require either live or prerecorded audio. Full detailson the audio input requirements can be found in the [Amazon Transcribe Streamingdocumentation](https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html).Here's an example app to get started:```pythonimport asyncio# This example uses aiofile for asynchronous file reads.# It's not a dependency of the project but can be installed# with `pip install aiofile`.import aiofilefrom amazon_transcribe.client import TranscribeStreamingClientfrom amazon_transcribe.handlers import TranscriptResultStreamHandlerfrom amazon_transcribe.model import TranscriptEventfrom amazon_transcribe.utils import apply_realtime_delay&quot;&quot;&quot;Here's an example of a custom event handler you can extend toprocess the returned transcription results as needed. Thishandler will simply print the text out to your interpreter.&quot;&quot;&quot;SAMPLE_RATE = 16000BYTES_PER_SAMPLE = 2CHANNEL_NUMS = 1# An example file can be found at tests/integration/assets/test.wavAUDIO_PATH = &quot;tests/integration/assets/test.wav&quot;CHUNK_SIZE = 1024 * 8REGION = &quot;us-west-2&quot;class MyEventHandler(TranscriptResultStreamHandler):    async def handle_transcript_event(self, transcript_event: TranscriptEvent):        # This handler can be implemented to handle transcriptions as needed.        # Here's an example to get started.        results = transcript_event.transcript.results        for result in results:            for alt in result.alternatives:                print(alt.transcript)async def basic_transcribe():    # Setup up our client with our chosen AWS region    client = TranscribeStreamingClient(region=REGION)    # Start transcription to generate our async stream    stream = await client.start_stream_transcription(        language_code=&quot;en-US&quot;,        media_sample_rate_hz=SAMPLE_RATE,        media_encoding=&quot;pcm&quot;,    )    async def write_chunks():        # NOTE: For pre-recorded files longer than 5 minutes, the sent audio        # chunks should be rate limited to match the realtime bitrate of the        # audio stream to avoid signing issues.        async with aiofile.AIOFile(AUDIO_PATH, &quot;rb&quot;) as afp:            reader = aiofile.Reader(afp, chunk_size=CHUNK_SIZE)            await apply_realtime_delay(                stream, reader, BYTES_PER_SAMPLE, SAMPLE_RATE, CHANNEL_NUMS            )        await stream.input_stream.end_stream()    # Instantiate our handler and start processing events    handler = MyEventHandler(stream.output_stream)    await asyncio.gather(write_chunks(), handler.handle_events())loop = asyncio.get_event_loop()loop.run_until_complete(basic_transcribe())loop.close()```## SecuritySee [CONTRIBUTING](CONTRIBUTING.md#security-issue-notifications) for more information.## LicenseThis project is licensed under the Apache-2.0 License.</longdescription>
</pkgmetadata>