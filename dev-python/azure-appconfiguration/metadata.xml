<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Azure App Configuration client library for PythonAzure App Configuration is a managed service that helps developers centralize their application configurations simply and securely.Modern programs, especially programs running in a cloud, generally have many components that are distributed in nature. Spreading configuration settings across these components can lead to hard-to-troubleshoot errors during an application deployment. Use App Configuration to securely store all the settings for your application in one place.Use the client library for App Configuration to create and manage application configuration settings.[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration)| [Package (Pypi)][package]| [Package (Conda)](https://anaconda.org/microsoft/azure-appconfiguration/)| [API reference documentation](https://learn.microsoft.com/python/api/azure-appconfiguration/azure.appconfiguration?view=azure-python)| [Product documentation][appconfig_docs]## _Disclaimer__Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691__Python 3.7 or later is required to use this package. For more details, please refer to [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy)._## Getting started### Install the packageInstall the Azure App Configuration client library for Python with pip:```commandlinepip install azure-appconfiguration```### Prerequisites* Python 3.7 or later is required to use this package.* You need an [Azure subscription][azure_sub], and a [Configuration Store][configuration_store] to use this package.To create a Configuration Store, you can use the Azure Portal or [Azure CLI][azure_cli].After that, create the Configuration Store:```Powershellaz appconfig create --name &lt;config-store-name&gt; --resource-group &lt;resource-group-name&gt; --location eastus```### Authenticate the clientIn order to interact with the App Configuration service, you'll need to create an instance of the[AzureAppConfigurationClient][configuration_client_class] class. To make this possible,you can either use the connection string of the Configuration Store or use an AAD token.#### Use connection string##### Get credentialsUse the [Azure CLI][azure_cli] snippet below to get the connection string from the Configuration Store.```Powershellaz appconfig credential list --name &lt;config-store-name&gt;```Alternatively, get the connection string from the Azure Portal.##### Create clientOnce you have the value of the connection string, you can create the AzureAppConfigurationClient:&lt;!-- SNIPPET:hello_world_sample.create_app_config_client --&gt;```pythonimport osfrom azure.appconfiguration import AzureAppConfigurationClientCONNECTION_STRING = os.environ[&quot;APPCONFIGURATION_CONNECTION_STRING&quot;]# Create app config clientclient = AzureAppConfigurationClient.from_connection_string(CONNECTION_STRING)```&lt;!-- END SNIPPET --&gt;#### Use AAD tokenHere we demonstrate using [DefaultAzureCredential][default_cred_ref]to authenticate as a service principal. However, [AzureAppConfigurationClient][configuration_client_class]accepts any [azure-identity][azure_identity] credential. See the[azure-identity][azure_identity] documentation for more information about othercredentials.##### Create a service principal (optional)This [Azure CLI][azure_cli] snippet shows how to create anew service principal. Before using it, replace &quot;your-application-name&quot; withthe appropriate name for your service principal.Create a service principal:```Bashaz ad sp create-for-rbac --name http://my-application --skip-assignment```&gt; Output:&gt; ```json&gt; {&gt;     &quot;appId&quot;: &quot;generated app id&quot;,&gt;     &quot;displayName&quot;: &quot;my-application&quot;,&gt;     &quot;name&quot;: &quot;http://my-application&quot;,&gt;     &quot;password&quot;: &quot;random password&quot;,&gt;     &quot;tenant&quot;: &quot;tenant id&quot;&gt; }&gt; ```Use the output to set **AZURE_CLIENT_ID** (&quot;appId&quot; above), **AZURE_CLIENT_SECRET**(&quot;password&quot; above) and **AZURE_TENANT_ID** (&quot;tenant&quot; above) environment variables.The following example shows a way to do this in Bash:```Bashexport AZURE_CLIENT_ID=&quot;generated app id&quot;export AZURE_CLIENT_SECRET=&quot;random password&quot;export AZURE_TENANT_ID=&quot;tenant id&quot;```Assign one of the applicable [App Configuration roles](https://docs.microsoft.com/azure/azure-app-configuration/rest-api-authorization-azure-ad) to the service principal.##### Create a clientOnce the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET** and**AZURE_TENANT_ID** environment variables are set,[DefaultAzureCredential][default_cred_ref] will be able to authenticate the[AzureAppConfigurationClient][configuration_client_class].Constructing the client also requires your configuration store's URL, which you canget from the Azure CLI or the Azure Portal. In the Azure Portal, the URL can be found listed as the service &quot;Endpoint&quot;```pythonfrom azure.identity import DefaultAzureCredentialfrom azure.appconfiguration import AzureAppConfigurationClientcredential = DefaultAzureCredential()client = AzureAppConfigurationClient(base_url=&quot;your_endpoint_url&quot;, credential=credential)```## Key concepts### Configuration SettingA Configuration Setting is the fundamental resource within a Configuration Store. In its simplest form it is a key and a value. However, there are additional properties such as the modifiable content type and tags fields that allow the value to be interpreted or associated in different ways.The [Label][label_concept] property of a Configuration Setting provides a way to separate Configuration Settings into different dimensions. These dimensions are user defined and can take any form. Some common examples of dimensions to use for a label include regions, semantic versions, or environments. Many applications have a required set of configuration keys that have varying values as the application exists across different dimensions.For example, MaxRequests may be 100 in &quot;NorthAmerica&quot;, and 200 in &quot;WestEurope&quot;. By creating a Configuration Setting named MaxRequests with a label of &quot;NorthAmerica&quot; and another, only with a different value, in the &quot;WestEurope&quot; label, an application can seamlessly retrieve Configuration Settings as it runs in these two dimensions.Properties of a Configuration Setting:```pythonkey : strlabel : strcontent_type : strvalue : strlast_modified : strread_only : booltags : dictetag : str```### SnapshotAzure App Configuration allows users to create a point-in-time snapshot of their configuration store, providing them with the ability to treat settings as one consistent version. This feature enables applications to hold a consistent view of configuration, ensuring that there are no version mismatches to individual settings due to reading as updates were made. Snapshots are immutable, ensuring that configuration can confidently be rolled back to a last-known-good configuration in the event of a problem.## ExamplesThe following sections provide several code snippets covering some of the most common Configuration Service tasks, including:* [Create a Configuration Setting](#create-a-configuration-setting)* [Get a Configuration Setting](#get-a-configuration-setting)* [Delete a Configuration Setting](#delete-a-configuration-setting)* [List Configuration Settings](#list-configuration-settings)* [Create a Snapshot](#create-a-snapshot)* [Get a Snapshot](#get-a-snapshot)* [Archive a Snapshot](#archive-a-snapshot)* [Recover a Snapshot](#recover-a-snapshot)* [List Snapshots](#list-snapshots)* [List Configuration Settings of a Snapshot](#list-configuration-settings-of-a-snapshot)* [Async APIs](#async-apis)### Create a Configuration SettingCreate a Configuration Setting to be stored in the Configuration Store.There are two ways to store a Configuration Setting:- add_configuration_setting creates a setting only if the setting does not already exist in the store.&lt;!-- SNIPPET:hello_world_advanced_sample.create_config_setting --&gt;```pythonconfig_setting = ConfigurationSetting(    key=&quot;MyKey&quot;, label=&quot;MyLabel&quot;, value=&quot;my value&quot;, content_type=&quot;my content type&quot;, tags={&quot;my tag&quot;: &quot;my tag value&quot;})added_config_setting = client.add_configuration_setting(config_setting)```&lt;!-- END SNIPPET --&gt;- set_configuration_setting creates a setting if it doesn't exist or overrides an existing setting.&lt;!-- SNIPPET:hello_world_advanced_sample.set_config_setting --&gt;```pythonadded_config_setting.value = &quot;new value&quot;added_config_setting.content_type = &quot;new content type&quot;updated_config_setting = client.set_configuration_setting(added_config_setting)```&lt;!-- END SNIPPET --&gt;### Get a Configuration SettingGet a previously stored Configuration Setting.&lt;!-- SNIPPET:hello_world_advanced_sample.get_config_setting --&gt;```pythonfetched_config_setting = client.get_configuration_setting(key=&quot;MyKey&quot;, label=&quot;MyLabel&quot;)```&lt;!-- END SNIPPET --&gt;### Delete a Configuration SettingDelete an existing Configuration Setting.&lt;!-- SNIPPET:hello_world_advanced_sample.delete_config_setting --&gt;```pythonclient.delete_configuration_setting(    key=&quot;MyKey&quot;,    label=&quot;MyLabel&quot;,)```&lt;!-- END SNIPPET --&gt;### List Configuration SettingsList all configuration settings filtered with label_filter and/or key_filter.&lt;!-- SNIPPET:hello_world_advanced_sample.list_config_setting --&gt;```pythonconfig_settings = client.list_configuration_settings(label_filter=&quot;MyLabel&quot;)for item in config_settings:    print_configuration_setting(item)```&lt;!-- END SNIPPET --&gt;### Create a Snapshot&lt;!-- SNIPPET:snapshot_samples.create_snapshot --&gt;```pythonfrom azure.appconfiguration import ConfigurationSettingsFilterfilters = [ConfigurationSettingsFilter(key=&quot;my_key1&quot;, label=&quot;my_label1&quot;)]response = client.begin_create_snapshot(name=snapshot_name, filters=filters)created_snapshot = response.result()print_snapshot(created_snapshot)```&lt;!-- END SNIPPET --&gt;### Get a Snapshot&lt;!-- SNIPPET:snapshot_samples.get_snapshot --&gt;```pythonreceived_snapshot = client.get_snapshot(name=snapshot_name)```&lt;!-- END SNIPPET --&gt;### Archive a Snapshot&lt;!-- SNIPPET:snapshot_samples.archive_snapshot --&gt;```pythonarchived_snapshot = client.archive_snapshot(name=snapshot_name)print_snapshot(archived_snapshot)```&lt;!-- END SNIPPET --&gt;### Recover a Snapshot&lt;!-- SNIPPET:snapshot_samples.recover_snapshot --&gt;```pythonrecovered_snapshot = client.recover_snapshot(name=snapshot_name)print_snapshot(recovered_snapshot)```&lt;!-- END SNIPPET --&gt;### List Snapshots&lt;!-- SNIPPET:snapshot_samples.list_snapshots --&gt;```pythonfor snapshot in client.list_snapshots():    print_snapshot(snapshot)```&lt;!-- END SNIPPET --&gt;### List Configuration Settings of a Snapshot&lt;!-- SNIPPET:snapshot_samples.list_configuration_settings_for_snapshot --&gt;```pythonfor config_setting in client.list_configuration_settings(snapshot_name=snapshot_name):    print_configuration_setting(config_setting)```&lt;!-- END SNIPPET --&gt;### Async APIsAsync client is supported.To use the async client library, import the AzureAppConfigurationClient from package azure.appconfiguration.aio instead of azure.appconfiguration&lt;!-- SNIPPET:hello_world_sample_async.create_app_config_client --&gt;```pythonimport osfrom azure.appconfiguration.aio import AzureAppConfigurationClientCONNECTION_STRING = os.environ[&quot;APPCONFIGURATION_CONNECTION_STRING&quot;]# Create app config clientclient = AzureAppConfigurationClient.from_connection_string(CONNECTION_STRING)```&lt;!-- END SNIPPET --&gt;This async AzureAppConfigurationClient has the same method signatures as the sync ones except that they're async.For instance, to retrieve a Configuration Setting asynchronously, async_client can be used:&lt;!-- SNIPPET:hello_world_advanced_sample_async.get_config_setting --&gt;```pythonfetched_config_setting = await client.get_configuration_setting(key=&quot;MyKey&quot;, label=&quot;MyLabel&quot;)```&lt;!-- END SNIPPET --&gt;To use list_configuration_settings, call it synchronously and iterate over the returned async iterator asynchronously&lt;!-- SNIPPET:hello_world_advanced_sample_async.list_config_setting --&gt;```pythonconfig_settings = client.list_configuration_settings(label_filter=&quot;MyLabel&quot;)async for item in config_settings:    print_configuration_setting(item)```&lt;!-- END SNIPPET --&gt;&lt;!-- SNIPPET:snapshot_samples_async.create_snapshot --&gt;```pythonfrom azure.appconfiguration import ConfigurationSettingsFilterfilters = [ConfigurationSettingsFilter(key=&quot;my_key1&quot;, label=&quot;my_label1&quot;)]response = await client.begin_create_snapshot(name=snapshot_name, filters=filters)created_snapshot = await response.result()print_snapshot(created_snapshot)```&lt;!-- END SNIPPET --&gt;&lt;!-- SNIPPET:snapshot_samples_async.get_snapshot --&gt;```pythonreceived_snapshot = await client.get_snapshot(name=snapshot_name)```&lt;!-- END SNIPPET --&gt;&lt;!-- SNIPPET:snapshot_samples_async.archive_snapshot --&gt;```pythonarchived_snapshot = await client.archive_snapshot(name=snapshot_name)print_snapshot(archived_snapshot)```&lt;!-- END SNIPPET --&gt;&lt;!-- SNIPPET:snapshot_samples_async.recover_snapshot --&gt;```pythonrecovered_snapshot = await client.recover_snapshot(name=snapshot_name)print_snapshot(recovered_snapshot)```&lt;!-- END SNIPPET --&gt;&lt;!-- SNIPPET:snapshot_samples_async.list_snapshots --&gt;```pythonasync for snapshot in client.list_snapshots():    print_snapshot(snapshot)```&lt;!-- END SNIPPET --&gt;&lt;!-- SNIPPET:snapshot_samples_async.list_configuration_settings_for_snapshot --&gt;```pythonasync for config_setting in client.list_configuration_settings(snapshot_name=snapshot_name):    print_configuration_setting(config_setting)```&lt;!-- END SNIPPET --&gt;## TroubleshootingSee the [troubleshooting guide][troubleshooting_guide] for details on how to diagnose various failure scenarios.## Next steps### More sample codeSeveral App Configuration client library samples are available to you in this GitHub repository.  These include:- [Hello world](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/hello_world_sample.py) / [Async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/hello_world_sample_async.py)- [Hello world with labels](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/hello_world_advanced_sample.py) / [Async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/hello_world_advanced_sample_async.py)- [Make a configuration setting readonly](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/read_only_sample.py) / [Async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/hello_world_sample_async.py)- [Read revision history](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/list_revision_sample.py) / [Async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/list_revision_sample_async.py)- [Get a setting if changed](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/conditional_operation_sample.py) / [Async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/conditional_operation_sample_async.py)- [Create, retrieve and update status of a configuration settings snapshot](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/snapshot_samples.py) / [Async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/snapshot_samples_async.py) For more details see the [samples README](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/README.md).## ContributingThis project welcomes contributions and suggestions. Most contributions requireyou to agree to a Contributor License Agreement (CLA) declaring that you havethe right to, and actually do, grant us the rights to use your contribution.For details, visit https://cla.microsoft.com.When you submit a pull request, a CLA-bot will automatically determine whetheryou need to provide a CLA and decorate the PR appropriately (e.g., label,comment). Simply follow the instructions provided by the bot. You will onlyneed to do this once across all repos using our CLA.This project has adopted the[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with anyadditional questions or comments.&lt;!-- LINKS --&gt;[appconfig_docs]: https://docs.microsoft.com/azure/azure-app-configuration/[appconfig_rest]: https://github.com/Azure/AppConfiguration#rest-api-reference[azure_cli]: https://docs.microsoft.com/cli/azure[azure_sub]: https://azure.microsoft.com/free/[configuration_client_class]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/azure/appconfiguration/_azure_appconfiguration_client.py[package]: https://pypi.org/project/azure-appconfiguration/[configuration_store]: https://azure.microsoft.com/services/app-configuration/[default_cred_ref]: https://aka.ms/azsdk-python-identity-default-cred-ref[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity[cla]: https://cla.microsoft.com[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/[coc_contact]: mailto:opencode@microsoft.com[troubleshooting_guide]: https://aka.ms/azsdk/python/appconfiguration/troubleshoot[label_concept]: https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value#label-keys# Release History## 1.5.0 (2023-11-09)### Other Changes- Supported datetime type for keyword argument `accept_datetime` in `get_snapshot_configuration_settings()`, `list_snapshot_configuration_settings()` and `list_revisions()`.- Bumped minimum dependency on `azure-core` to `&gt;=1.28.0`.- Updated the default `api_version` to &quot;2023-10-01&quot;.- Removed `etag` keyword documentation in `set_read_only()` as it's not in use.## 1.5.0b3 (2023-10-10)### Breaking Changes- Renamed parameter `name` in `list_snapshot_configuration_settings()` to `snapshot_name`.- Removed keyword argument `accept_datetime` in `list_snapshot_configuration_settings()`.- Moved operation `list_snapshot_configuration_settings()` to an overload of `list_configuration_settings()`, and moved the parameter `snapshot_name` to keyword.- Published enum `SnapshotStatus`, and accepted the type for `status` parameter in `list_snapshots()` and `status` property in `Snapshot` model.- Renamed model `Snapshot` to `ConfigurationSnapshot`.- Renamed model `ConfigurationSettingFilter` to `ConfigurationSettingsFilter`.## 1.5.0b2 (2023-08-02)### Bugs Fixed- Fixed a bug in deserializing and serializing Snapshot when `filters` property is `None`.- Fixed a bug when creating `FeatureFlagConfigurationSetting` from SDK but having an error in portal.([#31326](https://github.com/Azure/azure-sdk-for-python/issues/31326))## 1.5.0b1 (2023-07-11)### Features Added- Added support for `Snapshot` CRUD operations.### Bugs Fixed- Fixed async `update_sync_token()` to use async/await keywords.### Other Changes- Bumped minimum dependency on `azure-core` to `&gt;=1.25.0`.- Updated the default `api_version` to &quot;2022-11-01-preview&quot;.## 1.4.0 (2022-02-13)### Other Changes- Python 2.7 is no longer supported. Please use Python version 3.7 or later.- Bumped minimum dependency on `azure-core` to `&gt;=1.24.0`.- Changed the default async transport from `AsyncioRequestsTransport` to the one used in current `azure-core` (`AioHttpTransport`). ([#26427](https://github.com/Azure/azure-sdk-for-python/issues/26427))- Dropped `msrest` requirement.- Added dependency `isodate` with version range `&gt;=0.6.0`.## 1.3.0 (2021-11-10)### Bugs Fixed- Fixed the issue that data was persisted according to an incorrect schema/in an incorrect format ([#20518](https://github.com/Azure/azure-sdk-for-python/issues/20518))  `SecretReferenceConfigurationSetting` in 1.2.0 used &quot;secret_uri&quot; rather than &quot;uri&quot; as the schema keywords which   broken inter-operation of `SecretReferenceConfigurationSetting` between SDK and the portal.     Please:  - Use 1.3.0+ for any `SecretReferenceConfigurationSetting` uses.  - Call a get method for existing `SecretReferenceConfigurationSetting`s and set them back to correct the format.## 1.2.0 (2021-07-06)### Features Added* Added `FeatureFlagConfigurationSetting` and `SecretReferenceConfigurationSetting` models* `AzureAppConfigurationClient` can now be used as a context manager.* Added `update_sync_token()` to update sync tokens from Event Grid notifications.## 1.2.0b2 (2021-06-08)### Features- Added context manager functionality to the sync and async `AzureAppConfigurationClient`s.### Fixes- Fixed a deserialization bug for `FeatureFlagConfigurationSetting` and `SecretReferenceConfigurationSetting`.## 1.2.0b1 (2021-04-06)### Features- Added method `update_sync_token()` to include sync tokens from EventGrid notifications.- Added `SecretReferenceConfigurationSetting` type to represent a configuration setting that references a KeyVault Secret.- Added `FeatureFlagConfigurationSetting` type to represent a configuration setting that controls a feature flag.## 1.1.1 (2020-10-05)### Features- Improved error message if Connection string secret has incorrect padding. ([#14140](https://github.com/Azure/azure-sdk-for-python/issues/14140))## 1.1.0 (2020-09-08)### Features- Added match condition support for `set_read_only()` method. ([#13276](https://github.com/Azure/azure-sdk-for-python/issues/13276))## 1.0.1 (2020-08-10)### Fixes- Doc &amp; Sample fixes## 1.0.0 (2020-01-06)### Features- Added AAD auth support. ([#8924](https://github.com/Azure/azure-sdk-for-python/issues/8924))### Breaking changes- `list_configuration_settings()` &amp; `list_revisions()` now take string key/label filter instead of keys/labels list. ([#9066](https://github.com/Azure/azure-sdk-for-python/issues/9066))## 1.0.0b6 (2019-12-03)### Features- Added sync-token support. ([#8418](https://github.com/Azure/azure-sdk-for-python/issues/8418))### Breaking changes- Combined set_read_only &amp; clear_read_only to be set_read_only(True/False). ([#8453](https://github.com/Azure/azure-sdk-for-python/issues/8453))## 1.0.0b5 (2019-10-30)### Breaking changes- `etag` and `match_condition` of `delete_configuration_setting()` are now keyword argument only. ([#8161](https://github.com/Azure/azure-sdk-for-python/issues/8161))## 1.0.0b4 (2019-10-07)- Added conditional operation support- Added `set_read_only()` and `clear_read_only()` methods## 1.0.0b3 (2019-09-09)- New azure app configuration</longdescription>
</pkgmetadata>