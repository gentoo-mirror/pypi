<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ha-mqtt-discoverable[![License](https://img.shields.io/github/license/unixorn/ha-mqtt-discoverable.svg)](https://opensource.org/license/apache-2-0/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![GitHub last commit (branch)](https://img.shields.io/github/last-commit/unixorn/ha-mqtt-discoverable/main.svg)](https://github.com/unixorn/ha-mqtt-discoverable)[![Downloads](https://static.pepy.tech/badge/ha-mqtt-discoverable)](https://pepy.tech/project/ha-mqtt-discoverable)A python 3 module that takes advantage of Home Assistant's MQTT discovery protocol to create sensors without having to define anything on the HA side.Using MQTT discoverable devices lets us add new sensors and devices to HA without having to restart HA. The `ha-mqtt-discoverable-cli` module includes scripts to make it easy to create discoverable devices from the command line if you don't want to bother writing python.&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;## Table of Contents- [Installing](#installing)  - [Python](#python)- [Supported entities](#supported-entities)  - [Binary sensor](#binary-sensor)    - [Usage](#usage)  - [Switch](#switch)    - [Usage](#usage-1)- [Device](#device)  - [Usage](#usage-2)  - [Device trigger](#device-trigger)    - [Usage](#usage-3)- [Contributing](#contributing)- [Users of ha-mqtt-discoverable](#users-of-ha-mqtt-discoverable)- [Contributors](#contributors)&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;## Installing### Pythonha-mqtt-discoverable runs on Python 3.10 or later.`pip install ha-mqtt-discoverable` if you want to use it in your own python scripts. This will also install the `hmd` utility scripts.## Supported entitiesThe following Home Assistant entities are currently implemented:- Sensor- Binary sensor- Switch- Button- Device trigger### Binary sensor#### UsageThe following example creates a binary sensor and sets its state:```pyfrom ha_mqtt_discoverable import Settingsfrom ha_mqtt_discoverable.sensors import BinarySensor, BinarySensorInfo# Configure the required parameters for the MQTT brokermqtt_settings = Settings.MQTT(host=&quot;localhost&quot;)# Information about the sensorsensor_info = BinarySensorInfo(name=&quot;MySensor&quot;, device_class=&quot;motion&quot;)settings = Settings(mqtt=mqtt_settings, entity=sensor_info)# Instantiate the sensormysensor = BinarySensor(settings)# Change the state of the sensor, publishing an MQTT message that gets picked up by HAmysensor.on()mysensor.off()# You can also set custom attributes on the sensor via a Python dictmysensor.set_attributes({&quot;my attribute&quot;: &quot;awesome&quot;})```### SwitchThe switch is similar to a _binary sensor_, but in addition to publishing state changes toward HA it can also receive 'commands' from HA that request a state change.It is possible to act upon reception of this 'command', by defining a `callback` function, as the following example shows:#### Usage```pyfrom ha_mqtt_discoverable import Settingsfrom ha_mqtt_discoverable.sensors import Switch, SwitchInfofrom paho.mqtt.client import Client, MQTTMessage# Configure the required parameters for the MQTT brokermqtt_settings = Settings.MQTT(host=&quot;localhost&quot;)# Information about the switch# If `command_topic` is defined, it will receive state updates from HAswitch_info = SwitchInfo(name=&quot;test&quot;, command_topic=&quot;command&quot;)settings = Settings(mqtt=mqtt_settings, entity=switch_info)# To receive state commands from HA, define a callback function:def my_callback(client: Client, user_data, message: MQTTMessage):    payload = message.payload.decode()    logging.info(f&quot;Received {payload} from HA&quot;)    # Your custom code...# Define an optional object to be passed back to the callbackuser_data = &quot;Some custom data&quot;# Instantiate the switchmy_switch = Switch(settings, my_callback, user_data)# Change the state of the sensor, publishing an MQTT message that gets picked up by HAmy_switch.on()my_switch.off()```## DeviceFrom the [Home Assistant documentation](https://developers.home-assistant.io/docs/device_registry_index):&gt; A device is a special entity in Home Assistant that is represented by one or more entities.A device is automatically created when an entity defines its `device` property.A device will be matched up with an existing device via supplied identifiers or connections, like serial numbers or MAC addresses.### UsageThe following example create a device, by associating multiple sensors to the same `DeviceInfo` instance.```pyfrom ha_mqtt_discoverable import Settings, DeviceInfofrom ha_mqtt_discoverable.sensors import BinarySensor, BinarySensorInfo# Configure the required parameters for the MQTT brokermqtt_settings = Settings.MQTT(host=&quot;localhost&quot;)# Define the device. At least one of `identifiers` or `connections` must be supplieddevice_info = DeviceInfo(name=&quot;My device&quot;, identifiers=&quot;device_id&quot;)# Associate the sensor with the device via the `device` parameter# `unique_id` must also be set, otherwise Home Assistant will not display the device in the UImotion_sensor_info = BinarySensorInfo(name=&quot;My motion sensor&quot;, device_class=&quot;motion&quot;, unique_id=&quot;my_motion_sensor&quot;, device=device_info)motion_settings = Settings(mqtt=mqtt_settings, entity=sensor_info)# Instantiate the sensormotion_sensor = BinarySensor(motion_settings)# Change the state of the sensor, publishing an MQTT message that gets picked up by HAmotion_sensor.on()# An additional sensor can be added to the same device, by re-using the DeviceInfo instance previously defineddoor_sensor_info = BinarySensorInfo(name=&quot;My door sensor&quot;, device_class=&quot;door&quot;, unique_id=&quot;my_door_sensor&quot;, device=device_info)door_settings = Settings(mqtt=mqtt_settings, entity=door_sensor_info)# Instantiate the sensordoor_sensor = BinarySensor(settings)# Change the state of the sensor, publishing an MQTT message that gets picked up by HAdoor_sensor.on()# The two sensors should be visible inside Home Assistant under the device `My device````### Device triggerThe following example creates a device trigger and generates a trigger event:#### Usage```pyfrom ha_mqtt_discoverable import Settingsfrom ha_mqtt_discoverable.sensors import DeviceInfo, DeviceTriggerInfo, DeviceTrigger# Configure the required parameters for the MQTT brokermqtt_settings = Settings.MQTT(host=&quot;localhost&quot;)# Define the device. At least one of `identifiers` or `connections` must be supplieddevice_info = DeviceInfo(name=&quot;My device&quot;, identifiers=&quot;device_id&quot;)# Associate the sensor with the device via the `device` parametertrigger_into = DeviceTriggerInfo(name=&quot;MyTrigger&quot;, type=&quot;button_press&quot;, subtype=&quot;button_1&quot;, unique_id=&quot;my_device_trigger&quot;, device=device_info)settings = Settings(mqtt=mqtt_settings, entity=sensor_info)# Instantiate the device triggermytrigger = DeviceTrigger(settings)# Generate a device trigger event, publishing an MQTT message that gets picked up by HA# Optionally include a payload as part of the eventmytrigger.trigger(&quot;My custom payload&quot;)```## ContributingPlease run `black` on your code before submitting. There are `git` hooks already configured to run `black` and other checks before every commit, please run `pre-commit install` to enable them.## Users of ha-mqtt-discoverableIf you use this module for your own project, please add a link here.- [ha-mqtt-discoverable-cli](https://github.com/unixorn/ha-mqtt-discoverable-cli) - Command line tools that allow using this module from shell scripts## Contributors&lt;a href=&quot;https://github.com/unixorn/ha-mqtt-discoverable/graphs/contributors&quot;&gt;  &lt;img src=&quot;https://contributors-img.web.app/image?repo=unixorn/ha-mqtt-discoverable&quot; /&gt;&lt;/a&gt;Made with [contributors-img](https://contributors-img.web.app).</longdescription>
</pkgmetadata>