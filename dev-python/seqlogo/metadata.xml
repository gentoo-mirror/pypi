<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/seqlogo.svg)](https://pypi.org/project/seqlogo/)[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat-square)](http://bioconda.github.io/recipes/seqlogo/README.html)[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://github.com/betteridiot/seqlogo/blob/master/LICENSE)&lt;/br&gt;# seqlogoPython port of Bioconductor's [seqLogo](http://bioconductor.org/packages/release/bioc/html/seqLogo.html) served by [WebLogo](http://weblogo.threeplusone.com/)## OverviewIn the field of bioinformatics, a common task is to look for sequence motifs at different sites along the genome or within a protein sequence. One aspect of thisanalysis involves creating a variant of a Position Matrix (PM): Position Frequency Matrix (PFM),Position Probability Matrix (PPM), and Position Weight Matrix (PWM). The formal format fora PWM file can be found [here](http://bioinformatics.intec.ugent.be/MotifSuite/pwmformat.php).---#### SpecificationA PM file can be just a plain text, whitespace delimited matrix, such that the number of columnsmatches the number of letters in your desired alphabet and the number of rows is the number of positionsin your sequence. Any comment lines that start with `#` will be skipped.*Note*: [TRANSFAC matrix](http://meme-suite.org/doc/transfac-format.html) and [MEME Motif](http://meme-suite.org/doc/meme-format.html) formats are not directly supported.&lt;a href=&quot;https://www.codecogs.com/eqnedit.php?latex=\large&amp;space;\mathit{PWM}_{m,n}&amp;space;=&amp;space;\begin{pmatrix}&amp;space;a_{1,1}&amp;space;&amp;&amp;space;a_{1,2}&amp;space;&amp;&amp;space;\cdots&amp;space;&amp;&amp;space;a_{1,n}&amp;space;\\&amp;space;a_{2,1}&amp;space;&amp;&amp;space;a_{2,2}&amp;space;&amp;&amp;space;\cdots&amp;space;&amp;&amp;space;a_{2,n}&amp;space;\\&amp;space;\vdots&amp;space;&amp;&amp;space;\vdots&amp;space;&amp;&amp;space;\ddots&amp;space;&amp;&amp;space;\vdots&amp;space;\\&amp;space;a_{m,1}&amp;space;&amp;&amp;space;a_{m,2}&amp;space;&amp;&amp;space;\cdots&amp;space;&amp;&amp;space;a_{m,n}&amp;space;\end{pmatrix}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.latex?\large&amp;space;\mathit{PWM}_{m,n}&amp;space;=&amp;space;\begin{pmatrix}&amp;space;a_{1,1}&amp;space;&amp;&amp;space;a_{1,2}&amp;space;&amp;&amp;space;\cdots&amp;space;&amp;&amp;space;a_{1,n}&amp;space;\\&amp;space;a_{2,1}&amp;space;&amp;&amp;space;a_{2,2}&amp;space;&amp;&amp;space;\cdots&amp;space;&amp;&amp;space;a_{2,n}&amp;space;\\&amp;space;\vdots&amp;space;&amp;&amp;space;\vdots&amp;space;&amp;&amp;space;\ddots&amp;space;&amp;&amp;space;\vdots&amp;space;\\&amp;space;a_{m,1}&amp;space;&amp;&amp;space;a_{m,2}&amp;space;&amp;&amp;space;\cdots&amp;space;&amp;&amp;space;a_{m,n}&amp;space;\end{pmatrix}&quot; title=&quot;\large \mathit{PWM}_{m,n} = \begin{pmatrix} a_{1,1} &amp; a_{1,2} &amp; \cdots &amp; a_{1,n} \\ a_{2,1} &amp; a_{2,2} &amp; \cdots &amp; a_{2,n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_{m,1} &amp; a_{m,2} &amp; \cdots &amp; a_{m,n} \end{pmatrix}&quot; /&gt;&lt;/a&gt;Where &lt;a href=&quot;https://www.codecogs.com/eqnedit.php?latex=\large&amp;space;a_{m,n}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?\large&amp;space;a_{m,n}&quot; title=&quot;\large a_{m,n}&quot; /&gt;&lt;/a&gt; is the probability that at &lt;a href=&quot;https://www.codecogs.com/eqnedit.php?latex=\large&amp;space;m&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?\large&amp;space;m&quot; title=&quot;\large m&quot; /&gt;&lt;/a&gt; position, &lt;a href=&quot;https://www.codecogs.com/eqnedit.php?latex=\large&amp;space;n&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?\large&amp;space;n&quot; title=&quot;\large n&quot; /&gt;&lt;/a&gt; letter is seen.This is often generated in a frequentist fashion. If a pipelinetallies all observed letters at each position, this is called a Position Frequency Matrix (PFM).The PFM can be converted to a PPM in a straight-forward manner, creating a matrixthat for any given position and letter, the probability of that letter at that positionis reported.A PWM is the PPM converted into log-likelihood. Pseudocounts can be applied to prevent probabilities of 0 from turing into -inf in the conversion process. Lastly, each position'slog-likelihood is corrected for some background probability for every given letter in theselected alphabet.---#### Features* `seqlogo` can use any PM as entry points for analysis (from a file or in array formats)and, subsequently, plot the sequence logos.* `seqlogo` was written to support BIOINF 529 :Bioinformatics Concepts and Algorithmsat the University of Michigan in the Department of Computational Medicine &amp; Bioinformatics.* `seqlogo` attempts to blend the user-friendly api of Bioconductor's [seqLogo](http://bioconductor.org/packages/release/bioc/html/seqLogo.html) and the rendering power of the [WebLogo](http://weblogo.threeplusone.com/)Python API.* `seqlogo` supports the following alphabets:    | Alphabet name |  Alphabet Letters |    | :--- |  :--- |    | **`&quot;DNA&quot;`** | `&quot;ACGT&quot;` |    | `&quot;reduced DNA&quot;` | `&quot;ACGTN-&quot;` |    | `&quot;ambig DNA&quot;` | `&quot;ACGTRYSWKMBDHVN-&quot;` |    | **`&quot;RNA&quot;`** | `&quot;ACGU&quot;` |    | `&quot;reduced RNA&quot;` | `&quot;ACGUN-&quot;` |    | `&quot;ambig RNA&quot;` | `&quot;ACGURYSWKMBDHVN-&quot;` |    | **`&quot;AA&quot;`** | `&quot;ACDEFGHIKLMNPQRSTVWY&quot;` |    | `&quot;reduced AA&quot;` | `&quot;ACDEFGHIKLMNPQRSTVWYX*-&quot;` |    | `&quot;ambig AA&quot;` | `&quot;ACDEFGHIKLMNOPQRSTUVWYBJZX*-&quot;` |    (**Bolded** alphabet names are the most commonly used)* `seqlogo` can also render sequence logos in a number of formats:    * `&quot;svg&quot;` (default)    * `&quot;eps&quot;`    * `&quot;pdf&quot;`    * `&quot;jpeg&quot;`    * `&quot;png&quot;`* All plots can be rendered in 4 different sizes:    * `&quot;small&quot;`: 3.54&quot; wide    * `&quot;medium&quot;`: 5&quot; wide    * `&quot;large&quot;`: 7.25&quot; wide    * `&quot;xlarge&quot;`: 10.25&quot; wide*Note*: all sizes taken from [this](http://www.sciencemag.org/sites/default/files/Figure_prep_guide.pdf) publicationguide from Science Magazine.---#### Recommended settings:* For best results, implement `seqlogo` within a IPython/Jupyter environment (for inline plotting purposes).* Initially written for Python 3.7, but has shown to work in versions 3.5+ (**Python 2.7 is not supported**)***## Setup### Minimal Requirements:1. `numpy`2. `pandas`3. `weblogo`**Note**: it is strongly encouraged that `jupyter` is installed as well.---#### `conda` environment:To produce the ideal virtual environment that will run `seqlogo` on a `conda`-basedbuild, clone the repo or download the environment.yml within the repo. Then run the followingcommand:```bash$ conda env create -f environment.yml```---#### InstallationTo install using `pip`: (recommended)```bash$ pip install seqlogo```To install using `conda````bash$ conda install -c bioconda seqlogo```Or install from GitHub directly```bash$ pip install git+https://github.com/betteridiot/seqlogo.git#egg=seqlogo```***## Quickstart### Importing```pythonimport numpy as npimport pandas as pdimport seqlogo```### Generate some PM data (without frequency data)For many demonstrations that speak to PWMs, they are often started with PPM data.Many packages preclude sequence logo generation from this entry point. However,`seqlogo` can handle it just fine. One point to make though is that if no count data is provided, `seqlogo` just generates the PFM data by multiplying theprobabilities by 100. This is **only** for `weblogolib` compatability.```python# Setting seed for demonstration purposes&gt;&gt;&gt; np.random.seed(42)# Making a fake PPM&gt;&gt;&gt; random_ppm = np.random.dirichlet(np.ones(4), size=6)&gt;&gt;&gt; ppm = seqlogo.Ppm(random_ppm)&gt;&gt;&gt; ppm          A         C         G         T0  0.082197  0.527252  0.230641  0.1599111  0.070375  0.070363  0.024826  0.8344352  0.161962  0.216972  0.003665  0.6174013  0.735638  0.098290  0.082638  0.0834344  0.179898  0.368931  0.280463  0.1707085  0.498510  0.079138  0.182004  0.240349```### Generate some frequency data and convert to PWMSometimes the user has frequency data instead of PWM. To construct a `Pwm` instancethat automatically computes Information Content and PWM values, the user can usethe `seqlogo.pfm2pwm()` function.```python# Setting seed for demonstration purposes&gt;&gt;&gt; np.random.seed(42)# Making some fake Position Frequency Data (PFM)&gt;&gt;&gt; pfm = pd.DataFrame(np.random.randint(0, 36, size=(8, 4)))# Convert to Position Weight Matrix (PWM)&gt;&gt;&gt; pwm = seqlogo.pfm2pwm(pfm)&gt;&gt;&gt; pwm          A         C         G         T0  0.698830 -0.301170 -1.301170  0.2134041  0.263034  0.552541 -0.584962 -0.5849622  0.148523  0.754244  0.148523 -3.3750393  0.182864 -4.209453  0.314109  0.6485284 -4.000000  0.321928  1.000000 -0.5405685 -0.222392 -0.029747  0.085730  0.1401786  0.697437  0.597902 -2.209453 -0.6244917  0.736966 -0.584962  0.502500 -2.000000```### `seqlogo.CompletePm` demoHere is a quickstart guide on how to leverage the power of `seqlogo.CompletePm````python# Setting seed for demonstration purposes&gt;&gt;&gt; np.random.seed(42)# Making a fake PWM&gt;&gt;&gt; random_ppm = np.random.dirichlet(np.ones(4), size=6)&gt;&gt;&gt; cpm = seqlogo.CompletePM(ppm = random_ppm)# Pfm was imputed&gt;&gt;&gt; print(cpm.pfm)    A   C   G   T0   8  52  23  151   7   7   2  832  16  21   0  613  73   9   8   84  17  36  28  175  49   7  18  24# Shows the how the PPM data was formatted&gt;&gt;&gt; print(cpm.ppm)          A         C         G         T0  0.082197  0.527252  0.230641  0.1599111  0.070375  0.070363  0.024826  0.8344352  0.161962  0.216972  0.003665  0.6174013  0.735638  0.098290  0.082638  0.0834344  0.179898  0.368931  0.280463  0.1707085  0.498510  0.079138  0.182004  0.240349# Computing the PWM using default background and pseudocounts&gt;&gt;&gt; print(cpm.pwm)          A         C         G         T0 -1.604773  1.076564 -0.116281 -0.6446621 -1.828788 -1.829031 -3.331983  1.7388712 -0.626276 -0.204418 -6.091862  1.3042793  1.557068 -1.346815 -1.597049 -1.5832234 -0.474749  0.561423  0.165882 -0.5503965  0.995695 -1.659494 -0.457960 -0.056800# See the consensus sequence&gt;&gt;&gt; print(cpm.consensus)CTTACA# See the Information Content&gt;&gt;&gt; print(cpm.ic)0    0.3058061    1.1108562    0.6371493    0.7489894    0.0742865    0.268034dtype: float64```### Plot the sequence logo with information content scaling```python# Setting seed for demonstration purposes&gt;&gt;&gt; np.random.seed(42)# Making a fake PWM&gt;&gt;&gt; random_ppm = np.random.dirichlet(np.ones(4), size=6)&gt;&gt;&gt; ppm = seqlogo.Ppm(random_ppm)&gt;&gt;&gt; seqlogo.seqlogo(ppm, ic_scale = False, format = 'svg', size = 'medium')```The above code will produce:![](https://github.com/betteridiot/seqlogo/blob/master/docs/figures/ic_scale.svg)### Plot the sequence logo with no information content scaling```python# Setting seed for demonstration purposes&gt;&gt;&gt; np.random.seed(42)# Making a fake PWM&gt;&gt;&gt; random_ppm = np.random.dirichlet(np.ones(4), size=6)&gt;&gt;&gt; ppm = seqlogo.Ppm(random_ppm)&gt;&gt;&gt; seqlogo.seqlogo(ppm, ic_scale = False, format = 'svg', size = 'medium')```The above code will produce:![](https://github.com/betteridiot/seqlogo/blob/master/docs/figures/no_ic_scale.svg)***## Documentation`seqlogo` exposes 5 classes to the user for handling PM data:1. `seqlogo.Pm`: the base class for all other specialized PM subclasses2. `seqlogo.Pfm`: The class used for handling PFM data3. `seqlogo.Ppm`: The class used for handling PPM data4. `seqlogo.Pwm`: The class used for handling PWM data5. `seqlogo.CompletePm`: This final class will take any/all of the other PM subclass data    and compute any of the other missing data. That is, if the user only provides a `seqlogo.Pfm`    and passes it to `seqlogo.CompletePm`, it will solve for the PPM, PWM, consensus sequence, and    information content.Additionally, `seqlogo` also provides 6 methods for converting PM structures:1. `seqlogo.pfm2ppm`: converts a PFM to a PPM2. `seqlogo.pfm2pwm`: converts a PFM to a PWM3. `seqlogo.ppm2pfm`: converts a PPM to a PFM4. `seqlogo.ppm2pwm`: converts a PPM to a PWM5. `seqlogo.pwm2pfm`: converts a PWM to a PFM6. `seqlogo.pwm2ppm`: converts a PWM to a PPMThe signatures for each item above are as follows:### Classes```pythonseqlogo.CompletePm(pfm = None, ppm = None, pwm = None, background = None, pseudocount = None,                 alphabet_type = 'DNA', alphabet = None, default_pm = 'ppm'):    &quot;&quot;&quot;    Creates the CompletePm instance. If the user does not define any `pm_filename_or_array`,    it will be initialized to empty. Will generate all other attributes as soon    as a `pm_filename_or_array` is supplied.    Args:        pfm (str or `numpy.ndarray` or `pandas.DataFrame` or Pm): The user supplied            PFM. If it is a filename, the file will be opened            and parsed. If it is an `numpy.ndarray` or `pandas.DataFrame`,            it will just be assigned. (default: None, skips '#' comment lines)        ppm (str or `numpy.ndarray` or `pandas.DataFrame` or Pm): The user supplied            PPM. If it is a filename, the file will be opened            and parsed. If it is an `numpy.ndarray` or `pandas.DataFrame`,            it will just be assigned. (default: None, skips '#' comment lines)        pwm (str or `numpy.ndarray` or `pandas.DataFrame` or Pm): The user supplied            PWM. If it is a filename, the file will be opened            and parsed. If it is an `numpy.ndarray` or `pandas.DataFrame`,            it will just be assigned. (default: None, skips '#' comment lines)        background (constant or Collection): Offsets used to calculate background letter probabilities (defaults: If             using an Nucleic Acid alphabet: 0.25; if using an Aminio Acid alphabet: Robinson-Robinson Frequencies)        pseudocount (constant): Some constant to offset PPM conversion to PWM to prevent -/+ inf. (defaults to 1e-10)        alphabet_type (str): Desired alphabet to use. Order matters (default: 'DNA')            &quot;DNA&quot; := &quot;ACGT&quot;            &quot;reduced DNA&quot; := &quot;ACGTN-&quot;            &quot;ambig DNA&quot; := &quot;ACGTRYSWKMBDHVN-&quot;            &quot;RNA&quot; := &quot;ACGU&quot;            &quot;reduced RNA&quot; := &quot;ACGUN-&quot;            &quot;ambig RNA&quot; := &quot;ACGURYSWKMBDHVN-&quot;            &quot;AA&quot; : = &quot;ACDEFGHIKLMNPQRSTVWY&quot;            &quot;reduced AA&quot; := &quot;ACDEFGHIKLMNPQRSTVWYX*-&quot;            &quot;ambig AA&quot; := &quot;ACDEFGHIKLMNOPQRSTUVWYBJZX*-&quot;            &quot;custom&quot; := None            (default: 'DNA')        alphabet (str): if 'custom' is selected or a specialize alphabet is desired, this accepts a string (default: None)        default_pm (str): which of the 3 pm's do you want to call '*home*'? (default: 'ppm')    &quot;&quot;&quot;seqlogo.Pm(pm_filename_or_array = None, pm_type = 'ppm', alphabet_type = 'DNA', alphabet = None,     background = None, pseudocount = None):    &quot;&quot;&quot;Initializes the Pm    Creates the Pm instance. If the user does not define `pm_filename_or_array`,    it will be initialized to empty. Will generate all other attributes as soon    as a `pm_filename_or_array` is supplied.    Args:        pm_filename_or_array (str or `numpy.ndarray` or `pandas.DataFrame` or Pm): The user supplied            PM. If it is a filename, the file will be opened            and parsed. If it is an `numpy.ndarray` or `pandas.DataFrame`,            it will just be assigned. (default: None, skips '#' comment lines)        alphabet_type (str): Desired alphabet to use. Order matters (default: 'DNA')            &quot;DNA&quot; := &quot;ACGT&quot;            &quot;reduced DNA&quot; := &quot;ACGTN-&quot;            &quot;ambig DNA&quot; := &quot;ACGTRYSWKMBDHVN-&quot;            &quot;RNA&quot; := &quot;ACGU&quot;            &quot;reduced RNA&quot; := &quot;ACGUN-&quot;            &quot;ambig RNA&quot; := &quot;ACGURYSWKMBDHVN-&quot;            &quot;AA&quot; : = &quot;ACDEFGHIKLMNPQRSTVWY&quot;            &quot;reduced AA&quot; := &quot;ACDEFGHIKLMNPQRSTVWYX*-&quot;            &quot;ambig AA&quot; := &quot;ACDEFGHIKLMNOPQRSTUVWYBJZX*-&quot;            &quot;custom&quot; := None            (default: 'DNA')        alphabet (str): if 'custom' is selected or a specialize alphabet is desired, this accepts a string (default: None)        background (constant or Collection): Offsets used to calculate background letter probabilities (defaults: If             using an Nucleic Acid alphabet: 0.25; if using an Aminio Acid alphabet: Robinson-Robinson Frequencies)        pseudocount (constant): Some constant to offset PPM conversion to PWM to prevent -/+ inf. (default: 1e-10)    &quot;&quot;&quot;seqlogo.Pfm(pfm_filename_or_array = None, pm_type = 'pfm', alphabet_type = 'DNA', alphabet = None,     background = None, pseudocount = None):    &quot;&quot;&quot;Initializes the Pfm    Creates the Pfm instance. If the user does not define `pfm_filename_or_array`,    it will be initialized to empty. Will generate all other attributes as soon    as a `pfm_filename_or_array` is supplied.    Args:        pfm_filename_or_array (str or `numpy.ndarray` or `pandas.DataFrame` or Pm): The user supplied            PFM. If it is a filename, the file will be opened            and parsed. If it is an `numpy.ndarray` or `pandas.DataFrame`,            it will just be assigned. (default: None, skips '#' comment lines)        alphabet_type (str): Desired alphabet to use. Order matters (default: 'DNA')            &quot;DNA&quot; := &quot;ACGT&quot;            &quot;reduced DNA&quot; := &quot;ACGTN-&quot;            &quot;ambig DNA&quot; := &quot;ACGTRYSWKMBDHVN-&quot;            &quot;RNA&quot; := &quot;ACGU&quot;            &quot;reduced RNA&quot; := &quot;ACGUN-&quot;            &quot;ambig RNA&quot; := &quot;ACGURYSWKMBDHVN-&quot;            &quot;AA&quot; : = &quot;ACDEFGHIKLMNPQRSTVWY&quot;            &quot;reduced AA&quot; := &quot;ACDEFGHIKLMNPQRSTVWYX*-&quot;            &quot;ambig AA&quot; := &quot;ACDEFGHIKLMNOPQRSTUVWYBJZX*-&quot;            &quot;custom&quot; := None            (default: 'DNA')        alphabet (str): if 'custom' is selected or a specialize alphabet is desired, this accepts a string (default: None)        background (constant or Collection): Offsets used to calculate background letter probabilities (defaults: If             using an Nucleic Acid alphabet: 0.25; if using an Aminio Acid alphabet: Robinson-Robinson Frequencies)        pseudocount (constant): Some constant to offset PPM conversion to PWM to prevent -/+ inf. (default: 1e-10)    &quot;&quot;&quot;seqlogo.Ppm(ppm_filename_or_array = None, pm_type = 'ppm', alphabet_type = 'DNA', alphabet = None,     background = None, pseudocount = None):    &quot;&quot;&quot;Initializes the Ppm    Creates the Ppm instance. If the user does not define `ppm_filename_or_array`,    it will be initialized to empty. Will generate all other attributes as soon    as a `ppm_filename_or_array` is supplied.    Args:        ppm_filename_or_array (str or `numpy.ndarray` or `pandas.DataFrame` or Pm): The user supplied            PPM. If it is a filename, the file will be opened            and parsed. If it is an `numpy.ndarray` or `pandas.DataFrame`,            it will just be assigned. (default: None, skips '#' comment lines)        alphabet_type (str): Desired alphabet to use. Order matters (default: 'DNA')            &quot;DNA&quot; := &quot;ACGT&quot;            &quot;reduced DNA&quot; := &quot;ACGTN-&quot;            &quot;ambig DNA&quot; := &quot;ACGTRYSWKMBDHVN-&quot;            &quot;RNA&quot; := &quot;ACGU&quot;            &quot;reduced RNA&quot; := &quot;ACGUN-&quot;            &quot;ambig RNA&quot; := &quot;ACGURYSWKMBDHVN-&quot;            &quot;AA&quot; : = &quot;ACDEFGHIKLMNPQRSTVWY&quot;            &quot;reduced AA&quot; := &quot;ACDEFGHIKLMNPQRSTVWYX*-&quot;            &quot;ambig AA&quot; := &quot;ACDEFGHIKLMNOPQRSTUVWYBJZX*-&quot;            &quot;custom&quot; := None            (default: 'DNA')        alphabet (str): if 'custom' is selected or a specialize alphabet is desired, this accepts a string (default: None)        background (constant or Collection): Offsets used to calculate background letter probabilities (defaults: If             using an Nucleic Acid alphabet: 0.25; if using an Aminio Acid alphabet: Robinson-Robinson Frequencies)        pseudocount (constant): Some constant to offset PPM conversion to PWM to prevent -/+ inf. (default: 1e-10)   &quot;&quot;&quot;   seqlogo.Pwm(pwm_filename_or_array = None, pm_type = 'pwm', alphabet_type = 'DNA', alphabet = None,     background = None, pseudocount = None):    &quot;&quot;&quot;Initializes the Pwm    Creates the Pwm instance. If the user does not define `pwm_filename_or_array`,    it will be initialized to empty. Will generate all other attributes as soon    as a `pwm_filename_or_array` is supplied.    Args:        pwm_filename_or_array (str or `numpy.ndarray` or `pandas.DataFrame` or Pm): The user supplied            PWM. If it is a filename, the file will be opened            and parsed. If it is an `numpy.ndarray` or `pandas.DataFrame`,            it will just be assigned. (default: None, skips '#' comment lines)        alphabet_type (str): Desired alphabet to use. Order matters (default: 'DNA')            &quot;DNA&quot; := &quot;ACGT&quot;            &quot;reduced DNA&quot; := &quot;ACGTN-&quot;            &quot;ambig DNA&quot; := &quot;ACGTRYSWKMBDHVN-&quot;            &quot;RNA&quot; := &quot;ACGU&quot;            &quot;reduced RNA&quot; := &quot;ACGUN-&quot;            &quot;ambig RNA&quot; := &quot;ACGURYSWKMBDHVN-&quot;            &quot;AA&quot; : = &quot;ACDEFGHIKLMNPQRSTVWY&quot;            &quot;reduced AA&quot; := &quot;ACDEFGHIKLMNPQRSTVWYX*-&quot;            &quot;ambig AA&quot; := &quot;ACDEFGHIKLMNOPQRSTUVWYBJZX*-&quot;            &quot;custom&quot; := None            (default: 'DNA')        alphabet (str): if 'custom' is selected or a specialize alphabet is desired, this accepts a string (default: None)        background (constant or Collection): Offsets used to calculate background letter probabilities (defaults: If             using an Nucleic Acid alphabet: 0.25; if using an Aminio Acid alphabet: Robinson-Robinson Frequencies)        pseudocount (constant): Some constant to offset PPM conversion to PWM to prevent -/+ inf. (default: 1e-10)   &quot;&quot;&quot;   ```### Conversion Methods```pythonseqlogo.pfm2ppm(pfm):    &quot;&quot;&quot;Converts a Pfm to a ppm array    Args:        pfm (Pfm): a fully initialized Pfm    Returns:        (np.array): converted values    &quot;&quot;&quot;    seqlogo.pfm2pwm(pfm, background = None, pseudocount = None):    &quot;&quot;&quot;Converts a Pfm to a pwm array    Args:        pfm (Pfm): a fully initialized Pfm        background: accounts for relative weights from background. Must be a constant or same number of columns as Pwm (default: None)        pseudocount (const): The number used to offset log-likelihood conversion from probabilites (default: None -&gt; 1e-10)    Returns:        (np.array): converted values    &quot;&quot;&quot;seqlogo.ppm2pfm(ppm):    &quot;&quot;&quot;Converts a Ppm to a pfm array    Args:        ppm (Ppm): a fully initialized Ppm    Returns:        (np.array): converted values    &quot;&quot;&quot;seqlogo.ppm2pwm(ppm, background= None, pseudocount = None):    &quot;&quot;&quot;Converts a Ppm to a pwm array    Args:        ppm (Ppm): a fully initialized Ppm        background: accounts for relative weights from background. Must be a constant or same number of columns as Pwm (default: None)        pseudocount (const): The number used to offset log-likelihood conversion from probabilites (default: None -&gt; 1e-10)    Returns:        (np.array): converted values    Raises:        ValueError: if the pseudocount isn't a constant or the same length as sequence    &quot;&quot;&quot;seqlogo.pwm2pfm(pwm, background = None, pseudocount = None):    &quot;&quot;&quot;Converts a Pwm to a pfm array    Args:        pwm (Pwm): a fully initialized Pwm        background: accounts for relative weights from background. Must be a constant or same number of columns as Pwm (default: None)        pseudocount (const): The number used to offset log-likelihood conversion from probabilites (default: None -&gt; 1e-10)    Returns:        (np.array): converted values    &quot;&quot;&quot;seqlogo.pwm2ppm(pwm, background = None, pseudocount = None):    &quot;&quot;&quot;Converts a Pwm to a ppm array    Args:        pwm (Pwm): a fully initialized Pwm        background: accounts for relative weights from background. Must be a constant or same number of columns as Pwm (default: None)        pseudocount (const): The number used to offset log-likelihood conversion from probabilites (default: None -&gt; 1e-10)    Returns:        (np.array): converted values    Raises:        ValueError: if the pseudocount isn't a constant or the same length as sequence    &quot;&quot;&quot;    ```***## ContributingPlease see our contribution guidelines [here](https://github.com/betteridiot/seqlogo/blob/master/CONTRIBUTING.md)***## Acknowledgments1. Bembom O (2018). seqlogo: Sequence logos for DNA sequence alignments. R package version 1.48.0.2. Crooks GE, Hon G, Chandonia JM, Brenner SE WebLogo: A sequence logo generator,Genome Research, 14:1188-1190, (2004).</longdescription>
</pkgmetadata>