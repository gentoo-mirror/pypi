<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://dev.azure.com/asottile/asottile/_apis/build/status/asottile.no-manylinux?branchName=master)](https://dev.azure.com/asottile/asottile/_build/latest?definitionId=48&amp;branchName=master)no-manylinux============Install this package to disable manylinux wheels when downloading from pip.## Usage```# First install no-manylinuxpip install no-manylinux# Now subsequent invocations of pip will ignore manylinux wheelspip install ...# To restore the original behaviour, simply `pip uninstall no-manylinux````## NoteThis package was previously called `no-manylinux1` but now addresses thefollowing manylinux standards:- `manylinux1`- `manylinux2010`- `manylinux2014`## What? Why?The manylinux spec requires compliant packages to vendor binary dependenciesinside the wheel that is distributed.  Take for example a library which would(prior to manylinux) dynamically link against `libssl`.  As `libssl` receivedsecurity patches, the system binaries would received updates from the OS'spackage manager.  The python library which dynamically links would receivethese updates for free without need to recompile, reinstall, etc.  Undermanylinux, `libssl` is vendored inside the wheel.  To receive securityupdates, you have to wait for the upstream to produce a new wheel and need toknow to install a new version of that library.  There's almost no visibilityabout these vendored wheels which makes managing them at scale impossible.  Assuch, some may choose to ignore this standard.## Links- https://stackoverflow.com/q/37231799/812183- https://github.com/pypa/pip/issues/3689- https://github.com/pypa/pip/issues/3689#issuecomment-219437150</longdescription>
</pkgmetadata>