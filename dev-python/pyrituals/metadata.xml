<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyRituals package [![PyPI](https://img.shields.io/pypi/v/pyrituals)](https://pypi.org/project/pyrituals/) ![PyPI - Downloads](https://img.shields.io/pypi/dm/pyrituals) [![PyPI - License](https://img.shields.io/pypi/l/pyrituals?color=blue)](https://github.com/milanmeu/pyrituals/blob/main/LICENSE)An async Python wrapper for the Rituals Perfume Genie API.It allows you to control the diffuser and retrieve its state.The package supports the first and second version.## Installation```bashpip install pyrituals```## Usage### Import```pythonfrom pyrituals import Account, Diffuser, AuthenticationException```### Create a `aiohttp.ClientSession` to make requests```pythonfrom aiohttp import ClientSessionsession = ClientSession()```### EndpointsDefault endpoints:```pythonAUTH_URL = &quot;https://rituals.sense-company.com/ocapi/login&quot;           # Account.authenticate()ACCOUNT_URL = &quot;https://rituals.sense-company.com/api/account/hubs&quot;   # Account.get_devices()HUB_URL = &quot;https://rituals.sense-company.com/api/account/hub&quot;        # Diffuser.update_data()UPDATE_URL = &quot;https://rituals.sense-company.com/api/hub/update/attr&quot; # Diffuser.turn_*(), Diffuser.set_*()```To change the used API endpoints add an `url` parameter to the function. Example:```pythonLOGIN_URL = &quot;https://rituals.sense-company.com/ocapi/login&quot;account = Account(&quot;name@example.com&quot;, &quot;passw0rd&quot;, session)await account.authenticate(url=LOGIN_URL)```### Account#### Create an instance```pythonemail = &quot;name@example.com&quot;password = &quot;passw0rd&quot;account = Account(email, password, session)```#### Authenticate```pythontry:    await account.authenticate()except AuthenticationException as e:    print(&quot;Could not authenticate:&quot;, e)```#### Account dataThe account data is only available after authentication.```pythonaccount.data```#### Get linked devices`get_devices()` returns a list of `Diffuser`s. ```pythondevices = await account.get_devices()```### Diffuser#### Diffuser dataThe initial data and format is different from the data after executing `update_data()`.Some properties require data that is only available after executing `update_data()`.Therefore, it's required to execute `update_data()` before using the diffuser properties.```pythondiffuser.datadiffuser.battery_percentagediffuser.chargingdiffuser.has_batterydiffuser.has_cartridgediffuser.hashdiffuser.hub_datadiffuser.hublotdiffuser.filldiffuser.perfumediffuser.perfume_amountdiffuser.room_sizediffuser.is_ondiffuser.is_onlinediffuser.namediffuser.versiondiffuser.wifi_percentagediffuser.room_size_square_meter```#### Get updated data```pythonawait diffuser.update_data()```#### Turn the diffuser on```pythonawait diffuser.turn_on()```#### Turn the diffuser off```pythonawait diffuser.turn_off()```#### Set the diffuser perfume amountAmount must be an integer between 1 and 3, inclusive.```pythonamount = 1await diffuser.set_perfume_amount(amount)```#### Set the diffuser room sizeSize must be an integer between 1 and 4, inclusive.```pythonsize = 2await diffuser.set_room_size(size)```#### Set the diffuser room size in square metersSize must be the integer 15, 30, 60 or 100.```pythonsize = 60await diffuser.set_room_size_square_meter(size)```## Example```pythonfrom aiohttp import ClientSessionfrom asyncio import runimport pyritualsasync def main():    async with ClientSession() as session:        account = pyrituals.Account(&quot;name@example.com&quot;, &quot;passw0rd&quot;, session)        try:            await account.authenticate()        except pyrituals.AuthenticationException as ex:            print(&quot;Could not authenticate:&quot;, ex)            return        print(&quot;Account data:&quot;, account.data)        devices = await account.get_devices()        for diffuser in devices:            print(&quot;Diffuser data:&quot;, diffuser.data)            await diffuser.turn_on()            await diffuser.set_perfume_amount(1)            await diffuser.set_room_size(4)            await diffuser.update_data()            print(&quot;Diffuser updated data:&quot;, diffuser.data)            if diffuser.has_battery:                print(f&quot;Battery percentage: {diffuser.battery_percentage}%&quot;)run(main())```</longdescription>
</pkgmetadata>