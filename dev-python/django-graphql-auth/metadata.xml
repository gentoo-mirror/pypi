<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Django GraphQL Auth===================|Pypi| |Build Status| |Codecov|GraphQL implementation of the `Django &lt;https://github.com/django/django&gt;`_authentication system.It abstract all the basic logic of handling user accounts out of your app,so you don't need to think about it and can **get up and running faster**.No lock-in. When you are ready to implement your own code or this packageis not up to your expectations , it's easy to extend or switch toyour implementation.Documentation-------------Documentation is available at `read the docs &lt;https://django-graphql-auth.readthedocs.io/en/latest/&gt;`_.Features--------* `Awesome docs &lt;https://django-graphql-auth.readthedocs.io/en/latest/&gt;`_* Fully compatible with `Relay &lt;https://github.com/facebook/relay&gt;`_* Works with default/custom user model* JWT authentication (with `Django GraphQL JWT &lt;https://github.com/flavors/django-graphql-jwt&gt;`_)* User query with filters (with `Django Filter &lt;https://github.com/carltongibson/django-filter&gt;`_ and `Graphene Django &lt;https://github.com/graphql-python/graphene-django&gt;`_)* User registration with email verification* Resend activation email* Add secondary email, with email verification too* Retrieve/Update user* Archive user* Permanently delete user or make it inactive* Turn archived user active again on login* Track user status (archived, verified, secondary email)* Password change* Password reset through email* Revoke user refresh tokens on account archive/delete/password change/reset* All mutations return ``success`` and ``errors``* Default email templates *(you will customize though)** Customizable, no lock-inPreview-------Handling user accounts becomes super easy... code:: bash  mutation {    register(      email: &quot;new_user@email.com&quot;,      username: &quot;new_user&quot;,      password1: &quot;123456super&quot;,      password2: &quot;123456super&quot;,    ) {      success,      errors,      token,      refreshToken    }  }Check the status of the new user:.. code:: python  u = UserModel.objects.last()  u.status.verified  # FalseDuring the registration, an email with a verification link was sent... code:: bash  mutation {    verifyAccount(      token:&quot;&lt;TOKEN ON EMAIL LINK&gt;&quot;,    ) {      success,      errors    }  }Now user is verified... code:: python  u.status.verified  # TrueCheck the `installation guide &lt;https://django-graphql-auth.readthedocs.io/en/latest/installation/&gt;`_ or jump to the `quickstart &lt;https://django-graphql-auth.readthedocs.io/en/latest/quickstart/&gt;`_. Or if you prefer, browse the `api &lt;https://django-graphql-auth.readthedocs.io/en/latest/api/&gt;`_... |Pypi| image:: https://img.shields.io/pypi/v/django-graphql-auth.svg   :target: https://pypi.org/project/django-graphql-auth/   :alt: Pypi.. |Build Status| image:: https://travis-ci.com/pedrobern/django-graphql-auth.svg?branch=master   :target: https://travis-ci.com/pedrobern/django-graphql-auth   :alt: Build Status.. |Codecov| image:: https://img.shields.io/codecov/c/github/pedrobern/django-graphql-auth/master.svg?style=flat-square   :target: https://codecov.io/gh/pedrobern/django-graphql-auth/   :alt: Codecov</longdescription>
</pkgmetadata>