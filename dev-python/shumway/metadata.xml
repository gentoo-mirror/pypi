<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># shumway[![Build Status](https://github.com/spotify/shumway/actions/workflows/main.yml/badge.svg)](https://github.com/spotify/shumway/actions/workflows/main.yml) [![Test Coverage](https://codecov.io/github/spotify/shumway/branch/master/graph/badge.svg)](https://codecov.io/github/spotify/shumway)A micro library for sending metrics to a [FFWD](https://github.com/spotify/ffwd) agent.## Requirements* Python 3.7. Tests pass on 3.7, and 3.8, and on the latest PyPy3 at build-time.* Support for Linux &amp; OS X## To Use```sh(env) $ pip install shumway```### CountersCreate a default counter and send to FFWD:```pythonimport shumwaymr = shumway.MetricRelay(SERVICE_NAME)mr.incr(METRIC_NAME)mr.flush()```#### Initialize a counter with a value```pythonimport shumwaymr = shumway.MetricRelay(SERVICE_NAME)counter = shumway.Counter(metric_name, SERVICE_NAME, value=10)mr.set_counter(metric_name, counter)mr.incr(metric_name)mr.flush()```#### Different increment valuesCreate a named counter and increment by a value different than 1:```pythonimport shumwaymr = shumway.MetricRelay(SERVICE_NAME)mr.incr(METRIC_NAME, 2)mr.flush()```#### Custom Counter AttributesSet custom attributes for metrics:```pythonimport shumwaymr = shumway.MetricRelay(SERVICE_NAME)counter = shumway.counter(metric_name, SERVICE_NAME,                          {attr_1: value_1,                           attr_2: value_2})mr.set_counter(metric_name, counter)mr.incr(metric_name)mr.flush()```**NB:** If you use duplicate names when calling `set_counter` it will overwrite thecounter. You will likely want to use a unique metric name for each set ofattributes you are setting.### Timers```pythonimport shumwaymr = shumway.MetricRelay(SERVICE_NAME)timer = mr.timer('timing-this-thing')with timer:    ...task you want to timemr.flush()```### Custom Timer AttributesTimers can also be created independently in order to set custom attributes:```pythonimport shumwaymr = shumway.MetricRelay(SERVICE_NAME)timer = shumway.Timer('timing-this-thing', SERVICE_NAME,                      {'attr_1': value_1, 'attr_2': value_2})with timer:    # ...task you want to timemr.set_timer('timing-this-thing', timer)mr.flush()```### Interacting with metrics objectsMetric objects (like a timer) themselves have a `flush` function as well as a `as_dict` function```pythonimport shumwaytimer = shumway.Timer('timing-this-thing', SERVICE_NAME,                      {'attr_1': value_1, 'attr_2': value_2})timer_as_dict = timer.as_dict()timer.flush(lambda dict: do_smth())```### Default attributes for non-custom metricsMetricRelay can create metrics with a common set of attributes as well:```pythonimport shumwayattributes = dict(foo='bar')mr = shumway.MetricRelay(SERVICE_NAME, default_attributes=attributes)```### Resource IdentifiersMetricsRelay and send resource identifiers as well:```pythonimport shumwayresources = dict(podname='my_ephemeral_podname')mr = shumway.MetricRelay(SERVICE_NAME, default_resources=resources)```For more on resource identifiers see [Heroic Documentation](https://spotify.github.io/heroic/docs/data_model)### Sending MetricsThere are two ways to send metrics to the `ffwd` agent:#### Emit one metricYou can emit a one-off, event-type metric immediately:```pythonimport shumwaymr = shumway.MetricRelay('my-service')# some event happenedmr.emit('a-successful-event', 1)# some event happened with attributesmr.emit('a-successful-event', 1, {'attr_1': value_1, 'attr_2': value_2})# an event with a multiple value happenedmr.emit('a-successful-event', 5)```#### Flushing all metricsFor batch-like metrics, you can flush metrics once you're ready:```pythonimport shumwaymr = shumway.MetricRelay('my-service')# measure all the things# time all the thingsif not dry_run:    mr.flush()```### Existing MetricsCheck for existence of metrics in the MetricRelay with `in`:```pycon&gt;&gt;&gt; import shumway&gt;&gt;&gt; mr = shumway.MetricRelay('my-service')&gt;&gt;&gt; counter = shumway.Counter('thing-to-count', 'my-service', value=5)&gt;&gt;&gt; mr.set_counter('thing-to-count', counter)&gt;&gt;&gt; 'thing-to-count' in mrTrue&gt;&gt;&gt; 'not-a-counter' in mrFalse```### Custom FFWD agentsBy default, `shumway` will send metrics to a local [`ffwd`](https://github.com/spotify/ffwd) agent at `127.0.0.1:19000`.If your `ffwd` agent is elsewhere, then pass that information through when initializing the `MetricRelay`:```pythonimport shumwaymr = shumway.MetricRelay(SERVICE_NAME, ffwd_ip='10.99.0.1', ffwd_port=19001)# do the thing```### Sending Metrics via HTTP to FFWDInstead of via UDP it is also possible to send metrics via HTTP by setting the `use_http` flag:```pythonimport shumwaymr = shumway.MetricRelay(SERVICE_NAME,                         ffwd_host=&quot;http://my-metrics-api.com&quot;,                         ffwd_port=8080,                         ffwd_path=&quot;/v1/metrics&quot;,                         use_http=True)```The `ffwd_host` parameter should be the HTTP endpoint and optionally `ffwd_path` can be set to specify the path.## Changes### Unreleased### 4.0.0* Remove python3.6 and use python3.7 as a minimum required version### 3.0.0 - 3.0.2* Major version bump due to dependency updates and change to supported Python versions.### 2.0.0* Positional arguments for `Meter()`, `Counter()`, `Timer()`, and `MetricRelay(...).emit()` were changed to add `resources`. If using only named arguments this should not be a problem.## Developer SetupFor development and running tests, your system must have all supported versions of Python installed. We suggest using [pyenv](https://github.com/yyuu/pyenv).## Setup```sh$ git clone git@github.com:spotify/shumway.git &amp;&amp; cd shumway# make a virtualenv(env) $ pip install -r dev-requirements.txt```## Running testsTo run the entire test suite:```sh# outside of the virtualenv# if tox is not yet installed$ pip install tox$ tox```If you want to run the test suite for a specific version of Python:```sh# outside of the virtualenv$ tox -e py37```To run an individual test, call `nosetests` directly:```sh# inside virtualenv(env) $ nosetests test/metrics_test.py```## Code of ConductThis project adheres to the [Open Code of Conduct][code-of-conduct]. By participating, you are expected to honor this code.[code-of-conduct]: https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md</longdescription>
</pkgmetadata>