<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Code Grade](https://api.codiga.io/project/29691/status/svg)](https://app.codiga.io/public/project/29691/clitool/dashboard)[![Code Quality](https://api.codiga.io/project/29691/score/svg)](https://app.codiga.io/public/project/29691/clitool/dashboard)[![PyPI version](https://badge.fury.io/py/codiga.svg)](https://badge.fury.io/py/codiga)# Codiga Continuous Integration ToolThese are various Python tools used to use the [codiga](https://www.codiga.io)engine in a continuous integration pipeline and compare analysis.The following programs are being included: * `codiga-project`: get metrics about a project * `codiga-compare`: compare a project metrics against another projects or branches * `codiga-check-quality`: check the quality of a project for a particular revision * `codiga-pre-hook-check`: script to invoke for a pre-push hook to check that a commit has no issue before pushing to your git repo * `codiga-github-action`: specific GitHub action for Codiga ([learn more here](https://github.com/codiga/github-action))## BuildYou can build and try the program using the following command:### Python 2```bashpython setup.py install --user```You will then find binaries in `$HOME/.local/bin`, for example `$HOME/.local/bin/codiga-compare`.### Python 3```bashpython3 setup.py install```## UsageYou need to set your API token with environment variables: * `CODIGA_API_TOKEN`: your API token generated from your accountOn a terminal, you would set them up like this:```bashexport CODIGA_API_TOKEN=&lt;INSERT-YOUR-API-TOKEN-HERE&gt;```### Project information toolGet general information about a project.Invoke the tool as follow:```bashcodiga-project -p &lt;PROJECT_NAME&gt;```For example:```bashcodiga-project -p &quot;mergify integration&quot;```This is an example of the execution results:```{    &quot;lastAnalysis&quot;: {        &quot;status&quot;: &quot;Done&quot;,         &quot;summary&quot;: {            &quot;duplicates&quot;: 0,             &quot;duplicated_lines&quot;: 0,             &quot;violations&quot;: 2        }    },     &quot;id&quot;: 173,     &quot;name&quot;: &quot;mergify integration&quot;}```### Compare toolThe compare tool is used to compare a project with another repository. Invoke the tool as follow:```bashcodiga-compare -p &quot;mergify integration&quot; --kind &lt;REPOSITORY_KIND&gt; --url &lt;URL_TO_OTHER_REPOSITORY&gt; --target-branch=&lt;BRANCH&gt; --target-revision=&lt;REVISION&gt;```This command will compare the project `mergify integration` on codiga with the project locatedat the URL `&lt;URL_TO_OTHER_REPOSITORY&gt;`.When the tool successfully executes, it reports the execution in a JSON object.This object shows you the number of violations, duplicates so that developers canreuse this later.There is an example of the JSON object - as follow:```{    &quot;status&quot;: &quot;Done&quot;,     &quot;targetAnalysis&quot;: {        &quot;status&quot;: &quot;Done&quot;,         &quot;summary&quot;: {            &quot;duplicates&quot;: 0,             &quot;violations&quot;: 2        }    },     &quot;id&quot;: 53,     &quot;sourceAnalysis&quot;: {        &quot;status&quot;: &quot;Done&quot;,         &quot;summary&quot;: {            &quot;duplicates&quot;: 0,             &quot;violations&quot;: 2        }    }}```These are the explanation for the other parameters: * `kind`: kind of repository used for the target. Can be `Git`, `Github`, `Gitlab` or `Bitbucket`. Values are explained below. This parameter is **REQUIRED**. * `URL`: URL of the repository. This parameter is **REQUIRED**. * `target-revision`: revision of the target repository. This parameter is **OPTIONAL** * `target-branch`: branch of the target repository. This parameter is **OPTIONAL**The `kind` argument is used to define how the target repository will be fetched.Based on the value, we use credentials from the authenticated user to clone the repository.For example, if you specify `Github`, the target repository will be cloned using the github credentialsof the authenticated user. If the user does not have any registered credentials on [Codiga](https://www.codiga.io),analysis will fail.These are the valid values for the `kind` argument: * `Github`: use the Github credentials of the user making the compare request to clone the target repository * `Git`: do not use any credentials to clone the target repository. Used to clone public repository that does not need authentication. * `Gitlab`: use the Gitlab credentials of the user making the compare request to clone the target repository * `Bitbucket`: use the Bitbucket credentials of the user making the compare request to clone the target repositoryThese are the potential return code: * `0`: everything is great and the target analysis does not have more violations or duplicates * `1`: error during the analysis * `2`: cannot find the project (specified with the `-p` option) * `3`: cannot start a new comparison * `5`: the target analysis has more violations than the source * `6`: the target analysis has more duplicates than the source## Git pre-hooksIn order to use the pre-push git hooks, edit your `.git/hooks/pre-push` file and add the following command:```bashcodiga-pre-hook-check --project-name codeinspector-playground --remote-sha $remote_sha --local-sha $local_sha```The following variables should be defined by the script: * `local_sha` represents the local SHA being pushed * `remote_sha` represents the remote SHA at the beginning of this revisionThe tool lets you ignore violations according to their categories and severities using options * `--exclude-severities` lets you ignore violations based on their severities (example: `--exclude-severities=3,4` to ignore severities `3` and `4`). * `--exclude-categories` lets you ignore violations based on their categories (example: `--exclude-categories=design,security`)Notes that the following environment variables must be set to use the tool: * `CODIGA_API_TOKEN`: token related to your API accessThere is an example of a `pre-push` hook available in [`docs/hooks/pre-push.sample`](docs/hooks/codiga-git-hook.sample).## About Codiga[Codiga](https://www.codiga.io) is a software analysis platform to manage and mitigatetechnical debt. It offers plans that caters to all developers. From our basic free plan for your personal projectto the gold plan (for companies with multiples private projects), [codiga](https://www.codiga.io) detects coding issuesand helps you keep your project afloat.</longdescription>
</pkgmetadata>