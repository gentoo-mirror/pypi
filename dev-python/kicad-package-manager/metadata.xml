<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># KiCad Package ManagerThis is a package manager for KiCad symbols, footprints, 3d models, simulation files, and hierarchical sheets.Goal----Create a format for distributing the following kind of KiCad features:* Symbols* Footprints* 3D Models* SPICE Simulation Code* Sub-sheets* Unit Tests* Command Runner* PluginsProjects can be created that programmatically generate these files.Currently Supports:* Symbols* FootprintsUp Next:* Subsheets* Command Runner* 3D ModelsInstalling KPM--------------Open the &quot;KiCad Command Prompt&quot;```bashpip3 install kicad-package-manager```In your KiCad project directory, run```bashkpm init```Then edit your `kpm.json` file as needed.How to Install a Package------------------------Find a package you want to use:```bashkpm listkpm list | grep somethingkpm search somethingkpm show some_package```Then edit the `dependencies` list in your `kpm.json` to include a package and version. Example:```json{&quot;name&quot;: &quot;cool-project&quot;,&quot;version&quot;: &quot;0.0.1&quot;,&quot;author&quot;: &quot;danroblewis&quot;,&quot;homepage&quot;: &quot;http://githab.info/magic/stuff&quot;,&quot;commands&quot;: {&quot;test&quot;: &quot;./fictional-spice-tester&quot;},&quot;dependencies&quot;: {&quot;kpm-jlcpcb-basic&quot;: &quot;0.0.5&quot;,&quot;eurorack-parts&quot;: &quot;0.0.1&quot;}}```How to Create a Package-----------------------Create a directory, it can be a KiCad project directory or any directory. Probably put it under version control with something like git.```bashkpm init```This creates a `kpm.json` file. Add the dependencies your package will require to the `dependencies` list.Your package will include your `kpm.json` file and any of these directories if they are present:```/symbols/footprints/commands/3dmodels/plugins/simulation/subsheets/tests/commands```To build the package```bashkpm build```You should now have a `package.zip` file in your project directory.To upload a package to the registry, first create a `~/.kpmrc` file:```json{&quot;name&quot;: &quot;yourname&quot;,&quot;token&quot;: &quot;arbitrarytokenonlyyouknow&quot;}```Then update the version in your `kpm.json` file.Then run```bashkpm upload```You should then see your package in the `kpm search &lt;yourpackagename&gt;` Writing Commands----------------A command is ran with `kpm run &lt;commandname&gt; &lt;arguments&gt;`.If you'd like to create a package that adds a new command to `kpm`, create a file `commands/__init__.py`:```pydef register(subparsers):print(&quot;registering mycommand&quot;)parser = subparsers.add_parser('mycommand')parser.add_argument('thing')parser.add_argument('--feature', '-f', action=&quot;store_true&quot;, required=False)def run_command(args):if args.command == 'mycommand':print(args.thing)print(args.feature)```Usage-----```bashkpm initkpm listkpm search jlckpm show kpm-jlcpcb-basickpm install .```To add a new package to the package index, [submit a pull request](https://github.com/danroblewis/kicad-package-index)### kpm.json```json{&quot;name&quot;: &quot;cool-project&quot;,&quot;version&quot;: &quot;0.0.1&quot;,&quot;author&quot;: &quot;danroblewis&quot;,&quot;homepage&quot;: &quot;http://githab.info/magic/stuff&quot;,&quot;commands&quot;: {&quot;test&quot;: &quot;./fictional-spice-tester&quot;},&quot;dependencies&quot;: {&quot;kpm-jlcpcb-basic&quot;: &quot;0.0.5&quot;,&quot;eurorack-parts&quot;: &quot;0.0.1&quot;}}```Refresh Symbols and Footprints------------------------------After updating your libraries, the symbols/footprints in your schematic files won't have the latest changes. Do this to synchronize them:* In `eeschema`, click `Tools &gt; Update Symbols from Library...`, then save* In `pcbnew`, click `Tools &gt; Update Footprints from Library...`, then save(If we can find a way to do this within kpm, that would be awesome.)Package Directory Structure---------------------------```/kpm.json/symbols//symbols/mysymbols.kicad_sym/footprints//footprints/myfootprints.pretty//footprints/myfootprints.pretty/myfootprints.kicad_mod/3dmodels//3dmodels/something.step/plugins//plugins/kicad-eurorack-tools//plugins/kicad-eurorack-tools/__init__.py/simulation//simulation/mysim.spice/sheets//sheets/mysubsheet.kicad_sch/tests//tests/mytest.py/scripts//scripts/mycommand.py```</longdescription>
</pkgmetadata>