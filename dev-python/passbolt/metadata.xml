<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ReadmeBased on Passbolt's web api https://help.passbolt.com/api## Install:```pip3 install passbolt```### From source```git clone https://github.com/daniel-lynch/passbolt.gitcd passboltpython3 setup.py install```## Examples:  - Login:      To login you will need a private key with the associated passphrase and the URI to your passbolt instance.      Then just call the passbolt class with those variables.      ```      from passbolt.passbolt import passbolt      key = open(&quot;passbolt_private.asc&quot;, &quot;r&quot;).read()      passphrase = open(&quot;passphrase&quot;, &quot;r&quot;).read().replace('\n', '')      Passbolt = passbolt(key, passphrase, &quot;https://passbolt.example.com&quot;)      ```      or you will need the fingerprint of your private key store in gpg-agent and  the URI to your passbolt instance.      Then just call the passbolt class with those variables.      ```      from passbolt.passbolt import passbolt      Passbolt = passbolt(apiurl= &quot;https://passbolt.example.com&quot;,fingerprint=&quot;BD51086546F2B05FE3207570848AD92005EABC&quot;)      ```      and if you use a custom ca, you can specify a custom TLS CA certificate bundle :      ```      from passbolt.passbolt import passbolt      Passbolt = passbolt(apiurl= &quot;https://passbolt.example.com&quot;,fingerprint=&quot;BD51086546F2B05FE3207570848AD92005EABC&quot;, verify=&quot;/etc/ipa/ca.crt&quot;)      ```   - Create a password:      To create a password you will need the following:        - Resource name        - Password        - Username (optional)        - Uri (optional)        - Description (optional)        - Encrypt Description (optional, defaults True)      ```      print(          Passbolt.createpassword(              &quot;Resource name&quot;,              &quot;Password&quot;,              &quot;Username&quot;,              &quot;Uri&quot;,              &quot;Description&quot;              )          )      print(          Passbolt.createpassword(              &quot;testlib&quot;,              &quot;FakePasswordHere&quot;,              &quot;dlynch&quot;,              &quot;ssh://&quot;,              &quot;This is a description&quot;              )          )      ```  - Get a password:    Get password accepts:        Name:          Accepted inputs:           - String           - List           - Dict        Username(optional)          - To be used when Name is a string or list          Accepted inputs:           - String        Dict format:          {&quot;Resource name&quot;: &quot;Username&quot;}          Ex. {&quot;tunes01.lynch.local&quot;: &quot;dlynch&quot;}      Returns a list of password objects with the following attributes:        name        username        password        uri        resourceid        created        created_by        creator        deleted        description        favorite        modified        modified_by        modifier        permission        resource_type_id        folder_parent_id      ```      passwords = Passbolt.getpassword(&quot;tunes01.datayard.local&quot;, &quot;datayard&quot;)      passwords = Passbolt.getpassword([&quot;tunes01.datayard.local&quot;], &quot;datayard)      passwords = Passbolt.getpassword({&quot;tunes01.datayard.local&quot;: &quot;datayard&quot;})      passwords = Passbolt.getpassword(&quot;Resource name&quot;, &quot;Username&quot;)      passwords = Passbolt.getpassword([&quot;Resource name&quot;], &quot;Username)      passwords = Passbolt.getpassword({&quot;Resource name&quot;: &quot;Username&quot;})      ```  - Share a password:    Share password accepts:      - Resource name      - Username      - List of Users to share with (Optional if Groups list is defined)      - List of Groups to share with (Optional if Users list is defined)    ```    print(        Passbolt.sharepassword(            &quot;Resource name&quot;,            &quot;Username&quot;,            [&quot;List of Users&quot;],            [&quot;List of Groups&quot;])        )    print(        Passbolt.sharepassword(            &quot;testing&quot;,            &quot;test&quot;,            [&quot;testing@gmail.com&quot;],            [&quot;test_group&quot;])        )    ```  - Update a password:    Update password accepts:      - Resource name      - New password      - Username (Optional)      - New Resource name (Optional)      - New Username (Optional)      - Uri (Optional)      - Description (Optional)      - Encrypt Description (Optional, defaults True)    ```    print(        Passbolt.updatepassword(            &quot;Resource name&quot;,            &quot;New password&quot;            )        )    print(        Passbolt.updatepassword(            &quot;Testing&quot;,            &quot;Hunter2&quot;,            &quot;Test&quot;,            newname=&quot;Testing2&quot;,            newusername=&quot;Test2&quot;,            uri=&quot;testing.com&quot;,            description=&quot;asdf&quot;            )        )    ```  - Delete a password:    Delete password accepts:      - Resource name      - Username (Optional)    ```    print(        Passbolt.deletepassword(            &quot;Resource name&quot;, &quot;Username&quot;            )        )    print(        Passbolt.deletepassword(            &quot;testlib&quot;, &quot;dlynch&quot;            )        )    ```  - Create User:    Create user accepts:      - Email Address (Username)      - First name      - Last name    ```    print(        Passbolt.createuser(&quot;email&quot;, &quot;First name&quot;, &quot;Last name&quot;)    )    print(        Passbolt.createuser(&quot;testing@testing.com&quot;, &quot;John&quot;, &quot;Doe&quot;)    )    ```  - Get User:    Get user accepts:      - Email Address (Username)    ```      User = Passbolt.getuser(&quot;testing@testing.com&quot;)    ```    Returns a user object with the following attributes:        userid (string)        username (string)        gpgkey (Dict)        created (string)        active (string)        deleted (string)        modified (string)        role_id (string)        profile (Dict)        role (string)        last_logged_in (string)  - Update User:    Update user accepts:      - Email Address (Username)      - Firstname      - Lastname      - Admin status (Optional, defaults False)    ```    print(        Passbolt.updateuser(&quot;email&quot;, &quot;First name&quot;, &quot;Last name&quot;)    )    print(        Passbolt.updateuser(&quot;testing2@testing.com&quot;, &quot;Jane&quot;, &quot;Doe&quot;)    )    ```  - Delete User:    Delete user accepts:      - Email Address (Username)    ```      print(Passbolt.deleteuser(&quot;testing@testing.com&quot;))    ```  - Get Groups:    Get groups accepts:      - members (Optional, defaults True)    ```      print(Passbolt.getgroups())    ```    Returns a list of group objects:  - Get Group:    Accepts:      - Group name    ```      print(Passbolt.getgroup(&quot;Users&quot;))    ```    Returns a group object with the following attributes:        groupid (string)        name (string)        users (List of partial User objects)        admins (List of User objects)        created (string)        created_by (string, User ID)        deleted (string)        modified (string)        modified_by (string, User ID)  - Update Group:    Accepts:      - Group name      - New Users (Optional)      - New Admins (Optional)    ```      Passbolt.updategroup(&quot;Users&quot;, [&quot;testing@gmail.com&quot;], [&quot;admin@gmail.com&quot;])    ```    Currently only supports adding Users and Admins due to API limitations.  - Delete Group:    Accepts:      - Group name    ```      Passbolt.deletegroup(&quot;Users&quot;)    ```</longdescription>
</pkgmetadata>