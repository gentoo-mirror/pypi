<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![GitHub](https://img.shields.io/github/license/surquest/python-fastapi-utils?style=flat-square)![PyPI - Downloads](https://img.shields.io/pypi/dm/surquest-fastapi-utils?style=flat-square)![PyPI](https://img.shields.io/pypi/v/surquest-fastapi-utils)# IntroductionThis project provides collection of utilities for smooth integration of FastAPI framework with Google Cloud Platform services as logging and tracing.The key features of this project are:* Logging to Cloud Logging* Tracing to Cloud Logging* Error Reporting via Cloud Logging* Custom middleware for configuration of logging* Custom exception handlers treating HTTP and validation exceptions* Custom routes for documentation and favicon* Custom responses with statuses `success`, `warning` and `error` and standardized error messages# Quick StartThis section shows how to use the utilities provided by this project:```python&quot;&quot;&quot;File main.py with FastAPI app&quot;&quot;&quot;import osfrom fastapi.exceptions import RequestValidationErrorfrom starlette.exceptions import HTTPExceptionfrom fastapi import FastAPI, Request, Query# import surquest modules and objectsfrom surquest.fastapi.utils.route import Route  # custom routes for documentation and FavIconfrom surquest.fastapi.utils.GCP.tracer import Tracerfrom surquest.fastapi.utils.GCP.logging import Loggerfrom surquest.fastapi.schemas.responses import Responsefrom surquest.fastapi.utils.GCP.middleware import LoggingMiddlewarefrom surquest.fastapi.utils.GCP.catcher import (    catch_validation_exceptions,    catch_http_exceptions,)PATH_PREFIX = os.getenv('PATH_PREFIX','')app = FastAPI(    title=&quot;Exchange Rates ETL&quot;,    openapi_url=F&quot;{PATH_PREFIX}/openapi.json&quot;)# add middlewareapp.add_middleware(LoggingMiddleware)# exception handlersapp.add_exception_handler(HTTPException, catch_http_exceptions)app.add_exception_handler(RequestValidationError, catch_validation_exceptions)# custom routes to documentation and faviconapp.add_api_route(path=F&quot;{PATH_PREFIX}/&quot;, endpoint=Route.get_documentation, include_in_schema=False)app.add_api_route(path=PATH_PREFIX, endpoint=Route.get_favicon, include_in_schema=False)# custom route to illustrate logging and tracing@app.get(F&quot;{PATH_PREFIX}/users&quot;)async def get_users(    age: int = Query(        default=18,        description=&quot;Minimal age of the user&quot;,        example=30,    ),):    with Tracer.start_span(&quot;Generate users&quot;):        users = [            {&quot;name&quot;: &quot;John Doe&quot;, &quot;age&quot;: 30, &quot;email&quot;: &quot;john@doe.com&quot;},            {&quot;name&quot;: &quot;Will Smith&quot;, &quot;age&quot;: 42, &quot;email&quot;: &quot;will@smith.com&quot;}        ]        Logger.info('Found %s users', len(users), extra={&quot;users&quot;: users})    with Tracer.start_span(&quot;Filtering users&quot;):        output = []        excluded = []        Logger.debug(F&quot;Filtering users by age &gt; {age}&quot;)        for user in users:            if user[&quot;age&quot;] &gt; age:                output.append(user)            else:                excluded.append(user)        Logger.debug(            'Number of excluded users: %s', len(excluded),            extra={&quot;excluded&quot;: excluded}        )    return Response.set(data=output)```The endpoint `/users` will return the following standard response:```json{  &quot;info&quot;: {    &quot;status&quot;: &quot;success&quot;  },  &quot;data&quot;: [    {      &quot;name&quot;: &quot;John Doe&quot;,      &quot;age&quot;: 30,      &quot;email&quot;: &quot;john@doe.com&quot;    },    {      &quot;name&quot;: &quot;Will Smith&quot;,      &quot;age&quot;: 42,      &quot;email&quot;: &quot;will@smith.com&quot;    }  ]}```and the logs will are available in Google Cloud Platform console within Stackdriver Logging:![Log Entries](https://github.com/surquest/python-fastapi-utils/blob/main/assets/img/logs.png?raw=true)as well as the traces are available in Google Cloud Platform console within Stackdriver Trace:![Trace](https://github.com/surquest/python-fastapi-utils/blob/main/assets/img/trace.png?raw=true)# Local developmentYou are more than welcome to contribute to this project. To make your start easier we have prepared a docker image with all the necessary tools to run it as interpreter for Pycharm or to run tests.## Build docker image```docker build `     --tag surquest/fastapi/utils `     --file package.base.dockerfile `     --target test .```## Run tests```docker run --rm -it ` -v &quot;${pwd}:/opt/project&quot; ` -e &quot;GOOGLE_APPLICATION_CREDENTIALS=/opt/project/credentials/keyfile.json&quot; ` -w &quot;/opt/project/test&quot; ` surquest/fastapi/utils pytest```</longdescription>
</pkgmetadata>