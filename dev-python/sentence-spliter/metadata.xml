<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sentence-spliter[toc]## 简介sentence-spliter 句子切分工具：将一个长句或者段落，切分为若干短句的 List 。支持自然切分，中间切分等。目前支持语言：中文， 英文，韩语## Architechture- 项目结构```.├── doc# 补充文档├── LICENSE# 许可证├── MANIFEST.in# 用于setup时包含其他文件├── pyproject.toml# 用于构建项目├── README.md├── requirements.txt├── sentence_spliter│   ├── architect# 存放切句的基本单元│   ├── cutter4grammar# 语法纠错定制的切句│   ├── en_cutter# 英文切句│   ├── test# 单元测试│   ├── utility# 其他工具函数│   └── zh_cutter# 中文切句└── setup.py# setup.py```更详细的目录结构见 [链接](doc/detail.md)## Setupgit 安装```git clone git@git.duowan.com:ai/nlp/sentence-spliter.gitpip install -U pippip install -r requirements.txt```PYPI 安装```pip install sentence_spliter```## API### 请求示例```curl --location --request POST 'https://rosetta-nlp-api.duowan.com/api/v1/sentence-spliter/en-sentence-spliter' \--header 'Content-Type: application/json' \--data-raw '{  &quot;paragraphs&quot;:[&quot;A long time ago..... there is a mountain, and there is a temple in the mountain!!! And here is an old monk in the temple!?....&quot;] ,  &quot;options&quot;: {      &quot;max_len&quot;: 30,      &quot;min_len&quot;: 6  }} '```- Request```{  &quot;paragraphs&quot;:[&quot;A long time ago..... there is a mountain, and there is a temple in the mountain!!! And here is an old monk in the temple!?....&quot;] ,  &quot;options&quot;: {      &quot;max_len&quot;: 30,      &quot;min_len&quot;: 6  }} ```- Response```{    &quot;code&quot;: 0,    &quot;data&quot;: {        &quot;paragraphs&quot;: [            &quot;A long time ago..... there is a mountain, and there is a temple in the mountain!!! And here is an old monk in the temple!?....&quot;        ],        &quot;sub_sentences&quot;: [            [                [                    &quot;A long time ago..... there is a mountain, and there is a temple in the mountain!!!&quot;                ],                [                    &quot; And here is an old monk in the temple!?....&quot;                ]            ]        ],        &quot;version&quot;: &quot;1.0.0&quot;    },    &quot;message&quot;: &quot;success&quot;}```  ### 响应参数说明| **字段名**    | **类型** | **说明**           || :------------ | :------- | :----------------- || paragraphs    | String   | 需要切分的段落列表 || sub_sentences | String   | 切分完成的子句     |接口相关更多内容见[接口文档](./doc/interface.md)**&lt;font color=&quot;#dd0000&quot;&gt;特别注意：version字段改动涉及广东部门是否需要重跑流水线  &lt;/font&gt;**[链接](./doc/detail#version-number)  ## 状态机### Data需要用到的主要辅助数据为以下两个：- 白名单表： &lt;cutter&gt;/white_list.txt- 权重表：&lt;cutter&gt;/weights_list.txt### Format白名单表格式：```Dr.U!S!A!No.abbr.Brig.Ltd.b.N.hr.```每行一个字符串，算法扫描到白名单中被记录字符串中的结束符号将会不计为一种象征结束的标志。权重表:```and 10or 10but 10even 10however 10whenever 10whatever 10although 10thought 10```每行为：`word`+`weight`的格式，表示各个有转折、承接上下文等作用含义的词在需要句内切割时的权重大小。### 介绍以下句子作为样本：```pythonsentence = 'I like chicken. I like chicken.'```#### ***Sequence***Sequence模块首先将需要切割的句子转换为某种特殊的序列格式。```mermaidgraph LRA[I like chicken.] --&gt;B[I]subgraph sequence    B --&gt;C[&lt;space&gt;]    C --&gt;D[like]    D --&gt; E[&lt;space&gt;]    E --&gt; F[chicken]    F --&gt; G[.]end```sequence将直接进入状态机#### ***Condition*** and ***Operation***Condition模块表示执行某个动作之前的某个条件或者判断，若满足该条件则执行，否则执行不满足该条件的动作。Operation模块表示某个动作或者称为操作```mermaid    graph LRA{Condition} --&gt;|True| B[Operation1]A --&gt;|False| C[Operation2]    ```#### ***Condition&amp;Operation***模块由一系列上图Condition&amp;Operation组成的模块表示一连串的判断、动作序列组合叠加进而```mermaid    graph LRA{Condition1} --&gt;|True| B[Condition&amp;Operation1]A --&gt;|False| C[Condition&amp;Operation2]B --&gt;D[Condition&amp;Operation3]C --&gt;E[Condition&amp;Operation4]```#### ***Logic***上述Condition&amp;Operation模块形成了整个Logic所有的Condition&amp;Operation模块进一步叠加得到整个大的逻辑图### 运行- 导入相关包```pythonfrom sentence_spliter.en_cutter.en_sequence import Sequence # 导入英文切句框架内的sequence类from sentence_spliter.en_cutter.logic import SimpleLogic, LongShortLogic# 导入英文切句框架内的logic类```- 加载句子为sequence类```pythonsentence = 'I like chicken. I like chicken.'# 例句seq = Sequence(sentence)                                                    # 转化为sequencesimple_logic = SimpleLogic()# 自然切句逻辑long_logic = LongShortLogic(max_len=max_len, min_len=min_len)# 切割长短句```- 执行切句```simple_result = simple_logic.run(seq, debug=True)long_results = long_logic.run(seq, debug=True)```## 打包上传- 打开setup.py，修改相应的配置（version等）```pythonfrom setuptools import setup, find_packagessetup(    name=&quot;sentence-spliter&quot;,    version=&quot;X.X.X&quot;,    author=&quot;&lt;your name&gt;&quot;,    author_email=&quot;&lt;your email&gt;&quot;,...)```- 在项目根目录运行以下命令```./bin/package.sh```- 键入账号和密码```Enter your username: &lt;your username&gt;Enter your password: &lt;your password&gt;```- 等待上传即可详细教程可见[链接](https://packaging.python.org/en/latest/tutorials/packaging-projects/)</longdescription>
</pkgmetadata>