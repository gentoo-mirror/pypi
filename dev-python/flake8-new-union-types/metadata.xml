<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flake8-new-union-types[![Build Status](https://github.com/xome4ok/flake8-new-union-types/actions/workflows/check.yml/badge.svg?branch=main)](https://github.com/xome4ok/flake8-new-union-types/actions/workflows/check.yml)[![PyPI](https://img.shields.io/pypi/v/flake8-new-union-types)](https://pypi.org/project/flake8-new-union-types/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/flake8-new-union-types)](https://pypi.org/project/flake8-new-union-types/)[![PyPI - License](https://img.shields.io/pypi/l/flake8-new-union-types)](https://pypi.org/project/flake8-new-union-types/)Flake8 plugin to enforce the new `Union` and `Optional` annotation syntax defined in [PEP 604](https://peps.python.org/pep-0604/).```pythonUnion[X, Y] = X | YOptional[X] = X | None```Note that it's impossible to use forward references in the new syntax, like this:```python&quot;X&quot; | int```such a case [can be expressed](https://bugs.python.org/issue45857) as a string containing both union terms:```python&quot;X | int&quot;```## Installation```pip install flake8-new-union-types```or if you use [poetry](https://python-poetry.org/):```poetry add --dev flake8-new-union-types```## Usage## Error list* NU001 Use `Foo | Bar` syntax instead of Union (PEP 604)* NU002 Use `Foo | None` syntax instead of Optional (PEP 604)* NU003 Present the whole expression as a string to annotate forward refs, e.g. `&quot;int | Foo&quot;` (PEP 604)## ConfigurationThere is no way to configure the plugin at the moment.</longdescription>
</pkgmetadata>