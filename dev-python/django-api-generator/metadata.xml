<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># [Django API Generator](https://appseed.us/developer-tools/django-api-generator/)Simple tool that **Generates Secure APIs** on top of `DRF` with minimum effort - actively supported by [AppSeed](https://appseed.us/).- [Django Dynamic Services](https://github.com/app-generator/django-dynamic-services) - `sample project that uses the library`- [Django - Build Services without Coding](https://www.youtube.com/watch?v=EtMCK5AmdQI) - `video presentation`&lt;br /&gt;&gt; Features- `API engine` provided by `DRF`- Secured by `JWT Tokens` (mutating requests)- `Minimal Configuration` (single line in config for each model)- `Handles any model` defined across the project- `CRUD` access logic:  - `READ` is public (all items, get item by ID)  - `Mutating requests` are protected by `JWT Tokens`&lt;br /&gt;![Django API Generator - DRF Interface (open-source tool).](https://user-images.githubusercontent.com/51070104/197181145-f7458df7-23c3-4c14-bcb1-8e168882a104.jpg)&lt;br /&gt;## How to use it&lt;br /&gt;&gt; **Step #1** - `Install the package` ```bash$ pip install django-api-generator// OR$ pip install git+https://github.com/app-generator/django-api-generator.git```&lt;br /&gt;&gt; **Step #2** - `Update Configuration`, include the new APPs```pythonINSTALLED_APPS = [    'django_api_gen',            # Django API GENERATOR  # &lt;-- NEW    'rest_framework',            # Include DRF           # &lt;-- NEW     'rest_framework.authtoken',  # Include DRF Auth      # &lt;-- NEW   ]```&lt;br /&gt;&gt; **Step #3** - `Register the model` in `core/settings.py` (API_GENERATOR section)This sample code assumes that `app1` exists and model `Book` is defined and migrated.```pythonAPI_GENERATOR = {    # pattern:     # API_SLUG -&gt; Import_PATH     'books'  : &quot;app1.models.Book&quot;,}REST_FRAMEWORK = {    'DEFAULT_AUTHENTICATION_CLASSES': [        'rest_framework.authentication.SessionAuthentication',        'rest_framework.authentication.TokenAuthentication',    ],}```&lt;br /&gt;&gt; **Step #4** - `Migrate DB` and create the tables used by `DRF` ```bash$ python manage.py makemigrations$ python manage.py migrate```&lt;br /&gt;&gt; **Step #5** - `Generate API` ```bash$ python manage.py generate-api// OR $ python manage.py generate-api -f # supress confirmation (forcing mode)```The code is generated under the `api` folder in the ROOT of the project. At each iteration the **API code is overwritten**.&lt;br /&gt;&gt; **Step #6** - `Update routing`, include APIs ```pythonfrom django.contrib import adminfrom django.urls import path, include                        # &lt;-- UPD: 'include` directivefrom rest_framework.authtoken.views import obtain_auth_token # &lt;-- NEWurlpatterns = [    path(&quot;admin/&quot;, admin.site.urls),    path(&quot;api/&quot;,   include(&quot;api.urls&quot;)),        # &lt;-- NEW    path('login/jwt/', view=obtain_auth_token), # &lt;-- NEW]    ```    &lt;br /&gt;&gt; **Step #7** - `Use API` If the managed model is `Books`, the API interface is `/api/books/` and all CRUD methods are available. &gt; Note: for mutating requests, the `JWT Token` is provided by `http://localhost:8000/login/jwt/` route (the user should exist).&lt;br /&gt;![Django API Generator - POSTMAN Interface (open-source tool).](https://user-images.githubusercontent.com/51070104/197181265-eb648e27-e5cf-4f3c-b330-d000aba53c6a.jpg)&lt;br /&gt;### Links &amp; resources - [DRF](https://www.django-rest-framework.org/) - HOMEpage- More [Developer Tools](https://appseed.us/developer-tools/) provided by `AppSeed`- Ask for [Support](https://appseed.us/support/) via `Email` &amp; `Discord` &lt;br /&gt;---[Django API Generator](https://appseed.us/developer-tools/django-api-generator/) - Open-source library provided by **[AppSeed](https://appseed.us/)**</longdescription>
</pkgmetadata>