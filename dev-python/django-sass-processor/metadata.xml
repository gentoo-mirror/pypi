<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-sass-processorAnnoyed having to run a Compass, Grunt or Gulp daemon while developing Django projects?Well, then this app is for you! Compile SASS/SCSS files on the fly without having to managethird party services nor special IDE plugins.[![Build Status](https://github.com/jrief/django-sass-processor/actions/workflows/tests.yml/badge.svg)](https://github.com/jrief/django-sass-processor/actions)[![PyPI](https://img.shields.io/pypi/pyversions/django-sass-processor.svg)]()[![PyPI version](https://img.shields.io/pypi/v/django-sass-processor.svg)](https://pypi.python.org/pypi/django-sass-processor)[![PyPI](https://img.shields.io/pypi/l/django-sass-processor.svg)]()[![Downloads](https://img.shields.io/pypi/dm/django-sass-processor.svg)](https://pypi.python.org/pypi/django-sass-processor)[![Twitter Follow](https://img.shields.io/twitter/follow/shields_io.svg?style=social&amp;label=Follow&amp;maxAge=2592000)](https://twitter.com/jacobrief)## Other good reasons for using this library* Refer SASS/SCSS files directly from your sources, instead of referring a compiled CSS file,having to rely on another utility which creates them from SASS/SCSS files, hidden inyour source tree.* Use Django's `settings.py` for the configuration of paths, box sizes etc., instead of having anotherSCSS specific file (typically `_variables.scss`), to hold these.* Extend your SASS functions by calling Python functions directly out of your Django project.* View SCSS errors directly in the debug console of your Django's development server.**django-sass-processor** converts `*.scss` or `*.sass` files into `*.css` while renderingtemplates. For performance reasons this is done only once, since the preprocessor keeps track onthe timestamps and only recompiles, if any of the imported SASS/SCSS files is younger than thecorresponding generated CSS file.## IntroductionThis Django app provides a templatetag `{% sass_src 'path/to/file.scss' %}`, which can be usedinstead of the built-in templatetag `static`. This templatetag also works inside Jinja2 templates.If SASS/SCSS files shall be referenced through the `Media` class, or `media` property, the SASSprocessor can be used directly.Additionally, **django-sass-processor** is shipped with a management command, which can convertthe content of all occurrences inside the templatetag `sass_src` as an offline operation. Hencethe **libsass** compiler is not required in a production environment.During development, a [sourcemap](https://developer.chrome.com/devtools/docs/css-preprocessors) isgenerated along side with the compiled `*.css` file. This allows to debug style sheet errors mucheasier.With this tool, you can safely remove your Ruby installations &quot;Compass&quot; and &quot;SASS&quot; from your Djangoprojects. You neither need any directory &quot;watching&quot; daemons based on node.js.## Project's HomeOn GitHub:https://github.com/jrief/django-sass-processorPlease use the issue tracker to report bugs or propose new features.## Installation```pip install libsass django-compressor django-sass-processor````django-compressor` is required only for offline compilation, when using the command`manage.py compilescss`.`libsass` is not required on the production environment, if SASS/SCSS files have been precompiledand deployed using offline compilation.## ConfigurationIn `settings.py` add to:```pythonINSTALLED_APPS = [    ...    'sass_processor',    ...]```**django-sass-processor** is shipped with a special finder, to locate the generated `*.css` filesin the directory referred by `STORAGES['sass_processor']['ROOT']` (for Django &gt;= 4.2.*) or `SASS_PROCESSOR_ROOT` (for Django &lt;= 4.1.*), or, if unset `STATIC_ROOT`. Just add it toyour `settings.py`. If there is no `STATICFILES_FINDERS` in your `settings.py` don't forgetto include the **Django** [default finders](https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-STATICFILES_FINDERS).```pythonSTATICFILES_FINDERS = [    'django.contrib.staticfiles.finders.FileSystemFinder',    'django.contrib.staticfiles.finders.AppDirectoriesFinder',    'sass_processor.finders.CssFinder',    ...]```Optionally, add a list of additional search paths, the SASS compiler may examine when using the`@import &quot;...&quot;;` statement in SASS/SCSS files:```pythonimport osSASS_PROCESSOR_INCLUDE_DIRS = [    os.path.join(PROJECT_PATH, 'extra-styles/scss'),    os.path.join(PROJECT_PATH, 'node_modules'),]```Additionally, **django-sass-processor** will traverse all installed Django apps (`INSTALLED_APPS`)and look into their static folders. If any of them contain a file matching the regular expressionpattern `^_.+\.(scss|sass)$` (read: filename starts with an underscore and is of type `scss` or`sass`), then that app specific static folder is added to the **libsass** include dirs. Thisfeature can be disabled in your settings with:```pythonSASS_PROCESSOR_AUTO_INCLUDE = False```If inside of your SASS/SCSS files, you also want to import (using `@import &quot;path/to/scssfile&quot;;`)files which do not start with an underscore, then you can configure another Regex pattern in yoursettings, for instance:```pythonSASS_PROCESSOR_INCLUDE_FILE_PATTERN = r'^.+\.scss$'```will look for all files of type `scss`. Remember that SASS/SCSS files which start with anunderscore, are intended to be imported by other SASS/SCSS files, while files starting with aletter or number are intended to be included by the HTML tag`&lt;link href=&quot;{% sass_src 'path/to/file.scss' %}&quot; ...&gt;`.During development, or when `SASS_PROCESSOR_ENABLED = True`, the compiled file is placed into thefolder referenced by `STORAGES['sass_processor']['ROOT']` (for Django &gt;= 4.2.*) or `SASS_PROCESSOR_ROOT` (for Django &lt;= 4.1.*).If unset, this setting defaults to `STATIC_ROOT`.Having a location outside of the working directory prevents to pollute your local `static/css/...`directories with auto-generated files. Therefore assure, that this directory is writable by theDjango runserver.#### Fine tune SASS compiler parameters in `settings.py`.Integer `SASS_PRECISION` sets floating point precision for output css. libsass'default is `5`. Note: **bootstrap-sass** requires `8`, otherwise variouslayout problems _will_ occur.```pythonSASS_PRECISION = 8````SASS_OUTPUT_STYLE` sets coding style of the compiled result, one of `compact`,`compressed`, `expanded`, or `nested`. Default is `nested` for `DEBUG`and `compressed` in production.Note: **libsass-python** 0.8.3 has [problem encoding result while saving onWindows](https://github.com/dahlia/libsass-python/pull/82), the issue is alreadyfixed and will be included in future `pip` package release, in the meanwhileavoid `compressed` output style.```pythonSASS_OUTPUT_STYLE = 'compact'```### Jinja2 support`sass_processor.jinja2.ext.SassSrc` is a Jinja2 extension. Add it to your Jinja2 environment to enable the tag `sass_src`, there is no need for a `load` tag. Example of how to add your Jinja2 environment to Django:In `settings.py`:```pythonTEMPLATES = [{    'BACKEND': 'django.template.backends.jinja2.Jinja2',    'DIRS': [],    'APP_DIRS': True,    'OPTIONS': {        'environment': 'yourapp.jinja2.environment'    },    ...}]```Make sure to add the default template backend, if you're still using Django templates elsewhere.This is covered in the [Upgrading templates documentation](https://docs.djangoproject.com/en/stable/ref/templates/upgrading/).In `yourapp/jinja2.py`:```python# Include this for Python 2.from __future__ import absolute_importfrom jinja2 import Environmentdef environment(**kwargs):    extensions = [] if 'extensions' not in kwargs else kwargs['extensions']    extensions.append('sass_processor.jinja2.ext.SassSrc')    kwargs['extensions'] = extensions    return Environment(**kwargs)```If you want to make use of the `compilescss` command, then you will also have to add the following to your settings:```pythonfrom yourapp.jinja2 import environmentCOMPRESS_JINJA2_GET_ENVIRONMENT = environment```## Usage### In your Django templates```django{% load sass_tags %}&lt;link href=&quot;{% sass_src 'myapp/css/mystyle.scss' %}&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;```The above template code will be rendered as HTML```html&lt;link href=&quot;/static/myapp/css/mystyle.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;```You can safely use this templatetag inside a [Sekizai](https://django-sekizai.readthedocs.io/)'s`{% addtoblock &quot;css&quot; %}` statement.### In Media classes or propertiesIn Python code, you can access the API of the SASS processor directly. This for instance is usefulin Django's admin or form framework.```pythonfrom sass_processor.processor import sass_processorclass SomeAdminOrFormClass(...):    ...    class Media:        css = {            'all': [sass_processor('myapp/css/mystyle.scss')],        }```## Add vendor prefixes to CSS rules using values from https://caniuse.com/Writing SCSS shall be fast and easy and you should not have to care, whether to add vendor specificprefixes to your CSS directives. Unfortunately there is no pure Python package to solve this, butwith a few node modules, we can add this to our process chain.As superuser install```shellnpm install -g npx```and inside your project root, install```shellnpm install postcss-cli autoprefixer```Check that the path of `node_modules` corresponds to its entry in the settings directive`STATICFILES_DIRS` (see below).In case `npx` can not be found in your system path, use the settings directive`NODE_NPX_PATH = /path/to/npx` to point to that executable.If everything is setup correctly, **django-sass-processor** adds all required vendor prefixes tothe compiled CSS files. For further information, refer to the[Autoprefixer](https://github.com/postcss/autoprefixer) package.To disable autoprefixing, set `NODE_NPX_PATH = None`.**Important note**: If `npx` is installed, but `postcss` and/or `autoprefixer` are missingin the local `node_modules`, setting `NODE_NPX_PATH` to `None` is manadatory, otherwise**django-sass-processor** does not know how to postprocess the generated CSS files.## Offline compilationIf you want to precompile all occurrences of your SASS/SCSS files for the whole project, on thecommand line invoke:```shell./manage.py compilescss```This is useful for preparing production environments, where SASS/SCSS files can't be compiled onthe fly.To simplify the deployment, the compiled `*.css` files are stored side-by-side with theircorresponding SASS/SCSS files. After compiling the files run```shell./manage.py collectstatic```as you would in a normal deployment.In case you don't want to expose the SASS/SCSS files in a production environment,deploy with:```shell./manage.py collectstatic --ignore=*.scss```To get rid of the compiled `*.css` files in your local static directories, simply reverse theabove command:```shell./manage.py compilescss --delete-files```This will remove all occurrences of previously generated `*.css` files.Or you may compile results to the `STORAGES['sass_processor']['ROOT']` [Django &gt;= 4.2.*] or `SASS_PROCESSOR_ROOT` [Django &lt;= 4.1.*] directory directy (if not specified - to`STATIC_ROOT`):```shell./manage.py compilescss --use-storage```Combine with `--delete-files` switch to purge results from there.If you use an alternative templating engine set its name in `--engine` argument. Currently`django` and `jinja2` are supported, see[django-compressor documentation](http://django-compressor.readthedocs.org/en/latest/) on how toset up `COMPRESS_JINJA2_GET_ENVIRONMENT` to configure jinja2 engine support.During offline compilation **django-sass-processor** parses all Python files and looks forinvocations of `sass_processor('path/to/sassfile.scss')`. Therefore the string specifyingthe filename must be hard coded and shall not be concatenated or being somehow generated.### Alternative templatesBy default, **django-sass-processor** will locate SASS/SCSS files from .html templates,but you can extend or override this behavior in your settings with:```pythonSASS_TEMPLATE_EXTS = ['.html','.jade']```## Configure SASS variables through settings.pyIn SASS, a nasty problem is to set the correct include paths for icons and fonts. Normally this isdone through a `_variables.scss` file, but this inhibits a configuration through your projects`settings.py`.To avoid the need for duplicate configuration settings, **django-sass-processor** offers a SASSfunction to fetch any arbitrary configuration directive from the project's `settings.py`. Thisis specially handy to set the include path of your Glyphicons font directory. Assume, Bootstrap-SASShas been installed using:```shellnpm install bootstrap-sass```then locate the directory named `node_modules` and add it to your settings, so that your fonts areaccessible through the Django's `django.contrib.staticfiles.finders.FileSystemFinder`:```pythonSTATICFILES_DIRS = [    ...    ('node_modules', '/path/to/your/project/node_modules/'),    ...]NODE_MODULES_URL = STATIC_URL + 'node_modules/'```With the SASS function `get-setting`, it is possible to override any SASS variable with a valueconfigured in the project's `settings.py`. For the Glyphicons font search path, add this to your`_variables.scss`:```scss$icon-font-path: unquote(get-setting(NODE_MODULES_URL) + &quot;bootstrap-sass/assets/fonts/bootstrap/&quot;);```and `@import &quot;variables&quot;;` whenever you need Glyphicons. You then can safely remove any fontreferences, such as `&lt;link href=&quot;/path/to/your/fonts/bootstrap/glyphicons-whatever.ttf&quot; ...&gt;`from you HTML templates.### Configure SASS variables through Python functionsIt is even possible to call Python functions from inside any module. Do this by adding`SASS_PROCESSOR_CUSTOM_FUNCTIONS` to the project's `settings.py`. This shall contain a mappingof SASS function names pointing to a Python function name.Example:```pythonSASS_PROCESSOR_CUSTOM_FUNCTIONS = {    'get-color': 'myproject.utils.get_color',}```This allows to invoke Python functions out of any `*.scss` file. ```scss$color: get-color(250, 10, 120);```Here we pass the parameters '250, 10, 120' into the function `def get_color(red, green, blue)`in Python module `myproject.utils`. Note that this function receives the values as `sass.Number`,hence extract values using `red.value`, etc.If one of these customoized functions returns a value, which is not a string, then convert iteither to a Python string or to a value of type `sass.SassNumber`. For other types, refer to theirdocumentation.Such customized functions must accept parameters explicilty, otherwise `sass_processor` does notknow how to map them. Variable argument lists therefore can not be used.## Error reportingWhenever **django-sass-processor** runs in debug mode and fails to compile a SASS/SCSS file, itraises a `sass.CompileError` exception. This shows the location of the error directly on theDjango debug console and is very useful during development.This behaviour can be overridden using the settings variable `SASS_PROCESSOR_FAIL_SILENTLY`.If it is set to `True`, instead of raising that exception, the compilation error message is sendto the Django logger.## Using other storage backends for compiled CSS filesUnder the hood, SASS processor will use any storage configured in your settings as `STORAGES['staticfiles']`.This means you can use anything you normally use for serving static files, e.g. S3.A custom Storage class can be used if your deployment needs to serve generated CSS files from elsewhere,e.g. when your static files storage is not writable at runtime and you nede to re-compile CSSin production. To use a custom storage, configure it in `STORAGES['sass_processor']['BACKEND']`. You can alsoconfigure a dictionary with options that will be passed to the storage class as keyword argumentsin `STORAGES['sass_processor']['OPTIONS']` [Django &gt;= 4.2.*] or `SASS_PROCESSOR_STORAGE_OPTIONS` [Django &lt;= 4.1.*&gt;] (e.g. if you want to use `FileSystemStorage`, but with a different `location` or `base_url`:```python# For Django &gt;= 4.2.*STORAGES['sass_processor'] = {    'BACKEND': 'django.core.files.storage.FileSystemStorage',    'OPTIONS': {        'location': '/srv/media/generated',        'base_url': 'https://media.myapp.example.com/generated'    }}# For Django &lt;= 4.1.*SASS_PROCESSOR_STORAGE = 'django.core.files.storage.FileSystemStorage'SASS_PROCESSOR_STORAGE_OPTIONS = {    'location': '/srv/media/generated',    'base_url': 'https://media.myapp.example.com/generated'}```### Amazon's S3 StorageUsing the S3 storage backend from [django-storages](https://django-storages.readthedocs.io/en/latest/)with its regular configuration (if you do not otherwise use it for service static files):```python# For Django &gt;= 4.2.*STORAGES['sass_processor'] = {    'BACKEND': 'storages.backends.s3boto3.S3Boto3Storage'}# For Django &lt;= 4.1.*SASS_PROCESSOR_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'```## HerokuIf you are deploying to [Heroku](https://www.heroku.com/), use the[heroku-buildpack-django-sass](https://elements.heroku.com/buildpacks/drpancake/heroku-buildpack-django-sass)buildpack to automatically compile scss for you.## DevelopmentTo run the tests locally, clone the repository, and, in your local copy, create a new virtualenv.these commands:```shellpython -m pip install --upgrade pippip install Djangopip install -r tests/requirements.txtpython -m pytest tests```## Third Party DocumentationBrian wrote a nice artice on[how to easily use SASS/SCSS with Django](https://engineertodeveloper.com/how-to-easily-use-sass-scss-with-django/).</longdescription>
</pkgmetadata>