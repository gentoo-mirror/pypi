<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======snuggs======.. image:: https://travis-ci.org/mapbox/snuggs.svg?branch=master   :target: https://travis-ci.org/mapbox/snuggs.. image:: https://coveralls.io/repos/mapbox/snuggs/badge.svg   :target: https://coveralls.io/r/mapbox/snuggsSnuggs are s-expressions for Numpy.. code-block:: python    &gt;&gt;&gt; snuggs.eval(&quot;(+ (asarray 1 1) (asarray 2 2))&quot;)    array([3, 3])Syntax======Snuggs wraps Numpy in expressions with the following syntax:.. code-block::    expression = &quot;(&quot; (operator | function) *arg &quot;)&quot;    arg = expression | name | number | stringExamples========Addition of two numbers-----------------------.. code-block:: python    import snuggs    snuggs.eval('(+ 1 2)')    # 3Multiplication of a number and an array---------------------------------------Arrays can be created using ``asarray``... code-block:: python    snuggs.eval(&quot;(* 3.5 (asarray 1 1))&quot;)    # array([ 3.5,  3.5])Evaluation context------------------Expressions can also refer by name to arrays in a local context... code-block:: python    snuggs.eval(&quot;(+ (asarray 1 1) b)&quot;, b=np.array([2, 2]))    # array([3, 3])This local context may be provided using keyword arguments (e.g.,``b=np.array([2, 2])``), or by passing a dictionary that storesthe keys and associated array values. Passing a dictionary, specificallyan ``OrderedDict``, is important when using a function or operator thatreferences the order in which values have been provided. For example,the ``read`` function will lookup the `i-th` value passed:.. code-block:: python    ctx = OrderedDict((        ('a', np.array([5, 5])),        ('b', np.array([2, 2]))    ))    snuggs.eval(&quot;(- (read 1) (read 2))&quot;, ctx)    # array([3, 3])Functions and operators=======================Arithmetic (``* + / -``) and logical (``&lt; &lt;= == != &gt;= &gt; &amp; |``) operators areavailable. Members of the ``numpy`` module such as ``asarray()``, ``mean()``,and ``where()`` are also available... code-block:: python    snuggs.eval(&quot;(mean (asarray 1 2 4))&quot;)    # 2.3333333333333335.. code-block:: python    snuggs.eval(&quot;(where (&amp; tt tf) 1 0)&quot;,        tt=numpy.array([True, True]),        tf=numpy.array([True, False]))    # array([1, 0])Higher-order functions======================New in snuggs 1.1 are higher-order functions ``map`` and ``partial``... code-block:: python    snuggs.eval(&quot;((partial * 2) 2)&quot;)    # 4    snuggs.eval('(asarray (map (partial * 2) (asarray 1 2 3)))')    # array([2, 4, 6])Performance notes=================Snuggs makes simple calculator programs possible. None of the optimizationsof, e.g., `numexpr &lt;https://github.com/pydata/numexpr&gt;`__ (multithreading,elimination of temporary data, etc) are currently available.If you're looking to combine Numpy with a more complete Lisp, see`Hy &lt;https://github.com/hylang/hy&gt;`__:.. code-block:: clojure    =&gt; (import numpy)    =&gt; (* 2 (.asarray numpy [1 2 3]))    array([2, 4, 6])</longdescription>
</pkgmetadata>