<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPi version](https://img.shields.io/pypi/v/dm-cli)](https://pypi.org/project/dm-cli)[![PyPi downloads](https://img.shields.io/pypi/dm/dm-cli)](https://pypi.org/project/dm-cli)![Visitors](https://api.visitorbadge.io/api/visitors?path=equinor%2Fdm-cli&amp;countColor=%23263759&amp;style=flat)# Data Modelling CLI Tool## RequirementsThis package requires Python &gt;=3.8## InstallingTo install this CLI tool you can run the below command```sh$ pip3 install dm-cli```Alternatively, you clone this repo and then run this command from within the repository folder```sh$ pip3 install .```Both the above commands would install the package globally and `dm` will be available on your system.## Usage```txt$ dm --helpUsage: dm [OPTIONS] COMMAND [ARGS]...Options:--version         Show the version and exit.-t, --token TEXT  Token for authentication against DMSS.-u, --url TEXT    URL to the Data Modelling Storage Service (DMSS).-h, --help        Show this message and exit.Commands:create-lookup             Create a named Ui-/StorageRecipe-lookup-table...ds                        Subcommand for working with data sourcesentity                    Subcommand for working with entitiesimport-plugin-blueprints  Import blueprints from a plugin into the...init                      Initialize the data sources and import all...pkg                       Subcommand for working with packagesreset                     Reset all data sources (deletes and reuploads...```For each of the `commands` listed above, you can run `dm &lt;COMMAND&gt; --help` to see subcommand-specific help messages, e.g. `dm ds import --help` or `dm pkg --help`### Expected directory structureCertain commands expect a specific directory structure, such as the commands `dm reset`, `dm init`, and `dm ds reset`.For these commands, the `path` argument must be the path to a directory with two subdirectories, `data_sources` and `data`.```sh$ tree appapp├── data  └── DemoApplicationDataSource    ├── instances│     └── demoApplication.json|     └── models|       └── DemoApplication.json└── data_sources    └── DemoApplicationDataSource.json```To add meta information to a package (for example to the models root package), a file with name &quot;package.json&quot; can be placed inside the folder.### Supported reference syntaxThe CLI tool will understand and resolve these kind of type reference schemas during import.All values with one of these keys; `(&quot;type&quot;, &quot;attributeType&quot;, &quot;extends&quot;, &quot;_blueprintPath_&quot;)` will be evaluated for resolution.```bash# URI - Full absolute path prefixed with protocoldmss://datasource/package/entitydmss://datasource/package/subfolder/entity# Alias - Require dependencies to be defined somewhere in the source treeALIAS:packge/entityALIAS:entity# Data Source - Relative from the destination data source/package/entity/package/subfolder/entity# Package - Relative from the source packageentitysubfolder/entity# Dotted - Relative from the file (UNIX directory traversal)./../entity../subfolder/entity../../subfolder/entity```### GeneralInitialize the data sources*i.e. import datasources and their packages*```sh$ dm init [&lt;path&gt;]# By default, the `PATH` argument is set to the current working directory$ dm init# Optionally specify a path to the directory containing data sources and data$ dm init app/```Reset all data sources*i.e. delete all datasources and packages, before reuploading them*```sh# Reset all datasources and their packages$ dm reset [&lt;path&gt;]# By default, the `path` argument is set to the current working directory$ dm reset# Optionally specify a path to the directory containing data sources and data$ dm reset app/```### DatasourcesImport a datasource```sh# Import a datasource, where &lt;path&gt; is the path to a data source definition (JSON)$ dm ds import &lt;path&gt;$ dm ds import app/data_sources/DemoApplicationDataSource.json```Import all datasources```sh# Import all datasources found in the directory given by 'path'$ dm ds import-all &lt;path&gt;$ dm ds import-all app/data_sources```Reset a datasource*i.e. reset the given data source, deleting all packages and reuploading them*```sh$ dm ds reset &lt;data_source&gt; [&lt;path&gt;]# By default, the `path` argument is set to the current working directory$ dm ds reset DemoApplicationDataSource# Optionally specify a path to the directory containing data sources and data$ dm ds reset DemoApplicationDataSource app/```### Plugin blueprintsImport blueprints from a plugin into the default plugin blueprint path (`system/Plugins/&lt;plugin-name&gt;)```shelldm import-plugin-blueprints ./node_modules/@development-framework/dm-core-plugins```&gt; Note that this is the same as;&gt; `dm entity import ./node_modules/@development-framework/dm-core-plugins/blueprints/ system/Plugins/dm-core-plugins`### PackagesImport a package&gt; Note that importing a package will delete any preexisting package with the same name, if present in DMSS```sh# Import the package &lt;path&gt; to the given data source$ dm pkg import &lt;path&gt; &lt;data_source&gt;# Import the package 'models' from app/data/DemoApplicationDataSource'$ dm pkg import app/data/DemoApplicationDataSource/models DemoApplicationDataSource```Import all packages```sh# Import all packages found in the directory given by &lt;path&gt;$ dm pkg import-all &lt;path&gt; &lt;data_source&gt;# Import all packages in 'app/data/DemoApplicationDataSource'$ dm pkg import-all app/data/DemoApplicationDataSource DemoApplicationDataSource```Exporting packages and single documents```sh# export document(s) by a given &lt;data_source&gt;/&lt;path&gt;$ dm pkg export &lt;data_source&gt;/&lt;path&gt;$ dm pkg export &lt;data_source&gt;/&lt;path&gt; &lt;destination_path&gt;$ dm pkg export &lt;data_source&gt;/&lt;path&gt; &lt;destination_path&gt; --unpack# Export all documents in 'DemoApplicationDataSource/models/CarPackage'$ dm pkg export DemoApplicationDataSource/models/CarPackage```Optional arguments and flags:&lt;destination_path&gt; : specifies where to save the downloaded file(s) on the local diskunpack: whether or not to unpack the zip fileDelete a package```sh# Delete the package from the datasource in DMSS$ dm pkg delete &lt;data_source&gt; &lt;package_name&gt;# Delete the package 'models' from 'DemoApplicationDataSource'$ dm pkg delete DemoApplicationDataSource models```Delete all packages&gt; Note that this will only delete packages which are present in the directory &lt;path&gt;, so any package present in DMSS but absent in the given directory will not be removed.```sh# Delete all packages found in the directory given by &lt;path&gt;$ dm pkg delete-all &lt;data_source&gt; &lt;path&gt;$ dm pkg delete-all DemoApplicationDataSource app/data/DemoApplicationDataSource```### EntitiesUpload a single entity```sh$ dm entity import &lt;local_path&gt; &lt;destination_path&gt;```### Recipe LookupCreate a named Ui-/StorageRecipe Lookup table from a package. Tell DMSS to look through a package,gather all RecipeLinks, and create a named lookup from that. The lookup can be used to associate recipes with an application.```shdm create-lookup myApplicationName path/To/A/Package/With/RecipeLinks```## Development&gt; You need to have DMSS running locally.```sh$ python3 -m venv .venv$ source .venv/bin/activate$ pip3 install -e .$ dm init```### Generating the DMSS API clientThe DMSS API client, found in [`dm_cli/dmss_api/`](./dm_cli/dmss_api/), can be regenerated by running the script [`generate-dmss-api.sh`](./generate-dmss-api.sh). Note that an instance of DMSS must be running locally prior to executing the script.```bash./generate-dmss-api.sh```&gt; NB: Due to incorrect import paths in the generated API client, you must do a search and replace after generating the new client. Replace all occurrences of '`from dmss_api`' with '`from dm_cli.dmss_api`' in all files under `dm_cli/dmss_api/`### Testing1. Install the dependencies: `pip3 install -r requirements.txt`2. Install the dev dependencies: `pip3 install -r dev-requirements.txt`3. Run the tests: `pytest`## FeedbackPlease feel free to leave feedback in issues/PRs.</longdescription>
</pkgmetadata>