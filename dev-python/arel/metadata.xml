<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># arel[![Build Status](https://dev.azure.com/florimondmanca/public/_apis/build/status/florimondmanca.arel?branchName=master)](https://dev.azure.com/florimondmanca/public/_build/latest?definitionId=6&amp;branchName=master)[![Coverage](https://codecov.io/gh/florimondmanca/arel/branch/master/graph/badge.svg)](https://codecov.io/gh/florimondmanca/arel)![Python versions](https://img.shields.io/pypi/pyversions/arel.svg)[![Package version](https://badge.fury.io/py/arel.svg)](https://pypi.org/project/arel)Browser hot reload for Python ASGI web apps.![](https://media.githubusercontent.com/media/florimondmanca/arel/master/docs/demo.gif)## Overview**What is this for?**`arel` can be used to implement development-only hot-reload for non-Python files that are not read from disk on each request. This may include HTML templates, GraphQL schemas, cached rendered Markdown content, etc.**How does it work?**`arel` watches changes over a set of files. When a file changes, `arel` notifies the browser (using WebSocket), and an injected client script triggers a page reload. You can register your own reload hooks for any extra server-side operations, such as reloading cached content or re-initializing other server-side resources.## Installation_This is project in early alpha status. Be sure to pin your dependencies._```bashpip install 'arel==0.1.*'```## Quickstart_For a working example using Starlette, see the [Example](#example) section._Although the exact instructions to set up hot reload with `arel` depend on the specifics of your ASGI framework, there are three general steps to follow:1. Create an `HotReload` instance, passing one or more directories of files to watch, and optionally a list of callbacks to call before a reload is triggered:   ```python   import arel   async def reload_data():       print(&quot;Reloading server data...&quot;)   hotreload = arel.HotReload(       paths=[           arel.Path(&quot;./server/data&quot;, on_reload=[reload_data]),           arel.Path(&quot;./server/static&quot;),       ],   )   ```2. Mount the hot reload endpoint, and register its startup and shutdown event handlers. If using Starlette, this can be done like this:   ```python   from starlette.applications import Starlette   from starlette.routing import WebSocketRoute   app = Starlette(       routes=[WebSocketRoute(&quot;/hot-reload&quot;, hotreload, name=&quot;hot-reload&quot;)],       on_startup=[hotreload.startup],       on_shutdown=[hotreload.shutdown],   )   ```3. Add the JavaScript code to your website HTML. If using [Starlette with Jinja templates](https://www.starlette.io/templates/), you can do this by updating the global environment, then injecting the script into your base template:   ```python   templates.env.globals[&quot;DEBUG&quot;] = os.getenv(&quot;DEBUG&quot;)  # Development flag.   templates.env.globals[&quot;hotreload&quot;] = hotreload   ```   ```jinja   &lt;body&gt;     &lt;!-- Page content... --&gt;     &lt;!-- Hot reload script --&gt;     {% if DEBUG %}       {{ hotreload.script(url_for('hot-reload')) | safe }}     {% endif %}   &lt;/body&gt;   ```## ExampleThe [`example` directory](https://github.com/florimondmanca/arel/tree/master/example) contains an example Markdown-powered website that uses `arel` to refresh the browser when Markdown content or HTML templates change.## LicenseMIT# ChangelogAll notable changes to this project will be documented in this file.The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).## 0.2.0 - 2020-07-08### Added- Add support for watching multiple directories, each with its own reload callbacks. (Pull #15)### Changed- `arel.HotReload(&quot;./directory&quot;, on_reload=[...])` should now be written as `arel.HotReload(paths=[arel.Path(&quot;./directory&quot;, on_reload=[...])])`. (Pull #15)## 0.1.0 - 2020-04-11_Initial release._### Added- Add `HotReload` ASGI application class. (Pull #1)</longdescription>
</pkgmetadata>