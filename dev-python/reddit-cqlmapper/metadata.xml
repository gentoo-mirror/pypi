<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>cqlmapper=========This project is a fork of `cqlengine&lt;https://github.com/datastax/python-driver/tree/master/cassandra/cqlengine&gt;`__with a number of changes to allow it to work in a `baseplate&lt;https://github.com/reddit/baseplate&gt;`__ applicationMajor changes:    - Remove support for polymorphic models    - Remove the query evaluator method of defining query constraints    - Switch from using a global connection object to passing a connection object      to methods that interact with the database    - Batch queries are handled by a Connection-like Batch object that is given      as the `conn` argument to functions rather than using the `Model.batch`      syntax of cqlengineExample usage::    import uuid    from cassandra.cluster import Cluster    from cqlmapper import columns, connection, models    from cqlmapper.batch import Batch    from cqlmapper.connection import Connection as CQLMapperConnection    from cqlmapper.management import sync_table    class MyFirstModel(Model):        id = columns.UUID(primary_key=True, default=uuid.uuid4)        body = colums.Text()    cluster = Cluster()    session = cluster.connect(&quot;example&quot;)    conn = CQLMapperConnection(session)    sync_table(conn, MyFirstModel)    model_1 = MyFirstModel.create(conn, body=&quot;Hello World&quot;)    model_2 = MyFirstModel.create(conn, body=&quot;Hola Mundo&quot;)    # Batch queries can be used as a context manager where the batch query will    # be executed when exiting the context    with Batch(conn) as batch_conn:        MyFirstModel.create(batch_conn, body=&quot;Ciao mondo&quot;)        MyFirstModel.create(batch_conn, body=&quot;Bonjour le monde&quot;)    # Batch queries can also be created standalone in which case execute_batch    # can be called to execute the queries.  Calls to execute will add the    # query to the batch    batch_conn = Batch(conn)    MyFirstModel.create(batch_conn, body=&quot;Hallo Welt&quot;)    MyFirstModel.create(batch_conn, body=&quot;Hei Verden&quot;)    &gt;&gt;&gt; MyFirstModel.objects.count(conn)    4    &gt;&gt;&gt; batch_conn.execute_batch()    &gt;&gt;&gt; MyFirstModel.objects.count(conn)    6    &gt;&gt;&gt; MyFirstModel.get(conn, id=model_1.id).text == model_1.text    True    &gt;&gt;&gt; MyFirstModel.get(conn, id=model_2.id).text == model_1.text    False</longdescription>
</pkgmetadata>