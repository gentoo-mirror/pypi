<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPIversion](https://badge.fury.io/py/hubspot3.svg)](https://badge.fury.io/py/hubspot3)[![Code style:black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)[![DocumentationStatus](https://readthedocs.org/projects/hubspot3/badge/?version=latest)](https://hubspot3.readthedocs.io/en/latest/?badge=latest)[![Python 3.7+supported](https://img.shields.io/badge/python-3.7+-blue.svg)](https://www.python.org/downloads/release/python-360/)A python wrapper around HubSpot's APIs, _for python 3.7+_.Built initially around hapipy, but heavily modified.Check out the [documentationhere](https://hubspot3.readthedocs.io/en/latest/)\! (thanks readthedocs)# Quick start## **Note: I'd recommend that you consider using the [official HubSpot Python API](https://github.com/HubSpot/hubspot-api-python). I no longer work at a company that uses HubSpot, and this library is a few versions behind on many of their APIs. I will be open to small PRs and usability fixes, but there will likely not be any further significant work on this library**## Installation```bash# install hubspot3pip install hubspot3```## Basic Usage```pythonfrom hubspot3 import Hubspot3API_KEY = &quot;your-api-key&quot;client = Hubspot3(api_key=API_KEY)# all of the clients are accessible as attributes of the main Hubspot3 Clientcontact = client.contacts.get_contact_by_email('testingapis@hubspot.com')contact_id = contact['vid']all_companies = client.companies.get_all()# new usage limit functionality - keep track of your API callsclient.usage_limits# &lt;Hubspot3UsageLimits: 28937/1000000 (0.028937%) [reset in 22157s, cached for 299s]&gt;client.usage_limits.calls_remaining# 971063```## Individual Clients```pythonfrom hubspot3.companies import CompaniesClientAPI_KEY = &quot;your-api-key&quot;client = CompaniesClient(api_key=API_KEY)for company in client.get_all():    print(company)```## Passing Params```pythonimport jsonfrom hubspot3.deals import DealsClientdeal_id = &quot;12345&quot;API_KEY = &quot;your_api_key&quot;deals_client = DealsClient(api_key=API_KEY)params = {    &quot;includePropertyVersions&quot;: &quot;true&quot;}  # Note values are camelCase as they appear in the Hubspot Documentation!deal_data = deals_client.get(deal_id, params=params)print(json.dumps(deal_data))```## Command-line interfaceThere is also a command-line tool available. Install the extrarequirement for that tool via:```bashpip install hubspot3[cli]```and you can use it as a command:```bashhubspot3 --help```See the Sphinx documentation for more details and explanations.# Rate LimitingBe aware that this uses the HubSpot API directly, so you are subject toall of the [guidelines that HubSpot has inplace](https://developers.hubspot.com/apps/api_guidelines).at the time of writing, HubSpot has the following limits in place forAPI requests:Free &amp; Starter:- 10 requests per second- 250,000 requests per day.Professional &amp; Enterprise:- 10 requests per second- 500,000 requests per day.This daily limit resets at midnight based on the time zone setting ofthe HubSpot account. There is also an additional addon you can purchasefor more requests.# Retrying API CallsBy default, hubspot3 will attempt to retry all API calls up to 2 timesupon failure.If you'd like to override this behavior, you can add a `number_retries`keyword argument to any Client constructor, or to individual API calls.# Extending the BaseClient - thanks [@Guysoft](https://github.com/guysoft)\!Some of the APIs are not yet complete\! If you'd like to use an API thatisn't yet in this repo, you can extend the BaseClient class\!```pythonimport jsonfrom hubspot3.base import BaseClientPIPELINES_API_VERSION = &quot;1&quot;class PipelineClient(BaseClient):    &quot;&quot;&quot;    Lets you extend to non-existing clients, this example extends pipelines    &quot;&quot;&quot;    def __init__(self, *args, **kwargs):        super(PipelineClient, self).__init__(*args, **kwargs)    def get_pipelines(self, **options):        params = {}        return self._call(&quot;pipelines&quot;, method=&quot;GET&quot;, params=params)    def _get_path(self, subpath):        return f&quot;deals/v{self.options.get('version') or PIPELINES_API_VERSION}/{subpath}&quot;if __name__ == &quot;__main__&quot;:    API_KEY = &quot;your_api_key&quot;    a = PipelineClient(api_key=API_KEY)    print(json.dumps(a.get_pipelines()))```# Advanced oauth2 token storage - thanks [@sangaline](https://github.com/sangaline)\!This is an example of how you can use the `oauth2_token_getter` and `oauth2_token_setter` kwargs on the client to use custom storage (in this case redis) so that multiple clients can share the same access/refresh tokens generated by the oauth2 requests.```pythonimport aioredisfrom hubspot3 import Hubspot3redis_client = await aioredis.create_redis_pool(url, db=db, encoding='utf-8', timeout=10)def oauth2_token_getter(token_type: str, client_id: str) -&gt; str:    loop = asyncio.get_event_loop()    key = f'hubspot-oauth2-tokens:{token_type}:{client_id}'    return loop.run_until_complete(redis_client.get(key))def oauth2_token_setter(token_type: str, client_id: str, token: str) -&gt; None:    loop = asyncio.get_event_loop()    key = f'hubspot-oauth2-tokens:{token_type}:{client_id}'    # Token expiration is six hours, so match that when we store the tokens.    # See: https://developers.hubspot.com/docs/methods/oauth2/refresh-access-token    expire_in_seconds = 6 * 60 * 60    loop.run_until_complete(redis_client.set(key, token, expire=expire_in_seconds))# This client will share oauth2 credentials with other clients configured in the same way.hubspot3_client = Hubspot3(    access_token=access_token,    client_id=client_id,    client_secret=client_secret,    refresh_token=refresh_token,    oauth2_token_getter=oauth2_token_getter,    oauth2_token_setter=oauth2_token_setter,)```# TestingI'm currently working on rewriting many of the tests with[pytest](https://docs.pytest.org/en/latest/) to work against the publicAPI and ensure that we get the correct type of mock data back. Thesetests are currently in a **very** early state - I'll be working soon toget them all built out.```bash# Install required test packagespip install pytest pytest-cov# orpip install -r requirements-dev.txt# run testsmake# ormake test_all```</longdescription>
</pkgmetadata>