<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/nschloe/perfplot&quot;&gt;&lt;img alt=&quot;perfplot&quot; src=&quot;https://nschloe.github.io/perfplot/logo-perfplot.svg&quot; width=&quot;60%&quot;&gt;&lt;/a&gt;&lt;/p&gt;[![PyPi Version](https://img.shields.io/pypi/v/perfplot.svg?style=flat-square)](https://pypi.org/project/perfplot)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/perfplot.svg?style=flat-square)](https://pypi.org/pypi/perfplot/)[![GitHub stars](https://img.shields.io/github/stars/nschloe/perfplot.svg?style=flat-square&amp;logo=github&amp;label=Stars&amp;logoColor=white)](https://github.com/nschloe/perfplot)[![Downloads](https://pepy.tech/badge/perfplot/month)](https://pepy.tech/project/perfplot)&lt;!--[![PyPi downloads](https://img.shields.io/pypi/dm/perfplot.svg?style=flat-square)](https://pypistats.org/packages/perfplot)--&gt;[![Discord](https://img.shields.io/static/v1?logo=discord&amp;logoColor=white&amp;label=chat&amp;message=on%20discord&amp;color=7289da&amp;style=flat-square)](https://discord.gg/hnTJ5MRX2Y)[![gh-actions](https://img.shields.io/github/workflow/status/nschloe/perfplot/ci?style=flat-square)](https://github.com/nschloe/perfplot/actions?query=workflow%3Aci)[![codecov](https://img.shields.io/codecov/c/github/nschloe/perfplot.svg?style=flat-square)](https://codecov.io/gh/nschloe/perfplot)[![LGTM](https://img.shields.io/lgtm/grade/python/github/nschloe/perfplot.svg?style=flat-square)](https://lgtm.com/projects/g/nschloe/perfplot)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)perfplot extends Python's [timeit](https://docs.python.org/3/library/timeit.html) bytesting snippets with input parameters (e.g., the size of an array) and plotting theresults.For example, to compare different NumPy array concatenation methods, the script```pythonimport numpy as npimport perfplotperfplot.show(    setup=lambda n: np.random.rand(n),  # or setup=np.random.rand    kernels=[        lambda a: np.c_[a, a],        lambda a: np.stack([a, a]).T,        lambda a: np.vstack([a, a]).T,        lambda a: np.column_stack([a, a]),        lambda a: np.concatenate([a[:, None], a[:, None]], axis=1),    ],    labels=[&quot;c_&quot;, &quot;stack&quot;, &quot;vstack&quot;, &quot;column_stack&quot;, &quot;concat&quot;],    n_range=[2**k for k in range(25)],    xlabel=&quot;len(a)&quot;,    # More optional arguments with their default values:    # logx=&quot;auto&quot;,  # set to True or False to force scaling    # logy=&quot;auto&quot;,    # equality_check=np.allclose,  # set to None to disable &quot;correctness&quot; assertion    # show_progress=True,    # target_time_per_measurement=1.0,    # max_time=None,  # maximum time per measurement    # time_unit=&quot;s&quot;,  # set to one of (&quot;auto&quot;, &quot;s&quot;, &quot;ms&quot;, &quot;us&quot;, or &quot;ns&quot;) to force plot units    # relative_to=1,  # plot the timings relative to one of the measurements    # flops=lambda n: 3*n,  # FLOPS plots)```produces| ![](https://nschloe.github.io/perfplot/concat.svg) | ![](https://nschloe.github.io/perfplot/relative.svg) || -------------------------------------------------- | ---------------------------------------------------- |Clearly, `stack` and `vstack` are the best options for large arrays.(By default, perfplot asserts the equality of the output of all snippets, too.)If your plot takes a while to generate, you can also use&lt;!--pytest-codeblocks:skip--&gt;```pythonperfplot.live(    # ...)```&lt;img alt=&quot;live&quot; src=&quot;https://nschloe.github.io/perfplot/live.gif&quot; width=&quot;40%&quot;&gt;with the same arguments as above. It will plot the updates live.Benchmarking and plotting can be separated. This allows multiple plots of the same data,for example:&lt;!--pytest-codeblocks:skip--&gt;```pythonout = perfplot.bench(    # same arguments as above (except the plot-related ones, like time_unit or log*))out.show()out.save(&quot;perf.png&quot;, transparent=True, bbox_inches=&quot;tight&quot;)```Other examples:- [Making a flat list out of list of lists in Python](https://stackoverflow.com/a/45323085/353337)- [Most efficient way to map function over numpy array](https://stackoverflow.com/a/46470401/353337)- [numpy: most efficient frequency counts for unique values in an array](https://stackoverflow.com/a/43096495/353337)- [Most efficient way to reverse a numpy array](https://stackoverflow.com/a/44921013/353337)- [How to add an extra column to an numpy array](https://stackoverflow.com/a/40218298/353337)- [Initializing numpy matrix to something other than zero or one](https://stackoverflow.com/a/45006691/353337)### Installationperfplot is [available from the Python PackageIndex](https://pypi.org/project/perfplot/), so simply do```pip install perfplot```to install.### TestingTo run the perfplot unit tests, check out this repository and type```tox```### LicenseThis software is published under the [GPLv3 license](https://www.gnu.org/licenses/gpl-3.0.en.html).</longdescription>
</pkgmetadata>