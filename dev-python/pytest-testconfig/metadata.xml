<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=================pytest-testconfig=================.. image:: https://img.shields.io/pypi/v/pytest-testconfig.svg    :target: https://pypi.org/project/pytest-testconfig    :alt: PyPI version.. image:: https://img.shields.io/pypi/pyversions/pytest-testconfig.svg    :target: https://pypi.org/project/pytest-testconfig    :alt: Python versions.. image:: https://travis-ci.org/wojole/pytest-testconfig.svg?branch=master    :target: https://travis-ci.org/wojole/pytest-testconfig    :alt: See Build Status on Travis CITest configuration plugin for pytest.Based on nose-testconfig by Jesse Noller. Rewritten for pytest by Wojciech Olejarz and Bart≈Çomiej Skrobek.----This `pytest`_ plugin was generated with `Cookiecutter`_ along with `@hackebrot`_'s `cookiecutter-pytest-plugin`_ template.Features--------pytest-testconfig is a plugin to the pytest test framework used for passing test-specific (or test-run specific) configuration datato the tests being executed.Currently configuration files in the following formats should be supported:- YAML (via `PyYAML &lt;http://pypi.python.org/pypi/PyYAML/&gt;`_)- INI (via `ConfigParser &lt;http://docs.python.org/lib/module-ConfigParser.html&gt;`_)- Pure Python (via Exec)- JSON (via `JSON &lt;http://docs.python.org/library/json.html&gt;`_)The plugin is ``meant`` to be flexible, ergo the support of exec'ing arbitrarypython files as configuration files with no checks. The default format isassumed to be ConfigParser ini-style format.If multiple files are provided, the objects are merged. Later settings willoverride earlier ones.The plugin provides a method of overriding certain parameters from the commandline (assuming that the main &quot;config&quot; object is a dict) and can easily haveadditional parsers added to it.A configuration file may not be provided. In this case, the config object is anemtpy dict. Any command line &quot;overriding&quot; paramters will be added to the dict.Requirements------------requires pytest&gt;=3.5.0Installation------------You can install &quot;pytest-testconfig&quot; via `pip`_ from `PyPI`_::    $ python3 -m pip install pytest-testconfigUsage-----Tests can import the &quot;config&quot; singleton from testconfig::    from pytest_testconfig import configBy default, YAML files parse into a nested dictionary, and ConfigParser inifiles are also collapsed into a nested dictionary for foo[bar][baz] styleaccess. Tests can obviously access configuration data by referencing therelevant dictionary keys::    from pytest_testconfig import config    def test_foo():        target_server_ip = config['servers']['webapp_ip']``Warning``: Given this is just a dictionary singleton, tests can easily writeinto the configuration. This means that your tests can write into the configspace and possibly alter it. This also means that threaded access into theconfiguration can be interesting.When using pure python configuration - obviously the &quot;sky is the the limit&quot; -given that the configuration is loaded via an exec, you could potentiallymodify pytest, the plugin, etc. However, if you do not export a config{} dictas part of your python code, you obviously won't be able to import theconfig object from testconfig.When using YAML-style configuration, you get a lot of the power of pure pythonwithout the danger of unprotected exec() - you can obviously use the pyamlpython-specific objects and all of the other YAML creamy goodness.Defining a configuration file-----------------------------Simple ConfigParser style::    [myapp_servers]    main_server = 10.1.1.1    secondary_server = 10.1.1.2So your tests access the config options like this::    from pytest_testconfig import config    def test_foo():        main_server = config['myapp_servers']['main_server']YAML style configuration::    myapp:        servers:            main_server: 10.1.1.1            secondary_server: 10.1.1.2And your tests can access it thus::    from pytest_testconfig import config    def test_foo():        main_server = config['myapp']['servers']['main_server']Python configuration file::    import socket    global config    config = {}    possible_main_servers = ['10.1.1.1', '10.1.1.2']    for srv in possible_main_servers:        try:            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)            s.connect((srv, 80))        except:            continue        s.close()        config['main_server'] = srv        breakAnd lo, the config is thus::    from pytest_testconfig import config    def test_foo():        main_server = config['main_server']If you need to put python code into your configuration, you either need to usethe python-config file faculties, or you need to use the !!python tags withinPyYAML/YAML - raw ini files no longer have any sort of eval magic.Command line options--------------------After it is installed, the plugin adds the following command line flags topytest::    --tc-file=TESTCONFIG  Configuration file to parse and pass to tests                          [PY_TEST_CONFIG_FILE]                          If this is specified multiple times, all files                          will be parsed. In all formats except python,                          previous contents are preserved and the configs                          are merged.    --tc-format=TESTCONFIGFORMAT  Test config file format, default is                                  configparser ini format                                  [PY_TEST_CONFIG_FILE_FORMAT]    --tc=OVERRIDES        Option:Value specific overrides.    --tc-exact            Optional: Do not explode periods in override keys to                          individual keys within the config dict, instead treat                          them as config[my.toplevel.key] ala sqlalchemy.url in                          pylons.Contributing------------Contributions are very welcome. Tests can be run with `tox`_, please ensurethe coverage at least stays the same before you submit a pull request.License-------Distributed under the terms of the `Apache Software License 2.0`_ license, &quot;pytest-testconfig&quot; is free and open source softwareIssues------If you encounter any problems, please `file an issue`_ along with a detailed description... _`Cookiecutter`: https://github.com/audreyr/cookiecutter.. _`@hackebrot`: https://github.com/hackebrot.. _`MIT`: http://opensource.org/licenses/MIT.. _`BSD-3`: http://opensource.org/licenses/BSD-3-Clause.. _`GNU GPL v3.0`: http://www.gnu.org/licenses/gpl-3.0.txt.. _`Apache Software License 2.0`: http://www.apache.org/licenses/LICENSE-2.0.. _`cookiecutter-pytest-plugin`: https://github.com/pytest-dev/cookiecutter-pytest-plugin.. _`file an issue`: https://github.com/wojole/pytest-testconfig/issues.. _`pytest`: https://github.com/pytest-dev/pytest.. _`tox`: https://tox.readthedocs.io/en/latest/.. _`pip`: https://pypi.org/project/pip/.. _`PyPI`: https://pypi.org/project</longdescription>
</pkgmetadata>