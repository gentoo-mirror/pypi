<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>drgn====.. image:: https://img.shields.io/pypi/v/drgn    :target: https://pypi.org/project/drgn/    :alt: PyPI.. image:: https://github.com/osandov/drgn/workflows/CI/badge.svg    :target: https://github.com/osandov/drgn/actions    :alt: CI Status.. image:: https://readthedocs.org/projects/drgn/badge/?version=latest    :target: https://drgn.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/psf/black.. start-introductiondrgn (pronounced &quot;dragon&quot;) is a debugger with an emphasis on programmability.drgn exposes the types and variables in a program for easy, expressivescripting in Python. For example, you can debug the Linux kernel:.. code-block:: pycon    &gt;&gt;&gt; from drgn.helpers.linux import list_for_each_entry    &gt;&gt;&gt; for mod in list_for_each_entry('struct module',    ...                                prog['modules'].address_of_(),    ...                                'list'):    ...    if mod.refcnt.counter &gt; 10:    ...        print(mod.name)    ...    (char [56])&quot;snd&quot;    (char [56])&quot;evdev&quot;    (char [56])&quot;i915&quot;Although other debuggers like `GDB &lt;https://www.gnu.org/software/gdb/&gt;`_ havescripting support, drgn aims to make scripting as natural as possible so thatdebugging feels like coding. This makes it well-suited for introspecting thecomplex, inter-connected state in large programs.Additionally, drgn is designed as a library that can be used to build debuggingand introspection tools; see the official `tools&lt;https://github.com/osandov/drgn/tree/main/tools&gt;`_.drgn was developed at `Meta &lt;https://opensource.fb.com/&gt;`_ for debugging theLinux kernel (as an alternative to the `crash&lt;https://crash-utility.github.io/&gt;`_ utility), but it can also debug userspaceprograms written in C. C++ support is in progress... end-introductionDocumentation can be found at `drgn.readthedocs.io&lt;https://drgn.readthedocs.io&gt;`_... start-installationInstallation------------Package Manager^^^^^^^^^^^^^^^drgn can be installed using the package manager on some Linux distributions... image:: https://repology.org/badge/vertical-allrepos/drgn.svg    :target: https://repology.org/project/drgn/versions    :alt: Packaging Status* Fedora &gt;= 32  .. code-block:: console      $ sudo dnf install drgn* RHEL/CentOS &gt;= 8  `Enable EPEL &lt;https://docs.fedoraproject.org/en-US/epel/#_quickstart&gt;`_. Then:  .. code-block:: console      $ sudo dnf install drgn* Arch Linux  Install the `drgn &lt;https://aur.archlinux.org/packages/drgn/&gt;`_ package from  the `AUR &lt;https://wiki.archlinux.org/title/Arch_User_Repository&gt;`_.* Debian &gt;= 12 (Bookworm)  .. code-block:: console    $ sudo apt install python3-drgn* openSUSE  .. code-block:: console      $ sudo zypper install python3-drgn* Ubuntu  Enable the `michel-slm/kernel-utils PPA &lt;https://launchpad.net/~michel-slm/+archive/ubuntu/kernel-utils&gt;`_.  Then:  .. code-block:: console      $ sudo apt install python3-drgnpip^^^If your Linux distribution doesn't package the latest release of drgn, you caninstall it with `pip &lt;https://pip.pypa.io/&gt;`_.First, `install pip&lt;https://packaging.python.org/guides/installing-using-linux-tools/#installing-pip-setuptools-wheel-with-linux-package-managers&gt;`_.Then, run:.. code-block:: console    $ sudo pip3 install drgnThis will install a binary wheel by default. If you get a build error, then pipwasn't able to use the binary wheel. Install the dependencies listed `below&lt;#from-source&gt;`_ and try again.Note that RHEL/CentOS 6, Debian Stretch, Ubuntu Trusty, and Ubuntu Xenial (andolder) ship Python versions which are too old. Python 3.6 or newer must beinstalled.From Source^^^^^^^^^^^To get the development version of drgn, you will need to build it from source.First, install dependencies:* Fedora  .. code-block:: console      $ sudo dnf install autoconf automake elfutils-devel gcc git libkdumpfile-devel libtool make pkgconf python3 python3-devel python3-pip python3-setuptools* RHEL/CentOS  .. code-block:: console      $ sudo dnf install autoconf automake elfutils-devel gcc git libtool make pkgconf python3 python3-devel python3-pip python3-setuptools  Optionally, install ``libkdumpfile-devel`` from EPEL on RHEL/CentOS &gt;= 8 or  install `libkdumpfile &lt;https://github.com/ptesarik/libkdumpfile&gt;`_ from  source if you want support for the makedumpfile format.  Replace ``dnf`` with ``yum`` for RHEL/CentOS &lt; 8.* Debian/Ubuntu  .. code-block:: console      $ sudo apt-get install autoconf automake gcc git liblzma-dev libelf-dev libdw-dev libtool make pkgconf python3 python3-dev python3-pip python3-setuptools zlib1g-dev  Optionally, install libkdumpfile from source if you want support for the  makedumpfile format.* Arch Linux  .. code-block:: console      $ sudo pacman -S --needed autoconf automake gcc git libelf libtool make pkgconf python python-pip python-setuptools  Optionally, install `libkdumpfile  &lt;https://aur.archlinux.org/packages/libkdumpfile/&gt;`__ from the AUR or from  source if you want support for the makedumpfile format.* openSUSE  .. code-block:: console      $ sudo zypper install autoconf automake gcc git libdw-devel libelf-devel libkdumpfile-devel libtool make pkgconf python3 python3-devel python3-pip python3-setuptoolsThen, run:.. code-block:: console    $ git clone https://github.com/osandov/drgn.git    $ cd drgn    $ python3 setup.py build    $ sudo python3 setup.py install.. end-installationSee the `installation documentation&lt;https://drgn.readthedocs.io/en/latest/installation.html&gt;`_ for more options.Quick Start-----------.. start-quick-startdrgn debugs the running kernel by default; run ``sudo drgn``. To debug arunning program, run ``sudo drgn -p $PID``. To debug a core dump (either akernel vmcore or a userspace core dump), run ``drgn -c $PATH``. Make sure to`install debugging symbols&lt;https://drgn.readthedocs.io/en/latest/getting_debugging_symbols.html&gt;`_ forwhatever you are debugging.Then, you can access variables in the program with ``prog['name']`` and accessstructure members with ``.``:.. code-block:: pycon    $ sudo drgn    &gt;&gt;&gt; prog['init_task'].comm    (char [16])&quot;swapper/0&quot;You can use various predefined helpers:.. code-block:: pycon    &gt;&gt;&gt; len(list(bpf_prog_for_each(prog)))    11    &gt;&gt;&gt; task = find_task(prog, 115)    &gt;&gt;&gt; cmdline(task)    [b'findmnt', b'-p']You can get stack traces with ``prog.stack_trace()`` and access parameters orlocal variables with ``stack_trace['name']``:.. code-block:: pycon    &gt;&gt;&gt; trace = prog.stack_trace(task)    &gt;&gt;&gt; trace[5]    #5 at 0xffffffff8a5a32d0 (do_sys_poll+0x400/0x578) in do_poll at ./fs/select.c:961:8 (inlined)    &gt;&gt;&gt; poll_list = trace[5]['list']    &gt;&gt;&gt; file = fget(task, poll_list.entries[0].fd)    &gt;&gt;&gt; d_path(file.f_path.address_of_())    b'/proc/115/mountinfo'.. end-quick-startSee the `user guide &lt;https://drgn.readthedocs.io/en/latest/user_guide.html&gt;`_for more details and features.License-------.. start-licenseCopyright (c) Meta Platforms, Inc. and affiliates.drgn is licensed under the `LGPLv2.1&lt;https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html&gt;`_ or later... end-license</longdescription>
</pkgmetadata>