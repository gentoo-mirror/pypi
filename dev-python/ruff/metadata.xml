<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- Begin section: Overview --&gt;# Ruff[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json)](https://github.com/charliermarsh/ruff)[![image](https://img.shields.io/pypi/v/ruff.svg)](https://pypi.python.org/pypi/ruff)[![image](https://img.shields.io/pypi/l/ruff.svg)](https://pypi.python.org/pypi/ruff)[![image](https://img.shields.io/pypi/pyversions/ruff.svg)](https://pypi.python.org/pypi/ruff)[![Actions status](https://github.com/charliermarsh/ruff/workflows/CI/badge.svg)](https://github.com/charliermarsh/ruff/actions)[**Discord**](https://discord.gg/c9MhzV8aU5) | [**Docs**](https://beta.ruff.rs/docs/) | [**Playground**](https://play.ruff.rs/)An extremely fast Python linter, written in Rust.&lt;p align=&quot;center&quot;&gt;  &lt;img alt=&quot;Shows a bar chart with benchmark results.&quot; src=&quot;https://user-images.githubusercontent.com/1309177/212613257-5f4bca12-6d6b-4c79-9bac-51a4c6d08928.svg&quot;&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;i&gt;Linting the CPython codebase from scratch.&lt;/i&gt;&lt;/p&gt;- ‚ö°Ô∏è 10-100x faster than existing linters- üêç Installable via `pip`- üõ†Ô∏è `pyproject.toml` support- ü§ù Python 3.11 compatibility- üì¶ Built-in caching, to avoid re-analyzing unchanged files- üîß Autofix support, for automatic error correction (e.g., automatically remove unused imports)- üìè Over [500 built-in rules](https://beta.ruff.rs/docs/rules/)- ‚öñÔ∏è [Near-parity](https://beta.ruff.rs/docs/faq/#how-does-ruff-compare-to-flake8) with the  built-in Flake8 rule set- üîå Native re-implementations of dozens of Flake8 plugins, like flake8-bugbear- ‚å®Ô∏è First-party editor integrations for [VS Code](https://github.com/astral-sh/ruff-vscode) and [more](https://github.com/astral-sh/ruff-lsp)- üåé Monorepo-friendly, with [hierarchical and cascading configuration](https://beta.ruff.rs/docs/configuration/#pyprojecttoml-discovery)Ruff aims to be orders of magnitude faster than alternative tools while integrating morefunctionality behind a single, common interface.Ruff can be used to replace [Flake8](https://pypi.org/project/flake8/) (plus dozens of plugins),[isort](https://pypi.org/project/isort/), [pydocstyle](https://pypi.org/project/pydocstyle/),[yesqa](https://github.com/asottile/yesqa), [eradicate](https://pypi.org/project/eradicate/),[pyupgrade](https://pypi.org/project/pyupgrade/), and [autoflake](https://pypi.org/project/autoflake/),all while executing tens or hundreds of times faster than any individual tool.Ruff is extremely actively developed and used in major open-source projects like:- [Apache Airflow](https://github.com/apache/airflow)- [FastAPI](https://github.com/tiangolo/fastapi)- [Hugging Face](https://github.com/huggingface/transformers)- [Pandas](https://github.com/pandas-dev/pandas)- [SciPy](https://github.com/scipy/scipy)...and many more.Ruff is backed by [Astral](https://astral.sh). Read the [launch post](https://astral.sh/blog/announcing-astral-the-company-behind-ruff),or the original [project announcement](https://notes.crmarsh.com/python-tooling-could-be-much-much-faster).## Testimonials[**Sebasti√°n Ram√≠rez**](https://twitter.com/tiangolo/status/1591912354882764802), creatorof [FastAPI](https://github.com/tiangolo/fastapi):&gt; Ruff is so fast that sometimes I add an intentional bug in the code just to confirm it's actually&gt; running and checking the code.[**Nick Schrock**](https://twitter.com/schrockn/status/1612615862904827904), founder of [Elementl](https://www.elementl.com/),co-creator of [GraphQL](https://graphql.org/):&gt; Why is Ruff a gamechanger? Primarily because it is nearly 1000x faster. Literally. Not a typo. On&gt; our largest module (dagster itself, 250k LOC) pylint takes about 2.5 minutes, parallelized across 4&gt; cores on my M1. Running ruff against our _entire_ codebase takes .4 seconds.[**Bryan Van de Ven**](https://github.com/bokeh/bokeh/pull/12605), co-creatorof [Bokeh](https://github.com/bokeh/bokeh/), original authorof [Conda](https://docs.conda.io/en/latest/):&gt; Ruff is ~150-200x faster than flake8 on my machine, scanning the whole repo takes ~0.2s instead of&gt; ~20s. This is an enormous quality of life improvement for local dev. It's fast enough that I added&gt; it as an actual commit hook, which is terrific.[**Timothy Crosley**](https://twitter.com/timothycrosley/status/1606420868514877440),creator of [isort](https://github.com/PyCQA/isort):&gt; Just switched my first project to Ruff. Only one downside so far: it's so fast I couldn't believe&gt; it was working till I intentionally introduced some errors.[**Tim Abbott**](https://github.com/charliermarsh/ruff/issues/465#issuecomment-1317400028), leaddeveloper of [Zulip](https://github.com/zulip/zulip):&gt; This is just ridiculously fast... `ruff` is amazing.&lt;!-- End section: Overview --&gt;## Table of ContentsFor more, see the [documentation](https://beta.ruff.rs/docs/).1. [Getting Started](#getting-started)1. [Configuration](#configuration)1. [Rules](#rules)1. [Contributing](#contributing)1. [Support](#support)1. [Acknowledgements](#acknowledgements)1. [Who's Using Ruff?](#whos-using-ruff)1. [License](#license)## Getting StartedFor more, see the [documentation](https://beta.ruff.rs/docs/).### InstallationRuff is available as [`ruff`](https://pypi.org/project/ruff/) on PyPI:```shellpip install ruff```You can also install Ruff via [Homebrew](https://formulae.brew.sh/formula/ruff), [Conda](https://anaconda.org/conda-forge/ruff),and with [a variety of other package managers](https://beta.ruff.rs/docs/installation/).### UsageTo run Ruff, try any of the following:```shellruff check .                        # Lint all files in the current directory (and any subdirectories)ruff check path/to/code/            # Lint all files in `/path/to/code` (and any subdirectories)ruff check path/to/code/*.py        # Lint all `.py` files in `/path/to/code`ruff check path/to/code/to/file.py  # Lint `file.py````Ruff can also be used as a [pre-commit](https://pre-commit.com) hook:```yaml- repo: https://github.com/astral-sh/ruff-pre-commit  # Ruff version.  rev: v0.0.272  hooks:    - id: ruff```Ruff can also be used as a [VS Code extension](https://github.com/astral-sh/ruff-vscode) oralongside any other editor through the [Ruff LSP](https://github.com/astral-sh/ruff-lsp).Ruff can also be used as a [GitHub Action](https://github.com/features/actions) via[`ruff-action`](https://github.com/chartboost/ruff-action):```yamlname: Ruffon: [ push, pull_request ]jobs:  ruff:    runs-on: ubuntu-latest    steps:      - uses: actions/checkout@v3      - uses: chartboost/ruff-action@v1```### ConfigurationRuff can be configured through a `pyproject.toml`, `ruff.toml`, or `.ruff.toml` file (see:[_Configuration_](https://beta.ruff.rs/docs/configuration/), or [_Settings_](https://beta.ruff.rs/docs/settings/)for a complete list of all configuration options).If left unspecified, the default configuration is equivalent to:```toml[tool.ruff]# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.select = [&quot;E&quot;, &quot;F&quot;]ignore = []# Allow autofix for all enabled rules (when `--fix`) is provided.fixable = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;I&quot;, &quot;N&quot;, &quot;Q&quot;, &quot;S&quot;, &quot;T&quot;, &quot;W&quot;, &quot;ANN&quot;, &quot;ARG&quot;, &quot;BLE&quot;, &quot;COM&quot;, &quot;DJ&quot;, &quot;DTZ&quot;, &quot;EM&quot;, &quot;ERA&quot;, &quot;EXE&quot;, &quot;FBT&quot;, &quot;ICN&quot;, &quot;INP&quot;, &quot;ISC&quot;, &quot;NPY&quot;, &quot;PD&quot;, &quot;PGH&quot;, &quot;PIE&quot;, &quot;PL&quot;, &quot;PT&quot;, &quot;PTH&quot;, &quot;PYI&quot;, &quot;RET&quot;, &quot;RSE&quot;, &quot;RUF&quot;, &quot;SIM&quot;, &quot;SLF&quot;, &quot;TCH&quot;, &quot;TID&quot;, &quot;TRY&quot;, &quot;UP&quot;, &quot;YTT&quot;]unfixable = []# Exclude a variety of commonly ignored directories.exclude = [    &quot;.bzr&quot;,    &quot;.direnv&quot;,    &quot;.eggs&quot;,    &quot;.git&quot;,    &quot;.git-rewrite&quot;,    &quot;.hg&quot;,    &quot;.mypy_cache&quot;,    &quot;.nox&quot;,    &quot;.pants.d&quot;,    &quot;.pytype&quot;,    &quot;.ruff_cache&quot;,    &quot;.svn&quot;,    &quot;.tox&quot;,    &quot;.venv&quot;,    &quot;__pypackages__&quot;,    &quot;_build&quot;,    &quot;buck-out&quot;,    &quot;build&quot;,    &quot;dist&quot;,    &quot;node_modules&quot;,    &quot;venv&quot;,]# Same as Black.line-length = 88# Allow unused variables when underscore-prefixed.dummy-variable-rgx = &quot;^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$&quot;# Assume Python 3.10.target-version = &quot;py310&quot;[tool.ruff.mccabe]# Unlike Flake8, default to a complexity level of 10.max-complexity = 10```Some configuration options can be provided via the command-line, such as those related torule enablement and disablement, file discovery, logging level, and more:```shellruff check path/to/code/ --select F401 --select F403 --quiet```See `ruff help` for more on Ruff's top-level commands, or `ruff help check` for more on thelinting command.## Rules&lt;!-- Begin section: Rules --&gt;**Ruff supports over 500 lint rules**, many of which are inspired by popular tools like Flake8,isort, pyupgrade, and others. Regardless of the rule's origin, Ruff re-implements every rule inRust as a first-party feature.By default, Ruff enables Flake8's `E` and `F` rules. Ruff supports all rules from the `F` category,and a [subset](https://beta.ruff.rs/docs/rules/#error-e) of the `E` category, omitting thosestylistic rules made obsolete by the use of an autoformatter, like[Black](https://github.com/psf/black).If you're just getting started with Ruff, **the default rule set is a great place to start**: itcatches a wide variety of common errors (like unused imports) with zero configuration.&lt;!-- End section: Rules --&gt;Beyond the defaults, Ruff re-implements some of the most popular Flake8 plugins and related codequality tools, including:- [autoflake](https://pypi.org/project/autoflake/)- [eradicate](https://pypi.org/project/eradicate/)- [flake8-2020](https://pypi.org/project/flake8-2020/)- [flake8-annotations](https://pypi.org/project/flake8-annotations/)- [flake8-async](https://pypi.org/project/flake8-async)- [flake8-bandit](https://pypi.org/project/flake8-bandit/) ([#1646](https://github.com/charliermarsh/ruff/issues/1646))- [flake8-blind-except](https://pypi.org/project/flake8-blind-except/)- [flake8-boolean-trap](https://pypi.org/project/flake8-boolean-trap/)- [flake8-bugbear](https://pypi.org/project/flake8-bugbear/)- [flake8-builtins](https://pypi.org/project/flake8-builtins/)- [flake8-commas](https://pypi.org/project/flake8-commas/)- [flake8-comprehensions](https://pypi.org/project/flake8-comprehensions/)- [flake8-datetimez](https://pypi.org/project/flake8-datetimez/)- [flake8-debugger](https://pypi.org/project/flake8-debugger/)- [flake8-django](https://pypi.org/project/flake8-django/)- [flake8-docstrings](https://pypi.org/project/flake8-docstrings/)- [flake8-eradicate](https://pypi.org/project/flake8-eradicate/)- [flake8-errmsg](https://pypi.org/project/flake8-errmsg/)- [flake8-executable](https://pypi.org/project/flake8-executable/)- [flake8-future-annotations](https://pypi.org/project/flake8-future-annotations/)- [flake8-gettext](https://pypi.org/project/flake8-gettext/)- [flake8-implicit-str-concat](https://pypi.org/project/flake8-implicit-str-concat/)- [flake8-import-conventions](https://github.com/joaopalmeiro/flake8-import-conventions)- [flake8-logging-format](https://pypi.org/project/flake8-logging-format/)- [flake8-no-pep420](https://pypi.org/project/flake8-no-pep420)- [flake8-pie](https://pypi.org/project/flake8-pie/)- [flake8-print](https://pypi.org/project/flake8-print/)- [flake8-pyi](https://pypi.org/project/flake8-pyi/)- [flake8-pytest-style](https://pypi.org/project/flake8-pytest-style/)- [flake8-quotes](https://pypi.org/project/flake8-quotes/)- [flake8-raise](https://pypi.org/project/flake8-raise/)- [flake8-return](https://pypi.org/project/flake8-return/)- [flake8-self](https://pypi.org/project/flake8-self/)- [flake8-simplify](https://pypi.org/project/flake8-simplify/)- [flake8-super](https://pypi.org/project/flake8-super/)- [flake8-tidy-imports](https://pypi.org/project/flake8-tidy-imports/)- [flake8-todos](https://pypi.org/project/flake8-todos/)- [flake8-type-checking](https://pypi.org/project/flake8-type-checking/)- [flake8-use-pathlib](https://pypi.org/project/flake8-use-pathlib/)- [flynt](https://pypi.org/project/flynt/) ([#2102](https://github.com/charliermarsh/ruff/issues/2102))- [isort](https://pypi.org/project/isort/)- [mccabe](https://pypi.org/project/mccabe/)- [pandas-vet](https://pypi.org/project/pandas-vet/)- [pep8-naming](https://pypi.org/project/pep8-naming/)- [pydocstyle](https://pypi.org/project/pydocstyle/)- [pygrep-hooks](https://github.com/pre-commit/pygrep-hooks)- [pylint-airflow](https://pypi.org/project/pylint-airflow/)- [pyupgrade](https://pypi.org/project/pyupgrade/)- [tryceratops](https://pypi.org/project/tryceratops/)- [yesqa](https://pypi.org/project/yesqa/)For a complete enumeration of the supported rules, see [_Rules_](https://beta.ruff.rs/docs/rules/).## ContributingContributions are welcome and highly appreciated. To get started, check out the[**contributing guidelines**](https://beta.ruff.rs/docs/contributing/).You can also join us on [**Discord**](https://discord.gg/c9MhzV8aU5).## SupportHaving trouble? Check out the existing issues on [**GitHub**](https://github.com/charliermarsh/ruff/issues),or feel free to [**open a new one**](https://github.com/charliermarsh/ruff/issues/new).You can also ask for help on [**Discord**](https://discord.gg/c9MhzV8aU5).## AcknowledgementsRuff's linter draws on both the APIs and implementation details of many othertools in the Python ecosystem, especially [Flake8](https://github.com/PyCQA/flake8), [Pyflakes](https://github.com/PyCQA/pyflakes),[pycodestyle](https://github.com/PyCQA/pycodestyle), [pydocstyle](https://github.com/PyCQA/pydocstyle),[pyupgrade](https://github.com/asottile/pyupgrade), and [isort](https://github.com/PyCQA/isort).In some cases, Ruff includes a &quot;direct&quot; Rust port of the corresponding tool.We're grateful to the maintainers of these tools for their work, and for allthe value they've provided to the Python community.Ruff's autoformatter is built on a fork of Rome's [`rome_formatter`](https://github.com/rome/tools/tree/main/crates/rome_formatter),and again draws on both the APIs and implementation details of [Rome](https://github.com/rome/tools),[Prettier](https://github.com/prettier/prettier), and [Black](https://github.com/psf/black).Ruff is also influenced by a number of tools outside the Python ecosystem, like[Clippy](https://github.com/rust-lang/rust-clippy) and [ESLint](https://github.com/eslint/eslint).Ruff is the beneficiary of a large number of [contributors](https://github.com/charliermarsh/ruff/graphs/contributors).Ruff is released under the MIT license.## Who's Using Ruff?Ruff is used by a number of major open-source projects and companies, including:- Amazon ([AWS SAM](https://github.com/aws/serverless-application-model))- [Apache Airflow](https://github.com/apache/airflow)- AstraZeneca ([Magnus](https://github.com/AstraZeneca/magnus-core))- Benchling ([Refac](https://github.com/benchling/refac))- [Babel](https://github.com/python-babel/babel)- [Bokeh](https://github.com/bokeh/bokeh)- [Cryptography (PyCA)](https://github.com/pyca/cryptography)- [DVC](https://github.com/iterative/dvc)- [Dagger](https://github.com/dagger/dagger)- [Dagster](https://github.com/dagster-io/dagster)- [FastAPI](https://github.com/tiangolo/fastapi)- [Gradio](https://github.com/gradio-app/gradio)- [Great Expectations](https://github.com/great-expectations/great_expectations)- Hugging Face ([Transformers](https://github.com/huggingface/transformers),  [Datasets](https://github.com/huggingface/datasets),  [Diffusers](https://github.com/huggingface/diffusers))- [Hatch](https://github.com/pypa/hatch)- [Home Assistant](https://github.com/home-assistant/core)- [Ibis](https://github.com/ibis-project/ibis)- [Jupyter](https://github.com/jupyter-server/jupyter_server)- [LangChain](https://github.com/hwchase17/langchain)- [LlamaIndex](https://github.com/jerryjliu/llama_index)- Matrix ([Synapse](https://github.com/matrix-org/synapse))- Meltano ([Meltano CLI](https://github.com/meltano/meltano), [Singer SDK](https://github.com/meltano/sdk))- Modern Treasury ([Python SDK](https://github.com/Modern-Treasury/modern-treasury-python-sdk))- Mozilla ([Firefox](https://github.com/mozilla/gecko-dev))- [MegaLinter](https://github.com/oxsecurity/megalinter)- Microsoft ([Semantic Kernel](https://github.com/microsoft/semantic-kernel),  [ONNX Runtime](https://github.com/microsoft/onnxruntime),  [LightGBM](https://github.com/microsoft/LightGBM))- Netflix ([Dispatch](https://github.com/Netflix/dispatch))- [Neon](https://github.com/neondatabase/neon)- [ONNX](https://github.com/onnx/onnx)- [OpenBB](https://github.com/OpenBB-finance/OpenBBTerminal)- [PDM](https://github.com/pdm-project/pdm)- [PaddlePaddle](https://github.com/PaddlePaddle/Paddle)- [Pandas](https://github.com/pandas-dev/pandas)- [Poetry](https://github.com/python-poetry/poetry)- [Polars](https://github.com/pola-rs/polars)- [PostHog](https://github.com/PostHog/posthog)- Prefect ([Python SDK](https://github.com/PrefectHQ/prefect), [Marvin](https://github.com/PrefectHQ/marvin))- [PyInstaller](https://github.com/pyinstaller/pyinstaller)- [PyTorch](https://github.com/pytorch/pytorch)- [Pydantic](https://github.com/pydantic/pydantic)- [Pylint](https://github.com/PyCQA/pylint)- [Pynecone](https://github.com/pynecone-io/pynecone)- [Robyn](https://github.com/sansyrox/robyn)- Scale AI ([Launch SDK](https://github.com/scaleapi/launch-python-client))- Snowflake ([SnowCLI](https://github.com/Snowflake-Labs/snowcli))- [Saleor](https://github.com/saleor/saleor)- [SciPy](https://github.com/scipy/scipy)- [Sphinx](https://github.com/sphinx-doc/sphinx)- [Stable Baselines3](https://github.com/DLR-RM/stable-baselines3)- [Litestar](https://litestar.dev/)- [The Algorithms](https://github.com/TheAlgorithms/Python)- [Vega-Altair](https://github.com/altair-viz/altair)- WordPress ([Openverse](https://github.com/WordPress/openverse))- [ZenML](https://github.com/zenml-io/zenml)- [Zulip](https://github.com/zulip/zulip)- [build (PyPA)](https://github.com/pypa/build)- [cibuildwheel (PyPA)](https://github.com/pypa/cibuildwheel)- [delta-rs](https://github.com/delta-io/delta-rs)- [featuretools](https://github.com/alteryx/featuretools)- [meson-python](https://github.com/mesonbuild/meson-python)- [nox](https://github.com/wntrblm/nox)### Show Your SupportIf you're using Ruff, consider adding the Ruff badge to project's `README.md`:```md[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json)](https://github.com/charliermarsh/ruff)```...or `README.rst`:```rst.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json    :target: https://github.com/charliermarsh/ruff    :alt: Ruff```...or, as HTML:```html&lt;a href=&quot;https://github.com/charliermarsh/ruff&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json&quot; alt=&quot;Ruff&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;```## LicenseMIT&lt;div align=&quot;center&quot;&gt;  &lt;a target=&quot;_blank&quot; href=&quot;https://astral.sh&quot; style=&quot;background:none&quot;&gt;    &lt;img src=&quot;https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/svg/Astral.svg&quot;&gt;  &lt;/a&gt;&lt;/div&gt;</longdescription>
</pkgmetadata>