<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Hyperparameter===========================&lt;h3 align=&quot;center&quot;&gt;  &lt;p style=&quot;text-align: center;&quot;&gt;  &lt;a href=&quot;README.md&quot; target=&quot;_blank&quot;&gt;ENGLISH&lt;/a&gt; | &lt;a href=&quot;README.zh.md&quot;&gt;中文文档&lt;/a&gt;  &lt;/p&gt;&lt;/h3&gt;&lt;p align=&quot;center&quot;&gt;**Hyperparameter, Make configurable AI applications.Build for Python hackers.**&lt;/p&gt;Quick Start-----------`Hyperparameter` uses `auto _ param` decorator to convert keywords arguments into configurable parameters:```pythonfrom hyperparameter import auto_param@auto_param(&quot;foo&quot;)def foo(x, y=1, z=&quot;a&quot;):    return f&quot;x={x}, y={y}, z={z}&quot;```The parameters can be controlled with `param_scope````pythonfrom hyperparameter import param_scopefoo(1) # x=1, y=1, z='a'with param_scope(**{&quot;foo.y&quot;:2}):    foo(1) # x=1, y=2, z='a'```Advanced Usage--------------### Read/Write Parameters```pythonfrom hyperparameter import param_scope# create param_scopewith param_scope():    passwith param_scope(&quot;foo.y=1&quot;, &quot;foo.z=b&quot;):    passwith param_scope(**{&quot;foo.y&quot;:1, &quot;foo.z&quot;:2}):    pass# read param with default valuewith param_scope(**{&quot;foo.y&quot;:2}) as ps:    y = ps.foo.y(1)      y = ps.foo.y | 1    y = param_scope.foo.y(1)    y = param_scope.foo.y | 1    foo(1) # x=1, y=2, z='a'# wite values to param_scopewith param_scope(**{&quot;foo.y&quot;:2}) as ps:    ps.foo.y = 2    param_scope.foo.y = 2```### Nested Scope`Hyperparameter` support nested `param_scope`:``` pythonfrom hyperparameter import param_scope# no param_scope, use the default value defined in foofoo(1) # x=1, y=1, z='a'# start a new param_scope# and set the default value of `foo.y` to `2`with param_scope(**{&quot;foo.y&quot;:2}) as ps:    # found one param_scope `ps`,     # and receive default value of `foo.y` from `ps`    foo(1) # x=1, y=2, z='a'    # start another param_scope    # and set the default value of `foo.y` to `3`    with param_scope(**{&quot;foo.z&quot;: &quot;b&quot;}) as ps2:        # found nested param_scope `ps2`,         # and receive default values of `foo.z` from `ps2`        foo(1) # x=1, y=2, z='b'    # `ps2` ends here, and `foo.y` is restored to `2`    foo(1) # x=1, y=2, z='a'# `ps` ends here, and `foo.y` is restored to `1`foo(1) # x=1, y=1, z='a'```### CMD Line ArgumentsAn example CLI app: ```pythonfrom hyperparameter import param_scope, auto_param@auto_paramdef main(a=0, b=1): # `inline default values`    print(a, b)if __name__ == &quot;__main__&quot;:    import argparse    parser = argparse.ArgumentParser()    parser.add_argument(&quot;-D&quot;, &quot;--define&quot;, nargs=&quot;*&quot;, default=[], action=&quot;extend&quot;)    args = parser.parse_args()    with param_scope(*args.define):        main()```Examples--------### [parameter tunning for researchers](examples/sparse_lr/README.md)This example shows how to use hyperparameter in your research projects, and make your experiments reproducible.### [experiment tracing for data scientists](examples/mnist/README.md)This example shows experiment management with hyperparameter, and tracing the results with mlflow.tracing.</longdescription>
</pkgmetadata>