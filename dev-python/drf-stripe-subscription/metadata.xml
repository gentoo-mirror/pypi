<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># drf-stripe-subscription[![CI tests](https://github.com/oscarychen/drf-stripe-subscription/actions/workflows/test.yml/badge.svg)](https://github.com/oscarychen/drf-stripe-subscription/actions/workflows/test.yml)[![Package Downloads](https://img.shields.io/pypi/dm/drf-stripe-subscription)](https://pypi.org/project/drf-stripe-subscription/)An out-of-box Django REST framework solution for payment and subscription management using Stripe. The goal of thispackage is to utilize Stripe provided UI and features as much as possible to manage subscription product models. Thispackage helps you make use of Stripe's hosted UI for customer checkout, billing management, as well as for admin tomanage product, pricing, and customer subscriptions.- Django data models representing Stripe data objects- Supports Stripe Webhook for managing changes with your products, prices, and customer subscriptions- Django management commands for synchronizing data with Stripe- Django REST API endpoints supporting Stripe Checkout Session and Customer Portal## Installation &amp; Setup```commandlinepip install drf-stripe-subscription```Include the following drf_stripe settings in Django project settings.py:```pythonDRF_STRIPE = {    &quot;STRIPE_API_SECRET&quot;: &quot;my_stripe_api_key&quot;,    &quot;STRIPE_WEBHOOK_SECRET&quot;: &quot;my_stripe_webhook_key&quot;,    &quot;FRONT_END_BASE_URL&quot;: &quot;http://localhost:3000&quot;,}```Include drf_stripe in Django INSTALLED_APPS setting:```pythonINSTALLED_APPS = (    ...,    &quot;rest_framework&quot;,    &quot;drf_stripe&quot;,    ...)```Include drf_stripe.url routing in Django project's urls.py, ie:```pythonfrom django.urls import include, pathurlpatterns = [    path(&quot;stripe/&quot;, include(&quot;drf_stripe.urls&quot;)),    ...]```Run migrations command:```commandlinepython manage.py migrate```Pull data from Stripe into Django database using the following command:```commandlinepython manage.py pull_stripe```Finally, start Django development server```commandlinepython manage.py runserver```as well as Stripe CLI to forward Stripe webhook requests:```commandlinestripe listen --forward-to 127.0.0.1:8000/stripe/webhook/```## UsageThe following REST API endpoints are provided:### List product prices to subscribe```my-site.com/stripe/subscribable-product/```This endpoint is available to both anonymous users and authenticated users. Anonymous users will see a list of allcurrently available products. For authenticated users, this will be a list of currently available products without anyproducts that the user has already subscribed currently.### List user's current subscriptions```my-site.com/stripe/my-subscription/```This endpoint provides a list of active subscriptions for the current user.### List user's current subscription items```my-site.com/stripe/my-subscription-items/```This endpoint provides a list of active subscription items for the current user.### Create a checkout session using Stripe hosted Checkout page```my-site.com/stripe/checkout/```This endpoint creates Stripe Checkout SessionMake request with the follow request data:```{&quot;price_id&quot;: &quot;price_stripe_price_id_to_be_checked_out&quot;}```The response will contain a session_id which can be used by Stripe:```{&quot;session_id&quot;: &quot;stripe_checkout_session_id&quot;}```This session_id is a unique identifier for a Stripe Checkout Session, and can be usedby [`redirectToCheckout` in Stripe.js](https://stripe.com/docs/js/checkout/redirect_to_checkout). You can implement thisin your frontend application to redirect to a Stripe hosted Checkout page after fetching the session id.By default, the Stripe Checkout page will redirect the user back to your application ateither `mysite.com/payment/session={CHECKOUT_SESSION_ID}` if the checkout is successful,or `mysite.com/manage-subscription/` if checkout is cancelled.### Stripe Customer Portal```mysite.com/stripe/customer-portal```This will create a Stripe billing portal session, and return the url to that session:```{&quot;url&quot;: &quot;url_to_Stripe_billing_portal_session&quot;```This is a link that you can use in your frontend application to redirect a user to Stripe Customer Portal and back toyour application. By default, Stripe Customer Portal will redirect the user back to your frontend applicationat `my-site.com/manage-subscription/`### Stripe Webhook```mysite.com/stripe/webhook/```This the REST API endpoint Stripe servers can call to update your Django backend application. The following Stripewebhook events are currently supported:```product.createdproduct.updatedproduct.deletedprice.createdprice.updatedprice.deletedcustomer.subscription.createdcustomer.subscription.updatedcustomer.subscription.deleted```With these Stripe events, you can:- Manage your products and pricing model from Stripe Portal, and rely on webhook to update your Django application  automatically.- Manage your customer subscriptions from Stripe Portal, and rely on webhook to update your Django application  automatically.## StripeUserThe StripeUser model comes with a few attributs that allow accessing information about the user quickly:```pythonfrom drf_stripe.models import StripeUserstripe_user = StripeUser.objects.get(user_id=django_user_id)print(stripe_user.subscription_items)print(stripe_user.current_subscription_items)print(stripe_user.subscribed_products)print(stripe_user.subscribed_features)```## Customizing Checkout Session ParametersSome of the checkout parameters are specified in `DRF_STRIPE` settings:`CHECKOUT_SUCCESS_URL_PATH`: The checkout session success redirect url path.`CHECKOUT_CANCEL_URL_PATH`: The checkout session cancel redirect url path.`PAYMENT_METHOD_TYPES`: The defaultdefault [payment method types](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_method_types), defaults to `[&quot;card&quot;]`.`DEFAULT_CHECKOUT_MODE`: The default checkout mode, defaults to `&quot;subscription&quot;`.By default, you can create a checkout session by calling the default REST endpoint `my-site.com/stripe/checkout/`, thisREST endpoint utilizes `drf_stripe.serializers.CheckoutRequestSerializer` to validate checkout parameters and create aStripe Checkout Session. Only a `price_id` is needed, `quantity` defaults to 1.You can extend this serializer and customize Checkout behavior, such as specifying multiple `line_items`, `payment_method_types`, and `checkout_mode`:```pythonfrom drf_stripe.stripe_api.customers import get_or_create_stripe_userfrom drf_stripe.stripe_api.checkout import stripe_api_create_checkout_sessionfrom drf_stripe.serializers import CheckoutRequestSerializerfrom rest_framework.exceptions import ValidationErrorfrom stripe.error import StripeErrorclass CustomCheckoutRequestSerializer(CheckoutRequestSerializer):    &quot;&quot;&quot;Handle creation of a custom checkout session where parameters are customized.&quot;&quot;&quot;    def validate(self, attrs):        stripe_user = get_or_create_stripe_user(user_id=self.context['request'].user.id)        try:            checkout_session = stripe_api_create_checkout_session(                customer_id=stripe_user.customer_id,                line_items=[                    {&quot;price_id&quot;: &quot;stripe_price_id&quot;, &quot;quantity&quot;: 2}, ...                ],                payment_method_types=[&quot;card&quot;, &quot;alipay&quot;, ...],                checkout_mode=&quot;subscription&quot;)            attrs['session_id'] = checkout_session['id']        except StripeError as e:            raise ValidationError(e.error)        return attrs```For more information regarding `line_items`, `payment_method_types`, `checkout_mode`, checkout Stripe documentation for[creating a checkout session](https://stripe.com/docs/api/checkout/sessions/create).## Product featuresStripe does not come with a way of managing features specific to your products and application. drf-stripe-subscriptionprovides additional tables to manage features associated with each Stripe Product:- Feature: this table contains feature_id and a description for the feature.- ProductFeature: this table keeps track of the many-to-many relation between Product and Feature.To assign features to a product, go to Stripe Dashboard -&gt; `Products` -&gt; `Add Product`/`Edit Product`:Under `Product information`, click on `Additional options`, `add metadata`.Add an entry called `features`, the value of the entry should be a space-delimited string describing a set of features,ie: `FEATURE_A FEATURE_B FEATURE_C`.If you have Stripe CLI webhook running, you should see that your Django server has automatically received productinformation update, and created/updated the associated ProductFeature and Feature instances. Otherwise, you can also runthe `python manage.py update_stripe_products` command again to synchronize all of your product data. The `description`attribute of each Feature instance will default to the same value as `feature_id`, you should update the `description`yourself if needed.## Django management commands```commandlinepython manage.py pull_stripe```This command calls `update_stripe_products`, `update_stripe_customers`, `update_stripe_subscriptions` commands.```commandlinepython manage.py update_stripe_products```Pulls products and prices from Stripe and updates Django database.```commandlinepython manage.py update_stripe_customers```Pulls customers from Stripe and updates Django database.```commandlinepython manage.py update_stripe_subscriptions```Pulls subscriptions from Stripe and updates Django database.## Working with customized Django User modelsThe following DRF_STRIPE settings can be used to customize how Django creates User instance using Stripe Customerattributes (default values shown):```pythonDRF_STRIPE = {    &quot;DJANGO_USER_EMAIL_FIELD&quot;: &quot;email&quot;,    &quot;USER_CREATE_DEFAULTS_ATTRIBUTE_MAP&quot;: {&quot;username&quot;: &quot;email&quot;},}```The `DJANGO_USER_EMAIL_FIELD` specifies name of the Django User attribute to be used to store Stripe Customer email. Itwill be used to look up existing Django User using Stripe Customer email.The `USER_CREATE_DEFAULTS_ATTRIBUTE_MAP` maps the name of Django User attribute to name of corresponding Stripe Customerattribute, and is used during the automated Django User instance creation.</longdescription>
</pkgmetadata>