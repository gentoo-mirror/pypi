<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pytestify=========[![alt](http://img.shields.io/pypi/v/pytestify.svg)](https://pypi.python.org/pypi/pytestify)[![alt](https://img.shields.io/conda/vn/conda-forge/pytestify.svg)](https://anaconda.org/conda-forge/pytestify)A tool to automatically change unittest to pytest. Similar to[unittest2pytest](https://github.com/pytest-dev/unittest2pytest),but with a few more features and written using AST and tokenize, ratherthan lib2to3.Big thanks to [pyupgrade](https://github.com/asottile/pyupgrade/), whichthis project has learned from.## Installation`pip install pytestify`## Usage`pytestify path/to/file.py`or`pytestify path/to/folder/`**Optional arguments**- [--keep-method-casing](#camelCase-to-snake_case)- [--with-count-equal](#assertCountEqual)Please read over all changes that pytestify makes. It's a newpackage, so there are bound to be issues.## Implemented features### Test class namesRemove `TestCase` parent class, and make sure tests start with `Test`. We are keeping the test classes themselves, but you can remove them manually.```pythonclass TestThing(unittest.TestCase):  # class TestThing:class TestThing(TestCase, ClassB):   # class TestThing(ClassB):class ThingTest(unittest.TestCase):  # class TestThing:class Thing(unittest.TestCase):      # class TestThing:```### Setup / teardowns```pythondef setUp(self):          # def setup_method(self):def tearDown(self):       # def teardown_method(self):def setUpClass(self):     # def setup_class(self):def tearDownClass(self):  # def teardown_class(self):```### AssertsRewrite unittest assert methods using the `assert` keyword.```python# asserting one thingself.assertTrue(a)       # assert aself.assertFalse (a)     # assert not aself.assertIsNone(a)     # assert a is Noneself.assertIsNotNone(a)  # assert a is not None# asserting two thingsself.assertEqual(a, b)      # assert a == bself.assertNotEqual(a, b)   # assert a != bself.assertIs(a, b)         # assert a is bself.assertIsNot(a, b)      # assert a is not bself.assertIn(a, b)         # assert a in bself.assertNotIn(a, b)      # assert a not in bself.assertListEqual(a, b)  # assert a == bself.assertDictEqual(a, b)  # assert a == bself.assertSetEqual(a, b)   # assert a == bself.assertGreater(a, b)    # assert a &gt; bself.assertLess(a, b)       # assert a &lt; bself.assertGreaterEqual(a, b)  # assert a &gt;= bself.assertLessEqual(a, b)  # assert a &lt;= bself.assertRegex(a, b)      # assert a.search(b)self.assertNotRegex(a, b)   # assert not a.search(b)self.assertAlmostEqual(a, b)#   assert a == pytest.approx(b)self.assertAlmostEqual(a, b, places=2)#   assert a == pytest.approx(b, abs=0.01)self.assertAlmostEquals(a, b, delta=2)#   assert a == pytest.approx(b, abs=2)# improves the assert if reasonableself.assertEqual(a, None)   # assert a is Noneself.assertEqual(a, True)   # assert a is True# error messagesself.assertTrue(a, msg='oh no!')  # assert a, 'oh no!'```### Multi-line assertsSince `assert (a == b, 'err')`  is equivalent to asserting a tuple, and thus is always `True`.```pythonself.assertEqual(    # assert a == \    a,               #     b    b,)self.assertEqual(    # assert a == \    a,               #     b, \    b,               #     'oh no!'    msg='oh no!')```### camelCase to snake_caseDisable this behavior with `--keep-method-casing````pythondef testThing(self):      # def test_thing(self):def testHTTPThing(self):  # def test_httpthing(self):```### assertCountEqualThe `assertCountEqual` rewrite is risky, so opt-in with `pytest path/to/file --with-count-equal`.```pythonself.assertItemsEqual(a, b)  # assert sorted(a) == sorted(b)self.assertCountEqual(a, b)  # assert sorted(a) == sorted(b)```Note that pytest has no version of either of these methods. See[this thread](https://github.com/pytest-dev/pytest/issues/5548) for moreinformation. You can also use[unittest's implementation](https://stackoverflow.com/a/45946306).### Exceptions```pythonself.assertRaises(OSError)             # pytest.raises(OSError)self.assertWarns(OSError)              # pytest.warns(OSError)with self.assertRaises(OSError) as e:  # with pytest.raises(OSError) as ewith self.assertWarns(OSError) as e:   # with pytest.warns(OSError) as e```### Skipping / Expecting failure```python# decorated@unittest.skip('some reason')    # @pytest.mark.skip('some reason')@unittest.skipIf(some_bool)      # @pytest.mark.skipif(some_bool)@unittest.skipUnless(some_bool)  # @pytest.mark.skipif(not some_bool)@unittest.expectedFailure        # @pytest.mark.xfail# not decoratedunittest.skip('some reason')     # pytest.skip('some reason')unittest.skipTest('some reason') # pytest.skip('some reason')unittest.fail('some reason')     # pytest.fail('some reason')```</longdescription>
</pkgmetadata>