<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flexmodA python module for other modules to allow flexible (yet not error-prone) configuration.## ExampleSuppose you wrote a package and you want to allow users to set package-level configs.Something like this:```pythonimport awesomepackagefrom awesomepackage.foo import bar# user can change module param on the flyawesomepackage.config[&quot;logging&quot;][&quot;verbose&quot;] = True# package behavior is now different from defaultbar()```This is simple, but maybe not any parameter can be changed at any time. For example:```pythonawesomepackage.config[&quot;metric&quot;][&quot;length&quot;] = &quot;foot&quot;```Having flexible units may be helpful for different locales, but Changing metric units in the middle of a program can lead to consistency issues.`flexmod` lets you:-   specify configs that are auto-locked (i.e. no further changes) when used-   add custom preprocessing functions to entered config values    -   this is useful when reading config from a text file-   add validation functions to check user-supplied config values## Usage### Define configurations in your module using `flexmod` classes```python# mypackage/__init__.pyfrom flexmod import ConfigValue, AutolockedConfigValue, Config, ConfigIndexconfig = ConfigIndex(    [        Config(    &quot;interface&quot;,    [        # example of a config that stays the same throughout a program    AutolockedConfigValue(    # name of the config paramater    &quot;language&quot;,    # hint    &quot;The language of module interface (logs, warnings, etc.)&quot;,    # default value    &quot;en-us&quot;,    # validate the config value    validation=lambda x: x in [&quot;en-us&quot;, &quot;fr-fr&quot;],),        # example of a config that can change dynamically    ConfigValue(    &quot;verbosity&quot;,    &quot;The granularity to which the module reports / complains&quot;,    1,    # specify a preprocessing function if needed    preprocessing=int,),    ],),        Config(    &quot;foo&quot;,    [    AutolockedConfigValue(    &quot;bar&quot;,    &quot;Any other config parameter&quot;,    &quot;&quot;,),    ],),    ])``````python# mypackage/message.pyimport mypackagedef hello_world():    &quot;&quot;&quot;    Example function that uses a module-level config.    &quot;&quot;&quot;    lang = mypackage.config[&quot;interface&quot;][&quot;language&quot;]    if lang == &quot;en-us&quot;:        print(&quot;Hello, world!&quot;)    elif lang == &quot;fr-fr&quot;:        print(&quot;Bonjour, tout le monde!&quot;)    else:        pass```### Package user: customize your module on the flyYour user will not need to be aware of `flexmod`.```pythonimport mypackagefrom mypackage.message import hello_world# change module param on the flymypackage.config[&quot;interface&quot;][&quot;language&quot;] = &quot;fr-fr&quot;# this gets &quot;Bonjour, tout le monde!&quot;hello_world()# after an autolocked config is read, it cannot be changedmypackage.config[&quot;interface&quot;][&quot;language&quot;] = &quot;en-us&quot;# AssertionError: language is locked from updates.```Users can also supply an [configparser](https://docs.python.org/3/library/configparser.html)-style ini file.-   Unlike in default configparser, booleans, integers and floats will be autodetected and converted.```ini# in custom.ini[interface]language = fr-frverbosity = 2[foo]bar = anything``````pythonimport mypackagefrom mypackage.message import hello_world# change module param on the flymypackage.config.load_override(&quot;custom.ini&quot;)# this gets &quot;Bonjour, tout le monde!&quot;hello_world()```</longdescription>
</pkgmetadata>