<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pystalkd========&gt;Beanstalk is a simple, fast work queue.&gt;Its interface is generic, but was originally designed for reducing the latency of page views in high-volume web applications by running time-consuming tasks asynchronouslyhttp://kr.github.io/beanstalkd/pystalkd is a beanstalkd bindings targeting python3.This library is based on https://github.com/earl/beanstalkc and should be API compatible.[![Build Status](https://travis-ci.org/menezes-/pystalkd.svg?branch=master)](https://travis-ci.org/menezes-/pystalkd)Installing-------```pip install pystalkd```or from source:```python setup.py install```Using------```python&gt;&gt;&gt; from pystalkd.Beanstalkd import Connection&gt;&gt;&gt; c = Connection(&quot;localhost&quot;, 11300) #if no argument is given default configuration is used&gt;&gt;&gt; c.put(&quot;hey!&quot;)&gt;&gt;&gt; job = c.reserve(0)&gt;&gt;&gt; job.body&quot;hey!&quot;```One of the goals is to be API compatible with beanstalkc, so this tutorial should be valid: https://github.com/earl/beanstalkc/blob/master/TUTORIAL.mkdThe main differences, API wise are: 1) where number of seconds is expected pystalkd also accepts a timedelta object2) you can temporarily watch and use a tube using the `with` keyword```pythonprint(c.using()) # &quot;default&quot;with c.temporary_use(&quot;test&quot;):  print(c.using()) # &quot;test&quot;print(c.using()) # &quot;default&quot;print(c.watching()) # [&quot;default&quot;]with c.temporary_use(&quot;test&quot;):  print(c.watching()) # [&quot;default&quot;, &quot;test&quot;]print(c.watching()) # [&quot;default&quot;]```3) you also have access to the &quot;bytes&quot; API. To maintain compatibility with beanstalkc the API worked only with strings but nowyou can use the functions ending in &quot;_bytes&quot; (internally this is controlled using the `raw` paramater) to work directly with bytes```pythonfrom os import urandomtest_bytes = urandom(50)job_id = c.put_bytes(test_bytes)job = c.reserve_bytes(0)print(job.body) # b'i\x91\xdf\xf8\x1b?zj....'job_id2 = c.put(&quot;string&quot;)job2 = c.reserve_bytes(0)print(job2.body) # b'string'```Note: you can use `reserve_bytes` with `put` and get the raw string (not encoded), but the other way around might cause problemsTests-------To test with default host and port (localhost, 11300): ```python3 test.py```To test on a specific host (if port is not specified 11300 is used)```python3 test.py host [port]```License-------Copyright (C) 2008-2014 Andreas Bolka.Copyright (C) 2015-2016 Gabriel Menezes.Licensed under the [MIT][license].[license]: https://opensource.org/licenses/MIT</longdescription>
</pkgmetadata>