<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>preggy======[![Build Status](https://travis-ci.org/heynemann/preggy.png?branch=master)](https://travis-ci.org/heynemann/preggy)[![PyPi version](https://pypip.in/v/preggy/badge.png)](https://crate.io/packages/preggy/)[![PyPi downloads](https://pypip.in/d/preggy/badge.png)](https://crate.io/packages/preggy/)[![Coverage Status](https://coveralls.io/repos/heynemann/preggy/badge.png?branch=master)](https://coveralls.io/r/heynemann/preggy?branch=master)**preggy is an assertion library for Python.** What were you `expect`ing?Extracted from the [PyVows](http://pyvows.org) project.Installing==========We recommend using `pip`:    pip install preggyUsage=====Simply tell your test what to `expect()`:```pythonfrom preggy import expectdef test_roses_are_red():    rose = Rose()    expect(rose.color).to_equal('red')def test_violets_are_not_red():    violet = Violet()    expect(violet.color).not_to_equal('red')```Built-in Expectations=====================Equality--------```pythonexpect(4).to_equal(4)expect(5).Not.to_equal(4)expect(5).not_to_equal(4)  # same as previous```Comparison--------```pythonexpect(4).to_be_lesser_than(5)expect(5).to_be_greater_than(4)expect(5).Not.to_be_lesser_than(4)expect(4).not_to_be_greater(5)  # same as previousexpect(4).to_be_lesser_or_equal_to(5)expect(4).to_be_lesser_or_equal_to(4)expect(5).not_to_be_lesser_or_equal_to(4)expect(5).to_be_greater_or_equal_to(4)expect(5).to_be_greater_or_equal_to(5)expect(4).not_to_be_greater_or_equal_to(5)expect(&quot;b&quot;).to_be_greater_than(&quot;a&quot;)expect(&quot;a&quot;).to_be_lesser_than(&quot;b&quot;)expect([1, 2, 3]).to_be_greater_than([1, 2])  # comparing using lengthexpect((1, 2, 3)).to_be_greater_than((1, 2))  # comparing using lengthexpect({ &quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot; }).to_be_greater_than({ &quot;a&quot;: &quot;b&quot; })  # comparing using length of keys```Similarity----------```pythonexpect('sOmE RandOm     CAse StRiNG').to_be_like('some random case string')expect(1).to_be_like(1)expect(1).to_be_like(1.0)expect(1).to_be_like(long(1))expect([1, 2, 3]).to_be_like([3, 2, 1])expect([1, 2, 3]).to_be_like((3, 2, 1))expect([[1, 2], [3,4]]).to_be_like([4, 3], [2, 1]])expect({ 'some': 1, 'key': 2 }).to_be_like({ 'key': 2, 'some': 1 })expect('sOmE RandOm     CAse StRiNG').Not.to_be_like('other string')expect('sOmE RandOm     CAse StRiNG').not_to_be_like('other string')  # same as previousexpect(1).not_to_be_like(2)expect([[1, 2], [3,4]]).not_to_be_like([4, 4], [2, 1]])expect({ 'some': 1, 'key': 2 }).not_to_be_like({ 'key': 3, 'some': 4 })```Type----```pythonexpect(os.path).to_be_a_function()expect(1).to_be_numeric()expect({ 'some': 1, 'key': 2 }).to_be_instance_of(dict)expect(open(__file__)).to_be_a_file()expect('some').Not.to_be_a_function()expect('some').Not.to_be_numeric()expect('some').Not.to_be_instance_of(dict)expect('some').Not.to_be_a_file()```True / False------------```pythonexpect(True).to_be_true()expect('some').to_be_true()expect([1, 2, 3]).to_be_true()expect({ 'a': 'b' }).to_be_true()expect(1).to_be_true()expect(False).to_be_false()  # not_to_be_true() would work, too. but, it's so...ewwexpect(None).to_be_false()expect('').to_be_false()expect(0).to_be_false()expect([]).to_be_false()expect({}).to_be_false()```None----```pythonexpect(None).to_be_null()expect('some').Not.to_be_null()expect('some').not_to_be_null()  # same as previous```Inclusion---------```pythonexpect([1, 2, 3]).to_include(2)expect((1, 2, 3)).to_include(2)expect('123').to_include('2')expect({ 'a': 1, 'b': 2, 'c': 3}).to_include('b')expect([1, 3]).Not.to_include(2)  # or, exclusion...```Regular Expressions-------------------```pythonexpect('some').to_match(r'^[a-z]+')expect('Some').Not.to_match(r'^[a-z]+')```Length------```pythonexpect([1, 2, 3]).to_length(3)expect((1, 2, 3)).to_length(3)expect('abc').to_length(3)expect({ 'a': 1, 'b': 2, 'c': 3}).to_length(3)expect(lifo_queue).to_length(2)expect(queue).to_length(3)expect([1]).Not.to_length(3)expect([1]).not_to_length(3)  # same as previous```Emptiness---------```pythonexpect([]).to_be_empty()expect(tuple()).to_be_empty()expect({}).to_be_empty()expect('').to_be_empty()expect([1]).not_to_be_empty()expect((1,2)).not_to_be_empty()expect({'a': 1}).not_to_be_empty()expect('roses are red').not_to_be_empty()```Exceptions----------```pythonexpect(RuntimeError()).to_be_an_error() expect(RuntimeError()).to_be_an_error_like(RuntimeError)expect(ValueError('error')).to_have_an_error_message_of('error')expect(&quot;I'm not an error&quot;).Not.to_be_an_error()expect(ValueError()).Not.to_be_an_error_like(RuntimeError)expect(ValueError('some')).Not.to_have_an_error_message_of('error')# when expecting a method to errorerr = expect.error_to_happen(RuntimeError)  # attribute to a variable so you can use the exception laterwith err:    raise RuntimeError(&quot;something is wrong&quot;)expect(err).to_have_an_error_message_of('something is wrong')# or the shorter versionwith expect.error_to_happen(RuntimeError, message=&quot;something is wrong&quot;):    raise RuntimeError(&quot;something is wrong&quot;)# or if you don't care about the message:with expect.error_to_happen(RuntimeError):    raise RuntimeError(&quot;something is wrong&quot;)# or if you need to make sure error does not happenwith expect.error_not_to_happen(RuntimeError, message=&quot;something is wrong&quot;):    raise RuntimeError(&quot;something is wrong&quot;)  # Fails with AssertionError# or if you don't care about the message, only that the error does not happen:with expect.error_not_to_happen(RuntimeError):    raise RuntimeError(&quot;something is wrong&quot;)  # Fails with AssertionError```Failure-------```pythonexpect.not_to_be_here()  # raises AssertionError# raises AssertionError with error messageexpect.not_to_be_here(&quot;some error message&quot;)```Chained Assertions------------------```python# assertions may be chained, for brevity:expect(6).not_to_be_null().to_equal(6)# a more *sensible* example:expect(foo).not_to_be_null().to_equal(expected.get('foo'))```Contributing============See [CONTRIBUTING](CONTRIBUTING.md).License=======The MIT License (MIT)Copyright (c) 2013 Bernardo Heynemann &lt;heynemann@gmail.com&gt;Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</longdescription>
</pkgmetadata>