<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>sorno-py-scripts================My python scripts. `sorno` is just a brand name that I use for my stuff.It's convenient to use that as a package name instead of the usual &quot;org.xxx&quot;.The source code of the whole project is in github:https://github.com/hermantai/sorno-py-scriptsPyPI page: https://pypi.python.org/pypi/sorno-py-scriptsAll scripts support the &quot;-h&quot; or the &quot;--help&quot; option for documentation of thescripts. Often the documentation is in the __doc__ of the script, so take alook at that as well.All scripts are prefixed with &quot;`sorno_`&quot; to avoid polluting the Scripts folder(in Windows, /usr/local/bin in \*nix) of python or other binaries when thissuite is installed.This project also includes the `sorno` library.Installation--------------------If you don't have Python installed, you first need to install it fromhttps://www.python.org/downloads/. You need a version at least 2.7 but lowerthan 3.0.For the following commands, add **sudo** in front of the commands if you aregetting permission error.A Python package management system will make your life easier, so install pipby::    $ easy_install pipIf easy_install is not on your system, you can check how to install it inhttps://pythonhosted.org/setuptools/easy_install.html#installing-easy-install.Install with pip~~~~~~~~~~~~~~~~::    $ pip install sorno_py_scripts  # note that the project name is in underscores, not dashesInstall with easy-install~~~~~~~~~~~~~~~~~~~~~~~~~::    $ easy_install sorno_py_scripts  # note that the project name is in underscores, not dashesInstall from source~~~~~~~~~~~~~~~~~~~You can install sorno-py-scripts from the source code by cloning the git repo::    $ git clone https://github.com/hermantai/sorno-py-scriptsThen cd to the sorno-py-scripts directory::    $ cd sorno-py-scriptsInstall it::    $ python setup.py installRunning the scripts-------------------Your scripts should be installed at your $PATH. For *nix system, they areusually in */usr/local/bin*. For windows, they should be in a *Scripts*directory under the Python installation.Make sure your scripts are in the PATH system environment variables.Then you can run the scripts by simply invoking them from the command lineconsole ($ is the prompt of the console)::  $ sorno_gtasks.py -hRunning the tests-----------------In the directory containing the ./test.sh file, then run it::    $ ./test.shYou can run tests only for the sorno library::    $ ./test_sorno.shOr tests only for the scripts::    $ ./test_scripts.shContents--------------------Use -h or --help options for the scripts to get more detail documentation foreach script.sorno_alarm.py (alpha)~~~~~~~~~~~~~~~~~~~~~~A console alarm which uses the system bell as the alarm bell by default. Youset howmany seconds before the alarm goes off, not an absolute time in the future.After you respond to the bell (e.g. please &quot;Enter&quot; in the console after thesystem bell rings), it restarts the alarm and will ring again after yourspecified time. Use control-c to exit the alarm completely.sorno_amazon_reviews_scrape.py~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~A script to scrape Amazon product reviews from the web page.sorno_amazon_wishlist_scrape.py~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~A script to scrape items from an Amazon wishlist. The script only works forwishlists which are &quot;Public&quot;. You can change the settings by following theinstruction in:http://www.amazon.com/gp/help/customer/display.html?nodeId=501094sorno_appcache_generator.py~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Generate an appcache file to be used for html5 application cache of a webapplication. The goal is to make the whole web app cached, so the app can berun offline.sorno_attach_realdate.py~~~~~~~~~~~~~~~~~~~~~~~~Attaches the actual time in human readable format for timestamps found incoming lines.Example::    $ cat /tmp/abc    once upon a time 1455225387 there is    1455225387 something called blah    and 1455225387    then foo    $ cat /tmp/abc |python scripts/sorno_attach_realdate.py    once upon a time 1455225387(2016-02-11 13:16:27) there is    1455225387(2016-02-11 13:16:27) something called blah    and 1455225387(2016-02-11 13:16:27)    then foosorno_cloud_vision.py~~~~~~~~~~~~~~~~~~~~~sorno_cloud_vision.py makes using the Google Cloud Vision API easier.Doc: https://cloud.google.com/vision/docsThe script generates requests for the given photos, sends the requests to CloudVision, then puts the results into the corresponding response files.sorno_compress_photos.py~~~~~~~~~~~~~~~~~~~~~~~~Compresses all photos in a directory to jpg quality.sorno_download_all.py~~~~~~~~~~~~~~~~~~~~~Downloads all items from all links from a URL.sorno_dropbox.py~~~~~~~~~~~~~~~~Provides utilities to work with dropbox just like the official dropbox cli(http://www.dropboxwiki.com/tips-and-tricks/using-the-official-dropbox-command-line-interface-cli),but in a script instead of a REPL way. sorno_dropbox also has higher levelfeatures like copying directories recursively.sorno_email.py~~~~~~~~~~~~~~Sends a simple email with plain textThe script first tries to use your system Mail Transfer Agent(MTA) configured,otherwise, it prompts for login to use Gmail SMTP server.sorno_extract_spg_properties.py~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Extracts Simon Property Group property information from its 10-K filingsSample usage::    $ sorno_extract_spg_properties.py spg_10-k.htmlIf you get UnicodeEncodingError, you should prefix your command with&quot;PYTHONIOENCODING=UTF-8&quot;. E.g::    $ PYTHONIOENCODING=UTF-8 sorno_extract_spg_properties.py html_filesorno_facts.py~~~~~~~~~~~~~~~~~~~~Prints out a random fact for funsorno_feedly.py~~~~~~~~~~~~~~~Manages feeds stored in Feedly.This script does not implement an oauth flow, so just get a developer tokenfrom https://developer.feedly.com/v3/developer to use this script.Quickstart:    First, get a developer access token through    https://developer.feedly.com/v3/developer, then set the environment    variable SORNO_FEEDLY_ACCESS_TOKEN.    ::        $ export SORNO_FEEDLY_ACCESS_TOKEN='YOUR ACCESS TOKEN HERE'    Print all categories::        $ sorno_feedly.py categories    Print all feeds::        $ sorno_feedly.py categories    Print all entries, duplicated entries, and get prompted for marking    duplicated entries to read::        $ sorno_feedly.py entriessorno_gcloud_bigquery.py~~~~~~~~~~~~~~~~~~~~~~~~~~~Demos the use of Google Cloud BigQueryThe script can be run to get the result of a query.You need to get the json credentials file before using this script. See https://developers.google.com/identity/protocols/application-default-credentials#howtheywork.Quickstart:    sorno_gcloud_bigquery.py --google-json-credentials &lt;your-json-credentials-file&gt; &quot;SELECT author,text FROM [bigquery-public-data:hacker_news.comments] where text is not null LIMIT 10&quot;Reference: https://cloud.google.com/bigquery/create-simple-app-api#authorizingsorno_gcloud_pubsub_demo.py~~~~~~~~~~~~~~~~~~~~~~~~~~~Demos the use of Google Cloud Pub/Sub.The script can be run as a publisher or a subscriber for a Pub/Sub topic.You need to get the json credentials file before using this script. See https://developers.google.com/identity/protocols/application-default-credentials#howtheywork.Quickstart:    To run as a publisher:        sorno_gcloud_pubsub_demo.py --google-json-credentials &lt;your-json-credentials-file&gt; --publisher    To run as a subscriber:        sorno_gcloud_pubsub_demo.py --google-json-credentials &lt;your-json-credentials-file&gt;  --subscriberReference: https://cloud.google.com/pubsub/configuresorno_gdoc.py~~~~~~~~~~~~~~~~~A command line client for accessing Google Docs. The API doc used to implementit is in https://developers.google.com/drive/web/quickstart/quickstart-pythonYou can search for a file and download its content (only if it's a doc).sorno_gdrive.py~~~~~~~~~~~~~~~~~~~A command line client for Google Drive. The API doc used to implement this isinhttps://developers.google.com/drive/web/quickstart/quickstart-pythonCurrently, you can upload files with the script.sorno_locate_git.py~~~~~~~~~~~~~~~~~~~Gets the remote location of a local file/directory from a local git repository.sorno_grepchunks.py~~~~~~~~~~~~~~~~~~~Oftenly, you want to treat multiple lines as one chunk and see if it matches aregex. If it does, you want to print out the whole chunk instead of the onlyline that matches the regex. sorno_grepchunks lets you define what a chunkis by giving a chunk starting regex, that is, all the lines starting from theline that matches the regex and before the next match are treated as onechunk. You can then apply another regex to match against it.sorno_gtasks.py~~~~~~~~~~~~~~~A script version of Google Taskssorno_java_deps_graph.py~~~~~~~~~~~~~~~~~~~~~~~~Prints the class dependency graph given a bunch of java source files.sorno_join_malls_info_in_csv.py~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Join the malls information in different csv files.The first line of each csv file should be the headers. One of the header shouldbe &quot;Name&quot;.Sample run::    sorno_join_malls_info_in_csv.py --columns-kept-last &quot;Total Mall Store GLA&quot; *.csvsorno_ls.py~~~~~~~~~~~sorno_ls.py is just like the Unix &quot;ls&quot; commandsorno_merge_pdfs.py~~~~~~~~~~~~~~~~~~~Merge pdfssorno_pick.py~~~~~~~~~~~~~A script to prompt for choosing items generated from different sources, thenprint those items out. For example, if you have a script to generate commondirectories that you use, e.g. gen-fav-dir.sh, you can put the following inyour .bashrc, assuming sorno_pick.py and gen-fav-dir.sh are in your PATH::    $ alias cdf='cd $(sorno_pick.py -c gen-fav-dir.sh)'Then you can just type::    $ cdfAnd you will be given a list of directories to &quot;cd&quot; to.P.S. You probably want to set the alias to the following::    $ alias cdf='tmp=&quot;cd $(sorno_pick.py -c gen-fav-dir.sh)&quot;;history -s &quot;$tmp&quot;;$tmp'This ensures the history is inserted in a useful way, e.g. when you run&quot;history&quot;, you see the actual command instead of just &quot;cdf&quot;.sorno_podcast_downloader.py~~~~~~~~~~~~~~~~~~~~~~~~~~~Downloads podcasts given a feed url.The downloaded podcasts have useful filenames (e.g contain the title of the podcast and prefixed by the publisheddate).sorno_protobuf_to_dict.py~~~~~~~~~~~~~~~~~~~~~~~~~Converts text format of protobufs to python dict.The script launches ipython for you to play with the parsed python dict.sorno_realdate.py~~~~~~~~~~~~~~~~~Prints the human readable date for timestampsExample::    $ sorno_realdate.py 1455223642 1455223642000 1455223642000000 1455223642000000000    1455223642: 2016-02-11 12:47:22-0800 PST in s    1455223642000: 2016-02-11 12:47:22-0800 PST in ms    1455223642000000: 2016-02-11 12:47:22-0800 PST in us    1455223642000000000: 2016-02-11 12:47:22-0800 PST in nssorno_reduce_image_sizes.py~~~~~~~~~~~~~~~~~~~~~~~~~~~Saves images with reduced sizes.Reduces the sizes of all images in a directory and its subdirectories bysaving them with lower quality jpg format. The directory structure ispreserved but the new directory is created with a timestamp suffix.sorno_rename.py~~~~~~~~~~~~~~~sorno_rename.py renames files given regex for matching names of theexisting files and using backreferences for filenames to be renamed to.sorno_replace_thrift_const.py~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Replaces constants with literal values for a thrift file except for thedeclaration. This is mainly for thrift compilers which cannot handle constantswithin lists or other collection structures.sorno_scrape_peg_list_1000.py~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Scrapes the 1000 pegs from http://www.rememberg.com/Peg-list-1000/sorno_spacefill.py~~~~~~~~~~~~~~~~~~Fills up the disk space with a specific size of garbage data.sorno_stock_quote.py~~~~~~~~~~~~~~~~~~~~Gets stock quotes and other information for stock symbols.The script can print real-time or close to real-time stock quotes, historicalquotes, and also fundamental ratios for the stock (company).sorno_summarize_code.py~~~~~~~~~~~~~~~~~~~~~~~Prints a summary of the code file.It makes the layout of the code to be read easily. Currently it only supportspython files.sorno_top_size_files.py~~~~~~~~~~~~~~~~~~~~~~~Prints the top files in terms of sizes.Prints the top files in terms of sizes under a directory or its subdirectoriessizesorno_twitter_post_tweets.py~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Batch posting tweets on TwitterBefore using the script, go tohttps://dev.twitter.com/oauth/overview/application-owner-access-tokens to getthe necessary credentials.Use Google Doc to edit your tweets, one line per tweet. You should not use naked links (i.e. each link should be associated with some text). Then &quot;File&quot; -&gt; &quot;Download as&quot; -&gt; &quot;Web Page (.html zipped)&quot;.Unzip the downloaded file. Then run the following command with the appropriate parameters. path_to_file should be the path to the html file you unzipped.::    $ sorno_twitter_post_tweets.py --consumer-key consumer_key --consumer-secret consumer_secret --access_token-key access_token_key --access-token-secret access_token_secret --parse-tweets-from-file path_to_fileThe script prints each tweet, and asks if you want to post the tweet indicated by &quot;Tweet preview&quot;. Enter &quot;y&quot; if you want it posted, &quot;n&quot; otherwise.Using scripts involving Google App API---------------------------------------For scripts like &quot;sorno_gdoc.py&quot;, &quot;sorno_gdrive.py&quot; and &quot;sorno_gtasks.py&quot;, a**Google App project** is required to account for the quota of using the API.You need to get an **OAuth2** **client id** and **secret** for your Google Appproject, then export them as environment variables&quot;GOOGLE_APP_PROJECT_CLIENT_ID&quot; and &quot;GOOGLE_APP_PROJECT_CLIENT_SECRET&quot;respectively (replace &quot;xxx&quot; and &quot;yyy&quot; with your actual values) before runningthe script::    export GOOGLE_APP_PROJECT_CLIENT_ID='xxx'    export GOOGLE_APP_PROJECT_CLIENT_SECRET='yyy'You probably want to put the two lines above in your bashrc file.You can get the oauth2 client id and secret by the following steps:1) Choose a Google App project or create a new one in   https://console.developers.google.com/project2) After you have chosen a Google App Project, you then go to the tab &quot;APIs &amp;   auth&quot; on the left.3) Click on the APIs subtab, and search for the API needed for the script you   want to use. The help page of the script tells you what API your project   needs. For example, sorno_gtasks.py needs the Tasks API with the scope   'https://www.googleapis.com/auth/tasks'. Enable it.4) Go to the &quot;Credentials&quot; subtab, click &quot;Add credentials&quot;, choose &quot;OAuth 2.0   client ID&quot;, enter some information on the OAuth consent screen if prompted.   In that screen, only email address and product name are required to be   filled out. For the *Application type*, choose &quot;Other&quot;.5) After the credentials is created, click on it and you should see your   **Client ID** and **Client secret** there.Troubleshooting~~~~~~~~~~~~~~~If you are getting some import error when running the script, make sure youhave the newest Google API Client Library for Python. You can find theinstallation instruction here:https://developers.google.com/api-client-library/python/start/installationDevelopment-----------Start~~~~~A sample of a script can be obtained from *python/script_template.py* inhttps://github.com/hermantai/samples.Unit testing~~~~~~~~~~~~You can run the unit tests in the *scripts/tests* directory. First, set up thetesting environment by running::    $ source setup_test_env.shIf you have installed sorno-py-scripts in your machine, the *sorno* libraryfrom the installation is used instead of your local changes because ofeasy-install messing with the search path. In that case you need to eitherremove the egg manually or bump up the version and install it with your localchanges to override the existing version.Then you can run individual unit tests with::    $ python scripts/tests/test_xxx.pyDeployment~~~~~~~~~~The only deployment destinations for now is github and PyPI. In github, thisproject resides in the sorno-py-scripts project:https://github.com/hermantai/sorno-py-scriptsTo deploy to PyPI, first install twine::    $ pip install twineThen you can use the script to deploy to PyPI::    $ ./pypi_deploy_with_twine.shUse **sudo** if you encounter permission issues when running the commands.Use the following if you get an error saying &quot;twine cannot be found&quot; eventwine is on your PATH::    sudo env &quot;PATH=$PATH&quot; ./pypi_deploy_with_twine.shIf twine does not work, use the old school::    $ ./pypi_deploy.sh</longdescription>
</pkgmetadata>