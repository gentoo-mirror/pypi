<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># alma-python-client[![Travis Build Status](https://travis-ci.org/alma/alma-python-client.svg?branch=main)](https://travis-ci.org/alma/alma-python-client) [![PyPI](https://img.shields.io/pypi/v/alma-client.svg)](https://pypi.python.org/pypi/alma-client)Python API Client for the Alma API.Support Python &gt;= 3.8## Install```bashpip install alma-client```## DemoWe support both a sync and async client.### Synchronous client```pythonfrom alma_client import Clientalma_client = Client.with_api_key(&quot;sk_test..&quot;)payments = alma_client.payments.fetch_all()for p in payments:    print(f&quot;{p.id}: Paiement en {len(p.payment_plan)} fois&quot;)payment_data = {    &quot;payment&quot;: {        &quot;purchase_amount&quot;: 10000,        &quot;return_url&quot;: &quot;http://merchant.com/payment-success&quot;,        &quot;shipping_address&quot;: {            &quot;first_name&quot;: &quot;Martin&quot;,            &quot;last_name&quot;: &quot;Dupond&quot;,            &quot;line1&quot;: &quot;1 rue de Rivoli&quot;,            &quot;postal_code&quot;: &quot;75004&quot;,            &quot;city&quot;: &quot;Paris&quot;        }    }}eligibility = alma_client.payments.eligibility(payment_data)if eligibility.eligible:    payment = alma_client.payments.create(payment_data)print(payment.raw_data)```### Asynchronous client```pythonfrom alma_client import AsyncClientalma_client = AsyncClient.with_api_key(&quot;sk_test..&quot;)payments = await alma_client.payments.fetch_all()for p in payments:    print(f&quot;{p.id}: Paiement en {len(p.payment_plan)} fois&quot;)payment_data = {    &quot;payment&quot;: {        &quot;purchase_amount&quot;: 10000,        &quot;return_url&quot;: &quot;http://merchant.com/payment-success&quot;,        &quot;shipping_address&quot;: {            &quot;first_name&quot;: &quot;Martin&quot;,            &quot;last_name&quot;: &quot;Dupond&quot;,            &quot;line1&quot;: &quot;1 rue de Rivoli&quot;,            &quot;postal_code&quot;: &quot;75004&quot;,            &quot;city&quot;: &quot;Paris&quot;        }    }}eligibility = await alma_client.payments.eligibility(payment_data)if eligibility.eligible:    payment = await alma_client.payments.create(payment_data)print(payment.raw_data)```# Changelog3.0.2 (2022-12-07)------------------- Fix dump for null-body requests.3.0.1 (2022-12-05)------------------- Configure credentials later in the flow.3.0.0 (2022-06-29)------------------**Breaking change**- Move the code from the `alma` namespace into the `alma_client` namespace.- Remove support for Python 3.6 and Python 3.72.0.2 (2022-06-22)------------------- Fix `potential-fraud` method URLs (#27)2.0.1 (2022-06-17)------------------- Adds `include_child_accounts` and `custom_fields` params to the DataExport creation endpoint2.0.0 (2021-08-12)------------------**Breaking changes**- Move from requests to HTTPX- Handle both sync and async python clients- Remove support for Python 3.5- Add support for Python 3.91.2.0 (2020-09-01)------------------- Add support for different authentication methods- Add Black &amp; isort checks on pull requests1.1.0 (2020-03-25)------------------- Add support for Python 3.5+1.0.1 (2020-03-24)------------------- Automatically detects the API mode from the api_key.1.0.0 (2020-03-24)------------------- Create a Python client for Alma- Handle Order entity for Payment- Handle the refund endpoint- Handle pagination for orders- Handle the send-sms API for payments.</longdescription>
</pkgmetadata>