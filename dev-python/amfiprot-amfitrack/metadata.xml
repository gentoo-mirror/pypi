<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>AmfiTrack extensions for the [Amfiprot](https://pypi.org/project/amfiprot/) package.# InstallationInstall (or update) with `pip`:```shellpip install -U amfiprot-amfitrack```# Usage exampleInstead of creating a generic `amfiprot.Device`, create an `amfitrack.Device` to get access to AmfiTrack specific functionality and payload interpretation:```pythonimport amfiprotimport amfiprot_amfitrack as amfitrackVENDOR_ID = 0xC17PRODUCT_ID_SENSOR = 0xD12PRODUCT_ID_SOURCE = 0xD01if __name__ == &quot;__main__&quot;:    conn = None    try:        conn = amfiprot.USBConnection(VENDOR_ID, PRODUCT_ID_SENSOR)    except:        try:            conn = amfiprot.USBConnection(VENDOR_ID, PRODUCT_ID_SOURCE)        except:            print(&quot;No Amfitrack device found&quot;)            exit()                nodes = conn.find_nodes()    print(f&quot;Found {len(nodes)} node(s).&quot;)    for node in nodes:        print(f&quot;[{node.tx_id}] {node.name}&quot;)    dev = amfitrack.Device(nodes[0])    conn.start()        cfg = dev.config.read_all()    dev.calibrate()    while True:        if dev.packet_available():            packet = dev.get_packet()            if type(packet.payload) == amfitrack.payload.EmfImuFrameIdPayload:                payload: amfitrack.payload.EmfImuFrameIdPayload = packet.payload                print(payload.emf)            else:                print(packet)```</longdescription>
</pkgmetadata>