<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========================================================================                          pyahocorasick========================================================================|build-appveyor| |build-ghactions| |docs|**pyahocorasick** is a fast and memory efficient library for exact or approximatemulti-pattern string search meaning that you can find multiple key stringsoccurrences at once in some input text.  The strings &quot;index&quot; can be built aheadof time and saved (as a pickle) to disk to reload and reuse later.  The libraryprovides an `ahocorasick` Python module that you can use as a plain dict-likeTrie or convert a Trie to an automaton for efficient Aho-Corasick search.**pyahocorasick** is implemented in C and tested on Python 3.6 and up.It works on 64 bits Linux, macOS and Windows.The license_ is BSD-3-Clause. Some utilities, such as tests and the pure Pythonautomaton are dedicated to the Public Domain.Testimonials=============`Many thanks for this package. Wasn't sure where to leave a thank you note butthis package is absolutely fantastic in our application where we have a libraryof 100k+ CRISPR guides that we have to count in a stream of millions of DNAsequencing reads. This package does it faster than the previous C program weused for the purpose and helps us stick to just Python code in our pipeline.`Miika (AstraZeneca Functional Genomics Centre)https://github.com/WojciechMula/pyahocorasick/issues/145Download and source code========================You can fetch **pyahocorasick** from:- GitHub https://github.com/WojciechMula/pyahocorasick/- Pypi https://pypi.python.org/pypi/pyahocorasick/- Conda-Forge https://github.com/conda-forge/pyahocorasick-feedstock/The **documentation** is published at https://pyahocorasick.readthedocs.io/Quick start===========This module is written in C. You need a C compiler installed to compile nativeCPython extensions. To install::    pip install pyahocorasickThen create an Automaton::    &gt;&gt;&gt; import ahocorasick    &gt;&gt;&gt; automaton = ahocorasick.Automaton()You can use the Automaton class as a trie. Add some string keys and their associatedvalue to this trie. Here we associate a tuple of (insertion index, original string)as a value to each key string we add to the trie::    &gt;&gt;&gt; for idx, key in enumerate('he her hers she'.split()):    ...   automaton.add_word(key, (idx, key))Then check if some string exists in the trie::    &gt;&gt;&gt; 'he' in automaton    True    &gt;&gt;&gt; 'HER' in automaton    FalseAnd play with the ``get()`` dict-like method::    &gt;&gt;&gt; automaton.get('he')    (0, 'he')    &gt;&gt;&gt; automaton.get('she')    (3, 'she')    &gt;&gt;&gt; automaton.get('cat', 'not exists')    'not exists'    &gt;&gt;&gt; automaton.get('dog')    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;    KeyErrorNow convert the trie to an Aho-Corasick automaton to enable Aho-Corasick search::    &gt;&gt;&gt; automaton.make_automaton()Then search all occurrences of the keys (the needles) in an input string (our haystack).Here we print the results and just check that they are correct. The`Automaton.iter()` method return the results as two-tuples of the `end index` where atrie key was found in the input string and the associated `value` for this key. Herewe had stored as values a tuple with the original string and its trie insertionorder::    &gt;&gt;&gt; for end_index, (insert_order, original_value) in automaton.iter(haystack):    ...     start_index = end_index - len(original_value) + 1    ...     print((start_index, end_index, (insert_order, original_value)))    ...     assert haystack[start_index:start_index + len(original_value)] == original_value    ...    (1, 2, (0, 'he'))    (1, 3, (1, 'her'))    (1, 4, (2, 'hers'))    (4, 6, (3, 'she'))    (5, 6, (0, 'he'))You can also create an eventually large automaton ahead of time and `pickle` it tore-load later. Here we just pickle to a string. You would typically pickle to afile instead::    &gt;&gt;&gt; import pickle    &gt;&gt;&gt; pickled = pickle.dumps(automaton)    &gt;&gt;&gt; B = pickle.loads(pickled)    &gt;&gt;&gt; B.get('he')    (0, 'he')See also:* FAQ and Who is using pyahocorasick?   https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasickDocumentation=============The full documentation including the API overview and reference is published on`readthedocs &lt;http://pyahocorasick.readthedocs.io/&gt;`_.OverviewWith an `Aho-Corasick automaton &lt;http://en.wikipedia.org/wiki/Aho-Corasick%20algorithm&gt;`_you can efficiently search all occurrences of multiple strings (the needles) in aninput string (the haystack) making a single pass over the input string. Withpyahocorasick you can eventually build large automatons and pickle them to reusethem over and over as an indexed structure for fast multi pattern string matching.One of the advantages of an Aho-Corasick automaton is that the typical worst-caseand best-case **runtimes** are about the same and depends primarily on the sizeof the input string and secondarily on the number of matches returned.  Whilethis may not be the fastest string search algorithm in all cases, it can searchfor multiple strings at once and its runtime guarantees make it rather unique.Because pyahocorasick is based on a Trie, it stores redundant keys prefixes onlyonce using memory efficiently.A drawback is that it needs to be constructed and &quot;finalized&quot; ahead of timebefore you can search strings. In several applications where you search forseveral pre-defined &quot;needles&quot; in a variable &quot;haystacks&quot; this is actually anadvantage.**Aho-Corasick automatons** are commonly used for fast multi-pattern matchingin intrusion detection systems (such as snort), anti-viruses and many otherapplications that need fast matching against a pre-defined set of string keys.Internally an Aho-Corasick automaton is typically based on a Trie with extradata for failure links and an implementation of the Aho-Corasick searchprocedure.Behind the scenes the **pyahocorasick** Python library implements these two datastructures:  a `Trie &lt;http://en.wikipedia.org/wiki/trie&gt;`_ and an Aho-Corasickstring matching automaton. Both are exposed through the `Automaton` class.In addition to Trie-like and Aho-Corasick methods and data structures,**pyahocorasick** also implements dict-like methods: The pyahocorasick**Automaton** is a **Trie** a dict-like structure indexed by string keys eachassociated with a value object. You can use this to retrieve an associated valuein a time proportional to a string key length.pyahocorasick is available in two flavors:* a CPython **C-based extension**, compatible with Python 3 only. Use older  version 1.4.x for Python 2.7.x and 32 bits support.* a simpler pure Python module, compatible with Python 2 and 3. This is only  available in the source repository (not on Pypi) under the etc/py/ directory  and has a slightly different API.Unicode and bytes-----------------The type of strings accepted and returned by ``Automaton`` methods are either**unicode** or **bytes**, depending on a compile time settings (preprocessordefinition of ``AHOCORASICK_UNICODE`` as set in `setup.py`).The ``Automaton.unicode`` attributes can tell you how the library was built.On Python 3, unicode is the default... warning::    When the library is built with unicode support, an Automaton will store 2 or    4 bytes per letter, depending on your Python installation. When built    for bytes, only one byte per letter is needed.Build and install from PyPi===========================To install for common operating systems, use pip. Pre-built wheels should beavailable on Pypi at some point in the future::    pip install pyahocorasickTo build from sources you need to have a C compiler installed and configured whichshould be standard on Linux and easy to get on MacOSX.To build from sources, clone the git repository or download and extract the sourcearchive.Install `pip` (and its `setuptools` companion) and then run (in a `virtualenv` ofcourse!)::    pip install .If compilation succeeds, the module is ready to use.Support=======Support is available through the `GitHub issue tracker&lt;https://github.com/WojciechMula/pyahocorasick/issues&gt;`_ to report bugs or askquestions.Contributing============You can submit contributions through `GitHub pull requests&lt;https://github.com/WojciechMula/pyahocorasick/pull&gt;`_.- There is a Makefile with a default target that builds and runs tests.- The tests can run with a `pip installe -e .[testing] &amp;&amp; pytest -vvs`- See also the .github directory for CI tests and workflowAuthors=======The initial author and maintainer is Wojciech Mu≈Ça. `Philippe Ombredanne&lt;https://github.com/pombredanne&gt;`_ is Wojciech's sidekick and helps maintaining,and rewrote documentation, setup CI servers and did a some work to make thismodule more accessible to end users.Alphabetic list of authors:* **Andrew Grigorev*** **Bogdan*** **David Woakes*** **Edward Betts*** **Frankie Robertson*** **Frederik Petersen*** **gladtosee*** **INADA Naoki*** **Jan Fan*** **Pastafarianist*** **Philippe Ombredanne*** **Renat Nasyrov*** **Sylvain Zimmer*** **Xiaopeng Xu**and many others!This library would not be possible without help of many people, who contributed invarious ways.They created `pull requests &lt;https://github.com/WojciechMula/pyahocorasick/pull&gt;`_,reported bugs as `GitHub issues &lt;https://github.com/WojciechMula/pyahocorasick/issues&gt;`_or via direct messages, proposed fixes, or spent their valuable time on testing.Thank you.License=======This library is licensed under very liberal`BSD-3-Clause &lt;http://spdx.org/licenses/BSD-3-Clause.html&gt;`_ license. Someportions of the code are dedicated to the public domain such as the pure Pythonautomaton and test code.Full text of license is available in LICENSE file.Other Aho-Corasick implementations for Python you can consider==============================================================While **pyahocorasick** tries to be the finest and fastest Aho Corasick libraryfor Python you may consider these other libraries:* `py_aho_corasick &lt;https://github.com/JanFan/py-aho-corasick&gt;`_ by Jan * Written in pure Python. * Poor performance.* `ahocorapy &lt;https://github.com/abusix/ahocorapy&gt;`_ by abusix * Written in pure Python. * Better performance than py-aho-corasick. * Using pypy, ahocorapy's search performance is only slightly worse than pyahocorasick's. * Performs additional suffix shortcutting (more setup overhead, less search overhead for suffix lookups). * Includes visualization tool for resulting automaton (using pygraphviz). * MIT-licensed, 100% test coverage, tested on all major python versions (+ pypy)* `noaho &lt;https://github.com/JDonner/NoAho&gt;`_ by Jeff Donner * Written in C. Does not return overlapping matches. * Does not compile on Windows (July 2016). * No support for the pickle protocol.* `acora &lt;https://github.com/scoder/acora&gt;`_ by Stefan Behnel * Written in Cython. * Large automaton may take a long time to build (July 2016) * No support for a dict-like protocol to associate a value to a string key.* `ahocorasick &lt;https://hkn.eecs.berkeley.edu/~dyoo/python/ahocorasick/&gt;`_ by Danny Yoo * Written in C. * seems unmaintained (last update in 2005). * GPL-licensed... |build-appveyor| image:: https://ci.appveyor.com/api/projects/status/github/WojciechMula/pyahocorasick?branch=master&amp;svg=true   :target: https://ci.appveyor.com/project/WojciechMula/pyahocorasick   :alt: Appveyor Windows Master branch tests status.. |build-ghactions| image:: https://github.com/WojciechMula/pyahocorasick/actions/workflows/test-and-build.yml/badge.svg   :target: https://github.com/WojciechMula/pyahocorasick/actions/workflows/test-and-build.yml   :alt: GitHub Action build on test -  Master branch status.. |docs| image:: https://readthedocs.org/projects/pyahocorasick/badge/?version=latest   :alt: Documentation Status   :target: https://pyahocorasick.readthedocs.io/en/latest/</longdescription>
</pkgmetadata>