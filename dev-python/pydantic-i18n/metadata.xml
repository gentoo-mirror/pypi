<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://pydantic-i18n.boardpack.org/&quot;&gt;&lt;img src=&quot;https://pydantic-i18n.boardpack.org/img/logo-white.png&quot; alt=&quot;pydantic-i18n&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;pydantic-i18n is an extension to support an i18n for the pydantic error messages.&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/boardpack/pydantic-i18n/actions?query=workflow%3ATest&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://github.com/boardpack/pydantic-i18n/workflows/Test/badge.svg&quot; alt=&quot;Test&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://codecov.io/gh/boardpack/pydantic-i18n&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/codecov/c/github/boardpack/pydantic-i18n?color=%2334D058&quot; alt=&quot;Coverage&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/pydantic-i18n&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/pydantic-i18n?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://camo.githubusercontent.com/d91ed7ac7abbd5a6102cbe988dd8e9ac21bde0a73d97be7603b891ad08ce3479/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667&quot; data-canonical-src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://pycqa.github.io/isort/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/fe4a658dd745f746410f961ae45d44355db1cc0e4c09c7877d265c1380248943/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f253230696d706f7274732d69736f72742d2532333136373462313f7374796c653d666c6174266c6162656c436f6c6f723d656638333336&quot; alt=&quot;Imports: isort&quot; data-canonical-src=&quot;https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;amp;labelColor=ef8336&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;---**Documentation**: &lt;a href=&quot;https://pydantic-i18n.boardpack.org&quot; target=&quot;_blank&quot;&gt;https://pydantic-i18n.boardpack.org&lt;/a&gt;**Source Code**: &lt;a href=&quot;https://github.com/boardpack/pydantic-i18n&quot; target=&quot;_blank&quot;&gt;https://github.com/boardpack/pydantic-i18n&lt;/a&gt;---## RequirementsPython 3.8+pydantic-i18n has the next dependencies:* &lt;a href=&quot;https://pydantic-docs.helpmanual.io/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Pydantic&lt;/a&gt;* &lt;a href=&quot;http://babel.pocoo.org/en/latest/index.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Babel&lt;/a&gt;## Installation&lt;div class=&quot;termy&quot;&gt;```console$ pip install pydantic-i18n---&gt; 100%```&lt;/div&gt;## First stepsTo start to work with pydantic-i18n, you can just create a dictionary (orcreate any needed translations storage and then convert it into dictionary)and pass to the main `PydanticI18n` class.To translate messages, you need to pass result of `exception.errors()` call tothe `translate` method:```Python  hl_lines=&quot;14 24&quot;from pydantic import BaseModel, ValidationErrorfrom pydantic_i18n import PydanticI18ntranslations = {    &quot;en_US&quot;: {        &quot;field required&quot;: &quot;field required&quot;,    },    &quot;de_DE&quot;: {        &quot;field required&quot;: &quot;Feld erforderlich&quot;,    },}tr = PydanticI18n(translations)class User(BaseModel):    name: strtry:    User()except ValidationError as e:    translated_errors = tr.translate(e.errors(), locale=&quot;de_DE&quot;)print(translated_errors)# [#     {#         'loc': ('name',),#         'msg': 'Feld erforderlich',#         'type': 'value_error.missing'#     }# ]```_(This script is complete, it should run &quot;as is&quot;)_In the next chapters, you will see current available loaders and how toimplement your own loader.## Usage with FastAPIHere is a simple example usage with FastAPI.### Create itLet's create a `tr.py` file:```Python linenums=&quot;1&quot; hl_lines=&quot;13-22 25-26 32 35&quot;from fastapi import Requestfrom fastapi.exceptions import RequestValidationErrorfrom starlette.responses import JSONResponsefrom starlette.status import HTTP_422_UNPROCESSABLE_ENTITYfrom pydantic_i18n import PydanticI18n__all__ = [&quot;get_locale&quot;, &quot;validation_exception_handler&quot;]DEFAULT_LOCALE = &quot;en_US&quot;translations = {    &quot;en_US&quot;: {        &quot;field required&quot;: &quot;field required&quot;,    },    &quot;de_DE&quot;: {        &quot;field required&quot;: &quot;Feld erforderlich&quot;,    },}tr = PydanticI18n(translations)def get_locale(locale: str = DEFAULT_LOCALE) -&gt; str:    return localeasync def validation_exception_handler(    request: Request, exc: RequestValidationError) -&gt; JSONResponse:    current_locale = request.query_params.get(&quot;locale&quot;, DEFAULT_LOCALE)    return JSONResponse(        status_code=HTTP_422_UNPROCESSABLE_ENTITY,        content={&quot;detail&quot;: tr.translate(exc.errors(), current_locale)},    )````11-20`: As you see, we selected the simplest variant to store translations,you can use any that you need.`23-24`: To not include `locale` query parameter into every handler, wecreated a simple function `get_locale`, which we will include as a globaldependency with `Depends`.`29-36`: An example of overridden function to return translated messages of thevalidation exception.Now we are ready to create a FastAPI application:```Python linenums=&quot;1&quot; hl_lines=&quot;8 10&quot;from fastapi import Depends, FastAPI, Requestfrom fastapi.exceptions import RequestValidationErrorfrom pydantic import BaseModelimport trapp = FastAPI(dependencies=[Depends(tr.get_locale)])app.add_exception_handler(RequestValidationError, tr.validation_exception_handler)class User(BaseModel):    name: str@app.post(&quot;/user&quot;, response_model=User)def create_user(request: Request, user: User):    pass````8`: Add `get_locale` function as a global dependency.!!! note    If you need to use i18n only for specific part of your    application, you can add this `get_locale` function to the specific    `APIRouter`. More information about `APIRouter` you can find    [here](https://fastapi.tiangolo.com/tutorial/bigger-applications/#apirouter).`10`: Override default request validation error handler with`validation_exception_handler`.### Run itRun the server with:&lt;div class=&quot;termy&quot;&gt;```console$ uvicorn main:app --reloadINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)INFO:     Started reloader process [28720]INFO:     Started server process [28722]INFO:     Waiting for application startup.INFO:     Application startup complete.```&lt;/div&gt;&lt;details markdown=&quot;1&quot;&gt;&lt;summary&gt;About the command &lt;code&gt;uvicorn main:app --reload&lt;/code&gt;...&lt;/summary&gt;The command `uvicorn main:app` refers to:* `main`: the file `main.py` (the Python &quot;module&quot;).* `app`: the object created inside of `main.py` with the line `app = FastAPI()`.* `--reload`: make the server restart after code changes. Only do this for development.&lt;/details&gt;### Send itOpen your browser at &lt;a href=&quot;http://127.0.0.1:8000/docs#/default/create_user_user_post&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;http://127.0.0.1:8000/docs#/default/create_user_user_post&lt;/a&gt;.Send POST-request with empty body and `de_DE` locale query param via swagger UI or `curl`:```bash$ curl -X 'POST' \  'http://127.0.0.1:8000/user?locale=de_DE' \  -H 'accept: application/json' \  -H 'Content-Type: application/json' \  -d '{}'```### Check itAs a result, you will get the next response body:```json hl_lines=&quot;8&quot;{  &quot;detail&quot;: [    {      &quot;loc&quot;: [        &quot;body&quot;,        &quot;name&quot;      ],      &quot;msg&quot;: &quot;Feld erforderlich&quot;,      &quot;type&quot;: &quot;value_error.missing&quot;    }  ]}```If you don't mention the `locale` param, English locale will be used bydefault.## Get current error strings from Pydanticpydantic-i18n doesn't provide prepared translations of all current errormessages from pydantic, but you can use a special class method`PydanticI18n.get_pydantic_messages` to load original messages in English. Bydefault, it returns a `dict` object:```Pythonfrom pydantic_i18n import PydanticI18nprint(PydanticI18n.get_pydantic_messages())# {#     &quot;field required&quot;: &quot;field required&quot;,#     &quot;extra fields not permitted&quot;: &quot;extra fields not permitted&quot;,#     &quot;none is not an allowed value&quot;: &quot;none is not an allowed value&quot;,#     &quot;value is not none&quot;: &quot;value is not none&quot;,#     &quot;value could not be parsed to a boolean&quot;: &quot;value could not be parsed to a boolean&quot;,#     &quot;byte type expected&quot;: &quot;byte type expected&quot;,#     .....# }```_(This script is complete, it should run &quot;as is&quot;)_You can also choose JSON string or Babel format with `output` parameter values`&quot;json&quot;` and `&quot;babel&quot;`:```Pythonfrom pydantic_i18n import PydanticI18nprint(PydanticI18n.get_pydantic_messages(output=&quot;json&quot;))# {#     &quot;field required&quot;: &quot;field required&quot;,#     &quot;extra fields not permitted&quot;: &quot;extra fields not permitted&quot;,#     &quot;none is not an allowed value&quot;: &quot;none is not an allowed value&quot;,#     .....# }print(PydanticI18n.get_pydantic_messages(output=&quot;babel&quot;))# msgid &quot;field required&quot;# msgstr &quot;field required&quot;## msgid &quot;extra fields not permitted&quot;# msgstr &quot;extra fields not permitted&quot;## msgid &quot;none is not an allowed value&quot;# msgstr &quot;none is not an allowed value&quot;# ....```_(This script is complete, it should run &quot;as is&quot;)_## Loaderspydantic-i18n provides a list of loaders to use translations.### DictLoaderDictLoader is the simplest loader and default in PydanticI18n. So you canjust pass your translations dictionary without any other preparation steps.```Pythonfrom pydantic import BaseModel, ValidationErrorfrom pydantic_i18n import PydanticI18ntranslations = {    &quot;en_US&quot;: {        &quot;field required&quot;: &quot;field required&quot;,    },    &quot;de_DE&quot;: {        &quot;field required&quot;: &quot;Feld erforderlich&quot;,    },}tr = PydanticI18n(translations)class User(BaseModel):    name: strtry:    User()except ValidationError as e:    translated_errors = tr.translate(e.errors(), locale=&quot;de_DE&quot;)print(translated_errors)# [#     {#         'loc': ('name',),#         'msg': 'Feld erforderlich',#         'type': 'value_error.missing'#     }# ]```_(This script is complete, it should run &quot;as is&quot;)_### JsonLoaderJsonLoader needs to get the path to some directory with the next structure:```text|-- translations    |-- en_US.json    |-- de_DE.json    |-- ...```where e.g. `en_US.json` looks like:```json{    &quot;field required&quot;: &quot;field required&quot;}```and `de_DE.json`:```json{    &quot;field required&quot;: &quot;Feld erforderlich&quot;}```Then we can use `JsonLoader` to load our translations:```Pythonfrom pydantic import BaseModel, ValidationErrorfrom pydantic_i18n import PydanticI18n, JsonLoaderloader = JsonLoader(&quot;./translations&quot;)tr = PydanticI18n(loader)class User(BaseModel):    name: strtry:    User()except ValidationError as e:    translated_errors = tr.translate(e.errors(), locale=&quot;de_DE&quot;)print(translated_errors)# [#     {#         'loc': ('name',),#         'msg': 'Feld erforderlich',#         'type': 'value_error.missing'#     }# ]```_(This script is complete, it should run &quot;as is&quot;)_### BabelLoaderBabelLoader works in the similar way as JsonLoader. It also needs atranslations directory with the next structure:```text|-- translations    |-- en_US        |-- LC_MESSAGES            |-- messages.mo            |-- messages.po    |-- de_DE        |-- LC_MESSAGES            |-- messages.mo            |-- messages.po    |-- ...```Information about translations preparation you can find on the[Babel docs pages](http://babel.pocoo.org/en/latest/cmdline.html){:target=&quot;_blank&quot;} and e.g.from [this article](https://phrase.com/blog/posts/i18n-advantages-babel-python/#Message_Extraction){:target=&quot;_blank&quot;}.Here is an example of the `BabelLoader` usage:```Pythonfrom pydantic import BaseModel, ValidationErrorfrom pydantic_i18n import PydanticI18n, BabelLoaderloader = BabelLoader(&quot;./translations&quot;)tr = PydanticI18n(loader)class User(BaseModel):    name: strtry:    User()except ValidationError as e:    translated_errors = tr.translate(e.errors(), locale=&quot;de&quot;)print(translated_errors)# [#     {#         'loc': ('name',),#         'msg': 'Feld erforderlich',#         'type': 'value_error.missing'#     }# ]```_(This script is complete, it should run &quot;as is&quot;)_### Write your own loaderIf current loaders aren't suitable for you, it's possible to write your ownloader and use it with pydantic-i18n. To do it, you need to import`BaseLoader` and implement the next items: - property `locales` to get a list of locales; - method `get_translations` to get content for the specific locale.In some cases you will also need to change implementation of the `gettext`method.Here is an example of the loader to get translations from CSV files:```text|-- translations    |-- en_US.csv    |-- de_DE.csv    |-- ...````en_US.csv` content:```csvfield required,field required````de_DE.csv` content:```csvfield required,Feld erforderlich``````Pythonimport osfrom typing import List, Dictfrom pydantic import BaseModel, ValidationErrorfrom pydantic_i18n import PydanticI18n, BaseLoaderclass CsvLoader(BaseLoader):    def __init__(self, directory: str):        self.directory = directory    @property    def locales(self) -&gt; List[str]:        return [            filename[:-4]            for filename in os.listdir(self.directory)            if filename.endswith(&quot;.csv&quot;)        ]    def get_translations(self, locale: str) -&gt; Dict[str, str]:        with open(os.path.join(self.directory, f&quot;{locale}.csv&quot;)) as fp:            data = dict(line.strip().split(&quot;,&quot;) for line in fp)        return dataclass User(BaseModel):    name: strif __name__ == '__main__':    loader = CsvLoader(&quot;./translations&quot;)    tr = PydanticI18n(loader)    try:        User()    except ValidationError as e:        translated_errors = tr.translate(e.errors(), locale=&quot;de&quot;)    print(translated_errors)    # [    #     {    #         'loc': ('name',),    #         'msg': 'Feld erforderlich',    #         'type': 'value_error.missing'    #     }    # ]```_(This script is complete, it should run &quot;as is&quot;)_## AcknowledgmentsThanks to [Samuel Colvin](https://github.com/samuelcolvin) and his[pydantic](https://github.com/samuelcolvin/pydantic) library.Also, thanks to [Sebastián Ramírez](https://github.com/tiangolo) and his[FastAPI](https://github.com/tiangolo/fastapi) project,  some scripts anddocumentation structure and parts were used from there.## LicenseThis project is licensed under the terms of the MIT license.</longdescription>
</pkgmetadata>