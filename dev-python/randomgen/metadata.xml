<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># RandomGenThis package contains additional bit generators for NumPy's`Generator` and an `ExtendedGenerator` exposing methods not in `Generator`.**Continuous Integration**[![Build Status](https://dev.azure.com/kevinksheppard0207/kevinksheppard/_apis/build/status/bashtage.randomgen?branchName=main)](https://dev.azure.com/kevinksheppard0207/kevinksheppard/_build/latest?definitionId=2&amp;branchName=main)[![Appveyor Build Status](https://ci.appveyor.com/api/projects/status/46r9xsmuwi8bxsbj/branch/main?svg=true)](https://ci.appveyor.com/project/bashtage/randomgen/branch/main)[![Build Status](https://cloud.drone.io/api/badges/bashtage/randomgen/status.svg)](https://cloud.drone.io/bashtage/randomgen)[![FreeBSD Status on Cirrus](https://api.cirrus-ci.com/github/bashtage/randomgen.svg?branch=main)](https://cirrus-ci.com/github/bashtage/randomgen)**Coverage**[![codecov](https://codecov.io/gh/bashtage/randomgen/branch/main/graph/badge.svg)](https://codecov.io/gh/bashtage/randomgen)**Latest Release**[![PyPI version](https://badge.fury.io/py/randomgen.svg)](https://pypi.org/project/randomgen/)[![Anacnoda Cloud](https://anaconda.org/conda-forge/randomgen/badges/version.svg)](https://anaconda.org/conda-forge/randomgen)**License**[![NCSA License](https://img.shields.io/badge/License-NCSA-blue.svg)](https://opensource.org/licenses/NCSA)[![BSD License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)[![DOI](https://zenodo.org/badge/122181085.svg)](https://zenodo.org/badge/latestdoi/122181085)This is a library and generic interface for alternative randomgenerators in Python and NumPy.## New FeaturesThe the [development documentation](https://bashtage.github.io/randomgen/change-log.html) for the latest features,or the [stable documentation](https://bashtage.github.io/randomgen/devel/change-log.html) for the latest released features.# WARNINGS## Changes in v1.24``Generator`` and ``RandomState`` have been **removed**.## Changes from 1.18 to 1.19``Generator`` and ``RandomState`` have been officially deprecated in 1.19, and willwarn with a ``FutureWarning`` about their removal. They will also receive virtuallyno maintenance. It is now time to move to NumPy's ``np.random.Generator`` which hasfeatures not in ``randomstate.Generator`` and is maintained more actively.A few distributions that are not present in ``np.random.Generator`` have been movedto ``randomstate.ExtendedGenerator``:* `multivariate_normal`: which supports broadcasting* `uintegers`: fast 32 and 64-bit uniform integers* `complex_normal`: scalar complex normalsThere are no plans to remove any of the bit generators, e.g., ``AESCounter``,``ThreeFry``, or ``PCG64``. ### Changes from 1.16 to 1.18There are many changes between v1.16.x and v1.18.x. These reflect APIdecision taken in conjunction with NumPy in preparation of the coreof `randomgen` being used as the preferred random number generator inNumPy. These all issue `DeprecationWarning`s except for `BasicRNG.generator`which raises `NotImplementedError`. The C-API has also changed to reflectthe preferred naming the underlying Pseudo-RNGs, which are now known asbit generators (or `BigGenerator`s).## Future Plans* Add some distributions that are not supported in NumPy. _Ongoing_* Add any interesting bit generators I come across. _Recent additions include the DXSM and CM-DXSM variants of PCG64 and the LXM generator._## Included Pseudo Random Number GeneratorsThis module includes a number of alternative randomnumber generators in addition to the MT19937 that is included in NumPy.The RNGs include:* Cryptographic cipher-based random number generator based on AES, ChaCha20, HC128 and Speck128.* [MT19937](https://github.com/numpy/numpy/blob/main/numpy/random/mtrand/), the NumPy rng* [dSFMT](http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/) a  SSE2-aware version of the MT19937 generator that is especially fast at  generating doubles* [xoroshiro128+](https://prng.di.unimi.it/),  [xorshift1024*Ï†](https://prng.di.unimi.it/),  [xoshiro256**](https://prng.di.unimi.it/),  and [xoshiro512**](https://prng.di.unimi.it/)* [PCG64](https://www.pcg-random.org/)* ThreeFry and Philox from [Random123](https://www.deshawresearch.com/resources_random123.html)* Other cryptographic-based generators: `AESCounter`, `SPECK128`, `ChaCha`, and `HC128`.* Hardware (non-reproducible) random number generator on AMD64 using `RDRAND`.* Chaotic PRNGS: Small-Fast Chaotic (`SFC64`) and Jenkin's Small-Fast (`JSF`).  ## Status* Builds and passes all tests on:  * Linux 32/64 bit, Python 3.7, 3.8, 3.9, 3.10  * Linux (ARM/ARM64), Python 3.8  * OSX 64-bit, Python 3.9  * Windows 32/64 bit, Python 3.7, 3.8, 3.9, 3.10  * FreeBSD 64-bit## VersionThe package version matches the latest version of NumPy when the packageis released.## DocumentationDocumentation for the latest release is available on[my GitHub pages](https://bashtage.github.io/randomgen/). Documentation forthe latest commit (unreleased) is available under[devel](https://bashtage.github.io/randomgen/devel/).## RequirementsBuilding requires:* Python (3.6, 3.7, 3.8, 3.9, 3.10)* NumPy (1.17+)* Cython (0.29+)* tempita (0.5+), if not provided by CythonTesting requires pytest (6+).**Note:** it might work with other versions but only tested with theseversions.## Development and TestingAll development has been on 64-bit Linux, and it is regularly tested onTravis-CI (Linux-AMD64, Linux-PPC-LE, Linus-S390X, and OSX), Appveyor (Windows 32/64),Cirrus (FreeBSD) and Drone.io (ARM/ARM64 Linux).Tests are in place for all RNGs. The MT19937 is tested againstNumPy's implementation for identical results. It also passes NumPy'stest suite where still relevant.## InstallingEither install from PyPi using```bashpython -m pip install randomgen```or, if you want the latest version,```bashpython -m pip install git+https://github.com/bashtage/randomgen.git```or from a cloned repo,```bashpython -m pip install .```If you use conda, you can install using conda forge```bashconda install -c conda-forge randomgen```### SSE2`dSFTM` makes use of SSE2 by default.  If you have a very old computeror are building on non-x86, you can install using:```bashexport RANDOMGEN_NO_SSE2=1python -m pip install . ```### WindowsEither use a binary installer, or if building from scratch, usePython 3.6/3.7 with Visual Studio 2015 Build Toolx.## LicenseDual: BSD 3-Clause and NCSA, plus sub licenses for components.</longdescription>
</pkgmetadata>