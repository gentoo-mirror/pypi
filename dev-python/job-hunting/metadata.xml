<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># job-huntingA automated job finder that find and subscribe in job## instalationInstalled via pip:```pythonpip install job-hunting```or from source:```pythonpython setup.py```and make sure that you download [chromedriver](&quot;https://chromedriver.chromium.org/downloads&quot;) that matches your chrome browser versionand create a &quot;.env&quot; file in your root directory and input the chromdrive path on it```.envCHROMEDRIVER_PATH=&quot;Your chromedrive path&quot;```## Usage with vagas.com```Pythonfrom jobhunting.Models.vagasCom import VagasComdef searchVagasCom(targetJob, vagasUser, vagasPassword, headless):    vagas = VagasCom(chromedriver_path=&quot;C:\Selenium\chromedriver.exe&quot;, headless=headless)    targetJob = &quot;bots&quot;    job_site = vagas.appName        print(f'{job_site} Iniciando...')    try:        print(f'{job_site} Tentando logar...')        if not vagas.login(vagasUser, vagasPassword):            print(f'{job_site} Login inválido ou campos errados!')            vagas.quitSearch()            return         print(f'{job_site} logado com sucesso!')        print(f'{job_site} A selecionar vaga...')        vagas.insertJob(targetJob)        print(f'{job_site} Vaga selecionada!')        print(f'{job_site} A ajustar opções...')        vagas.searchOptions()        print(f'{job_site} Feito!')        print(f'{job_site} Listando Vagas...')        vagas.selectJobs()        print(f'{job_site} Feito!')        print(f&quot;{len(vagas.targetLink)} vagas encontradas!&quot;)        success = 0        fail = 0        print(f&quot;{job_site} Se inscrevendo nas vagas...&quot;)                try:            for index, target in enumerate(vagas.targetLink):                if target.startswith(&quot;https://&quot;) or target.startswith(&quot;http://&quot;):                    status = vagas.subscribeJob(target)                    if status == &quot;Vaga cadastrada!&quot;:                        success += 1                    else:                        fail += 1                    print(f&quot;{job_site} {index + 1} vaga, status: {status}&quot;)                except Exception:              print(f&quot;{job_site} erro ao se inscrever!&quot;)                finally:            vagas.quitSearch()        print(f'Vagas inscritas {success}')        print(f'Vagas ja inscritas anteriomente ou requer preenchimento adicional: {fail}')    except Exception as error:        print(&quot;Algum problema ocorreu e/ou as informações estão erradas!&quot;)        # vagas.quitSearch()        raise    except KeyboardInterrupt:        print('Saindo, volte sempre!')        vagas.quitSearch()        ```or with infojobs```pythonfrom jobhunting.Models.Infojobs import Infojobsdef searchInfojob(jobTarget, user, password, headless):    &quot;&quot;&quot;    Infojobs automatic subscription job    :jobTarget: target job to subsscribe    :login: infojobs user to login    :password: password to login    &quot;&quot;&quot;    jobs = Infojobs(chromedriver_path=&quot;Your chromedriver path&quot;, headless=headless)    site_job = jobs.appName    job_type = jobTarget    try:        print(f'{site_job} Iniciando...')        print(f'{site_job} Tentando logar...')                if not jobs.login(user, password):            print(f&quot;{site_job} Login inválido ou campos errados!&quot;)            jobs.quitSearch()            sys.exit()        print(f'{site_job} Selecionando vaga...')        jobs.searchList(job_type)        print(f'{site_job} Feito!, buscando vagas para {site_job}')        print(f'{site_job} Ajustando opções...')        jobs.searchOptions()        print(f&quot;{site_job} Feito!&quot;)        print(f'{site_job} Selecionando vagas disponiveis...')        jobs.getJob()        print(f'{site_job} {len(jobs.jobsLink)} Vagas selecionadas!')        success = 0        fail = 0        print(f&quot;{site_job} Se inscrevendo nas vagas...&quot;)                for index, target in enumerate(jobs.jobsLink):            if target.startswith(&quot;https://&quot;) or target.startswith(&quot;http://&quot;):                status = jobs.subscribeJob(target)                if status == &quot;Vaga cadastrada!&quot;:                    success += 1                else:                    fail += 1                print(f&quot;{site_job} {index + 1} vaga, status: {status}&quot;)        jobs.quitSearch()        print(f'Vagas inscritas {success}')        print(f'Vagas ja inscritas anteriomente ou requer preenchimento adicional: {fail}')    except Exception as error:        jobs.quitSearch()        print(&quot;Algum problema ocorreu e/ou as inforamções estão erradas!&quot;)        print(f&quot;Erro {error}, contate o adminstrador do sistema&quot;)    except KeyboardInterrupt:        print('Saindo, volte sempre!')        jobs.quitSearch()```</longdescription>
</pkgmetadata>