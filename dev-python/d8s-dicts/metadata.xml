<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Democritus Dicts[![PyPI](https://img.shields.io/pypi/v/d8s-dicts.svg)](https://pypi.python.org/pypi/d8s-dicts)[![CI](https://github.com/democritus-project/d8s-dicts/workflows/CI/badge.svg)](https://github.com/democritus-project/d8s-dicts/actions)[![Lint](https://github.com/democritus-project/d8s-dicts/workflows/Lint/badge.svg)](https://github.com/democritus-project/d8s-dicts/actions)[![codecov](https://codecov.io/gh/democritus-project/d8s-dicts/branch/main/graph/badge.svg?token=V0WOIXRGMM)](https://codecov.io/gh/democritus-project/d8s-dicts)[![The Democritus Project uses semver version 2.0.0](https://img.shields.io/badge/-semver%20v2.0.0-22bfda)](https://semver.org/spec/v2.0.0.html)[![The Democritus Project uses black to format code](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://choosealicense.com/licenses/lgpl-3.0/)Democritus functions&lt;sup&gt;[1]&lt;/sup&gt; for working with Python dictionaries.[1] Democritus functions are &lt;i&gt;simple, effective, modular, well-tested, and well-documented&lt;/i&gt; Python functions.We use `d8s` (pronounced &quot;dee-eights&quot;) as an abbreviation for `democritus` (you can read more about this [here](https://github.com/democritus-project/roadmap#what-is-d8s)).## Installation```pip install d8s-dicts```## UsageYou import the library like:```pythonfrom d8s_dicts import *```Once imported, you can use any of the functions listed below.## Functions  - ```python    def dict_filter_by_values(dictionary: dict, filter_function: Callable) -&gt; dict:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def dict_filter_by_keys(dictionary: dict, filter_function: Callable) -&gt; dict:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def is_dict(possible_dict: Any) -&gt; bool:        &quot;&quot;&quot;Return whether or not the possible_dict is a dictionary.&quot;&quot;&quot;    ```  - ```python    def dict_keys(dictionary: dict) -&gt; List[Any]:        &quot;&quot;&quot;Get the dictionary's keys (as a list).&quot;&quot;&quot;    ```  - ```python    def is_valid_dict_key(key: Any) -&gt; bool:        &quot;&quot;&quot;Return whether or not a dictionary could have the given key.&quot;&quot;&quot;    ```  - ```python    def dict_values(dictionary: dict) -&gt; List[Any]:        &quot;&quot;&quot;Get the dictionary's values (as a list).&quot;&quot;&quot;    ```  - ```python    def dict_has_value(dictionary: dict, value) -&gt; bool:        &quot;&quot;&quot;Return whether or not the dictionary has the given value (without evaluating the value).&quot;&quot;&quot;    ```  - ```python    def dict_key_types(dictionary: dict) -&gt; list:        &quot;&quot;&quot;Return a list with the type of each key in the dictionary.&quot;&quot;&quot;    ```  - ```python    def dict_value_types(dictionary: dict) -&gt; dict:        &quot;&quot;&quot;Return a dictionary with the same keys and the type of each value in place of the actual value.&quot;&quot;&quot;    ```  - ```python    def dict_keys_with_value(dictionary: dict, value):        &quot;&quot;&quot;Find the key(s) in the dictionary which have the given value.&quot;&quot;&quot;    ```  - ```python    def dict_sort_by_keys(dictionary: dict, **kwargs) -&gt; collections.OrderedDict:        &quot;&quot;&quot;Sort the dictionary based on the dictionary's keys.&quot;&quot;&quot;    ```  - ```python    def dict_sort_by_values(dictionary: dict, **kwargs) -&gt; collections.OrderedDict:        &quot;&quot;&quot;Sort the dictionary based on the dictionary's values.&quot;&quot;&quot;    ```  - ```python    def dicts_sort_by_value_at_key(dictionaries: List[Dict[Any, Any]], key, **kwargs) -&gt; List[Dict[Any, Any]]:        &quot;&quot;&quot;Sort the given dictionaries (we are assuming that we get a list of dictionaries) based on each dictionary's value at the given key.&quot;&quot;&quot;    ```  - ```python    def dict_flip(dictionary: dict, *, flatten_values: bool = False, flip_lists_and_sets: bool = False) -&gt; dict:        &quot;&quot;&quot;Flip the dictionary's keys and values; all of the values become keys and keys become values.&quot;&quot;&quot;    ```  - ```python    def dict_delistify_values(dictionary: dict) -&gt; dict:        &quot;&quot;&quot;For all values in the given dictionary that are lists whose lengths are one, replace the list of length one with the value in the list.&quot;&quot;&quot;    ```  - ```python    def dict_examples(n: int = 10, **kwargs) -&gt; List[Dict[Any, Any]]:        &quot;&quot;&quot;Create n dictionary examples.&quot;&quot;&quot;    ```  - ```python    def dict_add(dictionary: Dict[Any, List[Any]], key: Any, value: Any) -&gt; Dict[Any, List[Any]]:        &quot;&quot;&quot;Add the given value to the dictionary at the given key. This function expects that all values of the dictionary parameter are lists.&quot;&quot;&quot;    ```  - ```python    def dicts_diffs(dictionary_a: dict, dictionary_b: dict) -&gt; list:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def dict_copy_value_at_key(dictionary: dict, key: Any, new_key: Any) -&gt; dict:        &quot;&quot;&quot;Copy the value at the given key into the new key.&quot;&quot;&quot;    ```  - ```python    def dict_move_value_at_key(dictionary: dict, old_key: Any, new_key: Any) -&gt; dict:        &quot;&quot;&quot;Move the given key and its values into the new key.&quot;&quot;&quot;    ```  - ```python    def dict_key_delete(dictionary: dict, key: Any) -&gt; dict:        &quot;&quot;&quot;Delete the given key from the given dictionary.&quot;&quot;&quot;    ```  - ```python    def dict_delete_items(dictionary: dict, values_to_delete: List[Any] = None, keys_to_delete: List[Any] = None) -&gt; dict:        &quot;&quot;&quot;Delete all items from the dictionary if the item's value is in values_to_delete or the item's key is in keys_to_delete.&quot;&quot;&quot;    ```  - ```python    def dict_delete_empty_values(dictionary: dict) -&gt; dict:        &quot;&quot;&quot;Delete all key-values pairs from the dictionary if the value is an empty strings, empty list, zero, False or None.&quot;&quot;&quot;    ```  - ```python    def dict_keys_with_max_value(dictionary: dict) -&gt; List[DictKeyType]:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def dict_keys_with_min_value(dictionary: dict) -&gt; List[DictKeyType]:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def dict_value_with_max_key(dictionary: dict) -&gt; Any:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def dict_value_with_min_key(dictionary: dict) -&gt; Any:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```## DevelopmentðŸ‘‹ &amp;nbsp;If you want to get involved in this project, we have some short, helpful guides below:- [contribute to this project ðŸ¥‡][contributing]- [test it ðŸ§ª][local-dev]- [lint it ðŸ§¹][local-dev]- [explore it ðŸ”­][local-dev]If you have any questions or there is anything we did not cover, please raise an issue and we'll be happy to help.## CreditsThis package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and Floyd Hightower's [Python project template](https://github.com/fhightower-templates/python-project-template).[contributing]: https://github.com/democritus-project/.github/blob/main/CONTRIBUTING.md#contributing-a-pr-[local-dev]: https://github.com/democritus-project/.github/blob/main/CONTRIBUTING.md#local-development-</longdescription>
</pkgmetadata>