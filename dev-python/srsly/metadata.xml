<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a href=&quot;https://explosion.ai&quot;&gt;&lt;img src=&quot;https://explosion.ai/assets/img/logo.svg&quot; width=&quot;125&quot; height=&quot;125&quot; align=&quot;right&quot; /&gt;&lt;/a&gt;# srsly: Modern high-performance serialization utilities for PythonThis package bundles some of the best Python serialization libraries into onestandalone package, with a high-level API that makes it easy to write codethat's correct across platforms and Pythons. This allows us to provide all theserialization utilities we need in a single binary wheel. Currently supports**JSON**, **JSONL**, **MessagePack**, **Pickle** and **YAML**.[![tests](https://github.com/explosion/srsly/actions/workflows/tests.yml/badge.svg)](https://github.com/explosion/srsly/actions/workflows/tests.yml)[![PyPi](https://img.shields.io/pypi/v/srsly.svg?style=flat-square&amp;logo=pypi&amp;logoColor=white)](https://pypi.python.org/pypi/srsly)[![conda](https://img.shields.io/conda/vn/conda-forge/srsly.svg?style=flat-square&amp;logo=conda-forge&amp;logoColor=white)](https://anaconda.org/conda-forge/srsly)[![GitHub](https://img.shields.io/github/release/explosion/srsly/all.svg?style=flat-square&amp;logo=github)](https://github.com/explosion/srsly)[![Python wheels](https://img.shields.io/badge/wheels-%E2%9C%93-4c1.svg?longCache=true&amp;style=flat-square&amp;logo=python&amp;logoColor=white)](https://github.com/explosion/wheelwright/releases)## MotivationSerialization is hard, especially across Python versions and multiple platforms.After dealing with many subtle bugs over the years (encodings, locales, largefiles) our libraries like [spaCy](https://github.com/explosion/spaCy) and[Prodigy](https://prodi.gy) had steadily grown a number of utility functions towrap the multiple serialization formats we need to support (especially `json`,`msgpack` and `pickle`). These wrapping functions ended up duplicated across ourcodebases, so we wanted to put them in one place.At the same time, we noticed that having a lot of small dependencies was makingmaintenance harder, and making installation slower. To solve this, we've made`srsly` standalone, by including the component packages directly within it. Thisway we can provide all the serialization utilities we need in a single binarywheel.`srsly` currently includes forks of the following packages:- [`ujson`](https://github.com/esnme/ultrajson)- [`msgpack`](https://github.com/msgpack/msgpack-python)- [`msgpack-numpy`](https://github.com/lebedov/msgpack-numpy)- [`cloudpickle`](https://github.com/cloudpipe/cloudpickle)- [`ruamel.yaml`](https://github.com/pycontribs/ruamel-yaml) (without unsafe  implementations!)## Installation&gt; ‚ö†Ô∏è Note that `v2.x` is only compatible with **Python 3.6+**. For 2.7+&gt; compatibility, use `v1.x`.`srsly` can be installed from pip. Before installing, make sure that your `pip`,`setuptools` and `wheel` are up to date.```bashpython -m pip install -U pip setuptools wheelpython -m pip install srsly```Or from conda via conda-forge:```bashconda install -c conda-forge srsly```Alternatively, you can also compile the library from source. You'll need to makesure that you have a development environment with a Python distributionincluding header files, a compiler (XCode command-line tools on macOS / OS X orVisual C++ build tools on Windows), pip and git installed.Install from source:```bash# clone the repogit clone https://github.com/explosion/srslycd srsly# create a virtual environmentpython -m venv .envsource .env/bin/activate# update pippython -m pip install -U pip setuptools wheel# compile and install from sourcepython -m pip install .```For developers, install requirements separately and then install in editablemode without build isolation:```bash# install in editable modepython -m pip install -r requirements.txtpython -m pip install --no-build-isolation --editable .# run test suitepython -m pytest --pyargs srsly```## API### JSON&gt; üì¶ The underlying module is exposed via `srsly.ujson`. However, we normally&gt; interact with it via the utility functions only.#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.json_dumps`Serialize an object to a JSON string. Falls back to `json` if `sort_keys=True`is used (until it's fixed in `ujson`).```pythondata = {&quot;foo&quot;: &quot;bar&quot;, &quot;baz&quot;: 123}json_string = srsly.json_dumps(data)```| Argument    | Type | Description                                            || ----------- | ---- | ------------------------------------------------------ || `data`      | -    | The JSON-serializable data to output.                  || `indent`    | int  | Number of spaces used to indent JSON. Defaults to `0`. || `sort_keys` | bool | Sort dictionary keys. Defaults to `False`.             || **RETURNS** | str  | The serialized string.                                 |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.json_loads`Deserialize unicode or bytes to a Python object.```pythondata = '{&quot;foo&quot;: &quot;bar&quot;, &quot;baz&quot;: 123}'obj = srsly.json_loads(data)```| Argument    | Type        | Description                     || ----------- | ----------- | ------------------------------- || `data`      | str / bytes | The data to deserialize.        || **RETURNS** | -           | The deserialized Python object. |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.write_json`Create a JSON file and dump contents or write to standard output.```pythondata = {&quot;foo&quot;: &quot;bar&quot;, &quot;baz&quot;: 123}srsly.write_json(&quot;/path/to/file.json&quot;, data)```| Argument | Type         | Description                                            || -------- | ------------ | ------------------------------------------------------ || `path`   | str / `Path` | The file path or `&quot;-&quot;` to write to stdout.             || `data`   | -            | The JSON-serializable data to output.                  || `indent` | int          | Number of spaces used to indent JSON. Defaults to `2`. |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.read_json`Load JSON from a file or standard input.```pythondata = srsly.read_json(&quot;/path/to/file.json&quot;)```| Argument    | Type         | Description                                || ----------- | ------------ | ------------------------------------------ || `path`      | str / `Path` | The file path or `&quot;-&quot;` to read from stdin. || **RETURNS** | dict / list  | The loaded JSON content.                   |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.write_gzip_json`Create a gzipped JSON file and dump contents.```pythondata = {&quot;foo&quot;: &quot;bar&quot;, &quot;baz&quot;: 123}srsly.write_gzip_json(&quot;/path/to/file.json.gz&quot;, data)```| Argument | Type         | Description                                            || -------- | ------------ | ------------------------------------------------------ || `path`   | str / `Path` | The file path.                                         || `data`   | -            | The JSON-serializable data to output.                  || `indent` | int          | Number of spaces used to indent JSON. Defaults to `2`. |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.write_gzip_jsonl`Create a gzipped JSONL file and dump contents.```pythondata = [{&quot;foo&quot;: &quot;bar&quot;}, {&quot;baz&quot;: 123}]srsly.write_gzip_json(&quot;/path/to/file.jsonl.gz&quot;, data)```| Argument          | Type         | Description                                                                                                                                                                                                             || ----------------- | ------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || `path`            | str / `Path` | The file path.                                                                                                                                                                                                          || `lines`           | -            | The JSON-serializable contents of each line.                                                                                                                                                                            || `append`          | bool         | Whether or not to append to the location. Appending to .gz files is generally not recommended, as it doesn't allow the algorithm to take advantage of all data when compressing - files may hence be poorly compressed. || `append_new_line` | bool         | Whether or not to write a new line before appending to the file.                                                                                                                                                        |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.read_gzip_json`Load gzipped JSON from a file.```pythondata = srsly.read_gzip_json(&quot;/path/to/file.json.gz&quot;)```| Argument    | Type         | Description              || ----------- | ------------ | ------------------------ || `path`      | str / `Path` | The file path.           || **RETURNS** | dict / list  | The loaded JSON content. |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.read_gzip_jsonl`Load gzipped JSONL from a file.```pythondata = srsly.read_gzip_jsonl(&quot;/path/to/file.jsonl.gz&quot;)```| Argument    | Type         | Description               || ----------- | ------------ | ------------------------- || `path`      | str / `Path` | The file path.            || **RETURNS** | dict / list  | The loaded JSONL content. |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.write_jsonl`Create a JSONL file (newline-delimited JSON) and dump contents line by line, orwrite to standard output.```pythondata = [{&quot;foo&quot;: &quot;bar&quot;}, {&quot;baz&quot;: 123}]srsly.write_jsonl(&quot;/path/to/file.jsonl&quot;, data)```| Argument          | Type         | Description                                                                                                            || ----------------- | ------------ | ---------------------------------------------------------------------------------------------------------------------- || `path`            | str / `Path` | The file path or `&quot;-&quot;` to write to stdout.                                                                             || `lines`           | iterable     | The JSON-serializable lines.                                                                                           || `append`          | bool         | Append to an existing file. Will open it in `&quot;a&quot;` mode and insert a newline before writing lines. Defaults to `False`. || `append_new_line` | bool         | Defines whether a new line should first be written when appending to an existing file. Defaults to `True`.             |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.read_jsonl`Read a JSONL file (newline-delimited JSON) or from JSONL data from standardinput and yield contents line by line. Blank lines will always be skipped.```pythondata = srsly.read_jsonl(&quot;/path/to/file.jsonl&quot;)```| Argument   | Type       | Description                                                          || ---------- | ---------- | -------------------------------------------------------------------- || `path`     | str / Path | The file path or `&quot;-&quot;` to read from stdin.                           || `skip`     | bool       | Skip broken lines and don't raise `ValueError`. Defaults to `False`. || **YIELDS** | -          | The loaded JSON contents of each line.                               |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.is_json_serializable`Check if a Python object is JSON-serializable.```pythonassert srsly.is_json_serializable({&quot;hello&quot;: &quot;world&quot;}) is Trueassert srsly.is_json_serializable(lambda x: x) is False```| Argument    | Type | Description                              || ----------- | ---- | ---------------------------------------- || `obj`       | -    | The object to check.                     || **RETURNS** | bool | Whether the object is JSON-serializable. |### msgpack&gt; üì¶ The underlying module is exposed via `srsly.msgpack`. However, we normally&gt; interact with it via the utility functions only.#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.msgpack_dumps`Serialize an object to a msgpack byte string.```pythondata = {&quot;foo&quot;: &quot;bar&quot;, &quot;baz&quot;: 123}msg = srsly.msgpack_dumps(data)```| Argument    | Type  | Description            || ----------- | ----- | ---------------------- || `data`      | -     | The data to serialize. || **RETURNS** | bytes | The serialized bytes.  |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.msgpack_loads`Deserialize msgpack bytes to a Python object.```pythonmsg = b&quot;\x82\xa3foo\xa3bar\xa3baz{&quot;data = srsly.msgpack_loads(msg)```| Argument    | Type  | Description                                                                             || ----------- | ----- | --------------------------------------------------------------------------------------- || `data`      | bytes | The data to deserialize.                                                                || `use_list`  | bool  | Don't use tuples instead of lists. Can make deserialization slower. Defaults to `True`. || **RETURNS** | -     | The deserialized Python object.                                                         |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.write_msgpack`Create a msgpack file and dump contents.```pythondata = {&quot;foo&quot;: &quot;bar&quot;, &quot;baz&quot;: 123}srsly.write_msgpack(&quot;/path/to/file.msg&quot;, data)```| Argument | Type         | Description            || -------- | ------------ | ---------------------- || `path`   | str / `Path` | The file path.         || `data`   | -            | The data to serialize. |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.read_msgpack`Load a msgpack file.```pythondata = srsly.read_msgpack(&quot;/path/to/file.msg&quot;)```| Argument    | Type         | Description                                                                             || ----------- | ------------ | --------------------------------------------------------------------------------------- || `path`      | str / `Path` | The file path.                                                                          || `use_list`  | bool         | Don't use tuples instead of lists. Can make deserialization slower. Defaults to `True`. || **RETURNS** | -            | The loaded and deserialized content.                                                    |### pickle&gt; üì¶ The underlying module is exposed via `srsly.cloudpickle`. However, we&gt; normally interact with it via the utility functions only.#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.pickle_dumps`Serialize a Python object with pickle.```pythondata = {&quot;foo&quot;: &quot;bar&quot;, &quot;baz&quot;: 123}pickled_data = srsly.pickle_dumps(data)```| Argument    | Type  | Description                                            || ----------- | ----- | ------------------------------------------------------ || `data`      | -     | The object to serialize.                               || `protocol`  | int   | Protocol to use. `-1` for highest. Defaults to `None`. || **RETURNS** | bytes | The serialized object.                                 |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.pickle_loads`Deserialize bytes with pickle.```pythonpickled_data = b&quot;\x80\x04\x95\x19\x00\x00\x00\x00\x00\x00\x00}\x94(\x8c\x03foo\x94\x8c\x03bar\x94\x8c\x03baz\x94K{u.&quot;data = srsly.pickle_loads(pickled_data)```| Argument    | Type  | Description                     || ----------- | ----- | ------------------------------- || `data`      | bytes | The data to deserialize.        || **RETURNS** | -     | The deserialized Python object. |### YAML&gt; üì¶ The underlying module is exposed via `srsly.ruamel_yaml`. However, we&gt; normally interact with it via the utility functions only.#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.yaml_dumps`Serialize an object to a YAML string. See the[`ruamel.yaml` docs](https://yaml.readthedocs.io/en/latest/detail.html?highlight=indentation#indentation-of-block-sequences)for details on the indentation format.```pythondata = {&quot;foo&quot;: &quot;bar&quot;, &quot;baz&quot;: 123}yaml_string = srsly.yaml_dumps(data)```| Argument          | Type | Description                                || ----------------- | ---- | ------------------------------------------ || `data`            | -    | The JSON-serializable data to output.      || `indent_mapping`  | int  | Mapping indentation. Defaults to `2`.      || `indent_sequence` | int  | Sequence indentation. Defaults to `4`.     || `indent_offset`   | int  | Indentation offset. Defaults to `2`.       || `sort_keys`       | bool | Sort dictionary keys. Defaults to `False`. || **RETURNS**       | str  | The serialized string.                     |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.yaml_loads`Deserialize unicode or a file object to a Python object.```pythondata = 'foo: bar\nbaz: 123'obj = srsly.yaml_loads(data)```| Argument    | Type       | Description                     || ----------- | ---------- | ------------------------------- || `data`      | str / file | The data to deserialize.        || **RETURNS** | -          | The deserialized Python object. |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.write_yaml`Create a YAML file and dump contents or write to standard output.```pythondata = {&quot;foo&quot;: &quot;bar&quot;, &quot;baz&quot;: 123}srsly.write_yaml(&quot;/path/to/file.yml&quot;, data)```| Argument          | Type         | Description                                || ----------------- | ------------ | ------------------------------------------ || `path`            | str / `Path` | The file path or `&quot;-&quot;` to write to stdout. || `data`            | -            | The JSON-serializable data to output.      || `indent_mapping`  | int          | Mapping indentation. Defaults to `2`.      || `indent_sequence` | int          | Sequence indentation. Defaults to `4`.     || `indent_offset`   | int          | Indentation offset. Defaults to `2`.       || `sort_keys`       | bool         | Sort dictionary keys. Defaults to `False`. |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.read_yaml`Load YAML from a file or standard input.```pythondata = srsly.read_yaml(&quot;/path/to/file.yml&quot;)```| Argument    | Type         | Description                                || ----------- | ------------ | ------------------------------------------ || `path`      | str / `Path` | The file path or `&quot;-&quot;` to read from stdin. || **RETURNS** | dict / list  | The loaded YAML content.                   |#### &lt;kbd&gt;function&lt;/kbd&gt; `srsly.is_yaml_serializable`Check if a Python object is YAML-serializable.```pythonassert srsly.is_yaml_serializable({&quot;hello&quot;: &quot;world&quot;}) is Trueassert srsly.is_yaml_serializable(lambda x: x) is False```| Argument    | Type | Description                              || ----------- | ---- | ---------------------------------------- || `obj`       | -    | The object to check.                     || **RETURNS** | bool | Whether the object is YAML-serializable. |</longdescription>
</pkgmetadata>