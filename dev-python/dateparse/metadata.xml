<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Dateparse===========A python library for parsing natural language time descriptions. Installation-------------Dateparse is on PyPi; install with Pip: :code:`$ pip install dateparse`Usage------ &gt;&gt;&gt; import dateparse&gt;&gt;&gt; from datetime import date&gt;&gt;&gt; # The main use case is extracting a single date from a string&gt;&gt;&gt; dateparse.basic_parse(date.today(), &quot;a week from friday&quot;)DateResult(date=datetime.date(2023, 2, 10), start=0, end=15, content='a week from fri')&gt;&gt;&gt; # by default the first (leftmost) encountered date is returned&gt;&gt;&gt; dateparse.basic_parse(date.today(), &quot;a week from thursday and a week from friday&quot;)DateResult(date=datetime.date(2023, 2, 9), start=0, end=15, content='a week from thu') &gt;&gt;&gt; # the from_right option changes this&gt;&gt;&gt; dateparse.get_first(date.today(), &quot;a week from thursday and a week from friday&quot;)DateResult(date=datetime.date(2023, 2, 10), start=0, end=15, content='a week from fri')&gt;&gt;&gt; # default behavior for all parse functions is to get the next future date matching the expression&gt;&gt;&gt; # relative to the given base date&gt;&gt;&gt; # this can be changed with the allow_past option&gt;&gt;&gt; dateparse.basic_parse(date(1970, 9, 8), &quot;january 1&quot;, allow_past=True)DateResult(date=datetime.date(1970, 1, 1), start=0, end=9, content=' january 1')&gt;&gt;&gt; # parse_all gets all expressions in a list&gt;&gt;&gt; dateparse.parse_all(date.today(), &quot;a week from thursday and four days before march 11&quot;)[DateResult(date=datetime.date(2023, 2, 9), start=0, end=15, content='a week from thu'), DateResult(date=datetime.date(2023, 3, 7), start=24, end=50, content='four days before march 11')]&gt;&gt;&gt; # the default return type for dates is a DateResult, a simple named tuple containing the date's info&gt;&gt;&gt; # For convenience, there are also functions to just get the date&gt;&gt;&gt; dateparse.basic_date_parse(date.today(), &quot;february 9&quot;)datetime.date(2023, 2, 9)&gt;&gt;&gt; # parse_all_dates works in the same way&gt;&gt;&gt; # a DateParser object holds a specified baseline date &gt;&gt;&gt; # by default, assumes the baseline date is date.today()&gt;&gt;&gt; parser = dateparse.DateParser() &gt;&gt;&gt; # parses dates with a reference point of january 17, 2021 &gt;&gt;&gt; parser_january = dateparse.DateParser(base_date = date(2021, 17, 1)) &gt;&gt;&gt; # DateParser also supports named days by default&gt;&gt;&gt; parser.get_first(&quot;four days after halloween 2024&quot;)DateResult(date=datetime.date(2024, 11, 4), start=0, end=31, content='four days after october 31 2024')&gt;&gt;&gt; # You can also define your own custom named days as a string dictionary and pass it into the parser&gt;&gt;&gt; my_dates = {'my birthday' : 'june 11'}&gt;&gt;&gt; my_parser = dateparse.DateParser(named_days = my_dates)&gt;&gt;&gt; my_parser.get_first(&quot;a month before my birthday&quot;)DateResult(date=datetime.date(2023, 5, 14), start=0, end=22, content='a month before june 11')&gt;&gt;&gt; # DateParser.get_first and DateParser.get_last are convenience wrappers around basic_parse&gt;&gt;&gt; # to get the first or last expression, with the base date defined at initialization&gt;&gt;&gt; my_parser.get_first(&quot;a week from thurs and two months after friday&quot;)DateResult(date=datetime.date(2023, 2, 9), start=0, end=15, content='a week from thu')&gt;&gt;&gt; my_parser.get_last(&quot;a week from thurs and two months after friday&quot;)DateResult(date=datetime.date(2023, 4, 3), start=21, end=42, content='two months after fri')&gt;&gt;&gt; # DateParser.get_all and DateParser.get_all_dates wrap parse_all and parse_all_dates&gt;&gt;&gt; my_parser.get_all(&quot;a week from thurs and two months after friday&quot;)[DateResult(date=datetime.date(2023, 2, 9), start=0, end=15, content='a week from thu'), DateResult(date=datetime.date(2023, 4, 3), start=21, end=42, content='two months after fri')]&gt;&gt;&gt; my_parser.get_all_dates(&quot;a week from thurs and two months after friday&quot;)[datetime.date(2023, 2, 9), datetime.date(2023, 4, 3)]Other Info----------**This project is under active development.** The core API is unlikely to change much at this point, but the under-the-hood details are still very much in flux. Dateparse requires Python 3.10 or higher, thanks the author's neurotic devotion to type annotations. </longdescription>
</pkgmetadata>