<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># RCS-PYDANTIC&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/xncbf/rcs-pydantic/actions?query=workflow%3ATests+event%3Apush+branch%3Amain&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/xncbf/rcs-pydantic/workflows/Tests/badge.svg?event=push&amp;branch=main&quot; alt=&quot;Test&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/xncbf/rcs-pydantic&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/codecov/c/github/xncbf/rcs-pydantic?color=%2334D058&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/rcs-pydantic&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/rcs-pydantic?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/rcs-pydantic&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/rcs-pydantic.svg?color=%2334D058&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;- [RCS-PYDANTIC](#rcs-pydantic)  - [Introduce](#introduce)  - [Installation](#installation)  - [Dependency](#dependency)  - [Quick start](#quick-start)  - [제공되는 항목](#제공되는-항목)    - [제공되는 데이터 pydantic 모델](#제공되는-데이터-pydantic-모델)    - [제공되는 데이터 관련 Enum](#제공되는-데이터-관련-enum)    - [제공되는 에러 코드 Enum](#제공되는-에러-코드-enum)  - [Features](#features)    - [RcsMessage](#rcsmessage)    - [MessageException](#messageexception)  - [Contribution](#contribution)## Introduce한국 통신사 rcs 를 위한 pydantic 모델[fastapi](https://github.com/tiangolo/fastapi) 또는 [django-ninja](https://github.com/vitalik/django-ninja) 와 함께 사용할 때 유용합니다.## Installation```shpip install rcs-pydantic```## Dependency- python3.x (3.7 이상)- pydantic## Quick start```pyfrom rcs_pydantic import MessageInfo, RcsMessagemessage_info = {    &quot;replyId&quot;: &quot;B01RDSFR.KcNNLk67ui.FDSAF432153214&quot;,    &quot;eventType&quot;:&quot;newUser&quot;,    &quot;displayText&quot;: &quot;안녕&quot;,    &quot;userContact&quot;:&quot;01012341234&quot;,    &quot;chatbotId&quot;:&quot;0212351235&quot;,    &quot;timestamp&quot;: &quot;2020-03-03T04:43:55.867+09&quot;}rcs = {    &quot;message_base_id&quot;: &quot;SS000000&quot;,    &quot;service_type&quot;: &quot;RCSSMS&quot;,    &quot;agency_id&quot;: &quot;&lt;str: agency_id&gt;&quot;,    &quot;body&quot;: {        &quot;title&quot;: &quot;타이틀&quot;,        &quot;description&quot;: &quot;일반 RCSSMS 테스트 메시지 입니다.&quot;    }}rcs_message = RcsMessage(message_info=MessageInfo(**message_info), **rcs)``````sh&gt;&gt;&gt; print(rcs_message.send_info)common=CommonInfo(    msgId='4be0072f-0f05-4b3a-adc8-90d7ef309c53',    userContact='01012341234',    scheduleType=&lt;ScheduleTypeEnum.IMMEDIATE: 0&gt;,    msgServiceType=&lt;MessageServiceTypeEnum.RCS: 'rcs'&gt;)rcs=RcsInfo(    chatbotId='0212351235',    agencyId='&lt;str: agency_id&gt;',    messagebaseId='SS000000',    serviceType=&lt;ServiceTypeEnum.SMS: 'RCSSMS'&gt;,    expiryOption=&lt;ExpiryOptionEnum.AFTER_SETTING_TIMES: 2&gt;,    header=&lt;HeaderEnum.NOT_ADVERTISE: '0'&gt;,    copyAllowed=True,    body=RcsSMSBody(title='타이틀', description='일반 RCSSMS 테스트 메시지 입니다.'),)&gt;&gt;&gt;```## 제공되는 항목국내 통신사 RCS 문서에서 제공되는 모든 데이터를 pydandic 모델로써 지원합니다.### 제공되는 데이터 pydantic 모델```pythonRcsSMSBodyRcsLMSBodyRcsMMSBodyRcsCHATBodyRcsSMSCarouselBodyRcsLMSCarouselBodyRcsMMSCarouselBodyRcsCHATCarouselBodyLocationInfoShowLocationInfoOpenUrlInfoCreateCalendarEventInfoCopyToClipboardInfoComposeTextMessageInfoDialPhoneNumberInfoUrlActionInfoLocalBrowserActionInfoMapActionInfoCalendarActionInfoClipboardActionInfoComposeActionInfoDialActionInfoPostbackInfoActionInfoSuggestionInfoButtonInfoCommonInfoRcsInfoLegacyInfoStatusInfoQuerystatusInfoErrorInfoResponseErrorInfoResponseInfoTextMessageInfoFileMessageInfoGeolocationPushMessageUserLocationInfoMessageInfoSendInfoTokenInfo```### 제공되는 데이터 관련 Enum```pythonEventTypeEnumRCSMessageEnumMessageEnumMessageStatusEnumMnoInfoEnumBillEnumMessageServiceTypeEnumServiceTypeEnumLegacyServiceTypeEnumScheduleTypeEnumExpiryOptionEnumHeaderEnumActionEnum```### 제공되는 에러 코드 Enum```pythonErrorCodeEnumMaaPErrorCodeEnumRcsBizCenterErrorCodeEnumKTErrorCodeEnumLegacyErrorCodeEnum```## Features### RcsMessage`RcsMessage` 클래스는 서버로 수신된 `MessageInfo` 메세지 모델을 기반으로 메세지 전송을 위한 `SendInfo` 모델을 만듭니다.```pyfrom rcs_pydantic import MessageInfo, RcsMessagemessage_info = {    &quot;replyId&quot;: &quot;B01RDSFR.KcNNLk67ui.FDSAF432153214&quot;,    &quot;eventType&quot;:&quot;newUser&quot;,    &quot;displayText&quot;: &quot;안녕&quot;,    &quot;userContact&quot;:&quot;01012341234&quot;,    &quot;chatbotId&quot;:&quot;0212351235&quot;,    &quot;timestamp&quot;: &quot;2020-03-03T04:43:55.867+09&quot;}rcs = {    &quot;message_base_id&quot;: &quot;SS000000&quot;,    &quot;service_type&quot;: &quot;RCSSMS&quot;,    &quot;agency_id&quot;: &quot;&lt;str: agency_id&gt;&quot;,    &quot;body&quot;: {        &quot;title&quot;: &quot;타이틀&quot;,        &quot;description&quot;: &quot;일반 RCSSMS 테스트 메시지 입니다.&quot;    }}rcs_message = RcsMessage(message_info=MessageInfo(**message_info), **rcs)```### MessageException`MessageException` 예외 클래스는 제공되는 모든 에러 코드 Enum 을 포함하는 예외 클래스입니다.다음과 같이 여러 Enum 코드중 한가지를 메세지로 반환합니다.```pythonfrom rcs_pydantic.errors import ErrorCodeEnumfrom rcs_pydantic.exceptions import MessageExceptiontry:    raise MessageException(ErrorCodeEnum.MISSING_AUTHORIZATION_HEADER.value[0])except MessageException as e:    print(f&quot;ERROR MESSAGE: {e}&quot;)ERROR MESSAGE: Valid access token in Authorization header is required for RESTful API calls.&gt;&gt;&gt;```다음과 같이 `has_value` 를 통해 특정 `Enum` 에 포함된 에러인지 확인할 수 있습니다.```python&gt;&gt;&gt; from rcs_pydantic.errors import ErrorCodeEnum... ErrorCodeEnum.has_value(40003)True&gt;&gt;&gt; ErrorCodeEnum.has_value(11111)False```## Contribution이 프로젝트는 기여를 환영합니다!패치를 제출하기 전에 issue 티켓을 먼저 제출해주세요.Pull request 는 `main` 브랜치로 머지되며 항상 사용 가능한 상태로 유지해야 합니다.모든 테스트 코드를 통과한 뒤 리뷰한 후 머지됩니다.</longdescription>
</pkgmetadata>