<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>*********xmlschema*********.. image:: https://img.shields.io/pypi/v/xmlschema.svg   :target: https://pypi.python.org/pypi/xmlschema/.. image:: https://img.shields.io/pypi/pyversions/xmlschema.svg   :target: https://pypi.python.org/pypi/xmlschema/.. image:: https://img.shields.io/pypi/implementation/xmlschema.svg   :target: https://pypi.python.org/pypi/xmlschema/.. image:: https://img.shields.io/badge/License-MIT-blue.svg   :alt: MIT License   :target: https://lbesson.mit-license.org/.. image:: https://img.shields.io/pypi/dm/xmlschema.svg   :target: https://pypi.python.org/pypi/xmlschema/.. xmlschema-introduction-startThe *xmlschema* library is an implementation of `XML Schema &lt;http://www.w3.org/2001/XMLSchema&gt;`_for Python (supports Python 3.7+).This library arises from the needs of a solid Python layer for processing XMLSchema based files for`MaX (Materials design at the Exascale) &lt;http://www.max-centre.eu&gt;`_  European project.A significant problem is the encoding and the decoding of the XML data filesproduced by different simulation software.Another important requirement is the XML data validation, in order to put theproduced data under control. The lack of a suitable alternative for Python inthe schema-based decoding of XML data has led to build this library. Obviouslythis library can be useful for other cases related to XML Schema based processing,not only for the original scope.The full `xmlschema documentation is available on &quot;Read the Docs&quot; &lt;http://xmlschema.readthedocs.io/en/latest/&gt;`_.Features========This library includes the following features:* Full XSD 1.0 and XSD 1.1 support* Building of XML schema objects from XSD files* Validation of XML instances against XSD schemas* Decoding of XML data into Python data and to JSON* Encoding of Python data and JSON to XML* Data decoding and encoding ruled by converter classes* An XPath based API for finding schema's elements and attributes* Support of XSD validation modes *strict*/*lax*/*skip** XML attacks protection using an XMLParser that forbids entities* Access control on resources addressed by an URL or filesystem path* XML data bindings based on DataElement class* Static code generation with Jinja2 templatesInstallation============You can install the library with *pip* in a Python 3.7+ environment::    pip install xmlschemaThe library uses the Python's ElementTree XML library and requires`elementpath &lt;https://github.com/brunato/elementpath&gt;`_ additional package.The base schemas of the XSD standards are included in the package for workingoffline and to speed-up the building of schema instances... xmlschema-introduction-endUsage=====Import the library and then create a schema instance using the path ofthe file containing the schema as argument:.. code-block:: pycon    &gt;&gt;&gt; import xmlschema    &gt;&gt;&gt; my_schema = xmlschema.XMLSchema('tests/test_cases/examples/vehicles/vehicles.xsd').. note::    For XSD 1.1 schemas use the class `XMLSchema11`, because the default class    `XMLSchema` is an alias of the XSD 1.0 validator class `XMLSchema10`.The schema can be used to validate XML documents:.. code-block:: pycon    &gt;&gt;&gt; my_schema.is_valid('tests/test_cases/examples/vehicles/vehicles.xml')    True    &gt;&gt;&gt; my_schema.is_valid('tests/test_cases/examples/vehicles/vehicles-1_error.xml')    False    &gt;&gt;&gt; my_schema.validate('tests/test_cases/examples/vehicles/vehicles-1_error.xml')    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;      File &quot;/home/brunato/Development/projects/xmlschema/xmlschema/validators/xsdbase.py&quot;, line 393, in validate        raise error    xmlschema.validators.exceptions.XMLSchemaValidationError: failed validating &lt;Element '{http://example.com/vehicles}cars' at 0x7f8032768458&gt; with XsdGroup(model='sequence').    Reason: character data between child elements not allowed!    Schema:      &lt;xs:sequence xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;            &lt;xs:element maxOccurs=&quot;unbounded&quot; minOccurs=&quot;0&quot; name=&quot;car&quot; type=&quot;vh:vehicleType&quot; /&gt;      &lt;/xs:sequence&gt;    Instance:      &lt;vh:cars xmlns:vh=&quot;http://example.com/vehicles&quot;&gt;        NOT ALLOWED CHARACTER DATA        &lt;vh:car make=&quot;Porsche&quot; model=&quot;911&quot; /&gt;        &lt;vh:car make=&quot;Porsche&quot; model=&quot;911&quot; /&gt;      &lt;/vh:cars&gt;Using a schema you can also decode the XML documents to nested dictionaries, withvalues that match to the data types declared by the schema:.. code-block:: pycon    &gt;&gt;&gt; import xmlschema    &gt;&gt;&gt; from pprint import pprint    &gt;&gt;&gt; xs = xmlschema.XMLSchema('tests/test_cases/examples/collection/collection.xsd')    &gt;&gt;&gt; pprint(xs.to_dict('tests/test_cases/examples/collection/collection.xml'))    {'@xsi:schemaLocation': 'http://example.com/ns/collection collection.xsd',     'object': [{'@available': True,                 '@id': 'b0836217462',                 'author': {'@id': 'PAR',                            'born': '1841-02-25',                            'dead': '1919-12-03',                            'name': 'Pierre-Auguste Renoir',                            'qualification': 'painter'},                 'estimation': Decimal('10000.00'),                 'position': 1,                 'title': 'The Umbrellas',                 'year': '1886'},                {'@available': True,                 '@id': 'b0836217463',                 'author': {'@id': 'JM',                            'born': '1893-04-20',                            'dead': '1983-12-25',                            'name': 'Joan Mir√≥',                            'qualification': 'painter, sculptor and ceramicist'},                 'position': 2,                 'title': None,                 'year': '1925'}]}Authors=======Davide Brunato and others who have contributed with code or with sample cases.License=======This software is distributed under the terms of the MIT License.See the file 'LICENSE' in the root directory of the presentdistribution, or http://opensource.org/licenses/MIT.</longdescription>
</pkgmetadata>