<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyWry Web Viewer![signal-2023-05-29-171646_002](https://github.com/OpenBB-finance/pywry/blob/main/assets/PyWry.png)Easily create HTML webviewers in python utilizing the [wry](https://github.com/tauri-apps/wry) library. Unlike many HTML viewers that exist for Python - Pywry allows you to run javacsript. PyWry is also a ~2mb footprint for Mac and Windows - Linux will require a few more libraries which are listed below.Please note: this library is currently in early alpha and is NOT ready for production use.## Installation---------------------PyWry is available on PyPI and can be installed with pip:```bashpip install pywry```---------------------For development, you can install from source with the following steps:- Clone the repository: `git clone https://github.com/OpenBB-finance/pywry.git`- Install rust: `curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh`- Create a virtual environment: `python -m venv venv`- Acitvate the environment: `source venv/bin/activate` (Unix) or `venv\Scripts\activate` (Windows)- Install dependencies: `pip install .[dev]`- Build the pip package: `maturin build`- Install the package: `pip install [file path from above] --force-reinstall`## Usage```pythonimport asyncioimport sysfrom pywry import PyWryasync def main_loop():    while True:        await asyncio.sleep(1)if __name__ == &quot;__main__&quot;:    try:        handler = PyWry()        handler.send_html(&quot;&lt;h1 style='color: red;'&gt;Welcome to PyWry!&lt;/h1&gt;&quot;)        handler.start()        # PyWry creates a new thread for the backend,        # so we need to run the main loop in the main thread.        # otherwise, the program will exit immediately.        handler.loop.run_until_complete(main_loop())    except KeyboardInterrupt:        print(&quot;Keyboard interrupt detected. Exiting...&quot;)        sys.exit(0)```## JSON KeysPyWry uses a JSON object to communicate between the python and rust backends and the javascriptfrontend. The following keys are available:| Key | Type | Description || --- | --- | --- || `html` | `Path \| str` | The path to the HTML file to be loaded, or HTML string. || `title` | `str` | The title of the window. || `icon` | `str \| Path` | The path to `png` icon to be used for the window. || `json_data` | `str \| dict` | A JSON string or dictionary to be passed to the javascript frontend. (see below) || `height` | `int` | The height of the window. || `width` | `int` | The width of the window. || `download_path` | `str \| Path` | The path to the download directory. |## JavascriptPyWry allows you to run javascript in the frontend. To do this, you can pass a dictionaryof data to the `json_data` key in the `send_html` method. This dictionary will be convertedto a JSON string and passed to the frontend. You can then access this data in the frontendby using the `window.json_data` object. For example:---------------------### Python```pythonfrom pathlib import Path# code from above ...# change send_html line to:        handler.send_html(            html=Path(__file__).parent / &quot;index.html&quot;, json_data={&quot;name&quot;: &quot;PyWry&quot;}        )```---------------------### HTML```html&lt;html&gt;    &lt;head&gt;        &lt;script&gt;            window.onload = () =&gt; {                // if you passed a JSON string, you will need to parse it first                if (typeof window.json_data === &quot;string&quot;) {                    window.json_data = JSON.parse(window.json_data);                }                document.getElementById(&quot;name&quot;).innerHTML = window.json_data.name;            };        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;h1 style='color: red;'&gt;Hello, &lt;span id=&quot;name&quot;&gt;&lt;/span&gt;!&lt;/h1&gt;    &lt;/body&gt;&lt;/html&gt;```---------------------## Platform-specific notesAll platforms use [TAO](https://github.com/tauri-apps/tao) to build the window, and wry re-exports it as an application module. Here is the underlying web engine each platform uses, and some dependencies you might need to install.### LinuxTao uses [gtk-rs](https://gtk-rs.org/) and its related libraries for window creation and wry also needs [WebKitGTK](https://webkitgtk.org/) for WebView. So please make sure the following packages are installed:#### Arch Linux / Manjaro```bashsudo pacman -S webkit2gtk```#### Debian / Ubuntu```bashsudo apt install libwebkit2gtk-4.0-dev```#### Fedora / CentOS / AlmaLinux```bashsudo dnf install gtk3-devel webkit2gtk3-devel```### macOSWebKit is native to macOS, so no additional dependencies are needed.### WindowsWebView2 provided by Microsoft Edge Chromium is used. So wry supports Windows 7, 8, 10 and 11.---------------------### Troubleshooting Linux#### `&quot;/lib/x86_64-linux-gnu/libgio-2.0.so.0: undefined symbol: g_module_open_full&quot;`This is a known issue with the `gio` library. You can fix it by installing the `libglib2.0-dev` package.PyWry is a project that aims to provide Python bindings for WRY, a cross-platform webview library. WRY is a trademark of the Tauri Program within the Commons Conservancy and PyWry is not officially endorsed or supported by them. PyWry is an independent and community-driven effort that respects the original goals and values of Tauri and WRY. PyWry does not claim any ownership or affiliation with WRY or the Tauri Program.</longdescription>
</pkgmetadata>