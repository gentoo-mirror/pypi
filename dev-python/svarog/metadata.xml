<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======Svarog======.. image:: https://img.shields.io/pypi/v/svarog.svg        :target: https://pypi.python.org/pypi/svarog.. image:: https://github.com/dswistowski/svarog/actions/workflows/tests.yml/badge.svg        :target: https://github.com/dswistowski/svarog/actions/workflows/tests.yml.. image:: https://readthedocs.org/projects/svarog/badge/?version=latest        :target: https://svarog.readthedocs.io/en/latest/?badge=latest        :alt: Documentation StatusSvarog allow to create object from non typed data. All it need is annotated `__init__` method:&gt;&gt;&gt; from svarog import forge... class A:...     def __init__(self, a: int, b: str):...       self._a = a...       self._b = b...    def __repr__(self):...        return f'A(a={self._a}, b=&quot;{self._b}&quot;)'&gt;&gt;&gt; forge(A, {&quot;a&quot;: 1, &quot;b&quot;: &quot;3&quot;})A(a=1, b=&quot;3&quot;)More complicated types as `Sequence`, `Mapping`, `Optional` are possible&gt;&gt;&gt; class A:...     def __init__(self, b: Sequence[int]):...         self._b = b...     def __repr__(self):...         return f'A(b={self._b})'&gt;&gt;&gt; forge(A, {&quot;b&quot;: &quot;3213&quot;})A(b=[3, 2, 1, 3])You can use forward refs:&gt;&gt;&gt; class WithRef:...    def __init__(self, child: Optional['WithRef']):...        self._child = child...    def __repr__(self):...        return f&quot;WithRef({self._child!r})&quot;&gt;&gt;&gt; forge(WithRef(WithRef(WithRef())))WithRef(WithRef(WithRef(None)))Objects are forged recursively:&gt;&gt;&gt; @dataclass... class A:...     b: 'B'...     c: 'C'... @dataclass... class B:...     number: int... @dataclass... class C:...     string: str&gt;&gt;&gt; forge(A, {'b': {'number': 42}, 'c': {'string': 'the-string'}})A(b=B(number=42), c=C(string='the-string'))You can register own forge for your classes:&gt;&gt;&gt; class FooType(Enum):...     LOREM = &quot;lorem&quot;...     IPSUM = &quot;ipsum&quot;...... class FooParams:...     types: ClassVar[Mapping[FooType, &quot;FooParams&quot;]] = {}...     def __init_subclass__(cls, type: FooType):...        cls.types[type] = cls......    @classmethod...    def for_type(cls, type):...        return cls.types[type]...... @dataclass... class LoremFooParams(FooParams, type=FooType.LOREM):...     lorem: str...... @dataclass... class IpsumFooParams(FooParams, type=FooType.IPSUM):...     ipsum: int...... @dataclass... class Foo:...     type: FooType...     params: FooParams......     @classmethod...     def forge(cls, _, data, forge):...         foo_type = forge(FooType, data[&quot;type&quot;])...         return Foo(...             type=forge(FooType, foo_type),...             params=forge(FooParams.for_type(foo_type), data[&quot;params&quot;])...         )...&gt;&gt;&gt; register_forge(Foo, Foo.forge)&gt;&gt;&gt; forge(Foo, {&quot;type&quot;: &quot;lorem&quot;, &quot;params&quot;: {&quot;lorem&quot;: &quot;foo-bar&quot;}})Foo(type=&lt;FooType.LOREM: 'lorem'&gt;, params=LoremFooParams(lorem='foo-bar'))&gt;&gt;&gt; forge(Foo, {&quot;type&quot;: &quot;ipsum&quot;, &quot;params&quot;: {&quot;ipsum&quot;: 42}})Foo(type=&lt;FooType.IPSUM: 'ipsum'&gt;, params=IpsumFooParams(ipsum=42))Support for CamelCase to snake_case convertion:&gt;&gt;&gt; class Snake:...     lorem_ipsum: int&gt;&gt;&gt; forge = Svarog(snake_case=True).forge&gt;&gt;&gt; forge(Snake, {&quot;LoremIpsum&quot;: 42})Snake(lorem_ipsum=42)* Free software: MIT license* Documentation: https://svarog.readthedocs.io.Features--------* Converts unstructured data into structured recursively  * Works with `dataclasses`  * Works with `Sequence`, `Mapping`, `Optional`  * Special conventers for types can be registered withCredits-------Some parts of this code, and concept borrowed from cattrs_ project.. _Cattrs: https://github.com/Tinche/cattrsThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template... _Cookiecutter: https://github.com/audreyr/cookiecutter.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage</longdescription>
</pkgmetadata>