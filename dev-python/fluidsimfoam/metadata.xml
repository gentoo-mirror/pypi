<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;# Fluidsimfoam[![PyPI](https://img.shields.io/pypi/v/fluidsimfoam)](https://pypi.org/project/fluidsimfoam/)[![Documentation Status](https://readthedocs.org/projects/fluidsimfoam/badge/?version=latest)](https://fluidsimfoam.readthedocs.io/en/latest/?badge=latest)Python framework for [OpenFOAM]&lt;/div&gt;&lt;!-- start-intro --&gt;[OpenFOAM] is a very popular open-source C++ [CFD] framework. WithFluidsimfoam, we try to **design and propose a new workflow for OpenFOAMbased on Python**. However, experienced OpenFOAM users won't be lost becauseFluidsimfoam produces in the end standard OpenFOAM cases and it's alwayspossible to come back to the standard OpenFOAM workflow.Fluidsimfoam can be seen as a workflow manager for OpenFOAM or a Pythonwrapper around OpenFOAM. It only uses OpenFOAM commands on the backgroundand is thus NOT a rewrite of OpenFOAM!Fluidsimfoam should be especially useful for:- automatisation of simulation launching for example for parametric studies or optimization,- programmatic generation of complex and parametrized input files (for example `blockMeshDict`) and initial conditions,- programmatic control of a simulation at runtime (an example  [here](https://foss.heptapod.net/fluiddyn/fluidsimfoam/-/tree/branch/default/doc/examples/scripts/2023sed-parametric)).However, Fluidsimfoam is not restricted to these usages and should beconvenient, especially for people knowing Python, for any OpenFOAM usages forwhich C++ programming is not needed.Working with OpenFOAM implies writting and modifying a lot of input filesdescribing a simulation. The method described in the official OpenFOAMdocumentations is to copy an existing simulation directory and to modify theinput files by hand.With Fluidsimfoam, we introduce the possibility to describe not only one case(as shown in the [OpenFOAM tutorials]), but sets of similar simulations. Thedescription of one set of simulations is done in Python (and possibly with[Jinja] templates) in a small Python package that we call a &quot;[Fluidsim] solver&quot;.```{warning}&quot;[Fluidsim] solver&quot; and &quot;OpenFOAM solvers&quot; are very different things. AFluidsim solver is a small Python package describing a set of simulations.Fluidsimfoam allows one to write Fluidsim solvers based for the simulationson OpenFOAM.```As shown in [our tutorials], with a Fluidsimfoam solver, it becomes very easy to- launch/restart simulations with Python scripts and terminal commands,- load simulations, read the associated parameters/data and produce nice figures/movies.There are open-source solvers (some of them [are included in our mainrepository](https://foss.heptapod.net/fluiddyn/fluidsimfoam/-/tree/branch/default/doc/examples))and it is not be difficult to write your own solver based on your OpenFOAMcases. For example, to produce a solver from an existing case, one can run```shfluidsimfoam-initiate-solver cylinder -c $FOAM_TUTORIALS/basic/potentialFoam/cylinder```This command creates a solver `fluidsimfoam-cylinder` that can be used to runthe simulation described in the [Flow around acylinder](https://www.openfoam.com/documentation/tutorial-guide/2-incompressible-flow/2.2-flow-around-a-cylinder)tutorial. But this solver can very easily be improved to be parametrized and toproduce some input files programmatically. For example, the mesh of thistutorial is produced with the `blockMesh` OpenFOAM utility and the`blockMeshDict` is quite complex and contains a `#codeStream` directive (whichimplies writting C++ and compilations). With Fluidsimfoam, you can avoid thisstep and produce the `blockMeshDict` programmatically with a nice Python APIand a nice mechanism to add and store parameters.The best way to use Fluidsimfoam is to write or use a solver adapted for yourparticular use case. However, one can also use Python functions and classesprovided by Fluidsimfoam for some common tasks, like parsing/writting inputfiles, modifying field files, writting `blockMeshDict` files, etc.Fluidsimfoam is now usable but still in quite early development. There arestill very low hangling fruits not yet implemented (for example, [restartutilities](https://foss.heptapod.net/fluiddyn/fluidsimfoam/-/issues/40),[production of figures andmovies](https://foss.heptapod.net/fluiddyn/fluidsimfoam/-/issues/38), etc.) andour documentation does not reflect what people can and will be able to do withthis tool. One goal is to get the equivalent of [Snek5000], our Fluidsimframework for the [CFD] code [Nek5000]. Looking at the [Snek5000] tutorialsshould give a good idea of what Fluidsimfoam will soon allow.```{admonition} ContributingThis project is young and we need any kind of feedback and [contributions].Don't be afraid that the project is not hosted on Github. If you think thatthis project is interesting please *star* [our repository onHeptapod](https://foss.heptapod.net/fluiddyn/fluidsimfoam) and/or [openissues](https://foss.heptapod.net/fluiddyn/fluidsimfoam/-/issues) withfeedback, feature requests or bug reports. Moreover, we would be very happy towelcome new core developers, so if you like OpenFOAM and Python, do nothesitate!```For our examples, we currently target OpenFOAM v2206 but it should be possibleto write Fluidsimfoam solvers targeting any recent OpenFOAM versions.[fluiddyn]: https://fluiddyn.readthedocs.io[fluidsim]: https://fluidsim.readthedocs.io[fluidfoam]: https://fluidfoam.readthedocs.io[openfoam]: https://openfoam.org/[OpenFOAM tutorials]: https://www.openfoam.com/documentation/tutorial-guide[nek5000]: https://nek5000.mcs.anl.gov/[snek5000]: https://snek5000.readthedocs.io[Jinja]: https://jinja.palletsprojects.com[contributions]: https://fluidsimfoam.readthedocs.io/en/latest/CONTRIBUTING.html[our tutorials]: https://fluidsimfoam.readthedocs.io/en/latest/tutorials.html[CFD]: https://en.wikipedia.org/wiki/Computational_fluid_dynamics&lt;!-- end-intro --&gt;See more in [Fluidsimfoam documentation](https://fluidsimfoam.readthedocs.org).## Install&lt;!-- start-install --&gt;Currently, it still makes sense to install Fluidsimfoam like we, thefluidsimfoam developers, install it, i.e. in a dedicated controlled virtualenvironment created by [Poetry]. After installing [Poetry] (for example withsomething like `pip install poetry`), the following commands should install andactivate the virtual environment:```shhg clone https://foss.heptapod.net/fluiddyn/fluidsimfoamcd fluidsimfoampoetry installpoetry shell```For better user experience with Matplotlib figures, you can also install with`poetry install --extra qt`.[Poetry]: https://python-poetry.org/docs/&lt;!-- end-install --&gt;## Related projects- [Fluidfoam] Another [Fluiddyn] package (like Fluidsimfoam) to use/plot OpenFOAM  data. Will be used by Fluidsimfoam.- [PyFoam] ([PyPI package](https://pypi.org/project/PyFoam/),  [hg repo](http://hg.code.sf.net/p/openfoam-extend/PyFoam)) Python utilities for  OpenFOAM. GNU GPL. Still maintained.- [PythonFlu] ([wiki](https://openfoamwiki.net/index.php/Contrib_pythonFlu))- [Swak4Foam] Popular set of utilities for OpenFOAM. Can be used in  Fluidsimfoam solvers.[PyFoam]: https://openfoamwiki.net/index.php/Contrib/PyFoam[PythonFlu]: http://pythonflu.wikidot.com/[Swak4Foam]: https://openfoamwiki.net/index.php/Contrib/swak4Foam</longdescription>
</pkgmetadata>