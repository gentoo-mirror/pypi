<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Easy progress reporting for Python==================================|pypi||demo|.. |pypi| image:: https://img.shields.io/pypi/v/progress.svg   :target: https://pypi.org/project/progress/.. |demo| image:: https://raw.github.com/verigak/progress/master/demo.gif   :alt: DemoBars----There are 7 progress bars to choose from:- ``Bar``- ``ChargingBar``- ``FillingSquaresBar``- ``FillingCirclesBar``- ``IncrementalBar``- ``PixelBar``- ``ShadyBar``To use them, just call ``next`` to advance and ``finish`` to finish:.. code-block:: python    from progress.bar import Bar    bar = Bar('Processing', max=20)    for i in range(20):        # Do some work        bar.next()    bar.finish()or use any bar of this class as a context manager:.. code-block:: python    from progress.bar import Bar    with Bar('Processing', max=20) as bar:        for i in range(20):            # Do some work            bar.next()The result will be a bar like the following: ::    Processing |#############                   | 42/100To simplify the common case where the work is done in an iterator, you canuse the ``iter`` method:.. code-block:: python    for i in Bar('Processing').iter(it):        # Do some workProgress bars are very customizable, you can change their width, their fillcharacter, their suffix and more:.. code-block:: python    bar = Bar('Loading', fill='@', suffix='%(percent)d%%')This will produce a bar like the following: ::    Loading |@@@@@@@@@@@@@                   | 42%You can use a number of template arguments in ``message`` and ``suffix``:==========  ================================Name        Value==========  ================================index       current valuemax         maximum valueremaining   max - indexprogress    index / maxpercent     progress * 100avg         simple moving average time per item (in seconds)elapsed     elapsed time in secondselapsed_td  elapsed as a timedelta (useful for printing as a string)eta         avg * remainingeta_td      eta as a timedelta (useful for printing as a string)==========  ================================Instead of passing all configuration options on instatiation, you can createyour custom subclass:.. code-block:: python    class FancyBar(Bar):        message = 'Loading'        fill = '*'        suffix = '%(percent).1f%% - %(eta)ds'You can also override any of the arguments or create your own:.. code-block:: python    class SlowBar(Bar):        suffix = '%(remaining_hours)d hours remaining'        @property        def remaining_hours(self):            return self.eta // 3600Spinners========For actions with an unknown number of steps you can use a spinner:.. code-block:: python    from progress.spinner import Spinner    spinner = Spinner('Loading ')    while state != 'FINISHED':        # Do some work        spinner.next()There are 5 predefined spinners:- ``Spinner``- ``PieSpinner``- ``MoonSpinner``- ``LineSpinner``- ``PixelSpinner``Installation============Download from PyPi.. code-block:: shell    pip install progressOther=====There are a number of other classes available too, please check the source orsubclass one of them to create your own.License=======progress is licensed under ISC</longdescription>
</pkgmetadata>