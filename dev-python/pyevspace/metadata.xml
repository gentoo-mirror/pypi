<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyEVSpace 0.14.2[![Github test action](https://github.com/qbizzle68/pyevspace/actions/workflows/test-builds.yml/badge.svg)](https://github.com/qbizzle68/pyevspace/actions)[![PyPi](https://img.shields.io/pypi/v/pyevspace?style=plastic)](https://pypi.org/project/pyevspace/#history)![Supported Python versions](https://img.shields.io/pypi/pyversions/pyevspace?style=plastic)[![License](https://img.shields.io/pypi/l/pyevspace?style-plastic)](https://opensource.org/licenses/MIT)PyEVSpace is a Python Euclidean vector space package containing typesand methods for representing vector quantites and fasilitating rotatingthem between reference frames. PyEVSpace is designed for 3-dimensionalspace only, which allows for optimum speed since size checks do notoccur.## DocumentationThe full documentation of this project with both Python and C APIs canbe found [here](https://qbizzle68.github.io/pyevspace/html/index.html).## InstallThe python module can be installed with```pythonpip install pyevspace```Alternatively the repository can be downloaded or cloned using:```bashgit clone https://github.com/qbizzle68/pyevspace.git```It can be used as is within Visual Studio, or built inplace using the*setup.py* if needed.## UsageTo use the module simply import the pyevspace module into your project:```pythonimport pyevspace as evsfrom math import pivec = evs.Vector(1, 2, 3)rotatedVec = evs.rotateAxisTo(evs.X_AXIS, pi/2)```Matrices can be created from iterables, where each iterable representsa row of the matrix```pythonimport pyevspace as evsmat = evs.Matrix((0, 0, 1), (0, -1, 0), (1, 0, 0))rotatedVec = evs.rotateMatrixFrom(mat, Vector(1, 1, 1))```The Order and Angles types can be used to create an Euler rotation matrix. All twelve Euler rotations are already defined in the module,so you shouldn't need to instantiate an Order object. The Anglesobject holds the angles for each rotation in the Euler rotation, inthe order of the axis rotations (in radians).```pythonimport pyevspace as evsangs = Angles(1.1, 4.5, 3.14)mat = getMatrixEuler(XYZ, angs)rotatedVec = mat * Vector(1, 0, 2)```There are many methods that handle the rotations for you, check theofficial documentation to learn more about them.## Examples### Examples of numeric operators```pythonv1 = Vector(1, 2, 3)v2 = Vector(4, 5, 6)print(v1 * 2)# prints [2, 4, 6]print(v1 + v2)# prints [5, 7, 9]print(v1 - v2)# prints [-3, -3, -3]```### Examples of vector and matrix operators```pythonv1 = Vector(1, 2, 3)v2 = Vector(4, 5, 6)m1 = Matrix(Vector(4, 2, 3), Vector(8, 5, 2), Vector(4, 2, 1))print(dot(v1, v2))# prints 32.0print(cross(v1, v2))# prints [ -3.00000, 6.00000, -3.00000 ]print(det(m1))# prints -8.0print(transpose(m1))# prints # ([4, 2, 3],# [8, 5, 2],# [4, 2, 1])```## License[MIT](https://choosealicense.com/licenses/mit/)</longdescription>
</pkgmetadata>