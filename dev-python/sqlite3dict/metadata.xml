<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sqlite3dictWrapper around sqlite3 which allows working simply with python dictionaries as well as combining it with sql syntax. ## InstallationUse the package manager [pip](https://pip.pypa.io/en/stable/) to install sqlite3dict.```bashpip install sqlite3dict```## Usage```pythonfrom sqlite3dict import Storagefrom datetime import datetime# ******************************************************************************# * Test# ******************************************************************************with Storage(&quot;test.sqlite&quot;) as store:    definitions = {        &quot;name&quot;: &quot;TEXT&quot;,         &quot;age&quot;: &quot;INTEGER&quot;,         &quot;amount&quot;: &quot;DOUBLE&quot;,         &quot;createdate&quot;: &quot;DATETIME&quot;,        &quot;resident&quot;: &quot;BOOLEAN&quot;    }    # This creates the table (collection) only if it does not exist already    collection = store.init_collection(&quot;test&quot;, definitions)    # Insert data    collection.insert({        &quot;name&quot;: &quot;John Doe&quot;,         &quot;age&quot;: 25,         &quot;amount&quot;: 100.23,         &quot;createdate&quot;: datetime.now(),        &quot;resident&quot;: True,        &quot;additional&quot;: {            &quot;prop1&quot;: 1,            &quot;prop2&quot;: 1,            &quot;other&quot;: [&quot;A&quot;, &quot;B&quot;]        }    })    collection.insert({        &quot;name&quot;: &quot;John Doe&quot;,         &quot;age&quot;: 10,         &quot;amount&quot;: 100.00,         &quot;createdate&quot;: datetime.now(),        &quot;resident&quot;: True    })    # Update inserted data by given criteria    collection.update().data({        &quot;createdate&quot;: datetime.now(),         &quot;age&quot;: 15,         &quot;amount&quot;: 99.38,         &quot;resident&quot;: False    }).where(&quot;age = 25&quot;).execute()    # Simple query for data    list = collection.query().where(&quot;age = 15&quot;).limit(10).offset(0).order(&quot;createdate&quot;, &quot;ASC&quot;).order(&quot;ID&quot;).execute()    for item in list:        print(&quot;item:&quot;, item)    # Delete data by given criteria    collection.delete().where(&quot;age = 15&quot;).execute()    # Native SQL query in case you still need it    items = store.query_native(&quot;select * from test&quot;)    for item in items:        print(&quot;native item:&quot;, item)    # Drop table (collection)        store.delete_collection(&quot;test&quot;) ```## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.## License[MIT](https://choosealicense.com/licenses/mit/)</longdescription>
</pkgmetadata>