<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://badge.fury.io/py/chalice-cognito-auth.svg    :target: https://badge.fury.io/py/chalice-cognito-auth.. image:: https://travis-ci.org/stealthycoin/chalice-cognito-auth.svg?branch=master    :target: https://travis-ci.org/stealthycoin/chalice-cognito-authPurpose=======A Library for setting up login routes in a Chalice app.Basic Usage===========Below is an example of a basic application making use of a Cognito User Pool.First set up a new Chalice app::  $ chalice new-project test-auth  $ cd test-authNext we add ``chalice-cognito-auth`` as a dependency::  $ echo &quot;chalice-cognito-auth&quot; &gt;&gt; requirements.txtNow update the ``app.py`` file to configure a default user pool handler... code:: python    from chalice import Chalice    import chalice_cognito_auth    app = Chalice(app_name='test-auth')    app.experimental_feature_flags.update(['BLUEPRINTS',    ])    user_pool_handler = chalice_cognito_auth.default_user_pool_handler()    app.register_blueprint(user_pool_handler.blueprint)    @app.route('/whoami', authorizer=user_pool_handler.auth)    def index():return {    'username': user_pool_handler.current_user}This will create a ``UserPoolHandler`` object using the environment variables``APP_CLIENT_ID`` for the Cognito Userpool application client id. ``POOL_ID``for the ID of the Cognito Userpool itself. And ``AWS_REGION`` for theregion. ``AWS_REGION`` is set by the AWS Lambda runtime, but the other two weneed to set ourselves. Update the file ``.chalice/config.json`` to looksomething like the following::    {&quot;version&quot;: &quot;2.0&quot;,&quot;app_name&quot;: &quot;test-auth&quot;,&quot;environment_variables&quot;: {    &quot;APP_CLIENT_ID&quot;: &quot;...client id here...&quot;,    &quot;POOL_ID&quot;: &quot;...pool id here...&quot;},&quot;stages&quot;: {    &quot;dev&quot;: {&quot;api_gateway_stage&quot;: &quot;api&quot;    }}    }Substitute the client id and pool id values for ones that match an existingcognito user pool you have and can use for testing.Now deploy the application using::  $ chalice deploy  Creating deployment package.  Updating policy for IAM role: test-auth-dev  Updating lambda function: test-auth-dev  Updating lambda function: test-auth-dev-UserPoolAuth  Updating rest API  Resources deployed:    - Lambda ARN: arn:aws:lambda:us-west-2:...:function:test-auth-dev    - Lambda ARN: arn:aws:lambda:us-west-2:...:function:test-auth-dev-UserPoolAuth    - Rest API URL: https://id.execute-api.us-west-2.amazonaws.com/api/Now that it has been deployed we can access the API using the Rest APIURL. chalice-cognito-auth injects a ``login`` route which accepts a ``POST``request with a JSON payload containing the two keys ``username`` and``password``. Make sure your configured userpool has a user in it that can beused for testing and send something like the following::  $ curl -X POST -H Content-Type:application/json https://id.execute-api.us-west-2.amazonaws.com/api/login -d '{&quot;username&quot;:&quot;StealthyCoin&quot;, &quot;password&quot;: &quot;secret&quot;}'  {&quot;id_token&quot;:&quot;...&quot;,&quot;refresh_token&quot;:&quot;...&quot;,&quot;access_token&quot;:&quot;...&quot;,&quot;token_type&quot;:&quot;Bearer&quot;}The above JSON response contains all the tokens needed to send authorizedrequests. To test our authorizer we will use the ``whoami`` route which simplytakes a request and either rejects it if unauthorized, or sends back theusername associated with the request. To do this we will send a ``GET`` requestwith an ``Authorization`` header with the value of our ``id_token`` from theresult JSON above.In my case::  $ curl -H Authorization:...id token here... https://id.execute-api.us-west-2.amazonaws.com/api/whoami  {&quot;username&quot;:&quot;StealthyCoin&quot;}Which sends back JSON object with the username that goes with my id token.To check that a requset with a bad authorization token is rejected, run thefollowing curl command::  $ curl -H Authorization:foobar https://id.execute-api.us-west-2.amazonaws.com/api/whoami  {&quot;Message&quot;:&quot;User is not authorized to access this resource&quot;}</longdescription>
</pkgmetadata>