<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Updates](https://pyup.io/repos/github/mozilla/amo-validator/shield.svg)](https://pyup.io/repos/github/mozilla/amo-validator/)# addons.mozilla.org Validator:warning: :warning: :fire: This tool is being deprecated and going away eventually. :warning: :warning: :fire:It is still used on addons.mozilla.org for legacy add-ons but once support for updates for legacy add-ons goes away from AMO this tool will be archived.The AMO Validator is a tool designed to scan Mozilla add-on packages forproblems such as security vulnerabilities, exploits, spamware and badware,and lots of other gunk. By using a combination of various techniques anddetection mechanisms, the validator is capable of being both efficient as wellas thorough.## Setup### PrerequisitesYou can install everything you need for running and testing with```bashpip install -r requirements.txt```### SubmodulesThe validator may require some submodules to work. Make sure to run```bashgit clone --recursive git://github.com/mozilla/amo-validator.git```so that you get all of the goodies inside.### SpidermonkeyA working copy of Spidermonkey (debug or non-debug is fine) is required.  Theeasiest way to do this is to just [download the binary](https://archive.mozilla.org/pub/firefox/nightly/latest-mozilla-central/jsshell-linux-x86_64.zip).If you want to build it from scratch, [clone](http://hg.mozilla.org/mozilla-central/)the mozilla-central repo or[download the tip](http://hg.mozilla.org/mozilla-central/archive/tip.tar.bz2)(which is faster). Then build it from source like this```bashcd mozilla-centralcd js/srcautoconf2.13./configuremakesudo cp dist/bin/js /usr/local/bin/js```You must use autoconf at *exactly* 2.13 or else it won't work. If you're using`brew`_ on Mac OS X you can get autoconf2.13 with this    brew install autoconf213If you don't want to put the `js` executable in your `$PATH` or you want itin a custom path, you can define it as `$SPIDERMONKEY_INSTALLATION` inyour environment.### Using amo-validator as a contained app using dockerCheck this instructions from [marceloandrader](https://github.com/marceloandrader/dockerfiles/blob/master/amo-validator/README.md)## RunningRun the validator as follows```./addon-validator &lt;path to xpi&gt; [-t &lt;expected type&gt;] [-o &lt;output type&gt;] [-v]    [--boring] [--selfhosted] [--determined]```The path to the XPI should point to an XPI file.&lt;dl&gt;    &lt;dt&gt;-t    &lt;dd&gt;The type that you expect your add-on to be detected as. The list of    types is listed below.    &lt;dt&gt;-o    &lt;dd&gt;The type of output to generate. Types are listed below.    &lt;dt&gt;-v    &lt;dd&gt;Enable verbose mode. Extra information will be displayed in verbose mode,    namely notices (informational messages), Jetpack information if    available, extra error info (like contexts, file data, etc.), and error    descriptions. This only applies to `-o text`.    &lt;dt&gt;--selfhosted    &lt;dd&gt;Disables messages that are specific to add-ons hosted on AMO.    &lt;dt&gt;--boring    &lt;dd&gt;Disables colorful shell output.    &lt;dt&gt;--determined    &lt;dd&gt;Continue validating the remaining tiers of an add-on if one tier has    failed. Certain high-tiered tests may inadvertently fail when this option    is enabled for badly malformed add-ons.    &lt;dt&gt;--target-maxversion    &lt;dd&gt;Accepts a JSON string containing an object whose keys are GUIDs and    values are version strings. This will override the max version that the    add-on supports for the corresponding application GUID. E.g.:    `{&quot;{ec8030f7-c20a-464f-9b0e-13a3a9e97384}&quot;: &quot;6.*&quot;}`    &lt;dt&gt;--target-minversion    &lt;dd&gt;Identical to `--target-maxversion`, except overrides the min version    instead of the max.    &lt;dt&gt;--for-appversions    &lt;dd&gt;Accepts a JSON string containing an object whose keys are GUIDs and    values are lists of version strings. If this list is specified,    non-inlinecompatibility tests will only be run if they specifically    target the applications and veresions in this parameter. E.g.:    `{&quot;{ec8030f7-c20a-464f-9b0e-13a3a9e97384}&quot;: [&quot;6.*&quot;]}`&lt;/dl&gt;### Expected Type:The expected type should be one of the following values:&lt;dl&gt;    &lt;dt&gt;any (default)    &lt;dd&gt;Accepts any extension    &lt;dt&gt;extension    &lt;dd&gt;Accepts only extensions    &lt;dt&gt;theme    &lt;dd&gt;Accepts only themes    &lt;dt&gt;dictionary    &lt;dd&gt;Accepts only dictionaries    &lt;dt&gt;languagepack    &lt;dd&gt;Accepts only language packs    &lt;dt&gt;search    &lt;dd&gt;Accepts only OpenSearch XML files (unpackaged)    &lt;dt&gt;multi    &lt;dd&gt;Accepts only multi-item XPI packages&lt;/dl&gt;Specifying an expected type will throw an error if the validatordoes not detect that particular type when scanning. All addon typedetection mechanisms are used to make this determination.### Output Type:The output type may be either of the following:&lt;dl&gt;    &lt;dt&gt;text (default)    &lt;dd&gt;Outputs a textual summary of the addo-on analysis. Supports verbose mode.    &lt;dt&gt;json    &lt;dd&gt;Outputs a JSON snippet representing a full summary of the add-on analysis.&lt;/dl&gt;## Output### Text Output Mode (default; `text`)In `text` output mode, output is structured in the format of onemessage per line. The messages are prefixed by their priority level(i.e.: &quot;Warning: This is the message&quot;).At the head of the text output is a block describing what theadd-on type was determined to be.### JSON Output Mode (`json`)In `JSON` output mode, output is formatted as a JSON snippetcontaining all messages. The format for the JSON output is that of thesample document below.```js{    &quot;detected_type&quot;: &quot;extension&quot;,    &quot;errors&quot;: 2,    &quot;warnings&quot;: 1,    &quot;notices&quot;: 1,    &quot;success&quot;: false,    &quot;compatibility_summary&quot;: {        &quot;errors&quot;: 1,        &quot;warnings&quot;: 0,        &quot;notices&quot;: 0    },    &quot;ending_tier&quot;: 4,    &quot;messages&quot;: [        {            &quot;uid&quot;: &quot;123456789&quot;,            &quot;id&quot;: [&quot;module&quot;, &quot;function&quot;, &quot;error&quot;],            &quot;type&quot;: &quot;error&quot;,            &quot;message&quot;: &quot;This is the error message text.&quot;,            &quot;description&quot;: [&quot;Description of the error message.&quot;,                            &quot;Additional description text&quot;],            &quot;file&quot;: [&quot;chrome/foo.jar&quot;, &quot;bar/zap.js&quot;],            &quot;line&quot;: 12,            &quot;column&quot;: 50,            &quot;context&quot;: [                &quot;   if(foo = bar())&quot;,                &quot;       an_error_is_somewhere_on_this_line.prototy.eval(\&quot;whatever\&quot;);&quot;,                null            ],            &quot;compatibility_type&quot;: &quot;error&quot;,            &quot;for_appversions&quot;: {                &quot;{ec8030f7-c20a-464f-9b0e-13a3a9e97384}&quot;: [&quot;5.0a2&quot;, &quot;6.0a1&quot;]            },            &quot;tier&quot;: 2        }    ],    &quot;metadata&quot;: {        &quot;name&quot;: &quot;Best Add-on Evar&quot;,        &quot;version&quot;: &quot;9000&quot;,        &quot;guid&quot;: &quot;foo@bar.com&quot;    }}```#### JSON Notes:##### File HierarchyWhen a subpackage exists, an angle bracket will delimit the subpackagename and the message text.If no applicable file is available (i.e.: when a file is missing), the`file` value will be empty. If a `file` value is available within asubpackage, then the `file` attribute will be a list containing thename of the outermost subpackage's name, followed by each successiveconcentric subpackage's name, followed by the name of the file that themessage was generated in. If no applicable file is available within asubpackage, the `file` attribute is identical, except the last elementof the list in the `file` attribute is an empty string.For instance, this tree would generate the following messages:```package_to_test.xpi    |    |-install.rdf    |-chrome.manifest    |-subpackage.xpi    |  |    |  |-subsubpackage.xpi    |     |    |     |-chrome.manifest    |     |-install.rdf    |    |-subpackage.jar       |       |-install.rdf``````js[    {        &quot;type&quot;: &quot;notice&quot;,        &quot;message&quot;: &quot;&lt;em:type&gt; not found in install.rdf&quot;,        &quot;description&quot;: &quot; ... &quot;,        &quot;file&quot;: &quot;install.rdf&quot;,        &quot;line&quot;: 0    },    {        &quot;type&quot;: &quot;error&quot;,        &quot;message&quot;: &quot;Invalid chrome.manifest subject: override&quot;,        &quot;description&quot;: &quot; ... &quot;,        &quot;file&quot;: &quot;chrome.manifest&quot;,        &quot;line&quot;: 7    },    {        &quot;type&quot;: &quot;error&quot;,        &quot;message&quot;: &quot;subpackage.xpi &gt; install.rdf missing from theme&quot;,        &quot;description&quot;: &quot; ... &quot;,        &quot;file&quot;: [&quot;subpackage.xpi&quot;, &quot;&quot;],        &quot;line&quot;: 0    },    {        &quot;type&quot;: &quot;error&quot;,        &quot;message&quot;: &quot;subpackage.xpi &gt; subsubpackage.xpi &gt; Invalid chrome.manifest subject: sytle&quot;,        &quot;description&quot;: &quot; ... &quot;,        &quot;file&quot;: [&quot;subpackage.xpi&quot;, &quot;subsubpackage.xpi&quot;, &quot;chrome.manifest&quot;],        &quot;line&quot;: 5    }]```##### Line Numbers and ColumnsLine numbers are 1-based. Column numbers are 0-based. This can beconfusing from a programmatic standpoint, but makes literal sense. &quot;Lineone&quot; would obviously refer to the first line of a file.##### ContextsThe context attribute of messages will either be a list or null. Nullcontexts represent the validator's inability to determine surroundingcode. As a list, there will always be three elements. Each elementrepresents a line surrounding the message's location.The middle element of the context list represents the line of interest. Ifan element of the context list is null, that line does not exist. Forinstance, if an error is on the first line of a file, the context mightlook like:```js[    null,    &quot;This is the line with the error&quot;,    &quot;This is the second line of the file&quot;]```The same rule applies for the end of a file and for files with only one line.## TestingTests can be run with```bashpy.test tests/```Functional tests, which take longer, can be run with ```bashpy.test functional_tests/ ```Then make a cup of tea while all of those tests run. It takes a while. If youhave more than two cores on your machine or you don't mind pwnage, you can tryto increase the number of parallel processes used for testing.## ReleasingFollow these steps to release a new version of the `amo-validator` Python package:1. Increment the `__version__` attribute at the top of   `./validator/__init__.py`.2. Commit your change to the master branch and run `git push`.3. Tag master with the new version number, such as `git tag 1.9.8`.4. Push the new tag with `git push --tags`5. TravisCI will build and release a new version of `amo-validator`   to PyPI from your tag commit.   [Here is an example](https://travis-ci.org/mozilla/amo-validator/builds/90333989).## UpdatingSome regular maintenance needs to be performed on the validator in order tomake sure that the results are accurate.### App VersionsA list of Mozilla `&lt;em:targetApplication&gt;` values is stored in the`validator/app_versions.json` file. This must be updated to include the latestapplication versions. This information can be found on AMO:    https://addons.mozilla.org/en-US/firefox/pages/appversions/### JS LibrariesLists of JS library hashes are kept to allow for whitelisting or warning. Thesemust be regenerated with each new library version. To update:```bashpython extras/update_hashes.py```To add new libraries to the mix, edit `extras/jslibfetcher.py` and add theversion number to the appropriate tuple.### JetpackIn order to maintain Jetpack compatibility, the whitelist hashes need to beregenerated with each successive Jetpack version. To rebuild the hash library,simply run:```bashcd jetpack./generate_jp_whitelist.sh```That's it!### Language PacksWith every version of every app that's released, the language pack referencesneed to be updated.We now have an automated tool to ease this tedious process. It is currentlydesigned to work on OS X with the OS X versions of Mozilla applications, thoughit could conceivably run on any \*NIX platform against the OS X applicationpackages.To run the tool, first create a new directory: `extras/language_controls/`Put the `.app` packages for each updated product into this directory. Oncethis is ready, simply run:```bashcd extraspython update_langpacks.py```That should be it. Note that this tool will fail horribly if any of the teamschange the locations that the various language files are stored in.Also note that this tool should only be run against the en-US versions of theseapplications.</longdescription>
</pkgmetadata>