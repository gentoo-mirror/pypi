<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========scrapy_rss==========.. image:: https://img.shields.io/pypi/v/scrapy_rss.svg   :target: https://pypi.python.org/pypi/scrapy_rss   :alt: PyPI Version.. image:: https://img.shields.io/badge/wheel-yes-brightgreen.svg   :target: https://pypi.python.org/pypi/scrapy_rss   :alt: Wheel Status.. image:: https://img.shields.io/codecov/c/github/woxcab/scrapy_rss/master.svg   :target: http://codecov.io/github/woxcab/scrapy_rss?branch=master   :alt: Coverage reportTools to easy generate `RSS feed &lt;http://www.rssboard.org/rss-specification&gt;`_ that contains each scraped item using `Scrapy framework &lt;https://github.com/scrapy/scrapy&gt;`_.Package works with Python 2.7, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9 and 3.10.If you use Python 3.3 then you have to use Scrapy&lt;1.5.0.If you use Python 2.7 then you have to use Scrapy&lt;2.0.Table of Contents=================* `Installation &lt;#installation&gt;`__* `How To Use &lt;#how-to-use&gt;`__  * `Configuration &lt;#configuration&gt;`__  * `Optional Additional Customization &lt;#feed-channel-elements-customization-optionally&gt;`__  * `Usage &lt;#usage&gt;`__    * `Basic usage &lt;#basic-usage&gt;`__    * `RssItem derivation and namespaces &lt;#rssitem-derivation-and-namespaces&gt;`__* `Scrapy Project Examples &lt;#scrapy-project-examples&gt;`__`Installation &lt;https://packaging.python.org/installing/&gt;`_==========================================================* Install :code:`scrapy_rss` using pip  .. code:: bash       pip install scrapy_rss  or using pip for the specific interpreter, e.g.:  .. code:: bash      pip3 install scrapy_rss* or using setuptools directly:  .. code:: bash      cd path/to/root/of/scrapy_rss      python setup.py install  or using setuptools for specific interpreter, e.g.:  .. code:: bash      cd path/to/root/of/scrapy_rss      python3 setup.py installHow To Use==========Configuration-------------Add parameters to the Scrapy project settings (`settings.py` file)or to the :code:`custom_settings` attribute of the spider:1. Add item pipeline that export items to rss feed:   .. code:: python     ITEM_PIPELINES = {         # ...         'scrapy_rss.pipelines.RssExportPipeline': 900,  # or another priority         # ...     }2. Add required feed parameters:   FEED_FILE       the absolute or relative file path where the result RSS feed will be saved.       For example, :code:`feed.rss` or :code:`output/feed.rss`.   FEED_TITLE       the name of the channel (feed),   FEED_DESCRIPTION       the phrase or sentence that describes the channel (feed),   FEED_LINK       the URL to the HTML website corresponding to the channel (feed)   .. code:: python     FEED_FILE = 'path/to/feed.rss'     FEED_TITLE = 'Some title of the channel'     FEED_LINK = 'http://example.com/rss'     FEED_DESCRIPTION = 'About channel'Feed (Channel) Elements Customization [optionally]--------------------------------------------------If you want to change other channel parameters (such as language, copyright, managing_editor,webmaster, pubdate, last_build_date, category, generator, docs, ttl)then define your own exporter that's inherited from :code:`RssItemExporter` class, for example:.. code:: python   from scrapy_rss.exporters import RssItemExporter   class MyRssItemExporter(RssItemExporter):      def __init__(self, *args, **kwargs):         kwargs['generator'] = kwargs.get('generator', 'Special generator')         kwargs['language'] = kwargs.get('language', 'en-us')         super(CustomRssItemExporter, self).__init__(*args, **kwargs)And add :code:`FEED_EXPORTER` parameter to the Scrapy project settingsor to the :code:`custom_settings` attribute of the spider:.. code:: python   FEED_EXPORTER = 'myproject.exporters.MyRssItemExporter'Usage-----Basic usage^^^^^^^^^^^Declare your item directly as RssItem():.. code:: python  import scrapy_rss  item1 = scrapy_rss.RssItem()Or use predefined item class :code:`RssedItem` with RSS field named as :code:`rss`that's instance of :code:`RssItem`:.. code:: python  import scrapy  import scrapy_rss  class MyItem(scrapy_rss.RssedItem):      field1 = scrapy.Field()      field2 = scrapy.Field()      # ...  item2 = MyItem()Set/get item fields. Case sensitive attributes of :code:`RssItem()` are appropriate to RSS elements.Attributes of RSS elements are case sensitive too.If the editor allows autocompletion then it suggests attributes for instances of :code:`RssedItem` and :code:`RssItem`.It's allowed to set **any** subset of RSS elements (e.g. title only). For example:.. code:: python  from datetime import datetime  item1.title = 'RSS item title'  # set value of &lt;title&gt; element  title = item1.title.title  # get value of &lt;title&gt; element  item1.description = 'description'  item1.guid = 'item identifier'  item1.guid.isPermaLink = True  # set value of attribute isPermalink of &lt;guid&gt; element,                                 # isPermaLink is False by default  is_permalink = item1.guid.isPermaLink  # get value of attribute isPermalink of &lt;guid&gt; element  guid = item1.guid.guid  # get value of element &lt;guid&gt;  item1.category = 'single category'  category = item1.category  item1.category = ['first category', 'second category']  first_category = item1.category[0].category # get value of the element &lt;category&gt; with multiple values  all_categories = [cat.category for cat in item1.category]  # direct attributes setting  item1.enclosure.url = 'http://example.com/file'  item1.enclosure.length = 0  item1.enclosure.type = 'text/plain'  # or dict based attributes setting  item1.enclosure = {'url': 'http://example.com/file', 'length': 0, 'type': 'text/plain'}  item1.guid = {'guid': 'item identifier', 'isPermaLink': True}  item1.pubDate = datetime.now()  # correctly works with Python' datetimes  item2.rss.title = 'Item title'  item2.rss.guid = 'identifier'  item2.rss.enclosure = {'url': 'http://example.com/file', 'length': 0, 'type': 'text/plain'}All allowed elements are listed in the `scrapy_rss/items.py &lt;https://github.com/woxcab/scrapy_rss/blob/master/scrapy_rss/items.py&gt;`_.All allowed attributes of each element with constraints and default valuesare listed in the `scrapy_rss/elements.py &lt;https://github.com/woxcab/scrapy_rss/blob/master/scrapy_rss/elements.py&gt;`_.Also you can read `RSS specification &lt;http://www.rssboard.org/rss-specification&gt;`_ for more details.:code:`RssItem` derivation and namespaces^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^You can extend RssItem to add new XML fields that can be namespaced or not.You can specify namespaces in an attribute and/or an element constructors.Namespace prefix can be specified in the attribute/element nameusing double underscores as delimiter (:code:`prefix__name`)or in the attribute/element constructor using :code:`ns_prefix` argument. Namespace URI can be specified using :code:`ns_uri` argument of the constructor... code:: python    from scrapy_rss.meta import ItemElementAttribute, ItemElement    from scrapy_rss.items import RssItem    class Element0(ItemElement):        # attributes without special namespace        attr0 = ItemElementAttribute(is_content=True, required=True)        attr1 = ItemElementAttribute()    class Element1(ItemElement):        # attribute &quot;prefix2:attr2&quot; with namespace xmlns:prefix2=&quot;id2&quot;        attr2 = ItemElementAttribute(ns_prefix=&quot;prefix2&quot;, ns_uri=&quot;id2&quot;)        # attribute &quot;prefix3:attr3&quot; with namespace xmlns:prefix3=&quot;id3&quot;        prefix3__attr3 = ItemElementAttribute(ns_uri=&quot;id3&quot;)        # attribute &quot;prefix4:attr4&quot; with namespace xmlns:prefix4=&quot;id4&quot;        fake_prefix__attr4 = ItemElementAttribute(ns_prefix=&quot;prefix4&quot;, ns_uri=&quot;id4&quot;)        # attribute &quot;attr5&quot; with default namespace xmlns=&quot;id5&quot;        attr5 = ItemElementAttribute(ns_uri=&quot;id5&quot;)    class MyXMLItem(RssItem):        # element &lt;elem1&gt; without namespace        elem1 = Element0()        # element &lt;elem_prefix2:elem2&gt; with namespace xmlns:elem_prefix2=&quot;id2e&quot;        elem2 = Element0(ns_prefix=&quot;elem_prefix2&quot;, ns_uri=&quot;id2e&quot;)        # element &lt;elem_prefix3:elem3&gt; with namespace xmlns:elem_prefix3=&quot;id3e&quot;        elem_prefix3__elem3 = Element1(ns_uri=&quot;id3e&quot;)        # yet another element &lt;elem_prefix4:elem3&gt; with namespace xmlns:elem_prefix4=&quot;id4e&quot;        # (does not conflict with previous one)        fake_prefix__elem3 = Element0(ns_prefix=&quot;elem_prefix4&quot;, ns_uri=&quot;id4e&quot;)        # element &lt;elem5&gt; with default namespace xmlns=&quot;id5e&quot;        elem5 = Element0(ns_uri=&quot;id5e&quot;)Access to elements and its attributes is the same as with simple items:.. code:: python    item = MyXMLItem()    item.title = 'Some title'    item.elem1.attr0 = 'Required content value'    item.elem1 = 'Another way to set content value'    item.elem1.attr1 = 'Some attribute value'    item.elem_prefix3__elem3.prefix3__attr3 = 'Yet another attribute value'    item.elem_prefix3__elem3.fake_prefix__attr4 = '' # non-None value is interpreted as assigned    item.fake_prefix__elem3.attr1 = 42Several optional settings are allowed for namespaced items:FEED_NAMESPACES  list of tuples :code:`[(prefix, URI), ...]` or dictionary :code:`{prefix: URI, ...}` of namespaces  that must be defined in the root XML elementFEED_ITEM_CLASS or FEED_ITEM_CLS  main class of feed items (class object :code:`MyXMLItem` or path to class :code:`&quot;path.to.MyXMLItem&quot;`).  **Default value**: :code:`RssItem`.  It's used in order to extract all possible namespaces  that will be declared in the root XML element.  Feed items do **NOT** have to be instances of this class or its subclass.If these settings are not defined or only part of namespaces are definedthen other used namespaces will be declared either in the :code:`&lt;item&gt;` elementor in its subelements when these namespaces are not unique.Each :code:`&lt;item&gt;` element and its sublements always containsonly namespace declarations of non-:code:`None` attributes (including ones that are interpreted as element content).Scrapy Project Examples=======================`Examples directory &lt;https://github.com/woxcab/scrapy_rss/blob/master/examples&gt;`_ containsseveral Scrapy projects with the scrapy_rss usage demonstration. It crawls`this website &lt;https://woxcab.github.io/scrapy_rss/&gt;`_ whose source code is`here &lt;https://github.com/woxcab/scrapy_rss/blob/master/examples/website&gt;`_.Just go to the Scrapy project directory and run commands.. code:: bash   scrapy crawl first_spider   scrapy crawl second_spiderThereafter `feed.rss` and `feed2.rss` files will be created in the same directory.</longdescription>
</pkgmetadata>