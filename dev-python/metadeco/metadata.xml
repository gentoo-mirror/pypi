<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MetadecoMetadata reflections for functions/methods. Inspired by NPM's [`reflect-metadata`](https://www.npmjs.com/package/reflect-metadata) package.## How to use:### To decorate a function:```pyimport metadeco# Define a function with the &quot;__has_print__&quot; metadata set to &quot;True&quot;# You can set anything has the value of the metadata.@metadeco.metadata(&quot;__has_print__&quot;, True)def my_function():    print(&quot;Hello world!&quot;)metadeco.has_metadata(my_function)# We would get &quot;True&quot;metadeco.get_metadata(my_function, &quot;__has_print__&quot;)# We obtain the value set by the function, in here, &quot;Truemetadeco.get_metadata(my_function, &quot;__not_set__&quot;)# &quot;NoMetadataError&quot; is raised here.metadeco.delete_metadata(my_function, &quot;__has_print__&quot;)# Delete the metadata.```## To decorate a property:```pyimport metadecoclass MySettings:        @metadeco.decorate(&quot;__output__&quot;, &quot;Hey there!&quot;)    def test():        return &quot;Hey there!&quot;# Getting the metadata of &quot;test&quot; property in object MySettingsmetadeco.get_metadata(MySettings, &quot;__output__&quot;, &quot;test&quot;)# We get &quot;Hey there&quot;```</longdescription>
</pkgmetadata>