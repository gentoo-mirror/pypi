<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ha-mqtt-discoverable[![License](https://img.shields.io/github/license/unixorn/ha-mqtt-discoverable.svg)](https://opensource.org/license/apache-2-0/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![GitHub last commit (branch)](https://img.shields.io/github/last-commit/unixorn/ha-mqtt-discoverable/main.svg)](https://github.com/unixorn/ha-mqtt-discoverable)[![Downloads](https://static.pepy.tech/badge/ha-mqtt-discoverable)](https://pepy.tech/project/ha-mqtt-discoverable)A Python 3 module that takes advantage of Home Assistant's [MQTT discovery protocol](https://www.home-assistant.io/integrations/mqtt/#mqtt-discovery) to create sensors without having to define anything on the HA side.Using MQTT discoverable devices lets us add new sensors and devices to HA without having to restart HA. The `ha-mqtt-discoverable-cli` module includes scripts to make it easy to create discoverable devices from the command line if you don't want to bother writing Python.&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;## Table of Contents- [Installing](#installing)  - [Python](#python)- [Supported entities](#supported-entities)  - [Binary sensor](#binary-sensor)    - [Usage](#usage)  - [Button](#button)  - [Device](#device)    - [Usage](#usage-1)  - [Device trigger](#device-trigger)      - [Usage](#usage-2)  - [Switch](#switch)    - [Usage](#usage-3)  - [Light](#light)    - [Usage](#usage-4)  - [Covers](#covers)    - [Usage](#usage-5)  - [Text](#text)    - [Usage](#usage-6)  - [Number](#number)    - [Usage](#usage-7)- [Contributing](#contributing)- [Users of ha-mqtt-discoverable](#users-of-ha-mqtt-discoverable)- [Contributors](#contributors)&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;## Installing### Pythonha-mqtt-discoverable runs on Python 3.10 or later.`pip install ha-mqtt-discoverable` if you want to use it in your own python scripts. This will also install the `hmd` utility scripts.&lt;!-- Please keep the entities in alphabetical order --&gt;## Supported entitiesThe following Home Assistant entities are currently implemented:- Binary sensor- Button- Cover- Device- Device trigger- Light- Number- Sensor- Switch- TextEach entity can associated to a device. See below for details.### Binary sensor#### UsageThe following example creates a binary sensor and sets its state:```pyfrom ha_mqtt_discoverable import Settingsfrom ha_mqtt_discoverable.sensors import BinarySensor, BinarySensorInfo# Configure the required parameters for the MQTT brokermqtt_settings = Settings.MQTT(host=&quot;localhost&quot;)# Information about the sensorsensor_info = BinarySensorInfo(name=&quot;MySensor&quot;, device_class=&quot;motion&quot;)settings = Settings(mqtt=mqtt_settings, entity=sensor_info)# Instantiate the sensormysensor = BinarySensor(settings)# Change the state of the sensor, publishing an MQTT message that gets picked up by HAmysensor.on()mysensor.off()# You can also set custom attributes on the sensor via a Python dictmysensor.set_attributes({&quot;my attribute&quot;: &quot;awesome&quot;})```### ButtonThe button publishes no state, it simply receives a command from HA.You must call `write_config` on a Button after creating it to make it discoverable.```pyfrom ha_mqtt_discoverable import Settingsfrom ha_mqtt_discoverable.sensors import Button, ButtonInfofrom paho.mqtt.client import Client, MQTTMessage# Configure the required parameters for the MQTT brokermqtt_settings = Settings.MQTT(host=&quot;localhost&quot;)# Information about the buttonbutton_info = ButtonInfo(name=&quot;test&quot;)settings = Settings(mqtt=mqtt_settings, entity=button_info)# To receive button commands from HA, define a callback function:def my_callback(client: Client, user_data, message: MQTTMessage):    perform_my_custom_action()# Define an optional object to be passed back to the callbackuser_data = &quot;Some custom data&quot;# Instantiate the buttonmy_button = Button(settings, my_callback, user_data)# Publish the button's discoverability message to let HA automatically notice itmy_button.write_config()```### DeviceFrom the [Home Assistant documentation](https://developers.home-assistant.io/docs/device_registry_index):&gt; A device is a special entity in Home Assistant that is represented by one or more entities.A device is automatically created when an entity defines its `device` property.A device will be matched up with an existing device via supplied identifiers or connections, like serial numbers or MAC addresses.#### UsageThe following example create a device, by associating multiple sensors to the same `DeviceInfo` instance.```pyfrom ha_mqtt_discoverable import Settings, DeviceInfofrom ha_mqtt_discoverable.sensors import BinarySensor, BinarySensorInfo# Configure the required parameters for the MQTT brokermqtt_settings = Settings.MQTT(host=&quot;localhost&quot;)# Define the device. At least one of `identifiers` or `connections` must be supplieddevice_info = DeviceInfo(name=&quot;My device&quot;, identifiers=&quot;device_id&quot;)# Associate the sensor with the device via the `device` parameter# `unique_id` must also be set, otherwise Home Assistant will not display the device in the UImotion_sensor_info = BinarySensorInfo(name=&quot;My motion sensor&quot;, device_class=&quot;motion&quot;, unique_id=&quot;my_motion_sensor&quot;, device=device_info)motion_settings = Settings(mqtt=mqtt_settings, entity=motion_sensor_info)# Instantiate the sensormotion_sensor = BinarySensor(motion_settings)# Change the state of the sensor, publishing an MQTT message that gets picked up by HAmotion_sensor.on()# An additional sensor can be added to the same device, by re-using the DeviceInfo instance previously defineddoor_sensor_info = BinarySensorInfo(name=&quot;My door sensor&quot;, device_class=&quot;door&quot;, unique_id=&quot;my_door_sensor&quot;, device=device_info)door_settings = Settings(mqtt=mqtt_settings, entity=door_sensor_info)# Instantiate the sensordoor_sensor = BinarySensor(settings)# Change the state of the sensor, publishing an MQTT message that gets picked up by HAdoor_sensor.on()# The two sensors should be visible inside Home Assistant under the device `My device````### Device triggerThe following example creates a device trigger and generates a trigger event:##### Usage```pyfrom ha_mqtt_discoverable import Settingsfrom ha_mqtt_discoverable.sensors import DeviceInfo, DeviceTriggerInfo, DeviceTrigger# Configure the required parameters for the MQTT brokermqtt_settings = Settings.MQTT(host=&quot;localhost&quot;)# Define the device. At least one of `identifiers` or `connections` must be supplieddevice_info = DeviceInfo(name=&quot;My device&quot;, identifiers=&quot;device_id&quot;)# Associate the sensor with the device via the `device` parametertrigger_into = DeviceTriggerInfo(name=&quot;MyTrigger&quot;, type=&quot;button_press&quot;, subtype=&quot;button_1&quot;, unique_id=&quot;my_device_trigger&quot;, device=device_info)settings = Settings(mqtt=mqtt_settings, entity=trigger_info)# Instantiate the device triggermytrigger = DeviceTrigger(settings)# Generate a device trigger event, publishing an MQTT message that gets picked up by HA# Optionally include a payload as part of the eventmytrigger.trigger(&quot;My custom payload&quot;)```### SwitchThe switch is similar to a _binary sensor_, but in addition to publishing state changes toward HA it can also receive 'commands' from HA that request a state change.It is possible to act upon reception of this 'command', by defining a `callback` function, as the following example shows:#### Usage```pyfrom ha_mqtt_discoverable import Settingsfrom ha_mqtt_discoverable.sensors import Switch, SwitchInfofrom paho.mqtt.client import Client, MQTTMessage# Configure the required parameters for the MQTT brokermqtt_settings = Settings.MQTT(host=&quot;localhost&quot;)# Information about the switchswitch_info = SwitchInfo(name=&quot;test&quot;)settings = Settings(mqtt=mqtt_settings, entity=switch_info)# To receive state commands from HA, define a callback function:def my_callback(client: Client, user_data, message: MQTTMessage):    payload = message.payload.decode()    if payload == &quot;ON&quot;:        turn_my_custom_thing_on()        # Let HA know that the switch was successfully activatedmy_switch.on()    elif payload == &quot;OFF&quot;:        turn_my_custom_thing_off()        # Let HA know that the switch was successfully deactivatedmy_switch.off()# Define an optional object to be passed back to the callbackuser_data = &quot;Some custom data&quot;# Instantiate the switchmy_switch = Switch(settings, my_callback, user_data)# Set the initial state of the switch, which also makes it discoverablemy_switch.off()```### LightThe light is different from other current sensor as it needs its payload encoded/decoded as json.It is possible to set brightness, effects and the color of the light. Similar to a _switch_ it canalso receive 'commands' from HA that request a state change.It is possible to act upon reception of this 'command', by defining a `callback` function, as the following example shows:#### Usage```pyimport jsonfrom ha_mqtt_discoverable import Settingsfrom ha_mqtt_discoverable.sensors import Light, LightInfofrom paho.mqtt.client import Client, MQTTMessage# Configure the required parameters for the MQTT brokermqtt_settings = Settings.MQTT(host=&quot;localhost&quot;)# Information about the lightlight_info = LightInfo(    name=&quot;test_light&quot;,    brightness=True,    color_mode=True,    supported_color_modes=[&quot;rgb&quot;],    effect=True,    effect_list=[&quot;blink&quot;, &quot;my_cusom_effect&quot;])settings = Settings(mqtt=mqtt_settings, entity=light_info)# To receive state commands from HA, define a callback function:def my_callback(client: Client, user_data, message: MQTTMessage):    # Make sure received payload is json    try:        payload = json.loads(message.payload.decode())    except ValueError as error:        print(&quot;Ony JSON schema is supported for light entities!&quot;)        return    # Parse received dictionary    if &quot;color&quot; in payload:        set_color_of_my_light()        my_light.color(&quot;rgb&quot;, payload[&quot;color&quot;])    elif &quot;brightness&quot; in payload:        set_brightness_of_my_light()        my_light.brightness(payload[&quot;brightness&quot;])    elif &quot;effect&quot; in payload:        set_effect_of_my_light()        my_light.effect(payload[&quot;effect&quot;])    elif &quot;state&quot; in payload:        if payload[&quot;state&quot;] == light_info.payload_on:            turn_on_my_light()            my_light.on()        else:            turn_off_my_light()            my_light.off()    else:        print(&quot;Unknown payload&quot;)# Define an optional object to be passed back to the callbackuser_data = &quot;Some custom data&quot;# Instantiate the switchmy_light = Light(settings, my_callback, user_data)# Set the initial state of the light, which also makes it discoverablemy_light.off()```### CoversA cover has four possible states `open`, `closed`, `opening`, `closing` and `stopped`. Most other entities use the states as command payload, but covers differentiate on this. The user HA user can either open, close or stop it in the covers current position.Covers do not currently support tilt.A `callback` function is needed in order to parse the commands sent from HA, as the followingexample shows:#### Usage```py```### TextThe text is an `helper entity`, showing an input field in the HA UI that the user can interact with.It is possible to act upon reception of the inputted text by defining a `callback` function, as the following example shows:#### Usage```pyfrom ha_mqtt_discoverable import Settingsfrom ha_mqtt_discoverable.sensors import Text, TextInfofrom paho.mqtt.client import Client, MQTTMessage# Configure the required parameters for the MQTT brokermqtt_settings = Settings.MQTT(host=&quot;localhost&quot;)# Information about the `text` entitytext_info = TextInfo(name=&quot;test&quot;)settings = Settings(mqtt=mqtt_settings, entity=text_info)# To receive text updates from HA, define a callback function:def my_callback(client: Client, user_data, message: MQTTMessage):    text = message.payload.decode()    logging.info(f&quot;Received {text} from HA&quot;)    do_some_custom_thing(text)    # Send an MQTT message to confirm to HA that the text was changed    my_text.set_text(text)# Define an optional object to be passed back to the callbackuser_data = &quot;Some custom data&quot;# Instantiate the textmy_text = Text(settings, my_callback, user_data)# Set the initial text displayed in HA UI, publishing an MQTT message that gets picked up by HAmy_text.set_text(&quot;Some awesome text&quot;)```### NumberThe number entity is similar to the text entity, but for a numeric value instead of a string.It is possible to act upon receiving changes in HA by defining a `callback` function, as the following example shows:#### Usage```pyfrom ha_mqtt_discoverable import Settingsfrom ha_mqtt_discoverable.sensors import Number, NumberInfofrom paho.mqtt.client import Client, MQTTMessage# Configure the required parameters for the MQTT brokermqtt_settings = Settings.MQTT(host=&quot;localhost&quot;)# Information about the `number` entity.number_info = NumberInfo(name=&quot;test&quot;, min=0, max=50, mode=&quot;slider&quot;, step=5)settings = Settings(mqtt=mqtt_settings, entity=number_info)# To receive number updates from HA, define a callback function:def my_callback(client: Client, user_data, message: MQTTMessage):    number = int(message.payload.decode())    logging.info(f&quot;Received {number} from HA&quot;)    do_some_custom_thing(number)    # Send an MQTT message to confirm to HA that the number was changed    my_text.set_value(number)# Define an optional object to be passed back to the callbackuser_data = &quot;Some custom data&quot;# Instantiate the numbermy_number = Number(settings, my_callback, user_data)# Set the initial number displayed in HA UI, publishing an MQTT message that gets picked up by HAmy_number.set_value(42.0)```## ContributingPlease run `black` on your code before submitting. There are `git` hooks already configured to run `black` and other checks before every commit, please run `pre-commit install` to enable them.## Users of ha-mqtt-discoverableIf you use this module for your own project, please add a link here.- [ha-mqtt-discoverable-cli](https://github.com/unixorn/ha-mqtt-discoverable-cli) - Command line tools that allow using this module from shell scripts## Contributors&lt;a href=&quot;https://github.com/unixorn/ha-mqtt-discoverable/graphs/contributors&quot;&gt;  &lt;img src=&quot;https://contributors-img.web.app/image?repo=unixorn/ha-mqtt-discoverable&quot; /&gt;&lt;/a&gt;Made with [contributors-img](https://contributors-img.web.app).</longdescription>
</pkgmetadata>