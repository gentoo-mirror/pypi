<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `devcluster`A developer tool for running the Determined cluster.## Configuring and RunningYou can run the code from the git root by running `python -m devcluster`, orinstall it into your python environment with `pip install -e .` and then justcall `devcluster` by itself.The first time you run it, it will give you the option to automatically installthe default configuration file (see `devcluster/example.yaml`).By default, devcluster needs to run from the root of a `determined` sourcetree.  You can do this in one of a few ways:- always run `devcluster` from the root of your `determined` source tree- set `cwd: /path/to/determined` to run `devcluster` from anywhere- run `devcluster` with the `-C /path/to/determined` optionYou can either specify a config file via the `--config` or `-c` option, or`devcluster` will try to read the default config file at`~/.devcluster.yaml`.## How `devcluster` Worksdevcluster runs a cluster with a linear dependency graph of stages.  With thedefault config (`devcluster/example.yaml`), those stages are:- `DEAD`- `DB`- `MASTER`- `AGENT`Because of the linear dependency graph, the `DB` stage can run by itself, the`MASTER` stage is only started after `DB` is already up, and the `AGENT` is onlystarted after the `MASTER` is up.  The `DEAD` stage indicates that nothingis running.  The non-`DEAD` stages correspond to the `stages` setting in yourconfig file.The status bar has two rows.  The first row is the state row.  It shows all ofthe stages in your dependency graph.  All active stages are highlighted orange.There is also a 'target state', which is indicated by a less-than character(`&lt;`).  You set the target state by pressing the key corresponding to aparticular stage.When the target state is modified, devcluster will walk up or down the stagelist, starting or killing processes as needed to reach the target stage.  Inthe default configuration, the MASTER and AGENT stages are rebuilt each timethey are started.A common pattern during development might be to:- make a change to the master code- press `1` to set the target state to `DB` (killing the `MASTER` and the  `AGENT`)- press `3` to set the target state back to `AGENT` (rebuilding/restarting the  `MASTER` and `AGENT` on the way).The second row in the status bar is the logging row.  Every stage collects aseparate stream of logs, and each stream can be toggled by pressing thecorresponding keys.## Keybindings- `1`-`3` set target states for the cluster (as shown in the status bar)- `!`-`#` toggle logs for the corresponding stage (as shown in the status bar)- `q` or `ctrl`+`c` once to quit, or twice to force-quit (which may leave  dangling processes or docker containers laying around)- `u`/`d` will scroll up/down, and `U`/`D` will scroll up/down faster  Scrolling support is only partially line-aware; it will scroll by  literal log chunks, which may each be more or less than a line- `x` will reset scrolling to continue following logs- Spacebar will emit a visual separator with a timestamp to the console stream.- With the default configuration, the keys `p`, `w`, and `c` will trigger  building the python harness, webui, and docs, respectively.## Server/Client ModeYou can run `devcluster` as a headless server with various configurations forlistening for clients:    # listen on 0.0.0.0:1234    devcluster --quiet --listen 1234    # listen on localhost:1234    devcluster -q -l 127.0.0.1:1234    # listen on a unix socket    devcluster -q -l /path/to/socket    # listen on the default unix socket (/tmp/devcluster/sock)    devcluster -q    # configure multiple listeners    devcluster -q -l 1234 /path/to/socketSending a `SIGINT` (via `ctrl`+`c`) or a `SIGTERM` (via `kill`) to the headlessserver will close it.You can then connect the UI to a headless server:    devcluster 1234    devcluster host:1234    devcluster /path/to/socketIn client mode, pressing `q` or `ctrl`+`c` will only close the UI; it will notaffect the server.## Oneshot ModeYou can run `devcluster` in a special oneshot mode (`-1`/`--oneshot`), suitablefor automated usage.  In automated mode, the `stdout` from `devcluster` will besuitable for redirecting to a file, and the `stderr` will emit the line:    devcluster is upto indicate when the cluster is ready for use.## Philosophy`devcluster` tries as much as possible to be a standalone tool for runningarbitrary versions of the Determined cluster.  It is tested as far back asv0.12.3.Some defaults are kept up-to-date with tip-of-master to simplify the configfile for the most-common use case, but in general preference was given to beingconfigurable and explicit.## TODO- config file reloading</longdescription>
</pkgmetadata>