<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># easy-flaskAutomatic generate a flask server project by command# StartInstall```bashpip3 install easy-flask-restful```Make a flask server project at current dir:```basheasy-flask -n demo_server# oreasy-flask --new=demo_server# start server in debug modecd demo_serverpython3 app.py# orsh control.sh start|restart|stop```# IntroduceBy this tool you don`t need care how to make a flask server project.What you need to do is write api-file in easy format inside dir ``api``.This project will automatically load uri by api-file, and pack json response with same format.Project structure```base.├── api│   ├── __init__.py│   └── demo│       ├── __init__.py│       └── demo_api.py├── conf│   ├── __init__.py│   ├── config.ini├── internal│   ├── __init__.py│   ├── error.py│   └── utils.py├── app.py├── start.py├── control.sh└── logs    └── app.log`````api`` - write api files here.``internal.error`` - define error info here.``app.py`` - start app by this file, you can rename it.``conf`` - config for application``control.sh`` - run app with command by gunicorn## Write Api FileFor example:```python3from flask import gfrom internal import Resourcefrom utils.parser import Type, Required, Default, Min, Maxclass DemoApi(Resource):    uri = ['/api/demo']    def get(self):        pattern = {            'num': {Type: int, Min: 10, Max: 100},            'print': {Type: str, Required: True},            'default': {Type: str, Default: 'demo'}        }        data, err = self.parse_request_data(pattern=pattern)        if err:            g.logger.warning(err)            return err        g.logger.info('success')        return {'result': data}`````uri`` - required by all api file``g.logger`` is loaded before each request for making different log_id.``self.parse_request_data`` can help you to parse params, it will return ``ParamsError`` when param invalid.Normal response:```json{    &quot;errno&quot;: 0,    &quot;data&quot;: {        &quot;result&quot;: {            &quot;num&quot;: 100,            &quot;print&quot;: &quot;aaaa&quot;,            &quot;default&quot;: &quot;demo&quot;        }    },    &quot;msg&quot;: &quot;success&quot;,    &quot;log_id&quot;: &quot;f40c889d1b5744c7a87a9045aea8595c&quot;}```Error response:return ``errno`` and ``msg`` according to ``error.py``.```json{    &quot;errno&quot;: 2,    &quot;msg&quot;: &quot;params error:num check max invalid&quot;,    &quot;log_id&quot;: &quot;7c53531b93a4406e9d3050bae5b99968&quot;}```## SuggestA real project must have complex logic and interactions with DB or other service.By this tool, you just can get a simple framework. So I give some suggestions here for writing better code.- ``logic`` dir (or other name) for writing complex logic, keep simple in api file.- if you need db operation, use ``flask-sqlalchemy``, and mkdir ``dto``.- ``client`` dir for interact with other service, and make ``BaseClient`` class(inherited by other client), because you never want to write same code for many times.</longdescription>
</pkgmetadata>