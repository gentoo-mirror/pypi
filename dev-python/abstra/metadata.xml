<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![pypi](https://img.shields.io/pypi/v/abstra.svg)](https://pypi.python.org/pypi/abstra)[![PyPI Downloads](https://img.shields.io/pypi/dm/abstra.svg)](https://pypi.org/project/abstra/)[![Code check](https://github.com/abstra-app/abstra-lib/actions/workflows/code_check.yml/badge.svg)](https://github.com/abstra-app/abstra-lib/actions/workflows/code_check.yml)# abstra libPython package for abstra products## Hooks```pythonfrom abstra.hooks import get_request, send_response, send_json# helper to get requestbody, query, headers = get_request()# helper to send responsesend_response(body='DONE', status_code=207, headers={&quot;Session&quot;: 123})# helper to send json responsesend_json(data={&quot;ok&quot;: True})```### Testing locallyIf you are testing the script locally you can pass an optional argument to read/write from a specified file.  Defaults to `request.json` and `response.json````pythonfrom abstra.hooks import get_request, send_response# helper to get requestbody, query, headers = get_request(local_file=&quot;request.json&quot;)# helper to send responsesend_response(body='DONE', local_file=&quot;response.json&quot;)```- the request local_file should be a json file with fields: `body (raw text)`, `headers (key-value map)` and `query (key-value map)`- the response local_file should output to a json file with fields: `body (raw text)`, `headers (key-value map)` and `status_code (number)`## Tables```pythonfrom abstra.tables import Tables# instantiate a Tables objecttables = Tables()# you can also authenticate with API keytables = Tables(api_key=&quot;YOUR_API_KEY&quot;)# get the statementstatement = tables.statement(id=&quot;STATEMENT_ID&quot;)# and run itresult = statement.run(params={&quot;a&quot;: 1, &quot;b&quot;: 2})# or run without instantiating the statementresult = tables.run_statement(id=&quot;STATEMENT_ID&quot;, params={&quot;a&quot;: 1, &quot;b&quot;: 2})```## Connectors```pythonfrom abstra.connectors import Connectors# instantiate a Connectors objectconnectors = Connectors()# you can also authenticate with API keyconnectors = Connectors(api_key=&quot;YOUR_API_KEY&quot;)# get the statementmethod = connectors.method(id=&quot;METHOD_ID&quot;)# and run itresult = method.run(params={&quot;a&quot;: 1, &quot;b&quot;: 2})# or run without instantiating the methodresult = connectors.run_method(id=&quot;METHOD_ID&quot;, params={&quot;a&quot;: 1, &quot;b&quot;: 2})```</longdescription>
</pkgmetadata>