<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Model W DockerA tool so that your Dockerfile looks like this:```DockerfileFROM modelw/base:2023.03COPY --chown=user package.json package-lock.json ./RUN modelw-docker installCOPY --chown=user . .RUN modelw-docker buildCMD [&quot;modelw-docker&quot;, &quot;serve&quot;]```## OrganizationThis repository contains different elements that work together, found insub-directories here:-   `src` &amp;mdash; Contains the source of the `modelw-docker` package, that is    published on Pypi.-   `image` &amp;mdash; Is the source for the Docker image that can be used as a    base for all Model&amp;nbsp;W projects.-   `demo` &amp;mdash; A demo project used to test the image during development## `modelw-docker`This is a helper that is pre-installed in the Docker image and helps you buildand run a Model&amp;nbsp;W project.If called from the root of a project, it will automatically detect the project'stype and run appropriate commands for each step of the build. If later on theway the Docker image is built or the requirements of Model&amp;nbsp;W change, it isexpected that those changes can be reflected in the `modelw-docker` packagewithout requiring the developers to change their Dockerfiles.### Available actions-   `modelw-docker install` &amp;mdash; Installs the project's dependencies (creates    the virtualenv, runs `npm install` or whatever is required). It only    requires the dependencies files to run (`package.json`/`package-lock.json`    for front components, `pyproject.toml`/`poetry.lock` for api components).-   `modelw-docker build` &amp;mdash; Builds the project. It requires the project to    be installed first. It also requires all the source code to be present.-   `modelw-docker serve` &amp;mdash; Runs the project. It requires the project to    be installed and built first.-   `modelw-docker run` &amp;mdash; Runs a command in the project's virtualenv. It    requires the project to be installed first.The reason why `install` and `build` are separate and why you need first to copyjust the dependencies list and then the source code is to allow for caching ofthe dependencies. This way, the dependencies are only re-installed when thedependencies list changes, not when the source code changes. This makes veryfast builds when only the source code changes.### Dry runThere is a `--dry-run` option for all the commands that will just print whatwould have been done but not do it. The dry run mode is automatically enabled ifyou run the package outside of Docker in order to avoid fucking up your desktop.### Config fileAll the settings are automatically detected, however if something isn't to yourtaste you can always override it using a `model-w.toml` file, following thisstructure:```toml[project]# For printing purposesname = &quot;demo_project&quot;# Either &quot;front&quot; or &quot;api&quot;component = &quot;api&quot;[project.required_files]# All the files to be created before the install step and their content&quot;src/demo_project/__init__.py&quot; = &quot;&quot;[apt.repos]# APT repositories to be added, you need to give both the source and the key# for each one of thempgdg.source = &quot;deb http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main&quot;pgdg.key = { url = &quot;https://www.postgresql.org/media/keys/ACCC4CF8.asc&quot; }[apt.packages]# APT packages to be installed. Put * to install the default version, or a# version number to install a specific version.gdal-bin = &quot;*&quot;```In addition, Python project also have the following settings:```toml[project]# [...]# Either &quot;gunicorn&quot; or &quot;daphne&quot;server = &quot;daphne&quot;# Modules that have the WSGI and ASGI entry pointswsgi = &quot;demo_project.django.wsgi:application&quot;asgi = &quot;demo_project.django.asgi:application&quot;```## ContributionThe Docker image and the package are auto-built and published on Docker Hub andPypi respectively. The build is triggered by pushing a tag to the repository(for the Python package) and for each branch's head (for the Docker image).If you want to make a release, the Makefile will help you:```bashmake release VERSION=2022.10.0```This will use Git Flow to make the release, and then also make sure to updatethe version in the Dockerfile and the `modelw-docker` package.Once this is done, you have to:-   Push the tag to the repository-   Push develop and master-   Make sure you update support branches accordingly (this cannot be automated    it's a human decision)&gt; **Note** &amp;mdash; If you're releasing a new major version of Model&amp;nbsp;W, you&gt; need to update the `image/Dockerfile` to match the new &quot;upper&quot; version limit.&gt; This script will only update the &quot;lower&quot; version limit, to make sure the image&gt; is built with the package you just released.</longdescription>
</pkgmetadata>