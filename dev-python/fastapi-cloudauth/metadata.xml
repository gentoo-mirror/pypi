<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># FastAPI Cloud Auth![Tests](https://github.com/tokusumi/fastapi-cloudauth/workflows/Tests/badge.svg)[![codecov](https://codecov.io/gh/tokusumi/fastapi-cloudauth/branch/master/graph/badge.svg)](https://codecov.io/gh/tokusumi/fastapi-cloudauth)[![PyPI version](https://badge.fury.io/py/fastapi-cloudauth.svg)](https://badge.fury.io/py/fastapi-cloudauth)fastapi-cloudauth standardizes and simplifies the integration between FastAPI and cloud authentication services (AWS Cognito, Auth0, Firebase Authentication).## Features* [X] Verify access/id token: standard JWT validation (signature, expiration), token audience claims, etc.* [X] Verify permissions based on scope (or groups) within access token and extract user info * [X] Get the detail of login user info (name, email, etc.) within ID token* [X] Dependency injection for verification/getting user, powered by [FastAPI](https://github.com/tiangolo/fastapi)* [X] Support for:    * [X] [AWS Cognito](https://aws.amazon.com/jp/cognito/)    * [X] [Auth0](https://auth0.com/jp/)    * [x] [Firebase Auth](https://firebase.google.com/docs/auth) (Only ID token)## RequirementsPython 3.6+## Install```console$ pip install fastapi-cloudauth```## Example (AWS Cognito)### Pre-requirements* Check `region`, `userPoolID` and `AppClientID` of AWS Cognito that you manage to* Create a user's assigned `read:users` permission in AWS Cognito * Get Access/ID token for the created userNOTE: access token is valid for verification, scope-based authentication, and getting user info (optional). ID token is valid for verification and getting full user info from claims.### Create itCreate a *main.py* file with the following content:```python3import osfrom pydantic import BaseModelfrom fastapi import FastAPI, Dependsfrom fastapi_cloudauth.cognito import Cognito, CognitoCurrentUser, CognitoClaimsapp = FastAPI()auth = Cognito(    region=os.environ[&quot;REGION&quot;],     userPoolId=os.environ[&quot;USERPOOLID&quot;],    client_id=os.environ[&quot;APPCLIENTID&quot;])@app.get(&quot;/&quot;, dependencies=[Depends(auth.scope([&quot;read:users&quot;]))])def secure():    # access token is valid    return &quot;Hello&quot;class AccessUser(BaseModel):    sub: str@app.get(&quot;/access/&quot;)def secure_access(current_user: AccessUser = Depends(auth.claim(AccessUser))):    # access token is valid and getting user info from access token    return f&quot;Hello&quot;, {current_user.sub}get_current_user = CognitoCurrentUser(    region=os.environ[&quot;REGION&quot;],     userPoolId=os.environ[&quot;USERPOOLID&quot;],    client_id=os.environ[&quot;APPCLIENTID&quot;])@app.get(&quot;/user/&quot;)def secure_user(current_user: CognitoClaims = Depends(get_current_user)):    # ID token is valid and getting user info from ID token    return f&quot;Hello, {current_user.username}&quot;```Run the server with:```console$ uvicorn main:appINFO:     Started server process [15332]INFO:     Waiting for application startup.INFO:     Application startup complete.INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)```### Interactive API DocGo to http://127.0.0.1:8000/docs.You will see the automatic interactive API documentation (provided by Swagger UI).`Authorize` :unlock: button can be available at the endpoint's injected dependency.You can supply a token and try the endpoint interactively.![Swagger UI](https://raw.githubusercontent.com/tokusumi/fastapi-cloudauth/master/docs/src/authorize_in_doc.jpg)## Example (Auth0)### Pre-requirement* Check `domain`, `customAPI` (Audience) and `ClientID` of Auth0 that you manage to* Create a user assigned `read:users` permission in Auth0 * Get Access/ID token for the created user### Create itCreate a file main.py with:```python3import osfrom pydantic import BaseModelfrom fastapi import FastAPI, Dependsfrom fastapi_cloudauth.auth0 import Auth0, Auth0CurrentUser, Auth0Claimsapp = FastAPI()auth = Auth0(domain=os.environ[&quot;DOMAIN&quot;], customAPI=os.environ[&quot;CUSTOMAPI&quot;])@app.get(&quot;/&quot;, dependencies=[Depends(auth.scope([&quot;read:users&quot;]))])def secure():    # access token is valid    return &quot;Hello&quot;class AccessUser(BaseModel):    sub: str@app.get(&quot;/access/&quot;)def secure_access(current_user: AccessUser = Depends(auth.claim(AccessUser))):    # access token is valid and getting user info from access token    return f&quot;Hello&quot;, {current_user.sub}get_current_user = Auth0CurrentUser(    domain=os.environ[&quot;DOMAIN&quot;],    client_id=os.environ[&quot;CLIENTID&quot;])@app.get(&quot;/user/&quot;)def secure_user(current_user: Auth0Claims = Depends(get_current_user)):    # ID token is valid and getting user info from ID token    return f&quot;Hello, {current_user.username}&quot;```Try to run the server and see interactive UI in the same way.## Example (Firebase Authentication)### Pre-requirement* Create a user in Firebase Authentication and get `project ID`* Get ID token for the created user### Create itCreate a file main.py with:```python3from fastapi import FastAPI, Dependsfrom fastapi_cloudauth.firebase import FirebaseCurrentUser, FirebaseClaimsapp = FastAPI()get_current_user = FirebaseCurrentUser(    project_id=os.environ[&quot;PROJECT_ID&quot;])@app.get(&quot;/user/&quot;)def secure_user(current_user: FirebaseClaims = Depends(get_current_user)):    # ID token is valid and getting user info from ID token    return f&quot;Hello, {current_user.user_id}&quot;```Try to run the server and see the interactive UI in the same way.## Additional User InformationWe can get values for the current user from access/ID token by writing a few lines.### Custom ClaimsFor Auth0, the ID token contains the following extra values (Ref at [Auth0 official doc](https://auth0.com/docs/tokens)):```json{  &quot;iss&quot;: &quot;http://YOUR_DOMAIN/&quot;,  &quot;sub&quot;: &quot;auth0|123456&quot;,  &quot;aud&quot;: &quot;YOUR_CLIENT_ID&quot;,  &quot;exp&quot;: 1311281970,  &quot;iat&quot;: 1311280970,  &quot;name&quot;: &quot;Jane Doe&quot;,  &quot;given_name&quot;: &quot;Jane&quot;,  &quot;family_name&quot;: &quot;Doe&quot;,  &quot;gender&quot;: &quot;female&quot;,  &quot;birthdate&quot;: &quot;0000-10-31&quot;,  &quot;email&quot;: &quot;janedoe@example.com&quot;,  &quot;picture&quot;: &quot;http://example.com/janedoe/me.jpg&quot;}```By default, `Auth0CurrentUser` gives `pydantic.BaseModel` object, which has `username` (name) and `email` fields.Here is sample code for extracting extra user information (adding `user_id`) from ID token:```python3from pydantic import Fieldfrom fastapi_cloudauth.auth0 import Auth0Claims  # base current user info model (inheriting `pydantic`).# extend current user info model by `pydantic`.class CustomAuth0Claims(Auth0Claims):    user_id: str = Field(alias=&quot;sub&quot;)get_current_user = Auth0CurrentUser(domain=DOMAIN, client_id=CLIENTID)get_current_user.user_info = CustomAuth0Claims  # override user info model with a custom one.```Or, we can set new custom claims as follows:```python3get_user_detail = get_current_user.claim(CustomAuth0Claims)@app.get(&quot;/new/&quot;)async def detail(user: CustomAuth0Claims = Depends(get_user_detail)):    return f&quot;Hello, {user.user_id}&quot;```### Raw payloadIf you don't require `pydantic` data serialization (validation), `FastAPI-CloudAuth` has an option to extract the raw payload.All you need is:```python3get_raw_info = get_current_user.claim(None)@app.get(&quot;/new/&quot;)async def raw_detail(user = Depends(get_raw_info)):    # user has all items (ex. iss, sub, aud, exp, ... it depends on passed token)     return f&quot;Hello, {user.get('sub')}&quot;```## Additional scopesAdvanced user-SCOPE verification to protect your API.Supports:- all (default): required all scopes you set- any: At least one of the configured scopes is requiredUse as (`auth` is this instanse and `app` is fastapi.FastAPI instanse):```python3from fastapi import Dependsfrom fastapi_cloudauth import Operator@app.get(&quot;/&quot;, dependencies=[Depends(auth.scope([&quot;allowned&quot;, &quot;scopes&quot;]))])def api_all_scope():    return &quot;user has 'allowned' and 'scopes' scopes&quot;@app.get(&quot;/&quot;, dependencies=[Depends(auth.scope([&quot;allowned&quot;, &quot;scopes&quot;], op=Operator._any))])def api_any_scope():    return &quot;user has at least one of scopes (allowned, scopes)&quot;```## Development - ContributingPlease read [CONTRIBUTING](./CONTRIBUTING.md) for how to set up the development environment and testing.</longdescription>
</pkgmetadata>