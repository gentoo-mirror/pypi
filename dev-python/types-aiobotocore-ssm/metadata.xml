<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a id=&quot;types-aiobotocore-ssm&quot;&gt;&lt;/a&gt;# types-aiobotocore-ssm[![PyPI - types-aiobotocore-ssm](https://img.shields.io/pypi/v/types-aiobotocore-ssm.svg?color=blue)](https://pypi.org/project/types-aiobotocore-ssm)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-ssm.svg?color=blue)](https://pypi.org/project/types-aiobotocore-ssm)[![Docs](https://img.shields.io/readthedocs/types-aiobotocore.svg?color=blue)](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_ssm/)[![PyPI - Downloads](https://static.pepy.tech/badge/types-aiobotocore-ssm)](https://pepy.tech/project/types-aiobotocore-ssm)![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)Type annotations for[aiobotocore.SSM 2.5.4](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ssm.html#SSM)service compatible with [VSCode](https://code.visualstudio.com/),[PyCharm](https://www.jetbrains.com/pycharm/),[Emacs](https://www.gnu.org/software/emacs/),[Sublime Text](https://www.sublimetext.com/),[mypy](https://github.com/python/mypy),[pyright](https://github.com/microsoft/pyright) and other tools.Generated by[mypy-boto3-builder 7.17.2](https://github.com/youtype/mypy_boto3_builder).More information can be found on[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in[types-aiobotocore-ssm docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_ssm/).See how it helps to find and fix potential bugs:![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)- [types-aiobotocore-ssm](#types-aiobotocore-ssm)  - [How to install](#how-to-install)    - [From PyPI with pip](#from-pypi-with-pip)  - [How to uninstall](#how-to-uninstall)  - [Usage](#usage)    - [VSCode](#vscode)    - [PyCharm](#pycharm)    - [Emacs](#emacs)    - [Sublime Text](#sublime-text)    - [Other IDEs](#other-ides)    - [mypy](#mypy)    - [pyright](#pyright)  - [Explicit type annotations](#explicit-type-annotations)    - [Client annotations](#client-annotations)    - [Paginators annotations](#paginators-annotations)    - [Waiters annotations](#waiters-annotations)    - [Literals](#literals)    - [Type definitions](#type-definitions)  - [How it works](#how-it-works)  - [What's new](#what's-new)    - [Implemented features](#implemented-features)    - [Latest changes](#latest-changes)  - [Versioning](#versioning)  - [Thank you](#thank-you)  - [Documentation](#documentation)  - [Support and contributing](#support-and-contributing)&lt;a id=&quot;how-to-install&quot;&gt;&lt;/a&gt;## How to install&lt;a id=&quot;from-pypi-with-pip&quot;&gt;&lt;/a&gt;### From PyPI with pipInstall `types-aiobotocore` for `SSM` service.```bash# install with aiobotocore type annotationspython -m pip install 'types-aiobotocore[ssm]'# Lite version does not provide session.client/resource overloads# it is more RAM-friendly, but requires explicit type annotationspython -m pip install 'types-aiobotocore-lite[ssm]'# standalone installationpython -m pip install types-aiobotocore-ssm```&lt;a id=&quot;how-to-uninstall&quot;&gt;&lt;/a&gt;## How to uninstall```bashpython -m pip uninstall -y types-aiobotocore-ssm```&lt;a id=&quot;usage&quot;&gt;&lt;/a&gt;## Usage&lt;a id=&quot;vscode&quot;&gt;&lt;/a&gt;### VSCode- Install  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)- Install  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)- Set `Pylance` as your Python Language Server- Install `types-aiobotocore[ssm]` in your environment:```bashpython -m pip install 'types-aiobotocore[ssm]'```Both type checking and code completion should now work. No explicit typeannotations required, write your `aiobotocore` code as usual.&lt;a id=&quot;pycharm&quot;&gt;&lt;/a&gt;### PyCharmInstall `types-aiobotocore-lite[ssm]` in your environment:```bashpython -m pip install 'types-aiobotocore-lite[ssm]'````Both type checking and code completion should now work. Explicit typeannotations **are required**.Use `types-aiobotocore` package instead for implicit type discovery.&lt;a id=&quot;emacs&quot;&gt;&lt;/a&gt;### Emacs- Install `types-aiobotocore` with services you use in your environment:```bashpython -m pip install 'types-aiobotocore[ssm]'```- Install [use-package](https://github.com/jwiegley/use-package),  [lsp](https://github.com/emacs-lsp/lsp-mode/),  [company](https://github.com/company-mode/company-mode) and  [flycheck](https://github.com/flycheck/flycheck) packages- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package```elisp(use-package lsp-pyright  :ensure t  :hook (python-mode . (lambda ()                          (require 'lsp-pyright)                          (lsp)))  ; or lsp-deferred  :init (when (executable-find &quot;python3&quot;)          (setq lsp-pyright-python-executable-cmd &quot;python3&quot;))  )```- Make sure emacs uses the environment where you have installed  `types-aiobotocore`Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;sublime-text&quot;&gt;&lt;/a&gt;### Sublime Text- Install `types-aiobotocore[ssm]` with services you use in your environment:```bashpython -m pip install 'types-aiobotocore[ssm]'```- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) packageType checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;other-ides&quot;&gt;&lt;/a&gt;### Other IDEsNot tested, but as long as your IDE supports `mypy` or `pyright`, everythingshould work.&lt;a id=&quot;mypy&quot;&gt;&lt;/a&gt;### mypy- Install `mypy`: `python -m pip install mypy`- Install `types-aiobotocore[ssm]` in your environment:```bashpython -m pip install 'types-aiobotocore[ssm]'````Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;pyright&quot;&gt;&lt;/a&gt;### pyright- Install `pyright`: `npm i -g pyright`- Install `types-aiobotocore[ssm]` in your environment:```bashpython -m pip install 'types-aiobotocore[ssm]'```Optionally, you can install `types-aiobotocore` to `typings` folder.Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;explicit-type-annotations&quot;&gt;&lt;/a&gt;## Explicit type annotations&lt;a id=&quot;client-annotations&quot;&gt;&lt;/a&gt;### Client annotations`SSMClient` provides annotations for `session.create_client(&quot;ssm&quot;)`.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_ssm import SSMClientsession = get_session()async with session.create_client(&quot;ssm&quot;) as client:    client: SSMClient    # now client usage is checked by mypy and IDE should provide code completion```&lt;a id=&quot;paginators-annotations&quot;&gt;&lt;/a&gt;### Paginators annotations`types_aiobotocore_ssm.paginator` module contains type annotations for allpaginators.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_ssm import SSMClientfrom types_aiobotocore_ssm.paginator import (    DescribeActivationsPaginator,    DescribeAssociationExecutionTargetsPaginator,    DescribeAssociationExecutionsPaginator,    DescribeAutomationExecutionsPaginator,    DescribeAutomationStepExecutionsPaginator,    DescribeAvailablePatchesPaginator,    DescribeEffectiveInstanceAssociationsPaginator,    DescribeEffectivePatchesForPatchBaselinePaginator,    DescribeInstanceAssociationsStatusPaginator,    DescribeInstanceInformationPaginator,    DescribeInstancePatchStatesPaginator,    DescribeInstancePatchStatesForPatchGroupPaginator,    DescribeInstancePatchesPaginator,    DescribeInventoryDeletionsPaginator,    DescribeMaintenanceWindowExecutionTaskInvocationsPaginator,    DescribeMaintenanceWindowExecutionTasksPaginator,    DescribeMaintenanceWindowExecutionsPaginator,    DescribeMaintenanceWindowSchedulePaginator,    DescribeMaintenanceWindowTargetsPaginator,    DescribeMaintenanceWindowTasksPaginator,    DescribeMaintenanceWindowsPaginator,    DescribeMaintenanceWindowsForTargetPaginator,    DescribeOpsItemsPaginator,    DescribeParametersPaginator,    DescribePatchBaselinesPaginator,    DescribePatchGroupsPaginator,    DescribePatchPropertiesPaginator,    DescribeSessionsPaginator,    GetInventoryPaginator,    GetInventorySchemaPaginator,    GetOpsSummaryPaginator,    GetParameterHistoryPaginator,    GetParametersByPathPaginator,    GetResourcePoliciesPaginator,    ListAssociationVersionsPaginator,    ListAssociationsPaginator,    ListCommandInvocationsPaginator,    ListCommandsPaginator,    ListComplianceItemsPaginator,    ListComplianceSummariesPaginator,    ListDocumentVersionsPaginator,    ListDocumentsPaginator,    ListOpsItemEventsPaginator,    ListOpsItemRelatedItemsPaginator,    ListOpsMetadataPaginator,    ListResourceComplianceSummariesPaginator,    ListResourceDataSyncPaginator,)session = get_session()async with session.create_client(&quot;ssm&quot;) as client:    client: SSMClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    describe_activations_paginator: DescribeActivationsPaginator = client.get_paginator(        &quot;describe_activations&quot;    )    describe_association_execution_targets_paginator: DescribeAssociationExecutionTargetsPaginator = client.get_paginator(        &quot;describe_association_execution_targets&quot;    )    describe_association_executions_paginator: DescribeAssociationExecutionsPaginator = (        client.get_paginator(&quot;describe_association_executions&quot;)    )    describe_automation_executions_paginator: DescribeAutomationExecutionsPaginator = (        client.get_paginator(&quot;describe_automation_executions&quot;)    )    describe_automation_step_executions_paginator: DescribeAutomationStepExecutionsPaginator = (        client.get_paginator(&quot;describe_automation_step_executions&quot;)    )    describe_available_patches_paginator: DescribeAvailablePatchesPaginator = client.get_paginator(        &quot;describe_available_patches&quot;    )    describe_effective_instance_associations_paginator: DescribeEffectiveInstanceAssociationsPaginator = client.get_paginator(        &quot;describe_effective_instance_associations&quot;    )    describe_effective_patches_for_patch_baseline_paginator: DescribeEffectivePatchesForPatchBaselinePaginator = client.get_paginator(        &quot;describe_effective_patches_for_patch_baseline&quot;    )    describe_instance_associations_status_paginator: DescribeInstanceAssociationsStatusPaginator = (        client.get_paginator(&quot;describe_instance_associations_status&quot;)    )    describe_instance_information_paginator: DescribeInstanceInformationPaginator = (        client.get_paginator(&quot;describe_instance_information&quot;)    )    describe_instance_patch_states_paginator: DescribeInstancePatchStatesPaginator = (        client.get_paginator(&quot;describe_instance_patch_states&quot;)    )    describe_instance_patch_states_for_patch_group_paginator: DescribeInstancePatchStatesForPatchGroupPaginator = client.get_paginator(        &quot;describe_instance_patch_states_for_patch_group&quot;    )    describe_instance_patches_paginator: DescribeInstancePatchesPaginator = client.get_paginator(        &quot;describe_instance_patches&quot;    )    describe_inventory_deletions_paginator: DescribeInventoryDeletionsPaginator = (        client.get_paginator(&quot;describe_inventory_deletions&quot;)    )    describe_maintenance_window_execution_task_invocations_paginator: DescribeMaintenanceWindowExecutionTaskInvocationsPaginator = client.get_paginator(        &quot;describe_maintenance_window_execution_task_invocations&quot;    )    describe_maintenance_window_execution_tasks_paginator: DescribeMaintenanceWindowExecutionTasksPaginator = client.get_paginator(        &quot;describe_maintenance_window_execution_tasks&quot;    )    describe_maintenance_window_executions_paginator: DescribeMaintenanceWindowExecutionsPaginator = client.get_paginator(        &quot;describe_maintenance_window_executions&quot;    )    describe_maintenance_window_schedule_paginator: DescribeMaintenanceWindowSchedulePaginator = (        client.get_paginator(&quot;describe_maintenance_window_schedule&quot;)    )    describe_maintenance_window_targets_paginator: DescribeMaintenanceWindowTargetsPaginator = (        client.get_paginator(&quot;describe_maintenance_window_targets&quot;)    )    describe_maintenance_window_tasks_paginator: DescribeMaintenanceWindowTasksPaginator = (        client.get_paginator(&quot;describe_maintenance_window_tasks&quot;)    )    describe_maintenance_windows_paginator: DescribeMaintenanceWindowsPaginator = (        client.get_paginator(&quot;describe_maintenance_windows&quot;)    )    describe_maintenance_windows_for_target_paginator: DescribeMaintenanceWindowsForTargetPaginator = client.get_paginator(        &quot;describe_maintenance_windows_for_target&quot;    )    describe_ops_items_paginator: DescribeOpsItemsPaginator = client.get_paginator(        &quot;describe_ops_items&quot;    )    describe_parameters_paginator: DescribeParametersPaginator = client.get_paginator(        &quot;describe_parameters&quot;    )    describe_patch_baselines_paginator: DescribePatchBaselinesPaginator = client.get_paginator(        &quot;describe_patch_baselines&quot;    )    describe_patch_groups_paginator: DescribePatchGroupsPaginator = client.get_paginator(        &quot;describe_patch_groups&quot;    )    describe_patch_properties_paginator: DescribePatchPropertiesPaginator = client.get_paginator(        &quot;describe_patch_properties&quot;    )    describe_sessions_paginator: DescribeSessionsPaginator = client.get_paginator(        &quot;describe_sessions&quot;    )    get_inventory_paginator: GetInventoryPaginator = client.get_paginator(&quot;get_inventory&quot;)    get_inventory_schema_paginator: GetInventorySchemaPaginator = client.get_paginator(        &quot;get_inventory_schema&quot;    )    get_ops_summary_paginator: GetOpsSummaryPaginator = client.get_paginator(&quot;get_ops_summary&quot;)    get_parameter_history_paginator: GetParameterHistoryPaginator = client.get_paginator(        &quot;get_parameter_history&quot;    )    get_parameters_by_path_paginator: GetParametersByPathPaginator = client.get_paginator(        &quot;get_parameters_by_path&quot;    )    get_resource_policies_paginator: GetResourcePoliciesPaginator = client.get_paginator(        &quot;get_resource_policies&quot;    )    list_association_versions_paginator: ListAssociationVersionsPaginator = client.get_paginator(        &quot;list_association_versions&quot;    )    list_associations_paginator: ListAssociationsPaginator = client.get_paginator(        &quot;list_associations&quot;    )    list_command_invocations_paginator: ListCommandInvocationsPaginator = client.get_paginator(        &quot;list_command_invocations&quot;    )    list_commands_paginator: ListCommandsPaginator = client.get_paginator(&quot;list_commands&quot;)    list_compliance_items_paginator: ListComplianceItemsPaginator = client.get_paginator(        &quot;list_compliance_items&quot;    )    list_compliance_summaries_paginator: ListComplianceSummariesPaginator = client.get_paginator(        &quot;list_compliance_summaries&quot;    )    list_document_versions_paginator: ListDocumentVersionsPaginator = client.get_paginator(        &quot;list_document_versions&quot;    )    list_documents_paginator: ListDocumentsPaginator = client.get_paginator(&quot;list_documents&quot;)    list_ops_item_events_paginator: ListOpsItemEventsPaginator = client.get_paginator(        &quot;list_ops_item_events&quot;    )    list_ops_item_related_items_paginator: ListOpsItemRelatedItemsPaginator = client.get_paginator(        &quot;list_ops_item_related_items&quot;    )    list_ops_metadata_paginator: ListOpsMetadataPaginator = client.get_paginator(        &quot;list_ops_metadata&quot;    )    list_resource_compliance_summaries_paginator: ListResourceComplianceSummariesPaginator = (        client.get_paginator(&quot;list_resource_compliance_summaries&quot;)    )    list_resource_data_sync_paginator: ListResourceDataSyncPaginator = client.get_paginator(        &quot;list_resource_data_sync&quot;    )```&lt;a id=&quot;waiters-annotations&quot;&gt;&lt;/a&gt;### Waiters annotations`types_aiobotocore_ssm.waiter` module contains type annotations for allwaiters.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_ssm.client import SSMClientfrom types_aiobotocore_ssm.waiter import CommandExecutedWaitersession = get_session()async with session.create_client(&quot;ssm&quot;) as client:    client: SSMClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    command_executed_waiter: CommandExecutedWaiter = client.get_waiter(&quot;command_executed&quot;)```&lt;a id=&quot;literals&quot;&gt;&lt;/a&gt;### Literals`types_aiobotocore_ssm.literals` module contains literals extracted from shapesthat can be used in user code for type checking.Full list of `SSM` Literals can be found in[docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_ssm/literals/).```pythonfrom types_aiobotocore_ssm.literals import AssociationComplianceSeverityTypedef check_value(value: AssociationComplianceSeverityType) -&gt; bool:    ...```&lt;a id=&quot;type-definitions&quot;&gt;&lt;/a&gt;### Type definitions`types_aiobotocore_ssm.type_defs` module contains structures and shapesassembled to typed dictionaries and unions for additional type checking.Full list of `SSM` TypeDefs can be found in[docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_ssm/type_defs/).```pythonfrom types_aiobotocore_ssm.type_defs import AccountSharingInfoTypeDefdef get_value() -&gt; AccountSharingInfoTypeDef:    return {...}```&lt;a id=&quot;how-it-works&quot;&gt;&lt;/a&gt;## How it worksFully automated[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefullygenerates type annotations for each service, patiently waiting for`aiobotocore` updates. It delivers drop-in type annotations for you and makessure that:- All available `aiobotocore` services are covered.- Each public class and method of every `aiobotocore` service gets valid type  annotations extracted from `botocore` schemas.- Type annotations include up-to-date documentation.- Link to documentation is provided for every method.- Code is processed by [black](https://github.com/psf/black) and  [isort](https://github.com/PyCQA/isort) for readability.&lt;a id=&quot;what's-new&quot;&gt;&lt;/a&gt;## What's new&lt;a id=&quot;implemented-features&quot;&gt;&lt;/a&gt;### Implemented features- Fully type annotated `boto3`, `botocore`, `aiobotocore` and `aioboto3`  libraries- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`  compatibility- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type  annotations for each service- Generated `TypeDefs` for each service- Generated `Literals` for each service- Auto discovery of types for `boto3.client` and `boto3.resource` calls- Auto discovery of types for `session.client` and `session.resource` calls- Auto discovery of types for `client.get_waiter` and `client.get_paginator`  calls- Auto discovery of types for `ServiceResource` and `Resource` collections- Auto discovery of types for `aiobotocore.Session.create_client` calls&lt;a id=&quot;latest-changes&quot;&gt;&lt;/a&gt;### Latest changesBuilder changelog can be found in[Releases](https://github.com/youtype/mypy_boto3_builder/releases).&lt;a id=&quot;versioning&quot;&gt;&lt;/a&gt;## Versioning`types-aiobotocore-ssm` version is the same as related `aiobotocore` versionand follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.&lt;a id=&quot;thank-you&quot;&gt;&lt;/a&gt;## Thank you- [Allie Fitter](https://github.com/alliefitter) for  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),  this package is based on top of his work- [black](https://github.com/psf/black) developers for an awesome formatting  tool- [Timothy Edmund Crosley](https://github.com/timothycrosley) for  [isort](https://github.com/PyCQA/isort) and how flexible it is- [mypy](https://github.com/python/mypy) developers for doing all dirty work  for us- [pyright](https://github.com/microsoft/pyright) team for the new era of typed  Python&lt;a id=&quot;documentation&quot;&gt;&lt;/a&gt;## DocumentationAll services type annotations can be found in[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_ssm/)&lt;a id=&quot;support-and-contributing&quot;&gt;&lt;/a&gt;## Support and contributingThis package is auto-generated. Please reports any bugs or request new featuresin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)repository.</longdescription>
</pkgmetadata>