<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytest-compare[![PyPI Latest Release](https://img.shields.io/pypi/v/pytest_compare.svg)](https://pypi.org/project/pytest-compare/)[![License](https://camo.githubusercontent.com/2439ed6934e5c87e17a7d562cfb92c91d2a673d8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f726168756c646b6a61696e2f6769746875622d70726f66696c652d726561646d652d67656e657261746f723f7374796c653d666c61742d737175617265)](https://pytesty.github.io/pytest-compare/license/)[![Documentation](https://readthedocs.org/projects/pytest/badge/?version=latest)](https://pytesty.github.io/pytest-compare/documentation/)[![DOI](https://github.com/pytest-dev/pytest/workflows/test/badge.svg)](https://github.com/pytesty/pytest-compare/actions?query=workflow%3Atests)[![Downloads](https://static.pepy.tech/badge/pytest-compare/month)](https://pepy.tech/project/pytest-compare)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)# What is it?The `pytest-compare` helps validate method call arguments when testing python code.`pytest-compare` is designed to work with [assert methods](https://docs.python.org/3/library/unittest.mock.html#the-mock-class). While python native variables can be easily compared, a more complicated structures sometimes do not. For example validating a `pd.DataFrame` will raise an exception. This is where `pytest-compare` comes in. It allows this kind of structures to be easily compared.# How to installTo install `pytest-compare` from PyPi, run the command:```shpip install pytest-compare```## Optional dependenciesSome compare modules may require additional packages to be installed.### PandasTo compare [pandas](https://pandas.pydata.org/) module, add the `pandas` option to the installation:```shpip install pytest-compare[pandas]```# How to useThe comparation modules are design to be used with [assert methods](https://docs.python.org/3/library/unittest.mock.html#the-mock-class). When validating patched method call arguments ```pythondf = pd.DataFrame({&quot;a&quot;: [1, 2, 3], &quot;b&quot;: [4, 5, 6]})with patch.object(ProductionClass, 'method', return_value=None) as mock_method:    thing = ProductionClass()    thing.method(df)``````python# will raise an exceptionmock_method.assert_called_once_with(df)# the correct waymock_method.assert_called_once_with(CompareDataFrame(df))```## Multiple arguments in a callWhen a method is called using multiple arguments, all of them must be addressed in the test. while python native variables can be easily compared, `pytest-compare` is designed to compare a more complicated structures and do custom compares.```pythonwith patch.object(ProductionClass, 'method', return_value=None) as mock_method:    thing = ProductionClass()    thing.method(1, &quot;str&quot;, df1, df2)    # the correct waymock_method.assert_called_once_with(1, &quot;str&quot;, CompareDataFrame(df1), CompareDataFrame(df2))```## Args and KwargsWhen validating the call, the expected values must be passed in the exact same mix of args and kwargs as when they were called.```pythonwith patch.object(ProductionClass, 'method', return_value=None) as mock_method:    thing = ProductionClass()    thing.method(df1, dataframe=df2)    # the correct waymock_method.assert_called_once_with(CompareDataFrame(df1), dataframe=CompareDataFrame(df2))```### Actual and Expected convention* actual: The values that the method was originally called with.* expected: Test values to see if the method was called with.For example here, `arg_actual` is the actual value while `arg_expected` is the expected value.```pythonmock_method = Mock()mock_method(arg_actual)mock_method.assert_called_once_with(arg_expected)```If `arg_actual` is not equal to `arg_expected`, an exception will be raised.# Development## Setup### Virtual EnvironmentCreate a virtual environment and install the dependencies:    $ python3 -m venv venv    $ source venv/bin/activate    $ pip install -e &quot;.[pandas]&quot; -r requirements-dev.txt -r requirements-quality.txt### Pre-commit HooksStart by installing the pre-commit hooks which will run `black`, `mypy`, `flake8`, and `codespell` on every commit.:    $ hooks/autohook.sh install## Creating tests### Running testsTo test the code, run the following command:    $ pytest### Writing testsTests are written using the `pytest` framework. To create a test for a new `Compare` module, create two files in the `tests` directory: `conftest.py` and the test file witch must start with `test_`.The `conftest.py` file must implement the following fixtures:```python@pytest.fixturedef actual_call_args() -&gt; Tuple[Any]:    raise NotImplementedError(&quot;`actual_call_args` must be implemented&quot;)@pytest.fixturedef actual_call_kwargs() -&gt; Dict[str, Any]:    raise NotImplementedError(&quot;`actual_call_kwargs` must be implemented&quot;)@pytest.fixturedef expected_call_args() -&gt; Tuple[Any]:    raise NotImplementedError(&quot;`expected_call_args` must be implemented&quot;)@pytest.fixturedef expected_call_kwargs() -&gt; Dict[str, CompareBase]:    raise NotImplementedError(&quot;`expected_call_kwargs` must be implemented&quot;)```The test file must implement a test class that inherits from `BaseTest`.That way two base tests will be run for each `Compare` module that wil test the `args` and `kwargs` of the method call.</longdescription>
</pkgmetadata>