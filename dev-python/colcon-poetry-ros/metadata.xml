<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># colcon-poetry-rosAn extension for [colcon-core][colcon-core] that adds support for Pythonpackages that use [Poetry][poetry] within ROS. This extension is a replacementfor Colcon's built-in `setup.cfg` based Python support and the Python-relatedbits in [colcon-ros][colcon-ros].We use this extension with Foxy and Humble, but other versions should work aswell. Please create an issue if you see problems![colcon-core]: https://github.com/colcon/colcon-core[poetry]: https://python-poetry.org/[colcon-ros]: https://github.com/colcon/colcon-ros## Getting StartedStart by install this extension with Pip:```bashpip3 install colcon-poetry-ros```Then, add a `pyproject.toml` in the root of your package's directory. Eachpackage should have its own `pyproject.toml` file. It should look somethinglike this:```toml[tool.poetry]name = &quot;my_package&quot;version = &quot;0.1.0&quot;description = &quot;Does something cool&quot;authors = [&quot;John Smith &lt;johnny@urbanmachine.build&gt;&quot;]license = &quot;BSD-3-Clause&quot;[tool.poetry.dependencies]python = &quot;^3.8&quot;[tool.poetry.scripts]node_a = &quot;my_package.node_a:main&quot;node_b = &quot;my_package.node_b:main&quot;[tool.colcon-poetry-ros.data-files]&quot;share/ament_index/resource_index/packages&quot; = [&quot;resource/my_package&quot;]&quot;share/my_package&quot; = [&quot;package.xml&quot;][build-system]requires = [&quot;poetry-core&gt;=1.0.0&quot;]build-backend = &quot;poetry.core.masonry.api&quot;```Finally, run your build like normal:```bashcolcon build```## TestingThis extension currently supports projects based on PyTest. Run the followingcommand to start tests:```bashcolcon test```## Node EntrypointsIf you want to be able to run your nodes using `ros2 run`, add your node'sentrypoint to the `tool.poetry.scripts` table. See[Poetry's documentation][poetry-scripts] for details.```toml[tool.poetry.scripts]node_a = &quot;my_package.node_a:main&quot;node_b = &quot;my_package.node_b:main&quot;```[poetry-scripts]: https://python-poetry.org/docs/pyproject/#scripts## Data FilesPoetry has only limited support for including data files in an installation,and the current implementation is not flexible enough to be used with ROS.Instead, this extension consults a custom section in your `pyproject.toml`,called `tool.colcon-poetry-ros.data-files`.The format is intended to be mostly identical to the `data_files` field usedby [setuptools][setuptools-data-files]. The main differences are that copyingentire directories is supported, and globbing is not yet implemented.All ROS packages must have, at minimum, these entries in the`tool.colcon-poetry-ros.data-files` section (with `{package_name}` replacedwith the name of your package):```toml[tool.colcon-poetry-ros.data-files]&quot;share/ament_index/resource_index/packages&quot; = [&quot;resource/{package_name}&quot;]&quot;share/{package_name}&quot; = [&quot;package.xml&quot;]```These entries take care of adding the package index marker and `package.xml`file to the installation.[setuptools-data-files]: https://setuptools.pypa.io/en/latest/userguide/datafiles.html## Installing DependenciesPoetry dependencies are not installed as part of the build process, but theycan be installed using a separate tool that's included in this package.```bashpython3 -m colcon_poetry_ros.dependencies.install --base-paths &lt;path to your nodes&gt;```This command installs each package's dependencies to Colcon's base installdirectory. This means that your dependencies live alongside your package'scode after it's built, isolated from the rest of your system.If you customize `colcon build` with the `--install-base` or `--merge-install`flags, make sure to provide those to this tool as well.## Communicating Dependencies to ColconColcon expects extensions to report their dependencies as dependencydescriptors so that they can be shown in tools like `colcon graph`. Thefollowing sections describe how each dependency type is sourced from your`pyproject.toml`.### Build DependenciesThis extension uses the `requires` field in the `build-system` table to sourcebuild dependencies. See [the section in PEP 518][build-system-requires] fordetails. This section might only be needed if you're using a compiler likeCython that runs during package installation. Since these packages are notlocked by Poetry, the version specifications in the `requires` field will beused as-is.### Runtime DependenciesRuntime dependencies are pulled from the `tool.poetry.dependencies` table. See[Poetry's documentation][tool-poetry-dependencies] for details. Dependencyversions are defined by the `poetry.lock` file.You can include extras by setting the`POETRY_RUN_DEPENDS_EXTRAS` environment variable. Multiple extras can beprovided and are separated by commas. By default, no extras are included.### Test DependenciesPoetry currently has no official way of defining test dependencies, so testdependencies are instead expected to be in an extra called &quot;test&quot;. Dependencyversions are defined by the `poetry.lock` file.You can change which extras are used for test dependencies by setting the`POETRY_TEST_DEPENDS_EXTRAS` environment variable. Multiple extras can beprovided and are separated by commas. As mentioned above, this value is set to&quot;test&quot; by default.[build-system-requires]: https://www.python.org/dev/peps/pep-0518/#build-system-table[tool-poetry-dependencies]: https://python-poetry.org/docs/pyproject/#dependencies-and-dev-dependencies</longdescription>
</pkgmetadata>