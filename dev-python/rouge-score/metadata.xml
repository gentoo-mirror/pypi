<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python ROUGE Implementation## OverviewThis is a native python implementation of ROUGE, designed to replicate resultsfrom the original perl package.Maintainers may be contacted at rouge-opensource@google.com.ROUGE was originally introduced in the paper:Lin, Chin-Yew. ROUGE: a Package for Automatic Evaluation of Summaries. InProceedings of the Workshop on Text Summarization Branches Out (WAS 2004),Barcelona, Spain, July 25 - 26, 2004.## ROUGE for PythonThere are ROUGE implementations available for Python, however some are notnative python due to their dependency on the perl script, and others providediffering results when compared with the original implementation. This makes itdifficult to directly compare with known results.This package is designed to replicate perl results. It implements:*   ROUGE-N (N-gram) scoring*   ROUGE-L (Longest Common Subsequence) scoring*   Text normalization*   Bootstrap resampling for confidence interval calculation*   Optional Porter stemming to remove plurals and word suffixes such as (ing,    ion, ment).Note that not all options provided by the original perl ROUGE script aresupported, but the subset of options that are implemented should replicate theoriginal functionality.## Stopword removalThe original ROUGE perl script implemented optional stopword removal (using the-s parameter). However, there were ~600 stopwords used by ROUGE, borrowed fromanother now defunct package. This word list contained many words that may not besuited to some tasks, such as day and month names and numbers. It also has noclear license for redistribution. Since we are unable to replicate thisfunctionality precisely we do not include stopword removal.## Two flavors of ROUGE-LIn the ROUGE paper, two flavors of ROUGE are described:1. sentence-level: Compute longest common subsequence (LCS) between two pieces oftext. Newlines are ignored. This is called `rougeL` in this package.2. summary-level: Newlines in the text are interpreted as sentence boundaries,and the LCS is computed between each pair of reference and candidate sentences,and something called union-LCS is computed. This is called `rougeLsum` in thispackage. This is the ROUGE-L reported in *[Get To The Point: Summarization withPointer-Generator Networks](https://arxiv.org/abs/1704.04368)*, for example.If your references/candidates do not have newline delimiters, you can use the--split_summaries flag (or optional argument in RougeScorer).## How to runThis package compares target files (containing one example per line) withprediction files in the same format. It can be launched as follows (fromgoogle-research/):```shellpython -m rouge.rouge \    --target_filepattern=*.targets \    --prediction_filepattern=*.decodes \    --output_filename=scores.csv \    --use_stemmer=true \    --split_summaries=true```## Using pip```pip install -r rouge/requirements.txtpip install rouge-score```Then in python:```pythonfrom rouge_score import rouge_scorerscorer = rouge_scorer.RougeScorer(['rouge1', 'rougeL'], use_stemmer=True)scores = scorer.score('The quick brown fox jumps over the lazy dog',                      'The quick brown dog jumps on the log.')```## LicenseLicensed under the[Apache 2.0](https://github.com/google-research/google-research/blob/master/LICENSE)License.## DisclaimerThis is not an official Google product.</longdescription>
</pkgmetadata>