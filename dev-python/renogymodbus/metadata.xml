<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># renogymodbusThis package is intended to help you communicate with a Renogy charge controller. It has been tested with a Renogy Rover Elite but should work with other Renogy devices.## Features* Read real time data* Automatic retries## Connecting to the charge controllerPlease check whether your charge controller has a rs232 or rs485 port.### rs485Voucher code for 7% off Renogy: https://go.referralcandy.com/share/672HVC9* rs485 to USB serial cable (UK) https://uk.renogy.com/rs485-to-usb-serial-cable/* rs485 to USB serial cable (US) https://renogy.com/rs485-to-usb-serial-cable/&lt;img width=&quot;693&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/613642/179362448-12a805d1-4475-45cc-b3d7-c8a8e9c4b409.png&quot;&gt;### rs232Unfortunately the rs232 to USB serial cable has been discontinued by Renogy. It is possible to make your own.&lt;img width=&quot;690&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/613642/179362464-35bde1f8-fcb2-43d8-8a52-0232ffa210e8.png&quot;&gt;## Installing the packageTo install the package run```shpip install renogymodbus```This package requires Python 3, depending on your setup you might have to instead run:```shpip3 install renogymodbus```## Command line utilityTo run the command line utility and see the debug output run the following on the command line:```shrenogymodbus --portname /dev/ttyUSB0 --slaveaddress 1``````shusage: renogymodbus [-h] [--portname PORTNAME] [--slaveaddress SLAVEADDRESS]                   [--device {charge_controller,smart_battery}]                   [--find-slave-address]optional arguments:  -h, --help            show this help message and exit  --portname PORTNAME   Port name for example /dev/ttyUSB0  --slaveaddress SLAVEADDRESS                        Slave address 1-247  --device {charge_controller,smart_battery}                        Device to read data from. Either charge_controller or                        smart_battery  --find-slave-address  Find slave address of modbus device```Example output for charge controller```shReal Time Charge Controller DataSolar voltage: 43.1VSolar current: 0.09ASolar power: 4WLoad voltage: 0.0VLoad current: 0.0ALoad power: 0WBattery voltage: 13.9VBattery state of charge: 100%Battery temperature: -37°CController temperature: 48°CMaximum solar power today: 51WMinimum solar power today: 0WMaximum battery voltage today: 14.0VMinimum battery voltage today: 13.1V```Example output for smart battery```Real Time Smart Battery DataCell voltages: [3.3, 3.3, 3.3, 3.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]VCell temperatures: [24.0, 24.0, 24.0, 24.0, 1835.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]°CBMS temperature: 0.0°CEnvironment temperatures: [25.0, 25.0]°CHeater temperatures: [25.0, 25.0]°CCurrent: -0.2AVoltage: 13.3VRemaining capacity: 98.966AhTotal capacity: 100.0AhState of charge: 98.966%Cycle number: 0Charge voltage limit: 14.8VDischarge voltage limit: 10.0VCharge current limit: 50.0ADischarge current limit: -100.0A```## Python usageTo use the library within your Python code### Charge Controller```pythonfrom renogymodbus import RenogyChargeControllercontroller = RenogyChargeController(&quot;/dev/ttyUSB0&quot;, 1)controller.get_solar_voltage()```See https://github.com/rosswarren/renogymodbus/blob/main/renogymodbus/charge_controller.py for all available methods### Smart Battery```pythonfrom renogymodbus import RenogySmartBatterybattery = RenogySmartBattery(&quot;/dev/ttyUSB0&quot;, 48)battery.get_voltage()```See https://github.com/rosswarren/renogymodbus/blob/main/renogymodbus/smart_battery.py for all available methods</longdescription>
</pkgmetadata>