<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Extended Iterable Dataset for PyTorchAn extension of PyTorch [IterableDataset](https://pytorch.org/docs/stable/data.html#torch.utils.data.IterableDataset), this package introduces functionalities for shuffling, limiting, and offsetting data.## InstallationDirectly from [PyPI](https://pypi.org/project/torch_exid/):```bashpip install torch-exid```Or using [Poetry](https://python-poetry.org/):```bashpoetry add torch-exid```## UsageBegin by subclassing `ExtendedIterableDataset` and implement the `generator` method to yield items.Here's a simple example using an `IntegersDataset`:```pythonfrom torch_exid import ExtendedIterableDatasetclass IntegersDataset(ExtendedIterableDataset):    def generator(self) -&gt; Iterator[int]:        n = 0        while True:            yield n            n += 1# Will print out integers 0, 1, ..., 9:for n in IntegersDataset(limit=10):    print(n)```## Constructor Parameters`ExtendedIterableDataset` introduces several parameters to provide additional control:### limit: intSets the maximum number of data points to return. If negative, all data points are returned. Default is `-1` (return all data).```python# Will print out &quot;0, 1, 2&quot;for n in IntegersDataset(limit=3)    print(n)```### offset: intDetermines the number of initial data points to skip. Default is `0`.```python# Will print out &quot;2, 3, 4&quot;for n in IntegersDataset(limit=3, offset=2)    print(n)```### shuffle_buffer: intThis specifies the buffer size for shuffling. If greater than `1`, data is buffered and shuffled prior to being returned. If set to `1` (default), no shuffling occurs.```python# Will print out &quot;0, 1, 3, 2&quot; for the first time...for n in IntegersDataset(limit=4, shuffle_buffer=2)    print(n)# ...and 1, 0, 2, 3 second timefor n in IntegersDataset(limit=4, shuffle_buffer=2)    print(n)```### shuffle_seed: intDefines the seed for the random number generator used in shuffling. If not provided, a random seed is used:```python# Will print out &quot;1, 0, 3, 2&quot; both times:for n in IntegersDataset(limit=4, shuffle_buffer=2, shuffle_seed=42)    print(n)for n in IntegersDataset(limit=4, shuffle_buffer=2, shuffle_seed=42)    print(n)```### transforms: List[Callable[[Any], Any]]A list of transformations to apply to the data. Default is an empty list.```pythonds = IntegersDataset(    limit=3,    transforms=[        lambda n: n + 1,        lambda n: n ** 2,    ],)# Will print out &quot;1, 4, 9&quot;for n in ds:    print(n)```In addition to the above, any arguments or keyword arguments for the [IterableDataset](https://pytorch.org/docs/stable/data.html#torch.utils.data.IterableDataset) superclass can also be passed.## Methods### skip_next: Callable[[None], None]This method allows the skipping of the next item that would be yielded by the `generator`. Using `skip_next` will not affect the `limit` or `offset`.```pythonclass EvensDataset(ExtendedIterableDataset):    def generator(self) -&gt; Iterator[int]:        n = 0        while True:            if n % 2 != 0:                self.skip_next()            yield n            n += 1ds = EvensDataset(limit=5)# Will print out &quot;0, 2, 4, 6, 8&quot;for n in ds:    print(n)```In other words, it allows you to bypass the next item without modifying the overall iteration parameters.## ContributingContributions are greatly appreciated! Improvement can be made by submitting issues, proposing new features, or submitting pull requests with bug fixes or new functionalities.### Getting started with contributingHere are the steps to get started with development:```bash# Clone the repository:git clone https://github.com/arlegotin/torch_exid.gitcd torch_exid# Install the project and its dependencies using Poetry:poetry install# Spawn a shell within the virtual environment:poetry shell# Run tests to ensure everything is working correctly:pytest tests/```Please ensure all changes are accompanied by relevant unit tests, and that all tests pass before submitting a pull request. This helps maintain the quality and reliability of the project.</longdescription>
</pkgmetadata>