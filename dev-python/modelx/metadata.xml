<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>modelx======*Use Python like a spreadsheet!*.. image:: https://github.com/fumitoh/modelx/actions/workflows/python-package.yml/badge.svg    :target: https://github.com/fumitoh/modelx/actions/workflows/python-package.yml.. image:: https://img.shields.io/pypi/pyversions/modelx    :target: https://pypi.org/project/modelx/.. image:: https://img.shields.io/pypi/v/modelx    :target: https://pypi.org/project/modelx/.. image:: https://img.shields.io/pypi/l/modelx    :target: https://github.com/fumitoh/modelx/blob/master/LICENSE.LESSER.txt.. Overview BeginWhat is modelx?---------------**modelx** is a numerical computing tool that enables you touse Python like a spreadsheet by quickly defining cached functions.modelx is best suited for implementing mathematical models expressedin a large system of recursive formulas,in such fields as actuarial science, quantitative finance and risk management.Feature highlights------------------**modelx** enables you to interactivelydevelop, run and debug complex models in smart ways.modelx allows you to:- Define cached functions as *Cells* objects by writing Python functions- Quickly build object-oriented models, utilizing prototype-based inheritance and composition- Quickly parameterize a set of formulas and get results for different parameters- Trace formula dependency- Import and use any Python modules, such as `Numpy`_, `pandas`_, `SciPy`_, `scikit-learn`_, etc..- See formula traceback upon error and inspect local variables- Save models to text files and version-control with `Git`_- Save data such as pandas DataFrames in Excel or CSV files within models- Auto-document saved models by Python documentation generators, such as `Sphinx`_- Use Spyder with a plugin for modelx (spyder-modelx) to interface with modelx through GUI.. _Numpy: https://numpy.org/.. _pandas: https://pandas.pydata.org/.. _SciPy: https://scipy.org/.. _scikit-learn: https://scikit-learn.org/.. _Git: https://git-scm.com/.. _Sphinx: https://www.sphinx-doc.orgmodelx sites-------------========================== ===============================================Home page                  https://modelx.ioBlog                       https://modelx.io/allpostsDocumentation site         https://docs.modelx.ioDevelopment                https://github.com/fumitoh/modelxDiscussion Forum           https://github.com/fumitoh/modelx/discussionsmodelx on PyPI             https://pypi.org/project/modelx/========================== ===============================================Who is modelx for?------------------**modelx** is designed to be domain agnostic, so it's useful for anyone in any field.Especially, modelx is suited for modeling in such fields such as:- Quantitative finance- Risk management- Actuarial science**lifelib** (https://lifelib.io) is a library of actuarial andfinancial models that are built on top of modelx.How modelx works----------------Below is an example showing how to build a simple model using modelx.The model performs a Monte Carlo simulation to generate 10,000stochastic paths of a stock price that follow a geometric Brownian motionand to price an European call option on the stock... code-block:: python    import modelx as mx    import numpy as np    model = mx.new_model()                  # Create a new Model named &quot;Model1&quot;    space = model.new_space(&quot;MonteCarlo&quot;)   # Create a UserSpace named &quot;MonteCralo&quot;    # Define names in MonteCarlo    space.np = np    space.M = 10000     # Number of scenarios    space.T = 3         # Time to maturity in years    space.N = 36        # Number of time steps    space.S0 = 100      # S(0): Stock price at t=0    space.r = 0.05      # Risk Free Rate    space.sigma = 0.2   # Volatility    space.K = 110       # Option Strike    # Define Cells objects in MonteCarlo from function definitions    @mx.defcells    def std_norm_rand():        gen = np.random.default_rng(1234)        return gen.standard_normal(size=(N, M))    @mx.defcells    def stock(i):        &quot;&quot;&quot;Stock price at time t_i&quot;&quot;&quot;        dt = T/N; t = dt * i        if i == 0:            return np.full(shape=M, fill_value=S0)        else:            epsilon = std_norm_rand()[i-1]            return stock(i-1) * np.exp((r - 0.5 * sigma**2) * dt + sigma * epsilon * dt**0.5)    @mx.defcells    def call_opt():        &quot;&quot;&quot;Call option price by Monte Carlo&quot;&quot;&quot;        return np.average(np.maximum(stock(N) - K, 0)) * np.exp(-r*T)Running the model from IPython is as simple as calling a function:.. code-block:: pycon    &gt;&gt;&gt; stock(space.N)      # Stock price at i=N i.e. t=T    array([ 78.58406132,  59.01504804, 115.148291  , ..., 155.39335662,            74.7907511 , 137.82730703])    &gt;&gt;&gt; call_opt()    16.26919556999345Changing a parameter is as simple as assigning a value to a name:.. code-block:: pycon    &gt;&gt;&gt; space.K = 100   # Cache is cleared by this assignment    &gt;&gt;&gt; call_opt()    # New option price for the updated strike    20.96156962064You can even dynamically create multiple copies of *MonteCarlo*with different combinations of ``r`` and ``sigma``,by parameterizing *MonteCarlo* with ``r`` and ``sigma``:.. code-block:: pycon    &gt;&gt;&gt; space.parameters = (&quot;r&quot;, &quot;sigma&quot;)   # Parameterize MonteCarlo with r and sigma    &gt;&gt;&gt; space[0.03, 0.15].call_opt()  # Dynamically create a copy of MonteCarlo with r=3% and sigma=15%    14.812014828333284    &gt;&gt;&gt; space[0.06, 0.4].call_opt()   # Dynamically create another copy with r=6% and sigma=40%    33.90481014639403License-------Copyright 2017-2022, Fumito Hamamuramodelx is free software; you can redistribute it and/ormodify it under the terms of`GNU Lesser General Public License v3 (LGPLv3)&lt;https://github.com/fumitoh/modelx/blob/master/LICENSE.LESSER.txt&gt;`_.Contributions, productive comments, requests and feedback from the communityare always welcome. Information on modelx development is found at Githubhttps://github.com/fumitoh/modelx.. Overview EndRequirements------------* Python 3.6+* NetwrkX 2.0+* asttokens* LibCST* Pandas* OpenPyXL</longdescription>
</pkgmetadata>