<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-db-constraints## What is this?Add database table-level constraints to your Django model's Meta class and have `makemigrations` add the appropriate migration.```pythonclass Foo(models.Model):    bar = models.IntegerField()    baz = models.IntegerField()    class Meta:        db_constraints = {            'bar_equal_baz': 'check (bar = baz)',        }```This should generate a migration like so:```pythonclass Migration(migrations.Migration):    initial = True    dependencies = [    ]    operations = [        migrations.CreateModel(            name='Foo',            fields=[                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),                ('bar', models.IntegerField()),                ('baz', models.IntegerField()),            ],        ),        django_db_constraints.operations.AlterConstraints(            name='Foo',            db_constraints={'bar_equal_baz': 'check (bar = baz)'},        ),    ]```The resulting SQL applied:```sqlCREATE TABLE &quot;sample_foo&quot; (&quot;id&quot; serial NOT NULL PRIMARY KEY, &quot;bar&quot; integer NOT NULL, &quot;baz&quot; integer NOT NULL)ALTER TABLE &quot;sample_foo&quot; ADD CONSTRAINT &quot;bar_equal_baz&quot; check (bar = baz)```## Composite foreign keysIt's possible to support composite foreign keys if you have a unique key on your reference model:([Why are composite foreign keys useful?](https://github.com/rapilabs/blog/blob/master/articles/same-parent-db-pattern.md))```pythonclass Bar(models.Model):    baz = models.IntegerField()    class Meta:        unique_together = ('id', 'baz')class Foo(models.Model):    bar = models.ForeignKey(Bar)    baz = models.IntegerField()    class Meta:        db_constraints = {            'composite_fk': 'foreign key (bar_id, baz) references sample_bar (id, baz)',        }```Results in:```sqlALTER TABLE &quot;sample_foo&quot; ADD CONSTRAINT &quot;composite_fk&quot; foreign key (bar_id, baz) references sample_bar (id, baz)```## Migration operation orderingGiven that nothing will depend on a constraint operation, they're simply added to the end of the list of operationsfor a migration.  This includes operations that drop fields used in a constraint as the database drop will any relatedconstraints as well (at least with PostgreSQL).## CaveatsIt's possible to end up in a situation where the constraints are declared on the Meta class but do not exist in the databasedue to a database dropping a constraint implicitly when a field in the constraint is dropped.## Installation```pip install django-db-constraints```in your settings.py:```pythonINSTALLED_APPS = [    'django_db_constraints',    â€¦]```</longdescription>
</pkgmetadata>