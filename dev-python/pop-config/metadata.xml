<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========Pop Config==========.. image:: https://img.shields.io/badge/made%20with-pop-teal   :alt: Made with pop, a Python implementation of Plugin Oriented Programming   :target: https://pop.readthedocs.io/.. image:: https://img.shields.io/badge/docs%20on-vmware.gitlab.io-blue   :alt: Documentation is published with Sphinx on GitLab Pages via vmware.gitlab.io   :target: https://vmware.gitlab.io/pop/pop-config/en/latest/index.html.. image:: https://img.shields.io/badge/made%20with-python-yellow   :alt: Made with Python   :target: https://www.python.org/About=====Pop-config is the official tool to allow for creating and app-mergingconfiguration options for ``pop`` projects. Plugin Oriented Programmingpresents a means to merge multiple applications together dynamically.This capabilities requires that the startup of these applications needsto be managed from within the programming paradigm. Since this is the case``pop-config`` becomes a critical and hard requirement of ``pop``.Pop-config is not just about being able to work with ``pop`` projectsto facilitate app-merging, it has also been designed to make the startupof an application much simpler, and to make the expensive boiler plateof startup and configuration as transparent as possible. When making``pop`` projects the idea is that projects are developed in very smallchunks and are then dynamically merged together. So the creation ofthese mergeable apps needs to be quick and easy!Pop-config also solves a problem with configuration of applications,when making a new application, if you want robust configurationloading, you need to be able to take options from the command line,environment variables, and configuration files. Pop-config does allof this for you, and loads them in the correct order, all behind thescenes, making your life easier.* `pop-config source code &lt;https://gitlab.com/vmware/pop/pop-config&gt;`__* `pop-config documentation &lt;https://vmware.gitlab.io/pop/pop-config/en/latest/index.html&gt;`__Installation============For a basic installation run.. code-block:: bash    $ pip install pop-configTo enable async logging install with the ``async`` extras.. code-block:: bash    $ pip install pop-config[async]Understanding the conf.py=========================Pop relies on a configuration file to manage how to merge apps, andalso how to manage and merge configuration data. The data in this fileis presented in 4 Python dictionaries and defines every aspect ofconfiguration loading.The 4 dictionaries are called *CONFIG*, *CLI_CONFIG*, *SUBCOMMANDS*and *DYNE*. Each dictionary serves a specific purpose. Between themyou can define how the cli arguments are presented, all configurationdefaults, documentation, etc.This project is built with `pop &lt;https://pop.readthedocs.io/&gt;`__, a Python-basedimplementation of *Plugin Oriented Programming (POP)*. POP seeks to bringtogether concepts and wisdom from the history of computing in new ways to solvemodern computing problems.For more information:* `Intro to Plugin Oriented Programming (POP) &lt;https://pop-book.readthedocs.io/en/latest/&gt;`__* `pop-awesome &lt;https://gitlab.com/saltstack/pop/pop-awesome&gt;`__* `pop-create &lt;https://gitlab.com/saltstack/pop/pop-create/&gt;`__The CONFIG Dictionary=====================The bulk of the configuration will be present in the *CONFIG* dictionary.all of your configuration options are defined here. Most entries in the*CONFIG* dictionary will be very simple and just expose the most basicvalues:.. code-block:: python    CONFIG = {        &quot;name&quot;: {            &quot;default&quot;: &quot;frank&quot;,            &quot;help&quot;: &quot;Enter the name to use&quot;,        },    }This simple example presents the documentation for the configuration valueand what the default value should be.Vertically app-merged projects can add config items to their parent dynes like so:.. code-block:: python    CONFIG = {        &quot;new_item&quot;: {            &quot;type&quot;: int,            &quot;default&quot;: 1,            &quot;dyne&quot;: &quot;idem&quot;,        },    }Many more options can be used, but they will be covered in the referencedocument.The CLI_CONFIG Dictionary=========================Adding a configuration value does not make it appear on the command line.Each application can be extended to include command line options.Lets extend our earlier example to expose the &quot;name&quot; option as a commandline argument:.. code-block:: python    CLI_CONFIG = {        &quot;name&quot;: {},    }    CONFIG = {        &quot;name&quot;: {            &quot;default&quot;: &quot;frank&quot;,            &quot;help&quot;: &quot;Enter the name to use&quot;,        },    }That's it! The &quot;name&quot; option is now available on the command line and canbe used as ``--name bob``.But what if we want it to be a positional argument? Simple! Just add thepositional option to the *CLI_CONFIG*:.. code-block:: python    CLI_CONFIG = {        &quot;name&quot;: {            &quot;positional&quot;: True,        },    }    CONFIG = {        &quot;name&quot;: {            &quot;default&quot;: &quot;frank&quot;,            &quot;help&quot;: &quot;Enter the name to use&quot;,        },    }You can inherit cli args from another project.  Say, for example that you want to implement the ``--output`` flagexactly the same way ``rend`` does, you can source it like this:.. code-block:: python    CLI_CONFIG = {        &quot;output&quot;: {            &quot;source&quot;: &quot;rend&quot;,        },    }Many more options exist that allow you to control every aspect of the user'scommand line experience.The SUBCOMMANDS Dictionary==========================Sometimes it is desirable to have subcommands. Subcommands allow your CLIto work in a way similar to the git cli, where you have multiple routinesthat all can be called from a single command.Lets add a few more things to our example so that we can have subcommands... code-block:: python    CLI_CONFIG = {        &quot;name&quot;: {            &quot;subcommands&quot;: [&quot;test&quot;, &quot;apply&quot;],        },        &quot;weight&quot;: {},        &quot;power&quot;: {            &quot;subcommands&quot;: [&quot;apply&quot;],        },    }    CONFIG = {        &quot;name&quot;: {            &quot;default&quot;: &quot;frank&quot;,            &quot;help&quot;: &quot;Enter the name to use&quot;,        },        &quot;weight&quot;: {            &quot;default&quot;: &quot;150&quot;,            &quot;help&quot;: &quot;Enter how heavy it should be&quot;,        },        &quot;power&quot;: {            &quot;default&quot;: &quot;100&quot;,            &quot;help&quot;: &quot;Enter how powerful it should be&quot;,        },    }    SUBCOMMANDS = {        &quot;test&quot;: {            &quot;help&quot;: &quot;Used to test&quot;,            &quot;desc&quot;: &quot;When running in test mode, things will be tested&quot;,        },        &quot;apply&quot;: {            &quot;help&quot;: &quot;Used to apply&quot;,            &quot;desc&quot;: &quot;When running in apply mode, things will be applied&quot;,        },    }In this example we see that the option ``name`` will be available underthe subcommands ``test`` and ``apply``. The option ``power`` will be availableonly under the subcommand ``apply`` and the option ``weight`` is globallyavailable.The DYNE Dictionary===================The *DYNE* dictionary allows you to control what dynamic names your app ispresenting to other ``pop`` projects. This name gets used not only insideof ``pop-config`` but also inside of ``pop`` to determine what plugin subsystemsthis application merges with. The *DYNE* system allows for your cli to beextended by third party code, enabling configuration options to be madeavailable to your application via external code.The *DYNE* system is very powerful. But since it is not critical to gettingstarted with ``pop-config`` it will be covered in more depth in another document.Log Module===================Within the log module of pop-config there are several config options.If &quot;log_plugin&quot; is set to &quot;rotating&quot;, the &quot;log_handler_options&quot; config item can be set to something other than the defaults.The two options are:1. maxBytes  default: 1024*1024*100   This option specifies the maximum size of each back up log file.  Once a log file approaches this value the &quot;rotating&quot; module will save the file and create a new log file.2. backupCount default: 5   This option tells the rotating module how many backup log files are allowed.  As that number increases the oldest files are deleted.Acknowledgements================* `Img Shields &lt;https://shields.io&gt;`__ for making repository badges easy.</longdescription>
</pkgmetadata>