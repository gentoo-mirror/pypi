<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>HKDF - HMAC Key Derivation Function===================================This module implements the HMAC Key Derivation function, defined at    http://tools.ietf.org/html/draft-krawczyk-hkdf-01There are two interfaces: a functional interface, with separate extractand expand functions as defined in the draft RFC, and a wrapper class forthese functions.Functional interface--------------------To use the functional interface, pass the pseudorandom key generatedby ``hmac_extract([salt], [input key material])`` to ``hmac_expand(...)``.``salt`` should be a random, non-secret, site-specific string, but may beset to None. See section 3.1 of the HKDF draft for more details.In addition to the PRK output by ``hmac_extract()``, ``hmac_expand()`` takes an``info`` argument, which permits generating multiple keys based on thesame PRK, and a ``length`` argument, which defines the number of bytesof output key material to generate. ``length`` must be less than or equalto 255 time the block size, in bytes, of the hash function being used.See section 3.2 of the HKDF draft for more information on using the ``info``argument.The hash function to use can be specified for both ``hmac_extract()`` and``hmac_expand()`` as the ``hash`` kw argument, and **defaults to SHA-512** as implementedby the hashlib module. It must be the same for both extracting and expanding.Example::    from binascii import unhexlify    prk = hkdf_extract(unhexlify(b&quot;8e94ef805b93e683ff18&quot;), b&quot;asecretpassword&quot;)    key = hkdf_expand(prk, b&quot;context1&quot;, 16)``Hkdf`` wrapper class----------------------To use the wrapper class, instantiate the ``Hkdf()`` class with a salt, inputkey material, and optionally, a hash function. Note that **the default hash functionfor the wrapper class is SHA-256**, which differs from the default for the functionalinterface. You may then call ``expand([info], [length])`` on the Hkdf instance to generate output key material::    kdf = Hkdf(unhexlify(b&quot;8e94ef805b93e683ff18&quot;), b&quot;asecretpassword&quot;, hash=hashlib.sha512)    key = kdf.expand(b&quot;context1&quot;, 16)Changelog---------- 0.0.3 – Move documentation from module docstring to README.rst- 0.0.2 – Python 3.3, 3.4 support- 0.0.1 – Initial releasePlease report any bugs at    https://www.github.com/casebeer/python-hkdf</longdescription>
</pkgmetadata>