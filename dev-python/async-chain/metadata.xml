<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `async-chain`A coroutine builder## What?Have you ever felt that the `await` syntax in Python was a bit clunky when chaining multiple methods together?```pythonasync def on_message(event):    message = await event.get_message()    author = await message.get_author()    await author.send_message(&quot;Hello world!&quot;)```Or even worse:```pythonasync def on_message(event):    (await (await (await event.get_message()).get_author()).send_message(&quot;Hello world!&quot;))````async-chain` is here to solve your problem!```pythonasync def on_message(event):    await event.get_message().get_author().send_message(&quot;Hello world!&quot;)```## How?First, install `async_chain` with your favorite package manager:```console$ pip install async_chain``````console$ pipenv install async_chain``````console$ poetry add async_chain```Then, add the `@async_chain.method` decorator to any async method you wish to make chainable, and the problem will be magically solved!```pythonimport async_chainclass MyEvent:    @async_chain.method    async def get_message(self):        ...```</longdescription>
</pkgmetadata>