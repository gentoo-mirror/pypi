<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**OMGeo - Python Edition**``python-omgeo`` is a geocoding abstraction layer written in python.  Currentlysupported geocoders:* `US Census Geocoder &lt;https://www.census.gov/geo/maps-data/data/geocoder.html&gt;`_* `Bing Maps REST Locations API &lt;http://msdn.microsoft.com/en-us/library/ff701715.aspx&gt;`_* `ESRI World Geocoding Service &lt;http://resources.arcgis.com/en/help/arcgis-online-geocoding-rest-api/&gt;`_* `MapQuest Licensed Data API &lt;http://developer.mapquest.com/web/products/dev-services/geocoding-ws&gt;`_* `MapQuest-hosted Nominatim Open Data API &lt;http://developer.mapquest.com/web/products/open/geocoding-service&gt;`_* `Pelias geocoder &lt;https://pelias.io/&gt;`_. Defaults to use `geocode.earth &lt;https://geocode.earth/&gt;`_* `Google geocoder &lt;https://developers.google.com/maps/documentation/geocoding/intro&gt;`_.. NOTE::   Check out `this project's page on GitHub &lt;https://github.com/azavea/python-omgeo/&gt;`_.**Installation**::    sudo pip install python-omgeo**Documentation**Docs are available in `HTML &lt;http://python-omgeo.readthedocs.org/en/latest/&gt;`_or `PDF &lt;http://media.readthedocs.org/pdf/python-omgeo/latest/python-omgeo.pdf&gt;`_ format.**Usage Example**Make a new geocoder and geocode and address::    &gt;&gt;&gt; from omgeo import Geocoder    &gt;&gt;&gt; g = Geocoder()    &gt;&gt;&gt; result = g.geocode('340 12th St, Philadelphia PA')Take a look at the result::    &gt;&gt;&gt; result    {'candidates': [      &lt;340 S 12th St, Philadelphia, PA, 19107 (-75.161461, 39.94532) EsriWGS&gt;,      &lt;340 N 12th St, Philadelphia, PA, 19107 (-75.158434, 39.958728) EsriWGS&gt;     ],     'upstream_response_info': [&lt;EsriWGS 1054ms&gt;]}Take a closer look at the information in our address Candidate objects::    &gt;&gt;&gt; [c.__dict__ for c in result[&quot;candidates&quot;]][{'geoservice': 'EsriWGS',  'locator': u'USA.AddressPoint',  'locator_type': u'PointAddress',  'match_addr': u'340 S 12th St, Philadelphia, PA, 19107',  'score': 90.87,  'wkid': 4326,  'x': -75.161461,  'y': 39.94532}, {'geoservice': 'EsriWGS',  'locator': 'interpolation',  'locator_type': u'StreetAddress',  'match_addr': u'340 N 12th St, Philadelphia, PA, 19107',  'score': 90.87,  'wkid': 4326,  'x': -75.158434,  'y': 39.958728}]Some geocoders (EsriWGS and US Census) can return address components in addition to thefull address::    &gt;&gt;&gt; [{'geoservice': 'EsriWGS',        'locator': 'interpolation',        'locator_type': u'StreetAddress',        'match_addr': u'340 N 12th St, Phila, Pennsylvania, 19107',        'match_city': u'Phila',        'match_country': u'USA',        'match_postal': u'19107',        'match_region': u'Pennsylvania',        'match_streetaddr': u'340 N 12th St',        'match_subregion': u'',        'score': 90.1,        'wkid': 4326,        'x': -75.158384,        'y': 39.958774}]These are optional; their existence may change depending on the response from the geocoder.**Testing**There is a shell script in the root of the repository called *test.dummy.sh*.Copy it using ``cp test.dummy.sh test.sh``. Edit *test.sh* to include theAPI keys that you obtained from the given geocoding service providers. Then, runthe tests using ``./test.sh``.</longdescription>
</pkgmetadata>