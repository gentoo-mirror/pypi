<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Google Application Utilities for Python=======================================This project is a small collection of utilities for building Pythonapplications.  It includes some of the same set of utilities used to build andrun internal Python apps at Google.Features:  * Simple application startup integrated with python-gflags.  * Subcommands for command-line applications.  * Option to drop into pdb on uncaught exceptions.  * Helper functions for dealing with files.  * High-level profiling tools.  * Timezone-aware wrappers for datetime.datetime classes.  * Improved TestCase with the same methods as unittest2, plus helpful flags for    test startup.  * google_test setuptools command for running tests.  * Helper module for creating application stubs.Installation============To install the package, simply run:  python setup.py installGoogle-Style Tests==================Google-style tests (those run with basetest.main()) differ from setuptools-styletests in that test modules are designed to be run as __main__. Setting up yourproject to use Google-style tests is easy:1. Create one or more test modules named '*_test.py' in a directory. Each testmodule should have a main block that runs basetest.main():  # In tests/my_test.py  from google.apputils import basetest  class MyTest(basetest.TestCase):    def testSomething(self):      self.assertTrue('my test')  if __name__ == '__main__':    basetest.main()2. Add a setup requirement on google-apputils and set the test_dir option:  # In setup.py  setup(      ...      setup_requires = ['google-apputils&gt;=0.2'],      test_dir = 'tests',      )3. Run your tests:  python setup.py google_testGoogle-Style Stub Scripts=========================Google-style binaries (run with app.run()) are intended to be executed directlyat the top level, so you should not use a setuptools console_script entry pointto point at your main(). You can use distutils-style scripts if you want.Another alternative is to use google.apputils.run_script_module, which is ahandy wrapper to execute a module directly as if it were a script:1. Create a module like 'stubs.py' in your project:  # In my/stubs.py  from google.apputils import run_script_module  def RunMyScript():    import my.script    run_script_module.RunScriptModule(my.script)  def RunMyOtherScript():    import my.other_script    run_script_module.RunScriptModule(my.other_script)2. Set up entry points in setup.py that point to the functions in your stubsmodule:  # In setup.py  setup(      ...      entry_points = {          'console_scripts': [              'my_script = my.stubs:RunMyScript',              'my_other_script = my.stubs.RunMyOtherScript',              ],          },      )There are also useful flags you can pass to your scripts to help you debug yourbinaries; run your binary with --helpstub to see the full list.</longdescription>
</pkgmetadata>