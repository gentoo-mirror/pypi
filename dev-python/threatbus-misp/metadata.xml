<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Threat Bus MISP Plugin======================&lt;h4 align=&quot;center&quot;&gt;[![PyPI Status][pypi-badge]][pypi-url][![Build Status][ci-badge]][ci-url][![License][license-badge]][license-url]&lt;/h4&gt;A Threat Bus plugin that enables communication with [MISP](https://www.misp-project.org/).The plugin goes against the pub/sub architecture of Threat Bus (for now),because it actively binds to a single MISP instance to receive attribute(IoC) updates, and report back sightings via the REST API. Following the strictpub/sub architecture of Threat Bus, it *should be the other wayaround*, with MISP binding to Threat Bus. This will eventually be resolved by aMISP module.For now, the plugin supports two ways to retrieve attribute (IoC) updates fromMISP - either via ZeroMQ or via Kafka. Basically, the plugin makes itself asubscriber to MISP events.## InstallationUsers can specify *optional dependencies* during installation. The plugin useseither ZeroMQ or Kafka to get IoC updates from MISP. As we don't want to burdenthe user to install unused dependencies, both options are available as follows:```shpip install threatbus-misp[zmq]pip install threatbus-misp[kafka]```If neither of these dependencies is installed (i.e., you installed`threatbus-misp` without the `[...]` suffix for optional deps), the plugin throwsan error and exits immediately.**Depending on your setup, you might want to use quotes to avoid shell expansionwhen using `[...]`**. For example, you can do `pip install &quot;.[zmq]&quot;` for localdevelopment.### Kafka PrerequisitesWhen you decide to use Kafka to receive IoC updates from MISP, you first need toinstall Kafka on the Threat Bus host. This plugin uses the[confluent-kafka](https://docs.confluent.io/platform/current/clients/confluent-kafka-python/index.html)Python package which requires `librdkafka`. See also the[prerequisites](https://github.com/confluentinc/confluent-kafka-python#prerequisites)section of the `confluent-kafka` Python client for details about setting it upfor your distribution.Once installed, go ahead and install the Kafka version of this plugin:```pip install threatbus-misp[kafka]```## ConfigurationThe plugin uses the MISP REST API to report back sightings of IoCs. You need tospecify a MISP API key for it to work.ZeroMQ and Kafka are mutually exclusive, such that Threat Bus does not receiveall attribute updates twice. See below for an example configuration.```yaml...plugins:  misp:    api:      host: https://localhost      ssl: false      key: MISP_API_KEY    filter: # filter are optional. you can omit the entire section.      - orgs: # creator org IDs must be strings: https://github.com/MISP/PyMISP/blob/main/pymisp/data/schema.json          - &quot;1&quot;          - &quot;25&quot;        tags:          - &quot;TLP:AMBER&quot;          - &quot;TLP:RED&quot;        types: # MISP attribute types https://github.com/MISP/misp-objects/blob/main/schema_objects.json          - ip-src          - ip-dst          - hostname          - domain          - url      - orgs:        - &quot;2&quot;    zmq:      host: localhost      port: 50000    #kafka:    #  topics:    #  - misp_attribute    #  poll_interval: 1.0    #  # All config entries are passed as-is to librdkafka    #  # https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md    #  config:    #    bootstrap.servers: &quot;localhost:9092&quot;    #    group.id: &quot;threatbus&quot;    #    auto.offset.reset: &quot;earliest&quot;...```### IoC FilterThe plugin can be configured with a list of filters. Every filter describes awhitelist for MISP attributes (IoCs). The MISP plugin will only forward IoCs toThreat Bus if the whitelisted properties are present.A filter consists of three sub-whitelists for creator organizations, types, andtags. To pass through the filter, an attribute must provide at least one of thewhitelisted properties of each of the whitelists. More precisely, entries ofeach whitelist are linked by an `&quot;or&quot;`-function, the whitelists themselves arelinked by an `&quot;and&quot;`-function, as follows:`(org_1 OR org_2) AND (type_1 OR type_2) AND (tag_1 OR tag_2)`.The MISP plugin always assumes that the *absence of a whitelist means thateverything is whitelisted*. For example, when the entire `filter` section isomitted from the config, then all attributes are forwarded and nothing isfiltered. More examples follow below.#### OrganizationsOrganizations are whitelisted by their ID, which is a[string](https://github.com/MISP/PyMISP/blob/main/pymisp/data/schema.json). Onlythose MISP attributes that come from any of the whitelisted organizations willbe forwarded to Threat Bus.#### TypesTypes can be whitelisted by specifying MISP[attribute types](https://github.com/MISP/misp-objects/blob/main/schema_objects.json).Only those attributes that are instances of a whitelisted type will be forwardedto Threat Bus.#### TagsMISP Attributes can be tagged with arbitrary strings. The tag whitelist respectstag *names*. Only those attributes that have at least one of the whitelistedtags will be forwarded to Threat Bus.#### Examples:This section provides some simple configuration examples to illustrate howwhitelist filtering works.1. Forward all IoCs from the organizations `&quot;1&quot;` and `&quot;25&quot;`  ```yaml  - orgs:    - &quot;1&quot;    - &quot;25&quot;  ```2. Forward only IoCs of the `domain`, `url`, or `uri` type, but only if they  come from the organization `&quot;1&quot;` or `&quot;25&quot;`.  ```yaml  - orgs:    - &quot;1&quot;    - &quot;25&quot;  - types:    - domain    - url    - uri  ```2. Forward only IoCs that are tagged with `TLP:RED` or `TLP:AMBER`, but only of  type `&quot;src-ip&quot;`:  ```yaml  - tags:    - &quot;TLP:RED&quot;    - &quot;TLP:AMBER&quot;  - types:    - src-ip  ```## Development SetupThe following guides describe how to set up a local, dockerized instance ofKafka and how to setup a VirtualBox running MISP for developing.### Dockerized KafkaFor a simple, working Kafka Docker setup use the[single node example](https://github.com/confluentinc/cp-docker-images/blob/5.3.1-post/examples/kafka-single-node/docker-compose.yml)from `confluentinc/cp-docker-images`.Store the `docker-compose.yaml` and modify the Kafka environment variables suchthat the Docker host (e.g., `172.17.0.1` on Linux) of your Docker machine isadvertised as Kafka listener:```yamlzookeeper:  ...kafka:  ...  environment:    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://172.17.0.1:9092   # &lt;-- That is the IP of your Docker host    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT  ...```Check out [this article](https://rmoff.net/2018/08/02/kafka-listeners-explained/)for details about Kafka listeners.Then start the compose setup via `docker-compose up -d`.To test the setup, use the `tests/utils/kafka_receiver.py` and`tests/utils/kafka_sender.py` scripts.### Local MISP using VirtualBoxThis guide walks you through setting up MISP using a pre-configured VirtualBoxVM and then configuring MISP to export Attribute (IoC) updates to Threat Bus.#### Installation via VirtualBoxUse the officially maintained[Virtual Images](https://www.circl.lu/misp-images/_archive/) for MISP.Download the latest `.ova` image file and load it in a VirtualBox client. Ensurethe following:- The VM has enough working memory (e.g., 3 GiB of RAM)- The VM exposes ports 8443 (web interface) and 50000 (ZMQ)  - Use VirtualBox port-forwarding when NATting  - Use VirtualBox bridge-mode &amp; SSH into the VM using SSH port-forwardingHere are the above steps as pure CLI instructions for running MISP in headlessmode (i.e., without a graphical VirtualBox interface).```curl -fL -o misp-2.4.138.ova https://www.circl.lu/misp-images/latest/MISP_v2.4.138@28ccbc9.ovavboxmanage import misp-2.4.138.ova --vsys 0 --vmname misp --memory 3072 --cpus 1 --eula acceptvboxmanage modifyvm misp --nic1 natvboxmanage modifyvm misp --natpf1 &quot;zmq,tcp,,50000,,50000&quot;vboxmanage list -l misp```You can then start and stop VM using the following commands:```vboxmanage startvm misp --type headlessvboxmanage controlvm misp poweroff```#### Configuration for usage with Threat BusFor Threat Bus to receive attribute (IoC) updates from MISP, you must eitherenable Kafka or ZMQ export in the MISP VM. If you chose to go with Kafka, youneed to install `librdkafka` first inside the VM, then make it known to PHP.*Install Kafka inside the VM*```shssh misp@&lt;MISP_VM_IP&gt; # enter your configured password to pop an interactive shell inside the VMsudo apt-get updatesudo apt-get install software-properties-commonsudo apt-get install librdkafka-dev# see https://misp.github.io/MISP/INSTALL.ubuntu1804/#misp-has-a-feature-for-publishing-events-to-kafka-to-enable-it-simply-run-the-following-commandssudo pecl channel-update pecl.php.netsudo pecl install rdkafkaecho &quot;extension=rdkafka.so&quot; | sudo tee /etc/php/7.2/mods-available/rdkafka.inisudo phpenmod rdkafkasudo service apache2 restartexit```Once Kafka is installed, you can go ahead and enable it in the MISP web-view.*Enable Kafka export in the MISP web-view*- Visit https://localhost:8443- login with your configured credentials- Go to `Administration` -&gt; `Server Settings &amp; Maintenance` -&gt; `Plugin settings Tab`- Set the following entries   - `Plugin.Kafka_enable` -&gt; `true`  - `Plugin.Kafka_brokers` -&gt; `172.17.0.1:9092`    &lt;- In this example, 172.17.0.1 is the Docker host as configured in the Dockerized Kafka setup above, reachable from other Docker networks. The port is reachable when the Kafka Docker setup binds to it globally.  - `Plugin.Kafka_attribute_notifications_enable` -&gt; `true`  - `Plugin.Kafka_attribute_notifications_topic` -&gt; `misp_attribute` &lt;- The topic goes into the threatbus `config.yaml`You can use ZeroMQ to export IoCs from MISP as light weight alternative torunning Kafka. It does not require any extra installations, except enabling thefeature in the MISP web-view.*Enable the ZMQ plugin in the MISP web-view*- Visit https://localhost:8443- login with your configured credentials- Go to `Administration` -&gt; `Server Settings &amp; Maintenance` -&gt; `Diagnostics Tab`- Find the ZeroMQ plugin section and enable it- Go to `Administration` -&gt; `Server Settings &amp; Maintenance` -&gt; `Plugin settings Tab`- Set the entry `Plugin.ZeroMQ_attribute_notifications_enable` to `true`## LicenseThreat Bus comes with a [3-clause BSD license][license-url].[pypi-badge]: https://img.shields.io/pypi/v/threatbus-misp.svg[pypi-url]: https://pypi.org/project/threatbus-misp[ci-url]: https://github.com/tenzir/threatbus/actions?query=branch%3Amaster[ci-badge]: https://github.com/tenzir/threatbus/workflows/Python%20Egg/badge.svg?branch=master[license-badge]: https://img.shields.io/badge/license-BSD-blue.svg[license-url]: https://github.com/tenzir/threatbus/blob/master/COPYING</longdescription>
</pkgmetadata>