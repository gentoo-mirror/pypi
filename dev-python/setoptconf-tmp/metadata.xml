<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========IMPORTANT!==========This is a fork of `setoptconf &lt;https://github.com/jayclassless/setoptconf&gt;`_ .It is a temporary solution to fix `prospector &lt;https://github.com/PyCQA/prospector&gt;`_being unable to install due to setoptconf not working with setuptools &gt;= 58 - see `the issue here &lt;https://github.com/PyCQA/prospector/issues/438&gt;`_.This package is only meant as a temporary solution to fix CI builds using prosectoruntil setoptconf can be removed from there. Therefore do not expect this fork to be maintained and it will be purged once prospector is updated.==============setoptconf-tmp==============``setoptconf`` is a Python library that can be used to retrieve program settingsfrom a variety of common sources:* Command Line* Environment Variables* INI Files* JSON Files* YAML Files* Python Objects/ModulesThe goal of this project is to define your desired settings in a simple andconsistent way, and then point setoptconf at as many of the sources as you'dlike to use, and let it comb them all, looking for your settings.This README is admittedly very light on details. Full documentation will comein time. For now, here's an example of its use:Import the library::    import setoptconf as socInstantiate the manager::    manager = soc.ConfigurationManager('myprogram')Define the settings we'd like to collect::    manager.add(soc.StringSetting('foo'))    manager.add(soc.IntegerSetting('bar', required=True))    manager.add(soc.BooleanSetting('baz', default=True))Retreive the settings from our desired sources, combining the settings andoverriding with the priority implied by the order of the sources we pass::    config = manager.retrieve(        # This source pulls from the command line using argparse.        soc.CommandLineSource,        # This source pulls from environment variables that are prefixed        # with MYPROGRAM_*        soc.EnvironmentVariableSource,        # This source pulls from the named INI files. It stops at the first        # file it finds.        soc.ConfigFileSource(('.myprogramrc', '/etc/myprogram.conf')),    )We now have a Configuration object named ``config`` that has three attributes;``foo``, ``bar``, and ``baz``.</longdescription>
</pkgmetadata>