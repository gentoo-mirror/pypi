<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PYONEPASSWORD## DescriptionA Python API to sign into and query a 1Password account using the `op` command.## Requirements- Python &gt;= 3.8- 1Password command-line tool &gt;= 2.0.0  - see [1Password Developer Documentation](https://developer.1password.com/docs/cli)- Internet connectivity to 1Password.com  - The `op` command queries your online account, not your local vault&gt; Note: This version of `pyonepassword` does not support deprecated `op` 1.x versions. Support for those versions is still available, albeit with minimal maintanence. See [pyonepassword-legacy](https://github.com/zcutlip/pyonepassword-legacy) for more information.## Installation```shellpython3 -m pip install pyonepassword```## Overview`pyonepassword` essentially has two parts:1. Convenience Python classes for the various objects that the `op` command returns2. A full-fledged API for querying a 1Password accountIf you already have a workflow to drive the `op` command, handle authentication, and so forth, but would benefit from an API that can ingest `op`'s JSON and give you Python objects, you're in luck, number one might be just what you need.On the other hand, if you're using `op` manually (maybe along side `jq`), or in shell scripts (or maybe not at all), and you'd like a full-service Python API rather than console commands, number two does that.We'll get into some examples below for both of these.## Example Usage### Object API`pyonepassword` provides Python classes for many of the objects `op` returns, including:- Several &quot;item&quot; types (login, password, secure note, etc)- User- User List (e.g., from 'op user list')- Group- Group List- Vault- Vault List- Account- Account ListAll of these classes provide assorted convenience properties. For example `obj.created_at` returns a proper Python `datetime` object.All of the object types are fundamentally dictionaries, so their data can be accessed as such, and they can be serialized back to JSON.Also, all classes can be instantiated from either directly from a JSON string, or from an unserialized object.Take the following Login item as an example:```JSON{  &quot;id&quot;: &quot;4smjvvepfbg3hencrmo7cozphe&quot;,  &quot;title&quot;: &quot;Example Login&quot;,  &quot;version&quot;: 2,  &quot;vault&quot;: {    &quot;id&quot;: &quot;yhdg6ovhkjcfhn3u25cp2bnl6e&quot;  },  &quot;category&quot;: &quot;LOGIN&quot;,  &quot;last_edited_by&quot;: &quot;RAXCWKNRRNGL7I3KSZOH5ERLHI&quot;,  &quot;created_at&quot;: &quot;2021-06-29T18:42:03Z&quot;,  &quot;updated_at&quot;: &quot;2022-03-17T03:40:49Z&quot;,  &quot;sections&quot;: [    {      &quot;id&quot;: &quot;linked items&quot;,      &quot;label&quot;: &quot;Related Items&quot;    }  ],  &quot;fields&quot;: [    {      &quot;id&quot;: &quot;password&quot;,      &quot;type&quot;: &quot;CONCEALED&quot;,      &quot;purpose&quot;: &quot;PASSWORD&quot;,      &quot;label&quot;: &quot;password&quot;,      &quot;value&quot;: &quot;doth-parrot-hid-tussock-veldt&quot;,      &quot;password_details&quot;: {        &quot;strength&quot;: &quot;FANTASTIC&quot;      }    },    {      &quot;id&quot;: &quot;username&quot;,      &quot;type&quot;: &quot;STRING&quot;,      &quot;purpose&quot;: &quot;USERNAME&quot;,      &quot;label&quot;: &quot;username&quot;,      &quot;value&quot;: &quot;zcutlip&quot;    },    {      &quot;id&quot;: &quot;notesPlain&quot;,      &quot;type&quot;: &quot;STRING&quot;,      &quot;purpose&quot;: &quot;NOTES&quot;,      &quot;label&quot;: &quot;notesPlain&quot;    }  ],  &quot;urls&quot;: [    {      &quot;href&quot;: &quot;http://example2.website&quot;    },    {      &quot;primary&quot;: true,      &quot;href&quot;: &quot;https://example.website&quot;    }  ]}```In just a line of Python, you can create an `OPLoginItem` object:```Pythonfrom pyonepassword.api.object_types import OPLoginItemlogin_item = OPLoginItem(login_item_json)print(login_item.username)print(login_item.password)print(login_item.primary_url.href)# login_item is also a dictionary:print(login_item[&quot;username&quot;] == login_item.username)```### Example usage of the `OP` classIf you want to fully automate connecting to and querying a 1Password account, that's what the `OP` class is for. It handles authentication (except for initial sign-in). And provides methods that are congruent to many of the `op` CLI tool's subcommands, such as:- `item_get()`- `item_list()`- `user_get()`- `user_list()`...... and so forth.All of these methods return objects types as described above. Also, `item_get()` returns the appropriate object type for the item, such as `OPLoginItem` or `OPSecureNoteItem`, as long as `pyonepassword` has a class for the returned item type.&gt; *Note*: In some cases the `op` command may return items that don't conform to the expected structure. When this happens, the item dictionary will fail to validate, an exception will be raised. There is API for relaxing item validation, globally, on a per-class basis, or a per-item basis. See [ITEM_VALIDATION.md](ITEM_VALIDATION.md) for more information.### Sign-in and item retrievalBelow is an example demonstrating:- Sign-in- Specifying a default vault for queries- Retrieving an item from 1Password by name or by UUID- Overriding the default vault to retrieve a subsequent item from 1Password```Pythonimport getpassfrom pyonepassword import OPfrom pyonepassword.api.exceptions import (    OPSigninException,    OPItemGetException,    OPNotFoundException,    OPConfigNotFoundException)# See examples/example-sign-in.py for more sign-in examplesdef do_signin():    # Let's check If biometric is enabled    # If so, no need to provide a password    if OP.uses_biometric():        try:            # no need to provide any authentication parameters if biometric is enabled            op = OP()        except OPNotSignedInException:            print(&quot;Uh oh! Sign-in failed&quot;)            exit(-1)    else:        # prompt user for a password (or get it some other way)        my_password = getpass.getpass(prompt=&quot;1Password master password:\n&quot;)        # You may optionally provide an account shorthand if you used a custom one during initial sign-in        # shorthand = &quot;arbitrary_account_shorthand&quot;        # return OP(account_shorthand=shorthand, password=my_password)        # Or we'll try to look up account shorthand from your latest sign-in in op's config file        op = OP(password=my_password)    return opdef main():  op = do_signin()    item_password = op.item_get_password(&quot;Example Login&quot;)    # We can also look up the item by its UUID    # as well as retrieve from an alternate vault    item_password = op.item_get_password(      &quot;ykhsbhhv2vf6hn2u4qwblfrmg4&quot;, vault=&quot;Private&quot;)```### Document retrievalBelow is an example demonstrating:- Retrieving a document and its file name from 1Password, based on item name- Retrieving a document &amp; file name from 1Password, based on UUID```Pythonop = do_signin()# File name and document title in 1Password are often different.# so we get back the file name, and the bytes object representing the documentfile_name, document_bytes = op.document_get(&quot;Example Login - 1Password Logo&quot;)# we can also look up the document by UUIDfile_name, document_bytes = op.document_get(    &quot;bmxpvuthureo7e52uqmvqcr4dy&quot;)open(file_name, &quot;wb&quot;).write(document_bytes)```### Signing out of 1PasswordBelow is an example demonstrating:- Signing in, then signing out of 1Password- Signing out and also forgetting a 1Password account&gt; Note: Currently `pyonepassword`'s sign-out &amp; forget support requires a signed-in session. It is not yet possible to forget an arbitrary account.```Pythondef main():  op = do_signin()    # do signout    op.signout()    try:    print(op.item_get_password(&quot;Example Login&quot;))     except OPItemGetException:      # lookup fails since we signed out        pass    # now let's sign in again, then signout with forget=True    op = do_signin()    op.signout(forget=True)    try:        do_signin()    except OPSigninException:# Sign-in fails since we erased the initial sign-in with forget=Truepass```### Getting Details for a User```Pythonop = OP(password=my_password)# User's name:user: OPUser = op.user_get(&quot;Firstname Lastname&quot;)# or the user's UUIDuser: OPUser = op.user_get(user_uuid)```### Getting Details for a Group```Pythonop = OP(password=my_password)# Group name:group: OPGroup = op.group_get(&quot;Team Members&quot;)# or the group's UUIDgroup: OPGroup = op.group_get(&quot;yhdg6ovhkjcfhn3u25cp2bnl6e&quot;)```### Getting Details for a Vault```Pythonop = OP(password=my_password)# Group name:vault: OPVault = op.vault_get(&quot;Test Data&quot;)# or the group's UUIDvault: OPVault = op.vault_get(&quot;yhdg6ovhkjcfhn3u25cp2bnl6e&quot;)```### Extending Item TypesIf any of the item types (login, password, etc.) are missing or don't provide sufficient properties or methods, it's very easy to add new ones or extend existing ones.Here's an example extending `OPLoginItem`.```pythonfrom pyonepassword import OPfrom pyonepassword.api.decorators import op_register_item_typefrom pyonepassword.api.object_types import OPLoginItem@op_register_item_typeclass OPEnhancedLoginItem(OPLoginItem):    @property    def custom_property(self):      return self[&quot;custom_field&quot;]op = OP()enhanced_login = op.item_get(&quot;Example Login&quot;, vault=&quot;Test Data&quot;)print(enhanced_login.custom_property)```### Item Deletion```Pythonfrom pyonepassword import OP  # noqa: E402from pyonepassword.api.exceptions import OPItemDeleteException  # noqa: E402def main():    op: OP()    try:        # op.item_delete() can take any identifier accepted by the 'op' command:        # Usage:  op item delete [{ &lt;itemName&gt; | &lt;itemID&gt; | &lt;shareLink&gt; | - }] [flags]        deleted_uuid = op.item_delete(&quot;Example Login&quot;)  # noqa: F841        # if desired inspect resulting UUID to ensure it's what was        # Expected    except OPItemDeleteException as ope:        # 'op' command can fail for a few reaons, including        # - item not found        # - duplicate item names        # Inspect the error message from the command        print(ope.err_output)```### Item CreationFor details on creating new items in a 1Password vault, see [ITEM_CREATION.md](ITEM_CREATION.md)### More ExamplesLots more examples are available in the `examples` directory</longdescription>
</pkgmetadata>