<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/pypi/v/dwave-gate.svg    :target: https://pypi.org/project/dwave-gate.. image:: https://img.shields.io/pypi/pyversions/dwave-gate.svg    :target: https://pypi.org/project/dwave-gate.. image:: https://circleci.com/gh/dwavesystems/dwave-gate.svg?style=svg    :target: https://circleci.com/gh/dwavesystems/dwave-gate.. image:: https://codecov.io/gh/dwavesystems/dwave-gate/branch/master/graph/badge.svg    :target: https://codecov.io/gh/dwavesystems/dwave-gatedwave-gate==========.. index-start-marker``dwave-gate`` is a software package for constructing, modifying and running quantum circuits on theincluded simulator. It provides a set of tools that enables you to:* Construct quantum circuits using an intuitive context-manager interface.* Utilize a comprehensive library of quantum gates with simple access to matrix representations,  various decompositions, and more.* Simulate circuits on a performant (C++) state-vector simulator.* Easily create your own quantum gates and templates. Any circuit can be either directly applied in  another circuit or converted into a quantum operation... index-end-markerExample usage-------------.. example-start-markerThis example uses the ``dwave.gate.Circuit`` object's  context manager to append operations toa two-qubit circuit... code-block:: python    import dwave.gate.operations as ops    from dwave.gate import Circuit    circuit = Circuit(2)    with circuit.context as (q, c):        ops.X(q[0])        ops.Hadamard(q[1])        ops.CZ(q[0], q[1])        ops.Hadamard(q[1])You can run the ``dwave.gate.simulator`` simulator on such circuits,&gt;&gt;&gt; from dwave.gate.simulator import simulate&gt;&gt;&gt; simulate(circuit)and then access the resulting state via the state attribute.&gt;&gt;&gt; circuit.statearray([0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j]).. example-end-markerInstallation------------.. installation-start-markerThe simplest way to install ``dwave-gate`` is from `PyPI &lt;https://pypi.org/project/dwave-gate&gt;`_:.. code-block:: bash    pip install dwave-gateIt can also be installed from source by cloning this GitHub repository and running:.. code-block:: bash    make installThe makefile will also simplify running tests (``make test``), coverage (``make coverage``),documentation (``make docs``), as well as formatting (``make format``) the code using the `Black&lt;https://black.readthedocs.io/&gt;`_ formatter (set to a line-length of 100) and `isort&lt;https://pycqa.github.io/isort/&gt;`_. It's available on both Unix as well as Windows systems, via the`make.bat` batch file.Alternatively, the package can be built and installed in development mode using Python and pip. Thesimulator operations would need to be generated first by executing `operation_generation.py`, foundin `dwave/gate/simulator`... code-block:: bash    python setup.py build_ext --inplace    pip install -e .Tests and coverage can be run using Pytest... code-block:: bash    python -m pytest tests/ --cov=dwave.gate.. installation-end-markerLicense-------Released under the Apache License 2.0. See LICENSE file.Contributing------------Ocean's `contributing guide &lt;https://docs.ocean.dwavesys.com/en/stable/contributing.html&gt;`_has guidelines for contributing to Ocean packages.Release Notes~~~~~~~~~~~~~``dwave-gate`` uses `reno &lt;https://docs.openstack.org/reno/&gt;`_ to manage its release notes.When making a contribution to ``dwave-gate`` that will affect users, create a new release note fileby running.. code-block:: bash    reno new your-short-descriptor-hereYou can then edit the file created under ``releasenotes/notes/``. Remove any sections not relevantto your changes. Commit the file along with your changes.See reno's `user guide &lt;https://docs.openstack.org/reno/latest/user/usage.html&gt;`_ for details.</longdescription>
</pkgmetadata>