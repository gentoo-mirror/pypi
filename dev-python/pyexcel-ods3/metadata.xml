<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================================================================================pyexcel-ods3 - Let you focus on data, instead of ods format================================================================================.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel.github.io/master/images/patreon.png   :target: https://www.patreon.com/chfw.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel-mobans/master/images/awesome-badge.svg   :target: https://awesome-python.com/#specific-formats-processing.. image:: https://github.com/pyexcel/pyexcel-ods3/workflows/run_tests/badge.svg   :target: http://github.com/pyexcel/pyexcel-ods3/actions.. image:: https://codecov.io/gh/pyexcel/pyexcel-ods3/branch/master/graph/badge.svg   :target: https://codecov.io/gh/pyexcel/pyexcel-ods3.. image:: https://badge.fury.io/py/pyexcel-ods3.svg   :target: https://pypi.org/project/pyexcel-ods3.. image:: https://anaconda.org/conda-forge/pyexcel-ods3/badges/version.svg   :target: https://anaconda.org/conda-forge/pyexcel-ods3.. image:: https://pepy.tech/badge/pyexcel-ods3/month   :target: https://pepy.tech/project/pyexcel-ods3.. image:: https://anaconda.org/conda-forge/pyexcel-ods3/badges/downloads.svg   :target: https://anaconda.org/conda-forge/pyexcel-ods3.. image:: https://img.shields.io/gitter/room/gitterHQ/gitter.svg   :target: https://gitter.im/pyexcel/Lobby.. image:: https://img.shields.io/static/v1?label=continuous%20templating&amp;message=%E6%A8%A1%E7%89%88%E6%9B%B4%E6%96%B0&amp;color=blue&amp;style=flat-square    :target: https://moban.readthedocs.io/en/latest/#at-scale-continous-templating-for-open-source-projects.. image:: https://img.shields.io/static/v1?label=coding%20style&amp;message=black&amp;color=black&amp;style=flat-square    :target: https://github.com/psf/black**pyexcel-ods3** is a tiny wrapper library to read, manipulate and write data in odsformat. You are likely to use `pyexcel &lt;https://github.com/pyexcel/pyexcel&gt;`__ togetherwith this library. `pyexcel-ods &lt;https://github.com/pyexcel/pyexcel-ods&gt;`__ is a sisterlibrary that depends on GPL licensed odfpy.`pyexcel-odsr &lt;https://github.com/pyexcel/pyexcel-odsr&gt;`_ is the other sister librarythat has no external dependency but do ods reading onlySupport the project================================================================================If your company has embedded pyexcel and its components into a revenue generatingproduct, please support me on github, `patreon &lt;https://www.patreon.com/bePatron?u=5537627&gt;`_or `bounty source &lt;https://salt.bountysource.com/teams/chfw-pyexcel&gt;`_ to maintainthe project and develop it further.If you are an individual, you are welcome to support me too and for however longyou feel like. As my backer, you will receive`early access to pyexcel related contents &lt;https://www.patreon.com/pyexcel/posts&gt;`_.And your issues will get prioritized if you would like to become my patreon as `pyexcel pro user`.With your financial support, I will be able to investa little bit more time in coding, documentation and writing interesting posts.Known constraints==================Fonts, colors and charts are not supported.Nor to read password protected xls, xlsx and ods files.Installation================================================================================You can install pyexcel-ods3 via pip:.. code-block:: bash    $ pip install pyexcel-ods3or clone it and install it:.. code-block:: bash    $ git clone https://github.com/pyexcel/pyexcel-ods3.git    $ cd pyexcel-ods3    $ python setup.py installUsage================================================================================As a standalone library--------------------------------------------------------------------------------Write to an ods file********************************************************************************Here's the sample code to write a dictionary to an ods file:.. code-block:: python    &gt;&gt;&gt; from pyexcel_ods3 import save_data    &gt;&gt;&gt; data = OrderedDict() # from collections import OrderedDict    &gt;&gt;&gt; data.update({&quot;Sheet 1&quot;: [[1, 2, 3], [4, 5, 6]]})    &gt;&gt;&gt; data.update({&quot;Sheet 2&quot;: [[&quot;row 1&quot;, &quot;row 2&quot;, &quot;row 3&quot;]]})    &gt;&gt;&gt; save_data(&quot;your_file.ods&quot;, data)Read from an ods file********************************************************************************Here's the sample code:.. code-block:: python    &gt;&gt;&gt; from pyexcel_ods3 import get_data    &gt;&gt;&gt; data = get_data(&quot;your_file.ods&quot;)    &gt;&gt;&gt; import json    &gt;&gt;&gt; print(json.dumps(data))    {&quot;Sheet 1&quot;: [[1, 2, 3], [4, 5, 6]], &quot;Sheet 2&quot;: [[&quot;row 1&quot;, &quot;row 2&quot;, &quot;row 3&quot;]]}Write an ods to memory********************************************************************************Here's the sample code to write a dictionary to an ods file:.. code-block:: python    &gt;&gt;&gt; from pyexcel_ods3 import save_data    &gt;&gt;&gt; data = OrderedDict()    &gt;&gt;&gt; data.update({&quot;Sheet 1&quot;: [[1, 2, 3], [4, 5, 6]]})    &gt;&gt;&gt; data.update({&quot;Sheet 2&quot;: [[7, 8, 9], [10, 11, 12]]})    &gt;&gt;&gt; io = StringIO()    &gt;&gt;&gt; save_data(io, data)    &gt;&gt;&gt; # do something with the io    &gt;&gt;&gt; # In reality, you might give it to your http response    &gt;&gt;&gt; # object for downloadingRead from an ods from memory********************************************************************************Continue from previous example:.. code-block:: python    &gt;&gt;&gt; # This is just an illustration    &gt;&gt;&gt; # In reality, you might deal with ods file upload    &gt;&gt;&gt; # where you will read from requests.FILES['YOUR_ODS_FILE']    &gt;&gt;&gt; data = get_data(io)    &gt;&gt;&gt; print(json.dumps(data))    {&quot;Sheet 1&quot;: [[1, 2, 3], [4, 5, 6]], &quot;Sheet 2&quot;: [[7, 8, 9], [10, 11, 12]]}Pagination feature********************************************************************************Special notice 30/01/2017: due to the constraints of the underlying 3rd partylibrary, it will read the whole file before returning the paginated data. Soat the end of day, the only benefit is less data returned from the readingfunction. No major performance improvement will be seen.With that said, please install `pyexcel-odsr &lt;https://github.com/pyexcel/pyexcel-odsr&gt;`_and it gives better performance in pagination.Let's assume the following file is a huge ods file:.. code-block:: python   &gt;&gt;&gt; huge_data = [   ...     [1, 21, 31],   ...     [2, 22, 32],   ...     [3, 23, 33],   ...     [4, 24, 34],   ...     [5, 25, 35],   ...     [6, 26, 36]   ... ]   &gt;&gt;&gt; sheetx = {   ...     &quot;huge&quot;: huge_data   ... }   &gt;&gt;&gt; save_data(&quot;huge_file.ods&quot;, sheetx)And let's pretend to read partial data:.. code-block:: python   &gt;&gt;&gt; partial_data = get_data(&quot;huge_file.ods&quot;, start_row=2, row_limit=3)   &gt;&gt;&gt; print(json.dumps(partial_data))   {&quot;huge&quot;: [[3, 23, 33], [4, 24, 34], [5, 25, 35]]}And you could as well do the same for columns:.. code-block:: python   &gt;&gt;&gt; partial_data = get_data(&quot;huge_file.ods&quot;, start_column=1, column_limit=2)   &gt;&gt;&gt; print(json.dumps(partial_data))   {&quot;huge&quot;: [[21, 31], [22, 32], [23, 33], [24, 34], [25, 35], [26, 36]]}Obvious, you could do both at the same time:.. code-block:: python   &gt;&gt;&gt; partial_data = get_data(&quot;huge_file.ods&quot;,   ...     start_row=2, row_limit=3,   ...     start_column=1, column_limit=2)   &gt;&gt;&gt; print(json.dumps(partial_data))   {&quot;huge&quot;: [[23, 33], [24, 34], [25, 35]]}As a pyexcel plugin--------------------------------------------------------------------------------No longer, explicit import is needed since pyexcel version 0.2.2. Instead,this library is auto-loaded. So if you want to read data in ods format,installing it is enough.Reading from an ods file********************************************************************************Here is the sample code:.. code-block:: python    &gt;&gt;&gt; import pyexcel as pe    &gt;&gt;&gt; sheet = pe.get_book(file_name=&quot;your_file.ods&quot;)    &gt;&gt;&gt; sheet    Sheet 1:    +---+---+---+    | 1 | 2 | 3 |    +---+---+---+    | 4 | 5 | 6 |    +---+---+---+    Sheet 2:    +-------+-------+-------+    | row 1 | row 2 | row 3 |    +-------+-------+-------+Writing to an ods file********************************************************************************Here is the sample code:.. code-block:: python    &gt;&gt;&gt; sheet.save_as(&quot;another_file.ods&quot;)Reading from a IO instance********************************************************************************You got to wrap the binary content with stream to get ods working:.. code-block:: python    &gt;&gt;&gt; # This is just an illustration    &gt;&gt;&gt; # In reality, you might deal with ods file upload    &gt;&gt;&gt; # where you will read from requests.FILES['YOUR_ODS_FILE']    &gt;&gt;&gt; odsfile = &quot;another_file.ods&quot;    &gt;&gt;&gt; with open(odsfile, &quot;rb&quot;) as f:    ...     content = f.read()    ...     r = pe.get_book(file_type=&quot;ods&quot;, file_content=content)    ...     print(r)    ...    Sheet 1:    +---+---+---+    | 1 | 2 | 3 |    +---+---+---+    | 4 | 5 | 6 |    +---+---+---+    Sheet 2:    +-------+-------+-------+    | row 1 | row 2 | row 3 |    +-------+-------+-------+Writing to a StringIO instance********************************************************************************You need to pass a StringIO instance to Writer:.. code-block:: python    &gt;&gt;&gt; data = [    ...     [1, 2, 3],    ...     [4, 5, 6]    ... ]    &gt;&gt;&gt; io = StringIO()    &gt;&gt;&gt; sheet = pe.Sheet(data)    &gt;&gt;&gt; io = sheet.save_to_memory(&quot;ods&quot;, io)    &gt;&gt;&gt; # then do something with io    &gt;&gt;&gt; # In reality, you might give it to your http response    &gt;&gt;&gt; # object for downloadingLicense================================================================================New BSD LicenseDeveloper guide==================Development steps for code changes#. git clone https://github.com/pyexcel/pyexcel-ods3.git#. cd pyexcel-ods3Upgrade your setup tools and pip. They are needed for development and testing only:#. pip install --upgrade setuptools pipThen install relevant development requirements:#. pip install -r rnd_requirements.txt # if such a file exists#. pip install -r requirements.txt#. pip install -r tests/requirements.txtOnce you have finished your changes, please provide test case(s), relevant documentationand update changelog.yml.. note::    As to rnd_requirements.txt, usually, it is created when a dependent    library is not released. Once the dependecy is installed    (will be released), the future    version of the dependency in the requirements.txt will be valid.How to test your contribution------------------------------Although `nose` and `doctest` are both used in code testing, it is adviable that unit tests are put in tests. `doctest` is incorporated only to make sure the code examples in documentation remain valid across different development releases.On Linux/Unix systems, please launch your tests like this::    $ makeOn Windows, please issue this command::    &gt; test.batBefore you commit------------------------------Please run::    $ make formatso as to beautify your code otherwise your build may fail your unit test.Installation Note================================================================================The installation of `lxml` will be tricky on Windows platform. It is recommended that you download a lxml's own windows installer instead of using pip.5 contributors================================================================================In alphabetical order:* `Benedikt Waldvogel &lt;https://github.com/bwaldvogel&gt;`_* `Mateusz Konieczny &lt;https://github.com/matkoniecz&gt;`_* `Michael K. &lt;https://github.com/michael-k&gt;`_* `Stephen J. Fuhry &lt;https://github.com/fuhrysteve&gt;`_* `Vincent Raspal &lt;https://github.com/vinraspa&gt;`_Change log================================================================================0.6.1 - 1.2.2022--------------------------------------------------------------------------------**added**#. `#28 &lt;https://github.com/pyexcel/pyexcel-ods3/issues/28&gt;`_: support datetime0.6.0 - 8.10.2020--------------------------------------------------------------------------------**added**#. new style reader and writer plugins. works with pyexcel-io v0.6.20.5.3 - 27.11.2018--------------------------------------------------------------------------------**added**#. `pyexcel#57 &lt;https://github.com/pyexcel/pyexcel/issues/57&gt;`_, long type will   not be written in ods. please use string type. And if the integer is equal or   greater than 10 to the power of 16, it will not be written either in ods. In   both situation, IntegerPrecisionLossError will be raised.0.5.2 - 23.10.2017--------------------------------------------------------------------------------**updated**#. pyexcel `pyexcel#105 &lt;https://github.com/pyexcel/pyexcel/issues/105&gt;`_,   remove gease from setup_requires, introduced by 0.5.1.#. remove python2.6 test support#. update its dependecy on pyexcel-io to 0.5.30.5.1 - 20.10.2017--------------------------------------------------------------------------------**added**#. `pyexcel#103 &lt;https://github.com/pyexcel/pyexcel/issues/103&gt;`_, include   LICENSE file in MANIFEST.in, meaning LICENSE file will appear in the released   tar ball.0.5.0 - 30.08.2017--------------------------------------------------------------------------------**Updated**#. put dependency on pyexcel-io 0.5.0, which uses cStringIO instead of StringIO.   Hence, there will be performance boost in handling files in memory.**Relocated**#. All ods type conversion code lives in pyexcel_io.service module0.4.1 - 17.08.2017--------------------------------------------------------------------------------**Updated**#. update dependency to use pyexcel-ezodf v0.3.3 as ezodf 0.3.2 has `the bug   &lt;https://github.com/pyexcel/pyexcel-ezodf/issues/1&gt;`_, cannot handle file   alike objects and has not been updated for 2 years.0.4.0 - 19.06.2017--------------------------------------------------------------------------------**Updated**#. `pyexcel#14 &lt;https://github.com/pyexcel/pyexcel/issues/14&gt;`_, close file   handle#. pyexcel-io plugin interface now updated to use `lml   &lt;https://github.com/chfw/lml&gt;`_.0.3.2 - 13.04.2017--------------------------------------------------------------------------------**Updated**#. issue `pyexcel#8 &lt;https://github.com/pyexcel/pyexcel/issues/8&gt;`_,   PT288H00M00S is valid duration0.3.1 - 02.02.2017--------------------------------------------------------------------------------**Added**#. Recognize currency type0.3.0 - 22.12.2016--------------------------------------------------------------------------------**Updated**#. Code refactoring with pyexcel-io v 0.3.00.2.2 - 05.11.2016--------------------------------------------------------------------------------**Updated**#. `pyexcel#11 &lt;https://github.com/pyexcel/pyexcel/issues/11&gt;`_, be able to   consume a generator of two dimensional arrays.0.2.1 - 31.08.2016--------------------------------------------------------------------------------**Added**#. support pagination. two pairs: start_row, row_limit and start_column,   column_limit help you deal with large files.0.2.0 - 01.06.2016--------------------------------------------------------------------------------**Added**#. By default, `float` will be converted to `int` where fits. `auto_detect_int`,   a flag to switch off the autoatic conversion from `float` to `int`.#. 'library=pyexcel-ods3' was added so as to inform pyexcel to use it instead of   other libraries, in the situation where multiple plugins for the same file   type are installed**Updated**#. support the auto-import feature of pyexcel-io 0.2.0#. compatibility with pyexcel-io 0.1.00.1.0 - 17.01.2016--------------------------------------------------------------------------------**Updated**#. support the auto-import feature of pyexcel-io 0.2.0#. compatibility with pyexcel-io 0.1.0</longdescription>
</pkgmetadata>