<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Marketing API SDK for Python[![Build Status](https://travis-ci.org/facebook/facebook-python-ads-sdk.svg)](https://travis-ci.org/facebook/facebook-python-ads-sdk)## The Ads SDK for Python provides an easy interface and abstraction to the Marketing API.Python is currently the most popular language for our third party adsdevelopers. ``facebookads`` is a Python package that provides an interfacebetween your Python application and Facebook's&lt;a href=&quot;https://developers.facebook.com/docs/marketing-apis&quot;&gt;Marketing API&lt;/a&gt;. Thistutorial covers the basics knowledge needed to use the SDK and provide someexercises for the reader.**NOTE**: ``facebookads`` package is compatible with Python 2 and 3!## Pre-requisites### An AppTo get started with the SDK you must have a Facebook app&lt;a href=&quot;https://developers.facebook.com/&quot;&gt;registered ondevelopers.facebook.com&lt;/a&gt;.**IMPORTANT**: Enable all migrations in the App's Settings-&gt;Migrations page.**IMPORTANT**: For extra security, the SDK requires that you set 'Require App Secret' to *Yes* on your app's Settings-&gt;Advanced page.Your app should now be able to use the Marketing API!### An Access TokenYou need to generate a user access token for your app and ask for the``ads_management`` permission. It is expected that an app in production willbuild its own infrastructure to interact with a user to generate an access tokenand choose an account to manage.&lt;a href=&quot;https://developers.facebook.com/docs/marketing-api/using-the-api&quot;&gt;Learnmore about access tokens here&lt;/a&gt;.For now, we can use the&lt;a href=&quot;https://developers.facebook.com/tools/explorer&quot;&gt;Graph Explorer&lt;/a&gt; toget an access token. Select your App from the dropdown in the top right, and then generate a token with the premissions you want to test with.## Install packageThe easiest way to install the SDK is via ``pip`` in your shell.**NOTE**: For Python 3, use ``pip3`` and ``python3`` instead.**NOTE**: Use ``sudo`` if any of these complain about permissions. (This mighthappen if you are using a system installed Python.)If you don't have pip:```easy_install pip```Now execute when you have pip:```pip install facebookads```If you care for the latest version instead of a possibly outdated version in the&lt;a href=&quot;https://pypi.python.org&quot;&gt;pypi.python.org&lt;/a&gt; repository,&lt;a href=&quot;https://github.com/facebook/facebook-python-ads-sdk&quot;&gt;check out therepository from GitHub or download a release tarball&lt;/a&gt;. Once you've got thepackage downloaded and unzipped, install it:```python setup.py install```Great, now you are ready to use the SDK!## BootstrappingThe rest of the example code given will assume you have bootstrapped the apiinto your program like the following sample app:```pythonfrom facebookads.api import FacebookAdsApifrom facebookads import adobjectsmy_app_id = '&lt;APP_ID&gt;'my_app_secret = '&lt;APP_SECRET&gt;'my_access_token = '&lt;ACCESS_TOKEN&gt;'proxies = {'http': '&lt;HTTP_PROXY&gt;', 'https': '&lt;HTTPS_PROXY&gt;'} # add proxies if neededFacebookAdsApi.init(my_app_id, my_app_secret, my_access_token, proxies)```**NOTE**: We shall use the adobjects module throughout the rest of the tutorial. You can also use the individual class files under adobjects directly. ## SDK StructureThe SDK contains the object module which has classes for every adobject. Youwill notice that these classes are essentially extending individual class from ``adobjects`` folder. We encourage you to use these files directly.We maintain the objects module for compatibility and this will be removed starting 2.7.## Understanding CRUDThe SDK implements a CRUD (create, read, update, delete) design. Objectsrelevant to exploring the graph are located in the objects module of thefacebookads package.All objects on the graph are instances of ``AbstractObject``. Some objects canbe directly queried and thus are instances of ``AbstractCrudObject`` (a subclassof ``AbstractObject``). Both these abstract classes are located in``facebookads.adobjects``.AbstractCrudObject can have all or some of the following methods:* ``remote_create`` * ``remote_read``* ``remote_update``* ``remote_delete``In the newest version of the SDK, you will notice an additional folder ``adobjects`` under facebookads. Under this you will see a file for every ad object in our Marketing API. These files are autogenerated from our API and therefore are close in parity with what API has to offer. Based on what CRUD operations can be performed on each object, you will see the presensce of the following methods in them:* ``api_create`` * ``api_get``* ``api_update``* ``api_delete``The above methods have a one to one correspondence with the remote methods. For example, Campaign has all these methods but AdAccount does not. Read theMarketing API documentation for more information about&lt;a href=&quot;https://developers.facebook.com/docs/marketing-api/reference&quot;&gt;how different adobjects are used&lt;/a&gt;.You can choose to continue to use the remote_* methods or the new methods. We offer both so as to aviod breaking existing codes.## Exploring the GraphThe way the SDK abstracts the API is by defining classes that represent objectson the graph. These class definitions and their helpers are located in``facebookads.adobjects``.### Initializing ObjectsLook at ``AbstractObject``'s and ``AbstractCrudObject``'s ``__init__`` methodfor more information. Most objects on the graph subclass from one of the two.When instantiating an ad object, you can specify its id if it already exists bydefining ``fbid`` argument. You can specify an object's parent id as well bydefining the ``parent_id`` argument. Lastly, if you want to interact with theAPI using a specific api object instead of the default, you can specify the``api`` argument.### EdgesLook at the methods of an object to see what associations over which we caniterate. For example an ``AdAccountUser`` object has a method ``get_ad_accounts`` whichreturns an iterator of ``AdAccount`` objects.### Ad AccountMost ad-related operations are in the context of an ad account. You can go to&lt;a href=&quot;https://www.facebook.com/ads/manage&quot;&gt;Ads Manager&lt;/a&gt; to see accountsfor which you have permission. Most of you probably have a personal account.Let's get all the ad accounts for the user with the given access token. I onlyhave one account so the following is printed:```python&gt;&gt;&gt; me = adobjects.AdAccountUser(fbid='me')&gt;&gt;&gt; my_accounts = list(me.get_ad_accounts())&gt;&gt;&gt; print(my_accounts)[{   'account_id': u'17842443', 'id': u'act_17842443'}]&gt;&gt;&gt; type(my_accounts[0])&lt;class 'facebookads.adobjects.AdAccount'&gt;```**WARNING**: We do not specify a keyword argument ``api=api`` when instantiatingthe ``AdAccountUser`` object here because we've already set the default api whenbootstrapping.**NOTE**: We wrap the return value of ``get_ad_accounts`` with ``list()``because ``get_ad_accounts`` returns an ``EdgeIterator`` object (located in``facebookads.adobjects``) and we want to get the full list right away instead ofhaving the iterator lazily loading accounts.For our purposes, we can just pick an account and do our experiments in itscontext:```python&gt;&gt;&gt; my_account = my_accounts[0]```Or if you already know your account id:```python&gt;&gt;&gt; my_account = objects.AdAccount('act_17842443')```## CreateLet's create a campaign. It's in the context of the account, i.e. its parentshould be the account.```pythoncampaign = objects.Campaign(parent_id = my_account.get_id_assured())```Then we specify some details about the campaign. To figure out what propertiesto define, you should look at the available fields of the object (located in``Campaign.Field``) and also look at the ad object's documentation (e.g.&lt;a href=&quot;https://developers.facebook.com/docs/marketing-api/reference/ad-campaign-group&quot;&gt;Campaign&lt;/a&gt;).**NOTE**: To find out the fields, look at the individual class file under adobjects directory. ```pythoncampaign[objects.Campaign.Field.name] = &quot;Potato Campain&quot; # siccampaign[objects.Campaign.Field.configured_status] = objects.Campaign.Status.paused```Finally, we make the create request by calling the ``remote_create`` method.```pythoncampaign.remote_create()```If there's an error, an exception will be raised. Possible exceptions and theirdescriptions are listed in ``facebookads.exceptions``.## ReadWe can also read properties of an object from the api assuming that the objectis already created and has a node path. Accessing properties of an object issimple since ``AbstractObject`` implements the ``collections.MutableMapping``.You can access them just like accessing a key of a dictionary:```python&gt;&gt;&gt; print(my_account){'account_id': u'17842443', 'id': u'act_17842443'}&gt;&gt;&gt; my_account.remote_read(fields=[objects.AdAccount.Field.amount_spent])&gt;&gt;&gt; print(my_account[objects.AdAccount.Field.amount_spent]){'amount_spent': 21167, 'account_id': u'17842443', 'id': u'act_17842443'}```## UpdateTo update an object, we can modify its properties and then call the``remote_update`` method to sync the object with the server. Let's correct thetypo &quot;Campain&quot; to &quot;Campaign&quot;:```python&gt;&gt;&gt; campaign[objects.Campaign.Field.name] = &quot;Potato Campaign&quot;&gt;&gt;&gt; campaign.remote_update()```You can see the results in ads manager.## DeleteIf we decide we don't want the campaign we created anymore:```pythoncampaign.remote_delete()```## Useful Arguments### MULTIPLE ACCESS TOKENSThroughout the docs, the method FacebookAdsApi.init is called before making any API calls. Thismethod set up a default FacebookAdsApi object to be used everywhere. That simplifies the usagebut it's not feasible when a system using the SDK will make calls on behalf of multiple users.The reason why this is not feasible is because each user should have its own FacebookSession, with its ownaccess token, rather than using the same session for every one. Each session should be used to create aseparate FacebookAdsApi object. See example below:```pythonmy_app_id = '&lt;APP_ID&gt;'my_app_secret = '&lt;APP_SECRET&gt;'my_access_token_1 = '&lt;ACCESS_TOKEN_1&gt;'my_access_token_2 = '&lt;ACCESS_TOKEN_2&gt;'proxies = {'http': '&lt;HTTP_PROXY&gt;', 'https': '&lt;HTTPS_PROXY&gt;'} # add proxies if neededsession1 = FacebookSession(    my_app_id,    my_app_secret,    my_access_token_1,    proxies,)session2 = FacebookSession(    my_app_id,    my_app_secret,    my_access_token_2,    proxies,)api1 = FacebookAdsApi(session1)api2 = FacebookAdsApi(session2)```In the SDK examples, we always set a single FacebookAdsApi object as the default one.However, working with multiples access_tokens, require us to use multiples apis. We may set a defaultapi for a user, but, for the other users,  we shall use its the api object as a param. In the example below,we create two AdAccountUsers, the first one using the default api and the second one using its api object:```pythonFacebookAdsApi.set_default_api(api1)me1 = AdAccountUser(fbid='me')me2 = AdAccountUser(fbid='me', api=api2)```Another way to create the same objects from above would be:```pythonme1 = AdAccountUser(fbid='me', api=api1)me2 = AdAccountUser(fbid='me', api=api2)```From here, all the following workflow for these objects remains the same. The only exceptions arethe classmethods calls, where we now should pass the api we want to use as the last parameteron every call. For instance, a call to the AdAccountUser.get_by_ids method should be like this:```pythonsession = FacebookSession( my_app_id, my_app_secret, my_access_token_1, proxies,)api = FacebookAdsApi(session1)AdAccountUser.get_by_ids(ids=['&lt;UID_1&gt;', '&lt;UID_2&gt;'], api=api)```### CRUDAll CRUD calls support a ``params`` keyword argument which takes a dictionarymapping parameter names to values in case advanced modification is required. Youcan find the list of parameter names as attributes of``{your object class}.Field``. Under the Field class there may be other classeswhich contain, as attributes, valid fields of the value of one of the parentproperties.``remote_create`` and ``remote_update`` support a ``files`` keyword argumentwhich takes a dictionary mapping file reference names to binary opened fileobjects.``remote_read`` supports a ``fields`` keyword argument which is a convenient wayof specifying the 'fields' parameter. ``fields`` takes a list of fields whichshould be read during the call. The valid fields can be found as attributes ofthe class Field.### EdgesWhen initializing an ``EdgeIterator`` or when calling a method such as``AdAccount.get_ad_campaigns``:* You can specify a ``fields`` argument which takes a list of fields to read forthe objects being read.* You can specify a ``params`` argument that can help you specify or filter theedge more precisely.## Batch CallingIt is efficient to group together large numbers of calls into one http request.The SDK makes this process simple. You can group together calls into an instanceof ``FacebookAdsApiBatch`` (available in facebookads.api). To easily get onefor your api instance:```pythonmy_api_batch = api.new_batch()```Calls can be added to the batch instead of being executed immediately:```pythoncampaign.remote_delete(batch=my_api_batch)```Requests can be saved to load the response after the batch call:```pythonrequest = campaign.get_insights(batch=my_api_batch)```Once you're finished adding calls to the batch, you can send off the request:```pythonmy_api_batch.execute()```After the batch call you may load your response: ```pythonresponse = request.load()```Please follow &lt;a href=&quot;https://developers.facebook.com/docs/graph-api/making-multiple-requests&quot;&gt;batch call guidelines in the Marketing API documentation&lt;/a&gt;. There are optimalnumbers of calls per batch. In addition, you may need to watch out that for ratelimiting as a batch call simply improves network performance and each call doescount individually towards rate limiting.## ExceptionsSee ``facebookads.exceptions`` for a list of exceptions which may be thrown bythe SDK.## Tests### Unit testsThe unit tests don't require an access token or network access. Run themwith your default installed Python as follows:```python -m facebookads.test.unit```You can also use tox to run the unit tests with multiple Python versions:```sudo apt-get install python-tox  # Debian/Ubuntusudo yum install python-tox      # Fedoratox --skip-missing-interpreters```You can increase interpreter coverage by installing additional versions ofPython. On Ubuntu you can use the[deadsnakes PPA](https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes).On other distributions you can[build from source](https://www.python.org/downloads/) and then use`sudo make altinstall` to avoid conflicts with your system-installedversion.### Integration testsThe integration tests require an access token with ads_management scope.You can obtain a short-lived token from the[Graph API Explorer](https://developers.facebook.com/tools/explorer/).These tests access the live Facebook API but shouldn't actuallylaunch an ad or spend any money.Copy the `config.json.example` to `config.json` and fill in the appropriatedetails.```python -m facebookads.test.integration &lt;ACCESS_TOKEN&gt;# Access token not required if it's defined in config.json```## ExamplesExamples of usage are located in the ``examples/`` folder.</longdescription>
</pkgmetadata>