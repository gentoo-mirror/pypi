<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>toposort========Overview========Implements a topological sort algorithm.From `Wikipedia &lt;http://en.wikipedia.org/wiki/Topological_sorting&gt;`_:In computer science, a topological sort (sometimes abbreviated topsortor toposort) or topological ordering of a directed graph is a linearordering of its vertices such that for every directed edge uv fromvertex u to vertex v, u comes before v in the ordering.Input data description======================The input to the toposort function is a dict describing thedependencies among the input nodes. Each key is a dependent node, thecorresponding value is a set containing the dependent nodes.Note that toposort does not care what the input node values mean: itjust compares them for equality. The examples here usually useintegers, but they could be any hashable type.Typical usage=============The interpretation of the input data here is: If 2 depends on 11; 9depends on 11, 8 and 10; 10 depends on 11 and 3 (and so on), then in whatorder should we process the items such that all nodes are processedbefore any of their dependencies?::    &gt;&gt;&gt; from toposort import toposort, toposort_flatten    &gt;&gt;&gt; list(toposort({2: {11},    ...                9: {11, 8, 10},    ...                10: {11, 3},    ...                11: {7, 5},    ...                8: {7, 3},    ...               }))    [{3, 5, 7}, {8, 11}, {2, 10}, {9}]And the answer is: process 3, 5, and 7 (in any order); then process 8and 11; then process 2 and 10; then process 9. Note that 3, 5, and 7are returned first because they do not depend on anything. They arethen removed from consideration, and then 8 and 11 don't depend onanything remaining. This process continues until all nodes arereturned, or a circular dependency is detected.Circular dependencies=====================A circular dependency will raise a CyclicDependencyError, which isderived from ValueError.  Here 1 depends on 2, and 2 depends on 1::    &gt;&gt;&gt; list(toposort({1: {2},    ...                2: {1},    ...               }))    Traceback (most recent call last):        ...    toposort.CircularDependencyError: Circular dependencies exist among these items: {1:{2}, 2:{1}}In addition, the 'data' attribute of the raised CyclicDependencyErrorwill contain a dict containing the subset of the input data involvedin the circular dependency.Module contents===============``toposort(data)``Returns an iterator describing the dependencies among nodes in theinput data. Each returned item will be a set. Each member of this sethas no dependencies in this set, or in any set previously returned.``toposort_flatten(data, sort=True)``Like toposort(data), except that it returns a list of all of thedepend values, in order. If sort is true, the returned nodes are sorted withineach group before they are appended to the result::    &gt;&gt;&gt; toposort_flatten({2: {11},    ...                   9: {11, 8, 10},    ...                   10: {11, 3},    ...                   11: {7, 5},    ...                   8: {7, 3},    ...                  })    [3, 5, 7, 8, 11, 2, 10, 9]Note that this result is the same as the first example: ``[{3, 5, 7}, {8, 11}, {2, 10}, {9}]``,except that the result is flattened, and within each set the nodesare sorted.Testing=======To test, run 'python setup.py test'. On python &gt;= 3.0, this also runs the doctests.</longdescription>
</pkgmetadata>