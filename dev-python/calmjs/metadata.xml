<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>calmjs======A Python framework for building toolchains and utilities for workingwith the Node.js ecosystem from within a Python environment... image:: https://github.com/calmjs/calmjs/actions/workflows/build.yml/badge.svg?branch=3.4.4    :target: https://github.com/calmjs/calmjs/actions/workflows/build.yml?query=branch:3.4.4.. image:: https://ci.appveyor.com/api/projects/status/45054tm9cfk7ryam/branch/3.4.4?svg=true    :target: https://ci.appveyor.com/project/metatoaster/calmjs/branch/3.4.4.. image:: https://coveralls.io/repos/github/calmjs/calmjs/badge.svg?branch=3.4.4    :target: https://coveralls.io/github/calmjs/calmjs?branch=3.4.4.. |AMD| replace:: AMD (Asynchronous Module Definition).. |calmjs.bower| replace:: ``calmjs.bower``.. |calmjs| replace:: ``calmjs``.. |calmjs_npm| replace:: ``calmjs npm``.. |calmjs.rjs| replace:: ``calmjs.rjs``.. |calmjs.webpack| replace:: ``calmjs.webpack``.. |npm| replace:: ``npm``.. |r.js| replace:: ``r.js``.. |setuptools| replace:: ``setuptools``.. |webpack| replace:: ``webpack``.. |yarn| replace:: ``yarn``.. _AMD: https://github.com/amdjs/amdjs-api/blob/master/AMD.md.. _Bower: https://bower.io/.. _calmjs.bower: https://pypi.python.org/pypi/calmjs.bower.. _calmjs.rjs: https://pypi.python.org/pypi/calmjs.rjs.. _calmjs.webpack: https://pypi.python.org/pypi/calmjs.webpack.. _Node.js: https://nodejs.org/.. _npm: https://www.npmjs.com/.. _r.js: https://github.com/requirejs/r.js.. _setuptools: https://pypi.python.org/pypi/setuptools.. _webpack: https://webpack.js.org/.. _yarn: https://yarnpkg.com/Introduction------------Calmjs defines an extensible framework for interoperability betweenPython and `Node.js`_ runtime for Python packages, to provide theirdevelopers a well defined interface for bi-directional access betweenNode.js/Javascript development tools and the JavaScript code withintheir Python packages, such that a proper, formal integration withNode.js/JavaScript environment from a Python environment can befacilitated.  The goal of the Calmjs framework is to aid thedevelopment, testing, and deployment of Python packages that alsoinclude and/or integrate with external JavaScript code.Methodology-----------First, this is achieved by providing Python packages the ability todeclare dependencies on Node.js/JavaScript packages or source files thatare required to complete their functionality.  This common frameworkwill ensure the accessibility of these metadata under a common protocol,to avoid incompatible declarations that are not portable betweendifferent projects and environments, or being otherwise scattered acrossdifferent tools or locations or be duplicated within the same workingenvironments by different sets of tools.  Without a common framework,the result is that Python packages will be unable to properlycommunicate their non-Python requirements and states between each other,resulting in difficulties in building, development and deployment of thesoftware stack, and/or becoming a source of errors for those processes.Second, by offering a set of tools built on top of this extensibleframework to work with these declarations for generating theconfiguration files for required Node.js tools, so that they canconstruct the required the build and/or runtime environment for theirfunctionality.Ultimately, this permits better Node.js integration with a given Pythonenvironment, lowering the amount of effort needed to achieve continuousintegration and/or delivery of Python packages in conjunction withNode.js/JavaScript packages in a reproducible manner.Implementation~~~~~~~~~~~~~~In order to achieve this, the Calmjs framework provides a set ofextension to |setuptools|_ that assists with the tracking and managementof dependencies of JavaScript or Node.js based packages (such as onesthrough |npm|_) for a given Python package.  It also provides a numberof base classes that can be used to build custom toolchains thatimplement different strategies for managing and compiling requiredJavaScript code and related assets into the deployment artifacts that anapplication server may use, or to generate test harnesses to ensurecorrectness under both the development and production environment.These extra functionalities will be provided by other Python packagesunder the |calmjs| namespace in order to realize this modulararchitecture.The name Calmjs was originally derived from the steps in the firstiteration of the toolchain which involves the steps compile, assemble,and linkage into a module of JavaScript using the namespace from thehost Python package.  The `m` in the logo is the ear of a rabbit.  Thereason this animal is chosen as the mascot for this project is becauseof their dietary habits, as it's analogous to how JavaScript code istypically turned into a minimally usable level by other tools andframework.Features overview-----------------A framework for integration with Node.js based package managers    Through |setuptools| command hooks, |calmjs| provides Python    packages with the ability to declare and manage manifest definition    files for Node.js based package management systems (e.g. such as    ``package.json`` for |npm|).  Under typical usage, this means the    declaration of ``dependencies`` or ``devDependencies`` for the    JavaScript packages needed by a given Python package can be tracked,    all within the |setuptools| framework through the extensions    provided by |calmjs|.    The other part of this infrastructure is that these declarations    follow the Python package dependency graph.  Developers and users    can make use of the |calmjs| console command entry point, or through    |setuptools|, to generate a manifest file to facilitate the    installation of Node.js packages required by the Python packages    within the completed application stack, tailored for all the    packages at hand.    |calmjs| includes the integration support for both |npm|_ and    |yarn|_ by default.Export JavaScript code out of Python packages with the same namespace    A given Python package that included associated JavaScript source    code within the same Python module and namespace structure alongside    Python source code within the source tree, will be able to declare    those namespaces as the root for those JavaScript modules under the    exact same Python package namespace through |setuptools| entry    points.    These declarations will be available through registries exposed by    the |calmjs| module registry system for other packages to turn those    declarations through the API provided by the framework into working    JavaScript code following the same declared module and namespace    structures.  The default module registry will make use of the ``/``    character (instead of the ``.`` character like in Python) as the    separator for the names due to established naming conventions in    JavaScript (and in ES6 towards the future).    Other tools that works with the Calmjs framework can then make use    of these raw JavaScript source files in conjunction with the local    Node.js environment, or generate artifacts for deployment over the    web.  This leads to...Better integration of JavaScript toolchains into Python environments    This is achieved by providing a framework for building toolchains    for working with tools written in JavaScript for Node.js/JavaScript    environments that integrates properly with existing Python packages    and environments.    There are no limitations as to how or what can be done with the    tools or the source files, as this is left as an implementation    detail.  For an example please refer to the |calmjs.rjs|_ Python    package, which allows the production of |AMD|_ artifacts from    JavaScript packages embedded inside Python packages, or    |calmjs.webpack|_ which integrates with |webpack|_ for the    production of another commonly used bundled artifact format.    Generally, toolchains can be built to find and load all Python    packages (through the |calmjs| registry system) that have any    JavaScript source files, and those will be extracted, go through the    appropriate transpilers (if any) in order to build deployable    artifacts.  Test harnesses can be set up to aid with running of unit    tests, functional testing and naturally the final integration tests    needed for a successful deployment.Well-defined modular architecture to ensure code reuse and extensibility    The features described so far are built upon a foundation of generic    classes and modules, so that the support for additional JavaScript    tools or custom process for handling transpilation can be as simple    as creating a new module for a couple of classes with additional    parameters with the relevant |setuptools| entry points.    In fact, |calmjs| out of the box only ships with just the core    framework plus the |npm|/|yarn| interfacing part, with the support    for tools like `Bower`_ or |r.js|_ as completely separate packages    (as |calmjs.bower|_ and |calmjs.rjs|_ respectively), such that    projects, environments or sites that do not need the functionality    those packages provide can simply opt to not have them installed.Installation------------As the goal of |calmjs| is to integrate Node.js and |npm| (or |yarn|)into a Python environment, they need to be available within theenvironment; if they are not installed please follow the installationsteps for `Node.js`_ appropriate for the target operatingsystem/environment/platform.To install |calmjs| into a given Python environment, the followingcommand can be executed to install directly from PyPI:.. code:: console    $ pip install calmjs.. _development installation method:Alternative installation methods (for developers, advanced users)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Development is still ongoing with |calmjs|, for the latest features andbug fixes, the development version can be installed through git like so:.. code:: console    $ # standard installation mode    $ pip install git+https://github.com/calmjs/calmjs.git#egg=calmjs    $ # for an editable installation mode; note the upgrade flag    $ pip install -U -e git+https://github.com/calmjs/calmjs.git#egg=calmjsNote that the ``-U`` flag for the editable installation is to ensurethat |setuptools| be upgraded to the latest version to avoid issuesdealing with namespaces for development packages, which is documented inthe next paragraph.Alternatively, the git repository can be cloned directly and execute``python setup.py develop`` while inside the root of the sourcedirectory, however if this development installation method is done usingany version of |setuptools| earlier than v31, there will be inconsistenterrors with importing of modules under the |calmjs| namespace.  Various`symptoms of namespace import failures`_ are documented under the`troubleshooting`_ section of this document.Testing the installation~~~~~~~~~~~~~~~~~~~~~~~~To ensure that the |calmjs| installation is functioning correctly, thebuilt-in testsuite can be executed by the following:.. code:: console    $ python -m unittest calmjs.tests.make_suiteIf there are failures, please file an issue on the issue tracker withthe full traceback, and/or the method of installation.  Please alsoremember to include platform specific information, such as Pythonversion, operating system environments and version, and other relatedinformation related to the issue at hand.Usage and description of key features-------------------------------------When installed to a particular Python environment, the |calmjs|command-line utility will become available within there... code:: console    $ calmjs    usage: calmjs [-h] [-d] [-q] [-v] [-V] &lt;command&gt; ...    positional arguments:      &lt;command&gt;        artifact     helpers for the management of artifacts        npm          npm support for the calmjs framework        yarn         yarn support for the calmjs framework    optional arguments:      -h, --help     show this help message and exit    global options:      -d, --debug    show traceback on error; twice for post_mortem                     '--debugger' when execution cannot continue      -q, --quiet    be more quiet      -v, --verbose  be more verbose      -V, --version  print version informationAs mentioned, |npm| support is built-in so it is always available; toaccess its help, simply execute ``calmjs npm -h``, which will then listthe options available for that particular subcommand.  If othersubcommands are available (which will be provided by other |calmjs|integration packages) they will be listed as a ``&lt;command&gt;`` and theirspecific help messages will be accessible in the same manner.Declare a ``package.json`` for a given Python package~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. _using package_json:If a package wish to declare dependencies on packages hosted by |npm|,it may do something like this in its ``setup.py``:.. code:: python    from setuptools import setup    package_json = {        &quot;dependencies&quot;: {            &quot;jquery&quot;: &quot;~3.0.0&quot;,            &quot;underscore&quot;: &quot;~1.8.0&quot;,        }    }    setup(        name='example.package',        # ...        setup_requires=[            'calmjs',            # plus other setup_requires ...        ],        package_json=package_json,        # ...    )Note that ``setup_requires`` section must specify |calmjs| in order toenable the ``package_json`` setup keyword for the generation of the``package.json`` metadata file for the given package whenever ``pythonsetup.py egg_info`` is executed (directly or indirectly), so that evenif |calmjs| is not already installed into the current Pythonenvironment, it will be acquired from PyPI and be included as part ofthe |setuptools| setup process, and without being a direct dependency ofthe given package.  The ``package.json`` will be generated if theprovided data is either a valid JSON string or a dictionary withoutincompatible data types.  For example:.. code:: console    $ python setup.py egg_info    running egg_info    writing package_json to example.package.egg-info/package.json    ...    $ cat example.package.egg-info/package.json    {        &quot;dependencies&quot;: {            &quot;jquery&quot;: &quot;~3.0.0&quot;,            &quot;underscore&quot;: &quot;~1.8.0&quot;        }    }The key reason for using ``setup_requires`` is to not force a givenpackage's dependents to have |calmjs| as part of their dependencies, astypically this is a requirement only for developers but not forend-users.  This also mean that for developers that want to use |calmjs|and utilities they must install that separately (i.e. ``pip installcalmjs``), or declare |calmjs| as a development dependency through theusage of ``extras_require`` flag, for example:.. code:: python    setup(        name='example.package',        # ...        setup_requires=[            'calmjs',            # ...        ],        extras_require={            'dev': [                'calmjs',                # ... plus other development dependencies            ],        },        # ...    )Then to fully install the package as an editable package with thedependencies listed under the ``dev`` extras:.. code:: console    $ pip install -e .[dev]    Obtaining file://example/package    ...    Installing collected packages: ..., calmjs, ...      Running setup.py develop for example.package    Successfully installed ...Note that now the |calmjs| package remains installed in the Pythonenvironment, and the utilities they provide may now be used, covered bythe following sections.Using the ``package.json`` across Python package dependencies~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. |integrate_with_calmjs_npm| replace:: integration with ``npm``    through ``calmjs npm``With the ``package.json`` file written to the package metadatadirectory, utilities such as |calmjs| make make use of it.  One methodto do this is through that package's ``setup.py``.  By invoking``setup.py npm --init`` from there, a new ``package.json``, combinedwith all the ``dependencies`` and ``devDependencies`` declared by thePython package dependencies of the given package, will be written to thecurrent directory.  This is akin to running ``npm init``, with thedifference being that the dependencies are also being resolved throughthe Python package dependency tree for the given Python package.Do note that this requires the ``package.json`` creation and handlingcapability be available for the given package (refer to previous sectionon how to achieve this) and all dependencies must be correctly installedand be importable from the current Python environment.Alternatively, the |calmjs_npm| utility may be used.  Invoking ``calmjsnpm --init example.package`` from the command line will achieve the samething, anywhere on the file system, provided that both |calmjs| and``example.package`` are installed and available through the currentPython environment's import system.  For more details and informationabout this utility, please refer to the |integrate_with_calmjs_npm|_section.Dealing with |npm| dependencies with Python package dependencies~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Flat is better than nested.  So all ``dependencies`` (and``devDependencies``) declared by any upstream Python package will beautomatically inherited by all its downstream packages, but they havethe option to override it with whatever they want through the mechanismas described above.  They can set a JavaScript or Node.js package towhatever versions desired, or even simply remove that dependencycompletely by setting the version to ``None``.Whenever an actual ``package.json`` is needed by |calmjs|, the|calmjs_npm| utility flattens all Node.js dependencies needed by thePython packages into a single file, which is then passed into therespective JavaScript package manager for consumption.  This process isalso done when a |calmjs| toolchain or utility make use of thesedeclared information to to generate the desired artifacts to achievewhatever desired task at hand.Of course, if the nested style of packages and dependency in the samestyle as |npm| is desired, no one is forced to use this, they are freeto use whatever tools to interpret or make use of whatever data filesand dependencies available, and/or to split their packages up to Pythonand JavaScript bits and have them be deployed and hosted on both PyPI(for ``pip``) and |npm| respectively and then figure out how to bringthem back together in a coherent manner.  Don't ask (or debate with) theauthor on how the latter option is better or easier for everyone(developers, system integrators and end-users) involved.Declare explicit dependencies on paths inside ``node_modules``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Given that the dependencies on specific versions of packages sourcedfrom |npm| is explicitly specified, build tools will benefit again fromexplicit declarations on files needed from those packages.  Namely, thecompiled packages could be declared in the ``extras_calmjs`` section inJSON string much like ``package_json``, like so:.. code:: python    extras_calmjs = {        'node_modules': {            'jquery': 'jquery/dist/jquery.js',            'underscore': 'underscore/underscore.js',        },    }    setup(        name='example.package',        ...        extras_calmjs=extras_calmjs,        ...    )Since ``node_modules`` is declared to be an ``extras_key``, conflictingdeclarations between packages within the environment will be resolvedand merged in the same manner as dependencies conflicts declared in``package_json``.Please do note that complete path names must be declared (note that the``.js`` filename suffix is included in the example); directories canalso be declared.  However, as these declarations are done from withinPython, explicit, full paths are required thus it is up to downstreamintegration packages to properly handle and/or convert this into theconventions that standard Node.js tools might expect (i.e. where the``.js`` filename suffix is omitted).Export JavaScript code from Python packages~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Furthering the previous example, if the files and directories inside``example.package`` are laid out like so::    .    ├── example    │   ├── __init__.py    │   └── package    │       ├── __init__.py    │       ├── content.py    │       ├── form.py    │       ├── ui.js    │       ├── ui.py    │       └── widget.js    └── setup.pyTo declare the JavaScript source files within ``./example/package`` asJavaScript modules through |calmjs|, an entry point can be declared likeso in the ``setup.py`` file:.. code:: python    setup(        ...        entry_points=&quot;&quot;&quot;        ...        [calmjs.module]        example.package = example.package        &quot;&quot;&quot;,        ...    )Note that the name of the entry point is not relevant; that entry pointname is ignored, as the intention of the default module registry is toprovide a module name that maps directly to the same import namespaceas the source Python module, but with the ES5 namespace separator``/``, instead of the ``.`` character as in Python.  If an explicitmapping is required, a new module registry class may be defined thatuses the provided name as the CommonJS import name from the JavaScriptcode.The default method will expose the two source files with the followingnames::    - 'example/package/ui'    - 'example/package/widget'For some projects, it may be undesirable to permit this automated methodto extract all the available JavaScript source files from within thegiven Python module.To get around this, it is possible to declare new module registriesthrough the Calmjs framework.  Provided that the ``ModuleRegistry``subclass was set up correctly to generate the desired modules from agiven package, simply declare this as a ``calmjs.registry`` entry pointlike so:.. code:: python    setup(        ...        entry_points=&quot;&quot;&quot;        ...        [calmjs.registry]        example.module = example.package.registry:ExampleModuleRegistry        &quot;&quot;&quot;,        ...    )Do note that while the names permitted for an entry point name is quiteunrestricted, these registry names should be of a standard dottednamespace format to ensure maximum tool compatibility, as these can bespecified from the command line through tools that utilizes this system.Once the registry was declared, simply replace ``calmjs.module`` withthe name of that, along with a ``calmjs_module_registry`` attribute thatdeclare this ``example.module`` registry is the default registry to usewith this package... code:: python    setup(        ...        calmjs_module_registry=['example.package'],        entry_points=&quot;&quot;&quot;        ...        [example.module]        example.package = example.package        &quot;&quot;&quot;,        ...    )Within the Calmjs framework, tools can be explicitly specified tocapture modules from any or all module registries registered to theframework.  One other registry was also defined.  If the entry point wasdeclared like so:.. code:: python    setup(        ...        entry_points=&quot;&quot;&quot;        ...        [calmjs.py.module]        example.package = example.package        &quot;&quot;&quot;,        ...    )The separator for the namespace and the module will use the ``.``character instead of ``/``.  However given that the ``.`` character is avalid name for a JavaScript module, the usage of this may create issueswith certain JavaScript tools.  While AMD based module systems cangenerally handle ``.`` characters in imports without issues, allowingsomewhat more Python-like feel importing using dotted names within theJavaScript environment, however, this may lead to incompatibilities withother JavaScript libraries thus the usage of this naming scheme is notrecommended.By default, another registry with the ``.tests`` suffix is also declaredas a compliment to the previously introduced registries, which packagescan make use of to declare JavaScript test code that accompanies therespective modules that have been declared.  For example:.. code:: python    setup(        ...        entry_points=&quot;&quot;&quot;        ...        [calmjs.module]        example.package = example.package        [calmjs.module.tests]        example.package.tests = example.package.tests        &quot;&quot;&quot;,        ...    )Much like the first example, this declares ``example.package`` as aPython namespace module that exports JavaScript code, with thesubsequent declaration section being the module that contains the teststhat accompanies the first.Make available the accompanied resource files to loaders~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Certain Node.js build tools and frameworks support the concept of&quot;loaders&quot; for other resource files through the same import/requiresystem for JavaScript modules.  To provide the most basic support toease the effort required by package creators to expose other resourcefiles to the Node.js tooling import systems, a subsidiary loaderregistry may be declared and used in conjunction with a parent moduleregistry.  To extend on the previous example, if following entry pointsare defined:.. code:: ini    [calmjs.module]    example.package = example.package    [calmjs.module.loader]    json = json[json]    text = text[txt,json]The ``calmjs.module.loader`` registry will reference its parent registry``calmjs.module`` for the specific modules that have been exposed, sothat it will source all the relevant filenames with the declared filename extensions to a specific loader by name.  Unlike the base moduleregistry, the module loader registry will ignore the Python module namesection, while the name (on the left-hand side) is the desired loader,with the extras (comma-separated tokens enclosed between the ``[]``) arethe file name extensions to be acquired from the package.  Thus with thepreviously defined entries for the ``example.package``, the following``require`` statements should resolve if the target resource files existfor the package:.. code:: javascript    // resolved through &quot;json = ...[json]&quot;    var manifest_obj = require('json!example/package/manifest.json');    // resolved through &quot;text = ...[txt,json]&quot;    var manifest_txt = require('text!example/package/manifest.json');    var index_txt = require('text!example/package/index.txt');As the values generated by the registry follow the standard toolchainspec compile entry grammar, this should satisfy the most basic use casesand can be included directly as a ``calmjs_module_registry`` for thepackage.  However, the actual usage in the provided JavaScript codeconjunction with the actual toolchain packages that integrates/interactswith with their respective Node.js packages may have interactions thatwill require special handling (such as inclusion/exclusion of thegenerated segments targeted for the final artifact, or how those sourcesare aliased or made available to the system, or whether or not theregistry itself requires manual integration); please consult thedocumentation for the specific integration package with regards to thisspecific registry type.One final note: due to the limitations of the Python entry point system,file name extensions are assumed to be all lower-case... _integrate_with_calmjs_npm:Integration with |npm| through |calmjs_npm|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~As mentioned, it is possible to make use of the ``package.json``generation capabilities from outside of |setuptools|.  Users can easilydo the same through the built-in ``calmjs npm`` tool:.. code:: console    $ calmjs npm --help    usage: calmjs npm [-h] [-d] [-q] [-v] [-V] [--view] [--init] [--install]                      [-i] [-m] [-w] [-E] [-P] [-D]                      &lt;package&gt; [&lt;package&gt; ...]    npm support for the calmjs framework    positional arguments:      &lt;package&gt;          python packages to be used for the generation of                         'package.json'    optional arguments:      -D, --development  explicitly specify development mode for npm install      -E, --explicit     explicit mode disables resolution for dependencies;                         only the specified Python package(s) will be used.      -h, --help         show this help message and exit      -i, --interactive  enable interactive prompt; if an action requires an                         explicit response but none were specified through                         flags (i.e. overwrite), prompt for response;                         disabled by default      -m, --merge        merge generated 'package.json' with the one in                         current directory; if interactive mode is not                         enabled, implies overwrite, else the difference will                         be displayed      -P, --production   explicitly specify production mode for npm install      -w, --overwrite    automatically overwrite any file changes to current                         directory without promptingNaturally, the same ``--init`` functionality shown above with the|setuptools| framework is available, however package names can besupplied for generating the target ``package.json`` file from anywhereon the filesystem, provided that the Python environment has all therequired packages installed.  For instance, if the Node.js packages for``example.package`` is to be installed, this can be invoked to view the``package.json`` that would be generated:.. code:: console    $ calmjs -v npm --view example.package    2016-09-01 16:37:18,398 INFO calmjs.cli generating a flattened    'package.json' for 'example.package'    {        &quot;dependencies&quot;: {            &quot;jquery&quot;: &quot;~3.0.0&quot;,            &quot;underscore&quot;: &quot;~1.8.0&quot;,        },        &quot;devDependencies&quot;: {},        &quot;name&quot;: &quot;example.package&quot;    }If there is an existing ``package.json`` file already in the currentdirectory, using the ``-i`` flag with ``--init`` or ``--install`` willshow what differences there may be between the generated version and theexisting version, and prompt for an action.Toolchain~~~~~~~~~Documentation on how to extend the Toolchain class to support use casesis currently incomplete.  This is usually combined together with a``calmjs.runtime.DriverRuntime`` to hook into the ``calmjs`` runtime.Unfortunately at this time a detailed guide on how to create a completeimplementation is not completed (only documentation within the classare, however).  For a working example on how this may be achieved pleaserefer to the implementations provided by |calmjs.rjs|_ or|calmjs.webpack|_.Toolchain Advice~~~~~~~~~~~~~~~~For package developers that need to provide additional instructions toa toolchain execution (e.g. for compatibility between RequireJS and alsowebpack for specific use case of features to a given package), thetoolchain system will also make use of the advice system such thatadditional instructions may be created and registered for use and reuseby their dependents.  Much like the Toolchain, this feature is currentlylacking in documentation outside of the test cases.Pre-defined artifact generation through |setuptools|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~It is possible to define the artifacts to be generated for a givenpackage and the rule to do so.  Simply define a function that return aninstance of a ``calmjs.toolchain.Toolchain`` subclass that haveintegrated with the desired tool, and a ``calmjs.toolchain.Spec`` objectwith the rules needed.  These specific functions are often provided bythe package that offers them, please refer to the toolchain packageslisted and linked in the previous section for further details on howthese might be used.As these are also implemented through the registry system, the entrypoints generally look like this:.. code:: python    setup(        ...        build_calmjs_artifacts=True,        entry_points=&quot;&quot;&quot;        ...        [calmjs.artifacts]        complete.bundle.js = example.toolchain:builder        &quot;&quot;&quot;,        ...    )In the example, the ``builder`` function from the module``example.toolchain`` is used to generate the ``complete.bundle.js``file.  The generated artifact files will reside in the``calmjs_artifacts`` directory within the package metadata directory(one that ends with either ``.dist-info`` or ``.egg-info``) for thatpackage.  An accompanied ``calmjs_artifacts.json`` file will also begenerated, listing the versions of the various Python packages that wereinvolved with construction of that artifact, and the version of binarythat was used for the task.When the ``build_calmjs_artifacts`` is set to ``True``, the hook forautomatic generation of these artifacts through the ``setup.py build``step will enabled.  This is useful for automatically bundling theartifact file with a release such as Python wheels (e.g. running``setup.py bdist_wheel`` will also build the declared artifacts.Otherwise, this step can be manually invoked using``setup.py build_calmjs_artifacts`` or through the``calmjs artifact build`` tool.Troubleshooting---------------The following may be some issues that may be encountered with typicalusage of |calmjs|.CRITICAL calmjs.runtime terminating due to a critical error~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~If |calmjs| encounters any unexpected situation, it may abort like so:.. code:: console    $ calmjs npm --install calmjs.dev    CRITICAL calmjs.runtime terminating due to a critical errorIf no useful ERROR message is listed before, please try running againusing a debug flag (either ``-d`` or ``--debug``)... code:: console    $ calmjs -d npm --install calmjs.dev    CRITICAL calmjs.runtime terminating due to exception    Traceback (most recent call last):    ...Specifying the debug flag twice will enable the ``post_mortem`` mode,where a debugger will be fired at the point of failure.  Authors ofpackages that implement runtime classes that provide subcommands to the|calmjs| command may find this useful during their development cycles.Do note that the default debugger is only triggered if the top levelruntime class enable the usage (which the runtime class that implementthe |calmjs| command does) and if the failure occur during theinvocation of the runtime class.  Any other errors or exceptions thatoccur during the setup stage of the |calmjs| runtime will simply belogged at a lower priority level (e.g. to make warnings generated duringthe setup stage visible, additional verbose flags must be provided).ERROR bad 'calmjs.runtime' entry point~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ImportError    This is typically caused by improper removal of locally installed    packages that had an entry point registered, an addon package to    |calmjs| registered entry points pointing to bad import locations,    or conflicting installation methods was used for the current    environment as outlined in the installation section of this    document.  Either reinstall the broken package again with the    correct installation method for the environment, or fully uninstall    or remove files belonging to the packages or sources that are    triggering the undesirable error messages.bad entry point    This is caused by packages defining malformed entry point.  The name    of the package triggering this error will be noted in the log; the    error may be reported to its developer... _symptoms of namespace import failures:Random ``ImportError`` when trying to import from the |calmjs| namespace~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~As |calmjs| is declared as both namespace and package, there are certainlow-level setup that is required on the working Python environment toensure that all modules within can be located correctly.  However,versions of |setuptools| earlier than `v31.0.0`__ does not create therequired package namespace declarations when a package is installedusing a `development installation method`_ (e.g. using ``python setup.pydevelop``) into the Python environment in conjunction with anotherpackage that was installed through ``pip`` within the same namespace.Failures can manifest as inconsistent import failures for any modulesunder the |calmjs| namespace.  As an example:.. __: https://setuptools.readthedocs.io/en/latest/history.html#v31-0-0.. code:: pycon    &gt;&gt;&gt; from calmjs import tests    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;    ImportError: cannot import name tests    &gt;&gt;&gt; from calmjs import parse  # calmjs.parse was installed via pip    &gt;&gt;&gt; from calmjs import tests    &gt;&gt;&gt; # no failure, but it was failing just earlier?It could also manifest differently, such as an ``AttributeError``, whichmay be triggered through the execution of unittests for |calmjs|:.. code:: console    $ coverage run --include=src/* -m unittest calmjs.tests.make_suite    Traceback (most recent call last):      ...        parent, obj = obj, getattr(obj, part)    AttributeError: 'module' object has no attribute 'tests'    $ python -m calmjs.tests.make_suite    /usr/bin/python: No module named 'calmjs.tests'To resolve this issue, ensure that |setuptools| is upgraded to v31 orgreater, which may be installed/upgraded through ``pip`` like so:.. code:: console    $ pip install --upgrade setuptoolsThen reinstall all the required packages that are under the |calmjs|namespace to resolve this import issue.Environmental variables being ignored/not passed to underlying tools~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Generally speaking, the Calmjs framework filters out all environmentalvariables except for the bare minimum by default, and only passes alimited number to the underlying tool.  These are the ``PATH`` and the``NODE_PATH`` variables, plus platform specific variables to enableexecution of scripts and binaries.Runtime reporting 'unrecognized arguments:' on declared arguments~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~This issue should be fully resolved for calmjs&gt;=3.1.0.The default behavior in the ArgumentParser defaults to uselessly blamingthe root parser for any unrecognized arguments caused by its subparsers.The original workaround prior to calmjs-3.1.0 had the failure asdocumented below as its subparser resolver implementation wasincomplete.  Either of these misleading behaviors impede the end usersfrom being able to quickly locate the misplaced argument flags.For instance, if the |calmjs| command was executed like so resulting inerror message may look like this:.. code:: console    $ calmjs subcmd1 subcmd2 --flag item    usage: calmjs subcmd1 ... [--flag FLAG]    calmjs subcmd1: error: unrecognized arguments: --flagThis means that ``--flag`` is unrecognized by the second subcommand(i.e. the ``calmjs subcmd1 subcmd2`` command) as that was placed after``subcmd2``, but the subparser for ``subcmd1`` flagged that as an error.Unfortunately there are a number of issues in the ``argparse`` modulethat makes it difficult to fully resolve this problem, so for the meantime please ensure the flag is provided at the correct subcommand level(i.e.  in this case, ``calmjs subcmd1 --flag item subcmd2``), otherwiseconsult the help at the correct level by appending ``-h`` to each of thevalid subcommands.Module registry not locating files from namespace packages~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~There are a number of edge cases associated with namespace packages inPython, especially if they are provided on the system through differentmethods (i.e. mix of zipped eggs, wheels and development packages).While workarounds for handling of namespace modules for the givenpackages are provided, there are limitations in place.  One such causeis due to complexity in dealing with zipped eggs; if this is an issue,please ensure that the affected package has ``zip_safe`` declared asfalse, or alternatively generate a Python wheel then install that wheel,if the target Python environment has that as the standard installationformat.UserWarning: Unknown distribution option: 'package_json'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~This also applies to other relevant options, as it is caused by theexecution of ``setup.py`` without |calmjs| being available to|setuptools|, such that the handling method for these keywords remainundefined.  This can be corrected by providing |calmjs| as part of the``setup_requires`` section.  Further information on this may be found inthe `using package_json`_ section of this document.Contribute----------- Issue Tracker: https://github.com/calmjs/calmjs/issues- Source Code: https://github.com/calmjs/calmjsLegal-----The Calmjs project is copyright (c) 2016 Auckland BioengineeringInstitute, University of Auckland.  |calmjs| is licensed under the termsof the GPLv2 or later.Changelog=========3.4.4 (2023-03-07)------------------- Upgrading to ``setuptools-65.6.0`` and beyond will result in a new  version of ``distutils`` that &quot;fixed&quot; how logging works, but now the  hooks and expected workarounds no longer work.  Given that the  deprecation of ``distutils`` is in the works, no fixes will be done  until ``setuptools`` fully replaces it beyond the release of Python  3.12, as the author no longer trust Python to provide a stable  platform to develop software on.  Thus, any future &quot;fixes&quot; will only  be provided on an even more reactive (rather than proactive) basis.  [  `#66 &lt;https://github.com/calmjs/calmjs/issues/66&gt;`_  ]3.4.3 (2023-03-02)------------------- This is a maintenance release for Python 3.11- The registration of subparser of the same name will now be blocked,  rather than cascade to result into a ``ArgumentError`` that cannot be  recovered from.  [  `#64 &lt;https://github.com/calmjs/calmjs/issues/64&gt;`_  ]3.4.2 (2021-10-09)------------------- This is a maintenance release for Python 3.10; no substantial changes  were made.- Provided a check for disabling integration tests using the  ``CALMJS_SKIP_INTEGRATION`` environment variable, when set to a non-  empty string, the integration tests found in ``test_dist`` will be  skipped.  [  `#60 &lt;https://github.com/calmjs/calmjs/issues/60&gt;`_  ]3.4.1 (2019-05-23)------------------- If a toolchain execution raised the abort or cancel exception, there  will now be an appropriate debug log entry if debug mode is enabled.- Avoid breaking an existing manner of assignment of advice_packages in  related projects - ensure that a None value that was provided be  treated as an empty list. [  `#57 &lt;https://github.com/calmjs/calmjs/issues/57&gt;`_  ]3.4.0 (2019-05-22)------------------- Clean up a failing test case on Windows due to failure to use normcase  to normalize the path for comparison between test result and expected  answers.  [  `#53 &lt;https://github.com/calmjs/calmjs/issues/53&gt;`_  `#54 &lt;https://github.com/calmjs/calmjs/issues/54&gt;`_  ]- Provide a means to enable/disable the invocation of the post_mortem  debugger at the class level, such that this feature is not forcibly  enabled for all subclasses of Runtime.  [  `#55 &lt;https://github.com/calmjs/calmjs/issues/55&gt;`_  ]- Provide a registry for packages to specify which requirement (package)  to acquire toolchain advice from to apply by default for the relevant  toolchains.  This also necessitated some changes to where the optional  advices are applied, from the previous location applied as a setup  level advice applied by the standard toolchain runtime, to the default  sequence within the default toolchain itself.  [  `#56 &lt;https://github.com/calmjs/calmjs/issues/56&gt;`_  ]  - As a consequence of this feature, any setup advice that trigger a    toolchain abort or cancel will not leave the cleanup advices not    handled.  - This feature is implemented in a manner that allow manual invocation    of a toolchain with a list of manually provided advice_package be    able to always override the default specified ones.3.3.1 (2018-08-20)------------------- Correct the implementation of the helper function ``which`` such that  path arguments to valid executables are accepted and returned.  [  `#52 &lt;https://github.com/calmjs/calmjs/issues/52&gt;`_  ]3.3.0 (2018-07-23)------------------- Implement the features required to simplify the process of exposing  auxiliary resource files provided by Python packages to the Node.js  build tools. [  `#46 &lt;https://github.com/calmjs/calmjs/issues/46&gt;`_  `#48 &lt;https://github.com/calmjs/calmjs/issues/48&gt;`_  `#50 &lt;https://github.com/calmjs/calmjs/issues/50&gt;`_  ]  - Provide a standardised base child module registry and some helper    functions for their usage.  - Provide a loader module registry with a restrictive naming scheme    that directly references a single parent module registry.  - This also necessitated exposing the mapper of the parent registry    in a way that is reusable for other filename extensions, so that    the default mapper will also accept the globber and the filename    extension arguments.  - Refactor a number of registry classes so that they may be more    easily extended.  - The self-referential property of the root registry is now properly    implemented.- For Node.js packages that didn't have a ``main`` or ``browser``  section defined in their ``package.json``, make use of the default  entry file ``index.js`` if it exists.  [  `#49 &lt;https://github.com/calmjs/calmjs/issues/49&gt;`_  ]3.2.1 (2018-05-16)------------------- Pack related helpers for specific sets of package metadata files into  functions that return them.  Naturally existing ones are provided,  with the keys/filenames parameterized for reuse by dependants. [  `#43 &lt;https://github.com/calmjs/calmjs/issues/43&gt;`_  ]- Use the ``ast`` module for parsing the es5 String Node value instead  of the unicode-escape method as it encompasses more cases, including  the line continuation escape sequence which can show up. [  `#44 &lt;https://github.com/calmjs/calmjs/issues/44&gt;`_  ]3.1.0 (2018-04-30)------------------- Fix the modgen function in calmjs.indexer by actually not using the  marked as deprecated indexer functions by default, but instead use the  ``pkg_resources`` version as originally intended. [  `#30 &lt;https://github.com/calmjs/calmjs/issues/30&gt;`_  `#33 &lt;https://github.com/calmjs/calmjs/issues/33&gt;`_  ]- Ensure lookups on package names that have been normalized internally  by pkg_resources can still be resolved by their original name. [  `#31 &lt;https://github.com/calmjs/calmjs/issues/31&gt;`_  ]- Correctly return an unsuccessful exit code on various partial success  while running ``calmjs artifact build`` command and for the distutils  ``build_calmjs_artifacts`` command. [  `#27 &lt;https://github.com/calmjs/calmjs/issues/27&gt;`_  `#38 &lt;https://github.com/calmjs/calmjs/issues/38&gt;`_  ]- Correctly locate the subparser(s) that were responsible for whatever  arguments they cannot recognize; includes cleaning up the interactions  between the runtime and argparser classes and Python 3.7 compatibility  fixes. [  `#41 &lt;https://github.com/calmjs/calmjs/issues/41&gt;`_  ]- Fix handling of working directory flag as the validation should be  done in the beginning rather than later.  Also clean up various  logging/error messages surrounding that, plus a fix to toolchain test  case isolation.  Note that downstream packages that did not set up the  export target as an absolute part will result in a warning. [  `#42 &lt;https://github.com/calmjs/calmjs/issues/42&gt;`_  ]3.0.0 (2018-01-10)------------------- The ``yarn`` subcommand is now provided as an alternative to ``npm``.- Also decreased the log verbosity during the bootstrap runtime stage,  so that for systems that don't have the required binaries available,  the default ``calmjs`` command won't show those pile of warnings for  that (increasing verbosity with ``-v`` will restore those warnings).- Some confusing internal (but public) identifiers which are used in the  Toolchain and Spec system have been renamed to better reflect their  intended use and purpose.  Deprecation code is applied to aid  transition, and these will be removed in 4.0.0.  - For ``Spec``:    - ``*_source_map`` -&gt; ``*_sourcepath`` (except for the key that really      amplified the confusion which was ``generate_source_map``)    - ``*_targets`` -&gt; ``*_targetpaths`` (to be consistent with paths on      the filesystem).  - On the ``Toolchain``, for the similar reasons as above:    - ``sourcemap_suffix`` -&gt; ``sourcepath_suffix``    - ``target_suffix`` -&gt; ``targetpath_suffix``- Changed the order of binary resolution for Driver instances with  configured NODE_PATH and current working directory to align with how  Node.js inject them internally (in ``module.paths``, current working  directory has higher order of precedence over NODE_PATH), for the  method ``BaseDriver.find_node_modules_basedir``.- Framework for predefined artifact generation for packages through the  ``calmjs.artifacts`` registry.- Also split off the directory resolution from the above method to  ``BaseDriver.which_with_node_modules``.- Deprecated the existing toolchain.transpiler function as a standard  callable.  The new version must be an instance of ``BaseUnparser``  provided by the ``calmjs.parse`` package.  The NullToolchain will  retain the usage of the legacy transpiler.- Generation of the full transpile targetpaths will be normalized.  Note  that targetpath is still toolchain specific.- Removed most of the ``vlqsm`` module as the functionality is now  provided by ``calmjs.parse.vlq`` and ``calmjs.parse.sourcemap``.  Only  the legacy ``SourceWriter`` class remain, which is deprecated.- Provide generic first class support for loader plugins, such that  downstream packages should no longer need to explicitly declare  ``extras_calmjs`` to specify the location of loaders for all the  different toolchains (which inevitably collide and cause conflicts).  Toolchains downstream will need to implement support for this.- Artifact production support, including integration with setuptools.2.1.0 (2016-11-29)------------------- Namespace packages that have a module explicitly provided should still  be able to be looked up if a valid entry point is provided; naturally  if the module isn't declared correctly then the behavior remains  unchanged (github issue #5)- Name field in ``package.json`` should contain project names standard  to Node.js, i.e. if extras are specified, it should be stripped.  This  is done so that that ``npm`` will not choke on it with a warning and  die. (github issue #4)2.0.0 (2016-11-16)------------------- Expose the indexer module functions mapper and modgen as public.- Completely refactored the Toolchain class to have much more consistent  method naming convention and argument lists.- The compile method now reads from an instance specific list of methods  which allow very customizable compilation steps.- Specific ways for a toolchain to skip specific names based.- Fixed copying of bundle sources to targets nested in subdirectories.- The ``Spec`` callback system is now renamed to advice system and more  comprehensively implemented; every step within the toolchain will  execute advices before and after for each respective step that have  been registered under the matching identifiers.  The identifiers for  advices are are formalized as constants that can be imported from the  ``calmjs.toolchain`` module.- The advice system has dedicated exceptions which can be raised to  signal an abort or cleanly stop a run.- A couple spec keys were formalized, which are BUILD_DIR and  CONFIG_JS_FILES, reserved for the build directory and marking out  configuration JavaScript files.- On a successful toolchain call, all advices registered to the spec  under the key ``calmjs.toolchain.SUCCESS`` will now be invoked.- Dedicated runtime provided for ``Toolchain`` subclasses, joining the  ranks of a few other ``BaseDriver`` subclasses.  This is implemented  as ``calmjs.runtime.ToolchainRuntime``.- ``calmjs.runtime.Runtime`` can be subclassed and nested as it will now  nest all ``BaseRuntime``.  Also the ``init`` method is removed, just  use ``__init__`` and standard subclassing ``super`` usage rules.- The default ``ArgumentParser`` instance for every ``Runtime`` will no  longer be created until accessed, as it is now a property.- Provide a way for packages to declare the primary module registry or  registries it declared packages for through a new setup keyword  ``calmjs_module_registry``, if required and desired.- The default set of module registry names have been changed.  Registry  ``calmjs.pythonic`` is renamed to ``calmjs.py.module``; the related  testing related registry is renamed to include the full name of its  implied target.- Reserved a small set of core (already defined) registries for the  calmjs framework, which is formally defined and enforce by the  registry itself.- Corrected interactive-mode detection.- Helpers for source map generation for simple transpilation.1.0.3 (2016-09-07)------------------- Fixed the issue with bad environmental variables for subprocess.Popen  for Windows under Python 2.7.- Other minor testing fixes on CI platforms.1.0.2 (2016-09-04)------------------- Fixed invocation of binaries on the Windows platform.- Corrected some minor wording.1.0.0 (2016-09-02)------------------- Initial release of the ``calmjs`` framework foundation.- A cli runtime entry point is provided, named ``calmjs``.- Provide core integration with ``npm`` and generation of  ``package.json`` through the ``setuptools`` framework; this is  accessible as a ``setuptool`` command or through ``calmjs`` runtime.- Provide a registry framework for use within ``calmjs``.- Provide core registries for registering packages for use by ``calmjs``  through the predefined ``setuptools`` entry points and groups.- Provide a cli tool driver framework for interacting with ``node`` and  other Node.js based or other command line tools.- Provide the base toolchain framework, built on top of the tool driver  framework.- Provide modules for doing integration testing for modules that build  on top of the ``calmjs`` framework.</longdescription>
</pkgmetadata>