<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># content size limit[![CircleCI](https://circleci.com/gh/steinnes/content-size-limit-asgi.svg?style=svg)](https://circleci.com/gh/steinnes/content-size-limit-asgi)This is a middleware for ASGI which intercepts the receive() method to raisean exception when the read bytes exceed the given limit.## Example```pythonimport uvicornfrom starlette.applications import Starlettefrom starlette.responses import PlainTextResponsefrom content_size_limit_asgi import ContentSizeLimitMiddlewareapp = Starlette()@app.route(&quot;/&quot;, methods=[&quot;POST&quot;])async def index(request):    body = await request.body()    return PlainTextResponse(f&quot;body: {body.decode('utf-8')}&quot;)app.add_middleware(ContentSizeLimitMiddleware, max_content_size=512)if __name__ == &quot;__main__&quot;:    uvicorn.run(app, host=&quot;127.0.0.1&quot;, port=6001, log_level='debug')```To test the app:```$ curl --limit-rate 5k -q -v http://localhost:6001/ -d `printf 'A%.0s' {1..99999}`*   Trying 127.0.0.1...* TCP_NODELAY set* Connected to localhost (127.0.0.1) port 6001 (#0)&gt; POST / HTTP/1.1&gt; Host: localhost:6001&gt; User-Agent: curl/7.54.0&gt; Accept: */*&gt; Content-Length: 99999&gt; Content-Type: application/x-www-form-urlencoded&gt; Expect: 100-continue&gt;&lt; HTTP/1.1 100 Continue&lt; HTTP/1.1 500 Internal Server Error&lt; date: Wed, 12 Jun 2019 14:41:28 GMT&lt; server: uvicorn&lt; content-length: 21&lt; content-type: text/plain; charset=utf-8* HTTP error before end of send, stop sending&lt;* Closing connection 0Internal Server Error```The app console log should read:```$ PYTHONPATH=. python tapp.pyINFO: Started server process [48160]INFO: Waiting for application startup.DEBUG: None - ASGI [1] StartedWARNING 2019-06-12 14:42:18,003 content_size_limit.middleware: ASGI scope of type lifespan is not supported yetWARNING: ASGI scope of type lifespan is not supported yetDEBUG: None - ASGI [1] Sent {'type': 'lifespan.startup'}DEBUG: None - ASGI [1] Received {'type': 'lifespan.startup.complete'}INFO: Uvicorn running on http://127.0.0.1:6001 (Press CTRL+C to quit)DEBUG: ('127.0.0.1', 52103) - ConnectedDEBUG: ('127.0.0.1', 52103) - ASGI [2] StartedDEBUG: ('127.0.0.1', 52103) - ASGI [2] Sent {'type': 'http.request', 'body': '&lt;16384 bytes&gt;', 'more_body': True}DEBUG: ('127.0.0.1', 52103) - ASGI [2] Received {'type': 'http.response.start', 'status': 500, 'headers': '&lt;...&gt;'}INFO: ('127.0.0.1', 52103) - &quot;POST / HTTP/1.1&quot; 500DEBUG: ('127.0.0.1', 52103) - ASGI [2] Received {'type': 'http.response.body', 'body': '&lt;21 bytes&gt;'}DEBUG: ('127.0.0.1', 52103) - ASGI [2] Raised exceptionERROR: Exception in ASGI applicationTraceback (most recent call last):  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/uvicorn/protocols/http/httptools_impl.py&quot;, line 368, in run_asgi    result = await app(self.scope, self.receive, self.send)  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/uvicorn/middleware/message_logger.py&quot;, line 58, in __call__    raise exc from None  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/uvicorn/middleware/message_logger.py&quot;, line 54, in __call__    await self.app(scope, inner_receive, inner_send)  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/applications.py&quot;, line 133, in __call__    await self.error_middleware(scope, receive, send)  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/middleware/errors.py&quot;, line 122, in __call__    raise exc from None  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/middleware/errors.py&quot;, line 100, in __call__    await self.app(scope, receive, _send)  File &quot;/Users/ses/w/content-size-limit-asgi/content_size_limit/middleware.py&quot;, line 48, in __call__    await self.app(scope, wrapper, send)  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/exceptions.py&quot;, line 73, in __call__    raise exc from None  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/exceptions.py&quot;, line 62, in __call__    await self.app(scope, receive, sender)  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/routing.py&quot;, line 585, in __call__    await route(scope, receive, send)  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/routing.py&quot;, line 207, in __call__    await self.app(scope, receive, send)  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/routing.py&quot;, line 40, in app    response = await func(request)  File &quot;tapp.py&quot;, line 13, in index    body = await request.body()  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/requests.py&quot;, line 167, in body    async for chunk in self.stream():  File &quot;/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/requests.py&quot;, line 152, in stream    message = await self._receive()  File &quot;/Users/ses/w/content-size-limit-asgi/content_size_limit/middleware.py&quot;, line 36, in inner    f&quot;Maximum content size limit ({self.max_content_size}) exceeded ({received} bytes read)&quot;content_size_limit.errors.ContentSizeExceeded: Maximum content size limit (512) exceeded (16384 bytes read)DEBUG: ('127.0.0.1', 52103) - Disconnected```## Why not just raise in the route / view functon itself?Depending on the ASGI server/framework used, you might not have access tothe raw stream to stop reading immediately once the maximum content sizehas been exceeded.Take this Starlette view for example:```python@app.route(&quot;/documents/upload&quot;, methods=[&quot;POST&quot;])def upload_document(request):    data = await request.body()    if len(data) &gt; Config.MAX_FILE_SIZE:        return api_400(            f&quot;This file exceeds the maximum file size we support at this time ({Config.MAX_FILE_SIZE})&quot;,            code=MAX_FILE_SIZE_EXCEEDED,        )    ...```If the maximum file size is 5MB, and the uploaded file was 50MB, then thisimplementation reads the entire 50MB into memory before rejecting therequest.</longdescription>
</pkgmetadata>