<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![build](https://github.com/plasticuproject/cleverbotfree/actions/workflows/tests.yml/badge.svg)](https://github.com/plasticuproject/cleverbotfree/actions/workflows/tests.yml)[![Python 3.8](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/release/python-380/)[![GPLv3 license](https://img.shields.io/badge/License-GPLv3-blue.svg)](http://perso.crans.org/besson/LICENSE.html)[![PyPI version](https://badge.fury.io/py/cleverbotfree.svg)](https://badge.fury.io/py/cleverbotfree)[![Downloads](https://pepy.tech/badge/cleverbotfree)](https://pepy.tech/project/cleverbotfree)[![CodeQL](https://github.com/plasticuproject/cleverbotfree/actions/workflows/codeql.yml/badge.svg)](https://github.com/plasticuproject/cleverbotfree/actions/workflows/codeql.yml)[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=plasticuproject_cleverbotfree&amp;metric=alert_status)](https://sonarcloud.io/dashboard?id=plasticuproject_cleverbotfree)[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=plasticuproject_cleverbotfree&amp;metric=security_rating)](https://sonarcloud.io/dashboard?id=plasticuproject_cleverbotfree)# cleverbotfreeCleverbot.com used to have a free API for their chatbot application. They have &lt;br /&gt;removed their free API in place of a tiered subscription API service. &lt;br /&gt;cleverbotfree is a free alternative to that API that uses a headless Firefox &lt;br /&gt;browser to communicate with their chatbot application. You can use this module &lt;br /&gt;to create applications/bots that send and receive messages to the Cleverbot &lt;br /&gt;chatbot application. &lt;br /&gt;## Installation### Requirments- node &gt;= 14.16.1- Python &gt;= 3.8.0- python3-pip &gt;= 21.1.1 Once requirments are met, you can install this library through pip. &lt;br /&gt;```pip install cleverbotfree```### DriversThis library uses the Playwright library to interface the Cleverbot website &lt;br /&gt;with a headless Firefox browser. &lt;br /&gt;To download the Playwright Firefox browser binary simply run this command after &lt;br /&gt;installing cleverbotfree: &lt;br /&gt;```playwright install firefox```## Usage&lt;b&gt;Examples&lt;/b&gt;Example of a simple CLI script that creates a persistent chat session until closed. &lt;br /&gt;```pythonimport asyncioimport cleverbotfreedef chat():    &quot;&quot;&quot;Example code using cleverbotfree sync api.&quot;&quot;&quot;    with cleverbotfree.sync_playwright() as p_w:        c_b = cleverbotfree.Cleverbot(p_w)        while True:            user_input = input(&quot;User: &quot;)            if user_input == 'quit':                break            bot = c_b.single_exchange(user_input)            print('Cleverbot:', bot)        c_b.close()chat()async def async_chat():    &quot;&quot;&quot;Example code using cleverbotfree async api.&quot;&quot;&quot;    async with cleverbotfree.async_playwright() as p_w:        c_b = await cleverbotfree.CleverbotAsync(p_w)        while True:            user_input = input(&quot;User: &quot;)            if user_input == 'quit':                break            bot = await c_b.single_exchange(user_input)            print('Cleverbot:', bot)        await c_b.close()asyncio.run(async_chat())```Example of a simple CLI script using the class decorator. &lt;br /&gt;```pythonimport asynciofrom cleverbotfree import CleverbotAsyncfrom cleverbotfree import Cleverbot@Cleverbot.connectdef chat(bot, user_prompt, bot_prompt):    &quot;&quot;&quot;Example code using cleverbotfree sync api with decorator.&quot;&quot;&quot;    while True:        user_input = input(user_prompt)        if user_input == &quot;quit&quot;:            break        reply = bot.single_exchange(user_input)        print(bot_prompt, reply)    bot.close()chat(&quot;User: &quot;, &quot;Cleverbot:&quot;)@CleverbotAsync.connectasync def async_chat(bot, user_prompt, bot_prompt):    &quot;&quot;&quot;Example code using cleverbotfree async api with decorator.&quot;&quot;&quot;    while True:        user_input = input(user_prompt)        if user_input == &quot;quit&quot;:            break        reply = await bot.single_exchange(user_input)        print(bot_prompt, reply)    await bot.close()asyncio.run(async_chat(&quot;User: &quot;, &quot;Cleverbot:&quot;))```</longdescription>
</pkgmetadata>