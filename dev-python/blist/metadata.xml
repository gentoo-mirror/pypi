<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>blist: a list-like type with better performance===============================================The ``blist`` is a drop-in replacement for the Python list that providesbetter performance when modifying large lists.  The blist package alsoprovides ``sortedlist``, ``sortedset``, ``weaksortedlist``,``weaksortedset``, ``sorteddict``, and ``btuple`` types.Full documentation is at the link below:http://stutzbachenterprises.com/blist-doc/Python's built-in list is a dynamically-sized array; to insert orremove an item from the beginning or middle of the list, it has tomove most of the list in memory, i.e., O(n) operations.  The blistuses a flexible, hybrid array/tree structure and only needs to move asmall portion of items in memory, specifically using O(log n)operations.For small lists, the blist and the built-in list have virtuallyidentical performance.To use the blist, you simply change code like this:&gt;&gt;&gt; items = [5, 6, 2]&gt;&gt;&gt; more_items = function_that_returns_a_list()to:&gt;&gt;&gt; from blist import blist&gt;&gt;&gt; items = blist([5, 6, 2])&gt;&gt;&gt; more_items = blist(function_that_returns_a_list())Here are some of the use cases where the blist asymptoticallyoutperforms the built-in list:========================================== ================  =========Use Case                                   blist             list========================================== ================  =========Insertion into or removal from a list      O(log n)          O(n)Taking slices of lists                     O(log n)          O(n)Making shallow copies of lists             O(1)              O(n)Changing slices of lists                   O(log n + log k)  O(n+k)Multiplying a list to make a sparse list   O(log k)          O(kn)Maintain a sorted lists with bisect.insort O(log**2 n)       O(n)========================================== ================  =========So you can see the performance of the blist in more detail, severalperformance graphs available at the following link:http://stutzbachenterprises.com/blist/Example usage:&gt;&gt;&gt; from blist import *&gt;&gt;&gt; x = blist([0])             # x is a blist with one element&gt;&gt;&gt; x *= 2**29                 # x is a blist with &gt; 500 million elements&gt;&gt;&gt; x.append(5)                # append to x&gt;&gt;&gt; y = x[4:-234234]           # Take a 500 million element slice from x&gt;&gt;&gt; del x[3:1024]              # Delete a few thousand elements from xOther data structures---------------------The blist package provides other data structures based on the blist:- sortedlist- sortedset- weaksortedlist- weaksortedset- sorteddict- btupleThese additional data structures are only available in Python 2.6 orhigher, as they make use of Abstract Base Classes.The sortedlist is a list that's always sorted.  It's iterable andindexable like a Python list, but to modify a sortedlist the samemethods you would use on a Python set (add, discard, or remove).&gt;&gt;&gt; from blist import sortedlist&gt;&gt;&gt; my_list = sortedlist([3,7,2,1])&gt;&gt;&gt; my_listsortedlist([1, 2, 3, 7])&gt;&gt;&gt; my_list.add(5)&gt;&gt;&gt; my_list[3]5&gt;&gt;&gt;The sortedlist constructor takes an optional &quot;key&quot; argument, which maybe used to change the sort order just like the sorted() function.&gt;&gt;&gt; from blist import sortedlist&gt;&gt;&gt; my_list = sortedlist([3,7,2,1], key=lambda i: -i)sortedlist([7, 3, 2, 1]&gt;&gt;&gt;The sortedset is a set that's always sorted.  It's iterable andindexable like a Python list, but modified like a set.  Essentially,it's just like a sortedlist except that duplicates are ignored.&gt;&gt;&gt; from blist import sortedset&gt;&gt;&gt; my_set = sortedset([3,7,2,2])sortedset([2, 3, 7]&gt;&gt;&gt;The weaksortedlist and weaksortedset are weakref variations of thesortedlist and sortedset.The sorteddict works just like a regular dict, except the keys arealways sorted.  The sorteddict should not be confused with Python2.7's OrderedDict type, which remembers the insertion order of thekeys.&gt;&gt;&gt; from blist import sorteddict&gt;&gt;&gt; my_dict = sorteddict({1: 5, 6: 8, -5: 9})&gt;&gt;&gt; my_dict.keys()[-5, 1, 6]&gt;&gt;&gt;The btuple is a drop-in replacement for the built-in tuple.  Comparedto the built-in tuple, the btuple offers the following advantages:- Constructing a btuple from a blist takes O(1) time.- Taking a slice of a btuple takes O(n) time, where n is the size of  the original tuple.  The size of the slice does not matter.&gt;&gt;&gt; from blist import blist, btuple&gt;&gt;&gt; x = blist([0])             # x is a blist with one element&gt;&gt;&gt; x *= 2**29                 # x is a blist with &gt; 500 million elements&gt;&gt;&gt; y = btuple(x)              # y is a btuple with &gt; 500 million elementsInstallation instructions-------------------------Python 2.5 or higher is required.  If building from the sourcedistribution, the Python header files are also required.  In eithercase, just run:       python setup.py installIf you're running Linux and see a bunch of compilation errors fromGCC, you probably do not have the Python header files installed.They're usually located in a package called something like&quot;python2.6-dev&quot;.The blist package will be installed in the 'site-packages' directory ofyour Python installation.  (Unless directed elsewhere; see the&quot;Installing Python Modules&quot; section of the Python manuals for detailson customizing installation locations, etc.).If you downloaded the source distribution and wish to run theassociated test suite, you can also run:        python setup.py testwhich will verify the correct installation and functioning of thepackage.  The tests require Python 2.6 or higher.Feedback--------We're eager to hear about your experiences with the blist.  You canemail me at daniel@stutzbachenterprises.com.  Alternately, bug reportsand feature requests may be reported on our bug tracker at:http://github.com/DanielStutzbach/blist/issuesHow we test-----------In addition to the tests include in the source distribution, weperform the following to add extra rigor to our testing process:    1. We use a &quot;fuzzer&quot;: a program that randomly generates list       operations, performs them using both the blist and the built-in       list, and compares the results.    2. We use a modified Python interpreter where we have replaced the       array-based built-in list with the blist.  Then, we run all of       the regular Python unit tests.</longdescription>
</pkgmetadata>