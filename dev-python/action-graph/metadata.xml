<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ActionGraphActionGraph is a symbolic AI agent for generating action plans based on preconditions and effects. This is loosely based on STRIPS approach (https://en.wikipedia.org/wiki/Stanford_Research_Institute_Problem_Solver). State variables are modeled as nodes; the actions represent edges/transitions from one state to another. Dijikstra's shortest path algorithm (A* but without the heuristic cost estimate) is used to generate a feasible, lowest cost plan.Source: https://github.com/bharathra/ACTION_GRAPH## Usage:```from action_graph.agent import Agentfrom action_graph.action import Actionclass Drive(Action):    effects = {&quot;driving&quot;: True}    preconditions = {&quot;has_drivers_license&quot;: True, &quot;tank_has_gas&quot;: True}class FillGas(Action):    effects = {&quot;tank_has_gas&quot;: True}    preconditions = {&quot;has_car&quot;: True}class RentCar(Action):    effects = {&quot;has_car&quot;: True}    cost = 100  # dollarsclass BuyCar(Action):    effects = {&quot;has_car&quot;: True}    preconditions = {}    cost = 10_000  # dollarsif __name__ == &quot;__main__&quot;:    world_state = {&quot;has_car&quot;: False, &quot;has_drivers_license&quot;: True}    goal_state = {&quot;driving&quot;: True}    ai = Agent()    actions = [a(ai) for a in Action.__subclasses__()]    ai.load_actions(actions)    print(&quot;Initial State:&quot;, world_state)    ai.update_state(world_state)    print(&quot;Goal State:   &quot;, goal_state)    plan = ai.get_plan(goal_state)    # ai.execute_plan(plan)```</longdescription>
</pkgmetadata>