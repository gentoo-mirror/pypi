<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AtlasQAtlasQ allows the usage of [AtlasSearch](https://www.mongodb.com/docs/atlas/atlas-search/) keeping the [MongoEngine](https://github.com/MongoEngine/mongoengine) syntax.## StructureThe package tries to follow the MongoEngine structure;the major differences reside in the `transform.py` and `queryset.py` files. ### TransformLike in MongoEngine, a step in the pipeline is the creation of a query from a `Q` object: we have to find a correspondence between the MongoEngine common syntax and what AtlasSearch allows.For doing this, we had to find some compromises.Not every keyword is supported at the moment: if you have an actual use case that you would like to support,please be free to open an issue or a PR at any moment.### QuerySetThere are probably a thousand of better implementation, if you actually knew MongoEngine and above all [PyMongo](https://pymongo.readthedocs.io/en/stable/).Unfortunately, our knowledge is limited, so here we go. If you find a solution that works better, again, feel free to open an issue or a PR.The main idea, is that the `filter` should work like an `aggregation`. For doing so, and with keeping the compatibility on how MongoEngine works (i.e. the filter should return a queryset of `Document`) we had to do some work.  Calling `.aggregate` instead has to work as MongoEngine expect, meaning a list of dictionaries. ## UsageNow the most important part: how do you use this package?```python3from mongoengine import Document, fieldsfrom atlasq import AtlasManager, AtlasQ, AtlasQuerySetindex_name = str(&quot;my_index&quot;)class MyDocument(Document):    name = fields.StringField(required=True)    surname = fields.StringField(required=True)    atlas = AtlasManager(index_name)obj = MyDocument.objects.create(name=&quot;value&quot;, surname=&quot;value2&quot;)qs = MyDocument.atlas.filter(name=&quot;value&quot;)assert isinstance(qs, AtlasQuerySet)obj_from_atlas = qs.first()assert obj == obj_from_atlasobj2_from_atlas = MyDocument.atlas.get(AtlasQ(name=&quot;value&quot;) &amp; AtlasQ(surname=&quot;value2&quot;))assert obj == obj2_from_atlasobj3_from_atlas = MyDocument.atlas.get(AtlasQ(wrong_field=&quot;value&quot;))assert obj3_from_atlas is None```##  Extended Features### ValidationWe also decided to have, optionally, a validation of the index.Two things are checked:- The index actually exists (If you query a non-existing index, Atlas as default behaviour will not raise any error).- The fields that you are querying are actually indexed(If you query a field that is not indexed, Atlas as default behaviour will not raise any error, and will return an empty list).To make these check, you need to call the function `ensure_index` on the queryset.```python3from mongoengine import Document, fieldsfrom atlasq import AtlasManager, AtlasQindex_name = str(&quot;my_index&quot;)class MyDocument(Document):    name = fields.StringField(required=True)    surname = fields.StringField(required=True)    atlas = AtlasManager(index_name)result = MyDocument.atlas.ensure_index(&quot;user&quot;, &quot;pwd&quot;, &quot;group&quot;, &quot;cluster&quot;)assert result is Trueobj1_from_atlas = MyDocument.atlas.get(AtlasQ(name=&quot;value&quot;)) obj2_from_atlas = MyDocument.atlas.get(AtlasQ(wrong_field=&quot;value&quot;)) # raises AtlasIndexFieldError```### EmbeddedDocumentsEmbedded documents are queried in two different ways, depending on how you created your Search Index.Remember to ensure the index so that AtlasQ can know how your index is definedIf you used the [embeddedDocuments](https://www.mongodb.com/docs/atlas/atlas-search/define-field-mappings/#std-label-bson-data-types-embedded-documents) type, AtlasQ will use the [embeddedDocument](https://www.mongodb.com/docs/atlas/atlas-search/embedded-document/) query syntax.Otherwise, if you used the [document](https://www.mongodb.com/docs/atlas/atlas-search/define-field-mappings/#document) type, or you did not ensure the index, a normal `text` search with the `.` syntax will be used.### Upload indexIt is possible to upload directly the Search index using AtlasQ, calling the function `upload_index` on the queryset. Syntax checks on the index itself are performed.If the `_id` is not present but `pk` or `id` was specified, it will be automatically added, allowing valid text query on theprimary key.```python3from mongoengine import Document, fieldsfrom atlasq import AtlasManagerindex_name = str(&quot;my_index&quot;)index = {  &quot;analyzer&quot;: &quot;lucene.keyword&quot;,  &quot;mappings&quot;: {    &quot;dynamic&quot;: False,    &quot;fields&quot;: {      &quot;_id&quot;: {        &quot;type&quot;: &quot;objectId&quot;      },        &quot;name&quot;: {        &quot;type&quot;: &quot;string&quot;      },      &quot;surname&quot;: {        &quot;type&quot;: &quot;string&quot;      },    }  }}class MyDocument(Document):    name = fields.StringField(required=True)    surname = fields.StringField(required=True)    atlas = AtlasManager(index_name)result = MyDocument.atlas.ensure_index(&quot;user&quot;, &quot;pwd&quot;, &quot;group&quot;, &quot;cluster&quot;)assert result is FalseMyDocument.atlas.upload_index(index, &quot;user&quot;, &quot;pwd&quot;, &quot;group&quot;, &quot;cluster&quot;)result = MyDocument.atlas.ensure_index(&quot;user&quot;, &quot;pwd&quot;, &quot;group&quot;, &quot;cluster&quot;)assert result is True```### SortOn the [10th of July 2023](https://www.mongodb.com/docs/atlas/atlas-search/changelog/#10-july-2023-release), the `Sort` functionality was released for Atlas search.AtlasQ, from version 0.12.0, will support this feature inside the `order_by` function.To have the old behaviour of the order_by (useful if you want to sort _after_ aggregations and not after the search stage), you can set the kwarg `as_aggregation` as `True`.</longdescription>
</pkgmetadata>