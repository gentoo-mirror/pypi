<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>BeaconTools - Universal beacon scanning=======================================|PyPI Package| |Build Status| |Coverage Status| |Requirements Status|A Python library for working with various types of Bluetooth LE Beacons.Currently supported types are:* `Eddystone Beacons &lt;https://github.com/google/eddystone/&gt;`__* `iBeacons &lt;https://developer.apple.com/ibeacon/&gt;`__ (Apple and Cypress CYALKIT-E02)* `Estimote Beacons (Telemetry and Nearable) &lt;https://github.com/estimote/estimote-specs&gt;`__* Control-J Monitor (temp/humidity/light)* `COVID-19 Exposure Notifications &lt;https://www.apple.com/covid19/contacttracing&gt;`__The BeaconTools library has two main components:* a parser to extract information from raw binary beacon advertisements* a scanner which scans for Bluetoth LE advertisements using bluez and can be configured to look only for specific beacons or packet typesInstallation------------If you only want to use the **parser** install the library using pip and you're good to go:.. code:: bash    pip3 install beacontoolsIf you want to perfom beacon **scanning** there are a few more requirements.First of all, you need a supported OS: currently that's Linux with BlueZ, and FreeBSD.Second, you need raw socket access (via Linux capabilities, or by running as root).On a typical Linux installation, it would look like this:.. code:: bash    # install libbluetooth headers and libpcap2    sudo apt-get install python3-dev libbluetooth-dev libcap2-bin    # grant the python executable permission to access raw socket data    sudo setcap 'cap_net_raw,cap_net_admin+eip' &quot;$(readlink -f &quot;$(which python3)&quot;)&quot;    # install beacontools with scanning support    pip3 install beacontools[scan]Usage-----See the `examples &lt;https://github.com/citruz/beacontools/tree/master/examples&gt;`__ directory for more usage examples.Parser~~~~~~.. code:: python    from beacontools import parse_packet    tlm_packet = b&quot;\x02\x01\x06\x03\x03\xaa\xfe\x11\x16\xaa\xfe\x20\x00\x0b\x18\x13\x00\x00\x00&quot; \                 b&quot;\x14\x67\x00\x00\x2a\xc4\xe4&quot;    tlm_frame = parse_packet(tlm_packet)    print(&quot;Voltage: %d mV&quot; % tlm_frame.voltage)    print(&quot;Temperature: %d Â°C&quot; % tlm_frame.temperature)    print(&quot;Advertising count: %d&quot; % tlm_frame.advertising_count)    print(&quot;Seconds since boot: %d&quot; % tlm_frame.seconds_since_boot)Scanner~~~~~~~.. code:: python    import time    from beacontools import BeaconScanner, EddystoneTLMFrame, EddystoneFilter    def callback(bt_addr, rssi, packet, additional_info):        print(&quot;&lt;%s, %d&gt; %s %s&quot; % (bt_addr, rssi, packet, additional_info))    # scan for all TLM frames of beacons in the namespace &quot;12345678901234678901&quot;    scanner = BeaconScanner(callback,        # remove the following line to see packets from all beacons        device_filter=EddystoneFilter(namespace=&quot;12345678901234678901&quot;),        packet_filter=EddystoneTLMFrame    )    scanner.start()    time.sleep(10)    scanner.stop().. code:: python    import time    from beacontools import BeaconScanner, IBeaconFilter    def callback(bt_addr, rssi, packet, additional_info):        print(&quot;&lt;%s, %d&gt; %s %s&quot; % (bt_addr, rssi, packet, additional_info))    # scan for all iBeacon advertisements from beacons with the specified uuid     scanner = BeaconScanner(callback,         device_filter=IBeaconFilter(uuid=&quot;e5b9e3a6-27e2-4c36-a257-7698da5fc140&quot;)    )    scanner.start()    time.sleep(5)    scanner.stop()    # scan for all iBeacon advertisements regardless from which beacon    scanner = BeaconScanner(callback,        packet_filter=IBeaconAdvertisement    )    scanner.start()    time.sleep(5)    scanner.stop()Customizing Scanning Parameters~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Some Bluetooth dongle don't allow scanning in Randomized MAC mode. If you don't receive any scan results, try setting the scan mode to PUBLIC:.. code:: python    from beacontools import BeaconScanner, BluetoothAddressType    scanner = BeaconScanner(        callback,        scan_parameters={&quot;address_type&quot;: BluetoothAddressType.PUBLIC}    )For all available options see ``Monitor.set_scan_parameters``.Changelog---------Beacontools follows the `semantic versioning &lt;https://semver.org/&gt;`__ scheme.* 2.1.0    * Added support for extended BLE commands for devices using HCI &gt;= 5.0 (Linux only, thanks to `idaniel86 &lt;https://github.com/idaniel86&gt;`__)* 2.0.2    * Improved prefiltering of packets, fixes #48* 2.0.1    * Removed (unused) rfu field from the Eddystone UID packet, fixes #39* 2.0.0    * Dropped support for Python 2.7 and 3.4    * Added support for COVID-19 Exposure Notifications    * Added support for FreeBSD and fixed temperature parsing (thanks to `myfreeweb &lt;https://github.com/myfreeweb&gt;`__)    * Added support for Control-J Monitor beacons (thanks to `clydebarrow &lt;https://github.com/clydebarrow&gt;`__)    * Added support for Estimote Nearables (thanks to `ShaunPlummer &lt;https://github.com/ShaunPlummer&gt;`__)* 1.3.1    * Multiple fixes and internal refactorings, including support for Raspberry Pi 3B+ (huge thanks to `cereal &lt;https://github.com/cereal&gt;`__)    * Updated dependencies* 1.3.0    * Added support for Estimote Telemetry packets (see examples/parser_example.py)    * Relaxed parsing constraints for RFU and flags field    * Added temperature output in 8.8 fixed point decimal format for Eddystone TLM* 1.2.4    * Added support for Eddystone packets with Flags Data set to 0x1a (thanks to `AndreasTornes &lt;https://github.com/AndreasTornes&gt;`__)    * Updated dependencies* 1.2.3    * Fixed compatibility with construct &gt;=2.9.41* 1.2.2    * Moved import of bluez so that the library can be used in parsing-only mode, without having bluez installed.* 1.2.1    * Updated dependencies* 1.2.0    * Added support for Cypress iBeacons which transmit temp and humidity embedded in the minor value (thanks to `darkskiez &lt;https://github.com/darkskiez&gt;`__)    * Updated dependencies* 1.1.0    * Added support for Eddystone EID frames (thanks to `miek &lt;https://github.com/miek&gt;`__)    * Updated dependencies* 1.0.1    * Implemented a small tweak which reduces the CPU usage.* 1.0.0     * Implemented iBeacon support    * Added rssi to callback function.* 0.1.2     * Initial release.. |PyPI Package| image:: https://badge.fury.io/py/beacontools.svg  :target: https://pypi.python.org/pypi/beacontools/.. |Build Status| image:: https://travis-ci.org/citruz/beacontools.svg?branch=master    :target: https://travis-ci.org/citruz/beacontools.. |Coverage Status| image:: https://coveralls.io/repos/github/citruz/beacontools/badge.svg?branch=master  :target: https://coveralls.io/github/citruz/beacontools?branch=master.. |Requirements Status| image:: https://requires.io/github/citruz/beacontools/requirements.svg?branch=master  :target: https://requires.io/github/citruz/beacontools/requirements/?branch=master</longdescription>
</pkgmetadata>