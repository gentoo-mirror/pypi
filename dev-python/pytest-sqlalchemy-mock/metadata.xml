<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytest-sqlalchemy-mock  ðŸ‘‹[![PyPI version](https://badge.fury.io/py/pytest-sqlalchemy-mock.svg)](https://badge.fury.io/py/pytest-sqlalchemy-mock)[![codecov](https://codecov.io/gh/resulyrt93/pytest-sqlalchemy-mock/branch/dev/graph/badge.svg?token=RUQ4DN3CH9)](https://codecov.io/gh/resulyrt93/pytest-sqlalchemy-mock)[![CI](https://github.com/resulyrt93/pytest-sqlalchemy-mock/actions/workflows/tests.yaml/badge.svg?branch=dev)](https://github.com/resulyrt93/pytest-sqlalchemy-mock/actions/workflows/tests.yaml)[![Supported Python Version](https://img.shields.io/pypi/pyversions/pytest-sqlalchemy-mock)](https://github.com/resulyrt93/pytest-sqlalchemy-mock)&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;This plugin provides pytest fixtures to create an in-memory DB instance on tests and dump your raw test data.## Installation```pip install pytest-sqlalchemy-mock```## UsageLet's assume you have a SQLAlchemy declarative base and some models with it.**models.py**```pythonfrom sqlalchemy import Column, Integer, Stringfrom sqlalchemy.orm import declarative_baseBase = declarative_base()class User(Base):    __tablename__ = &quot;user&quot;    id = Column(Integer, primary_key=True)    name = Column(String)```Firstly SQLAlchemy base class which is used for declare models should be passed with `sqlalchemy_declarative_base` fixture in `conftest.py`**conftest.py**```python@pytest.fixture(scope=&quot;function&quot;)def sqlalchemy_declarative_base():    return Base```Then in test functions you can use `mocked_session` fixture to make query in mocked DB.**test_user_table.py**```pythondef test_mocked_session_user_table(mocked_session):    user_data = mocked_session.execute(&quot;SELECT * from user;&quot;).all()    assert user_data == []```Also, you can dump your mock data to DB before start testing via `sqlalchemy_mock_config` fixture like following.**conftest.py**```python@pytest.fixture(scope=&quot;function&quot;)def sqlalchemy_mock_config():    return [(&quot;user&quot;, [        {            &quot;id&quot;: 1,            &quot;name&quot;: &quot;Kevin&quot;        },        {            &quot;id&quot;: 2,            &quot;name&quot;: &quot;Dwight&quot;        }    ])]```**test_user_table.py**```pythondef test_mocked_session_user_class(mocked_session):    user = mocked_session.query(User).filter_by(id=2).first()    assert user.name == &quot;Dwight&quot;```## Upcoming Features* Mock with decorator for specific DB states for specific cases.* Support to load data from `.json` and `.csv`* Async SQLAlchemy support</longdescription>
</pkgmetadata>