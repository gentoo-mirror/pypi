<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Database access package for detech.aiThis is detech.ai's package to access Dynamodb &amp; Timestream programatically.# Imports```pythonimport detech_query_pkg###############    DynamoDB Package    ##############################from detech_query_pkg.dynamodb_pkg import dynamodb_queries as db_queriesfrom detech_query_pkg.dynamodb_pkg.utils import dynamodb_utils as db_utils#Start DynamoDB Clientdb_utils.create_dynamodb_client(aws_access_key_id=AWS_ACCESS_KEY_ID,                      aws_secret_access_key=AWS_SECRET_ACCESS_KEY, region_name=REGION_NAME)###############    Timestream Package    ##############################from detech_query_pkg.timestream_pkg import ts_queriesfrom detech_query_pkg.timestream_pkg.utils import ts_utilsfrom detech_query_pkg.timestream_pkg.models import metrics_modelfrom detech_query_pkg.timestream_pkg.models import metrics_creator_utils```# Initialize Client```pythondef create_dynamodb_client(aws_access_key_id,aws_secret_access_key, region_name)def create_timestream_write_client(aws_access_key_id, aws_secret_access_key)def create_timestream_query_client(aws_access_key_id, aws_secret_access_key)```# Functions## timestream_pkg (ts_queries.py)&lt;details&gt;  &lt;summary&gt;insert_metrics_from_metric_list&lt;/summary&gt;  ```python  def insert_metrics_from_metric_list(client, metric_list)  # Inserts metrics in batch to timestream  #metric_list must have the following fields  metric_list = [    {'org_id', 'region_name', 'namespace', 'component_id', 'period', 'agent', 'metric_alignment', 'unit', 'description' , 'metric_id', 'metric_name', 'value', 'timestamp'},    {'org_id', 'region_name', 'namespace', 'component_id', 'period', 'agent', 'metric_alignment', 'unit', 'description' , 'metric_id', 'metric_name', 'value', 'timestamp'},    ...  ]  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;query_metrics&lt;/summary&gt;  ```python  def query_metrics(client, sql_query)  # Performs an SQL query to timestream and transforms the output to a more desirable format  #Output  query_response = {    'metric_id': 'qgrdy1bXGeKSmAtW58CD',    'agent': 'AWS.CloudWatch',    'component_id': 'AWS/ApplicationELB.app/component',    'period': '60',    'unit': 'None',    'org_id': 'Organization',    'metric_alignment': 'Sum',    'namespace': 'AWS/ApplicationELB',    'description': 'The total number of concurrent TCP connections active from clients to the load balancer and from the load balancer to targets.',    'region_name': 'eu-west-1',    'value': '64.0',    'metric_name': 'ActiveConnectionCount',    'timestamp': '2020-10-12 14:28:00.000000000'  }  ```&lt;/details&gt;## timestream_pkg.utils (ts_utils.py)&lt;details&gt;  &lt;summary&gt;prepare_metric_records&lt;/summary&gt;  ```python  def prepare_metric_records(measure_name, measure_value, timestamp, dimensions)  #The dimensions that need to be passed must be in the following format  dimensions = [    {'Name':'org_id', 'Value': str(metric['org_id'])},    {'Name':'region_name', 'Value':str(metric['region_name'])},    {'Name':'namespace', 'Value':str(metric['namespace'])},    {'Name':'component_id', 'Value':str(metric['component_id'])},    {'Name':'period', 'Value': str(metric['period'])},    {'Name':'agent', 'Value':str(metric['agent'])},    {'Name':'metric_alignment', 'Value':str(metric['metric_alignment'])},    {'Name':'unit', 'Value':str(metric['unit'])},    {'Name': 'description', 'Value': str(metric['description'])},    {'Name': 'metric_id', 'Value':str(metric['metric_id'])}  ]  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;write_to_timestream&lt;/summary&gt;  ```python  def write_to_timestream(client, records, database_name, table_name)  # Inserts metrics to timestream after they are in the correct format  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;query_from_timestream&lt;/summary&gt;  ```python  def query_from_timestream(client, sql_query)  # Queries metrics from timestream with a given sql_query  ```&lt;/details&gt;## timestream_pkg.models (metric_creator_utils.py &amp; metrics_model.py)&lt;details&gt;  &lt;summary&gt;build_metric_model&lt;/summary&gt;  ```python  #from metric_creator_utils.py  def build_metric_model(metric_id, metric_name, org_id, component_id,    namespace, metric_alignment, agent, dimensions, region_name=None,    is_default=False, description=None, period=60,unit=None, samples=[])  #Queries metrics from timestream with a given sql_query  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;MetricModel&lt;/summary&gt;  ```python  #from metrics_model.py  class MetricModel(object):    def __init__(self,               id,               name,               org_id,               component_id,               namespace,               alignment,               region_name,               data_center_id,               agent,               dimension_name=None,               dimension_value=None,               is_active=False,               description=None,               unit=None)    def to_dict(self)  #Queries metrics from timestream with a given sql_query  ```&lt;/details&gt;## dynamodb_pkg&lt;details&gt;  &lt;summary&gt;insert_alert&lt;/summary&gt;  ```python  def insert_alert(alert_id, metric_id, org_id, app_id, team_id, assigned_to, start_time, end_time, alert_description, is_acknowledged, anomalies_dict, related_prev_anomalies,  service_graph, significance_score, dynamodb)  #Example  insert_alert(alert_id = &quot;256828&quot;, metric_id = 123, org_id = 'org_id', app_id = 'app_id', team_id = 'team_id', assigned_to = 'Jorge', \  start_time = '2020-09-03 12:00:00', end_time = '2020-09-03 12:20:00', alert_description = 'Spike in costs',\  is_acknowledged = 'True', anomalies_dict = {}, related_prev_anomalies = {},  service_graph = {}, significance_score = '34.3')  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;get_alert_item_by_key&lt;/summary&gt;  ```python  def get_alert_item_by_key(anom_id, dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;update_alert_with_related_anomalies&lt;/summary&gt;  ```python  def update_alert_with_related_anomalies(alert_id,start_time, corr_anoms_dict, related_prev_anomalies, dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;terminate_alert&lt;/summary&gt;  ```python  def terminate_alert(alert_id,start_time, end_timestamp, dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;create_metric&lt;/summary&gt;  ```python  def create_metric(metric_id, date_bucket, metric_name, provider, namespace,  agent, org_id, app_id, alignment, groupby, dimensions, data_points_list, dynamodb)  #Example  create_metric(    metric_id = &quot;test1&quot;, date_bucket = &quot;2020-10-02&quot;, metric_name = &quot;error_rate&quot;,    provider = &quot;aws&quot;, namespace = &quot;dynamodb&quot;, agent = &quot;CloudWatch&quot;, org_id = &quot;test&quot;,    app_id = &quot;app1&quot;, alignment = &quot;Sum&quot;,    dimensions = [{&quot;Name&quot;: &quot;TableName&quot;, &quot;Value&quot;: &quot;alerts.config&quot;}],    last = 1535530432, data_points_list = [      { 'val': 55, 'time' : 1535530430},      { 'val': 56, 'time': 1535530432}], dynamodb=dynamodb  )  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;batch_insert_metric_objects&lt;/summary&gt;  ```python  def batch_insert_metric_details_objects(list_of_metric_objects, dynamodb)  #Inserts list of metrics objects in batch into Dynamodb  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;batch_insert_metric_objects&lt;/summary&gt;  ```python  def batch_insert_metric_details_objects(list_of_metric_objects, dynamodb)  #Inserts list of metrics objects in batch into Dynamodb  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;batch_insert_metric_objects&lt;/summary&gt;  ```python  def batch_insert_component_info_objects(list_of_component_objects, dynamodb)  #Inserts list of component objects in batch into Dynamodb  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;get_metric_details&lt;/summary&gt;  ```python  def get_metric_details(metric_id, dynamodb)  #Fetches all the details for a specific metric_id  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;get_metric_item_by_key&lt;/summary&gt;  ```python  def get_metric_item_by_key(metric_id, curr_date, dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;scan_metrics_by_encrypted_id&lt;/summary&gt;  ```python  def scan_metrics_by_encrypted_id(anom_alarm_id, dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;query_alerts_configs_by_key&lt;/summary&gt;  ```python  def query_alerts_configs_by_key(metric_id, dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;insert_alert_config&lt;/summary&gt;  ```python  def insert_alert_config(metric_id, alert_title, severity, alert_type, alert_direction, description, duration, duration_unit, rule_dict, recipients_list, owner_dict, dynamodb)  #Example  insert_alert_config(    metric_id = &quot;metric1245&quot;, alert_title = &quot;Anomaly by Cluster&quot;, severity = &quot;critical&quot;,    alert_type = &quot;anomaly&quot;, alert_direction = &quot;spikes/drops&quot;, description = &quot;Relevant to Play Store billing user journey&quot;,    duration= 12, duration_unit = &quot;hours&quot;, rule_dict = {}, recipients_list = [{      &quot;channel&quot; : &quot;webhook&quot;,      &quot;contact&quot; : &quot;j.velez2210@gmail.com&quot;      },{        &quot;channel&quot; : &quot;slack&quot;,        &quot;contact&quot; : &quot;j.velez2210@gmail.com&quot;      }    ],    owner_dict = {      &quot;user_id&quot; : &quot;user12341&quot;,      &quot;user_name&quot; : &quot;João Tótó&quot;,    }  )  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;query_most_recent_metric_fetching_log&lt;/summary&gt;  ```python  def query_most_recent_metric_fetching_log(component_id, dynamodb)  #Fetches the log with the highest timestamp, from all the logs between start &amp; end ts  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;insert_api_request_log&lt;/summary&gt;  ```python  def insert_api_request_log(api_name, request_timestamp, response_status_code, request, response, dynamodb)  # Example  insert_api_request_log(api_name='anomalarm_metrics', request_timestamp=1603466177, response_status_code='202',                         request={'key': 'value'}, response={'key': 'value'}, dynamodb=dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;insert_new_anomaly&lt;/summary&gt;  ```python  def insert_new_anomaly(id, timestamp, metric_id, value, dynamodb, is_dev_env=False):  # Example  insert_new_anomaly(id=&quot;125123&quot;, timestamp=1599563224, metric_id=&quot;m412&quot;, value=123.44, dynamodb=dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;update_anomaly_relations&lt;/summary&gt;  ```python  def update_anomaly_relations(id, timestamp, cross_correlations, possible_related_anomalies, possible_related_matches,                               dynamodb, is_dev_env=False):  # Example  update_anomaly_relations(id=&quot;125123&quot;,                           timestamp=1599563224,                           cross_correlations={                             &quot;web-server-1.cpu0.iowait&quot;: {                               &quot;coefficient&quot;: 0.95752,                               &quot;shifted&quot;: 0,                               &quot;shifted_coefficient&quot;: 0.95752                             },                           },                           possible_related_anomalies={                             &quot;256826&quot;: {                               &quot;metric_id&quot;: &quot;web-server-1.mysql.counters.handlerRead_key&quot;,                               &quot;timestamp&quot;: 1599563164                             },                           },                           possible_related_matches={                             &quot;169560&quot;: {                               &quot;timestamp&quot;: 1599563230,                               &quot;fp id&quot;: 8821,                               &quot;layer id&quot;: &quot;None&quot;,                               &quot;metric_id&quot;: &quot;web-server-2.mariadb.localhost:3306.mysql.bytes_sent&quot;                             }                           },                           dynamodb=dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;insert_anomalarm_anomalies_webhook_log&lt;/summary&gt;  ```python  def insert_anomalarm_anomalies_webhook_log(anomalarm_id, timestamp, request, response, dynamodb, is_dev_env=False):  # Example  insert_anomalarm_anomalies_webhook_log(anomalarm_id='256828',                                         timestamp=1603466177,                                         request={...},                                         response={...},                                         dynamodb=dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;terminate_anomaly&lt;/summary&gt;  ```python  def terminate_anomaly(id, timestamp, end_timestamp, dynamodb, is_dev_env=False):  # Example  terminate_anomaly(id=&quot;125123&quot;, timestamp=1599563224, end_timestamp=1599663224, dynamodb=dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;insert_error_log&lt;/summary&gt;  ```python  def insert_error_log(dynamodb, service_name, timestamp, msg, details, is_dev_env=False):  # Example  insert_error_log(dynamodb=dynamodb, service_name=&quot;metric_to_db&quot;, timestamp=1599563224, msg=&quot;Error inserting value&quot;,                   details={                     'exception': 'RejectedRecordsException',                     'response': {...}                   })  ```&lt;/details&gt;## dynamodb_pkg.utils&lt;details&gt;  &lt;summary&gt;put_item&lt;/summary&gt;  ```python  def put_item(item_dict, table_name, dynamodb)  #Inserts json item into DynamoDB table  #Example  item_dict = {    &quot;attr&quot; : &quot;value&quot;,    &quot;attr2&quot; : &quot;value2&quot;  }  table_name = &quot;alerts&quot;  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;batch_insert&lt;/summary&gt;  ```python  def batch_insert(list_of_item_dicts, table_name, dynamodb)  #Inserts a list of item_dicts in batch to dynamodb  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;get_item&lt;/summary&gt;  ```python  def get_item(key_dict, table_name, dynamodb)  #Retrieves item from DynamoDB table  #Example  key_dict = {    &quot;prim_key&quot; = &quot;value&quot;,    &quot;sort_key&quot; = &quot;value&quot;  }  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;get_item_and_retrieve_specific_attributes&lt;/summary&gt;  ```python  def get_item_and_retrieve_specific_attributes(key_dict, attr_list, table_name, dynamodb)  #Retrieves item from DynamoDB table and retrieve specific attributes  #Example  key_dict = {    &quot;prim_key&quot; :&quot;value&quot;,    &quot;sort_key&quot; : &quot;value&quot;  }  attr_list = ['attr1', 'attr2']  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;update_item&lt;/summary&gt;  ```python  def update_item(key_dict, update_expression, expression_attr_values, table_name, dynamodb)  #Retrieves item from DynamoDB table  #Example  key_dict = {    &quot;prim_key&quot; = &quot;value&quot;,    &quot;sort_key&quot; = &quot;value&quot;  }  update_expression = &quot;set service_graph=:i, metric_list=:l, significance_score=:s&quot;  expression_attr_values = {    ':i': {'s1':['s2', 's3']},    ':l': ['124','123'],    ':s': Decimal(35.5)  }  #example to append to list  UpdateExpression=&quot;SET some_attr = list_append(if_not_exists(some_attr, :empty_list), :i)&quot;,  ExpressionAttributeValues={    ':i': [some_value],    &quot;empty_list&quot; : []  }  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;update_item_conditionally&lt;/summary&gt;  ```python  def update_item_conditionally(key_dict, condition_expression, update_expression, expression_attr_values, table_name, dynamodb)  #Retrieves item from DynamoDB table  #Example  key_dict = {    &quot;prim_key&quot; = &quot;value&quot;,    &quot;sort_key&quot; = &quot;value&quot;  }  update_expression = &quot;set service_graph=:i, metric_list=:l, significance_score=:s&quot;  expression_attr_values = {    ':i': {'s1':['s2', 's3']},    ':l': ['124','123'],    ':s': Decimal(35.5)  }  condition_expression = &quot;significance_score &lt;= :val&quot;  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;delete_item_conditionally&lt;/summary&gt;  ```python  def delete_item_conditionally(key_dict, condition_expression, expression_attr_values, table_name, dynamodb)  #Example  condition_expression = &quot;significance_score &lt;= :val&quot;  expression_attr_values = {    &quot;:val&quot;: Decimal(50)  }  key_dict = {    'org_id': 'Aptoide',    'start_time': '2020-09-03 12:00:00'  }  '''  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;query_by_key&lt;/summary&gt;  ```python  def query_by_key(key_condition, table_name, dynamodb)  #Queries from DynamoDB table by key condition  #Example  key_condition = Key('org_id').eq('Aptoide')  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;query_and_project_by_key_condition&lt;/summary&gt;  ```python  def query_and_project_by_key_condition(projection_expr, expr_attr_names, key_condition, table_name, dynamodb)  #Queries from DynamoDB table by key condition and only returns some attrs  #Example  key_condition = Key('year').eq(year) &amp; Key('title').between(title_range[0], title_range[1])  projection_expr = &quot;#yr, title, info.genres, info.actors[0]&quot;  expr_attr_names = {&quot;#yr&quot;: &quot;year&quot;}  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;scan_table&lt;/summary&gt;  ```python  def scan_table(scan_kwargs, table_name, dynamodb)  #Scans entire table looking for items that match the filter expression  #Example  scan_kwargs = {    'FilterExpression': Key('year').between(*year_range),    'ProjectionExpression': &quot;#yr, title, info.rating&quot;,    'ExpressionAttributeNames': {&quot;#yr&quot;: &quot;year&quot;}  }  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;query_by_key_min_max&lt;/summary&gt;  ```python  def query_by_key_min_max(key_condition, table_name, is_min, dynamodb)  #Queries from DynamoDB table by key condition  #Example  key_condition = Key('part_id').eq(partId) &amp; Key('range_key').between(start, end)  #or  key_condition = Key('part_id').eq(partId)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;get_all_items_in_table&lt;/summary&gt;  ```python  def get_all_items_in_table(table_name, dynamodb)  ```&lt;/details&gt; &lt;details&gt;  &lt;summary&gt;increment_atomic_counter&lt;/summary&gt;  ```python  def increment_atomic_counter(counter_type, number_of_values, dynamodb)  #Increments a counter and makes sure it is done atomically  #Available counter types:  #org_id  #component_id  #metric_id  ```&lt;/details&gt;</longdescription>
</pkgmetadata>