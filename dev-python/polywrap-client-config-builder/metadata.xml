<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Polywrap Client Config Builder==============================This package contains modules related to ClientConfigBuilder -   A utility class for building the PolywrapClient config.PolywrapClientConfigBuilder Supports building configs using method chaining or imperatively.Quickstart----------Import~~~~~~Import necessary modules&gt;&gt;&gt; from typing import cast&gt;&gt;&gt; from polywrap_client_config_builder import (...     PolywrapClientConfigBuilder,...     BuilderConfig,...     BuildOptions,... )&gt;&gt;&gt; from polywrap_core import WrapPackage, Uri, ClientConfig&gt;&gt;&gt; from polywrap_uri_resolvers import (...     RedirectResolver,...     InMemoryResolutionResultCache,...     RecursiveResolver,... )&gt;&gt;&gt; from polywrap_sys_config_bundle import sys_bundle&gt;&gt;&gt; from polywrap_web3_config_bundle import web3_bundleInitialize~~~~~~~~~~Initialize a `PolywrapClientConfigBuilder` using the constructor&gt;&gt;&gt; # start with a blank slate (typical usage)&gt;&gt;&gt; builder = PolywrapClientConfigBuilder()Configure~~~~~~~~~**Add client configuration with add, or flexibly mix and match   builder configuration methods to add and remove configuration items.**Add multiple items to the configuration using the catch-all `add` method&gt;&gt;&gt; builder = builder.add(...     BuilderConfig(...         envs={},...         interfaces={},...         redirects={},...         wrappers={},...         packages={},...         resolvers=[]...     )... )Add or remove items by chaining method calls&gt;&gt;&gt; builder = (...     builder...     .set_package(Uri.from_str(&quot;wrap://plugin/package&quot;), cast(WrapPackage, NotImplemented))...     .remove_package(Uri.from_str(&quot;wrap://plugin/package&quot;))...     .set_packages(...         {...             Uri.from_str(&quot;wrap://plugin/http&quot;): cast(WrapPackage, NotImplemented),...             Uri.from_str(&quot;wrap://plugin/filesystem&quot;): cast(WrapPackage, NotImplemented),...         }...     )... )&gt;&gt;&gt; Uri.from_str(&quot;wrap://plugin/http&quot;) in builder.config.packagesTrue&gt;&gt;&gt; Uri.from_str(&quot;wrap://plugin/filesystem&quot;) in builder.config.packagesTrue&gt;&gt;&gt; Uri.from_str(&quot;wrap://plugin/package&quot;) in builder.config.packagesFalseConfigure using sys config bundle to fetch wraps from file-system, ipfs, wrapscan, or http server&gt;&gt;&gt; from polywrap_sys_config_bundle import sys_bundle&gt;&gt;&gt; builder = builder.add_bundle(sys_bundle)Configure using web3 config bundle to fetch wraps from ens and any system URI&gt;&gt;&gt; from polywrap_web3_config_bundle import web3_bundle&gt;&gt;&gt; builder = builder.add_bundle(web3_bundle)Build~~~~~**Finally, build a ClientConfig to pass to the PolywrapClient constructor.**Accepted by the PolywrapClient&gt;&gt;&gt; config = builder.build()&gt;&gt;&gt; assert isinstance(config, ClientConfig)&gt;&gt;&gt; assert isinstance(config.resolver, RecursiveResolver)Build with a custom cache&gt;&gt;&gt; config = builder.build(...     BuildOptions(...         resolution_result_cache=InMemoryResolutionResultCache()...     )... )&gt;&gt;&gt; assert isinstance(config, ClientConfig)&gt;&gt;&gt; assert isinstance(config.resolver, RecursiveResolver)Or build with a custom resolver&gt;&gt;&gt; config = builder.build(...     BuildOptions(...         resolver=RedirectResolver(...             from_uri=Uri.from_str(&quot;wrap://test/from&quot;),...             to_uri=Uri.from_str(&quot;wrap://test/to&quot;)...         )...     )... )&gt;&gt;&gt; assert isinstance(config, ClientConfig)&gt;&gt;&gt; assert isinstance(config.resolver, RedirectResolver)</longdescription>
</pkgmetadata>