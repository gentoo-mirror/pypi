<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://github.com/LCAV/pyroomacoustics/raw/master/logo/pyroomacoustics_logo_horizontal.png   :scale: 80 %   :alt: Pyroomacoustics logo   :align: left------------------------------------------------------------------------------.. image:: https://travis-ci.org/LCAV/pyroomacoustics.svg?branch=pypi-release    :target: https://travis-ci.org/LCAV/pyroomacoustics.. image:: https://readthedocs.org/projects/pyroomacoustics/badge/?version=pypi-release    :target: http://pyroomacoustics.readthedocs.io/en/pypi-release/    :alt: Documentation Status.. image:: https://mybinder.org/badge_logo.svg    :target: https://mybinder.org/v2/gh/LCAV/pyroomacoustics/master?filepath=notebooks%2Fpyroomacoustics_demo.ipynb    :alt: Test on mybinder.. image:: https://img.shields.io/discord/829534160812245012?color=%237289DA&amp;label=pyroomacoustics%20Discord&amp;logo=discord&amp;logoColor=white    :target: https://discord.gg/HQ3evGYk2s    :alt: Pyroomacoustics discord serverSummary-------Pyroomacoustics is a software package aimed at the rapid developmentand testing of audio array processing algorithms. The content of the packagecan be divided into three main components: 1. Intuitive Python object-oriented interface to quickly construct different simulation scenarios involving multiple sound sources and microphones in 2D and 3D rooms;2. Fast C++ implementation of the image source model and ray tracing for general polyhedral rooms to efficiently generate room impulse responses and simulate the propagation between sources and receivers;3. Reference implementations of popular algorithms for STFT, beamforming, direction finding, adaptive filtering, source separation, and single channel denoising.Together, these components form a package with the potential to speed up the time to marketof new algorithms by significantly reducing the implementation overhead in theperformance evaluation step. Please refer to `this notebook &lt;https://mybinder.org/v2/gh/LCAV/pyroomacoustics/master?filepath=notebooks%2Fpyroomacoustics_demo.ipynb&gt;`_for a demonstration of the different components of this package.Room Acoustics Simulation`````````````````````````Consider the following scenario.  Suppose, for example, you wanted to produce a radio crime drama, and it  so happens that, according to the scriptwriter, the story line absolutely must culminate  in a satanic mass that quickly degenerates into a violent shootout, all taking place  right around the altar of the highly reverberant acoustic environment of Oxford's  Christ Church cathedral. To ensure that it sounds authentic, you asked the Dean of  Christ Church for permission to record the final scene inside the cathedral, but  somehow he fails to be convinced of the artistic merit of your production, and declines  to give you permission. But recorded in a conventional studio, the scene sounds flat.  So what do you do?  -- Schnupp, Nelken, and King, *Auditory Neuroscience*, 2010Faced with this difficult situation, **pyroomacoustics** can save the day by simulatingthe environment of the Christ Church cathedral!At the core of the package is a room impulse response (RIR) generator based on theimage source model that can handle* Convex and non-convex rooms* 2D/3D roomsThe core image source model and ray tracing modules are written in C++ forbetter performance.The philosophy of the package is to abstract all necessary elements ofan experiment using an object-oriented programming approach. Each of these elementsis represented using a class and an experiment can be designed by combiningthese elements just as one would do in a real experiment.Let's imagine we want to simulate a delay-and-sum beamformer that uses a lineararray with four microphones in a shoe box shaped room that contains only onesource of sound. First, we create a room object, to which we add a microphonearray object, and a sound source object. Then, the room object has methodsto compute the RIR between source and receiver. The beamformer object then extendsthe microphone array class and has different methods to compute the weights, forexample delay-and-sum weights. See the example below to get an idea of what thecode looks like.The `Room` class also allows one to process sound samples emitted by sources,effectively simulating the propagation of sound between sources and microphones.At the input of the microphones composing the beamformer, an STFT (short timeFourier transform) engine allows to quickly process the signals through thebeamformer and evaluate the output.Reference Implementations`````````````````````````In addition to its core image source model simulation, **pyroomacoustics**also contains a number of reference implementations of popular audio processingalgorithms for* `Short time Fourier transform &lt;http://pyroomacoustics.readthedocs.io/en/pypi-release/pyroomacoustics.transform.stft.html&gt;`_ (block + online)* `beamforming &lt;http://pyroomacoustics.readthedocs.io/en/pypi-release/pyroomacoustics.beamforming.html&gt;`_* `direction of arrival &lt;http://pyroomacoustics.readthedocs.io/en/pypi-release/pyroomacoustics.doa.html&gt;`_ (DOA) finding* `adaptive filtering &lt;http://pyroomacoustics.readthedocs.io/en/pypi-release/pyroomacoustics.adaptive.html&gt;`_ (NLMS, RLS)* `blind source separation &lt;http://pyroomacoustics.readthedocs.io/en/pypi-release/pyroomacoustics.bss.html&gt;`_ (AuxIVA, Trinicon, ILRMA, SparseAuxIVA, FastMNMF, FastMNMF2)* `single channel denoising &lt;https://pyroomacoustics.readthedocs.io/en/pypi-release/pyroomacoustics.denoise.html&gt;`_ (Spectral Subtraction, Subspace, Iterative Wiener)We use an object-oriented approach to abstract the details ofspecific algorithms, making them easy to compare. Each algorithm can be tuned through optional parameters. We have tried topre-set values for the tuning parameters so that a run with the default valueswill in general produce reasonable results.Datasets````````In an effort to simplify the use of datasets, we provide a few wrappers thatallow to quickly load and sort through some popular speech corpora. At themoment we support the following.* `CMU ARCTIC &lt;http://www.festvox.org/cmu_arctic/&gt;`_* `TIMIT &lt;https://catalog.ldc.upenn.edu/ldc93s1&gt;`_* `Google Speech Commands Dataset &lt;https://research.googleblog.com/2017/08/launching-speech-commands-dataset.html&gt;`_For more details, see the `doc &lt;http://pyroomacoustics.readthedocs.io/en/pypi-release/pyroomacoustics.datasets.html&gt;`_.Quick Install-------------Install the package with pip::    pip install pyroomacousticsA `cookiecutter &lt;https://github.com/fakufaku/cookiecutter-pyroomacoustics-sim&gt;`_is available that generates a working simulation script for a few 2D/3Dscenarios::    # if necessary install cookiecutter    pip install cookiecutter    # create the simulation script    cookiecutter gh:fakufaku/cookiecutter-pyroomacoustics-sim    # run the newly created script    python &lt;chosen_script_name&gt;.pyWe have also provided a minimal `Dockerfile` example in order to install andrun the package within a Docker container. Note that you should `increase the memory &lt;https://docs.docker.com/docker-for-mac/#resources&gt;`_of your containers to 4 GB. Less may also be sufficient, but this is necessaryfor building the C++ code extension. You can build the container with::    docker build -t pyroom_container .And enter the container with::    docker run -it pyroom_container:latest /bin/bashDependencies------------The minimal dependencies are::    numpy     scipy&gt;=0.18.0    Cython    pybind11where ``Cython`` is only needed to benefit from the compiled accelerated simulator.The simulator itself has a pure Python counterpart, so that this requirement couldbe ignored, but is much slower.On top of that, some functionalities of the package depend on extra packages::    samplerate   # for resampling signals    matplotlib   # to create graphs and plots    sounddevice  # to play sound samples    mir_eval     # to evaluate performance of source separation in examplesThe ``requirements.txt`` file lists all packages necessary to run all of thescripts in the ``examples`` folder.This package is mainly developed under Python 3.6. The last supported version for Python 2.7 is``0.4.3``.Under Linux and Mac OS, the compiled accelerators require a valid compiler tobe installed, typically this is GCC. When no compiler is present, the packagewill still install but default to the pure Python implementation which is muchslower. On Windows, we provide pre-compiled Python Wheels for Python 3.5 and3.6.Example-------Here is a quick example of how to create and visualize the response of abeamformer in a room... code-block:: python    import numpy as np    import matplotlib.pyplot as plt    import pyroomacoustics as pra    # Create a 4 by 6 metres shoe box room    room = pra.ShoeBox([4,6])    # Add a source somewhere in the room    room.add_source([2.5, 4.5])    # Create a linear array beamformer with 4 microphones    # with angle 0 degrees and inter mic distance 10 cm    R = pra.linear_2D_array([2, 1.5], 4, 0, 0.1)    room.add_microphone_array(pra.Beamformer(R, room.fs))    # Now compute the delay and sum weights for the beamformer    room.mic_array.rake_delay_and_sum_weights(room.sources[0][:1])    # plot the room and resulting beamformer    room.plot(freq=[1000, 2000, 4000, 8000], img_order=0)    plt.show()More examples-------------A couple of `detailed demos with illustrations &lt;https://github.com/LCAV/pyroomacoustics/tree/master/notebooks&gt;`_ are available.  A comprehensive set of examples covering most of the functionalitiesof the package can be found in the ``examples`` folder of the `GitHubrepository &lt;https://github.com/LCAV/pyroomacoustics/tree/master/examples&gt;`_.Authors-------* Robin Scheibler* Ivan Dokmanić* Sidney Barthe* Eric Bezzam* Hanjie PanHow to contribute-----------------If you would like to contribute, please clone the`repository &lt;http://github.com/LCAV/pyroomacoustics&gt;`_ and send a pull request.For more details, see our `CONTRIBUTING&lt;http://pyroomacoustics.readthedocs.io/en/pypi-release/contributing.html&gt;`_page.Academic publications---------------------This package was developed to support academic publications. The packagecontains implementations for DOA algorithms and acoustic beamformers introducedin the following papers.* H\. Pan, R. Scheibler, I. Dokmanic, E. Bezzam and M. Vetterli. *FRIDA: FRI-based DOA estimation for arbitrary array layout*, ICASSP 2017, New Orleans, USA, 2017.* I\. Dokmanić, R. Scheibler and M. Vetterli. *Raking the Cocktail Party*, in IEEE Journal of Selected Topics in Signal Processing, vol. 9, num. 5, p. 825 - 836, 2015.* R\. Scheibler, I. Dokmanić and M. Vetterli. *Raking Echoes in the Time Domain*, ICASSP 2015, Brisbane, Australia, 2015.If you use this package in your own research, please cite `our paper describing it &lt;https://arxiv.org/abs/1710.04196&gt;`_.  R\. Scheibler, E. Bezzam, I. Dokmanić, *Pyroomacoustics: A Python package for audio room simulations and array processing algorithms*, Proc. IEEE ICASSP, Calgary, CA, 2018.License-------::  Copyright (c) 2014-2021 EPFL-LCAV  Permission is hereby granted, free of charge, to any person obtaining a copy of  this software and associated documentation files (the &quot;Software&quot;), to deal in  the Software without restriction, including without limitation the rights to  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies  of the Software, and to permit persons to whom the Software is furnished to do  so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all  copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  SOFTWARE.</longdescription>
</pkgmetadata>