<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>propeller_design_tools (PDT)============================---**Work in progress / incomplete documentation**---Description===========Python 3.7 package that provides exactly what it sounds like by automating usage of the GPL-licensed CLI-utilities XFOIL and XROTOR.Both utilities are published by professor Mark Drela (MIT).- XFOIL: for arbitrary 2D airfoil analysis- XROTOR: for arbitrary propeller design schemesPurpose=======PDT seeks to provide the user a set of python3 utilitiesthat can be used for arbitrary scripting efforts to automateusage of both XFOIL and XROTOR while implementing its own unique python3.7-native algorithms to maintain localinput files, meta files, databases, and results files andweave everything together for the user in a simple,meaningful way to aid in the initial / investigatory stage of well-behaved propeller designs.Getting Started===============Installation------------`pip install propeller_design_tools`General Operation-----------------`import propeller_design_tools as pdt`PDT operates on two different &quot;database&quot; directories, definedby the user with:    pdt.set_airfoil_database(path: str)    pdt.set_propeller_database(path: str)**The user must set these two directories at the top of every script right after the imports***The airfoil directory will be used to store any foil / XFOIL- related support files, and the propeller directorywill be used similarly to store any propeller / XROTOR - related support files.*Requisite: XFOIL and XROTOR Executables-------------------------------------------In order to utilize any PDT functionality that depends on running XFOIL, the &quot;xfoil.exe&quot; executable file needs to bein the user-set &quot;airfoil_database&quot; location. *Current pip installations include the xfoil.exe file in the foil_database,there should theoretically be no need to download it manually.*[XFOIL executable and docs](https://web.mit.edu/drela/Public/web/xfoil/)Likewise, in order to utilize any PDT functionality thatdepends on running XROTOR, the &quot;xrotor.exe&quot; executable fileneeds to be in the user-set &quot;propeller_database&quot; location.*Current pip installations include the xrotor.exe file in the default prop_database, there should theoretically be no need to download it manually.*[XROTOR executable and docs](http://www.esotec.org/sw/crotor.html#download)*(this is actually a link to &quot;CROTOR&quot;, which I find isactually the easiest way to obtain a windows-executableof XROTOR)*Example Scripts / Workflow--------------------------At a high-level, the current concept for PDT workflow is as follows (after obtaining the required executables and pip-installing the PDT package):0. Try out the (currently extremely buggy and incomplete) user interface![example0_user_interface.py](   https://github.com/helloDestroyerOfWorlds/propeller_design_tools/blob/master/tests/example0_user_interface.py   )   ![ex0-1.png](https://raw.githubusercontent.com/helloDestroyerOfWorlds/propeller_design_tools/master/tests/ex0-1.png)   ![ex0-2.png](https://raw.githubusercontent.com/helloDestroyerOfWorlds/propeller_design_tools/master/tests/ex0-2.png)   ![ex0-3.png](https://raw.githubusercontent.com/helloDestroyerOfWorlds/propeller_design_tools/master/tests/ex0-3.png)1. Obtain normalized airfoil coordinate files from[UIUC Database](https://m-selig.ae.illinois.edu/ads/coord_database.html)-&gt; save these files into the &quot;airfoil_database&quot; directory2. Use PDT to run XFOIL across ranges of Reynolds Numbers in order topopulate database data for the desired foil sections -&gt; see [example1_airfoil_analysis.py](   https://github.com/helloDestroyerOfWorlds/propeller_design_tools/blob/master/tests/example1_airfoil_analysis.py   )   ![ex1-1.png](https://raw.githubusercontent.com/helloDestroyerOfWorlds/propeller_design_tools/master/tests/ex1-1.png)   ![ex1-2.png](https://raw.githubusercontent.com/helloDestroyerOfWorlds/propeller_design_tools/master/tests/ex1-2.png)3. Once the required 2D airfoil data is generated, PDT can then be usedto automatically generate all the required 2D foil definition parametersrequired by XROTOR (these &quot;station parameters&quot; are essentially what allow XROTOR to model the performance of well-behaved, arbitrarily-lofted blade geometries) -&gt; see[example2_radialstation_creation.py](   https://github.com/helloDestroyerOfWorlds/propeller_design_tools/blob/master/tests/example2_radialstation_creation.py   )   ![ex2-1.png](https://raw.githubusercontent.com/helloDestroyerOfWorlds/propeller_design_tools/master/tests/ex2-1.png)      But this step is also automated &amp; displayed by PDT when the user usesthe builtin PDT propeller creation function -&gt; see[example3_prop_creation.py](   https://github.com/helloDestroyerOfWorlds/propeller_design_tools/blob/master/tests/example3_prop_creation.py   )   ![ex3-1.png](https://raw.githubusercontent.com/helloDestroyerOfWorlds/propeller_design_tools/master/tests/ex3-1.png)   NOTE: It is highly recommended to first run XROTOR using either the 'grad' or the 'pot' vortex formulation in order to get your design &quot;tweaked in&quot; -&gt; these are much faster than the (more accurate) 'vrtx' formulation, which you can then move on to.   ![ex3-2.png](https://raw.githubusercontent.com/helloDestroyerOfWorlds/propeller_design_tools/master/tests/ex3-2.png)4. PDT's Propeller() object instances can generate 3D geometry files including profle xyz coordinate listings, and .stl 3D geometry files -&gt; see[example4_stl_generation.py](   https://github.com/helloDestroyerOfWorlds/propeller_design_tools/blob/master/tests/example4_stl_generation.py   )   ![ex4-1.png](https://raw.githubusercontent.com/helloDestroyerOfWorlds/propeller_design_tools/master/tests/ex4-1.png)5. Analyze a given Propeller() instance across a sweep of operating points -&gt; see [example5_prop_analysis.py](   https://github.com/helloDestroyerOfWorlds/propeller_design_tools/blob/master/tests/example5_prop_analysis.py   )   ![ex5-1.png](https://raw.githubusercontent.com/helloDestroyerOfWorlds/propeller_design_tools/master/tests/ex5-1.png)6. **WIP** Prop optimization (grid-search style generic optimizer for &quot;optimal&quot;prop design generation by means of maximizing or minimizing a given output / calculated metric based on outputs, optionally taking into account differentpropeller operating points via the ability to define the propeller's &quot;duty-cycle&quot;)</longdescription>
</pkgmetadata>