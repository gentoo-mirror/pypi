<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jsondaora&lt;p align=&quot;center&quot; style=&quot;margin: 3em&quot;&gt;  &lt;a href=&quot;https://github.com/dutradda/jsondaora&quot;&gt;    &lt;img src=&quot;https://dutradda.github.io/jsondaora/jsondaora.svg&quot; alt=&quot;jsondaora&quot; width=&quot;300&quot;/&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;Interoperates &lt;b&gt;dataclasses&lt;/b&gt; and &lt;b&gt;TypedDict&lt;/b&gt; annotations with &lt;b&gt;json objects for python&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;---**Documentation**: &lt;a href=&quot;https://dutradda.github.io/jsondaora&quot; target=&quot;_blank&quot;&gt;https://dutradda.github.io/jsondaora&lt;/a&gt;**Source Code**: &lt;a href=&quot;https://github.com/dutradda/jsondaora&quot; target=&quot;_blank&quot;&gt;https://github.com/dutradda/jsondaora&lt;/a&gt;---## Key Features- Full compatibility with [dataclasses](https://docs.python.org/3/library/dataclasses.html) module and [TypedDict](https://www.python.org/dev/peps/pep-0589/) annotation- Deserialize values from dict- Deserialize values from bytes*- Deserialization/serialization of chosen fields- Deserialize the following standard types: Dict, List, Tuple, Set, Union and Any- Dict serialization- Direct json serialization with [orjson](https://github.com/ijl/orjson) (don't convert to dict recursively before serialization)- Optional validation according with the [json-schema](https://json-schema.org/) specification**\* feature in development.*## Requirements - Python 3.8+ - [orjson](https://github.com/ijl/orjson) for json serialization## Installation```$ pip install jsondaora```## Basic example```pythonfrom typing import List, TypedDictfrom jsondaora import (    as_typed_dict,    asdataclass,    dataclass_asjson,    jsondaora,    typed_dict_asjson,)@jsondaoraclass Person:    name: str    age: int    class Music:        name: str    musics: List[Music]jsondict = dict(name=b'John', age='40', musics=[dict(name='Imagine')])person = asdataclass(jsondict, Person)print('dataclass:')print(person)print(dataclass_asjson(person))print()# TypedDict@jsondaoraclass MusicT(TypedDict):    name: str@jsondaoraclass PersonT(TypedDict):    name: str    age: int    musics: List[MusicT]jsondict = dict(name=b'John', age='40', musics=[dict(name='Imagine')])person = as_typed_dict(jsondict, PersonT)print('TypedDict:')print(person)print(typed_dict_asjson(person, Person))``````dataclass:Person(name='John', age=40, musics=[Person.Music(name='Imagine')])b'{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:40,&quot;musics&quot;:[{&quot;name&quot;:&quot;Imagine&quot;}]}'TypedDict:{'name': 'John', 'age': 40, 'musics': [{'name': 'Imagine'}]}b'{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:40,&quot;musics&quot;:[{&quot;name&quot;:&quot;Imagine&quot;}]}'```## Example for choose fields to deserialize```pythonfrom typing import List, TypedDictfrom jsondaora import (    as_typed_dict,    asdataclass,    dataclass_asjson,    jsondaora,    typed_dict_asjson,)@jsondaora(deserialize_fields=('name'))class Person:    name: str    age: int    class Music:        name: str    musics: List[Music]jsondict = dict(name=b'John', age='40', musics=[dict(name='Imagine')])person = asdataclass(jsondict, Person)print('dataclass:')print(person)print(dataclass_asjson(person))print()# TypedDict@jsondaoraclass MusicT(TypedDict):    name: str@jsondaora(deserialize_fields=('name',))class PersonT(TypedDict):    name: str    age: int    musics: List[MusicT]jsondict = dict(name=b'John', age='40', musics=[dict(name='Imagine')])person = as_typed_dict(jsondict, PersonT)print('TypedDict:')print(person)print(typed_dict_asjson(person, PersonT))``````dataclass:Person(name='John', age='40', musics=[{'name': 'Imagine'}])b'{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:&quot;40&quot;,&quot;musics&quot;:[{&quot;name&quot;:&quot;Imagine&quot;}]}'TypedDict:{'name': 'John', 'musics': [{'name': 'Imagine'}], 'age': '40'}b'{&quot;name&quot;:&quot;John&quot;,&quot;musics&quot;:[{&quot;name&quot;:&quot;Imagine&quot;}],&quot;age&quot;:&quot;40&quot;}'```## Example for choose fields to serialize```pythonfrom typing import List, TypedDictfrom jsondaora import (    as_typed_dict,    asdataclass,    dataclass_asjson,    jsondaora,    typed_dict_asjson,)@jsondaora(serialize_fields=('name', 'age'))class Person:    name: str    age: int    class Music:        name: str    musics: List[Music]jsondict = dict(name='John', age=40, musics=[dict(name='Imagine')])person = asdataclass(jsondict, Person)print('dataclass:')print(person)print(dataclass_asjson(person))print()# TypedDict@jsondaoraclass Music(TypedDict):    name: str@jsondaora(serialize_fields=('age',))class PersonT(TypedDict):    name: str    age: int    musics: List[Music]jsondict = dict(name=b'John', age='40', musics=[dict(name='Imagine')])person = as_typed_dict(jsondict, PersonT)print('TypedDict:')print(person)print(typed_dict_asjson(person, PersonT))``````dataclass:Person(name='John', age=40, musics=[Person.Music(name='Imagine')])b'{&quot;age&quot;:40,&quot;name&quot;:&quot;John&quot;}'TypedDict:{'name': 'John', 'age': 40, 'musics': [{'name': 'Imagine'}]}b'{&quot;age&quot;:40}'```</longdescription>
</pkgmetadata>