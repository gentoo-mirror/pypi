<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Flask-Cognito-Auth[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)[![PyPI](https://img.shields.io/pypi/v/flask-cognito-auth.svg)](https://pypi.org/project/flask-cognito-auth)[![CircleCI](https://circleci.com/gh/shrivastava-v-ankit/flask-cognito-auth.svg?style=svg)](https://circleci.com/gh/shrivastava-v-ankit/flask-cognito-auth)Flask-Cognito-Auth is a Flask implementation of AWS Cognito Service with User Pool. This extension helps to implement authentication solutions based on AWS's Cognito Service. It contains helpful functions and properties to handle oauth2 and token based authentication flows.This extension requires to enable &quot;Enabled Identity Providers&quot; in Appllication client settings of User Pool within AWS Cognito Sevice.![Add Application](images/flask-cognito-auth.jpg)&lt;/br&gt;## SAML Assertion settings  (OPTIONAL)If SAML provider is set then optionally SAML assertion can be set andreterieved post authentication.&lt;/br&gt;These assertions are reterived under Session object under key &quot;saml_assertions&quot;.#### Example![SAML Assertion](images/saml-assertion.png)    * Replace &quot;Email&quot; with the key provided in SAML assertions sent by IDP and to be reterived as Email key.    * Replace &quot;MemberOf&quot; with the key provided in SAML assertions sent by IDP and to be reterived as profile key.    * Add as many assertions required post authentication.```bashpip install flask-cognito-auth```### Usage```pythonfrom flask import Flaskfrom flask import redirectfrom flask import url_forfrom flask import sessionfrom flask import jsonifyfrom flask_cognito_auth import CognitoAuthManagerfrom flask_cognito_auth import login_handlerfrom flask_cognito_auth import logout_handlerfrom flask_cognito_auth import callback_handlerapp = Flask(__name__)app.secret_key = &quot;my super secret key&quot;# Setup the flask-cognito-auth extentionapp.config['COGNITO_REGION'] = &quot;us-east-1&quot;app.config['COGNITO_USER_POOL_ID'] = &quot;us-east-1_xxxxxxx&quot;app.config['COGNITO_CLIENT_ID'] = &quot;xxxxxxxxxxxxxxxxxxxxxxxxxx&quot;app.config['COGNITO_CLIENT_SECRET'] = &quot;xxxxxxxxxxxxxxxxxxxxxxxxxx&quot;app.config['COGNITO_DOMAIN'] = &quot;https://yourdomainhere.com&quot;app.config[&quot;ERROR_REDIRECT_URI&quot;] = &quot;page500&quot;        # Optionalapp.config[&quot;COGNITO_STATE&quot;] = &quot;mysupersecrethash&quot;   # Optionalapp.config['COGNITO_REDIRECT_URI'] = &quot;https://yourdomainhere/cognito/callback&quot;  # Specify this url in Callback URLs section of Appllication client settings of User Pool within AWS Cognito Sevice. Post login application will redirect to this URLapp.config['COGNITO_SIGNOUT_URI'] = &quot;https://yourdomainhere/login&quot; # Specify this url in Sign out URLs section of Appllication client settings of User Pool within AWS Cognito Sevice. Post logout application will redirect to this URLcognito = CognitoAuthManager(app)# cognito = CognitoManager(app)# cognito.init(app)@app.route('/login', methods=['GET'])def login():    print(&quot;Do the stuff before login to AWS Cognito Service&quot;)    response = redirect(url_for(&quot;cognitologin&quot;))    return response@app.route('/logout', methods=['GET'])def logout():    print(&quot;Do the stuff before logout from AWS Cognito Service&quot;)    response = redirect(url_for(&quot;cognitologout&quot;))    return response# Use @login_handler decorator on cognito login route@app.route('/cognito/login', methods=['GET'])@login_handlerdef cognitologin():    pass@app.route('/home', methods=['GET'])def home():    current_user = session[&quot;username&quot;]    return jsonify(logged_in_as=current_user), 200# Use @callback_handler decorator on your cognito callback route@app.route('/cognito/callback', methods=['GET'])@callback_handlerdef callback():    print(&quot;Do the stuff before post successfull login to AWS Cognito Service&quot;)    for key in list(session.keys()):        print(f&quot;Value for {key} is {session[key]}&quot;)    response = redirect(url_for(&quot;home&quot;))    return response# Use @logout_handler decorator on your cognito logout route@app.route('/cognito/logout', methods=['GET'])@logout_handlerdef cognitologout():    pass@app.route('/page500', methods=['GET'])def page500():    return jsonify(Error=&quot;Something went wrong&quot;), 500if __name__ == '__main__':    app.run(debug=True)```### Development SetupUsing pipenv```bashpipenv install --dev ```Using virtualenv```bashpython3 -m venv envsource env/bin/activatepip install .```### Contributing1. Fork repo- https://github.com/shrivastava-v-ankit/flask-cognito-auth.git2. Create your feature branch - `git checkout -b feature/name`3. Add Python test (pytest) and covrage report for new/changed feature.4. Commit your changes - `git commit -am &quot;Added name&quot;`5. Push to the branch - `git push origin feature/name`6. Create a new pull request</longdescription>
</pkgmetadata>