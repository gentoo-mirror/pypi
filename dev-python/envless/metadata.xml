<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># envless: a python utility for running scripts with dependencies declared inlinePython scripts are great and useful, but for simple tasks that require adependency or two, it can be annoying to manage virtualenvs. This is especiallyannoying if you want to write the scripts to manage your dev environment in python.`envless` provides a self-contained way for python scripts to declare and loadtheir dependencies. To make the idea clearer, here's an example script thatfetches and prints the `python.org` site:```pythonimport envlessenvless.script_dependencies({&quot;requests&quot;: &quot;==2.28.2&quot;}, __file__)import requestsresponse = requests.get(&quot;https://python.org&quot;)print(response.text)```In short, this will run the script, installing `requests` if needed, so thatyou don't need to have it preinstalled or set up a virtualenv or anythingfirst. If this script is called `show_python.py`, then you just run `pythonshow_python.py`, and it works!This is heavily inspired by how[deno](https://deno.land/manual@v1.31.3/examples/manage_dependencies) and[go](https://go.dev/blog/using-go-modules) automatically determine dependenciesbased on the source code rather than declaring them manually in a separate file.## InstallationThe only requirement is that you need to be able to `import envless` whenyou're running the python you want to use for the script. This usually meansthat you should `pip install --user envless`.If you have multiple versions of python on your system, this means you shouldinstall with the corresponding `pip`. So if your system default python is 3.8,but you also have 3.11 installed, and you want to run with 3.11, you might needto `pip3.11 install --user envless` and then `python3.11 &lt;script&gt;` to run yourscript.`envless` should always support all[currently supported python versions](https://devguide.python.org/versions/),except python3.7, which is about to go end-of-life at the time of writing thispackage.## How it worksThe `script_dependencies` function turns the requirements dict into a`requirements.txt` tempfile. It then hashes that tempfile and the runningpython version to get a version ID, creates a virtualenv with that ID ifneeded, and installs the dependencies into that virtualenv. Then it `exec`s thecurrent interpreter with that virtualenv active so that the dependencies areavailable to the script.Note that this implies that the dependencies do not contaminate your globalenvironment, and also that virtualenvs can be shared among scripts with thesame dependency declarations (so don't go messing with them manually).If you want to clear out old envs, they live in your platform's equivalent of`~/.local/share/envless/virtualenvs`. It should always be safe to delete thisdirectory if there isn't a script actively running; envs will be recreated asneeded.## API`envless.script_dependencies`: the only function in the package you should needto use from your code.Args:- `requirements`: a `dict` where keys are package names that can be installed  via `pip` and values are version specifiers for those packages (again, any  version specifier that `pip` can handle). If you don't care about the version  you get, just pass `&quot;&quot;` as the version specifier.- `source_file`: the path of the file that is calling this function. You should  always just pass the python builtin variable `__file__` for this argument.## ExamplesSee the `tests` dir, which contains scripts that use `envless`.## LimitationsYour call to `envless.script_dependencies` must come before you import any codeoutside the standard library.`envless` only works well when used in the script that you're using as anentrypoint. Importing another script that uses envless will end up executingthat other script as the entrypoint, which is probably not what you want. Ifyou think you might need to import a script that uses envless, you can put thecall to `envless.script_dependencies` inside an `if __name__ == &quot;__main__&quot;:`block (which still must occur prior to any imports outside the standardlibrary). For example:```pythonif __name__ == &quot;__main__&quot;:    import envless    envless.script_dependencies({&quot;requests&quot;: &quot;==2.28.2&quot;}, __file__)import requestsresponse = requests.get(&quot;https://python.org&quot;)print(response.text)```Note, however, that this means that the script doing the importing isresponsible for providing all the dependencies; in this example, `requests`will not be installed automatically if the script is not the entrypoint.</longdescription>
</pkgmetadata>