<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Okta JwtOkta JWT Access Token verifier for Python using cached JWKs.[![version](https://badge.fury.io/py/okta-jwt.svg)](https://badge.fury.io/py/okta-jwt)Link to PyPi - click [here](https://pypi.org/project/okta-jwt/)## Installation```pythonpip install okta_jwt```### UsageTo generate a token, you need to pass in `issuer`, `client_id`, `client_secret`, `username` and `password` as parameters```python&gt;&gt;&gt; from okta_jwt.jwt import generate_token&gt;&gt;&gt; generate_token(issuer, client_id, client_secret, username, password)```This generates and returns Okta Access Token.To Validate the Access Token, you need to pass in the `access_token`, `issuer`, `audience` and `client_ids` as parameters. You can pass in multiple Client IDs```python&gt;&gt;&gt; from okta_jwt.jwt import validate_token&gt;&gt;&gt; validate_token(access_token, issuer, audience, client_ids)```If the token is valid then it will return the payload.## Running the testsTo run the unit tests, run$ python -m unittest### Break down into testsThe unit tests pretty much covers all the main functionality of the package, like generating the token, Validating the token and Verifying Claims.## ContributingBug reports and Pull Requests(PR's) are welcome on GitHub at https://github.com/adithyasampatoor/okta_jwt. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.## Authors* **Adithya Sampatoor**## LicenseThe Library is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT)</longdescription>
</pkgmetadata>