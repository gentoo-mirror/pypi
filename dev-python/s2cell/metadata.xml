<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://docs.s2cell.aliddell.com/_static/logo.min.svg   :width: 200   :height: 200   :alt: s2cell logos2cell======Minimal Python `S2 Geometry &lt;https://s2geometry.io/&gt;`__`cell ID &lt;https://s2geometry.io/devguide/s2cell_hierarchy.html&gt;`__, token and lat/lon conversionlibrary.`Docs &lt;https://docs.s2cell.aliddell.com&gt;`__ | `PyPI &lt;https://pypi.org/project/s2cell&gt;`__ | `GitHub &lt;https://github.com/aaliddell/s2cell&gt;`__.. image:: https://github.com/aaliddell/s2cell/workflows/CI/badge.svg   :alt: CI Status   :target: https://github.com/aaliddell/s2cell/actions.. image:: https://readthedocs.org/projects/s2cell/badge/?version=latest   :alt: Documentation Status   :target: https://docs.s2cell.aliddell.com/en/latest.. image:: https://img.shields.io/github/license/aaliddell/s2cell   :alt: License   :target: https://github.com/aaliddell/s2cell.. image:: https://img.shields.io/pypi/v/s2cell   :alt: PyPI Version   :target: https://pypi.org/project/s2cell/Overview--------This library does conversion between S2 cell ID, S2 token and latitude/longitude and was written asa method to understand the way the S2 cell system works; hopefully this is useful to others as asingle-file reference on the process, where tracing the relevant parts from the reference C++implementation can be somewhat daunting. All steps in the conversions are well commented and writtento be understandable and functional rather than strictly fast, although little is different from thereference implementation.The library is checked against a test suite generated from the`reference C++ implementation &lt;https://github.com/google/s2geometry&gt;`__ to ensure conformity with thestandard.Should you need more complete S2 Geometry functionality or a fast C-based implementation, pleaseconsider using the Python extension `included in the s2geometry repository&lt;https://github.com/google/s2geometry/tree/master/src/python&gt;`__ or thepure-Python `s2sphere &lt;https://pypi.org/project/s2sphere/&gt;`__ implementation.Issues and PRs are very welcome to improve the implementation, descriptions or to correct anymisunderstandings of the S2 cell system. Please note that this library strives to be an easy to readreference rather than aiming for peak performance (it is in Python after all), so PRs which reducereadability of the implementation (such as for Python specific speed optimisations) are generallydiscouraged. However, if you have optimisations that are applicable to S2 implementations acrossmany languages and can be described easily, please do consider making a PR.Installation------------This package can be installed from `PyPI &lt;https://pypi.org/project/s2cell/&gt;`__ with pip or anyother Python package manager:.. code-block:: bash   pip install s2cellUsage-----The full documentation, including the API Reference, is available at`docs.s2cell.aliddell.com &lt;https://docs.s2cell.aliddell.com&gt;`__. Below is a quick start guide forthe most common uses.The library is designed to be minimal, predictable and purely functional. Conversion from lat/lon(in degrees) to a cell ID or token can be done with the following two functions:.. code-block:: python3   s2cell.lat_lon_to_cell_id(-10.490091, 105.641318)  # -&gt; 3383782026967071427   s2cell.lat_lon_to_token(-10.490091, 105.641318)    # -&gt; '2ef59bd352b93ac3'By default, these conversions will give you a level 30 leaf-cell as output. If you require a lowerprecision level, you can specify this:.. code-block:: python3   s2cell.lat_lon_to_cell_id(-10.490091, 105.641318, 10)  # -&gt; 3383781119341101056   s2cell.lat_lon_to_token(-10.490091, 105.641318, 0)     # -&gt; '3'Conversion from a cell ID or token to lat/lon (in degrees) can be done with the following twofunctions:.. code-block:: python3   s2cell.cell_id_to_lat_lon(3383781119341101056)  # -&gt; (-10.452552407574101, 105.6412526632361)   s2cell.token_to_lat_lon('3')                    # -&gt; (0.0, 90.0)The lat/lon returned will be the center of the cell at the level available in the provided cell IDor token.There are also a few other useful functions for inspecting or converting a cell ID/token:.. code-block:: python3   # Conversion between cell ID and token   s2cell.cell_id_to_token(3383781119341101056)  # -&gt; '2ef59b'   s2cell.token_to_cell_id('3')                  # -&gt; 3458764513820540928.. code-block:: python3   # Level extraction   s2cell.cell_id_to_level(3383781119341101056)  # -&gt; 10   s2cell.token_to_level('3')                    # -&gt; 0.. code-block:: python3   # Parent cell calculation   s2cell.cell_id_to_parent_cell_id(3383781119341101056)     # -&gt; 3383782218852728832   s2cell.cell_id_to_parent_cell_id(3383781119341101056, 2)  # -&gt; 3386706919782612992   s2cell.token_to_parent_token('2ef59b')                    # -&gt; '2ef59c'   s2cell.token_to_parent_token('2ef59b', 2)                 # -&gt; '2f'.. code-block:: python3   # Token canonicalisation   s2cell.token_to_canonical_token('2ef59BD352b90') # -&gt; '2ef59bd352b9'Useful S2 Geometry Links------------------------A list of useful links for S2 related concepts and projects can be found`here &lt;https://docs.s2cell.aliddell.com/useful_s2_links.html&gt;`__.License-------This project is released under the same license as the reference C++ S2 Geometry implementation,namely the Apache 2.0 License.</longdescription>
</pkgmetadata>