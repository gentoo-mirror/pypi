<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># BLEST PythonThe Python reference implementation of BLEST (Batch-able, Lightweight, Encrypted State Transfer), an improved communication protocol for web APIs which leverages JSON, supports request batching and selective returns, and provides a modern alternative to REST. It includes examples for Django, FastAPI, and Flask.To learn more about BLEST, please refer to the white paper: https://jhunt.dev/BLEST%20White%20Paper.pdfFor a front-end implementation in React, please visit https://github.com/jhuntdev/blest-react## Features- Built on JSON - Reduce parsing time and overhead- Request Batching - Save bandwidth and reduce load times- Compact Payloads - Save more bandwidth- Selective Returns - Save even more bandwidth- Single Endpoint - Reduce complexity and improve data privacy- Fully Encrypted - Improve data privacy## InstallationInstall BLEST Python from PyPI.```bashpython3 -m pip install blest```## UsageThis default export of this library is an API very similar to Flask or FastAPI. For convenience it also provides a `create_request_handler` function to create a request handler suitable for use in an existing application, a `create_http_server` function to create a standalone HTTP server, and a `create_http_client` function to create a BLEST HTTP client.```pythonfrom blest import Blestapp = new Blest({ 'timeout': 1000 })@app.before_requestasync def auth_middleware(params, context):  if params.get('name'):    context['user'] = {      'name': params['name']    }  else:    raise Exception('Unauthorized')@app.route('greet')async def greet_controller(params, context):  return {    'greeting': f&quot;Hi, {context['user']['name']}!&quot;  }if __name__ == '__main__':  app.listen(8080)```### create_request_handlerThe following example uses Flask, but you can find examples with other frameworks [here](examples).```pythonfrom flask import Flask, make_response, requestfrom blest import create_request_handler# Create some middleware (optional)async def auth_middleware(params, context):  if params['name']:    context['user'] = {      'name': params['name']    }  else:    raise Exception('Unauthorized')# Create a route controllerasync def greet_controller(params, context):  return {    'greeting': f&quot;Hi, {context['user']['name']}!&quot;  }# Create a request_handlerrequest_handler = create_request_handler({  'greet': [auth_middleware, greet_controller]})app = Flask(__name__)# Use the request handler@app.post('/')async def index():  result, error = await request_handler(request.json)  if error:    resp = make_response(error, 500)    resp.headers['Content-Type'] = 'application/json'  else:    resp = make_response(result, 200)    resp.headers['Content-Type'] = 'application/json'    return resp```### create_http_server```pythonfrom blest import create_http_server, create_request_handler# Create some middleware (optional)async def auth_middleware(params, context):  if params['name']:    context['user'] = {      'name': params['name']    }  else:    raise Exception('Unauthorized')# Create a route controllerasync def greet_controller(params, context):  return {    'greeting': f&quot;Hi, {context['user']['name']}!&quot;  }# Create a request_handlerrequest_handler = create_request_handler({  'greet': [auth_middleware, greet_controller]})run = create_http_server(request_handler)if __name__ == '__main__':  run()```### create_http_client```pythonfrom blest import create_http_client# Create a clientrequest = create_http_client('http://localhost:8080')async def main():  # Send a request  try:    result = await request('greet', { 'name': 'Steve' }, ['greeting'])    # Do something with the result  except Exception as error:    # Do something in case of error```## LicenseThis project is licensed under the [MIT License](LICENSE).</longdescription>
</pkgmetadata>