<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># qabotQuery local or remote files with natural language queries powered byOpenAI's `gpt` and `duckdb` ðŸ¦†.Can query Wikidata, local and remote files.## InstallationInstall with [pipx](https://pypa.github.io/pipx/installation/):```pipx install qabot```## Command Line Usage```bash$ EXPORT OPENAI_API_KEY=sk-...$ EXPORT QABOT_MODEL_NAME=gpt-4$ qabot -w -q &quot;How many Hospitals are there located in Beijing&quot;Query: How many Hospitals are there located in BeijingThere are 39 hospitals located in Beijing.Total tokens 1749 approximate cost in USD: 0.05562```## Python Usage```pythonfrom qabot import ask_wikidata, ask_fileprint(ask_wikidata(&quot;How many hospitals are there in New Zealand?&quot;))print(ask_file(&quot;How many men were aboard the titanic?&quot;, 'data/titanic.csv'))```Output:```textThere are 54 hospitals in New Zealand.There were 577 male passengers on the Titanic.```## FeaturesWorks on local CSV files:![](.github/local_csv_query.png)remote CSV files:```$ qabot -f https://duckdb.org/data/holdings.csv -q &quot;Tell me how many Apple holdings I currently have&quot; ðŸ¦† Creating local DuckDB database... ðŸ¦† Loading data...create view 'holdings' as select * from 'https://duckdb.org/data/holdings.csv'; ðŸš€ Sending query to LLM ðŸ§‘ Tell me how many Apple holdings I currently have ðŸ¤– You currently have 32.23 shares of Apple.This information was obtained by summing up all the Apple ('APPL') shares in the holdings table.SELECT SUM(shares) as total_shares FROM holdings WHERE ticker = 'APPL'```Even on (public) data stored in S3:![](.github/external_s3_data.png)You can even load data from disk/URL via the natural language query:&gt; Load the file 'data/titanic.csv' into a table called 'raw_passengers'. &gt; Create a view of the raw passengers table for just the male passengers. What &gt; was the average fare for surviving male passengers?```~/Dev/qabot&gt; qabot -q &quot;Load the file 'data/titanic.csv' into a table called 'raw_passengers'. Create a view of the raw passengers table for just the male passengers. What was the average fare for surviving male passengers?&quot; -v ðŸ¦† Creating local DuckDB database... ðŸ¤– Using model: gpt-4-1106-preview. Max LLM/function iterations before answer 20 ðŸš€ Sending query to LLM ðŸ§‘ Load the file 'data/titanic.csv' into a table called 'raw_passengers'. Create a view of the raw passengers table for just the male passengers. What was the    average fare for surviving male passengers? ðŸ¤– load_data{'files': ['data/titanic.csv']} ðŸ¦† Imported with SQL:[&quot;create table 'titanic' as select * from 'data/titanic.csv';&quot;] ðŸ¤– execute_sql{'query': &quot;CREATE VIEW male_passengers AS SELECT * FROM titanic WHERE Sex = 'male';&quot;} ðŸ¦† No output ðŸ¤– execute_sql{'query': 'SELECT AVG(Fare) as average_fare FROM male_passengers WHERE Survived = 1;'} ðŸ¦† average_fare40.82148440366974 ðŸ¦† {&quot;summary&quot;: &quot;The average fare for surviving male passengers was approximately $40.82.&quot;, &quot;detail&quot;: &quot;The average fare for surviving male passengers wascalculated by creating a view called `male_passengers` to filter only the male passengers from the `titanic` table, and then running a query to calculate the      average fare for male passengers who survived. The calculated average fare is approximately $40.82.&quot;, &quot;query&quot;: &quot;CREATE VIEW male_passengers AS SELECT * FROM       titanic WHERE Sex = 'male';\nSELECT AVG(Fare) as average_fare FROM male_passengers WHERE Survived = 1;&quot;} ðŸš€ Question: ðŸ§‘ Load the file 'data/titanic.csv' into a table called 'raw_passengers'. Create a view of the raw passengers table for just the male passengers. What was the    average fare for surviving male passengers? ðŸ¤– The average fare for surviving male passengers was approximately $40.82.The average fare for surviving male passengers was calculated by creating a view called `male_passengers` to filter only the male passengers from the `titanic`    table, and then running a query to calculate the average fare for male passengers who survived. The calculated average fare is approximately $40.82.CREATE VIEW male_passengers AS SELECT * FROM titanic WHERE Sex = 'male';SELECT AVG(Fare) as average_fare FROM male_passengers WHERE Survived = 1;```## QuickstartYou need to set the `OPENAI_API_KEY` environment variable to your OpenAI API key, which you can get from [here](https://platform.openai.com/account/api-keys).Install the `qabot` command line tool using pip/pipx:```bash$ pip install -U qabot```Then run the `qabot` command with either local files (`-f my-file.csv`) or `-w` to query wikidata.## Examples### Local CSV file/s```bash$ qabot -q &quot;how many passengers survived by gender?&quot; -f data/titanic.csvðŸ¦† Loading data from files...Loading data/titanic.csv into table titanic...Query: how many passengers survived by gender?Result:There were 233 female passengers and 109 male passengers who survived. ðŸš€ any further questions? [y/n] (y): y ðŸš€ Query: what was the largest family who did not survive? Query: what was the largest family who did not survive?Result:The largest family who did not survive was the Sage family, with 8 members. ðŸš€ any further questions? [y/n] (y): n```## Query WikiDataUse the `-w` flag to query wikidata. For best results use a `gpt-4` or similar model.```bash$ EXPORT QABOT_MODEL_NAME=gpt-4$ qabot -w -q &quot;How many Hospitals are there located in Beijing&quot;```## Intermediate steps and database queriesUse the `-v` flag to see the intermediate steps and database queries.Sometimes it takes a long route to get to the answer, but it's interesting to see how it gets there.```qabot -f data/titanic.csv -q &quot;how many passengers survived by gender?&quot; -v```## Data accessed via http/s3Use the `-f &lt;url&gt;` flag to load data from a url, e.g. a csv file on s3:```bash$ qabot -f s3://covid19-lake/enigma-jhu-timeseries/csv/jhu_csse_covid_19_timeseries_merged.csv -q &quot;how many confirmed cases of covid are there?&quot; -vðŸ¦† Loading data from files...create table jhu_csse_covid_19_timeseries_merged as select * from 's3://covid19-lake/enigma-jhu-timeseries/csv/jhu_csse_covid_19_timeseries_merged.csv';Result:264308334 confirmed cases```## Ideas- streaming mode to output results as they come in- token limits- Supervisor agent - assess whether a query is &quot;safe&quot; to run, could ask for user confirmation to run anything that gets flagged.- Often we can zero-shot the question and get a single query out - perhaps we try this before the MKL chain- test each zeroshot agent individually- Generate and pass back assumptions made to the user- Add an optional &quot;clarify&quot; tool to the chain that asks the user to clarify the question- Create a query checker tool that checks if the query looks valid and/or safe- Inject AWS credentials into duckdb so we can access private resources in S3- Automatic publishing to pypi. Look at https://blog.pypi.org/posts/2023-04-20-introducing-trusted-publishers/</longdescription>
</pkgmetadata>