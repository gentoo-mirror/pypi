<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyTopoJSON [![](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/download/releases/3.4.0/) [![Build Status](https://travis-ci.com/fferrin/pytopojson.svg?branch=master)](https://travis-ci.com/fferrin/pytopojson)[![codecov](https://codecov.io/gh/fferrin/pytopojson/branch/master/graph/badge.svg)](https://codecov.io/gh/fferrin/pytopojson)[![PEP8](https://img.shields.io/badge/code%20style-pep8-orange.svg)](https://www.python.org/dev/peps/pep-0008/)[![Known Vulnerabilities](https://snyk.io/test/github/fferrin/pytopojson/badge.svg?targetFile=requirements.txt)](https://snyk.io/test/github/fferrin/pytopojson)**pyTopoJSON** is based on the work of [Mike Bostock](https://github.com/topojson/topojson-server) and it provides tools for converting GeoJSON to [TopoJSON](https://github.com/topojson). See [How to Infer Topology](https://bost.ocks.org/mike/topology/) for details on how the topology is constructed. See also [us-atlas](https://github.com/topojson/us-atlas) and [world-atlas](https://github.com/topojson/world-atlas) for pre-built TopoJSON.## Installation#### Dependencies**pytopojson** requires:- NumPy (&gt;= 1.15.0)#### User installationIf you already have a working installation of NumPy,the easiest way to install **pytopojson** is using ``pip``:    pip install pytopojson## API Reference&lt;a name=&quot;topology&quot; href=&quot;#topology&quot;&gt;#&lt;/a&gt; pytopojson.topology.&lt;b&gt;Topology()&lt;/b&gt;[&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/pytopojson/topology.py &quot;Source&quot;)You must create a `Topology` object to compute the topology:```python# Import topologyfrom pytopojson import topology# Create Topology objecttopology_ = topology.Topology()# Call it using a GeoJSON (dict) object, a name for the object and a quantization value (optional)topojson = topology_({&quot;object_name&quot;: geojson}, quantization=quantization)```This returns a TopoJSON topology for the specified [GeoJSON *objects*](http://geojson.org/geojson-spec.html#geojson-objects). The returned topology makes a shallow copy of the input `objects`: the identifier, bounding box, properties and coordinates of input objects may be shared with the output topology.If a `quantization` parameter is specified, the input geometry is quantized prior to computing the topology, the returned topology is quantized, and its arcs are [delta-encoded](https://github.com/topojson/topojson-specification/blob/master/README.md#213-arcs). Quantization is recommended to improve the quality of the topology if the input geometry is messy (*i.e.*, small floating point error means that adjacent boundaries do not have identical values); typical values are powers of ten, such as 1e4, 1e5 or 1e6. &lt;a name=&quot;feature&quot; href=&quot;#feature&quot;&gt;#&lt;/a&gt; pytopojson.feature.&lt;b&gt;Feature&lt;/b&gt;(&lt;i&gt;topology&lt;/i&gt;, &lt;i&gt;object&lt;/i&gt;) [&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/pytopojson/feature.py &quot;Source&quot;)Returns the GeoJSON Feature or FeatureCollection for the specified *object* in the given `topology`. If the specified object is a string, it is treated as `topology*['objects'][object]`. Then, if the object is a GeometryCollection, a FeatureCollection is returned, and each geometry in the collection is mapped to a Feature. Otherwise, a Feature is returned. The returned feature is a shallow copy of the source `object`: they may share identifiers, bounding boxes, properties and coordinates.Some examples:* A point is mapped to a feature with a geometry object of type &quot;Point&quot;.* Likewise for line strings, polygons, and other simple geometries.* A null geometry object (of type null in TopoJSON) is mapped to a feature with a null geometry object.* A geometry collection of points is mapped to a feature collection of features, each with a point geometry.* A geometry collection of geometry collections is mapped to a feature collection of features, each with a geometry collection.See [test_feature.py](https://github.com/fferrin/pytopojson/blob/master/tests/test_feature.py) for more examples.&lt;a name=&quot;merge&quot; href=&quot;#merge&quot;&gt;#&lt;/a&gt; pytopojson.merge.&lt;b&gt;Merge&lt;/b&gt;(&lt;i&gt;topology&lt;/i&gt;, &lt;i&gt;objects&lt;/i&gt;) [&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/pytopojson/merge.py &quot;Source&quot;)Returns the GeoJSON MultiPolygon geometry object representing the union for the specified array of Polygon and MultiPolygon `objects` in the given `topology`. Interior borders shared by adjacent polygons are removed. See [Merging States](https://bl.ocks.org/mbostock/5416405) for an example. The returned geometry is a shallow copy of the source `object`: they may share coordinates.&lt;a name=&quot;mergeArcs&quot; href=&quot;#mergeArcs&quot;&gt;#&lt;/a&gt; pytopojson.merge.&lt;b&gt;MergeArcs&lt;/b&gt;(&lt;i&gt;topology&lt;/i&gt;, &lt;i&gt;objects&lt;/i&gt;) [&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/pytopojson/merge.py &quot;Source&quot;)Equivalent to [topojson.merge.Merge()](#merge), but returns TopoJSON rather than GeoJSON. The returned geometry is a shallow copy of the source `object`: they may share coordinates.&lt;a name=&quot;mesh&quot; href=&quot;#mesh&quot;&gt;#&lt;/a&gt; pytopojson.mesh.&lt;b&gt;Mesh&lt;/b&gt;(&lt;i&gt;topology&lt;/i&gt;[, &lt;i&gt;object&lt;/i&gt;[, &lt;i&gt;filter&lt;/i&gt;]])[&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/pytopojson/mesh.py &quot;Source&quot;)Returns the GeoJSON MultiLineString geometry object representing the mesh for the specified `object` in the given `topology`. This is useful for rendering strokes in complicated objects efficiently, as edges that are shared by multiple features are only stroked once. If `object` is not specified, a mesh of the entire topology is returned. The returned geometry is a shallow copy of the source `object`: they may share coordinates.An optional `filter` function may be specified to prune arcs from the returned mesh using the topology. The filter function is called once for each candidate arc and takes two arguments, `a` and `b`, two geometry objects that share that arc. Each arc is only included in the resulting mesh if the filter function returns `True`. For typical map topologies the geometries `a` and `b` are adjacent polygons and the candidate arc is their boundary. If an arc is only used by a single geometry then `a` and `b` are identical. This property is useful for separating interior and exterior boundaries; an easy way to produce a mesh of interior boundaries is:```python# Import topologyfrom pytopojson import mesh# Create Mesh object and filtermesh_ = mesh.Mesh()custom_filter = lambda x, y: x != yinteriors = mesh_(topology, object_, custom_filter)```See this [county choropleth](https://bl.ocks.org/mbostock/4060606) for example. Note: the `a` and `b` objects are TopoJSON objects (pulled directly from the topology), and not automatically converted to GeoJSON features as by [topojson.feature.Feature()](#feature).&lt;a name=&quot;meshArcs&quot; href=&quot;#meshArcs&quot;&gt;#&lt;/a&gt; pytopojson.mesh.&lt;b&gt;MeshArcs&lt;/b&gt;(&lt;i&gt;topology&lt;/i&gt;[, &lt;i&gt;object&lt;/i&gt;[, &lt;i&gt;filter&lt;/i&gt;]])[&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/pytopojson/mesh.py &quot;Source&quot;)Equivalent to [topojson.mesh.Mesh()](#mesh), but returns TopoJSON rather than GeoJSON. The returned geometry is a shallow copy of the source `object`: they may share coordinates.&lt;a name=&quot;neighbors&quot; href=&quot;#neighbors&quot;&gt;#&lt;/a&gt; pytopojson.neighbors.&lt;b&gt;Neighbors&lt;/b&gt;(&lt;i&gt;objects&lt;/i&gt;)[&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/pytopojson/neighbors.py &quot;Source&quot;)Returns an array representing the set of neighboring objects for each object in the specified `objects` array. The returned array has the same number of elements as the input array; each element `i` in the returned array is the array of indexes for neighbors of object `i` in the input array. For example, if the specified objects array contains the features `foo` and `bar`, and these features are neighbors, the returned array will be `[[1], [0]]`, indicating that `foo` is a neighbor of `bar` and vice versa. Each array of neighbor indexes for each object is guaranteed to be sorted in ascending order.For a practical example, see the [world map](https://bl.ocks.org/mbostock/4180634) with topological coloring.### Transforms&lt;a name=&quot;bbox&quot; href=&quot;#bbox&quot;&gt;#&lt;/a&gt; pytopojson.bbox.&lt;b&gt;BBox&lt;/b&gt;(&lt;i&gt;topology&lt;/i&gt;)[&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/pytopojson/bbox.py &quot;Source&quot;)Returns the computed [bounding box](https://github.com/topojson/topojson-specification#3-bounding-boxes) of the specified `topology` [*x*₀, *y*₀, *x*₁, *y*₁] where *x*₀ is the minimum *x*-value, *y*₀ is the minimum *y*-value, *x*₁ is the maximum *x*-value, and *y*₁ is the maximum *y*-value. If the `topology` has no points and no arcs, the returned bounding box is [∞, ∞, -∞, -∞]. (This method ignores the existing `topology`.bbox, if any.)&lt;a name=&quot;quantize&quot; href=&quot;#quantize&quot;&gt;#&lt;/a&gt; pytopojson.quantize.&lt;b&gt;Quantize&lt;/b&gt;(&lt;i&gt;topology&lt;/i&gt;, &lt;i&gt;transform&lt;/i&gt;)[&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/pytopojson/quantize.py &quot;Source&quot;)Returns a shallow copy of the specified `topology` with [quantized and delta-encoded](https://github.com/topojson/topojson-specification#213-arcs) arcs according to the specified [`transform` object](https://github.com/topojson/topojson-specification/blob/master/README.md#212-transforms). If the `topology` is already quantized, an error is thrown. See also [topoquantize](#topoquantize).If a quantization number `n` is specified instead of a `transform` object, the corresponding transform object is first computed using the bounding box of the topology. In this case, the quantization number `n` must be a positive integer greater than one which determines the maximum number of expressible values per dimension in the resulting quantized coordinates; typically, a power of ten is chosen such as 1e4, 1e5 or 1e6. If the `topology` does not already have a `topology`.bbox, one is computed using [topojson.bbox.BBox](#bbox).&lt;a name=&quot;transform&quot; href=&quot;#transform&quot;&gt;#&lt;/a&gt; pytopojson.transform.&lt;b&gt;Transform&lt;/b&gt;(&lt;i&gt;transform&lt;/i&gt;)[&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/pytopojson/transform.py &quot;Source&quot;)If the specified [`transform` object](https://github.com/topojson/topojson-specification/blob/master/README.md#212-transforms) is non-null, returns a [point `transform` function](#_transform) to remove delta-encoding and apply the transform. If the `transform` is null, returns the identity function.&lt;a name=&quot;untransform&quot; href=&quot;#untransform&quot;&gt;#&lt;/a&gt; pytopojson.untransform.&lt;b&gt;Untransform&lt;/b&gt;(&lt;i&gt;transform&lt;/i&gt;)[&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/pytopojson/untransform.py &quot;Source&quot;)If the specified [`transform` object](https://github.com/topojson/topojson-specification/blob/master/README.md#212-transforms) is non-null, returns a [point `transform` function](#_transform) to apply quantized delta-encoding and remove the transform. If the `transform` is null, returns the identity function. See also [topojson.quantize.Quantize()](#quantize).## Command-Line ReferenceSome command-line tools are also provided:### geo2topo&lt;a name=&quot;geo2topo&quot; href=&quot;#geo2topo&quot;&gt;#&lt;/a&gt; &lt;b&gt;geo2topo&lt;/b&gt; [&lt;i&gt;options…&lt;/i&gt;] [&lt;i&gt;name&lt;/i&gt;=]&lt;i&gt;file&lt;/i&gt;… [&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/bin/geo2topo.py &quot;Source&quot;)Converts one or more GeoJSON objects to an output topology. For example, to convert a GeoJSON FeatureCollection in the input file us-states.json to a TopologyJSON topology in the output file us.json:```bashpython geo2topo.py states=us-states.json &gt; us.json```The resulting topology has a “states” object which corresponds to the input geometry. For convenience, you can omit the object name and specify only the output `file` name; the object name will then be the basename of the file, with the directory and extension removed. For example, to convert the states.json GeoJSON FeatureCollection to a TopologyJSON topology with the “states” object in us.json:```bashpython geo2topo.py states.json &gt; us.json```Any properties and identifiers of input [feature objects](https://tools.ietf.org/html/rfc7946#section-3.2) are propagated to the output. If you want to transform or filter properties, try [ndjson-cli](https://github.com/mbostock/ndjson-cli) as demonstrated in [Command-Line Cartography](https://medium.com/@mbostock/command-line-cartography-part-1-897aa8f8ca2c).&lt;a name=&quot;geo2topo_help&quot; href=&quot;#geo2topo_help&quot;&gt;#&lt;/a&gt; geo2topo &lt;b&gt;-h&lt;/b&gt;&lt;br&gt;&lt;a href=&quot;#geo2topo_help&quot;&gt;#&lt;/a&gt; geo2topo &lt;b&gt;--help&lt;/b&gt;Output usage information.&lt;a name=&quot;geo2topo_version&quot; href=&quot;#geo2topo_version&quot;&gt;#&lt;/a&gt; geo2topo &lt;b&gt;-V&lt;/b&gt;&lt;br&gt;&lt;a href=&quot;#geo2topo_version&quot;&gt;#&lt;/a&gt; geo2topo &lt;b&gt;--version&lt;/b&gt;Output the version number.&lt;a name=&quot;geo2topo_out&quot; href=&quot;#geo2topo_out&quot;&gt;#&lt;/a&gt; geo2topo &lt;b&gt;-o&lt;/b&gt; &lt;i&gt;file&lt;/i&gt;&lt;br&gt;&lt;a href=&quot;#geo2topo_out&quot;&gt;#&lt;/a&gt; geo2topo &lt;b&gt;--out&lt;/b&gt; &lt;i&gt;file&lt;/i&gt;Specify the output TopoJSON file name. Defaults to “-” for stdout.&lt;a name=&quot;geo2topo_quantization&quot; href=&quot;#geo2topo_quantization&quot;&gt;#&lt;/a&gt; geo2topo &lt;b&gt;-q&lt;/b&gt; &lt;i&gt;count&lt;/i&gt;&lt;br&gt;&lt;a href=&quot;#geo2topo_quantization&quot;&gt;#&lt;/a&gt; geo2topo &lt;b&gt;--quantization&lt;/b&gt; &lt;i&gt;count&lt;/i&gt;Specify a pre-quantization parameter. 0 disables quantization. See &lt;a href=&quot;#topology&quot;&gt;pytopojson.topology.Topology&lt;/a&gt; for a description of quantization.### topo2geo&lt;a name=&quot;topo2geo&quot; href=&quot;#topo2geo&quot;&gt;#&lt;/a&gt; &lt;b&gt;topo2geo&lt;/b&gt; [&lt;i&gt;options…&lt;/i&gt;] [&lt;i&gt;name&lt;/i&gt;=]&lt;i&gt;file&lt;/i&gt;… [&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/bin/topo2geo.py &quot;Source&quot;)Converts one or more TopoJSON objects from an input topology to one or more GeoJSON features. For example, to convert the &quot;states&quot; TopoJSON `GeometryCollection` object in `us.json` to a GeoJSON feature collection in `us-states.json`:```bashpython topo2geo.py states=us-states.json &lt; us.json```For convenience, you can omit the object name and specify only the file *name*; the object name will be the basename of the file, with the directory and extension removed. For example, to convert the &quot;states&quot; TopoJSON `GeometryCollection` object in `us.json` to a GeoJSON feature collection in `states.json`:```bashpython topo2geo.py states.json &lt; us.json```See also [geo2topo](https://github.com/fferrin/pytopojson/blob/master/README.md#geo2topo).To list the available object names, use [--list](#topo2geo_list).&lt;a name=&quot;topo2geo_help&quot; href=&quot;#topo2geo_help&quot;&gt;#&lt;/a&gt; topo2geo &lt;b&gt;-h&lt;/b&gt;&lt;br&gt;&lt;a href=&quot;#topo2geo_help&quot;&gt;#&lt;/a&gt; topo2geo &lt;b&gt;--help&lt;/b&gt;Output usage information.&lt;a name=&quot;topo2geo_version&quot; href=&quot;#topo2geo_version&quot;&gt;#&lt;/a&gt; topo2geo &lt;b&gt;-V&lt;/b&gt;&lt;br&gt;&lt;a href=&quot;#topo2geo_version&quot;&gt;#&lt;/a&gt; topo2geo &lt;b&gt;--version&lt;/b&gt;Output the version number.&lt;a name=&quot;topo2geo_in&quot; href=&quot;#topo2geo_in&quot;&gt;#&lt;/a&gt; topo2geo &lt;b&gt;-i&lt;/b&gt; &lt;i&gt;file&lt;/i&gt;&lt;br&gt;&lt;a href=&quot;#topo2geo_in&quot;&gt;#&lt;/a&gt; topo2geo &lt;b&gt;--in&lt;/b&gt; &lt;i&gt;file&lt;/i&gt;Specify the input TopoJSON file name. Defaults to &quot;-&quot; for stdin.&lt;a name=&quot;topo2geo_list&quot; href=&quot;#topo2geo_list&quot;&gt;#&lt;/a&gt; topo2geo &lt;b&gt;-l&lt;/b&gt;&lt;br&gt;&lt;a href=&quot;#topo2geo_list&quot;&gt;#&lt;/a&gt; topo2geo &lt;b&gt;--list&lt;/b&gt;List the names of the objects in the input topology, and then exit. For example, this:```bashpython topo2geo.py -l &lt; us.json```Will output this:```countiesstatesnation```### topoquantize&lt;a name=&quot;topoquantize&quot; href=&quot;#topoquantize&quot;&gt;#&lt;/a&gt; &lt;b&gt;topoquantize&lt;/b&gt;[&lt;i&gt;options…&lt;/i&gt;] -q &lt;q&gt; [&lt;i&gt;input&lt;/i&gt;] [&lt;&gt;](https://github.com/fferrin/pytopojson/blob/master/bin/topoquantize.py &quot;Source&quot;)Quantizes the coordinates of the input TopoJSON topology and [delta-encodes](https://github.com/topojson/topojson-specification#213-arcs) the topology’s arcs. The quantization parameter `q` must be a positive integer greater than one, and determines the maximum expressible number of unique values per dimension in the resulting quantized coordinates; typically, a power of ten is chosen such as 1e4, 1e5 or 1e6. If the `topology` does not already have a [bbox](#bbox), one is computed and assigned. If the `topology` is already quantized, an error is thrown. See also [pytopojson.quantize.Quantize](#quantize).&lt;a name=&quot;topoquantize_help&quot; href=&quot;#topoquantize_help&quot;&gt;#&lt;/a&gt; topoquantize &lt;b&gt;-h&lt;/b&gt;&lt;br&gt;&lt;a href=&quot;#topoquantize_help&quot;&gt;#&lt;/a&gt; topoquantize &lt;b&gt;--help&lt;/b&gt;Output usage information.&lt;a name=&quot;topoquantize_version&quot; href=&quot;#topoquantize_version&quot;&gt;#&lt;/a&gt; topoquantize &lt;b&gt;-V&lt;/b&gt;&lt;br&gt;&lt;a href=&quot;#topoquantize_version&quot;&gt;#&lt;/a&gt; topoquantize &lt;b&gt;--version&lt;/b&gt;Output the version number.&lt;a name=&quot;topoquantize_in&quot; href=&quot;#topoquantize_in&quot;&gt;#&lt;/a&gt; topoquantize &lt;b&gt;-i&lt;/b&gt; &lt;i&gt;input&lt;/i&gt;&lt;br&gt;&lt;a href=&quot;#topoquantize_in&quot;&gt;#&lt;/a&gt; topoquantize &lt;b&gt;--in&lt;/b&gt; &lt;i&gt;input&lt;/i&gt;Specify the input TopoJSON. Defaults to &quot;-&quot; for stdin.&lt;a name=&quot;topoquantize_out&quot; href=&quot;#topoquantize_out&quot;&gt;#&lt;/a&gt; topoquantize &lt;b&gt;-o&lt;/b&gt; &lt;i&gt;output&lt;/i&gt;&lt;br&gt;&lt;a href=&quot;#topoquantize_out&quot;&gt;#&lt;/a&gt; topoquantize &lt;b&gt;--out&lt;/b&gt; &lt;i&gt;output&lt;/i&gt;Specify the output TopoJSON file name. Defaults to &quot;-&quot; for stdout.</longdescription>
</pkgmetadata>