<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyJWT RSA Helper================Helpers for JWT tokens with RSA... code-block:: python    &gt;&gt;&gt; from jwt_rsa.token import JWT    &gt;&gt;&gt; from jwt_rsa.rsa import generate_rsa    &gt;&gt;&gt;    &gt;&gt;&gt; bits = 2048    &gt;&gt;&gt;    &gt;&gt;&gt; private_key, public_key = generate_rsa(bits)    &gt;&gt;&gt;    &gt;&gt;&gt; jwt = JWT(private_key, public_key)    &gt;&gt;&gt;    &gt;&gt;&gt; token = jwt.encode(foo='bar')    &gt;&gt;&gt; result = jwt.decode(token)    &gt;&gt;&gt; result    {'foo': 'bar', 'exp': 1525941819.638339, 'nbf': 1523349799.638342}    &gt;&gt;&gt; # Expired token    &gt;&gt;&gt; token = jwt.encode(foo='bar', expired=-1)    &gt;&gt;&gt; jwt.decode(token)    Traceback (most recent call last):    ...    jwt.exceptions.ExpiredSignatureError: Signature has expired    &gt;&gt;&gt; # No verify token signature and expiration    &gt;&gt;&gt; jwt.decode(token, verify=False)    {'foo': 'bar', 'exp': -1, 'nbf': 1523350046.935803}Command line utilities----------------------Module provides following utilitiesjwt-rsa-keygen++++++++++++++Creates a new key pair:.. code-block::   $ jwt-rsa-keygen -h                                                                                                                                                                                              ±8 ?3 master   usage: jwt-rsa-keygen [-h] [-b BITS] [-P]   optional arguments:     -h, --help            show this help message and exit     -b BITS, --bits BITS     -P, --pemBy default this utility return JSON-serialized key pair:.. code-block::   $ jwt-rsa-keygen                                                                                                                                                                                                 ±8 ?3 master   {      &quot;private&quot;: &quot;MIIEvgIBADANBg......h3MBsSzx&quot;,      &quot;public&quot;: &quot;MIIBCgKCAQEAxUU......5niBEjAB&quot;   }Add parameter `-P` for return in PEM format:.. code-block::   $ jwt-rsa-keygen -P                                                                                                                                                                                              ±8 ?3 master   -----BEGIN PRIVATE KEY-----   MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDDeiI5V/O/Mbff   ...   LGQgWf5ch0t1+Rh3tjIuuSc=   -----END PRIVATE KEY-----   -----BEGIN RSA PUBLIC KEY-----   MIIBCgKCAQEAw3oiOVfzvzG331nAL5hGHbblcCaV3pbfoCiFRgwpNPf7snIJtw97   ...   3k2mMT1z6NFO6e6LMxg2zrqs3zgqwx5/9wIDAQAB   -----END RSA PUBLIC KEY-----jwt-rsa-verify++++++++++++++Verify JSON serialized key pair:.. code-block::   $ jwt-rsa-keygen | jwt-rsa-verify                                                                                                                                                                                ±8 ?3 master   INFO:root:Awaiting JSON on stdin...   INFO:root:Signing OK   INFO:root:Verifying OKOr failed when key pair is invalid or doesn't match:.. code-block::   $ jwt-rsa-keygen | sed 's/M/j/' | jwt-rsa-verify                                                                                                                                                                 ±8 ?3 master   INFO:root:Awaiting JSON on stdin...   Traceback (most recent call last):     ...   ValueError: Could not deserialize key data.</longdescription>
</pkgmetadata>