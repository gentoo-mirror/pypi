<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># py-termPython module to style terminal output, moving and positioning the cursor.**Python 2 and 3 compatible**![alt text](pyterm.jpg &quot;See? amazing!&quot;)## InstallationInstall through **pip**.```$ pip install py-term```or get from source```$ git clone https://github.com/gravmatt/py-term.git$ cd py-term$ python setup.py install```## Import moduleImport the module into your python project.```import term```## Usage```term.write('Hello, ')term.write('Python!')&gt; Hello, Python!term.writeLine('Hello')term.writeLine('Python!')&gt; Hello&gt; Python!```## Style outputThe first argument is the text output and all following arguments are for styling.```term.writeLine(text, *style)Ortext = term.format(text, *style)term.writeLine(text)```### Usage```term.writeLine('Hello, Python!')term.writeLine('This text line will be green', term.green)term.writeLine('Reverse the green color', term.green, term.reverse)```Or```output = term.format('Hello, ', term.green) + term.format('Python!', term.blue, term.bold)term.writeLine(output)term.write(term.format('All in one line', term.reverse))```#### Text align**Center align**```# term.textCenter(text)term.writeLine(term.textCenter('Super Python!'))```**Right align**```# term.textRight(text)term.writeLine(term.textRight('Rene Tanczos (@gravmatt)'))( Function term.right() to align text is depricated because of naming conflicts! )```##### Style attributes| Code                  | Description                          || :-------------------- | :----------------------------------- || term.off        | All attributes off                   || term.bold       | Bold                                 || term.dim        | Dim                                  || term.underscore | Underscore (monochrome display only) || term.blink      | Blink                                || term.reverse    | Reverse                              || term.hide       | Hide                                 |##### Text color| Code               | Color       || :----------------- | :---------- || term.black   | Black       || term.red     | Red         || term.green   | Green       || term.yellow  | Yellow      || term.blue    | Blue        || term.magenta | Magenta     || term.cyan    | Cyan        || term.white   | White       |##### Background color| Code                 | Color       || :------------------- | :---------- || term.bgblack   | Black       || term.bgred     | Red         || term.bggreen   | Green       || term.bgyellow  | Yellow      || term.bgblue    | Blue        || term.bgMagenta | Magenta     || term.bgcyan    | Cyan        || term.bgwhite   | White       |## Remove style attributesRemoves style characters.(Good to call before you count a string)```term.strip(formatted_text)hello = term.red + 'hello, world' + term.offprint hello# '\x1b[31mhello, world\x1b[0m\x1b[27m'print term.strip(hello)# hello, world```## Highlighting textSimple highlighting of unformatted text strings```def callback(matching_text):  return term.blue + matching_text + term.offoutput, match_count, array_of_positions = term.highlight(regex_pattern, text, callback)```Return a tuple.output (index 0) = formatted text outputmatch_count (index 1) = match count of the patternarray_of_positions (index 2) = array of tuples with start and stop points of the matches [(4, 6), (9, 11), ..]## Set title```term.setTitle('Hello Terminal')# or clear itterm.clearTitle()```## Set tab name```term.setTab('Hello Tab')# or clear itterm.clearTab()```## Cursor positionMove the cursor to a specific position.```term.pos(line, column)term.pos(2, 15)```Get the size of the terminal (lines and columns)```(30, 100) = term.getSize()# (lines, colums) = term.getSize()```Move the cursor to the home position (1, 1).```term.homePos()```Moves the current cursor position up, down, left or right by the specified value.```term.up(value=1)term.down(value=1)term.left(value=1)term.right(value=1)```Saves the current cursor position.```term.saveCursor()```Restore the previously stored cursor position.```term.restoreCursor()```Clear the terminal screen.```term.clear()```Clear the entire line on the current cursor position.```term.clearLine()```Clear line from the current cursor position to the end.```term.clearLineFromPos()```Clear line from begin to current cursor position.```term.clearLineToPos()```## LicenceThe MIT License (MIT)Copyright (c) 2015-2021 Ren√© TanczosPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>