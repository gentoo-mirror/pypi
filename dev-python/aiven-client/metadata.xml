<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Aiven Client |BuildStatus|_###########################.. |BuildStatus| image:: https://github.com/aiven/aiven-client/workflows/Build%20Aiven%20Client/badge.svg?branch=main.. _BuildStatus: https://github.com/aiven/aiven-client/actionsAiven is a next-generation managed cloud services platform.  Its focus is inease of adoption, high fault resilience, customer's peace of mind andadvanced features at competitive price points.  See https://aiven.io/ formore information about the backend service.aiven-client (``avn``) is the official command-line client for Aiven... contents::.. _platform-requirements:Getting Started===============Requirements:*  Python 3.8 or later*  Requests_*  For Windows and OSX, certifi_ is also needed.. _`Requests`: http://www.python-requests.org/.. _`certifi`: https://github.com/certifi/python-certifi.. _installation:Install from PyPi-----------------Pypi installation is the recommended route for most users::  $ python3 -m pip install aiven-clientBuild an RPM Package--------------------It is also possible to build an RPM::  $ make rpmCheck Installation------------------To check that the tool is installed and working, run it without arguments::  $ avnIf you see usage output, you're all set.  **Note:** On Windows you may need to use ``python3 -m aiven.client`` instead of ``avn``.Log In------The simplest way to use Aiven CLI is to authenticate with the username andpassword you use on Aiven::  $ avn user login &lt;you@example.com&gt;The command will prompt you for your password.You can also use an access token generated in the Aiven Console::  $ avn user login &lt;you@example.com&gt; --tokenYou will be prompted for your access token as above.If you are registered on Aiven through the AWS or GCP marketplace, then you need to specify an additional argument ``--tenant``. Currently the supported value are ``aws`` and ``gcp``, for example::  $ avn user login &lt;you@example.com&gt; --tenant aws.. _help-command:.. _basic-usage:Usage=====Some handy hints that work with all commands:*  The ``avn help`` command shows all commands and can *search* for a command,   so for example ``avn help kafka topic`` shows commands with kafka *and*   topic in their description.*  Passing ``-h`` or ``--help`` gives help output for any command. Examples:   ``avn --help`` or ``avn service --help``.*  All commands will output the raw REST API JSON response with ``--json``,   we use this extensively ourselves in conjunction with   `jq &lt;https://stedolan.github.io/jq/&gt;`__... _login-and-users:Authenticate: Logins and Tokens-------------------------------Login::  $ avn user login &lt;you@example.com&gt;Logout (revokes current access token, other sessions remain valid)::  $ avn user logoutExpire all authentication tokens for your user, logs out all web console sessions, etc.You will need to login again after this:: $ avn user tokens-expireManage individual access tokens:: $ avn user access-token list $ avn user access-token create --description &lt;usage_description&gt; [--max-age-seconds &lt;secs&gt;] [--extend-when-used] $ avn user access-token update &lt;token|token_prefix&gt; --description &lt;new_description&gt; $ avn user access-token revoke &lt;token|token_prefix&gt;Note that the system has hard limits for the number of tokens you can create. If you'repermanently done using a token you should always use ``user access-token revoke`` operationto revoke the token so that it does not count towards the quota.Alternatively, you can add 2 JSON files, first create a default config in ``~/.config/aiven/aiven-credentials.json`` containing the JSON with an ``auth_token``::  {      &quot;auth_token&quot;: &quot;ABC1+123...TOKEN==&quot;,      &quot;user_email&quot;: &quot;you@example.com&quot;  }Second create a default config in ``~/.config/aiven/aiven-client.json`` containing the json with the ``default_project``::  {&quot;default_project&quot;: &quot;yourproject-abcd&quot;}.. _clouds:Choose your Cloud-----------------List available cloud regions::  $ avn cloud list.. _projects:Working with Projects---------------------List projects you are a member of::  $ avn project listProject commands operate on the currently active project or the projectspecified with the ``--project NAME`` switch. The active project cab be changedwith the ``project switch`` command::  $ avn project switch &lt;projectname&gt;Show active project's details::  $ avn project detailsCreate a project and set the default cloud region for it::  $ avn project create myproject --cloud aws-us-east-1Delete an empty project::  $ avn project delete myprojectList authorized users in a project::  $ avn project user-listInvite an existing Aiven user to a project::  $ avn project user-invite somebody@example.comRemove a user from the project::  $ avn project user-remove somebody@example.comView project management event log::  $ avn events.. _services:Explore Existing Services-------------------------List services (of the active project)::  $ avn service listList services in a specific project::  $ avn service list --project proj2List only a specific service::  $ avn service list db1Verbose list (includes connection information, etc.)::  $ avn service list db1 -vFull service information in JSON, as it is returned by the Aiven REST API::  $ avn service list db1 --jsonOnly a specific field in the output, custom formatting::  $ avn service list db1 --format &quot;The service is at {service_uri}&quot;View service log entries (most recent entries and keep on following logs, other options can be used to get history)::  $ avn service logs db1 -f.. _launching-services:Launch Services---------------View available service plans::  $ avn service plansLaunch a PostgreSQL service::  $ avn service create mydb -t pg --plan hobbyistView service type specific options, including examples on how to set them::  $ avn service types -vLaunch a PostgreSQL service of a specific version (see above command)::  $ avn service create mydb96 -t pg --plan hobbyist -c pg_version=9.6Update a service's list of allowed client IP addresses. Note that a list of multiplevalues is provided as a comma separated list::  $ avn service update mydb96 -c ip_filter=10.0.1.0/24,10.0.2.0/24,1.2.3.4/32Open psql client and connect to the PostgreSQL service (also available for InfluxDB)::  $ avn service cli mydb96Update a service to a different plan AND move it to another cloud region::  $ avn service update mydb --plan startup-4 --cloud aws-us-east-1Power off a service::  $ avn service update mydb --power-offPower on a service::  $ avn service update mydb --power-onTerminate a service (all data will be gone!)::  $ avn service terminate mydbManaging service users----------------------Some service types support multiple users (e.g. PostgreSQL database users).List, add and delete service users::  $ avn service user-list  $ avn service user-create  $ avn service user-deleteFor Redis services running version 6 or above, it's possible to create users with ACLs_::  $ avn service user-create --username new_user --redis-acl-keys=&quot;prefix* another_key&quot; --redis-acl-commands=&quot;+set&quot; --redis-acl-categories=&quot;-@all +@admin&quot; --redis-acl-channels=&quot;prefix* some_chan&quot; my-redis-service.. _`ACLs`: https://redis.io/topics/aclService users are created with strong random passwords.Service Integrations--------------------`Service integrations &lt;https://aiven.io/service-integrations&gt;`_ allow to link Aiven services to other Aiven services or to servicesoffered by other companies for example for logging. Some examples for various diffenent integrations:`Google cloud logging`_, `AWS Cloudwatch logging`_, `Remote syslog integration`_ and `Getting started with Datadog`_... _`Google cloud logging`: https://help.aiven.io/en/articles/4209837-sending-service-logs-to-google-cloud-logging.. _`AWS Cloudwatch logging`: https://help.aiven.io/en/articles/4134821-sending-service-logs-to-aws-cloudwatch.. _`Remote syslog integration`: https://help.aiven.io/en/articles/2933115-remote-syslog-integration.. _`Getting started with Datadog`: https://help.aiven.io/en/articles/1759208-getting-started-with-datadogList service integration endpoints::    $ avn service integration-endpoint-listList all available integration endpoint types for given project::    $ avn service integration-endpoint-types-list --project &lt;project&gt;Create a service integration endpoint::    $ avn service integration-endpoint-create --project &lt;project&gt; --endpoint-type &lt;endpoint type&gt; --endpoint-name &lt;endpoint name&gt; --user-config-json &lt;user configuration as json&gt;    $ avn service integration-endpoint-create --project &lt;project&gt; --endpoint-type &lt;endpoint type&gt; --endpoint-name &lt;endpoint name&gt; -c &lt;KEY=VALUE type user configuration&gt;Update a service integration endpoint::    $ avn service integration-endpoint-update --project &lt;project&gt; --user-config-json &lt;user configuration as json&gt; &lt;endpoint id&gt;    $ avn service integration-endpoint-update --project &lt;project&gt; -c &lt;KEY=VALUE type user configuration&gt; &lt;endpoint id&gt;Delete a service integration endpoint::    $ avn service integration-endpoint-delete --project &lt;project&gt;  &lt;endpoint_id&gt;List service integrations::    $ avn service integration-list &lt;service name&gt;List all available integration types for given project::    $ avn service integration-types-list --project &lt;project&gt;Create a service integration::    $ avn service integration-create --project &lt;project&gt; -t &lt;integration type&gt; -s &lt;source service&gt; -d &lt;dest service&gt; -S &lt;source endpoint id&gt; -D &lt;destination endpoint id&gt; --user-config-json &lt;user configuration as json&gt;    $ avn service integration-create --project &lt;project&gt; -t &lt;integration type&gt; -s &lt;source service&gt; -d &lt;dest service&gt; -S &lt;source endpoint id&gt; -D &lt;destination endpoint id&gt; -c &lt;KEY=VALUE type user configuration&gt;Update a service integration::    $ avn service integration-update --project &lt;project&gt; --user-config-json &lt;user configuration as json&gt; &lt;integration_id&gt;    $ avn service integration-update --project &lt;project&gt; -c &lt;KEY=VALUE type user configuration&gt; &lt;integration_id&gt;Delete a service integration::    $ avn service integration-delete --project &lt;project&gt; &lt;integration_id&gt;.. _teams:Working with Teams------------------List account teams::  $ avn account team list &lt;account_id&gt;Create a team::  $ avn account team create --team-name &lt;team_name&gt; &lt;account_id&gt;Delete a team::  $ avn account team delete --team-id &lt;team_id&gt; &lt;account_id&gt;Attach team to a project::  $ avn account team project-attach --team-id &lt;team_id&gt; --project &lt;project_name&gt; &lt;account_id&gt; --team-type &lt;admin|developer|operator|read_only&gt;Detach team from project::  $ avn account team project-detach --team-id &lt;team_id&gt; --project &lt;project_name&gt; &lt;account_id&gt;List projects associated to the team::  $ avn account team project-list --team-id &lt;team_id&gt; &lt;account_id&gt;List members of the team::  $ avn account team user-list --team-id &lt;team_id&gt; &lt;account_id&gt;Invite a new member to the team::  $ avn account team user-invite --team-id &lt;team_id&gt; &lt;account_id&gt; &lt;somebody@example.com&gt;See the list of pending invitations::  $ avn account team user-list-pending --team-id &lt;team_id&gt; &lt;account_id&gt;Remove user from the team::  $ avn account team user-delete --team-id &lt;team_id&gt; --user-id &lt;user_id&gt; &lt;account_id&gt;.. _oauth2-clients:Configuring OAuth2 Clients--------------------------List configured OAuth2 clients::  $ avn account oauth2-client list &lt;account_id&gt;Get a configured OAuth2 client's configuration::  $ avn account oauth2-client list &lt;account_id&gt; --oauth2-client-id &lt;client_id&gt;Create a new OAuth2 client information::  $ avn account oauth2-client create &lt;account_id&gt; --name &lt;app_name&gt; -d &lt;app_description&gt; --redirect-uri &lt;redirect_uri&gt;Delete an OAuth2 client::  $ avn account oauth2-client delete &lt;account_id&gt; --oauth2-client-id &lt;client_id&gt;List an OAuth2 client's redirect URIs::  $ avn account oauth2-client redirect-list &lt;account_id&gt; --oauth2-client-id &lt;client_id&gt;Create a new OAuth2 client redirect URI::  $ avn account oauth2-client redirect-create &lt;account_id&gt; --oauth2-client-id &lt;client_id&gt; --redirect-uri &lt;redirect_uri&gt;Delete an OAuth2 client redirect URI::  $ avn account oauth2-client redirect-delete &lt;account_id&gt; --oauth2-client-id &lt;client_id&gt; --redirect-uri-id &lt;redirect_uri_id&gt;List an OAuth2 client's secrets::  $ avn account oauth2-client secret-list &lt;account_id&gt; --oauth2-client-id &lt;client_id&gt;Create a new OAUth2 client secret::  $ avn account oauth2-client secret-create &lt;account_id&gt; --oauth2-client-id &lt;client_id&gt;Delete an OAuth2 client's secret::  $ avn account oauth2-client secret-delete &lt;account_id&gt; --oauth2-client-id &lt;client_id&gt; --secret-id &lt;secret_id&gt;Extra Features==============.. _shell-completions:Autocomplete------------avn supports shell completions. It requires an optional dependency: argcomplete. Install it::  $ python3 -m pip install argcompleteTo use completions in bash, add following line to ``~/.bashrc``::  eval &quot;$(register-python-argcomplete avn)&quot;For more information (including completions usage in other shells) see https://kislyuk.github.io/argcomplete/.Auth Helpers------------When you spin up a new service, you'll want to connect to it. The ``--json`` option combined with the `jq &lt;https://stedolan.github.io/jq/&gt;`_ utility is a good way to grab the fields you need for your specific service. Try this to get the connection string::  $ avn service get --json &lt;service&gt; | jq &quot;.service_uri&quot;Each project has its own CA cert, and other services (notably Kafka) use mutualTLS so you will also need the ``service.key`` and ``service.cert`` files too for those. Download all three files to the local directory::  $ avn service user-creds-download --username avnadmin &lt;service&gt;For working with `kcat &lt;https://github.com/edenhill/kcat&gt;`_ (see also our `help article &lt;https://developer.aiven.io/docs/products/kafka/howto/kcat.html&gt;`_ ) or the command-line tools that ship with Kafka itself, a keystore and trustore are needed. By specifying which user's creds to use, and a secret, you can generate these via ``avn`` too::  $ avn service user-kafka-java-creds --username avnadmin -p t0pS3cr3t &lt;service&gt;Contributing============Check the `CONTRIBUTING &lt;https://github.com/aiven/aiven-client/blob/main/.github/CONTRIBUTING.md&gt;`_ guide for details on how to contribute to this repository.Keep Reading============We maintain some other resources that you may also find useful:* `Command Line Magic with avn &lt;https://aiven.io/blog/command-line-magic-with-the-aiven-cli&gt;`__* `Managing Billing Groups via CLI &lt;https://help.aiven.io/en/articles/4720981-using-billing-groups-via-cli&gt;`__</longdescription>
</pkgmetadata>