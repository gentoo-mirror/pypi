<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## ABOUT**UNSIO** (**U**niversal **N**body **S**napshot **I**nput **O**utput) is an API which perform input/output operations in a generic way,and on different kind of nbody files format (nemo, Gadget binaries 1 and 2, Gadget hdf5, Ramses). By using this API,a user could write only one analysis program which will work on all known files format supported by UNSIO.It's not necessary anymore to know how is implemented a file format, UNSIO will do transparently and automaticallyall the hard work for you ! With UNSIO, you will spend less time to develop your analysis program.UNSIO comes with an integrated sqlite3 database which can be used to retrieve automatically all your dataamong terabytes of hard disks.## FeaturesUNSIO can be used from different languages (C,C++,Fortran and Python)## Supported files format :* [**NEMO** (read and write)](https://teuben.github.io/nemo/)* [**GADGET 1** (read)](http://www.mpa-garching.mpg.de/gadget/)* **GADGET 2** (read an write)* **GADGET 3/hdf5** (read and write)* [**RAMSES** (read)](https://bitbucket.org/rteyssie/ramses)* **List of files** stored in a file* Simulations stored in **SQLITE3** database## Installing python wrapper```consolepip install python-unsio -U```## to get some docstring help```consolepydoc(unsio.input)pydoc(unsio.output)```## Usage- In the example below, we load a RAMSES simulation and we save it in GADGET3 file format```pythonimport unsio.input as uns_in  # unsio reading modulemyfile=&quot;/home/jcl/output_00004&quot; # input RAMSES simulation# we instantiate a CUNS_IN objectmy_in=uns_in.CUNS_IN(myfile,&quot;gas,stars&quot;) # We select components GAS and STARS## Reading#if my_in.nextFrame(): # load snapshot  # read stars positions  status,poss=my_in.getData(&quot;stars&quot;,&quot;pos&quot;)  # read gas positions  status,posg=my_in.getData(&quot;gas&quot;,&quot;pos&quot;)  # read gas densities  status,rho=my_in.getData(&quot;gas&quot;,&quot;rho&quot;)  # read time simulation  status,timex=my_in.getData(&quot;time&quot;)## Writing#import unsio.output as uns_out # unsio writing modulemyoutfile=&quot;snapshot.g3&quot; # output file name# we instantiate a CUNS_OUT objectmy_out=uns_out.CUNS_OUT(myoutfile,&quot;gadget3&quot;) # select gadget3 output format# prepare data to be saved# set timestatus=my_out.setData(timex,&quot;time&quot;)# set stars positionsstatus=my_out.setData(poss,&quot;stars&quot;,&quot;pos&quot;)# set gas positionsstatus=my_out.setData(posg,&quot;gas&quot;,&quot;pos&quot;)# set gas densitiesstatus=my_out.setData(rho,&quot;gas&quot;,&quot;rho&quot;)# write on file systemmy_out.save()# closemy_out.close()```## LicenseUNSIO is open source and released under the terms of the [CeCILL2 Licence](http://www.cecill.info/licences/Licence_CeCILL_V2-en.html)## WebpagePLease visit :- [UNSIO project home page](https://projets.lam.fr/projects/unsio)- [Python reading manual](https://projets.lam.fr/projects/unsio/wiki/PythonReadDataNew)- [Python writing manual](https://projets.lam.fr/projects/unsio/wiki/PythonWriteDataNew)</longdescription>
</pkgmetadata>