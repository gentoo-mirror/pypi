<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyVINA Vehicle Identification Number (VIN) decoder for Python.  This leverages the NHTSA API to decode VINs into collections of vehicle data that can be easily explored (https://vpic.nhtsa.dot.gov/api/)## Basic Usage:```In [0]: from pyvin import VINIn [1]: vehicle = VIN('JT2AE09W4P0038539')In [2]: (vehicle.Make, vehicle.Model, vehicle.ModelYear)Out[2]: ('TOYOTA', 'Corolla', '1993')In [3]: my_vins = ('JT2AE09W4P0038539', 'KMHD35LH5EU205042')In [4]: my_vehicles = VIN(*my_vins)In [5]: for veh in my_vehicles:   ...:     print(veh.Make, veh.Model, veh.ModelYear)TOYOTA Corolla 1993HYUNDAI Elantra 2014```## Advanced Usage:The user can also specify how invalid VINs are handled, be it raising an exception or ignoring them:```In [6]: import pyvinIn [7]: new_car = pyvin.VIN('Foo', error_handling=pyvin.RAISE)Out[7]: VINError: Invalid char &quot;o&quot;the u```To simply clean a VIN list, with no decoding involved, the following can be called:```In [8]: import pyvinIn [9]: my_vins = ('JT2AE09W4P0038539', 'Foo')In [10]: cleaned_vins = pyvin.clean_vins(my_vins)In [11]: cleaned_vinsOut[11]: ['JT2AE09W4P0038539']```For simple validation, no calls to the NHTSA API are used, as there is a formula to validate VINs</longdescription>
</pkgmetadata>