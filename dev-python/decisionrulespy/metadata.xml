<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DecisionRulesPyVERSION 3 CONTAINS MAJOR CHANGES IN API INTERFACES AND NOW SUPPORTS RULEFLOWS CRUDA simple library that allows you to easily connect to [DecisionRules.io](https://decisionrules.io) from your application.# Usage* Solver (DecisionTables, ScriptRules, RuleFlow)* Management API (CRUD operations on DecisionTables and RuleFlows)# 1 - SolverSolver is designed for solving rules made in DecisionRules application.## 1.1 - Defining solver initBefore you start solving rules you need to setup an SolverApi instance. How to do so is shown below.```pythonimport decisionrulesasync def solver_test():    solver = decisionrules.SolverApi(solver_api_key)```## 1.2 - Defining solver method with dataSolver method expects 5 arguments* SolverType - enum value - mandatory* RuleId - str - mandatory* Data - dict or json str - mandatory* SolverStrategy - enum value - mandatory* Version - str - optional```pythonasync def solver_test():    data = {&quot;say&quot;: &quot;Hello from python&quot;}    solver = decisionrules.SolverApi(api_key)    # SolverType enum defines type of solver (Rule or Compostion)    response = await solver.solve(decisionrules.SolverType.RULE, get_rule, data, decisionrules.SolverStrategies.STANDARD)    response2 = await solver.solve(decisionrules.SolverType.RULEFLOW, compo_rule, data, decisionrules.SolverStrategies.STANDARD)```## 1.3 Solver with custom domainFor using custom domain just add `CustomDomain` instance to the `init method` with `url` and `protocol` parameters.```pythonasync def solver_test():    data = {&quot;say&quot;: &quot;Hello from python&quot;}    solver = decisionrules.SolverApi(api_key, decisionrules.CustomDomain(&quot;YOUR_URL&quot;, decisionrules.Protocols.HTTPS))        response = await solver.solve(decisionrules.SolverType.RULE, get_rule, data, decisionrules.SolverStrategies.STANDARD)    response2 = await solver.solve(decisionrules.SolverType.RULEFLOW, compo_rule, data, decisionrules.SolverStrategies.STANDARD)```# 2 - Management APIManagement api is accessible via `ManagementApi` and required management api key that you can obtain in api key section in DecisionRules app.Data for ruleflow import methods are represented as an array where index0 = RF, and index1...indexn are DTs```pythonasync def management_api_test():    manager = decisionrules.ManagementApi(mng_key)    #Or with custom domain    manager = decisionrules.ManagementApi(mng_key, decisionrules.CustomDomain(&quot;YOUR_URL&quot;, decisionrules.Protocols.HTTPS))```## 2.1 Management API usage example```pythonasync def management_api_test():    manager = decisionrules.ManagementApi(mng_key)    await manager.get_rule(get_rule)    await manager.get_rule(get_rule, &quot;1&quot;)    await manager.get_space(get_space)    await manager.update_rule(put_rule, &quot;1&quot;, put_data)    await manager.create_rule(post_rule, post_data)    await manager.delete_rule(delete_rule, &quot;1&quot;)    await manager.create_ruleflow(new_ruleflow)    await manager.get_ruleflow(id)    await manager.get_ruleflow(id, 1)    await manager.update_ruleflow(id, 1, ruleflow)    await manager.export_ruleflow(id, 1)    await manager.export_ruleflow(id)    await manager.import_ruleflow([new_ruleflow_with_dt], 1,)    await manager.import_ruleflow(id, 1, [new_ruleflow_with_dt])    await manager.import_ruleflow([new_ruleflow_with_dt])    await manager.delele_ruleflow(id)    await manager.getItems(tags)    await manager.updateTags(ruleId, data, version)    await manager.delete(ruleId, version)```## 2.3 All available methods in management API</longdescription>
</pkgmetadata>