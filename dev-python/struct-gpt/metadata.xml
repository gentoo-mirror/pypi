<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># struct-gpt[![codecov](https://codecov.io/gh/knowsuchagency/struct-gpt/branch/main/graph/badge.svg?token=TMUQNTCTDI)](https://codecov.io/gh/knowsuchagency/struct-gpt)![PyPI](https://img.shields.io/pypi/v/struct-gpt)Get structured output from LLM's.```pythonfrom struct_gpt import OpenAiBasefrom pydantic import Fieldclass SentimentSchema(OpenAiBase):    &quot;&quot;&quot;    Determine the sentiment of the given text:    {content}    &quot;&quot;&quot;    # ðŸ‘†this becomes the prompt    sentiment: str = Field(description=&quot;Either -1, 0, or 1.&quot;)result = SentimentSchema.from_openai(content=&quot;I love pizza!&quot;).json()                                     # ðŸ‘†this ends up in the promptprint(result)```outputs:```json{  &quot;sentiment&quot;: &quot;1&quot;}```## Features* Easy creation of custom models using the OpenAI API* Integration with Pydantic for model validation and serialization* Flexible configuration with retries and temperature settings## Installation`pip install struct-gpt`## Usage* Template variables in the class' docstring are replaced with the keyword arguments passed to `from_openai`* Classes can reference one another* You can use the `OpenAiMixin` to add functionality to existing Pydantic classes```pythonfrom struct_gpt import OpenAiBase, OpenAiMixinfrom pydantic import Field, BaseModelfrom typing import Mappingclass SentimentSchema(OpenAiBase):    sentiment: str = Field(description=&quot;Either -1, 0, or 1.&quot;)class SentimentAnalysis(BaseModel, OpenAiMixin):    &quot;&quot;&quot;    Determine the sentiment of each word in the following: {text}    Also determine the overall sentiment of the text and who the narrator is.    &quot;&quot;&quot;    words_to_sentiment: Mapping[str, SentimentSchema]    overall_sentiment: SentimentSchema    narrator: strprint(    SentimentAnalysis.from_openai(        text=&quot;As president, I loved the beautiful scenery, but the long hike was exhausting.&quot;    ).json(indent=2))```&lt;details&gt;&lt;summary&gt;&lt;b&gt;See Output&lt;/b&gt;&lt;/summary&gt;```json{  &quot;words_to_sentiment&quot;: {    &quot;As&quot;: {      &quot;sentiment&quot;: &quot;0&quot;    },    &quot;president,&quot;: {      &quot;sentiment&quot;: &quot;1&quot;    },    &quot;I&quot;: {      &quot;sentiment&quot;: &quot;0&quot;    },    &quot;loved&quot;: {      &quot;sentiment&quot;: &quot;1&quot;    },    &quot;the&quot;: {      &quot;sentiment&quot;: &quot;0&quot;    },    &quot;beautiful&quot;: {      &quot;sentiment&quot;: &quot;1&quot;    },    &quot;scenery,&quot;: {      &quot;sentiment&quot;: &quot;1&quot;    },    &quot;but&quot;: {      &quot;sentiment&quot;: &quot;-1&quot;    },    &quot;long&quot;: {      &quot;sentiment&quot;: &quot;-1&quot;    },    &quot;hike&quot;: {      &quot;sentiment&quot;: &quot;-1&quot;    },    &quot;was&quot;: {      &quot;sentiment&quot;: &quot;0&quot;    },    &quot;exhausting.&quot;: {      &quot;sentiment&quot;: &quot;-1&quot;    }  },  &quot;overall_sentiment&quot;: {    &quot;sentiment&quot;: &quot;0&quot;  },  &quot;narrator&quot;: &quot;president&quot;}```&lt;/details&gt;### Improving reliability with examples`from_openai` can accept a list of examples to guide the model and improve its accuracy. Each example is a dictionary containing an `input` and `output` key. `output` should be an instance of the model, a dictionary, or its json string representation,.```pythonfrom struct_gpt import OpenAiBasefrom pydantic import Fieldclass SentimentSchema(OpenAiBase):    &quot;&quot;&quot;    Determine the sentiment of the given text:    {content}    &quot;&quot;&quot;    sentiment: str = Field(description=&quot;Either -1, 0, or 1.&quot;)examples = [    {        &quot;input&quot;: &quot;I love the beach!&quot;,        &quot;output&quot;: {&quot;sentiment&quot;: &quot;1&quot;},    },    {        &quot;input&quot;: &quot;don't touch that&quot;,        &quot;output&quot;: '{&quot;sentiment&quot;: &quot;-1&quot;}',    },    {        &quot;input&quot;: &quot;this library is neat!&quot;,        &quot;output&quot;: SentimentSchema(sentiment=&quot;1&quot;),    },]print(SentimentSchema.from_openai(content=&quot;I love pizza!&quot;, examples=examples).json())```outputs:```json{  &quot;sentiment&quot;: &quot;1&quot;}```</longdescription>
</pkgmetadata>