<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># primersThis is a small, straightforward tool for creating PCR primers. Its target use-case is DNA assembly.Reasons to choose `primers` instead of [Primer3](https://github.com/primer3-org/primer3) include its:- **features**: It is uniquely focused on DNA assembly flows like Gibson Assembly and Golden Gate cloning. You can design primers while adding sequence to the 5' ends of primers.- **simplicity**: It is a small and simple Python CLI/library with a single dependency ([seqfold](https://github.com/Lattice-Automation/seqfold)). It is easier to install and use.- **interface**: The Python library accepts and create primers for [Biopython `Seq`](https://biopython.org/wiki/Seq) classes. It outputs JSON for easy integration with other applications.- **license**: It has a permissive, business-friendly license (MIT) instead of a copyleft GPL v2 license.## Installation```bashpip install primers```## Usage`primers` chooses pairs while optimizing for length, tm, GC ratio, secondary structure, and off-target binding. In the simplest case, you just pass the sequence you want to amplify:```bash$ primers create CTACTAATAGCACACACGGGGACTAGCATCTATCTCAGCTACGATCAGCATC  dir    tm   ttm  gc     dg     p  seq  FWD  63.6  63.6 0.5      0   2.6  CTACTAATAGCACACACGGG  REV  63.2  63.2 0.5  -0.16  1.52  GATGCTGATCGTAGCTGAGATA```Additional sequence is added to the 5' end of primers via the `add_fwd/add_rev` args (`-f/-r` with CLI). By default, it will prepend the entire additional sequence. If you want it to choose the best subsequence to add to the 5' end (factoring in the features dicussed [below](#scoring)), allow it to choose from a range of indicies via the `add_fwd_len/add_rev_len` (`-fl/-rl` with CLI). Each primer has two tms: &quot;tm&quot;, the melting temperature for the portion of the primer that binds to the template sequence and &quot;tm_total&quot;, the melting temperature for the entire primer including the additional sequence added to primers' 5' end.### Python```pythonfrom primers import create# add enzyme recognition sequences to FWD and REV primers: BsaI, BpiIfwd, rev = create(&quot;AATGAGACAATAGCACACACAGCTAGGTCAGCATACGAAA&quot;, add_fwd=&quot;GGTCTC&quot;, add_rev=&quot;GAAGAC&quot;)print(fwd.fwd)      # Trueprint(fwd.seq)      # GGTCTCAATGAGACAATAGCACACACA; 5' to 3'print(fwd.tm)       # 62.4; melting tempprint(fwd.tm_total) # 68.6; melting temp with added seq (GGTCTC)print(fwd.dg)       # -1.86; minimum free energy of the secondary structure# add from a range of sequence to the FWD primer: [5, 12] bpfwd, rev = create(&quot;AATGAGACAATAGCACACACAGCTAGGTCAGCATACGAAA&quot;, add_fwd=&quot;GGATCGAGCTTGA&quot;, add_fwd_len=(5, 12))print(fwd.seq)      # AGCTTGAAATGAGACAATAGCACACACAGC (AGCTTGA added from add_fwd)print(fwd.tm)       # 62.2print(fwd.tm_total) # 70.0```### CLI```$ primers create --helpusage: primers create [-h] [-f SEQ] [-fl INT INT] [-r SEQ] [-rl INT INT] [-t SEQ] [-j | --json | --no-json] SEQpositional arguments:  SEQ                   create primers to amplify this sequenceoptions:  -h, --help            show this help message and exit  -f SEQ                additional sequence to add to FWD primer (5' to 3')  -fl INT INT           space separated min-max range for the length to add from '-f' (5' to 3')  -r SEQ                additional sequence to add to REV primer (5' to 3')  -rl INT INT           space separated min-max range for the length to add from '-r' (5' to 3')  -t SEQ                sequence to check for off-target binding sites  -j, --json, --no-json                        write the primers to a JSON array```#### Table Output FormatBy default, the primers are logged in table format in rows of `dir, tm, ttm, gc, dg, p, seq` where:- dir: FWD or REV- tm: the melting temperature of the annealing portion of the primer (Celsius)- ttm: the total melting temperature of the primer with added seq (Celsius)- gc: the GC ratio of the primer- dg: the minimum free energy of the primer (kcal/mol)- p: the primer's penalty score. Lower is better- seq: the sequence of the primer in the 5' to the 3' direction```txt$ primers create -f GGTCTC -r GAAGAC AATGAGACAATAGCACACACAGCTAGGTCAGCATACGAAA  dir    tm   ttm  gc     dg     p  seq  FWD  60.8  67.0 0.5  -1.86  5.93  GGTCTCAATGAGACAATAGCACACAC  REV  60.8  65.8 0.5      0   3.2  GAAGACTTTCGTATGCTGACCTAG```#### JSON Output FormatThe `--json` flag prints primers in JSON format with more details on scoring. The example below is truncated for clarity:```txt$ primers create CTACTAATAGCACACACGGGGACTAGCATCTATCTCAGCTACGATCAGCATC --json| jq[  {    &quot;seq&quot;: &quot;CTACTAATAGCACACACGGG&quot;,    &quot;len&quot;: 20,    &quot;tm&quot;: 63.6,    &quot;tm_total&quot;: 63.6,    &quot;gc&quot;: 0.5,    &quot;dg&quot;: 0,    &quot;fwd&quot;: true,    &quot;off_target_count&quot;: 0,    &quot;scoring&quot;: {      &quot;penalty&quot;: 2.6,      &quot;penalty_tm&quot;: 1.6,      &quot;penalty_tm_diff&quot;: 0,      &quot;penalty_gc&quot;: 0,      &quot;penalty_len&quot;: 1,      &quot;penalty_dg&quot;: 0,      &quot;penalty_off_target&quot;: 0    }  },...```## AlgorithmChoosing PCR primers requires optimizing for a few different characteristics. Ideally, pairs of primers for PCR amplification would have similar tms, GC ratios close to 0.5, high minimum free energies (dg), and a lack off-target binding sites. In `primers`, like Primer3, choosing amongst those (sometimes competing) goals is accomplished with a linear function that penalizes undesirable characteristics. The primer pair with the lowest combined penalty is chosen.### ScoringThe penalty for each possible primer, `p`, is calculated as:```txtPENALTY(p) =    abs(p.tm - optimal_tm) * penalty_tm +     // penalize each deg of suboptimal melting temperature    abs(p.gc - optimal_gc) * penalty_gc +     // penalize each percentage point of suboptimal GC ratio    abs(len(p) - optimal_len) * penalty_len + // penalize each bp of suboptimal length    abs(p.tm - p.pair.tm) * penalty_tm_diff + // penalize each deg of melting temperature diff between primers    abs(p.dg) * penalty_dg +                  // penalize each kcal/mol of free energy in secondary structure    p.offtarget_count * penalty_offtarget     // penalize each off-target binding site```Each of the optimal (`optimal_*`) and penalty (`penalty_*`) parameters is adjustable in the `primers.create()` function. The defaults are below:```pythonoptimal_tm: float = 62.0optimal_gc: float = 0.5optimal_len: int = 22penalty_tm: float = 1.0penalty_gc: float = 0.2penalty_len: float = 0.5penalty_tm_diff: float = 1.0penalty_dg: float = 2.0penalty_offtarget: float = 20.0```#### Scoring Existing PrimersIf you already have primers, and you want to see their features and penalty score, use the `primers score` command. The command below scores a FWD and REV primer against the sequence `-s` that they were created to amplify:```txt$ primers score GGTCTCAATGAGACAATA TTTCGTATGCTGACCTAG -s AATGAGACAATAGCACACACAGCTAGGTCAGCATACGAAATTT --json | jq[  {    &quot;seq&quot;: &quot;GGTCTCAATGAGACAATA&quot;,    &quot;len&quot;: 18,    &quot;tm&quot;: 39.4,    &quot;tm_total&quot;: 55,    &quot;gc&quot;: 0.4,    &quot;dg&quot;: -1.86,    &quot;fwd&quot;: true,    &quot;off_target_count&quot;: 0,    &quot;scoring&quot;: {      &quot;penalty&quot;: 49.9,      &quot;penalty_tm&quot;: 22.6,      &quot;penalty_tm_diff&quot;: 19.6,      &quot;penalty_gc&quot;: 2,      &quot;penalty_len&quot;: 2,      &quot;penalty_dg&quot;: 3.7,      &quot;penalty_off_target&quot;: 0    }  },  {    &quot;seq&quot;: &quot;TTTCGTATGCTGACCTAG&quot;,    &quot;len&quot;: 18,    &quot;tm&quot;: 59,    &quot;tm_total&quot;: 59,    &quot;gc&quot;: 0.5,    &quot;dg&quot;: 0,    &quot;fwd&quot;: false,    &quot;off_target_count&quot;: 0,    &quot;scoring&quot;: {      &quot;penalty&quot;: 24.6,      &quot;penalty_tm&quot;: 3,      &quot;penalty_tm_diff&quot;: 19.6,      &quot;penalty_gc&quot;: 0,      &quot;penalty_len&quot;: 2,      &quot;penalty_dg&quot;: 0,      &quot;penalty_off_target&quot;: 0    }  }]```### Off-target Binding SitesUsually, off-target binding sites should be avoided. In `primers`, off-target binding sites are those with `&lt;= 1` mismatch in the last 10 bair pairs of the primer's 3' end. This definition experimentally supported by:&gt; Wu, J. H., Hong, P. Y., &amp; Liu, W. T. (2009). Quantitative effects of position and type of single mismatch on single base primer extension. Journal of microbiological methods, 77(3), 267-275By default, primers are checked for off-targets within the `seq` parameter passed to `create(seq)`. But the primers can be checked against another sequence if it is passed to the optional `offtarget_check` argument (`-t` for CLI). This is useful when PCR'ing a subsequence of a larger DNA sequence like a plasmid.```pythonfrom primers import createseq = &quot;AATGAGACAATAGCACACACAGCTAGGTCAGCATACGAAA&quot;seq_parent = &quot;ggaattacgtAATGAGACAATAGCACACACAGCTAGGTCAGCATACGAAAggaccagttacagga&quot;# primers are checked for offtargets in `seq_parent`fwd, rev = create(seq, offtarget_check=seq_parent)```</longdescription>
</pkgmetadata>