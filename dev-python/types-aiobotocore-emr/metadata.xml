<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a id=&quot;types-aiobotocore-emr&quot;&gt;&lt;/a&gt;# types-aiobotocore-emr[![PyPI - types-aiobotocore-emr](https://img.shields.io/pypi/v/types-aiobotocore-emr.svg?color=blue)](https://pypi.org/project/types-aiobotocore-emr)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-emr.svg?color=blue)](https://pypi.org/project/types-aiobotocore-emr)[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-emr?color=blue)](https://pypistats.org/packages/types-aiobotocore-emr)![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)Type annotations for[aiobotocore.EMR 2.5.0](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/emr.html#EMR)service compatible with [VSCode](https://code.visualstudio.com/),[PyCharm](https://www.jetbrains.com/pycharm/),[Emacs](https://www.gnu.org/software/emacs/),[Sublime Text](https://www.sublimetext.com/),[mypy](https://github.com/python/mypy),[pyright](https://github.com/microsoft/pyright) and other tools.Generated by[mypy-boto3-builder 7.13.0](https://github.com/youtype/mypy_boto3_builder).More information can be found on[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in[types-aiobotocore-emr docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_emr/).See how it helps to find and fix potential bugs:![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)- [types-aiobotocore-emr](#types-aiobotocore-emr)  - [How to install](#how-to-install)    - [From PyPI with pip](#from-pypi-with-pip)  - [How to uninstall](#how-to-uninstall)  - [Usage](#usage)    - [VSCode](#vscode)    - [PyCharm](#pycharm)    - [Emacs](#emacs)    - [Sublime Text](#sublime-text)    - [Other IDEs](#other-ides)    - [mypy](#mypy)    - [pyright](#pyright)  - [Explicit type annotations](#explicit-type-annotations)    - [Client annotations](#client-annotations)    - [Paginators annotations](#paginators-annotations)    - [Waiters annotations](#waiters-annotations)    - [Literals](#literals)    - [Typed dictionaries](#typed-dictionaries)  - [How it works](#how-it-works)  - [What's new](#what's-new)    - [Implemented features](#implemented-features)    - [Latest changes](#latest-changes)  - [Versioning](#versioning)  - [Thank you](#thank-you)  - [Documentation](#documentation)  - [Support and contributing](#support-and-contributing)&lt;a id=&quot;how-to-install&quot;&gt;&lt;/a&gt;## How to install&lt;a id=&quot;from-pypi-with-pip&quot;&gt;&lt;/a&gt;### From PyPI with pipInstall `types-aiobotocore` for `EMR` service.```bash# install with aiobotocore type annotationspython -m pip install 'types-aiobotocore[emr]'# Lite version does not provide session.client/resource overloads# it is more RAM-friendly, but requires explicit type annotationspython -m pip install 'types-aiobotocore-lite[emr]'# standalone installationpython -m pip install types-aiobotocore-emr```&lt;a id=&quot;how-to-uninstall&quot;&gt;&lt;/a&gt;## How to uninstall```bashpython -m pip uninstall -y types-aiobotocore-emr```&lt;a id=&quot;usage&quot;&gt;&lt;/a&gt;## Usage&lt;a id=&quot;vscode&quot;&gt;&lt;/a&gt;### VSCode- Install  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)- Install  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)- Set `Pylance` as your Python Language Server- Install `types-aiobotocore[emr]` in your environment:```bashpython -m pip install 'types-aiobotocore[emr]'```Both type checking and code completion should now work. No explicit typeannotations required, write your `aiobotocore` code as usual.&lt;a id=&quot;pycharm&quot;&gt;&lt;/a&gt;### PyCharmInstall `types-aiobotocore-lite[emr]` in your environment:```bashpython -m pip install 'types-aiobotocore-lite[emr]'````Both type checking and code completion should now work. Explicit typeannotations **are required**.Use `types-aiobotocore` package instead for implicit type discovery.&lt;a id=&quot;emacs&quot;&gt;&lt;/a&gt;### Emacs- Install `types-aiobotocore` with services you use in your environment:```bashpython -m pip install 'types-aiobotocore[emr]'```- Install [use-package](https://github.com/jwiegley/use-package),  [lsp](https://github.com/emacs-lsp/lsp-mode/),  [company](https://github.com/company-mode/company-mode) and  [flycheck](https://github.com/flycheck/flycheck) packages- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package```elisp(use-package lsp-pyright  :ensure t  :hook (python-mode . (lambda ()                          (require 'lsp-pyright)                          (lsp)))  ; or lsp-deferred  :init (when (executable-find &quot;python3&quot;)          (setq lsp-pyright-python-executable-cmd &quot;python3&quot;))  )```- Make sure emacs uses the environment where you have installed  `types-aiobotocore`Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;sublime-text&quot;&gt;&lt;/a&gt;### Sublime Text- Install `types-aiobotocore[emr]` with services you use in your environment:```bashpython -m pip install 'types-aiobotocore[emr]'```- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) packageType checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;other-ides&quot;&gt;&lt;/a&gt;### Other IDEsNot tested, but as long as your IDE supports `mypy` or `pyright`, everythingshould work.&lt;a id=&quot;mypy&quot;&gt;&lt;/a&gt;### mypy- Install `mypy`: `python -m pip install mypy`- Install `types-aiobotocore[emr]` in your environment:```bashpython -m pip install 'types-aiobotocore[emr]'````Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;pyright&quot;&gt;&lt;/a&gt;### pyright- Install `pyright`: `npm i -g pyright`- Install `types-aiobotocore[emr]` in your environment:```bashpython -m pip install 'types-aiobotocore[emr]'```Optionally, you can install `types-aiobotocore` to `typings` folder.Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;explicit-type-annotations&quot;&gt;&lt;/a&gt;## Explicit type annotations&lt;a id=&quot;client-annotations&quot;&gt;&lt;/a&gt;### Client annotations`EMRClient` provides annotations for `session.create_client(&quot;emr&quot;)`.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_emr import EMRClientsession = get_session()async with session.create_client(&quot;emr&quot;) as client:    client: EMRClient    # now client usage is checked by mypy and IDE should provide code completion```&lt;a id=&quot;paginators-annotations&quot;&gt;&lt;/a&gt;### Paginators annotations`types_aiobotocore_emr.paginator` module contains type annotations for allpaginators.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_emr import EMRClientfrom types_aiobotocore_emr.paginator import (    ListBootstrapActionsPaginator,    ListClustersPaginator,    ListInstanceFleetsPaginator,    ListInstanceGroupsPaginator,    ListInstancesPaginator,    ListNotebookExecutionsPaginator,    ListSecurityConfigurationsPaginator,    ListStepsPaginator,    ListStudioSessionMappingsPaginator,    ListStudiosPaginator,)session = get_session()async with session.create_client(&quot;emr&quot;) as client:    client: EMRClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    list_bootstrap_actions_paginator: ListBootstrapActionsPaginator = client.get_paginator(        &quot;list_bootstrap_actions&quot;    )    list_clusters_paginator: ListClustersPaginator = client.get_paginator(&quot;list_clusters&quot;)    list_instance_fleets_paginator: ListInstanceFleetsPaginator = client.get_paginator(        &quot;list_instance_fleets&quot;    )    list_instance_groups_paginator: ListInstanceGroupsPaginator = client.get_paginator(        &quot;list_instance_groups&quot;    )    list_instances_paginator: ListInstancesPaginator = client.get_paginator(&quot;list_instances&quot;)    list_notebook_executions_paginator: ListNotebookExecutionsPaginator = client.get_paginator(        &quot;list_notebook_executions&quot;    )    list_security_configurations_paginator: ListSecurityConfigurationsPaginator = (        client.get_paginator(&quot;list_security_configurations&quot;)    )    list_steps_paginator: ListStepsPaginator = client.get_paginator(&quot;list_steps&quot;)    list_studio_session_mappings_paginator: ListStudioSessionMappingsPaginator = (        client.get_paginator(&quot;list_studio_session_mappings&quot;)    )    list_studios_paginator: ListStudiosPaginator = client.get_paginator(&quot;list_studios&quot;)```&lt;a id=&quot;waiters-annotations&quot;&gt;&lt;/a&gt;### Waiters annotations`types_aiobotocore_emr.waiter` module contains type annotations for allwaiters.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_emr.client import EMRClientfrom types_aiobotocore_emr.waiter import (    ClusterRunningWaiter,    ClusterTerminatedWaiter,    StepCompleteWaiter,)session = get_session()async with session.create_client(&quot;emr&quot;) as client:    client: EMRClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    cluster_running_waiter: ClusterRunningWaiter = client.get_waiter(&quot;cluster_running&quot;)    cluster_terminated_waiter: ClusterTerminatedWaiter = client.get_waiter(&quot;cluster_terminated&quot;)    step_complete_waiter: StepCompleteWaiter = client.get_waiter(&quot;step_complete&quot;)```&lt;a id=&quot;literals&quot;&gt;&lt;/a&gt;### Literals`types_aiobotocore_emr.literals` module contains literals extracted from shapesthat can be used in user code for type checking.```pythonfrom types_aiobotocore_emr.literals import (    ActionOnFailureType,    AdjustmentTypeType,    AuthModeType,    AutoScalingPolicyStateChangeReasonCodeType,    AutoScalingPolicyStateType,    CancelStepsRequestStatusType,    ClusterRunningWaiterName,    ClusterStateChangeReasonCodeType,    ClusterStateType,    ClusterTerminatedWaiterName,    ComparisonOperatorType,    ComputeLimitsUnitTypeType,    ExecutionEngineTypeType,    IdentityTypeType,    InstanceCollectionTypeType,    InstanceFleetStateChangeReasonCodeType,    InstanceFleetStateType,    InstanceFleetTypeType,    InstanceGroupStateChangeReasonCodeType,    InstanceGroupStateType,    InstanceGroupTypeType,    InstanceRoleTypeType,    InstanceStateChangeReasonCodeType,    InstanceStateType,    JobFlowExecutionStateType,    ListBootstrapActionsPaginatorName,    ListClustersPaginatorName,    ListInstanceFleetsPaginatorName,    ListInstanceGroupsPaginatorName,    ListInstancesPaginatorName,    ListNotebookExecutionsPaginatorName,    ListSecurityConfigurationsPaginatorName,    ListStepsPaginatorName,    ListStudioSessionMappingsPaginatorName,    ListStudiosPaginatorName,    MarketTypeType,    NotebookExecutionStatusType,    OnDemandCapacityReservationPreferenceType,    OnDemandCapacityReservationUsageStrategyType,    OnDemandProvisioningAllocationStrategyType,    PlacementGroupStrategyType,    ReconfigurationTypeType,    RepoUpgradeOnBootType,    ScaleDownBehaviorType,    SpotProvisioningAllocationStrategyType,    SpotProvisioningTimeoutActionType,    StatisticType,    StepCancellationOptionType,    StepCompleteWaiterName,    StepExecutionStateType,    StepStateChangeReasonCodeType,    StepStateType,    UnitType,    EMRServiceName,    ServiceName,    ResourceServiceName,    PaginatorName,    WaiterName,    RegionName,)def check_value(value: ActionOnFailureType) -&gt; bool:    ...```&lt;a id=&quot;typed-dictionaries&quot;&gt;&lt;/a&gt;### Typed dictionaries`types_aiobotocore_emr.type_defs` module contains structures and shapesassembled to typed dictionaries for additional type checking.```pythonfrom types_aiobotocore_emr.type_defs import (    ResponseMetadataTypeDef,    TagTypeDef,    ApplicationTypeDef,    ScalingConstraintsTypeDef,    AutoScalingPolicyStateChangeReasonTypeDef,    AutoTerminationPolicyTypeDef,    BlockPublicAccessConfigurationMetadataTypeDef,    PortRangeTypeDef,    ScriptBootstrapActionConfigTypeDef,    CancelStepsInfoTypeDef,    CancelStepsInputRequestTypeDef,    MetricDimensionTypeDef,    ClusterStateChangeReasonTypeDef,    ClusterTimelineTypeDef,    Ec2InstanceAttributesTypeDef,    KerberosAttributesTypeDef,    PlacementGroupConfigTypeDef,    CommandTypeDef,    ComputeLimitsTypeDef,    ConfigurationTypeDef,    CreateSecurityConfigurationInputRequestTypeDef,    CreateStudioSessionMappingInputRequestTypeDef,    UsernamePasswordTypeDef,    DeleteSecurityConfigurationInputRequestTypeDef,    DeleteStudioInputRequestTypeDef,    DeleteStudioSessionMappingInputRequestTypeDef,    WaiterConfigTypeDef,    DescribeClusterInputRequestTypeDef,    DescribeJobFlowsInputRequestTypeDef,    DescribeNotebookExecutionInputRequestTypeDef,    DescribeReleaseLabelInputRequestTypeDef,    OSReleaseTypeDef,    SimplifiedApplicationTypeDef,    DescribeSecurityConfigurationInputRequestTypeDef,    DescribeStepInputRequestTypeDef,    DescribeStudioInputRequestTypeDef,    VolumeSpecificationTypeDef,    EbsVolumeTypeDef,    ExecutionEngineConfigTypeDef,    FailureDetailsTypeDef,    GetAutoTerminationPolicyInputRequestTypeDef,    GetClusterSessionCredentialsInputRequestTypeDef,    GetManagedScalingPolicyInputRequestTypeDef,    GetStudioSessionMappingInputRequestTypeDef,    SessionMappingDetailTypeDef,    KeyValueTypeDef,    HadoopStepConfigTypeDef,    SpotProvisioningSpecificationTypeDef,    OnDemandResizingSpecificationTypeDef,    SpotResizingSpecificationTypeDef,    InstanceFleetStateChangeReasonTypeDef,    InstanceFleetTimelineTypeDef,    InstanceGroupDetailTypeDef,    InstanceGroupStateChangeReasonTypeDef,    InstanceGroupTimelineTypeDef,    InstanceResizePolicyTypeDef,    InstanceStateChangeReasonTypeDef,    InstanceTimelineTypeDef,    JobFlowExecutionStatusDetailTypeDef,    PlacementTypeTypeDef,    PaginatorConfigTypeDef,    ListBootstrapActionsInputRequestTypeDef,    ListClustersInputRequestTypeDef,    ListInstanceFleetsInputRequestTypeDef,    ListInstanceGroupsInputRequestTypeDef,    ListInstancesInputRequestTypeDef,    ListNotebookExecutionsInputRequestTypeDef,    NotebookExecutionSummaryTypeDef,    ReleaseLabelFilterTypeDef,    ListSecurityConfigurationsInputRequestTypeDef,    SecurityConfigurationSummaryTypeDef,    ListStepsInputRequestTypeDef,    ListStudioSessionMappingsInputRequestTypeDef,    SessionMappingSummaryTypeDef,    ListStudiosInputRequestTypeDef,    StudioSummaryTypeDef,    ModifyClusterInputRequestTypeDef,    OnDemandCapacityReservationOptionsTypeDef,    RemoveAutoScalingPolicyInputRequestTypeDef,    RemoveAutoTerminationPolicyInputRequestTypeDef,    RemoveManagedScalingPolicyInputRequestTypeDef,    RemoveTagsInputRequestTypeDef,    SupportedProductConfigTypeDef,    SimpleScalingPolicyConfigurationTypeDef,    SetTerminationProtectionInputRequestTypeDef,    SetVisibleToAllUsersInputRequestTypeDef,    StepExecutionStatusDetailTypeDef,    StepStateChangeReasonTypeDef,    StepTimelineTypeDef,    StopNotebookExecutionInputRequestTypeDef,    TerminateJobFlowsInputRequestTypeDef,    UpdateStudioInputRequestTypeDef,    UpdateStudioSessionMappingInputRequestTypeDef,    AddInstanceFleetOutputTypeDef,    AddInstanceGroupsOutputTypeDef,    AddJobFlowStepsOutputTypeDef,    CreateSecurityConfigurationOutputTypeDef,    CreateStudioOutputTypeDef,    DescribeSecurityConfigurationOutputTypeDef,    EmptyResponseMetadataTypeDef,    ListReleaseLabelsOutputTypeDef,    ModifyClusterOutputTypeDef,    RunJobFlowOutputTypeDef,    StartNotebookExecutionOutputTypeDef,    AddTagsInputRequestTypeDef,    CreateStudioInputRequestTypeDef,    StudioTypeDef,    AutoScalingPolicyStatusTypeDef,    GetAutoTerminationPolicyOutputTypeDef,    PutAutoTerminationPolicyInputRequestTypeDef,    BlockPublicAccessConfigurationTypeDef,    BootstrapActionConfigTypeDef,    CancelStepsOutputTypeDef,    CloudWatchAlarmDefinitionTypeDef,    ClusterStatusTypeDef,    ListBootstrapActionsOutputTypeDef,    ManagedScalingPolicyTypeDef,    CredentialsTypeDef,    DescribeClusterInputClusterRunningWaitTypeDef,    DescribeClusterInputClusterTerminatedWaitTypeDef,    DescribeStepInputStepCompleteWaitTypeDef,    DescribeReleaseLabelOutputTypeDef,    EbsBlockDeviceConfigTypeDef,    EbsBlockDeviceTypeDef,    NotebookExecutionTypeDef,    StartNotebookExecutionInputRequestTypeDef,    GetStudioSessionMappingOutputTypeDef,    HadoopJarStepConfigTypeDef,    InstanceFleetResizingSpecificationsTypeDef,    InstanceFleetStatusTypeDef,    InstanceGroupStatusTypeDef,    ShrinkPolicyTypeDef,    InstanceStatusTypeDef,    JobFlowInstancesDetailTypeDef,    ListBootstrapActionsInputListBootstrapActionsPaginateTypeDef,    ListClustersInputListClustersPaginateTypeDef,    ListInstanceFleetsInputListInstanceFleetsPaginateTypeDef,    ListInstanceGroupsInputListInstanceGroupsPaginateTypeDef,    ListInstancesInputListInstancesPaginateTypeDef,    ListNotebookExecutionsInputListNotebookExecutionsPaginateTypeDef,    ListSecurityConfigurationsInputListSecurityConfigurationsPaginateTypeDef,    ListStepsInputListStepsPaginateTypeDef,    ListStudioSessionMappingsInputListStudioSessionMappingsPaginateTypeDef,    ListStudiosInputListStudiosPaginateTypeDef,    ListNotebookExecutionsOutputTypeDef,    ListReleaseLabelsInputRequestTypeDef,    ListSecurityConfigurationsOutputTypeDef,    ListStudioSessionMappingsOutputTypeDef,    ListStudiosOutputTypeDef,    OnDemandProvisioningSpecificationTypeDef,    ScalingActionTypeDef,    StepStatusTypeDef,    DescribeStudioOutputTypeDef,    GetBlockPublicAccessConfigurationOutputTypeDef,    PutBlockPublicAccessConfigurationInputRequestTypeDef,    BootstrapActionDetailTypeDef,    ScalingTriggerTypeDef,    ClusterSummaryTypeDef,    ClusterTypeDef,    GetManagedScalingPolicyOutputTypeDef,    PutManagedScalingPolicyInputRequestTypeDef,    GetClusterSessionCredentialsOutputTypeDef,    EbsConfigurationTypeDef,    InstanceTypeSpecificationTypeDef,    DescribeNotebookExecutionOutputTypeDef,    StepConfigTypeDef,    InstanceFleetModifyConfigTypeDef,    InstanceGroupModifyConfigTypeDef,    InstanceTypeDef,    InstanceFleetProvisioningSpecificationsTypeDef,    StepSummaryTypeDef,    StepTypeDef,    ScalingRuleTypeDef,    ListClustersOutputTypeDef,    DescribeClusterOutputTypeDef,    InstanceTypeConfigTypeDef,    AddJobFlowStepsInputRequestTypeDef,    StepDetailTypeDef,    ModifyInstanceFleetInputRequestTypeDef,    ModifyInstanceGroupsInputRequestTypeDef,    ListInstancesOutputTypeDef,    InstanceFleetTypeDef,    ListStepsOutputTypeDef,    DescribeStepOutputTypeDef,    AutoScalingPolicyDescriptionTypeDef,    AutoScalingPolicyTypeDef,    InstanceFleetConfigTypeDef,    JobFlowDetailTypeDef,    ListInstanceFleetsOutputTypeDef,    InstanceGroupTypeDef,    PutAutoScalingPolicyOutputTypeDef,    InstanceGroupConfigTypeDef,    PutAutoScalingPolicyInputRequestTypeDef,    AddInstanceFleetInputRequestTypeDef,    DescribeJobFlowsOutputTypeDef,    ListInstanceGroupsOutputTypeDef,    AddInstanceGroupsInputRequestTypeDef,    JobFlowInstancesConfigTypeDef,    RunJobFlowInputRequestTypeDef,)def get_structure() -&gt; ResponseMetadataTypeDef:    return {...}```&lt;a id=&quot;how-it-works&quot;&gt;&lt;/a&gt;## How it worksFully automated[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefullygenerates type annotations for each service, patiently waiting for`aiobotocore` updates. It delivers a drop-in type annotations for you and makessure that:- All available `aiobotocore` services are covered.- Each public class and method of every `aiobotocore` service gets valid type  annotations extracted from the documentation (blame `botocore` docs if types  are incorrect).- Type annotations include up-to-date documentation.- Link to documentation is provided for every method.- Code is processed by [black](https://github.com/psf/black) and  [isort](https://github.com/PyCQA/isort) for readability.&lt;a id=&quot;what's-new&quot;&gt;&lt;/a&gt;## What's new&lt;a id=&quot;implemented-features&quot;&gt;&lt;/a&gt;### Implemented features- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`  compatibility- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type  annotations for each service- Generated `TypeDefs` for each service- Generated `Literals` for each service- Auto discovery of types for `boto3.client` and `boto3.session` calls- Auto discovery of types for `session.client` and `session.session` calls- Auto discovery of types for `client.get_waiter` and `client.get_paginator`  calls- Auto discovery of types for `ServiceResource` and `Resource` collections- Auto discovery of types for `aiobotocore.Session.create_client` calls&lt;a id=&quot;latest-changes&quot;&gt;&lt;/a&gt;### Latest changesBuilder changelog can be found in[Releases](https://github.com/youtype/mypy_boto3_builder/releases).&lt;a id=&quot;versioning&quot;&gt;&lt;/a&gt;## Versioning`types-aiobotocore-emr` version is the same as related `aiobotocore` versionand follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.&lt;a id=&quot;thank-you&quot;&gt;&lt;/a&gt;## Thank you- [Allie Fitter](https://github.com/alliefitter) for  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),  this package is based on top of his work- [black](https://github.com/psf/black) developers for an awesome formatting  tool- [Timothy Edmund Crosley](https://github.com/timothycrosley) for  [isort](https://github.com/PyCQA/isort) and how flexible it is- [mypy](https://github.com/python/mypy) developers for doing all dirty work  for us- [pyright](https://github.com/microsoft/pyright) team for the new era of typed  Python&lt;a id=&quot;documentation&quot;&gt;&lt;/a&gt;## DocumentationAll services type annotations can be found in[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_emr/)&lt;a id=&quot;support-and-contributing&quot;&gt;&lt;/a&gt;## Support and contributingThis package is auto-generated. Please reports any bugs or request new featuresin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)repository.</longdescription>
</pkgmetadata>