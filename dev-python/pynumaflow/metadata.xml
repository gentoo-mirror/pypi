<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python SDK for NumaflowThis SDK provides the interface for writing [UDFs](https://numaflow.numaproj.io/user-guide/user-defined-functions/) and [UDSinks](https://numaflow.numaproj.io/user-guide/sinks/user-defined-sinks/) in Python.## Implement a User Defined Function (UDF)### Map```pythonfrom pynumaflow.function import Messages, Message, Datum, UserDefinedFunctionServicerdef my_handler(key: str, datum: Datum) -&gt; Messages:    val = datum.value    _ = datum.event_time    _ = datum.watermark    messages = Messages(Message.to_vtx(key, val))    return messagesif __name__ == &quot;__main__&quot;:    grpc_server = UserDefinedFunctionServicer(map_handler=my_handler)    grpc_server.start()```### Reduce```pythonimport asynciofrom typing import Iteratorfrom pynumaflow.function import Messages, Message, Datum, Metadata, UserDefinedFunctionServicerasync def my_handler(key: str, datums: Iterator[Datum], md: Metadata) -&gt; Messages:    interval_window = md.interval_window    counter = 0    async for _ in datums:        counter += 1    msg = (        f&quot;counter:{counter} interval_window_start:{interval_window.start} &quot;        f&quot;interval_window_end:{interval_window.end}&quot;    )    return Messages(Message.to_vtx(key, str.encode(msg)))if __name__ == &quot;__main__&quot;:    grpc_server = UserDefinedFunctionServicer(reduce_handler=my_handler)    asyncio.run(grpc_server.start())    asyncio.run(*grpc_server.cleanup_coroutines)```### Sample ImageA sample UDF [Dockerfile](examples/function/forward_message/Dockerfile) is provided under [examples](examples/function/forward_message).## Implement a User Defined Sink (UDSink)```pythonfrom typing import Iteratorfrom pynumaflow.sink import Datum, Responses, Response, UserDefinedSinkServicerdef my_handler(datums: Iterator[Datum]) -&gt; Responses:    responses = Responses()    for msg in datums:        print(&quot;User Defined Sink&quot;, msg.value.decode(&quot;utf-8&quot;))        responses.append(Response.as_success(msg.id))    return responsesif __name__ == &quot;__main__&quot;:    grpc_server = UserDefinedSinkServicer(my_handler)    grpc_server.start()```### Sample ImageA sample UDSink [Dockerfile](examples/sink/log/Dockerfile) is provided under [examples](examples/sink/log).</longdescription>
</pkgmetadata>