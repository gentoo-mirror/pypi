<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># requests-credssp[![Test workflow](https://github.com/jborean93/requests-credssp/actions/workflows/ci.yml/badge.svg)](https://github.com/jborean93/requests-credssp/actions/workflows/ci.yml)[![codecov](https://codecov.io/gh/jborean93/requests-credssp/branch/master/graph/badge.svg)](https://codecov.io/gh/jborean93/requests-credssp)[![PyPI version](https://badge.fury.io/py/requests-credssp.svg)](https://badge.fury.io/py/requests-credssp)[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/jborean93/request-credssp/blob/master/LICENSE)## About this libraryThis package allows for HTTPS CredSSP authentication using the requestslibrary. CredSSP is a Microsoft authentication that allows your credentials tobe delegated to a server giving you double hop authentication.## FeaturesThis library supports the following CredSSP features* Protocol version 2 to 6* Initial authentication with NTLM or Kerberos* Message encryption support using the `wrap` and `unwrap` functions## RequirementsThe following Python libraries are required;* Python 3.6+* [cryptography](https://github.com/pyca/cryptography)* [pyspnego](https://github.com/jborean93/pyspnego)* [requests&gt;=2.0.0](https://pypi.python.org/pypi/requests)* For Kerberos authentication on Unix [python-gssapi](https://github.com/pythongssapi/python-gssapi) and [pykrb5](https://github.com/jborean93/pykrb5) installed with `requests-credssp[kerberos]`By default, this library can authenticate with a Windows host using NTLMmessages, if Kerberos authentication is desired, please read the below.## InstallationTo install requests-credssp, simply run```pip install requests-credssp# to install the optional Kerberos functionality, run (see below)pip install requests-credssp[kerberos]```### Kerberos on LinuxTo add support for Kerberos authentication on a non-Windows host, the Kerberossystem headers must be installed and the `python-gssapi` library installed. Toinstall the Kerberos system headers you can install the following packages;```# Via Yum (Centos RHEL)yum -y install python-devel krb5-devel krb5-libs krb5-workstation# Via Dnf (Fedora)dnf -y install python-devel krb5-devel krb5-libs krb5-workstation# Via Apt (Ubuntu)apt-get -y install python-dev libkrb5-dev krb5-user# Via Portage (Gentoo)emerge -av app-crypt/mit-krb5emerge -av dev-python/setuptools# Via pkg (FreeBSD)sudo pkg install security/krb5# Via OpenCSW (Solaris)pkgadd -d http://get.opencsw.org/now/opt/csw/bin/pkgutil -U/opt/csw/bin/pkgutil -y -i libkrb5_3# Via Pacman (Arch Linux)pacman -S krb5```Once installed, the Python Kerberos libraries can be installed with```pip install requests-credssp[kerberos]```Once installed, the file `/etc/krb5.conf` should be configured so it can talkwith the Kerberos KDC.To add proper SPNEGO support with `python-gssapi`, the[gss-ntlmssp](https://github.com/simo5/gss-ntlmssp) should also be installedwhich adds NTLM as a supported GSSAPI mechanism required for proper SPNEGOinteroperability with Windows. This package can be installed with;```# Via Yum (Centos RHEL) - requires epel-releaseyum -y install epel-releaseyum -y install gssntlmssp# Via Dnf (Fedora)dnf -y install gssntlmssp# Via Apt (Ubuntu)apt-get -y install gss-ntlmssp# Via Pacman (Arch Linux)pacman -S gss-ntlmssp```## Additional InfoThe CredSSP protocol is quite complex and uses a lot of other protocols orstandards to work properly. This unfortunately means some older hosts orsettings are incompatible or require some workarounds to get working. Currentlyyou can configure the following settings when initialising the CredSSP class;* `auth_mechanism`: The authentication mechanism to use initially, default is `auto`* `disable_tlsv1_2`: Whether to disable `TLSv1.2` support and work with older protocols like `TLSv1.0`, default is `False`* `minimum_version`: The minimum CredSSP server version that is required by the client, default is `2`### Authentication MechanismsPart of the CredSSP protocol is to authenticate the user's credentials usingthe SPNEGO protocol. The SPNEGO protocol is also called `Negotiate` and isable to negotiate a common protocol between the client and the server whichcan currently be either `NTLM` or `Kerberos`. Kerberos is a tricky protocolto have set up but should be used wherever it is possible as NTLM uses olderstandards that are considered broken from a security perspective.Due to historical decisions and that Kerberos is not always available bydefault, the base install of `requests-credssp` will only work with `NTLM`.When the Kerberos packages are installed and configured, `requests-credssp`will automatically attempt to use `Kerberos` if possible but fall back to`NTLM` if it fails like it would with `SPNEGO`. If you wish to force either`Kerberos` or `NTLM` instead of relying on the `SPNEGO` mechanism, you can set`auth_mechanism=&lt;auth_mech&gt;` when creating `HttpCredSSPAuth` like so;```import requestsfrom requests_credssp import HttpCredSSPAuth# use SPNEGO (default if omitted)credssp_auth = HttpCredSSPAuth('domain\\user', 'password',                               auth_mechanism='auto')# only allow Kerberoscredssp_auth = HttpCredSSPAuth('user@REALM.COM', 'password',                               auth_mechanism='kerberos')# only allow NTLMcredssp_auth = HttpCredSSPAuth('domain\\user', 'password',                               auth_mechanism='ntlm')r = requests.get(&quot;https://server:5986/wsman&quot;, auth=credssp_auth)```### TLS Protocol VersionsAs CredSSP uses TLS to encrypt the tokens that are transferred between theclient and the server, it is succeptible to differing implementations of SSL.By default, `requests-credssp` will work with server's that offer TLSv1.2but older Windows hosts that do not support this newer protocol version willTLSv1.2 was added in Windows Server 2012 and Windows 8 where older hosts needan optional update to be installed for it to work. If this update cannot beinstalled or you are willing to accept the risks of using the older TLSprotocols, `requests-credssp` can be set to disable TLSv1.2 and work witholder protocols like so;```pythonimport requestsfrom requests_credssp import HttpCredSSPAuthcredssp_auth = HttpCredSSPAuth('domain\\user', 'password', disable_tlsv1_2=True)r = requests.get(&quot;https://server:5986/wsman&quot;, auth=credssp_auth)```### CredSSP Protocol VersionsRecently Microsoft has released a security update to CredSSP to mitigate[CVE 2018-0886](https://support.microsoft.com/en-us/help/4093492/credssp-updates-for-cve-2018-0886-march-13-2018).The update added 2 new CredSSP protocol versions, `5` and `6` which changesthe way the client and server authenticate each other. While these changes aretransparent to someone who uses this library, it may be prudent to set theminimum version that this client would authenticate with. This means that anyolder server's who have not been patched for this vulnerability will berejected.To set a minimum protocol version that will only allow servers that have beenpatched for `CVE 2018-0886`, set `minimum_version=5` when creating`HttpCredSSPAuth` like so;```import requestsfrom requests_credssp import HttpCredSSPAuthcredssp_auth = HttpCredSSPAuth('domain\\user', 'password', minimum_version=5)r = requests.get(&quot;https://server:5986/wsman&quot;, auth=credssp_auth)```### Message EncryptionYou can use this library to encrypt and decrypt messages sent to and from theserver. Message encryption is done over the TLS channel that was negotiated inthe authentication stage. The below is an example of encrypting and decryptingmessages, note this is only a basic example and not a working script and theactual implementation depends on the protocol that is reading the messages.```pythonimport requestsfrom requests_credssp import HttpCredSSPAuth# build the auth request and sent an empty message to authenticatehostname = &quot;server&quot;session = requests.Session()session.auth = HttpCredSSPAuth('domain\\user', 'password')request = requests.Request('POST', &quot;https://%s:5986/wsman&quot; % server, data=None)prepared_request = self.session.prepare_request(request)response = session.send(prepared_request)context = session.auth.contexts[hostname]# encrypt the message using the wrap commandmessage = b'hi server'encrypted_message = context.wrap(message)# send the encrypted message and get the encrypted responserequest = requests.Request('POST', 'https://server:5986/wsman', data=encrypted_message)prepared_request = self.session.prepare_request(request)response = session.send(prepared_request)# decrypt the encrypted response from the serverencrypted_response = response.contentdecrypted_response = context.unwrap(encrypted_response)```## LoggingThis library uses the standard Python logging facilities. Log messages arelogged to the `requests_credssp` and `requests_credssp.credssp` named loggers.If you are receiving any errors or wish to debug the CredSSP process you shouldenable DEBUG level logs. These logs show fine grain information such as theprotocol and cipher negotiated and each CredSSP token used in theauthentication process.## Backlog* Add support for different credential types like smart card and redirected credentials</longdescription>
</pkgmetadata>