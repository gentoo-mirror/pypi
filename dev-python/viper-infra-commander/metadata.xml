<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://user-images.githubusercontent.com/11632726/73115950-673bda80-3f54-11ea-8d61-96143b7d57fd.png    :alt: Viper Infrastructure Commander.. image:: https://img.shields.io/pypi/v/viper-infra-commander.svg    :target: https://pypi.org/project/viper-infra-commander    :alt:.. image:: https://img.shields.io/pypi/pyversions/viper-infra-commander.svg    :target: https://pypi.org/project/viper-infra-commander    :alt:.. image:: https://travis-ci.com/sayanarijit/viper.svg?branch=master    :target: https://travis-ci.com/sayanarijit/viper    :alt:.. image:: https://codecov.io/gh/sayanarijit/viper/branch/master/graph/badge.svg    :target: https://codecov.io/gh/sayanarijit/viper    :alt:.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/python/black    :alt:.. image:: https://readthedocs.org/projects/viper-infrastructure-commander/badge/?version=latest    :target: https://viper-infrastructure-commander.readthedocs.io    :alt:Viper provides a simple API (Python and CLI) to easily manage large infrastructures.Getting Started~~~~~~~~~~~~~~~Installation^^^^^^^^^^^^.. code-block:: bash    pip install -U viper-infra-commander    # Or install with batteries included    pip install -U &quot;viper-infra-commander[batteries]&quot;Initialization^^^^^^^^^^^^^^.. code-block:: bash    # (Optional) enable tab completion    eval &quot;$(viper autocomplete $(basename $SHELL))&quot;    # See the help menu    viper -h    # Initialize SQLite DB    viper init -fViper in Action (Basic Mode)^^^^^^^^^^^^^^^^^^^^^^^^^^^^Define a set of hosts in csv format (json and yml are also supported) in ``hosts.csv``:.. code-block:: bash    cat &gt; hosts.csv &lt;&lt; EOF.. code-block::    ip,hostname,login_name,identity_file    192.168.0.11,host11,root,/root/.ssh/id_rsa.pub    192.168.0.12,host12,root,/root/.ssh/id_rsa.pub    192.168.0.13,host13,root,/root/.ssh/id_rsa.pub    192.168.0.14,host14,root,/root/.ssh/id_rsa.pub    192.168.0.15,host15,root,/root/.ssh/id_rsa.pub.. code-block:: bash    EOFDefine a task in ``task.py``:.. code-block:: bash    cat &gt; task.py &lt;&lt; EOF.. code-block:: python    from viper import Task    def ping_command(host):        return &quot;ping&quot;, &quot;-c&quot;, &quot;1&quot;, host.ip    def ping():        return Task(            name=&quot;Ping once&quot;,            command_factory=ping_command        ).. code-block:: bash    EOFPerform the following actions:- Run the task on the set of hosts in parallel with 5 workers,- filter only the results where the task failed,- re-run the task on them,- store the results in DB.. code-block:: bash    viper hosts:from-file hosts.csv \            | viper hosts:run-task task.ping --max-worker 5 \            | viper results:where returncode IS_NOT 0 \            | viper results:re-run --indent 4See the stdout of the final results from DB:.. code-block:: bash    viper results \            | viper results:final \            | viper results:format &quot;{host.hostname}: {stdout}&quot;Export the results to a csv file:.. code-block:: bash    viper results --final \            | viper results:to-file results.csv --indent 4Define a job using the Python API (CLI and Python API are almost similar):.. code-block:: bash    cat &gt; job.py &lt;&lt; EOF.. code-block:: python    from viper import WhereConditions    from task import ping    def ping_and_export(hosts):        return (            hosts.task(ping())            .run(max_workers=5)            .final()            .to_file(&quot;results.csv&quot;)        ).. code-block:: bash    EOFRun the job using CLI:.. code-block:: bash    viper hosts:from-file hosts.csv \            | viper run job.ping_and_export \            | viper results:format &quot;{host.hostname}: {stdout}&quot;Viperfile in Action (Advanced Mode)^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Define a project with custom subcommands in viperfile:.. code-block:: bash    cat &gt; viperfile.py &lt;&lt; EOF.. code-block:: python    from viper import Hosts, Task    from viper.project import Project, arg    foo = Project(prefix=&quot;foo&quot;)    @foo.hostgroup(args=[arg(&quot;-f&quot;, &quot;--file&quot;, default=&quot;hosts.csv&quot;)])    def allhosts(args):        return Hosts.from_file(args.file)    def remote_exec_command(host, command):        return (            &quot;ssh&quot;,            &quot;-i&quot;,            host.identity_file,            &quot;-l&quot;,            host.login_name,            &quot;-p&quot;,            str(host.port),            &quot;-o&quot;,            &quot;StrictHostKeyChecking=no&quot;,            &quot;-o&quot;,            &quot;PubkeyAuthentication=yes&quot;,            host.ip,            command,        )    @foo.job(        args=[            arg(&quot;command&quot;, help=&quot;command to execute&quot;),            arg(&quot;-w&quot;, &quot;--workers&quot;, type=int, default=1),        ]    )    def remote_exec(hosts, args):        return (            hosts.task(                Task(                    name=&quot;Remote execute command&quot;,                    command_factory=remote_exec_command,                    timeout=5,                ),                args.command,            )            .run(max_workers=args.workers)            .final()        ).. code-block:: bash    EOFSee the auto generated custom subcommands:.. code-block:: bash    viper --helpRun the job:.. code-block:: bash    viper @foo:allhosts \            | viper @foo:remote_exec &quot;uname -a&quot; --workers 5 \            | viper results:to-file results.csv \            | viper results:format &quot;{task.name} [{host.hostname}]: {returncode}: {stdout}&quot;Further Readings~~~~~~~~~~~~~~~~**API Docs with Examples ☞** https://viper-infra-commander.netlify.comContributing To Viper~~~~~~~~~~~~~~~~~~~~~**Contribution Guidelines ☞** https://github.com/sayanarijit/viper/blob/master/CONTRIBUTING.md</longdescription>
</pkgmetadata>