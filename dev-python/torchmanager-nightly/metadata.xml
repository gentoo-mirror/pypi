<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># torchmanager### A highly-wrapped PyTorch training and testing manager## Pre-request* Python 3.9+* PyTorch* tqdm* scipy (Optional)* tensorboard (Optional)## Installation* PyPi: `pip install torchmanager-nightly`* Conda: `conda install -c kisonho torchmanager-nightly`## The Manager1. Start with configurations:```from torchmanager.configs import Configs as _Configs# define necessary configurationsclass Configs(_Configs):    epochs: int    lr: float    ...    def get_arguments(parser: Union[argparse.ArgumentParser, argparse._ArgumentGroup] = argparse.ArgumentParser()) -&gt; Union[argparse.ArgumentParser, argparse._ArgumentGroup]:        '''Add arguments to argument parser'''        ...    def show_settings(self) -&gt; None:        ...# get configs from terminal argumentsconfigs = Configs.from_arguments()```2. Initialize the manager with target model, optimizer, loss function, and metrics:```import torch, torchmanager# define modelclass PytorchModel(torch.nn.Module):    ...# initialize model, optimizer, loss function, and metricsmodel = PytorchModel(...)optimizer = torch.optim.SGD(model.parameters(), lr=configs.lr)loss_fn = torchmanager.losses.CrossEntropy()metrics = {'accuracy': torchmanager.metrics.SparseCategoricalAccuracy()}# initialize managermanager = torchmanager.Manager(model, optimizer, loss_fn=loss_fn, metrics=metrics)```3. Train the model with fit method:```from torchmanager.data import Dataset# get datasetstraining_dataset: Dataset = ...val_dataset: Dataset = ...# train with fit methodmanager.fit(training_dataset, epochs=configs.epochs, val_dataset=val_dataset)```- There are also some other callbacks to use:```...tensorboard_callback = torchmanager.callbacks.TensorBoard('logs') # tensorboard dependency requiredlast_ckpt_callback = torchmanager.callbacks.LastCheckpoint(manager, 'last.model')model = manager.fit(..., callbacks_list=[tensorboard_callback, last_ckpt_callback])```- Or use `callbacks.Experiment` to handle both `callbacks.TensorBoard` and `callbacks.LastCheckpoint`:```...exp_callback = torchmanager.callbacks.Experiment('test.exp', manager) # tensorboard dependency requiredmodel = manager.fit(..., callbacks_list=[exp_callback])```4. Test the model with test method:```# get datasettesting_dataset: Dataset = ...# test with test methodmanager.test(testing_dataset)```5. Save final model in PyTorch format:```torch.save(model, &quot;model.pth&quot;)```## Custom your training loop1. Create your own manager class by extending the `Manager` class:```...class CustomManager(Manager):    ...```2. Override the `train_step` method:```class CustomManager(Manager):    ...        def train_step(x_train: torch.Tensor, y_train: torch.Tensor) -&gt; Dict[str, float]:        ...```</longdescription>
</pkgmetadata>