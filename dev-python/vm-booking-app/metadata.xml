<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># vm-booking-appA RESTful API application where I can store data about VMs used by customers.## InstallationInstall using `pip`:```$ pipenv install$ flask run```## API Usage ExamplesGet all users.```$ curl -X GET http://localhost:5000/api/users{  &quot;users&quot;: [    {      &quot;id&quot;: 1,      &quot;email: &quot;user1@gmail.com&quot;,      &quot;username&quot;: &quot;user1&quot;    },    {      &quot;id&quot;: 2,      &quot;email: &quot;user2@gmail.com&quot;,      &quot;username&quot;: &quot;user2&quot;    }  ]}```Get a user.Gets a user **username**.```$ curl -X GET http://localhost:5000/api/users/&lt;slug&gt;{  &quot;user&quot;: {    &quot;id&quot;: 1,    &quot;email: &quot;user1@gmail.com&quot;,    &quot;username&quot;: &quot;user1&quot;  }}```Create a user.**Email** and **username** are required fields.```$ curl -X POST http://localhost:5000/api/users -d '{&quot;email&quot;:&quot;user3@gmail.com&quot;, &quot;username&quot;: &quot;user3&quot;}'{  &quot;user&quot;: {    &quot;id&quot;: 1,    &quot;email&quot;: &quot;user3@gmail.com&quot;,    &quot;username&quot;: &quot;user3&quot;  }}```Update a user.Only **email** and **username** can be changed.```$ curl -X PATCH http://localhost:5000/api/users/&lt;slug&gt; -d '{&quot;email&quot;:&quot;user4@gmail.com&quot;}'{  &quot;user&quot;: {    &quot;id&quot;: 1,    &quot;email&quot;: &quot;user4@gmail.com&quot;,    &quot;username&quot;: &quot;user4&quot;  }}```Delete a user.```$ curl -X DELETE http://localhost:5000/api/users/&lt;slug&gt;{  &quot;user&quot;: {    &quot;id&quot;: 1,    &quot;email&quot;: &quot;user1@gmail.com&quot;,    &quot;username&quot;: &quot;user1&quot;  }}```Get all vms.```$ curl -X GET http://localhost:5000/api/vms{  &quot;vms&quot;: [    {      &quot;id&quot;: 1,      &quot;name&quot;: &quot;VM1&quot;,      &quot;ip&quot;: &quot;10.0.2.3&quot;,      &quot;description&quot;: &quot;general purpose vm&quot;,      &quot;status&quot;: &quot;running&quot;,      &quot;reservation_start&quot;: &quot;21/11/2026&quot;,      &quot;reservation_end&quot;: &quot;21/11/2026&quot;,      &quot;user_id&quot;: 1    }  ]}```Get a vm.```$ curl -X GET http://localhost:5000/api/vms/&lt;id&gt;{  &quot;vm&quot;: {    &quot;id&quot;: 1,    &quot;name&quot;: &quot;VM1&quot;,    &quot;ip&quot;: &quot;10.0.2.3&quot;,    &quot;description&quot;: &quot;general purpose vm&quot;,    &quot;status&quot;: &quot;running&quot;,    &quot;reservation_start&quot;: &quot;21/11/2026&quot;,    &quot;reservation_end&quot;: &quot;21/11/2026&quot;,    &quot;user_id&quot;: 1  }}```Create a vm.**Name**, **ip**, **user_id** are required. ```$ curl -H &quot;Content-Type: application/json&quot; -X POST http://localhost:5000/api/vms-d '{&quot;ip&quot;:&quot;10.0.2.4&quot;, &quot;name&quot;: &quot;VM1&quot;, &quot;reservation_start&quot;: &quot;21/11/2026&quot;, &quot;reservation_end&quot;: &quot;21/11/2026&quot;, &quot;userId&quot;: 2}'{  &quot;vm&quot;: {    &quot;id&quot;: 1,    &quot;name&quot;: &quot;VM1&quot;,    &quot;ip&quot;: &quot;10.0.2.3&quot;    &quot;description&quot;: &quot;general purpose vm&quot;,    &quot;status&quot;: &quot;running&quot;,    &quot;reservation_start&quot;: &quot;21/11/2026&quot;,    &quot;reservation_end&quot;: &quot;21/11/2026&quot;,    &quot;user_id&quot;: 1  }}```Update vm.Only **name**, **description** and **status** can be chanded currently.```$ curl -H &quot;Content-Type: application/json&quot; -X PATCH http://localhost:5000/api/vms/&lt;id&gt;-d '{&quot;description&quot;:&quot;standart vm&quot;}'{  &quot;vm&quot;: {    &quot;id&quot;: 1,    &quot;name&quot;: &quot;VM1&quot;,    &quot;ip&quot;: &quot;10.0.2.3&quot;,    &quot;description&quot;: &quot;standard vm&quot;,    &quot;status&quot;: &quot;running&quot;,    &quot;reservation_start&quot;: &quot;21/11/2026&quot;,    &quot;reservation_end&quot;: &quot;21/11/2026&quot;,    &quot;user_id&quot;: 1  }}```Delete vm.```$ curl -H &quot;Content-Type: application/json&quot; -X DELETE http://localhost:5000/api/vms/&lt;id&gt;{  &quot;vm&quot;: {    &quot;id&quot;: 1,    &quot;ip&quot;: &quot;10.0.2.3&quot;,    &quot;name&quot;: &quot;VM1&quot;,    &quot;description&quot;: &quot;standard vm&quot;,    &quot;status&quot;: &quot;running&quot;,    &quot;reservation_start&quot;: &quot;21/11/2026&quot;,    &quot;reservation_end&quot;: &quot;21/11/2026&quot;,    &quot;user_id&quot;: 1  }}```Get vm usage by username```$ curl -X GET http://localhost:5000/api/users/&lt;slug&gt;/vm-use{  &quot;user&quot;: {    &quot;id&quot;: 1,    &quot;email&quot;: &quot;user1@gmail.com&quot;,    &quot;username&quot;: &quot;user1&quot;,    &quot;vms&quot;: [{}, {}]  }}```## DevelopmentFor working on `vm-booking-app`, you'll need to have Python &gt;= 3.7 and [`pipenv`][1] installed. With those installed, run the following command to create a virtualenv for the project and fetch the dependencies:```$ pipenv install --dev...```Next, activate the virtualenv and get to work:```$ pipenv shell...(vm-booking-app) $```[1]: https://docs.pipenv.org/en/latest/## LintingFor linting we use `flake8` tool. We should keep code clean. To run linter use the following command:```$ flake8 api...```## ModelsUser```id: numberemail: stringusername: string```VM```id: numbername: stringip: stringdescription: string?status: stringreservation_start: DateTimereservation_end: DateTimeuser_id: User.id```## Deploying```cd ~git clone git@gitlab-1914910442.us-west-2.elb.amazonaws.com:oonyshchenko/vm-booking-app.gitgit checkout mastersource .env_proddocker-compose up --build -d```## Testing Open in browser http://localhost:5000 to get API status and version.Open in browser http://localhost:5000/healthy to get DB connection status.Automatic tests```(vm-booking-app) $ pytest(vm-booking-app) $ pytest --cov=api   ```</longdescription>
</pkgmetadata>