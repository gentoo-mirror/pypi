<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># FusionLab&lt;p align=&quot;center&quot;&gt;    &lt;br&gt;    &lt;img src=&quot;assets/imgs/fusionlab_banner.png&quot; width=&quot;400&quot;/&gt;    &lt;br&gt;&lt;p&gt;![Test](https://github.com/taipingeric/fusionlab/actions/workflows/python-app.yml/badge.svg)  [![Downloads](https://static.pepy.tech/badge/fusionlab)](https://pepy.tech/project/fusionlab)FusionLab is an open-source frameworks built for Deep Learning research written in PyTorch and Tensorflow. The code is easy to read and modify especially for newbie. Feel free to send pull requests :D* [What's New](#News)* [Installation](#Installation)* [How to use](#How-to-use)* [Encoders](#Encoders)* [Losses](#Losses)* [Segmentation](#Segmentation)* [Acknowledgements](#Acknowledgements)## Installation### With pip```bashpip install fusionlab```#### For Mac M1 chip usersGo to [Install on Macbook M1 chip](./configs/Install%20on%20Macbook%20M1.md) ## How to use```pythonimport fusionlab as fl# PyTorchencoder = fl.encoders.VGG16()# Tensorflowencoder = fl.encoders.TFVGG16()```## Encoders[encoder list](fusionlab/encoders/README.md)## Losses[Loss func list](fusionlab/losses/README.md)* Dice Loss* Tversky Loss* IoU Loss```python# Dice Loss (Multiclass)import fusionlab as flimport torchimport tensorflow as tf# PyTorchpred = torch.normal(0., 1., (1, 3, 4, 4)) # (N, C, *)target = torch.randint(0, 3, (1, 4, 4)) # (N, *)loss_fn = fl.losses.DiceLoss()loss = loss_fn(pred, target)# Tensorflowpred = tf.random.normal((1, 4, 4, 3), 0., 1.) # (N, *, C)target = tf.random.uniform((1, 4, 4), 0, 3) # (N, *)loss_fn = fl.losses.TFDiceLoss(&quot;multiclass&quot;)loss = loss_fn(target, pred)# Dice Loss (Binary)# PyTorchpred = torch.normal(0, 1, (1, 1, 4, 4)) # (N, 1, *)target = torch.randint(0, 3, (1, 4, 4)) # (N, *)loss_fn = fl.losses.DiceLoss(&quot;binary&quot;)loss = loss_fn(pred, target)# Tensorflowpred = tf.random.normal((1, 4, 4, 1), 0., 1.) # (N, *, 1)target = tf.random.uniform((1, 4, 4), 0, 3) # (N, *)loss_fn = fl.losses.TFDiceLoss(&quot;binary&quot;)loss = loss_fn(target, pred)```## Segmentation```pythonimport fusionlab as fl# PyTorch UNetunet = fl.segmentation.UNet(cin=3, num_cls=10, base_dim=64)# Tensorflow UNetimport tensorflow as tf# Multiclass Segmentationunet = tf.keras.Sequential([   fl.segmentation.TFUNet(num_cls=10, base_dim=64),   tf.keras.layers.Activation(tf.nn.softmax),])unet.compile(loss=fl.losses.TFDiceLoss(&quot;multiclass&quot;))# Binary Segmentationunet = tf.keras.Sequential([   fl.segmentation.TFUNet(num_cls=1, base_dim=64),   tf.keras.layers.Activation(tf.nn.sigmoid),])unet.compile(loss=fl.losses.TFDiceLoss(&quot;binary&quot;))```[Segmentation model list](fusionlab/segmentation/README.md)* UNet* ResUNet* UNet2plus## News0.0.52* Tversky Loss for Torch and TF## Acknowledgements* [BloodAxe/pytorch-toolbelt](https://github.com/BloodAxe/pytorch-toolbelt)</longdescription>
</pkgmetadata>