<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://dev.azure.com/azure-sdk/public/_apis/build/status/azure-sdk-for-python.client?branchName=main)](https://dev.azure.com/azure-sdk/public/_build/latest?definitionId=46?branchName=main)# Azure Conversational Language Understanding client library for PythonConversational Language Understanding - aka **CLU** for short - is a cloud-based conversational AI service which provides many language understanding capabilities like:- Conversation App: It's used in extracting intents and entities in conversations- Workflow app: Acts like an orchestrator to select the best candidate to analyze conversations to get best response from apps like Qna, Luis, and Conversation App- Conversational Summarization: Used to analyze conversations in the form of issues/resolution, chapter title, and narrative summarizations[Source code][conversationallanguage_client_src]| [Package (PyPI)][conversationallanguage_pypi_package]| [Package (Conda)](https://anaconda.org/microsoft/azure-ai-language-conversations/)| [API reference documentation][api_reference_documentation]| [Samples][conversationallanguage_samples]| [Product documentation][conversationallanguage_docs]| [REST API documentation][conversationallanguage_restdocs]## Getting started### Prerequisites* Python 3.7 or later is required to use this package.* An [Azure subscription][azure_subscription]* A [Language service resource][language_resource]### Install the packageInstall the Azure Conversations client library for Python with [pip][pip_link]:```bashpip install azure-ai-language-conversations```&gt; Note: This version of the client library defaults to the 2023-04-01 version of the service### Authenticate the clientIn order to interact with the CLU service, you'll need to create an instance of the [ConversationAnalysisClient][conversationanalysisclient_class] class, or [ConversationAuthoringClient][conversationauthoringclient_class] class. You will need an **endpoint**, and an **API key** to instantiate a client object. For more information regarding authenticating with Cognitive Services, see [Authenticate requests to Azure Cognitive Services][cognitive_auth].#### Get an API keyYou can get the **endpoint** and an **API key** from the Cognitive Services resource in the [Azure Portal][azure_portal].Alternatively, use the [Azure CLI][azure_cli] command shown below to get the API key from the Cognitive Service resource.```powershellaz cognitiveservices account keys list --resource-group &lt;resource-group-name&gt; --name &lt;resource-name&gt;```#### Create ConversationAnalysisClientOnce you've determined your **endpoint** and **API key** you can instantiate a `ConversationAnalysisClient`:```pythonfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.conversations import ConversationAnalysisClientendpoint = &quot;https://&lt;my-custom-subdomain&gt;.cognitiveservices.azure.com/&quot;credential = AzureKeyCredential(&quot;&lt;api-key&gt;&quot;)client = ConversationAnalysisClient(endpoint, credential)```#### Create ConversationAuthoringClientOnce you've determined your **endpoint** and **API key** you can instantiate a `ConversationAuthoringClient`:```pythonfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.conversations.authoring import ConversationAuthoringClientendpoint = &quot;https://&lt;my-custom-subdomain&gt;.cognitiveservices.azure.com/&quot;credential = AzureKeyCredential(&quot;&lt;api-key&gt;&quot;)client = ConversationAuthoringClient(endpoint, credential)```#### Create a client with an Azure Active Directory CredentialTo use an [Azure Active Directory (AAD) token credential][cognitive_authentication_aad],provide an instance of the desired credential type obtained from the[azure-identity][azure_identity_credentials] library.Note that regional endpoints do not support AAD authentication. Create a [custom subdomain][custom_subdomain]name for your resource in order to use this type of authentication.Authentication with AAD requires some initial setup:- [Install azure-identity][install_azure_identity]- [Register a new AAD application][register_aad_app]- [Grant access][grant_role_access] to the Language service by assigning the &quot;Cognitive Services Language Reader&quot; role to your service principal.After setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.As an example, [DefaultAzureCredential][default_azure_credential]can be used to authenticate the client:Set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`Use the returned token credential to authenticate the client:```pythonfrom azure.ai.language.conversations import ConversationAnalysisClientfrom azure.identity import DefaultAzureCredentialcredential = DefaultAzureCredential()client = ConversationAnalysisClient(endpoint=&quot;https://&lt;my-custom-subdomain&gt;.cognitiveservices.azure.com/&quot;, credential=credential)```## Key concepts### ConversationAnalysisClientThe [ConversationAnalysisClient][conversationanalysisclient_class] is the primary interface for making predictions using your deployed Conversations models. For asynchronous operations, an async `ConversationAnalysisClient` is in the `azure.ai.language.conversation.aio` namespace.### ConversationAuthoringClientYou can use the [ConversationAuthoringClient][conversationauthoringclient_class] to interface with the [Azure Language Portal][azure_language_portal] to carry out authoring operations on your language resource/project. For example, you can use it to create a project, populate with training data, train, test, and deploy. For asynchronous operations, an async `ConversationAuthoringClient` is in the `azure.ai.language.conversation.authoring.aio` namespace.## ExamplesThe `azure-ai-language-conversation` client library provides both synchronous and asynchronous APIs.The following examples show common scenarios using the `client` [created above](#create-conversationanalysisclient).### Analyze Text with a Conversation AppIf you would like to extract custom intents and entities from a user utterance, you can call the `client.analyze_conversation()` method with your conversation's project name as follows:```python# import librariesimport osfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.conversations import ConversationAnalysisClient# get secretsclu_endpoint = os.environ[&quot;AZURE_CONVERSATIONS_ENDPOINT&quot;]clu_key = os.environ[&quot;AZURE_CONVERSATIONS_KEY&quot;]project_name = os.environ[&quot;AZURE_CONVERSATIONS_PROJECT_NAME&quot;]deployment_name = os.environ[&quot;AZURE_CONVERSATIONS_DEPLOYMENT_NAME&quot;]# analyze queyclient = ConversationAnalysisClient(clu_endpoint, AzureKeyCredential(clu_key))with client:    query = &quot;Send an email to Carol about the tomorrow's demo&quot;    result = client.analyze_conversation(        task={            &quot;kind&quot;: &quot;Conversation&quot;,            &quot;analysisInput&quot;: {                &quot;conversationItem&quot;: {                    &quot;participantId&quot;: &quot;1&quot;,                    &quot;id&quot;: &quot;1&quot;,                    &quot;modality&quot;: &quot;text&quot;,                    &quot;language&quot;: &quot;en&quot;,                    &quot;text&quot;: query                },                &quot;isLoggingEnabled&quot;: False            },            &quot;parameters&quot;: {                &quot;projectName&quot;: project_name,                &quot;deploymentName&quot;: deployment_name,                &quot;verbose&quot;: True            }        }    )# view resultprint(&quot;query: {}&quot;.format(result[&quot;result&quot;][&quot;query&quot;]))print(&quot;project kind: {}\n&quot;.format(result[&quot;result&quot;][&quot;prediction&quot;][&quot;projectKind&quot;]))print(&quot;top intent: {}&quot;.format(result[&quot;result&quot;][&quot;prediction&quot;][&quot;topIntent&quot;]))print(&quot;category: {}&quot;.format(result[&quot;result&quot;][&quot;prediction&quot;][&quot;intents&quot;][0][&quot;category&quot;]))print(&quot;confidence score: {}\n&quot;.format(result[&quot;result&quot;][&quot;prediction&quot;][&quot;intents&quot;][0][&quot;confidenceScore&quot;]))print(&quot;entities:&quot;)for entity in result[&quot;result&quot;][&quot;prediction&quot;][&quot;entities&quot;]:    print(&quot;\ncategory: {}&quot;.format(entity[&quot;category&quot;]))    print(&quot;text: {}&quot;.format(entity[&quot;text&quot;]))    print(&quot;confidence score: {}&quot;.format(entity[&quot;confidenceScore&quot;]))    if &quot;resolutions&quot; in entity:        print(&quot;resolutions&quot;)        for resolution in entity[&quot;resolutions&quot;]:            print(&quot;kind: {}&quot;.format(resolution[&quot;resolutionKind&quot;]))            print(&quot;value: {}&quot;.format(resolution[&quot;value&quot;]))    if &quot;extraInformation&quot; in entity:        print(&quot;extra info&quot;)        for data in entity[&quot;extraInformation&quot;]:            print(&quot;kind: {}&quot;.format(data[&quot;extraInformationKind&quot;]))            if data[&quot;extraInformationKind&quot;] == &quot;ListKey&quot;:                print(&quot;key: {}&quot;.format(data[&quot;key&quot;]))            if data[&quot;extraInformationKind&quot;] == &quot;EntitySubtype&quot;:                print(&quot;value: {}&quot;.format(data[&quot;value&quot;]))```### Analyze Text with an Orchestration AppIf you would like to pass the user utterance to your orchestrator (worflow) app, you can call the `client.analyze_conversation()` method with your orchestration's project name. The orchestrator project simply orchestrates the submitted user utterance between your language apps (Luis, Conversation, and Question Answering) to get the best response according to the user intent. See the next example:```python# import librariesimport osfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.conversations import ConversationAnalysisClient# get secretsclu_endpoint = os.environ[&quot;AZURE_CONVERSATIONS_ENDPOINT&quot;]clu_key = os.environ[&quot;AZURE_CONVERSATIONS_KEY&quot;]project_name = os.environ[&quot;AZURE_CONVERSATIONS_WORKFLOW_PROJECT_NAME&quot;]deployment_name = os.environ[&quot;AZURE_CONVERSATIONS_WORKFLOW_DEPLOYMENT_NAME&quot;]# analyze queryclient = ConversationAnalysisClient(clu_endpoint, AzureKeyCredential(clu_key))with client:    query = &quot;Reserve a table for 2 at the Italian restaurant&quot;    result = client.analyze_conversation(        task={            &quot;kind&quot;: &quot;Conversation&quot;,            &quot;analysisInput&quot;: {                &quot;conversationItem&quot;: {                    &quot;participantId&quot;: &quot;1&quot;,                    &quot;id&quot;: &quot;1&quot;,                    &quot;modality&quot;: &quot;text&quot;,                    &quot;language&quot;: &quot;en&quot;,                    &quot;text&quot;: query                },                &quot;isLoggingEnabled&quot;: False            },            &quot;parameters&quot;: {                &quot;projectName&quot;: project_name,                &quot;deploymentName&quot;: deployment_name,                &quot;verbose&quot;: True            }        }    )# view resultprint(&quot;query: {}&quot;.format(result[&quot;result&quot;][&quot;query&quot;]))print(&quot;project kind: {}\n&quot;.format(result[&quot;result&quot;][&quot;prediction&quot;][&quot;projectKind&quot;]))# top intenttop_intent = result[&quot;result&quot;][&quot;prediction&quot;][&quot;topIntent&quot;]print(&quot;top intent: {}&quot;.format(top_intent))top_intent_object = result[&quot;result&quot;][&quot;prediction&quot;][&quot;intents&quot;][top_intent]print(&quot;confidence score: {}&quot;.format(top_intent_object[&quot;confidenceScore&quot;]))print(&quot;project kind: {}&quot;.format(top_intent_object[&quot;targetProjectKind&quot;]))if top_intent_object[&quot;targetProjectKind&quot;] == &quot;Luis&quot;:    print(&quot;\nluis response:&quot;)    luis_response = top_intent_object[&quot;result&quot;][&quot;prediction&quot;]    print(&quot;top intent: {}&quot;.format(luis_response[&quot;topIntent&quot;]))    print(&quot;\nentities:&quot;)    for entity in luis_response[&quot;entities&quot;]:        print(&quot;\n{}&quot;.format(entity))```### Conversational SummarizationYou can use this sample if you need to summarize a conversation in the form of an issue, and final resolution. For example, a dialog from tech support:```python# import librariesimport osfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.conversations import ConversationAnalysisClient# get secretsendpoint = os.environ[&quot;AZURE_CONVERSATIONS_ENDPOINT&quot;]key = os.environ[&quot;AZURE_CONVERSATIONS_KEY&quot;]# analyze queryclient = ConversationAnalysisClient(endpoint, AzureKeyCredential(key))with client:    poller = client.begin_conversation_analysis(        task={            &quot;displayName&quot;: &quot;Analyze conversations from xxx&quot;,            &quot;analysisInput&quot;: {                &quot;conversations&quot;: [                    {                        &quot;conversationItems&quot;: [                            {                                &quot;text&quot;: &quot;Hello, how can I help you?&quot;,                                &quot;modality&quot;: &quot;text&quot;,                                &quot;id&quot;: &quot;1&quot;,                                &quot;participantId&quot;: &quot;Agent&quot;                            },                            {                                &quot;text&quot;: &quot;How to upgrade Office? I am getting error messages the whole day.&quot;,                                &quot;modality&quot;: &quot;text&quot;,                                &quot;id&quot;: &quot;2&quot;,                                &quot;participantId&quot;: &quot;Customer&quot;                            },                            {                                &quot;text&quot;: &quot;Press the upgrade button please. Then sign in and follow the instructions.&quot;,                                &quot;modality&quot;: &quot;text&quot;,                                &quot;id&quot;: &quot;3&quot;,                                &quot;participantId&quot;: &quot;Agent&quot;                            }                        ],                        &quot;modality&quot;: &quot;text&quot;,                        &quot;id&quot;: &quot;conversation1&quot;,                        &quot;language&quot;: &quot;en&quot;                    },                ]            },            &quot;tasks&quot;: [                {                    &quot;taskName&quot;: &quot;Issue task&quot;,                    &quot;kind&quot;: &quot;ConversationalSummarizationTask&quot;,                    &quot;parameters&quot;: {                        &quot;summaryAspects&quot;: [&quot;issue&quot;]                    }                },                {                    &quot;taskName&quot;: &quot;Resolution task&quot;,                    &quot;kind&quot;: &quot;ConversationalSummarizationTask&quot;,                    &quot;parameters&quot;: {                        &quot;summaryAspects&quot;: [&quot;resolution&quot;]                    }                },            ]        }    )    # view result    result = poller.result()    task_results = result[&quot;tasks&quot;][&quot;items&quot;]    for task in task_results:        print(f&quot;\n{task['taskName']} status: {task['status']}&quot;)        task_result = task[&quot;results&quot;]        if task_result[&quot;errors&quot;]:            print(&quot;... errors occurred ...&quot;)            for error in task_result[&quot;errors&quot;]:                print(error)        else:            conversation_result = task_result[&quot;conversations&quot;][0]            if conversation_result[&quot;warnings&quot;]:                print(&quot;... view warnings ...&quot;)                for warning in conversation_result[&quot;warnings&quot;]:                    print(warning)            else:                summaries = conversation_result[&quot;summaries&quot;]                print(&quot;... view task result ...&quot;)                for summary in summaries:                    print(f&quot;{summary['aspect']}: {summary['text']}&quot;)```### Import a Conversation ProjectThis sample shows a common scenario for the authoring part of the SDK```pythonimport osfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.conversations.authoring import ConversationAuthoringClientclu_endpoint = os.environ[&quot;AZURE_CONVERSATIONS_ENDPOINT&quot;]clu_key = os.environ[&quot;AZURE_CONVERSATIONS_KEY&quot;]project_name = &quot;test_project&quot;exported_project_assets = {    &quot;projectKind&quot;: &quot;Conversation&quot;,    &quot;intents&quot;: [{&quot;category&quot;: &quot;Read&quot;}, {&quot;category&quot;: &quot;Delete&quot;}],    &quot;entities&quot;: [{&quot;category&quot;: &quot;Sender&quot;}],    &quot;utterances&quot;: [        {            &quot;text&quot;: &quot;Open Blake's email&quot;,            &quot;dataset&quot;: &quot;Train&quot;,            &quot;intent&quot;: &quot;Read&quot;,            &quot;entities&quot;: [{&quot;category&quot;: &quot;Sender&quot;, &quot;offset&quot;: 5, &quot;length&quot;: 5}],        },        {            &quot;text&quot;: &quot;Delete last email&quot;,            &quot;language&quot;: &quot;en-gb&quot;,            &quot;dataset&quot;: &quot;Test&quot;,            &quot;intent&quot;: &quot;Delete&quot;,            &quot;entities&quot;: [],        },    ],}client = ConversationAuthoringClient(    clu_endpoint, AzureKeyCredential(clu_key))poller = client.begin_import_project(    project_name=project_name,    project={        &quot;assets&quot;: exported_project_assets,        &quot;metadata&quot;: {            &quot;projectKind&quot;: &quot;Conversation&quot;,            &quot;settings&quot;: {&quot;confidenceThreshold&quot;: 0.7},            &quot;projectName&quot;: &quot;EmailApp&quot;,            &quot;multilingual&quot;: True,            &quot;description&quot;: &quot;Trying out CLU&quot;,            &quot;language&quot;: &quot;en-us&quot;,        },        &quot;projectFileVersion&quot;: &quot;2022-05-01&quot;,    },)response = poller.result()print(response)```## Optional ConfigurationOptional keyword arguments can be passed in at the client and per-operation level. The azure-core [reference documentation][azure_core_ref_docs] describes available configurations for retries, logging, transport protocols, and more.## Troubleshooting### GeneralThe Conversations client will raise exceptions defined in [Azure Core][azure_core_exceptions].### LoggingThis library uses the standard[logging][python_logging] library for logging.Basic information about HTTP sessions (URLs, headers, etc.) is logged at INFOlevel.Detailed DEBUG level logging, including request/response bodies and unredactedheaders, can be enabled on a client with the `logging_enable` argument.See full SDK logging documentation with examples [here][sdk_logging_docs].```pythonimport sysimport loggingfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.conversations import ConversationAnalysisClient# Create a logger for the 'azure' SDKlogger = logging.getLogger('azure')logger.setLevel(logging.DEBUG)# Configure a console outputhandler = logging.StreamHandler(stream=sys.stdout)logger.addHandler(handler)endpoint = &quot;https://&lt;my-custom-subdomain&gt;.cognitiveservices.azure.com/&quot;credential = AzureKeyCredential(&quot;&lt;my-api-key&gt;&quot;)# This client will log detailed information about its HTTP sessions, at DEBUG levelclient = ConversationAnalysisClient(endpoint, credential, logging_enable=True)result = client.analyze_conversation(...)```Similarly, `logging_enable` can enable detailed logging for a single operation, even when it isn't enabled for the client:```pythonresult = client.analyze_conversation(..., logging_enable=True)```## Next steps### More sample codeSee the [Sample README][conversationallanguage_samples] for several code snippets illustrating common patterns used in the CLU Python API.## ContributingSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.This project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.&lt;!-- LINKS --&gt;[azure_cli]: https://docs.microsoft.com/cli/azure/[azure_portal]: https://portal.azure.com/[azure_subscription]: https://azure.microsoft.com/free/[language_resource]: https://portal.azure.com/#create/Microsoft.CognitiveServicesTextAnalytics[cla]: https://cla.microsoft.com[coc_contact]: mailto:opencode@microsoft.com[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/[cognitive_auth]: https://docs.microsoft.com/azure/cognitive-services/authentication/[contributing]: https://github.com/Azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md[python_logging]: https://docs.python.org/3/library/logging.html[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/azure-sdk-logging[azure_core_ref_docs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html[azure_core_readme]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md[pip_link]:https://pypi.org/project/pip/[conversationallanguage_client_src]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations[conversationallanguage_pypi_package]: https://pypi.org/project/azure-ai-language-conversations/[api_reference_documentation]:https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-conversations/latest/azure.ai.language.conversations.html[conversationallanguage_refdocs]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations[conversationallanguage_docs]: https://docs.microsoft.com/azure/cognitive-services/language-service/conversational-language-understanding/overview[conversationallanguage_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/README.md[conversationallanguage_restdocs]: https://learn.microsoft.com/rest/api/language/[conversationanalysisclient_class]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-conversations/latest/azure.ai.language.conversations.html#azure.ai.language.conversations.ConversationAnalysisClient[conversationauthoringclient_class]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-conversations/latest/azure.ai.language.conversations.html#azure.ai.language.conversations.ConversationAuthoringClient[azure_core_exceptions]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md[azure_language_portal]: https://language.cognitive.azure.com/home[cognitive_authentication_aad]: https://docs.microsoft.com/azure/cognitive-services/authentication#authenticate-with-azure-active-directory[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain[install_azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#install-the-package[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal[grant_role_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Ftemplate%2Fazure-template%2FREADME.png)# Release History## 1.1.0 (2023-06-13)### Features Added- Added support for service version 2023-04-01.### Breaking Changes&gt; Note: The following changes are only breaking from the previous beta. They are not breaking since version 1.0.0 when those types and members did not exist.- Removed support for service version 2022-05-15-preview.- Removed support for service version 2022-10-01-preview.- Removed support for &quot;ConversationalPIITask&quot; analysis with `ConversationAnalysisClient`.- Removed support for &quot;ConversationalSentimentTask&quot; with `ConversationAnalysisClient`.- Removed the following methods from `ConversationAuthoringClient`:  - `begin_assign_deployment_resources`  - `get_assign_deployment_resources_status`  - `begin_unassign_deployment_resources`  - `get_unassign_deployment_resources_status`  - `begin_delete_deployment_from_resources`  - `get_deployment_delete_from_resources_status`  - `list_assigned_resource_deployments`  - `list_deployment_resources`## 1.1.0b3 (2022-11-10)### Features Added- Added support for the &quot;ConversationalSentimentTask&quot; kind with `begin_conversation_analysis`.- Added support for &quot;chapterTitle&quot; and &quot;narrative&quot; `summaryAspects` options for ConversationalSummarizationTasks.- Added methods to the `ConversationAuthoringClient` to manage deployment resources:  - `begin_assign_deployment_resources`  - `get_assign_deployment_resources_status`  - `begin_unassign_deployment_resources`  - `get_unassign_deployment_resources_status`  - `begin_delete_deployment_from_resources`  - `get_deployment_delete_from_resources_status`  - `begin_load_snapshot`  - `get_load_snapshot_status`  - `list_assigned_resource_deployments`  - `list_deployment_resources`- Added optional `trained_model_label` keyword argument to `begin_export_project`.### Other Changes* This version and all future versions will require Python 3.7+. Python 3.6 is no longer supported.## 1.1.0b2 (2022-07-01)### Features Added* Added Azure Active Directory (AAD) authentication support* Added support for authoring operations with `ConversationAuthoringClient` under the `azure.ai.language.conversations.authoring` namespace.## 1.0.0 (2022-06-27)### Features Added* Added Azure Active Directory (AAD) authentication support* Added more resolution types for entities* Added support for authoring operations with `ConversationAuthoringClient` under the `azure.ai.language.conversations.authoring` namespace.### Breaking Changes* Client now uses python dictionaries for method parameters and results instead of classes.## 1.1.0b1 (2022-05-26)### Features Added* Conversation summarization task (Long-running operation)* Conversation PII extraction task (Long-running operation)### Breaking Changes* Client now uses python dictionaries for method parameters and results instead of classes.* Many input and result parameter name changes in `analyze_conversation()` method## 1.0.0b3 (2022-04-19)### Features Added* Entity resolutions* Extra features### Breaking Changes* The `ConversationAnalysisOptions` model used as input to the `analyze_conversation` operation is now wrapped in a `CustomConversationalTask` which combines the analysis options with the project parameters into a single model.* The `query` within the `ConversationAnalysisOptions` is now further qualified as a `TextConversationItem` with additional properties.* The output `AnalyzeConversationResult` is now wrapped in a `CustomConversationalTaskResult` according to the input model.### Other Changes* Python 2.7 is no longer supported. Please use Python version 3.6 or later.## 1.0.0b1 (2021-11-03)### Features Added* Initial release</longdescription>
</pkgmetadata>