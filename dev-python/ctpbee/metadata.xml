<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ctpbeebee bee .... for developer's trading ~&gt; tiny but strong`ctpbee` provide a micro core of trading, you can make trade and backtest in it.## 环境设置```bash#  linux用户快速生成中文支持/ windows用户无须设置 sudo ctpbee -auto generate```## 灵感起源使用来自于[vnpy](https://github.com/vnpy/vnpy)的交易接口, 重新提供上层封装API, 简化安装流程, 提供快速实现交易功能.## 快速安装```bash# python version: 3.6+# 源码安装 git clone https://github.com/ctpbee/ctpbee &amp;&amp; cd ctpbee &amp;&amp; python3 setup.py install  # pip源安装pip3 install ctpbee```### 支持系统- [x] Linux- [x] Windows- [x] MacOS## 文档与交流[文档地址](http://docs.ctpbee.com)[论坛地址](http://forum.ctpbee.com)## 快速开始```pythonfrom ctpbee import CtpBeefrom ctpbee import CtpbeeApifrom ctpbee.constant import *class CTA(CtpbeeApi):    def __init__(self, name):        super().__init__(name)    def on_init(self, init: bool) -&gt; None:  # 初始化完成回调         self.info(&quot;init successful&quot;)    def on_tick(self, tick: TickData) -&gt; None:        print(tick.datetime, tick.last_price)  # 打印tick时间戳以及最新价格         # 买开        self.action.buy_open(tick.last_price, 1, tick)        # 买平        self.action.buy_close(tick.last_price, 1, tick)        # 卖开        self.action.sell_open(tick.last_price, 1, tick)        # 卖平         self.action.sell_close(tick.last_price, 1, tick)        # 获取合约的仓位        position = self.center.get_position(tick.local_symbol)        print(position)    def on_contract(self, contract: ContractData) -&gt; None:        if contract.local_symbol == &quot;rb2205.SHFE&quot;:            self.action.subscribe(contract.local_symbol)  # 订阅行情             print(&quot;合约乘数: &quot;, contract.size)if __name__ == '__main__':    app = CtpBee('ctp', __name__)    info = {        &quot;CONNECT_INFO&quot;: {            &quot;userid&quot;: &quot;&quot;,            &quot;password&quot;: &quot;&quot;,            &quot;brokerid&quot;: &quot;&quot;,            &quot;md_address&quot;: &quot;&quot;,            &quot;td_address&quot;: &quot;&quot;,            &quot;appid&quot;: &quot;&quot;,            &quot;auth_code&quot;: &quot;&quot;,            &quot;product_info&quot;: &quot;&quot;        },        &quot;INTERFACE&quot;: &quot;ctp&quot;,        &quot;TD_FUNC&quot;: True,  # Open trading feature    }    app.config.from_mapping(info)  # loading config from dict object    cta = CTA(&quot;cta&quot;)    app.add_extension(cta)    app.start() ```## 功能支持- [x] 简单易用的下单功能- [x] 仓位盈亏计算- [x] 多周期多合约回测- [x] 实时行情- [x] k线生成- [x] 回测报告生成- [x] 自动运维- [x] 多交易接口支持    - `ctp`    - `ctp_mini`    - `rohon`    - `open_ctp`更多相关信息, 请参阅[文档](http://docs.ctpbee.com)## 命令行运行效果![avatar](source/运行.png)## 回测截图支持多周期多合约回测![avatar](source/回测.png)## PR支持Only Accept [PR](https://github.com/ctpbee/ctpbee/compare) code to `dev` branch, please remember that !&gt; 对于本地数据自动运维方案, 请👉 [Hive](https://github.com/ctpbee/hive)## 模拟测试 &amp;&amp; 免责声明本项目长期维护, 开源仅作爱好，本人不对代码产生的任何使用后果负责. 功能尽可能会保持稳定,但是为了你的实盘账户着想，请先用[simnow](https://www.simnow.com.cn/product.action)或者[openctp](https://github.com/openctp/openctp)账户测试完善再上实盘!&gt; 关于如何对接`openctp`,请参阅此教程[click here](source/openctp.md)## 遇到问题请提交issue或者于issue搜索关键字, 或者查阅[此处](http://docs.ctpbee.com/error.html)## License- MIT</longdescription>
</pkgmetadata>