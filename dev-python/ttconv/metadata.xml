<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ttconv (Timed Text Conversion)      $$\     $$\                                                   $$ |    $$ |                                                $$$$$$\ $$$$$$\    $$$$$$$\  $$$$$$\  $$$$$$$\ $$\    $$\     \_$$  _|\_$$  _|  $$  _____|$$  __$$\ $$  __$$\\$$\  $$  |      $$ |    $$ |    $$ /      $$ /  $$ |$$ |  $$ |\$$\$$  /       $$ |$$\ $$ |$$\ $$ |      $$ |  $$ |$$ |  $$ | \$$$  /        \$$$$  |\$$$$  |\$$$$$$$\ \$$$$$$  |$$ |  $$ |  \$  /          \____/  \____/  \_______| \______/ \__|  \__|   \_/    ## Introduction_ttconv_ is a library and command line application written in pure Python for converting between timed textformats used in the presentations of captions, subtitles, karaoke, etc.    TTML / IMSC ---                         --- IMSC / TTML                    \                     /    SCC / CEA 608 ----- Canonical Model -------- WebVTT                    /                     \    EBU STL -------                         --- SRT                  /    SRT ---------_ttconv_ works by mapping the input document, whatever its format, into an internal canonical model, which is then mapped to theformat of the output document is derived. The canonical model closely follows the [TTML 2](https://www.w3.org/TR/ttml2) data model,as constrained by the [IMSC 1.1 Text Profile](https://www.w3.org/TR/ttml-imsc1.1/#text-profile) specification.## Online demo[https://ttconv.sandflow.com/](https://ttconv.sandflow.com/)## Format support_ttconv_ currently supports the following input and output formats. Additional input and output formats are planned, andsuggestions/contributions are welcome.### Input Formats* [CEA 608/.scc](https://en.wikipedia.org/wiki/EIA-608)* [IMSC 1.1 Text Profile/.ttml](https://www.w3.org/TR/ttml-imsc1.1/#text-profile)* [EBU STL](https://tech.ebu.ch/docs/tech/tech3264.pdf)* [SubRip/.srt](https://en.wikipedia.org/wiki/SubRip)### Output Formats* [SubRip/.srt](https://en.wikipedia.org/wiki/SubRip)* [IMSC 1.1 Text Profile/.ttml](https://www.w3.org/TR/ttml-imsc1.1/#text-profile)* [WebVTT](https://www.w3.org/TR/webvtt1/)## Quick startTo install the latest version of `ttconv`, including pre-releases:```shpip install --pre ttconvtt convert -i &lt;input .scc file&gt; -o &lt;output .ttml file&gt;```## Documentation### Command line`tt convert [-h] -i INPUT -o OUTPUT [--itype ITYPE] [--otype OTYPE] [--config CONFIG] [--config_file CONFIG_FILE]`* `--itype`: `TTML` | `SCC` | `STL` | `SRT` (extrapolated from the filename, if omitted)* `--otype`: `TTML` | `SRT` | `VTT` (extrapolated from the filename, if omitted)* `--config` and `--config_file`: JSON dictionaries with the following members:  * `&quot;general&quot;: JSON object`: General configuration options (see below)  * `&quot;imsc_writer&quot;: JSON object`: IMSC Writer configuration options (see below)  * `&quot;stl_reader&quot;: JSON object`: STL Reader configuration options (see below)  * `&quot;vtt_writer&quot;: JSON object`: WebVTT Writer configuration options (see below)Example:`tt convert -i &lt;.scc file&gt; -o &lt;.ttml file&gt; --itype SCC --otype TTML --config '{&quot;general&quot;: {&quot;progress_bar&quot;:false, &quot;log_level&quot;:&quot;WARN&quot;}}'`### General configuration#### progress_bar`&quot;progress_bar&quot;: true | false`A progress bar is displayed if `progress_bar` is `true` and `log_level` is `&quot;INFO&quot;`.Default: `true`### log_level`&quot;log_level&quot;: &quot;INFO&quot; | &quot;WARN&quot; | &quot;ERROR&quot;`Logging verbosityDefault: `&quot;INFO&quot;`### IMSC Writer configuration### time_format`&quot;time_format&quot;: &quot;frames&quot; | &quot;clock_time&quot; | &quot;clock_time_with_frames&quot;`Specifies whether the TTML time expressions are in frames (`f`), `HH:MM:SS.mmm` or `HH:MM:SS:FF`Default: `&quot;frames&quot;` if `&quot;fps&quot;` is specified, `&quot;clock_time&quot;` otherwise### fps`&quot;fps&quot;: &quot;&lt;num&gt;/&lt;denom&gt;&quot;`Specifies the `ttp:frameRate` and `ttp:frameRateMultiplier` of the output document.Required when `time_format` is `frames` or `clock_time_with_frames`. No effect otherwise.Example:`--config '{&quot;general&quot;: {&quot;progress_bar&quot;:false, &quot;log_level&quot;:&quot;WARN&quot;}, &quot;imsc_writer&quot;: {&quot;time_format&quot;:&quot;clock_time_with_frames&quot;, &quot;fps&quot;: &quot;25/1&quot;}}'`### STL Reader configuration#### disable_fill_line_gap`&quot;disable_fill_line_gap&quot; : true | false``true` means that the STL reader does not fill gaps between linesDefault: `false`#### disable_line_padding`&quot;disable_line_padding&quot; : true | false``true` means that the STL reader does not add padding at the begining/end of linesDefault: `false`#### program_start_tc`&quot;program_start_tc&quot; : &quot;TCP&quot; | &quot;HH:MM:SS:FF&quot;`Specifies a starting offset, either the TCP field of the GSI block or a user-specified timecodeDefault: `&quot;00:00:00:00&quot;`#### font_stack`&quot;font_stack&quot; : [&lt;font-families&gt;](https://www.w3.org/TR/ttml2/#style-value-font-families)`Overrides the font stackDefault: `&quot;Verdana, Arial, Tiresias, sansSerif&quot;`#### ax_row_count`&quot;max_row_count&quot; : &quot;MNR&quot; | integer`Specifies a maximum number of rows for open subtitles, either the MNR field of the GSI block or a user-specified valueDefault: `23`### VTT Writer configuration#### line_position`&quot;line_position&quot; : true | false``true` means that the VTT writer outputs line and line alignment cue settingsDefault: `false`### LibraryThe overall architecture of the library is as follows:* Reader modules validate and convert input files into instances of the canonical model (see `ttconv.imsc.reader.to_model()` for  example);* Filter modules transform instances of the canonical data model, e.g. all text styling and positioning might be removed from an  instance of the canonical model to match the limited capabilities of downstream devices; and* Writer modules convert instances of the canonical data model into output files.Processing shared across multiple reader and writer modules is factored out in common modules whenever possible. For example,several output formats require an instance of the canonical data model to be transformed into a sequence of discrete temporalsnapshots â€“ a process called ISD generation.The library uses the Python `logging` module to report non-fatal events.Unit tests illustrate the use of the library, e.g. `ReaderWriterTest.test_imsc_1_test_suite` at`src/test/python/test_imsc_writer.py`.Detailed documentation including reference documents is under [`doc`](./doc).## Dependencies### Runtime* [python &gt;= 3.7](https://python.org)### DevelopmentThe project uses [pipenv](https://pypi.org/project/pipenv/) to manage dependencies.* [pylint](https://pypi.org/project/pylint/)* [coverage](https://pypi.org/project/coverage/)## Development### Setup#### Local* run `pipenv install --dev`* set the `PYTHONPATH` environment variable to `src/main/python`, e.g. `export PYTHONPATH=src/main/python`* `pipenv run` can then be used#### Docker```shdocker build --rm -f Dockerfile -t ttconv:latest .docker run -it --rm ttconv:latest bash```### ExampleFrom the root directory of the project:```shmkdir buildpipenv install --devexport PYTHONPATH=src/main/pythonpython src/main/python/ttconv/tt.py convert -i src/test/resources/scc/mix-rows-roll-up.scc -o build/mix-rows-roll-up.ttml```### Code coverageUnit test code coverage is provided by the script at `scripts/coverage.sh`### Continuous integration#### OverviewAutomated testing is provided by the script at `scripts/ci.sh`#### LocalRun `./scripts/ci.sh`#### GitHub actionsSee `.github/workflows/main.yml`#### DockerRun `docker run -it --rm  ttconv:latest /bin/sh scripts/ci.sh`</longdescription>
</pkgmetadata>