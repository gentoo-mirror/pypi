<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Python package](https://github.com/rhayman/ephysiopy/actions/workflows/python-package.yml/badge.svg)](https://github.com/rhayman/ephysiopy/actions/workflows/python-package.yml)Synopsis========Tools for the analysis of electrophysiological data collected with the Axona or openephys recording systems.Installation============ephysiopy requires python3.7 or greater. The easiest way to install is using pip:``python3 -m pip install ephysiopy``or,``pip3 install ephysiopy``Or similar.Code Example============Neuropixels / openephys tetrode recordings------------------------------------------For openephys-type analysis there are two main entry classes depending on whether you are doingOpenEphys- or Axona-based analysis. Both classes inherit from the same abstract baseclass (TrialInterface) and so share a high degree of overlap in what they can do. Becauseof the inheritance structure, the methods you call on each concrete class are the same```pythonfrom ephysiopy.io.recording import OpenEphysBasetrial = OpenEphysBase(&quot;/path/to/top_level&quot;)```The &quot;/path/to/top_level&quot; bit here means that if your directory hierarchy looks like this:::    ├── 2020-03-20_12-40-15    ├── Record Node 101    |    └── settings.xml             experiment1    |        └── recording1    |            ├── structure.oebin    |            ├── sync_messages.txt    |            ├── continuous    |            |   └── Neuropix-PXI-107.0    |            |       └── continuous.dat    |            └── events    ├── Record Node 102Then the &quot;/path/to/top_level&quot; is the folder &quot;2020-03-20_12-40-15&quot;On insantiation of an OpenEphysBase object the directory structure containing the recordingis traversed and various file locations are noted for later processing of the data in them.The pos data is loaded by calling the load_pos_data() method:```pythonnpx.load_pos_data(ppm=300, jumpmax=100, cm=True)```Noteppm = pixels per metre, used to convert pixel coords to cms.jumpmax = maximum &quot;jump&quot; in cms for point to be considered &quot;bad&quot; and smoothed overThe same principles apply to the other classes that inherit from TrialInterface (AxonaTrial and OpenEphysNWB)Plotting data=============A mixin class called FigureMaker allows consistent plots, regardless of recording technique. All plotting functionsthere begin with &quot;make&quot; e.g &quot;makeRateMap&quot; and return an instance of a matplotlib axis</longdescription>
</pkgmetadata>