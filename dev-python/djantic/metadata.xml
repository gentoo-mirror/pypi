<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 style=&quot;text-align: center;&quot;&gt;    Djantic&lt;/h1&gt;&lt;p style=&quot;text-align: center;&quot;&gt;    &lt;em&gt;&lt;a href=&quot;https://pydantic-docs.helpmanual.io/&quot;&gt;Pydantic&lt;/a&gt; model support for &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt; Django&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;    &lt;a href=&quot;https://github.com/jordaneremieff/djantic/actions/workflows/test.yml&quot;&gt;    &lt;img src=&quot;https://img.shields.io/github/workflow/status/jordaneremieff/djantic/Test/main&quot; alt=&quot;GitHub Workflow Status (Test)&quot; &gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/djantic&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/djantic&quot; alt=&quot;PyPi package&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/djantic&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/pyversions/djantic&quot; alt=&quot;Supported Python versions&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/djantic&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/djversions/djantic?label=django&quot; alt=&quot;Supported Django versions&quot;&gt;    &lt;/a&gt;&lt;/p&gt;---**Documentation**: https://jordaneremieff.github.io/djantic/---Djantic is a library that provides a configurable utility class for automatically creating a Pydantic model instance for any Django model class. It is intended to support all of the underlying Pydantic model functionality such as JSON schema generation and introduces custom behaviour for exporting Django model instance data.## QuickstartInstall using pip:```shellpip install djantic```Create a model schema:```pythonfrom users.models import Userfrom djantic import ModelSchemaclass UserSchema(ModelSchema):    class Config:        model = Userprint(UserSchema.schema())```**Output:**```python{        &quot;title&quot;: &quot;UserSchema&quot;,        &quot;description&quot;: &quot;A user of the application.&quot;,        &quot;type&quot;: &quot;object&quot;,        &quot;properties&quot;: {            &quot;profile&quot;: {&quot;title&quot;: &quot;Profile&quot;, &quot;description&quot;: &quot;None&quot;, &quot;type&quot;: &quot;integer&quot;},            &quot;id&quot;: {&quot;title&quot;: &quot;Id&quot;, &quot;description&quot;: &quot;id&quot;, &quot;type&quot;: &quot;integer&quot;},            &quot;first_name&quot;: {                &quot;title&quot;: &quot;First Name&quot;,                &quot;description&quot;: &quot;first_name&quot;,                &quot;maxLength&quot;: 50,                &quot;type&quot;: &quot;string&quot;,            },            &quot;last_name&quot;: {                &quot;title&quot;: &quot;Last Name&quot;,                &quot;description&quot;: &quot;last_name&quot;,                &quot;maxLength&quot;: 50,                &quot;type&quot;: &quot;string&quot;,            },            &quot;email&quot;: {                &quot;title&quot;: &quot;Email&quot;,                &quot;description&quot;: &quot;email&quot;,                &quot;maxLength&quot;: 254,                &quot;type&quot;: &quot;string&quot;,            },            &quot;created_at&quot;: {                &quot;title&quot;: &quot;Created At&quot;,                &quot;description&quot;: &quot;created_at&quot;,                &quot;type&quot;: &quot;string&quot;,                &quot;format&quot;: &quot;date-time&quot;,            },            &quot;updated_at&quot;: {                &quot;title&quot;: &quot;Updated At&quot;,                &quot;description&quot;: &quot;updated_at&quot;,                &quot;type&quot;: &quot;string&quot;,                &quot;format&quot;: &quot;date-time&quot;,            },        },        &quot;required&quot;: [&quot;first_name&quot;, &quot;email&quot;, &quot;created_at&quot;, &quot;updated_at&quot;],    }```See https://pydantic-docs.helpmanual.io/usage/models/ for more.### Loading and exporting model instancesUse the `from_orm` method on the model schema to load a Django model instance for &lt;a href=&quot;https://pydantic-docs.helpmanual.io/usage/exporting_models/&quot;&gt;export&lt;/a&gt;:```pythonuser = User.objects.create(    first_name=&quot;Jordan&quot;,     last_name=&quot;Eremieff&quot;,     email=&quot;jordan@eremieff.com&quot;)user_schema = UserSchema.from_orm(user)print(user_schema.json(indent=2))```**Output:**```json{    &quot;profile&quot;: null,    &quot;id&quot;: 1,    &quot;first_name&quot;: &quot;Jordan&quot;,    &quot;last_name&quot;: &quot;Eremieff&quot;,    &quot;email&quot;: &quot;jordan@eremieff.com&quot;,    &quot;created_at&quot;: &quot;2020-08-15T16:50:30.606345+00:00&quot;,    &quot;updated_at&quot;: &quot;2020-08-15T16:50:30.606452+00:00&quot;}```### Using multiple level relationsDjantic supports multiple level relations. This includes foreign keys, many-to-many, and one-to-one relationships.Consider the following example Django model and Djantic model schema definitions for a number of related database records:```python# models.pyfrom django.db import modelsclass OrderUser(models.Model):    email = models.EmailField(unique=True)class OrderUserProfile(models.Model):    address = models.CharField(max_length=255)    user = models.OneToOneField(OrderUser, on_delete=models.CASCADE, related_name='profile')class Order(models.Model):    total_price = models.DecimalField(max_digits=8, decimal_places=5, default=0)    user = models.ForeignKey(        OrderUser, on_delete=models.CASCADE, related_name=&quot;orders&quot;    )class OrderItem(models.Model):    price = models.DecimalField(max_digits=8, decimal_places=5, default=0)    quantity = models.IntegerField(default=0)    order = models.ForeignKey(        Order, on_delete=models.CASCADE, related_name=&quot;items&quot;    )class OrderItemDetail(models.Model):    name = models.CharField(max_length=30)    order_item = models.ForeignKey(        OrderItem, on_delete=models.CASCADE, related_name=&quot;details&quot;    )``````python# schemas.pyfrom djantic import ModelSchemafrom orders.models import OrderItemDetail, OrderItem, Order, OrderUserProfileclass OrderItemDetailSchema(ModelSchema):    class Config:        model = OrderItemDetailclass OrderItemSchema(ModelSchema):    details: List[OrderItemDetailSchema]    class Config:        model = OrderItemclass OrderSchema(ModelSchema):    items: List[OrderItemSchema]    class Config:        model = Orderclass OrderUserProfileSchema(ModelSchema):    class Config:        model = OrderUserProfileclass OrderUserSchema(ModelSchema):    orders: List[OrderSchema]    profile: OrderUserProfileSchema```Now let's assume you're interested in exporting the order and profile information for a particular user into a JSON format that contains the details accross all of the related item objects:```pythonuser = OrderUser.objects.first()print(OrderUserSchema.from_orm(user).json(ident=4))```**Output:**```json{    &quot;profile&quot;: {        &quot;id&quot;: 1,        &quot;address&quot;: &quot;&quot;,        &quot;user&quot;: 1    },    &quot;orders&quot;: [        {            &quot;items&quot;: [                {                    &quot;details&quot;: [                        {                            &quot;id&quot;: 1,                            &quot;name&quot;: &quot;&quot;,                            &quot;order_item&quot;: 1                        }                    ],                    &quot;id&quot;: 1,                    &quot;price&quot;: 0.0,                    &quot;quantity&quot;: 0,                    &quot;order&quot;: 1                }            ],            &quot;id&quot;: 1,            &quot;total_price&quot;: 0.0,            &quot;user&quot;: 1        }    ],    &quot;id&quot;: 1,    &quot;email&quot;: &quot;&quot;}```The model schema definitions are composable and support customization of the output according to the auto-generated fields and any additional annotations.### Including and excluding fieldsThe fields exposed in the model instance may be configured using two options: `include` and `exclude`. These represent iterables that should contain a list of field name strings. Only one of these options may be set at the same time, and if neither are set then the default behaviour is to include all of the fields from the Django model.For example, to include all of the fields from a user model &lt;i&gt;except&lt;/i&gt; a field named `email_address`, you would use the `exclude` option:```pythonclass UserSchema(ModelSchema):    class Config:        exclude = [&quot;email_address&quot;]```In addition to this, you may also limit the fields to &lt;i&gt;only&lt;/i&gt; include annotations from the model schema class by setting the `include` option to a special string value: `&quot;__annotations__&quot;`.```pythonclass ProfileSchema(ModelSchema):        website: str        class Config:            model = Profile            include = &quot;__annotations__&quot;    assert ProfileSchema.schema() == {        &quot;title&quot;: &quot;ProfileSchema&quot;,        &quot;description&quot;: &quot;A user's profile.&quot;,        &quot;type&quot;: &quot;object&quot;,        &quot;properties&quot;: {            &quot;website&quot;: {                &quot;title&quot;: &quot;Website&quot;,                &quot;type&quot;: &quot;string&quot;            }        },        &quot;required&quot;: [            &quot;website&quot;        ]    }```</longdescription>
</pkgmetadata>