<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AsyncGuiA thin layer that helps to build async/await-based APIs using callback-based APIs.## How to useDespite its name, the application of `asyncgui` is **not** limited to gui programs.You can wrap any kind of callback-based APIs in it.The simplest example of it would be [sched](https://docs.python.org/3/library/sched.html),whose the whole feature is timer.All you need is just few lines of code:```pythonimport schedimport asyncguis = sched.scheduler()# Wrapping 'scheduler.enter()'async def sleep(duration, *, priority=10):    sig = asyncgui.ISignal()    event = s.enter(duration, priority, sig.set)    try:        await sig.wait()    except asyncgui.Cancelled:        s.cancel(event)        raiseasync def main():    print('A')    await sleep(1)  # Now you can sleep in an async-manner    print('B')    await sleep(1)    print('C')asyncgui.start(main())s.run()```And you already have structured concurrency APIs as well:```pythonasync def print_numbers():    for i in range(10):        await sleep(.1)        print(i)async def print_letters():    for c in &quot;ABCDE&quot;:        await sleep(.1)        print(c)async def main():    # Let print_letters() and print_numbers() race.    # As soon as any of them finishes, the other one gets cancelled.    tasks = await asyncgui.wait_any(print_letters(), print_numbers())    if tasks[0].finished:        print(&quot;print_letters() won&quot;)    else:        print(&quot;print_numbers() won&quot;)    print('main end')``````A0B1C2D3Eprint_letters() wonmain end```## InstallationIt's recommended to pin the minor version, because if it changed, it means some *important* breaking changes occurred.```textpoetry add asyncgui@~0.6pip install &quot;asyncgui&gt;=0.6,&lt;0.7&quot;```## Tested on- CPython 3.8- CPython 3.9- CPython 3.10- CPython 3.11## Async-libraries who relies on this- [asynckivy](https://github.com/gottadiveintopython/asynckivy)- [asynctkinter](https://github.com/gottadiveintopython/asynctkinter)</longdescription>
</pkgmetadata>