<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>| |version| |versions| |impls| |wheel| |coverage|.. |version| image:: http://img.shields.io/pypi/v/say.svg?style=flat    :alt: PyPI Package latest release    :target: https://pypi.org/project/say.. |versions| image:: https://img.shields.io/pypi/pyversions/say.svg    :alt: Supported versions    :target: https://pypi.org/project/say.. |impls| image:: https://img.shields.io/pypi/implementation/say.svg    :alt: Supported implementations    :target: https://pypi.org/project/say.. |wheel| image:: https://img.shields.io/pypi/wheel/say.svg    :alt: Wheel packaging support    :target: https://pypi.org/project/say.. |coverage| image:: https://img.shields.io/badge/test_coverage-97%25-blue.svg    :alt: Test line coverage    :target: https://pypi.org/project/sayIt's been *almost fifty years* since ``C`` introduced ``printf()`` and the basicformatted printing of positional parameters. Isn't it time for an upgrade?**You betcha!**``say`` evolves Python's ``print``statement/function, ``format`` function/method, and ``%`` stringinterpolation operator with simpler, higher-level facilities. For example,it provides direct template formatting::    from say import *    x, nums, name = 12, list(range(4)), 'Fred'    say(&quot;There are {x} things.&quot;)    say(&quot;Nums has {len(nums)} items: {nums}&quot;)    say(&quot;Name: {name!r}&quot;)yields::    There are 12 things.    Nums has 4 items: [0, 1, 2, 3]    Name: 'Fred'Or instead of printing the string immediately, you want the string itself,the ``fmt()`` function is our version of ``sprintf()``.::    &gt;&gt;&gt; fmt(&quot;{name} has {x} things and {len(nums)} numbers.&quot;)    'Fred has 12 things and 4 numbers.'The more items being printed, and the more complicated the ``format``invocation, the more valuable this simple inline specification becomes.But as nice as replacing positional templates with inlinetemplatesis--a fact *finally* officially accommodated withformatted string literals of Python 3.6--``say``does a lot more.It also works in a variety of ways to up-level the output-generation task.For example::    say.title('Discovered')    say(&quot;Name: {name:style=blue}&quot;, indent='+1')    say(&quot;Age:  {age:style=blue}&quot;, indent='+1')Prints a nicely formatted text block, with a proper title and indentation,and just the variable information in blue... image:: http://content.screencast.com/users/jonathaneunice/folders/Jing/media/81bf4738-c875-4998-82ac-a91d211d000b/00000745.png    :align: left``say`` provides:* DRY, Pythonic, inline string templates that piggyback  Python's well-proven ``format()`` method, syntax, and underlying engine.* A single output mechanism that works the same way across  Python 2 or Python 3.* A companion ``fmt()`` object for string formatting.* Higher-order line formatting such as line numbering,  indentation, and line-wrapping built in. You can get substantially  better output  formatting with almost no additional code.* Convenient methods for common formatting items such as titles, horizontal  separators, and vertical whitespace.* Easy styled output, including ANSI colors and user-defined styles  and text transforms.* Easy output to one or more files, without additional code or complexity.* Super-duper template/text aggregator objects for easily building,  reading, and writing multi-line texts.Take it for a test drive today! See `the full documentationat Read the Docs &lt;http://say.readthedocs.org/en/latest/&gt;`_.</longdescription>
</pkgmetadata>