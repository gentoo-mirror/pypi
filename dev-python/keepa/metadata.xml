<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python keepa Client Library===========================.. image:: https://img.shields.io/pypi/v/keepa.svg?logo=python&amp;logoColor=white   :target: https://pypi.org/project/keepa/.. image:: https://github.com/akaszynski/keepa/actions/workflows/testing-and-deployment.yml/badge.svg    :target: https://github.com/akaszynski/keepa/actions/workflows/testing-and-deployment.yml.. image:: https://readthedocs.org/projects/keepaapi/badge/?version=latest    :target: https://keepaapi.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status.. image:: https://codecov.io/gh/akaszynski/keepa/branch/main/graph/badge.svg  :target: https://codecov.io/gh/akaszynski/keepa.. image:: https://app.codacy.com/project/badge/Grade/9452f99f297c4a6eac14e2d21189ab6f  :target: https://www.codacy.com/gh/akaszynski/keepa/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=akaszynski/keepa&amp;amp;utm_campaign=Badge_GradeThis Python library allows you to interface with the API at `Keepa&lt;https://keepa.com/&gt;`_ to query for Amazon product information andhistory.  It also contains a plotting module to allow for plotting ofa product.See API pricing at `Keepa API &lt;https://keepa.com/#!api&gt;`_.Documentation can be found on readthedocs at `keepa Documentation &lt;https://keepaapi.readthedocs.io/en/latest/&gt;`_.Requirements------------This library is compatible with Python &gt;= 3.7 and requires:- ``numpy``- ``aiohttp``- ``matplotlib``- ``tqdm``Product history can be plotted from the raw data when ``matplotlib``is installed.Interfacing with the ``keepa`` requires an access key and a monthlysubscription from `Keepa API &lt;https://keepa.com/#!api&gt;`_Installation------------Module can be installed from `PyPi &lt;https://pypi.org/project/keepa/&gt;`_ with:.. code::    pip install keepaSource code can also be downloaded from `GitHub&lt;https://github.com/akaszynski/keepa&gt;`_ and installed using:``python setup.py install`` or ``pip install .``Brief Example-------------.. code:: python    import keepa    accesskey = 'XXXXXXXXXXXXXXXX' # enter real access key here    api = keepa.Keepa(accesskey)    # Single ASIN query    products = api.query('B0088PUEPK') # returns list of product data    # Plot result (requires matplotlib)    keepa.plot_product(products[0]).. figure:: https://github.com/akaszynski/keepa/raw/main/docs/source/images/Product_Price_Plot.png    :width: 500pt    Product Price Plot.. figure:: https://github.com/akaszynski/keepa/raw/main/docs/source/images/Product_Offer_Plot.png    :width: 500pt    Product Offers PlotBrief Example using async-------------------------Here's an example of obtaining a product and plotting its price andoffer history using the ``keepa.AsyncKeepa`` class:.. code:: python    &gt;&gt;&gt; import asyncio    &gt;&gt;&gt; import keepa    &gt;&gt;&gt; product_parms = {'author': 'jim butcher'}    &gt;&gt;&gt; async def main():    ...     key = '&lt;REAL_KEEPA_KEY&gt;'    ...     api = await keepa.AsyncKeepa().create(key)    ...     return await api.product_finder(product_parms)    &gt;&gt;&gt; asins = asyncio.run(main())    &gt;&gt;&gt; asins    ['B000HRMAR2',     '0578799790',     'B07PW1SVHM',    ...     'B003MXM744',     '0133235750',     'B01MXXLJPZ']Query for product with ASIN ``'B0088PUEPK'`` using the asynchronouskeepa interface... code:: python    &gt;&gt;&gt; import asyncio    &gt;&gt;&gt; import keepa    &gt;&gt;&gt; async def main():    ...     key = '&lt;REAL_KEEPA_KEY&gt;'    ...     api = await keepa.AsyncKeepa().create(key)    ...     return await api.query('B0088PUEPK')    &gt;&gt;&gt; response = asyncio.run(main())    &gt;&gt;&gt; response[0]['title']    'Western Digital 1TB WD Blue PC Internal Hard Drive HDD - 7200 RPM,    SATA 6 Gb/s, 64 MB Cache, 3.5&quot; - WD10EZEX'Detailed Examples-----------------Import interface and establish connection to server.. code:: python    import keepa    accesskey = 'XXXXXXXXXXXXXXXX' # enter real access key here    api = keepa.Keepa(accesskey)Single ASIN query.. code:: python    products = api.query('059035342X')    # See help(api.query) for available options when querying the APIYou can use keepa witch async / await too.. code:: python    import keepa    accesskey = 'XXXXXXXXXXXXXXXX' # enter real access key here    api = await keepa.AsyncKeepa.create(accesskey)Single ASIN query (async).. code:: python    products = await api.query('059035342X')Multiple ASIN query from List.. code:: python    asins = ['0022841350', '0022841369', '0022841369', '0022841369']    products = api.query(asins)Multiple ASIN query from numpy array.. code:: python    asins = np.asarray(['0022841350', '0022841369', '0022841369', '0022841369'])    products = api.query(asins)Products is a list of product data with one entry per successful result from the Keepa server. Each entry is a dictionary containing the same product data available from `Amazon &lt;http://www.amazon.com&gt;`_... code:: python    # Available keys    print(products[0].keys())    # Print ASIN and title    print('ASIN is ' + products[0]['asin'])    print('Title is ' + products[0]['title'])The raw data is contained within each product result. Raw data is stored as a dictionary with each key paired with its associated time history... code:: python    # Access new price history and associated time data    newprice = products[0]['data']['NEW']    newpricetime = products[0]['data']['NEW_time']    # Can be plotted with matplotlib using:    import matplotlib.pyplot as plt    plt.step(newpricetime, newprice, where='pre')    # Keys can be listed by    print(products[0]['data'].keys())The product history can also be plotted from the module if ``matplotlib`` is installed.. code:: python    keepa.plot_product(products[0])You can obtain the offers history for an ASIN (or multiple ASINs) using the ``offers`` parameter.  See the documentation at `Request Products &lt;https://keepa.com/#!discuss/t/request-products/110/1&gt;`_ for further details... code:: python    products = api.query(asins, offers=20)    product = products[0]    offers = product['offers']    # each offer contains the price history of each offer    offer = offers[0]    csv = offer['offerCSV']    # convert these values to numpy arrays    times, prices = keepa.convert_offer_history(csv)    # for a list of active offers, see    indices = product['liveOffersOrder']    # with this you can loop through active offers:    indices = product['liveOffersOrder']    offer_times = []    offer_prices = []    for index in indices:        csv = offers[index]['offerCSV']        times, prices = keepa.convert_offer_history(csv)        offer_times.append(times)        offer_prices.append(prices)    # you can aggregate these using np.hstack or plot at the history individually    import matplotlib.pyplot as plt    for i in range(len(offer_prices)):        plt.step(offer_times[i], offer_prices[i])    plt.show()If you plan to do a lot of simulatneous query, you might want to speedup query using``wait=False`` arguments... code:: python    products = await api.query('059035342X', wait=False)Contributing------------Contribute to this repository by forking this repository and installing indevelopment mode with::  git clone https://github.com/&lt;USERNAME&gt;/keepa  pip install -e .You can then add your feature or commit your bug fix and then run your unittesting with::  pip install requirements_test.txt  pytestUnit testing will automatically enforce minimum code coverage standards.Next, to ensure your code meets minimum code styling standards, run::  pip install pre-commit  pre-commit run --all-filesFinally, `create a pull request`_ from your fork and I'll be sure to review it.Credits-------This Python module, written by Alex Kaszynski and several contribitors, isbased on Java code written by Marius Johann, CEO Keepa. Java source is can befound at `keepacom/api_backend &lt;https://github.com/keepacom/api_backend/&gt;`_.License-------Apache License, please see license file. Work is credited to both AlexKaszynski and Marius Johann... _create a pull request: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request</longdescription>
</pkgmetadata>