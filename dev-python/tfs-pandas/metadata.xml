<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># TFS-Pandas[![Cron Testing](https://github.com/pylhc/tfs/workflows/Cron%20Testing/badge.svg)](https://github.com/pylhc/tfs/actions?query=workflow%3A%22Cron+Testing%22)[![Code Climate coverage](https://img.shields.io/codeclimate/coverage/pylhc/tfs.svg?style=popout)](https://codeclimate.com/github/pylhc/tfs)[![Code Climate maintainability (percentage)](https://img.shields.io/codeclimate/maintainability-percentage/pylhc/tfs.svg?style=popout)](https://codeclimate.com/github/pylhc/tfs)&lt;!-- [![GitHub last commit](https://img.shields.io/github/last-commit/pylhc/tfs.svg?style=popout)](https://github.com/pylhc/tfs/) --&gt;[![PyPI Version](https://img.shields.io/pypi/v/tfs-pandas?label=PyPI&amp;logo=pypi)](https://pypi.org/project/tfs-pandas/)[![GitHub release](https://img.shields.io/github/v/release/pylhc/tfs?logo=github)](https://github.com/pylhc/tfs/)[![Conda-forge Version](https://img.shields.io/conda/vn/conda-forge/tfs-pandas?color=orange&amp;logo=anaconda)](https://anaconda.org/conda-forge/tfs-pandas)[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.5070986.svg)](https://doi.org/10.5281/zenodo.5070986)This package provides reading and writing functionality for [**Table Format System (TFS)** files](http://mad.web.cern.ch/mad/madx.old/Introduction/tfs.html). Files are read into a `TfsDataFrame`, a class built on top of the famous `pandas.DataFrame`, which in addition to the normal behavior attaches an `OrderedDict` of headers to the `DataFrame`.See the [API documentation](https://pylhc.github.io/tfs/) for details.## InstallingInstallation is easily done via `pip`:```bashpython -m pip install tfs-pandas```One can also install in a `conda`/`mamba` environment via the `conda-forge` channel with:```bashconda install -c conda-forge tfs-pandas```## Example UsageThe package is imported as `tfs`, and exports top-level functions for reading and writing:```pythonimport tfs# Loading a TFS file is simpledata_frame = tfs.read(&quot;path_to_input.tfs&quot;, index=&quot;index_column&quot;)# You can access and modify the headers with the .headers attributeuseful_variable = data_frame.headers[&quot;SOME_KEY&quot;]data_frame.headers[&quot;NEW_KEY&quot;] = some_variable# Manipulate data as you do with pandas DataFramesdata_frame[&quot;NEWCOL&quot;] = data_frame.COL_A * data_frame.COL_B# You can check the validity of a TfsDataFrame, and choose the behavior in case of errorstfs.frame.validate(data_frame, non_unique_behavior=&quot;raise&quot;)  # or choose &quot;warn&quot;# Writing out to disk is simple tootfs.write(&quot;path_to_output.tfs&quot;, data_frame, save_index=&quot;index_column&quot;)```Reading and writing compressed files is also supported, and done automatically based on the provided file extension:```pythonimport tfs# Reading a compressed file is simple, compression format is inferreddf = tfs.read(&quot;path_to_input.tfs.gz&quot;)# When writing choose the compression format by providing the appropriate file extensiontfs.write(&quot;path_to_output.tfs.bz2&quot;, df)tfs.write(&quot;path_to_output.tfs.zip&quot;, df)```## LicenseThis project is licensed under the `MIT License` - see the [LICENSE](LICENSE) file for details.</longdescription>
</pkgmetadata>