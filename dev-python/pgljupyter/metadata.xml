<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pgljupyter[PlantGL](https://github.com/fredboudon/plantgl) &amp; [L-Py](https://github.com/fredboudon/lpy) jupyter widgetsCurrently supports openalea.lpy&gt;=3.9.0 and openalea.plantgl&gt;=3.14.0 from conda channel ['fredboudon'](https://anaconda.org/fredboudon/openalea.lpy).[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/fredboudon/plantgl-jupyter/HEAD?labpath=%2Fexamples%2Fbroccoli.ipynb)![Leuvenberg](docs/lpy_leuwenberg.gif)[![DOI](https://zenodo.org/badge/252633303.svg)](https://zenodo.org/badge/latestdoi/252633303)## Quick Examples### PlantGL- simple PlantGL shapes - spheres [@nbviewer](https://nbviewer.jupyter.org/github/jvail/plantgl-jupyter/blob/master/examples/spheres.ipynb)### L-Py- a tree model - leuwenberg [@nbviewer](https://nbviewer.jupyter.org/github/fredboudon/plantgl-jupyter/blob/master/examples/lpy/leuwenberg/leuwenberg.ipynb)- plot magic - leuwenberg [@nbviewer](https://nbviewer.jupyter.org/github/fredboudon/plantgl-jupyter/blob/master/examples/lpy/leuwenberg/lpy_plot_magic.ipynb)- champignon [@nbviewer](https://nbviewer.jupyter.org/github/fredboudon/plantgl-jupyter/blob/master/examples/magic_champignon.ipynb)- magics with scalar parameters - broccoli [@nbviewer](https://nbviewer.jupyter.org/github/fredboudon/plantgl-jupyter/blob/master/examples/broccoli.ipynb)- magics with curve parameters - sweep surface [@nbviewer](https://nbviewer.jupyter.org/github/fredboudon/plantgl-jupyter/blob/master/examples/lpy/sweep_surface/sweep_surface.ipynb)## Usage```pythonfrom pgljupyter import SceneWidget, LsystemWidget```**SceneWidget**Renderer for PlantGL Scenes, Shapes, GeometriesArguments:- `arg0` list | plantgl.Shape | plantgl.Scene: a list of shapes or scenes or a single object- `position` tuple (float, float, float): x, y, z position of arg0 (default (0, 0, 0))- `scale` float: scale factor for arg0 (default 1)- `size_display` tuple (int, int): width and height of the canvas (minimum 400)- `size_world` float: extend on the 3D scene in all directionsExample:```pythonfrom openalea.plantgl.all import Scene, Spherefrom pgljupyter import SceneWidgets = Scene([Sphere()])sw = SceneWidget(s)sw```Tutorial:-  Display of spheres [@nbviewer](https://nbviewer.jupyter.org/github/fredboudon/plantgl-jupyter/blob/master/examples/spheres.ipynb)**LsystemWidget**Renderer for lpy.Lstrings derived from lpy.Lsystem codeArguments:- `arg0` string: file name / path of lpy code file- `unit` string enum: the unit used in the Lsystem model ('m', 'dm', 'cm', 'mm', default 'm')- `scale` float: scale factor for arg0 (default 1)- `animate` bool: if `True` runs animation automatically- `size_display` tuple (int, int): width and height of the canvas (minimum 400)- `size_world` float: extend on the 3D scene in all directionsImportant property/methods:- `editor` : display an editor of the graphical parameters- `get_lstring(self)` : return the lstring corresponding to the current step of the simulation display in the widget.- `get_namespace(self)` : return the namespace of variables of the simulationExample:```pythonfrom pgljupyter import LsystemWidgetlw = LsystemWidget('myfile.lpy')lw``````pythonlw.editor```Tutorial:- Display of the simulation of a lpy file :  [@nbviewer](https://nbviewer.jupyter.org/github/fredboudon/plantgl-jupyter/blob/master/examples/lpy/leuwenberg/leuwenberg.ipynb)**%%lpy**A cell magic to inline L-Py code in a notebookArguments:- `--size`, `-s` int,int: same as `size_display`- `--world`, `-w` float: same as `size_world`- `--unit`, `-u` enum: same as `unit`- `--params`, `-p` LsystemParameters: name of LsystemParameters instance- `--animate`, `-a` True: runs animation automatically- `--extended-editor`, `-e` False: show/hide all parameter controlsExample:```python# activated by importing pgljupyterimport pgljupyter``````python%%lpy -u cmfrom openalea.plantgl.all import *Axiom: ;(1)+(10)_(2)F(10);(0)@g(Paraboloid(10,10,2,False))derivation length: 100production:F(x) --&gt; F(x+0.2)@g(p) --&gt; @g(Paraboloid(p.radius + 0.15, p.height + 0.2, 2, False))_(x) --&gt; _(x+0.02)```Example with graphical parameters:```python# activated by importing pgljupyterimport pgljupyterfrom openalea.lpy.lsysparameters import LsystemParameters``````pythonlp = LsystemParameters()lp.add_scalar(name='a', value=1, minvalue=0, maxvalue=100)lp.add_function(name='b') # default graphical function created``````python%%lpy -p lpAxiom: SetGuide(b,a)F(a)```Tutorials:- simple L-systems [@nbviewer](https://nbviewer.jupyter.org/github/fredboudon/plantgl-jupyter/blob/master/examples/magic_champignon.ipynb)- graphical scalar parameters - broccoli [@nbviewer](https://nbviewer.jupyter.org/github/fredboudon/plantgl-jupyter/blob/master/examples/broccoli.ipynb)- graphical curve parameters - sweep surface [@nbviewer](https://nbviewer.jupyter.org/github/fredboudon/plantgl-jupyter/blob/master/examples/lpy/sweep_surface/sweep_surface.ipynb)**%lpy_plot**A line magic to plot all derivation steps of an Lsystem on a square planeArguments:- `arg0`, string: L-Py file- `--size`, `-s` int,int: width and hight of the canvas- `--cell`, `-c` float: size of cell for a single derivation step- `--derive`, `-d` int[,int[,int]]: start, stop, step derivationExample:```python# activated by importing pgljupyterimport pgljupyter``````python%lpy_plot myfile.lpy```Tutorial:- Display of the simulation from a lpy file :[@nbviewer](https://nbviewer.jupyter.org/github/fredboudon/plantgl-jupyter/blob/master/examples/lpy/leuwenberg/lpy_plot_magic.ipynb)## Installation### Install with pip - inside conda environmentSome examples also require `matplotlib`, `xarray-simlab` and `rpy2`.```bashconda create -y -n pgl -c fredboudon -c conda-forge \    openalea.lpy jupyterlab ipywidgets pip``````bashconda activate pglpip install pgljupyter```### Development install - install lpy, plantgl, jupyterlab, widgets and widgetsextension```bashmamba env create -f environment-dev.ymlconda activate pgljupyter-dev``` - install emsdk: https://emscripten.org/docs/getting_started/downloads.html```bashgit clone https://github.com/emscripten-core/emsdk.gitcd emsdk./emsdk install 2.0.29./emsdk activate 2.0.29source ./emsdk_env.shcd ..``` - get pgljupyter source```bashgit clone https://github.com/jvail/plantgl-jupyter.gitcd plantgl-jupyter``` - fetch plantgl and install pgljs deps```bashgit submodule update --init --recursivecd src/pgljsnpm installcd ../..``` - install pgljupyter deps and build (requires activated emsdk i.e. source ./emsdk_env.sh)```bashnpm installnpm run build:allpip install -e .jupyter labextension develop . --overwrite``` - run lab```bashjupyter lab --notebook-dir=./examples```### Development uninstall```bashpip uninstall pgljupyter```In development mode, you will also need to remove the symlink created by `jupyter labextension develop`command. To find its location, you can run `jupyter labextension list` to figure out where the `labextensions`folder is located. Then you can remove the symlink named `pgljupyter` within that folder.</longdescription>
</pkgmetadata>