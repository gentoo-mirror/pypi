<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[//]: # (![]&amp;#40;figs/DeepSensorLogo.png&amp;#41;)&lt;ul style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;figs/DeepSensorLogo.png&quot; width=&quot;700&quot;/&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-top:0px;&quot;&gt;&lt;p style=&quot;text-align: center; font-size: 15px&quot;&gt;A Python package and open-source project for modelling environmentaldata with neural processes&lt;/p&gt;-----------[![release](https://img.shields.io/badge/release-v0.2.3-green?logo=github)](https://github.com/tom-andersson/deepsensor/releases)![Tests](https://github.com/tom-andersson/deepsensor/actions/workflows/tests.yml/badge.svg)[![Coverage Status](https://coveralls.io/repos/github/tom-andersson/deepsensor/badge.svg?branch=main)](https://coveralls.io/github/tom-andersson/deepsensor?branch=main)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/tom-andersson/deepsensor/blob/main/LICENSE)**NOTE**: This package is a work in progress and breaking changes are likely. If you are interestedin using DeepSensor, please get in touch first (tomand@bas.ac.uk).For demonstrators, use cases, and videos showcasing the functionality of DeepSensor, check out the[DeepSensor Gallery](https://github.com/tom-andersson/deepsensor_gallery)!Why neural processes?-----------NPs are a highly flexible class of probabilistic models that can:- ingest multiple context sets (i.e. data streams) containing gridded or pointwise observations- handle multiple gridded resolutions- predict at arbitrary target locations- quantify prediction uncertaintyThese capabilities make NPs well suited to modelling spatio-temporal data, such assatellite observations, climate model output, and in-situ measurements.NPs have been used for range of environmental applications, including:- downscaling (i.e. super-resolution)- forecasting- infilling missing satellite data- sensor placementWhy DeepSensor?-----------DeepSensor aims to faithfully match the flexibility of NPs with a simple and intuitiveinterface.DeepSensor wraps around the powerful [neuralprocessess](https://github.com/wesselb/neuralprocesses)package for the core modelling functionality, while allowing users to stay inthe familiar [xarray](https://xarray.pydata.org) and [pandas](https://pandas.pydata.org) worldand avoid the murky depths of tensors!Deep learning library agnosticism-----------DeepSensor leverages the [backends](https://github.com/wesselb/lab) package to be compatible witheither [PyTorch](https://pytorch.org/) or [TensorFlow](https://www.tensorflow.org/).Simply `import deepsensor.torch` or `import deepsensor.tensorflow` to choose between them!Quick start----------Here we will demonstrate a simple example of training a convolutional conditional neural process(ConvCNP) to spatially interpolate ERA5 data.First, pip install the package. In this case we will use the PyTorch backend.```bashpip install deepsensorpip install torch```We can go from imports to predictions with a trained model in less than 30 lines of code!```pythonimport deepsensor.torchfrom deepsensor.data.processor import DataProcessorfrom deepsensor.data.loader import TaskLoaderfrom deepsensor.model.convnp import ConvNPfrom deepsensor.train.train import Trainerimport xarray as xrimport pandas as pdimport numpy as np# Load raw datads_raw = xr.tutorial.open_dataset(&quot;air_temperature&quot;)# Normalise datadata_processor = DataProcessor(x1_name=&quot;lat&quot;, x2_name=&quot;lon&quot;)ds = data_processor(ds_raw)# Set up task loadertask_loader = TaskLoader(context=ds, target=ds)# Set up modelmodel = ConvNP(data_processor, task_loader)# Generate training tasks with up to 10% of grid cells passed as context and all grid cells# passed as targetstrain_tasks = []for date in pd.date_range(&quot;2013-01-01&quot;, &quot;2014-11-30&quot;)[::7]:    task = task_loader(date, context_sampling=np.random.uniform(0.0, 0.1), target_sampling=&quot;all&quot;)    train_tasks.append(task)# Train modeltrainer = Trainer(model, lr=5e-5)for epoch in range(10):    trainer(train_tasks, progress_bar=True)# Predict on new task with 10% of context data and a dense grid of target pointstest_task = task_loader(&quot;2014-12-31&quot;, 0.1)mean_ds, std_ds = model.predict(test_task, X_t=ds_raw)```After training, the model can predict directly to `xarray` in your data's original units and coordinate system:```python&gt;&gt;&gt; mean_ds&lt;xarray.Dataset&gt;Dimensions:  (time: 1, lat: 25, lon: 53)Coordinates:  * time     (time) datetime64[ns] 2014-12-31  * lat      (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 25.0 22.5 20.0 17.5 15.0  * lon      (lon) float32 200.0 202.5 205.0 207.5 ... 322.5 325.0 327.5 330.0Data variables:    air      (time, lat, lon) float32 246.7 244.4 245.5 ... 290.2 289.8 289.4```We can also predict directly to `pandas` containing a timeseries of predictions at off-grid locationsby passing a `numpy` array of target locations to the `X_t` argument of `.predict`:```python# Predict at two off-grid locations for three days in December 2014test_tasks = task_loader(pd.date_range(&quot;2014-12-01&quot;, &quot;2014-12-31&quot;), 0.1)mean_df, std_df = model.predict(test_tasks, X_t=np.array([[50, 280], [40, 250]]).T)``````python&gt;&gt;&gt; mean_df                              airtime       lat  lon              2014-12-01 50.0 280.0  260.183056           40.0 250.0  277.9473732014-12-02 50.0 280.0   261.08943           40.0 250.0  278.2195992014-12-03 50.0 280.0  257.128185           40.0 250.0  278.444229```This quickstart example is also available as a [Jupyter notebook](https://github.com/tom-andersson/deepsensor_demos/blob/main/demonstrators/quickstart.ipynb) with added visualisations.Extending DeepSensor with new models----------To extend DeepSensor with a new model, simply create a new class that inherits from `deepsensor.model.DeepSensorModel`and implement the low-level prediction methods defined in `deepsensor.model.ProbabilisticModel`,such as `.mean` and `.stddev`.```pythonclass NewModel(DeepSensorModel):    &quot;&quot;&quot;A very naive model that predicts the mean of the first context set with a fixed stddev&quot;&quot;&quot;    def __init__(self, data_processor: DataProcessor, task_loader: TaskLoader):        super().__init__(data_processor, task_loader)            def mean(self, task: Task):        &quot;&quot;&quot;Compute mean at target locations&quot;&quot;&quot;        return np.mean(task[&quot;Y_c&quot;][0])        def stddev(self, task: Task):        &quot;&quot;&quot;Compute stddev at target locations&quot;&quot;&quot;        return 0.1        ...````NewModel` can then be used in the same way as the built-in `ConvNP` model.See [this Jupyter notebook](https://github.com/tom-andersson/deepsensor_gallery/blob/main/demonstrators/extending_models.ipynb)for more details.## Citing DeepSensorIf you use DeepSensor in your research, please consider citing this repository.You can generate a BiBTeX entry by clicking the 'Cite this repository' buttonon the top right of this page.## AcknowledgementsDeepSensor is funded by [The Alan Turing Institute](https://www.turing.ac.uk/).</longdescription>
</pkgmetadata>