<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># changeloggh&lt;a href=&quot;https://www.python.org/&quot;&gt;&lt;img alt=&quot;Python&quot; src=&quot;https://img.shields.io/badge/-python-success?logo=python&amp;logoColor=white&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/sauljabin/changeloggh&quot;&gt;&lt;img alt=&quot;GitHub&quot; src=&quot;https://img.shields.io/badge/status-active-brightgreen&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/sauljabin/changeloggh/blob/main/LICENSE&quot;&gt;&lt;img alt=&quot;MIT License&quot; src=&quot;https://img.shields.io/github/license/sauljabin/changeloggh&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/sauljabin/changeloggh/actions&quot;&gt;&lt;img alt=&quot;GitHub Actions&quot; src=&quot;https://img.shields.io/github/actions/workflow/status/sauljabin/changeloggh/main.yml?branch=main&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://app.codecov.io/gh/sauljabin/changeloggh&quot;&gt;&lt;img alt=&quot;Codecov&quot; src=&quot;https://img.shields.io/codecov/c/github/sauljabin/changeloggh&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/changeloggh&quot;&gt;&lt;img alt=&quot;Python Versions&quot; src=&quot;https://img.shields.io/pypi/pyversions/changeloggh&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/changeloggh&quot;&gt;&lt;img alt=&quot;Version&quot; src=&quot;https://img.shields.io/pypi/v/changeloggh&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://libraries.io/pypi/changeloggh&quot;&gt;&lt;img alt=&quot;Dependencies&quot; src=&quot;https://img.shields.io/librariesio/release/pypi/changeloggh&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/changeloggh&quot;&gt;&lt;img alt=&quot;Platform&quot; src=&quot;https://img.shields.io/badge/platform-linux%20%7C%20osx-blueviolet&quot;&gt;&lt;/a&gt;`changeloggh` is a command line toolto generate and administrate changelog files for GitHubaccording to https://keepachangelog.com/en/1.1.0/.&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;45%&quot; src=&quot;https://raw.githubusercontent.com/sauljabin/changeloggh/main/screenshots/md.png&quot;&gt;&lt;img width=&quot;45%&quot; src=&quot;https://raw.githubusercontent.com/sauljabin/changeloggh/main/screenshots/json.png&quot;&gt;&lt;/p&gt;# InstallationInstall with pip:```shpip install changeloggh```Upgrade with pip:```shpip install --upgrade changeloggh```## Usage&gt; Alias clghHelp:```shchangeloggh --help```Version:```shchangeloggh --version```Init CHANGELOG:```shellchangeloggh init &lt;GitHub Repo&gt;```Add changes:```shchangeloggh &lt;added|changed|deprecated|removed|fixed|security&gt; &quot;entry 1&quot; &quot;entry 2&quot; ...```Bump version:```shellchangeloggh bump &lt;major|minor|patch&gt;```Release version:```shellchangeloggh release &lt;version&gt;```Import MD:```shellchangeloggh import```Print current version:```shellchangeloggh latest```Print CHANGELOG:```shellchangeloggh print --format &lt;rich|json|text&gt;```## DevelopmentInstalling poetry:```shpip install poetry```Installing development dependencies:```shpoetry install```Installing pre-commit:```shpoetry run pre-commit install```Running unit tests:```shpoetry run python -m scripts.tests```Applying code styles:```shpoetry run python -m scripts.styles```Running code analysis:```shpoetry run python -m scripts.analyze```Running code coverage:```shpoetry run python -m scripts.coverage```Running cli using `poetry`:```shpoetry run changeloggh```## Release a new version&gt; Check https://python-poetry.org/docs/cli/#version```shellpoetry run python -m scripts.bump --helppoetry run python -m scripts.bump &lt;major|minor|patch&gt;```## Why a lock file?A lot of tools (like `yarn`, `npm`, `poetry` ,etc) use `lock files` toensures that installations remain identical and reproducibleacross systems. A `lock files` saves important metadata, so that is why`changeloggh` is using this approach. The `changelog.lock` filesaves and structures changelog data in a json format.It's highly recommended to commit the `changelog.lock` file into your repository.## Limitations- Does not support other format besides `semver` `major.minor.patch`, ex.: 1.1.1.- It needs a `changelog.lock`.## Alternatives- [changelog-cli](https://github.com/mc706/changelog-cli)</longdescription>
</pkgmetadata>