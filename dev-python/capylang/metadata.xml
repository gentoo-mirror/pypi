<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Capylang### Capylang is a pretty simple language.### Regular Examples```pythonfrom capylang import capymycapy = capy(id=&quot;MyCapy&quot;,printinst=True) # ID is for identification of Capylang Instances, and printinst prints the IDprint(mycapy.__doc__) # Returns helpa = 4b = 3print(str(mycapy.add(a,b))) # Prints 7 (also uses the add function)print(str(mycapy.minus(a,b))) # Prints 1 (also uses the subtract function)print(str(mycapy.multi(a,b))) # Prints 12 (also uses the multiply function)print(str(mycapy.div(a,b))) # Prints 2.3 (average, also uses the divide function)print(str(mycapy.hyp(a,b))) # It returns the hypotenuse of opp, and adjprint(str(mycapy.opp(a,b))) # Try this yourself for more info, check mycapy.__doc__print(str(mycapy.adj(a,b))) # Try this yourself for more info, check mycapy.__doc__```### Mean, Median, and Mode```pyimport cpaylangarr = [1,2,3,4,5]# AIML means AI Machine Learning (AIML.)capylang.aiml.mean(arr)capylang.aiml.median(arr)capylang.aiml.mode(arr)```### Decorators (Make your own Capylang if you feel lazy or want to!)```pythonimport capylang@capylang.decorators.add # Equivalent to mycapy.adddef myadd(a,b,c):  return a,b,c # The decorator does it all for ya.print(myadd(1,2,3))# Basicallly everything above. Add, minus, multi, div, hyp, opp, and adj. Fibonacci is here.```### DateTime alternative```pythonimport capylangdate = &quot;1/16/1921&quot; # MM/DD/YYYY (January 16th 1921)mydate = capylang.date.new(date)print(mydate)print(mydate.text())#```### Clearing on Terminals```pythonimport capylangcapylang.terminal.os_clear() # Clear with the os modulecapylang.terminal.replit_clear() # Clear with the replit module```### Fibonacci Sequence```pythonfrom capylang import capy# The fibonacci sequence function returns numbers in the fibonacci sequence, it contains 2 args:# num_of_nums: the number of sequence numbers you'd like to generate (required)# index: to return a specific number in the sequence (optional)fibo = capy(printinst=True,id=&quot;Fibonacci Sequence&quot;)print(fibo.nacci(num_of_nums=10,index=6))```### Math string evaluation```python# Coming in decorators soon.from capylang import capyeval = capy(printinst=True,id=&quot;Evaluation&quot;)print(eval.calc(&quot;6/2*(1+2)&quot;)) # 9```### Old, used to be deprecated, but revived capy.log```python# Coming in decorators soon.from capylang import capyeval = capy(printinst=True,id=&quot;Evaluation&quot;)eval.log(&quot;The prophecy is true!!!&quot;)```### Did you know you could use &quot;deprecated&quot; syntax?```pythonfrom capylang import capycapy.log(&quot;You don't even need to initialize the module!&quot;)```### String occurrences```pythonimport capylangmystr = &quot;I am an Apple.&quot;mystr = capylang.string.init(mystr)print(mystr.freq()[&quot;Apple.&quot;])```### String occurrences to lower```pythonimport capylangmystr = &quot;I am an Apple.&quot;mystr = capylang.string.init(mystr)print(mystr.lowfreq()[&quot;apple.&quot;])```### Binary searching in an array```pythonimport capylanghi = [1,3,5,7,9]print(capylang.capi.binary_search(hi,3)) # Returns the index of 3 in hi. Otherwise, returns None.print(capylang.capi.binary_search(hi,-1)) # Returns None because -1 is not in the array.```### Color sets```pythonimport capylangprint(capylang.color.set[&quot;classic&quot;]) # ROYGBPprint(capylang.color.set[&quot;full&quot;]) # ROYGBIVprint(capylang.color.set[&quot;full_bip&quot;]) # ROYGBIP# Useful for color sorting.```### That's pretty much it for a basic tutorial of Capylang.</longdescription>
</pkgmetadata>