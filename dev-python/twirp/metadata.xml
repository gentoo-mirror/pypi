<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># TwirpyPython implementation of Twirp RPC framework (supports [Twirp Wire Protocol v7](https://twitchtv.github.io/twirp/docs/spec_v7.html)).This repo contains a protoc plugin that generates sever and client code and a pypi package with common implementation details.For details about the twirp project, check https://github.com/twitchtv/twirp## InstallationGrab the protoc plugin to generate files with```go get -u github.com/verloop/twirpy/protoc-gen-twirpy```Add the twirp package to your project```pip install twirp```You'll also need [uvicorn](https://www.uvicorn.org/) to run the server.## Generate and runUse the protoc plugin to generate twirp server and client code.We'll assume familiarity with the example from the docs. https://twitchtv.github.io/twirp/docs/example.html```protoc --python_out=./ --twirpy_out=./ ./haberdasher.proto```### Server code```python# server.pyimport randomfrom twirp.asgi import TwirpASGIAppfrom twirp.exceptions import InvalidArgumentfrom . import haberdasher_twirp, haberdasher_pb2class HaberdasherService(object):    def MakeHat(self, context, size):        if size.inches &lt;= 0:            raise InvalidArgument(argument=&quot;inches&quot;, error=&quot;I can't make a hat that small!&quot;)        return haberdasher_pb2.Hat(            size=size.inches,            color= random.choice([&quot;white&quot;, &quot;black&quot;, &quot;brown&quot;, &quot;red&quot;, &quot;blue&quot;]),            name=random.choice([&quot;bowler&quot;, &quot;baseball cap&quot;, &quot;top hat&quot;, &quot;derby&quot;])        )# if you are using a custom prefix, then pass it as `server_path_prefix`# param to `HaberdasherServer` class.service = haberdasher_twirp.HaberdasherServer(service=HaberdasherService())app = TwirpASGIApp()app.add_service(service)```Run the server with```uvicorn twirp_server:app --port=3000```### Client code```python# client.pyfrom twirp.context import Contextfrom twirp.exceptions import TwirpServerExceptionfrom . import haberdasher_twirp, haberdasher_pb2client = haberdasher_twirp.HaberdasherClient(&quot;http://localhost:3000&quot;)# if you are using a custom prefix, then pass it as `server_path_prefix`# param to `MakeHat` class.try:    response = client.MakeHat(ctx=Context(), request=haberdasher_pb2.Size(inches=12))    print(response)except TwirpServerException as e:    print(e.code, e.message, e.meta, e.to_dict())```## Twirp Wire Protocol (v7)Twirpy generates the code based on the protocol v7. This is a breaking change from the previous v5 and you can see the changes [here](https://twitchtv.github.io/twirp/docs/spec_v7.html#differences-with-v5).This new version comes with flexibility to use any prefix for the server URLs and defaults to `/twirp`. To use an empty prefix or any custom prefix like `/my/custom/prefix`, pass it as a `server_path_prefix` param to server and clients. Check the example directory, which uses `/twirpy` as a custom prefix.If you want to use the server and clients of v5, then use the [0.0.1](https://github.com/verloop/twirpy/releases/tag/0.0.1) release.### Message Body LengthCurrently, message body length limit is set to 100kb, you can override this by passing `max_receive_message_length` to `TwirpASGIApp` constructor.```python# this sets max message length to be 10 bytesapp = TwirpASGIApp(max_receive_message_length=10)```## Support and communityPython: [#twirp](https://python-community.slack.com/messages/twirp). Join Python community slack [here](https://pythoncommunity.herokuapp.com)Go: [#twirp](https://gophers.slack.com/messages/twirp). Join Gophers community slack [here](https://invite.slack.golangbridge.org)## Standing on the shoulders of giants- The initial version of twirpy was made from an internal copy of https://github.com/daroot/protoc-gen-twirp_python_srv- The `run_in_threadpool` method comes from https://github.com/encode/starlette</longdescription>
</pkgmetadata>