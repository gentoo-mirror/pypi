<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Spacegrids==========Spacegrids is an open source library providing a Numpy array with grids, labelled axes and associated grid-related mathematical methods such as regridding and integration. Spacegrids provides an object data model of Netcdf data that ensures consistency between a Numpy data array and its grid under common operations (and so avoiding common pitfalls related to axis interpretation), and much more. It is a write less do more library for everyday use.These `interactive plots from Netcdf data &lt;https://willospace.pythonanywhere.com/&gt;`_ are based on Spacegrids.The Field, Gr (grid) and Coord objects make everyday use easy:    &gt;&gt;&gt; import spacegrids as sg    &gt;&gt;&gt; D = sg.info(nonick = True)      &gt;&gt;&gt; P = sgPproject(D['my_project'] , nonick = True)      &gt;&gt;&gt; P.load(['temperature','u'])      &gt;&gt;&gt; # obtain the axes objects under their names T,X,Y,Z:     &gt;&gt;&gt; for c in P['some_experiment'].axes:    &gt;&gt;&gt;   exec c.name + ' = c'# now we can refer to X,Y    &gt;&gt;&gt; TEMP = P['some_experiment']['temperature']     &gt;&gt;&gt; U = P['some_experiment']['u'] # zonal velocity    &gt;&gt;&gt; TEMP_sliced = TEMP[Y,:50] # slice. Note Y axis object    &gt;&gt;&gt; m_TEMP = TEMP_sliced/(X*Y) # take hor. mean    &gt;&gt;&gt; TEMP_regridded = TEMP.regrid(U.gr)  # U grid differs Features--------- A numpy array with grid allowing automatic alignment and dimension broadcasting- Easy to use and intuitive regridding functionality- A data object model corresponding closely to Netcdf- Easier IO via abstraction of IO with multiple Netcdf files- Makes working with output of many experiments easy via aggregation methods- The Field class eliminates errors arising from picking the wrong array index- Quicker plotting due to automatic labels, axes etc.- Distance-related methods such as spatial differentiation and integration on sphere- Extensive unit tests and documentationThere is lots of documentation, both in the source code and elsewhere. Other documentation can be found at: - `a practical tutorial &lt;http://nbviewer.ipython.org/github/willo12/spacegrids/blob/master/Spacegrids.ipynb&gt;`_ - `a more advanced tutorial &lt;http://nbviewer.ipython.org/github/willo12/spacegrids/blob/master/advanced.ipynb&gt;`_ - `an overview of all classes, methods and functions &lt;http://web.maths.unsw.edu.au/~wsijp/html/index.html&gt;`_ - `interactive Netcdf data plots &lt;http://willospace.pythonanywhere.com&gt;`_ based on SpacegridsInstallation------------Install spacegrids simply by running (on command line):    pip install spacegridsDependencies: numpy, scipy, matplotlib (NetCDF4 optional). On Ubuntu/ Debian, install dependencies via package manager if pip install fails:    apt-get install python-{tk,numpy,matplotlib,scipy}On Mac, pip can be installed via &quot;sudo easy_install pip&quot;. Contribute----------- Issue Tracker: github.com/willo12/spacegrids/issues- Source Code: github.com/willo12/spacegridsSupport-------If you are having issues, please let us know.License-------The project is licensed under the BSD license.</longdescription>
</pkgmetadata>