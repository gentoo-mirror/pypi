<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># css_inline[&lt;img alt=&quot;build status&quot; src=&quot;https://img.shields.io/github/actions/workflow/status/Stranger6667/css-inline/build.yml?style=flat-square&amp;labelColor=555555&amp;logo=github&quot; height=&quot;20&quot;&gt;](https://github.com/Stranger6667/css-inline)[&lt;img alt=&quot;pypi&quot; src=&quot;https://img.shields.io/pypi/v/css_inline.svg?style=flat-square&quot; height=&quot;20&quot;&gt;](https://pypi.org/project/css_inline/)[&lt;img alt=&quot;versions&quot; src=&quot;https://img.shields.io/pypi/pyversions/css_inline.svg?style=flat-square&quot; height=&quot;20&quot;&gt;](https://pypi.org/project/css_inline/)[&lt;img alt=&quot;license&quot; src=&quot;https://img.shields.io/pypi/l/css_inline.svg?style=flat-square&quot; height=&quot;20&quot;&gt;](https://opensource.org/licenses/MIT)[&lt;img alt=&quot;codecov.io&quot; src=&quot;https://img.shields.io/codecov/c/gh/Stranger6667/css-inline?logo=codecov&amp;style=flat-square&amp;token=tOzvV4kDY0&quot; height=&quot;20&quot;&gt;](https://app.codecov.io/github/Stranger6667/css-inline)[&lt;img alt=&quot;gitter&quot; src=&quot;https://img.shields.io/gitter/room/Stranger6667/css-inline?style=flat-square&quot; height=&quot;20&quot;&gt;](https://gitter.im/Stranger6667/css-inline)`css_inline` is a high-performance library for inlining CSS into HTML 'style' attributes.This library is designed for scenarios such as preparing HTML emails or embedding HTML into third-party web pages.For instance, the library transforms HTML like this:```html&lt;html&gt;    &lt;head&gt;        &lt;style&gt;h1 { color:blue; }&lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;h1&gt;Big Text&lt;/h1&gt;    &lt;/body&gt;&lt;/html&gt;```into:```html&lt;html&gt;    &lt;head&gt;&lt;/head&gt;    &lt;body&gt;        &lt;h1 style=&quot;color:blue;&quot;&gt;Big Text&lt;/h1&gt;    &lt;/body&gt;&lt;/html&gt;```- Uses reliable components from Mozilla's Servo project- 10-300x faster than alternatives- Inlines CSS from `style` and `link` tags- Removes `style` and `link` tags- Resolves external stylesheets (including local files)- Can process multiple documents in parallel- Works on Linux, Windows, and macOS- Supports HTML5 &amp; CSS3## InstallationInstall with `pip`:```pip install css_inline```Pre-compiled wheels are available for most popular platforms.If not available for your platform, a Rust compiler will be needed to build this package from source. Rust version 1.60 or higher is required.## Usage```pythonimport css_inlineHTML = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;    &lt;style&gt;h1 { color:blue; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;Big Text&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;inlined = css_inline.inline(HTML)# HTML becomes this:## &lt;html&gt;# &lt;head&gt;#    &lt;style&gt;h1 { color:blue; }&lt;/style&gt;# &lt;/head&gt;# &lt;body&gt;#     &lt;h1 style=&quot;color:blue;&quot;&gt;Big Text&lt;/h1&gt;# &lt;/body&gt;# &lt;/html&gt;```When there is a need to inline multiple HTML documents simultaneously, `css_inline` offers the `inline_many` function.This feature allows for concurrent processing of several inputs, significantly improving performance when dealing with a large number of documents.```pythonimport css_inlinecss_inline.inline_many([&quot;&lt;...&gt;&quot;, &quot;&lt;...&gt;&quot;])```Under the hood, `inline_many`, spawns threads at the Rust layer to handle the parallel processing of inputs.This results in faster execution times compared to employing parallel processing techniques at the Python level.**Note**: To fully benefit from `inline_many`, you should run your application on a multicore machine.### ConfigurationFor configuration options use the `CSSInliner` class:```pythonimport css_inlineinliner = css_inline.CSSInliner(keep_style_tags=True)inliner.inline(&quot;...&quot;)```- `keep_style_tags`. Specifies whether to keep &quot;style&quot; tags after inlining. Default: `False`- `keep_link_tags`. Specifies whether to keep &quot;link&quot; tags after inlining. Default: `False`- `base_url`. The base URL used to resolve relative URLs. If you'd like to load stylesheets from your filesystem, use the `file://` scheme. Default: `None`- `load_remote_stylesheets`. Specifies whether remote stylesheets should be loaded. Default: `True`- `extra_css`. Extra CSS to be inlined. Default: `None`- `preallocate_node_capacity`. **Advanced**. Preallocates capacity for HTML nodes during parsing. This can improve performance when you have an estimate of the number of nodes in your HTML document. Default: `32`You can also skip CSS inlining for an HTML tag by adding the `data-css-inline=&quot;ignore&quot;` attribute to it:```html&lt;head&gt;    &lt;style&gt;h1 { color:blue; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- The tag below won't receive additional styles --&gt;    &lt;h1 data-css-inline=&quot;ignore&quot;&gt;Big Text&lt;/h1&gt;&lt;/body&gt;```The `data-css-inline=&quot;ignore&quot;` attribute also allows you to skip `link` and `style` tags:```html&lt;head&gt;    &lt;!-- Styles below are ignored --&gt;    &lt;style data-css-inline=&quot;ignore&quot;&gt;h1 { color:blue; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;Big Text&lt;/h1&gt;&lt;/body&gt;```If you'd like to load stylesheets from your filesystem, use the `file://` scheme:```pythonimport css_inline# styles/email is relative to the current directoryinliner = css_inline.CSSInliner(base_url=&quot;file://styles/email/&quot;)inliner.inline(&quot;...&quot;)```## XHTML compatibilityIf you'd like to work around some XHTML compatibility issues like closing empty tags (`&lt;hr&gt;` vs. `&lt;hr/&gt;`), you can use the following snippet that involves `lxml`:```pythonimport css_inlinefrom lxml import html, etreedocument = &quot;...&quot;  # Your HTML documentinlined = css_inline.inline(document)tree = html.fromstring(inlined)inlined = etree.tostring(tree).decode(encoding=&quot;utf-8&quot;)```## Performance`css-inline`  is powered by efficient tooling from Mozilla's Servo project and significantly outperforms other Python alternatives in terms of speed.It achieves over a **10x** speed advantage compared to the next fastest alternative.Here is the performance comparison:|             | `css_inline 0.10.0` | `premailer 3.10.0`      | `toronado 0.1.0`       | `inlinestyler 0.2.5`    | `pynliner 0.8.0`        ||-------------|---------------------|-------------------------|------------------------|-------------------------|-------------------------|| Basic       | 9.72 µs             | 207.95 µs  (**21.39x**) | 1.03 ms  (**106.86x**) | 1.69 ms  (**174.64x**)  | 2.05 ms  (**211.89x**)  || Realistic-1 | 262.33 µs           | 2.11 ms  (**8.08x**)    | 25.51 ms  (**97.28x**) | 43.13 ms  (**164.43x**) | 72.55 ms  (**276.57x**) || Realistic-2 | 151.83 µs           | 4.12 ms  (**27.18x**)   | ERROR                  | 28.85 ms  (**190.03x**) | ERROR                   |The above data was obtained from benchmarking the inlining of CSS in HTML, as described in the Usage section.Note that the `toronado` and `pynliner` libraries both encountered errors when used to inline CSS in the last scenario.The benchmarking code is available in the `benches/bench.py` file. The tests were conducted using the stable `rustc 1.70` on Python `3.11.0`.## Comparison with other librariesBesides performance, `css-inline` differs from other Python libraries for CSS inlining.- Generally supports more CSS features than other libraries (for example, `toronado` and `pynliner` do not support pseudo-elements);- It has fewer configuration options and not as flexible as `premailer`;- Works on fewer platforms than LXML-based libraries (`premailer`, `inlinestyler`, `toronado`, and optionally `pynliner`);- Does not have debug logs yet;- Supports only HTML 5.## Python support`css_inline` supports CPython 3.7, 3.8, 3.9, 3.10, 3.11 and PyPy 3.7, 3.8, 3.9.## Further readingIf you want to know how this library was created &amp; how it works internally, you could take a look at these articles:- [Rust crate](https://dygalo.dev/blog/rust-for-a-pythonista-2/)- [Python bindings](https://dygalo.dev/blog/rust-for-a-pythonista-3/)## LicenseThis project is licensed under the terms of the [MIT license](https://opensource.org/licenses/MIT).</longdescription>
</pkgmetadata>