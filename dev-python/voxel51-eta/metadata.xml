<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;&lt;h1&gt;    ETA: Extensible Toolkit for Analytics&lt;/h1&gt;**An open and extensible computer vision, machine learning and video analyticsinfrastructure.**[![PyPI python](https://img.shields.io/pypi/pyversions/voxel51-eta)](https://pypi.org/project/voxel51-eta)[![PyPI version](https://badge.fury.io/py/voxel51-eta.svg)](https://pypi.org/project/voxel51-eta)[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/pre-commit/pre-commit)[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE)[![Twitter](https://img.shields.io/twitter/follow/Voxel51?style=social)](https://twitter.com/voxel51)&lt;img src=&quot;https://user-images.githubusercontent.com/25985824/78944107-2d766c80-7a8b-11ea-8863-fcb4897eecb5.png&quot; alt=&quot;eta-infrastructure.png&quot; width=&quot;75%&quot;/&gt;&lt;/div&gt;## RequirementsETA is very portable:-   Installable on Mac or Linux-   Supports Python 3.6 or later-   Supports TensorFlow 1.X and 2.X-   Supports OpenCV 2.4+ and OpenCV 3.0+-   Supports CPU-only and GPU-enabled installations-   Supports CUDA 8, 9 and 10 for GPU installations## InstallationYou can install the latest release of ETA via `pip`:```shellpip install voxel51-eta```This will perform a [lite installation of ETA](#lite-installation). If you usean ETA feature that requires additional dependencies (e.g., `ffmpeg` or`tensorflow`), you will be prompted to install the relevant packages.## Docker InstallationIf you prefer to operate via Docker, see the[Docker Build Guide](https://github.com/voxel51/eta/blob/develop/docs/docker_build_guide.md)for simple instructions for building a Docker image with an ETA environmentinstalled.## Installation from source#### Step 0: Setup your Python environmentIt is assumed that you already have[Python installed](https://www.python.org/downloads) on your machine.&gt; **IMPORTANT:** ETA assumes that the version of Python that you intend to use&gt; is accessible via `python` and `pip` on your path. In particular, for Python&gt; 3 users, this means that you may need to alias `python3` and `pip3` to&gt; `python` and `pip`, respectively.We strongly recommend that you install ETA[in a virtual environment](https://github.com/voxel51/eta/blob/develop/docs/virtualenv_guide.md)to maintain a clean workspace.#### Step 1: Clone the repository```shellgit clone https://github.com/voxel51/etacd eta```#### Step 2: Run the install script```shellbash install.bash```Note that the install script supports flags that control things like (on macOS)whether `port` or `brew` is used to install packages. Run`bash install.bash -h` for more information.For Linux installs, the script inspects your system to see if CUDA is installedvia the `lspci` command. If CUDA is available, TensorFlow is installed with GPUsupport.The table below lists the version of TensorFlow that will be installed by theinstaller, as recommended by the[tested build configurations](https://www.tensorflow.org/install/source#tested_build_configurations):| CUDA Version Found | TensorFlow Version Installed || ------------------ | ---------------------------- || CUDA 8             | `tensorflow-gpu~=1.4`        || CUDA 9             | `tensorflow-gpu~=1.12`       || CUDA 10            | `tensorflow-gpu~=1.15`       || Other CUDA         | `tensorflow-gpu~=1.15`       || No CUDA            | `tensorflow~=1.15`           |&gt; Note that ETA also supports TensorFlow 2.X. The only problems you may face&gt; when using ETA with TensorFlow 2 are when trying to run inference with&gt; [ETA models](https://github.com/voxel51/eta/blob/develop/eta/models/manifest.json)&gt; that only support TensorFlow 1. A notable case here are TF-slim models. In&gt; such cases, you should see an informative error message alerting you of the&gt; requirement mismatch.### Lite installationSome ETA users are only interested in using the core ETA library defined in the`eta.core` package. In such cases, you can perform a lite installation usingthe `-l` flag of the install script:```shellbash install.bash -l```Lite installation omits submodules and other large dependencies that are notrequired in order for the core library to function. If you use an ETA featurethat requires additional dependencies (e.g., `ffmpeg` or `tensorflow`), youwill be prompted to install the relevant packages.### Developer installationIf you are interested in contributing to ETA or generating its documentationfrom source, you should perform a developer installation using the `-d` flag ofthe install script:```shellbash install.bash -d```## Setting up your execution environmentWhen the root `eta` package is imported, it tries to read the `eta/config.json`file to configure various package-level constants. Many advanced ETA featuressuch as pipeline building, model management, etc. require a properly configuredenvironment to function.To setup your environment, create a copy the example configuration file:```shellcp config-example.json eta/config.json```If desired, you can edit your config file to customize the various paths,change default constants, add environment variables, customize your default`PYTHONPATH`, and so on. You can also add additional paths to the`module_dirs`, `pipeline_dirs`, and `models_dirs` sections to expose custommodules, pipelines, and models to your system.Note that, when the config file is loaded, any `{{eta}}` patterns in directorypaths are replaced with the absolute path to the `eta/` directory on yourmachine.The default config includes the `modules/`, `pipelines/`, and `models/`directories on your module, pipeline, and models search paths, respectively.These directories contain the necessary information to run the standardanalytics exposed by the ETA library. In addition, the relative paths`./modules/`, `./pipelines/`, and `./models/` are added to their respectivepaths to support the typical directory structure that we adopt for our customprojects.### CLIInstalling ETA automatically installs `eta`, a command-line interface (CLI) forinteracting with the ETA Library. This utility provides access to many usefulfeatures of ETA, including building and running pipelines, downloading models,and interacting with remote storage.To explore the CLI, type `eta --help`, and see the[CLI Guide](https://github.com/voxel51/eta/blob/develop/docs/cli_guide.md) forcomplete information.## QuickstartGet your feet wet with ETA by running some of examples in the[examples folder](https://github.com/voxel51/eta/tree/develop/eta/examples).Also, see the [docs folder](https://github.com/voxel51/eta/tree/develop/docs)for more documentation about the various components of the ETA library.## OrganizationThe ETA package is organized as described below. For more information about thedesign and function of the various ETA components, read the documentation inthe [docs folder](https://github.com/voxel51/eta/tree/develop/docs).| Directory         | Description                                                                                                                                                                                                                                                                                  || ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || `eta/classifiers` | wrappers for performing inference with common classifiers                                                                                                                                                                                                                                    || `eta/core`        | the core ETA library, which includes utilities for working with images, videos, embeddings, and much more                                                                                                                                                                                    || `eta/detectors`   | wrappers for performing inference with common detectors                                                                                                                                                                                                                                      || `eta/docs`        | documentation about the ETA library                                                                                                                                                                                                                                                          || `eta/examples`    | examples of using the ETA library                                                                                                                                                                                                                                                            || `eta/models`      | library of ML models. The `manifest.json` file in this folder enumerates the models, which are downloaded to this folder as needed. See the [Models developer's guide](https://github.com/voxel51/eta/blob/develop/docs/models_dev_guide.md) for more information about ETA's model registry || `eta/modules`     | library of video processing/analytics modules. See the [Module developer's guide](https://github.com/voxel51/eta/blob/develop/docs/modules_dev_guide.md) for more information about ETA modules                                                                                              || `eta/pipelines`   | library of video processing/analytics pipelines. See the [Pipeline developer's guide](https://github.com/voxel51/eta/blob/develop/docs/pipelines_dev_guide.md) for more information about ETA pipelines                                                                                      || `eta/resources`   | resources such as media, templates, etc                                                                                                                                                                                                                                                      || `eta/segmenters`  | wrappers for performing inference with common semantic segmenters                                                                                                                                                                                                                            || `eta/tensorflow`  | third-party TensorFlow repositories that ETA builds upon                                                                                                                                                                                                                                     |## Generating DocumentationThis project uses[Sphinx-Napoleon](https://pypi.python.org/pypi/sphinxcontrib-napoleon) togenerate its documentation from source.To generate the documentation, you must install the developer dependencies byrunning the `install.bash` script with the `-d` flag.Then you can generate the docs by running:```shellbash sphinx/generate_docs.bash```To view the documentation, open the `sphinx/build/html/index.html` file in yourbrowser.## Uninstallation```shellpip uninstall voxel51-eta```## AcknowledgementsThis project was gratefully supported by the[NIST Public Safety Innovation Accelerator Program](https://www.nist.gov/news-events/news/2017/06/nist-awards-385-million-accelerate-public-safety-communications).## CitationIf you use ETA in your research, feel free to cite the project (but only if youlove it 😊):```bibtex@article{moore2017eta,  title={ETA: Extensible Toolkit for Analytics},  author={Moore, B. E. and Corso, J. J.},  journal={GitHub. Note: https://github.com/voxel51/eta},  year={2017}}```</longdescription>
</pkgmetadata>