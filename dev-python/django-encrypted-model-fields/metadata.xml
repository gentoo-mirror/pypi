<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Encrypted Model Fields[![image](https://travis-ci.org/lanshark/django-encrypted-model-fields.png)](https://travis-ci.org/lanshark/django-encrypted-model-fields)## AboutThis is a fork of&lt;https://github.com/foundertherapy/django-cryptographic-fields&gt;. It hasbeen renamed, and updated to properly support Python3 and latestversions of Django.`django-encrypted-model-fields` is set of fields that wrap standardDjango fields with encryption provided by the python cryptographylibrary. These fields are much more compatible with a 12-factor designsince they take their encryption key from the settings file instead of afile on disk used by `keyczar`.While keyczar is an excellent tool to use for encryption, it's notcompatible with Python 3, and it requires, for hosts like Heroku, thatyou either check your key file into your git repository for deployment,or implement manual post-deployment processing to write the key storedin an environment variable into a file that keyczar can read.## Generating an Encryption KeyThere is a Django management command `generate_encryption_key` providedwith the `encrypted_model_fields` library. Use this command to generatea new encryption key to set as `settings.FIELD_ENCRYPTION_KEY`:    ./manage.py generate_encryption_keyRunning this command will print an encryption key to the terminal, whichcan be configured in your environment or settings file.*NOTE: This command will ONLY work in a CLEAN, NEW django project thatdoes NOT import encrypted_model_fields in any of it's apps.* IF you arealready importing encrypted_model_fields, try running this in a pythonshell instead:    import os    import base64    new_key = base64.urlsafe_b64encode(os.urandom(32))    print(new_key)## Getting Started&gt; $ pip install django-encrypted-model-fieldsAdd &quot;encrypted_model_fields&quot; to your INSTALLED_APPS setting like this:    INSTALLED_APPS = (        ...        'encrypted_model_fields',    )`django-encrypted-model-fields` expects the encryption key to bespecified using `FIELD_ENCRYPTION_KEY` in your project's `settings.py`file. For example, to load it from the local environment:    import os    FIELD_ENCRYPTION_KEY = os.environ.get('FIELD_ENCRYPTION_KEY', '')To use an encrypted field in a Django model, use one of the fields fromthe `encrypted_model_fields` module:    from encrypted_model_fields.fields import EncryptedCharField    class EncryptedFieldModel(models.Model):        encrypted_char_field = EncryptedCharField(max_length=100)For fields that require `max_length` to be specified, the `Encrypted`variants of those fields will automatically increase the size of thedatabase field to hold the encrypted form of the content. For example, a3 character CharField will automatically specify a database field sizeof 100 characters when `EncryptedCharField(max_length=3)` is specified.Due to the nature of the encrypted data, filtering by values containedin encrypted fields won't work properly. Sorting is also not supported.## Development EnvironmentAdded Tox for testing with different versions of Django and Python. To get started:pip install -r requirements/dev.txtusing `pyenv` add the requisite python interpreters::pyenv install 3.6.15pyenv install 3.7.12pyenv install 3.8.12pyenv install 3.9.10pyenv install 3.10.2Add the requisite versions to the local version::pyenv local 3.6.15 3.7.12 3.8.12 3.9.10 3.10.2Run `tox`::tox</longdescription>
</pkgmetadata>