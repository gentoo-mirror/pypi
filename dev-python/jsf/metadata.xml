<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;   &lt;strong&gt;jsf&lt;/strong&gt;&lt;img src=&quot;docs/assets/imgs/index.png&quot; width=&quot;50&quot; style=&quot;position: absolute; padding-left:10px;&quot;&gt;&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://codecov.io/gh/ghandic/jsf&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/codecov/c/github/ghandic/jsf?color=%2334D058&quot; alt=&quot;Coverage&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://ghandic.github.io/jsf/index.html&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/docs-mkdocs%20material-blue.svg?style=flat&quot; alt=&quot;Docs&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/jsf/&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/jsf.svg&quot; alt=&quot;PyPI Latest Release&quot;&gt;    &lt;/a&gt;    &lt;br /&gt;    &lt;a href=&quot;https://github.com/ghandic/jsf/blob/main/LICENSE&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/License-MIT-yellow.svg&quot; alt=&quot;License&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/psf/black&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot; alt=&quot;Code style: black&quot;&gt;    &lt;/a&gt;&lt;/p&gt;Use **jsf** along with fake data generators to provide consistent and meaningful fake data for your system.## Main Features- Provides out of the box data generation from any JSON schema üì¶* Extendable custom data providers using any lambda functions üîó- Multi level state for dependant data (eg multiple objects sharing value, such as children with same surname) ü§ì- Inbuilt validation of fake JSON produced ‚úÖ- In memory conversion from JSON Schema to Pydantic Models with generated examples ü§Ø- Seamless integration with [FastAPI](https://fastapi.tiangolo.com/) üöÄ## Installation&lt;div class=&quot;termy&quot;&gt;```console$ pip install jsf---&gt; 100%```&lt;/div&gt;## Usage### Basic üòä```pythonfrom jsf import JSFfaker = JSF(    {        &quot;type&quot;: &quot;object&quot;,        &quot;properties&quot;: {            &quot;name&quot;: {&quot;type&quot;: &quot;string&quot;, &quot;$provider&quot;: &quot;faker.name&quot;},            &quot;email&quot;: {&quot;type&quot;: &quot;string&quot;, &quot;$provider&quot;: &quot;faker.email&quot;},        },        &quot;required&quot;: [&quot;name&quot;, &quot;email&quot;],    })fake_json = faker.generate()```Results in ...```python{    'name': 'Jesse Phillips',     'email': 'xroberson@hotmail.com'}```### From JSON file üìÅ```pythonfrom jsf import JSFfaker = JSF.from_json(&quot;demo-schema.json&quot;)fake_json = faker.generate()```&lt;details markdown=&quot;1&quot;&gt;&lt;summary&gt;Or run stright from the &lt;code&gt;commandline&lt;/code&gt;...&lt;/summary&gt;#### Native install```bashpip install jsf[cli]jsf --schema jsf/tests/data/custom.json --instance wow.json```#### Docker```bashdocker run -v $PWD:/data challisa/jsf jsf --schema /data/custom.json --instance /data/example.json```&lt;/details&gt;### FastAPI Integration üöÄCreate a file main.py with:```pythonfrom jsf import JSFfrom fastapi import FastAPIapp = FastAPI(docs_url=&quot;/&quot;)generator = JSF.from_json(&quot;custom.json&quot;)@app.get(&quot;/generate&quot;, response_model=generator.pydantic())def read_root():    return generator.generate()```Run the server with:&lt;div class=&quot;termy&quot;&gt;```console$ uvicorn main:app --reloadINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)INFO:     Started reloader process [28720]INFO:     Started server process [28722]INFO:     Waiting for application startup.INFO:     Application startup complete.```Navigate to [http://127.0.0.1:8000](http://127.0.0.1:8000) and check out your endpoint. Notice the following are all automatically created:- Schema with descriptions and examples- Example response- Data generation by clicking &quot;try it out&quot;![Example Swagger UI - Page 1](docs/assets/imgs/ui-1.png)![Example Swagger UI - Page 2](docs/assets/imgs/ui-2.png)![Example Swagger UI - Page 3](docs/assets/imgs/ui-3.png)![Example Swagger UI - Page 4](docs/assets/imgs/ui-4.png)&lt;/div&gt;### Partially supported features- string `contentMediaType` - only a subset of these are supported, however they can be expanded within [this file](jsf/schema_types/string_utils/content_type/__init__.py)  ## Credits- This repository is a Python port of [json-schema-faker](https://github.com/json-schema-faker/json-schema-faker) with some minor differences in implementation.## License- [MIT License](/LICENSE)</longdescription>
</pkgmetadata>