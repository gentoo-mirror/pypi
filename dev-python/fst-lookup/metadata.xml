<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>FST Lookup==========![Python test package](https://github.com/eddieantonio/fst-lookup/workflows/Python%20test%20package/badge.svg)[![codecov](https://codecov.io/gh/eddieantonio/fst-lookup/branch/master/graph/badge.svg)](https://codecov.io/gh/eddieantonio/fst-lookup)[![PyPI version](https://img.shields.io/pypi/v/fst-lookup.svg)](https://pypi.org/project/fst-lookup/)[![calver YYYY.MM.DD](https://img.shields.io/badge/calver-YYYY.MM.DD-22bfda.svg)](http://calver.org/)Implements lookup for [Foma][] finite state transducers.Supports Python 3.5 and up.[Foma]: https://fomafst.github.io/Install-------    pip install fst-lookupUsage-----Import the library, and load an FST from a file:&gt; Hint: Test this module by [downloading the `eat` FST](https://github.com/eddieantonio/fst-lookup/raw/master/tests/data/eat.fomabin)!```python&gt;&gt;&gt; from fst_lookup import FST&gt;&gt;&gt; fst = FST.from_file('eat.fomabin')```### Assumed format of the FSTs`fst_lookup` assumes that the **lower** label corresponds to the surfaceform, while the **upper** label corresponds to the lemma, and linguistictags and features: e.g., your `LEXC` will look something likethis—note what is on each side of the colon (`:`):```lexcMultichar_Symbols +N +Sg +PlLexicon Root    cow+N+Sg:cow #;    cow+N+Pl:cows #;    goose+N+Sg:goose #;    goose+N+Pl:geese #;    sheep+N+Sg:sheep #;    sheep+N+Pl:sheep #;```If your FST has labels on the opposite sides—e.g., the **upper** labelcorresponds to the surface form and the **upper** label corresponds tothe lemma and linguistic tags—then instantiate the FST by providingthe `labels=&quot;invert&quot;` keyword argument:```pythonfst = FST.from_file('eat-inverted.fomabin', labels=&quot;invert&quot;)```&gt; **Hint**: FSTs originating from the HFST suite are often inverted, so&gt; try to loading the FST inverted first if `.generate()` or `.analyze()`&gt; aren't working correctly!### Analyze a word formTo _analyze_ a form (take a word form, and get its linguistic analyzes)call the `analyze()` function:```pythondef analyze(self, surface_form: str) -&gt; Iterator[Analysis]```This will yield all possible linguistic analyses produced by the FST.An analysis is a tuple of strings. The strings are either linguistictags, or the _lemma_ (base form of the word).`FST.analyze()` is a generator, so you must call `list()` to get a list.```python&gt;&gt;&gt; list(sorted(fst.analyze('eats')))[('eat', '+N', '+Mass'), ('eat', '+V', '+3P', '+Sg')]```### Generate a word formTo _generate_ a form (take a linguistic analysis, and get its concreteword forms), call the `generate()` function:```pythondef generate(self, analysis: str) -&gt; Iterator[str]````FST.generate()` is a Python generator, so you must call `list()` to geta list.```python&gt;&gt;&gt; list(fst.generate('eat+V+Past')))['ate']```Contributing------------If you plan to contribute code, it is recommended you use [Poetry].Fork and clone this repository, then install development dependenciesby typing:    poetry installThen, do all your development within a virtual environment, managed byPoetry:    poetry shell### Type-checkingThis project uses `mypy` to check static types. To invoke it on thispackage, type the following:    mypy -p fst_lookup### Running testsTo run this project's tests, we use `py.test`:    poetry run pytest### C ExtensionBuilding the C extension is handled in `build.py`To disable building the C extension, add the following line to `.env`:```shexport FST_LOOKUP_BUILD_EXT=False```(by default, this is `True`).To enable debugging flags while working on the C extension, add thefollowing line to `.env`:```shexport FST_LOOKUP_DEBUG=TRUE```(by default, this is `False`).### FixturesIf you are creating or modifying existing test fixtures (i.e., mostlypre-built FSTs used for testing), you will need the followingdependencies: * GNU `make` * [Foma][]Fixtures are stored in `tests/data/`. Here, you will use `make` tocompile all pre-built FSTs from source:    make[Poetry]: https://github.com/python-poetry/poetry#poetry-dependency-management-for-pythonLicense-------Copyright © 2019–2021 National Research Council Canada.Licensed under the MIT license.</longdescription>
</pkgmetadata>