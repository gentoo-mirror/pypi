<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>``autorepr``: makes civilized string representations====================================================.. image:: https://travis-ci.org/wolever/autorepr.svg?branch=master    :target: https://travis-ci.org/wolever/autoreprNow with Python 3 support!Overview--------Python makes classes easy, but ``__repr__`` methods hard. Did you forget toreference ``self`` again? Probably. Did have you thought to yourself &quot;eh, thisclass is real simple, it doesn't need a repr&quot;? Without a doubt. Was productiontaken down three times last week because your ``__str__`` returned unicode? ...no? Maybe that's just me.``autorepr`` makes it simple to build expressive, safe, and correct,``__repr__``, ``__str__``, ``__unicode__``, and ``__bytes__`` methods in asingle line each.With ``autorepr``, you get the repers you want, without worrying about thefiddly bits (like encoding and decoding), leaving you to focus on your project:.. code:: python    &gt;&gt;&gt; from autorepr import autorepr, autotext    &gt;&gt;&gt; class Person(object):    ...     name = u&quot;Alex ☃&quot;    ...     height = 123.456    ...    ...     __repr__ = autorepr([&quot;name&quot;, &quot;height:0.1f&quot;])    ...     __str__, __unicode__ = autotext(&quot;{self.name} ({self.height:0.0f} cm)&quot;)    ...    &gt;&gt;&gt; p = Person()    &gt;&gt;&gt; repr(p)    &quot;&lt;__main__.Person name=u'Alex \\u2603' height=123.5 at 0x...&gt;&quot;    &gt;&gt;&gt; unicode(p)    u'Alex \u2603 (123 cm)'    &gt;&gt;&gt; str(p)    'Alex \xe2\x98\x83 (123 cm)'Installation------------::    $ pip install autoreprUsage-----``autorepr`` exposes two main functions:- ``autorepr``, which builds a Python-esque ``__repr__`` string by passing  either a ``str.format``-style string, or a list of attributes which should be  included in a ``name=value`` list::    autorepr([&quot;name&quot;, &quot;height:0.1f&quot;]) --&gt;        &quot;&lt;pkg.Person name=u'Alex \u2603' height=123.5 at 0x...&gt;&quot;    autorepr(&quot;{self.id} name={self.name!r}&quot;) --&gt;        &quot;&lt;pkg.Person 123 name=u'Alex \u2603' at 0x...&gt;&quot;- ``autotext``, which uses ``autostr`` and ``autounicode`` to create  ``__str__`` and ``__unicode__`` methods in a Python 2 + 3 friendly way::    __str__, __unicode__ = autotext(&quot;{self.name} ({self.height!d} cm)&quot;) --&gt;        str: 'Alex \xe2\x98\x83 (123cm)'        unicode: u'Alex \u2603 (123cm)'And three secondary functions - ``autostr``, ``autounicode``, and``autobytes`` - which build ``__str__``, ``__unicode__``, and ``__bytes__``functions, respectively. The functions will do their best to avoid Unicodeencoding / decoding errors, and will generally Do The Right Thing, even if theinputs aren't necessarily sensible.Note: the examples shown here are Python 2, but everything works equally wellunder Python 3... code:: python    &gt;&gt;&gt; from autorepr import autorepr, autotext, autostr, autounicode    &gt;&gt;&gt; class Person(object):    ...     name = u&quot;Alex ☃&quot;    ...     height = 123.456    ...    ...     __repr__ = autorepr([&quot;name&quot;, &quot;height:0.1f&quot;])    ...     __str__, __unicode__ = autotext(&quot;{self.name} ({self.height:0.0f} cm)&quot;)    ...    &gt;&gt;&gt; p = Person()    &gt;&gt;&gt; repr(p)    &quot;&lt;__main__.Person name=u'Alex \\u2603' height=123.5 at 0x...&gt;&quot;    &gt;&gt;&gt; unicode(p)    u'Alex \u2603 (123 cm)'    &gt;&gt;&gt; str(p)    'Alex \xe2\x98\x83 (123 cm)'Notice that ``autostr`` and ``autorepr`` (as called here through ``autotext``)are intelligent about converting to/from unicode (decoding/encoding as UTF-8)as necessary:.. code:: python    &gt;&gt;&gt; p.name = u&quot;unicode: ☃&quot;    &gt;&gt;&gt; unicode(p)    u'unicode: \u2603 (123 cm)'    &gt;&gt;&gt; str(p)    'unicode: \xe2\x98\x83 (123 cm)'    &gt;&gt;&gt; p.name = 'utf-8 bytes: \xe2\x98\x83'    &gt;&gt;&gt; unicode(p)    u'utf-8 bytes: \u2603 (123 cm)'    &gt;&gt;&gt; str(p)    'utf-8 bytes: \xe2\x98\x83 (123 cm)'*Note*: ``autostr`` and ``autorepr`` won't crash on invalid UTF-8 (for example,if ``autounicode`` is asked to turn binary data into unicode), but the resultis *undefined* and may not be desirable.Additional properties can be passed in as ``kwargs``, which will be called withthe instance as a parameter:.. code:: python    &gt;&gt;&gt; name_with_len = autostr(&quot;{self.name} length={len}&quot;,    ...                         len=lambda self: len(self.name))    ...    &gt;&gt;&gt; p.name = 'Alex'    &gt;&gt;&gt; name_with_len(p)    'Alex length=4'This works with ``autorepr``'s list mode too:.. code:: python    &gt;&gt;&gt; repr_with_len = autorepr([&quot;name&quot;, &quot;len&quot;],    ...                          len=lambda self: len(self.name))    ...    &gt;&gt;&gt; repr_with_len(p)    &quot;&lt;__main__.Person name='Alex' len=4 at 0x...&gt;&quot;If a regular format string is passed to ``autorepr``, it will use that insteadof the generated string:.. code:: python    &gt;&gt;&gt; repr_with_str = autorepr(&quot;{self.name!r}&quot;)    &gt;&gt;&gt; repr_with_str(p)    &quot;&lt;__main__.Person 'Alex' at 0x...&gt;&quot;And of course, if you don't want your ``__repr__`` to be wrapped in``&lt;ClassName ...&gt;``, you can use ``autostr``:.. code:: python    &gt;&gt;&gt; repr_with_autostr = autostr(&quot;Person({self.name!r})&quot;)    &gt;&gt;&gt; repr_with_autostr(p)    &quot;Person('Alex')&quot;Format specifications can also be passed to ``autorepr`` if the default of``!r`` is undesirable (for example, truncating floats):.. code:: python    &gt;&gt;&gt; with_fmt_spec = autorepr([&quot;duration:0.1f&quot;, &quot;addr:x&quot;, &quot;type!s&quot;],    ...                          duration=lambda x: 123.456,    ...                          addr=lambda x: 0xabc123,    ...                          type=lambda x: &quot;foo&quot;)    &gt;&gt;&gt; with_fmt_spec(None)    '&lt;....NoneType duration=123.5 addr=abc123 type=foo at 0x...&gt;'</longdescription>
</pkgmetadata>