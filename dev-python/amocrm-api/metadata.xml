<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============================AmoCRM python API. V2===============================.. image:: https://travis-ci.org/Krukov/amocrm_api.svg?branch=master    :target: https://travis-ci.org/Krukov/amocrm_api.. image:: https://img.shields.io/coveralls/Krukov/amocrm_api.svg    :target: https://coveralls.io/r/Krukov/amocrm_apiPython AmoCRM API v2 (http://www.amocrm.ru/) (human interface for easy using)Installation============::    pip install amocrm_apiUsage=====Авторизация-----------Авторизация - с Июня 2020 amoCRM форсировала смену авторизации с токена на OAuthИ без поддержки server to server взаимодействия, в связи с чем текущая реализация содержит следующие ограничения1. В личном кабинете необходимо создать интеграцию2. Рефреш токен одноразовый и обновляется при каждом получении аксесс токена3. Ecли запросы в amoCRM происходят реже чем время жизни рефреш токена то вам не подойдет такой варант интеграции4. Токены нужно хранить, для этого есть api и существует 3 типа хранилища (можно реализовать свой):- MemoryTokensStorage - хранит токены в памяти (если вы перезапускаете приложение то придется снова создавать refresh_token)- FileStorage - сохраняет токены в файле- RedisTokensStorage - сохраняет токены в редисе (pip install redis) для new-age приложений которые работают в нескольких экземплярахExample::    from amocrm.v2 import tokens    tokens.default_token_manager(        client_id=&quot;xxx-xxx-xxxx-xxxx-xxxxxxx&quot;,        client_secret=&quot;xxxx&quot;,        subdomain=&quot;subdomain&quot;,        redirect_url=&quot;https://xxxx/xx&quot;,        storage=tokens.FileTokensStorage(),  # by default FileTokensStorage    )    tokens.default_token_manager.init(code=&quot;..very long code...&quot;, skip_error=True)- Контакт - Contact- Компания  - Company- Теги - Tags- Сделка - Lead- Задача - Task- Примечание - Note- Событие - Event- Воронки и Статусы - Pipeline, StatusРабота с сущностями--------------------У каждой сущности есть менеджер (аттрибут objects), который имеет следующие методы::    &lt;Entity&gt;.objects.get(object_id=1, query=&quot;test&quot;)  # получение обьекта    &lt;Entity&gt;.objects.all()  # получение всех сущностей    &lt;Entity&gt;.objects.filter(**kwargs)  # получение списка сущностей с фильтром    &lt;Entity&gt;.objects.create(**kwargs)  # создание сущности (нет явной сигнатуры поэтому лучше использовать метод create самой сущности)    &lt;Entity&gt;.objects.update(**kwargs)  # обносление сущности (нет явной сигнатуры поэтому лучше использовать метод update самой сущности)В свою очередь сама сущность имеет несколько методов для более простого создания и обновления::    &lt;EntityInstance&gt;.create()    &lt;EntityInstance&gt;.update()    &lt;EntityInstance&gt;.save()  # создаст или обновит в зависимости от того как обьект был инициализированИсключение - создание звонка происходит через упрошенную сущность::    from amocrm.v2 import Call, CallDirection, CallStatus    Call().create(CallDirection.OUTBOUNT, phone=&quot;....&quot;, source=&quot;&quot;, duration=timedelta(minutes=10), status=CallStatus.CALL_LATER, created_by=manager)Рассмотрим полный процесс работы на примере контакта::    from amocrm.v2 import Contact, Company    contact = Contact.objects.get(query=&quot;Тест&quot;)    print(contact.first_name)    print(contact.company.name)    print(contact.created_at)    contact.last_name = &quot;Новое&quot;    contact.tags.append(&quot;new&quot;)    contact.notes.objects.create(text=&quot;Примечание&quot;)    contact.save()    contact.company = Company(name=&quot;Amocrm&quot;)  # создаст и сразу прилинкует компанию    print(contact.company.id)    len(list(contact.customers)) # lazy list    contact.customers.append(Customer(name=&quot;Volta&quot;))Кастомные поля--------------Одна из удобных возможностей amoCRM  - кастомные поляExample::    from amocrm.v2 import Lead as _Lead, custom_field    class Lead(_Lead):        utm = custom_field.UrlCustomField(&quot;UTM метка&quot;)        delivery_type = custom_field.SelectCustomField(&quot;Способ доставки&quot;)        address = custom_field.TextCustomField(&quot;Адрес&quot;)Однако мапинг всех кастомных полей дело утоминетльное,поэтому для генерации файла с готовым мапингом есть команда::    export AMOCRM_CLIENT_ID=xxx    export AMOCRM_SECRET=xxx    export AMOCRM_SUBDOMAIN=xxx    export AMOCRM_REDIRECT_URL=xxx    export AMOCRM_CODE=xxx # optional    pyamogen &gt; models.pyДля ее работы необходимо установить пакет python-slugify (https://github.com/un33k/python-slugify)</longdescription>
</pkgmetadata>