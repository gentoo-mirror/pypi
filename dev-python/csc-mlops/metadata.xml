<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- PROJECT HEADING --&gt;&lt;br /&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/GSTT-CSC/Project_template&quot;&gt;    &lt;img src=&quot;assets/mlops_logo.png&quot; alt=&quot;Logo&quot; width=&quot;50%&quot;&gt;  &lt;/a&gt;&lt;p align=&quot;center&quot;&gt;A continuous integration and deployment framework for healthcare AI projects&lt;br /&gt;&lt;a href=&quot;https://pypi.org/project/csc-mlops/&quot;&gt;&lt;strong&gt;View on PyPI »&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/GSTT-CSC/MLOps&quot;&gt;View repo&lt;/a&gt;·&lt;a href=&quot;https://github.com/GSTT-CSC/MLOps/issues&quot;&gt;Report Bug&lt;/a&gt;·&lt;a href=&quot;https://github.com/GSTT-CSC/MLOps/issues&quot;&gt;Request Feature&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/GSTT-CSC/MLOps/actions/workflows/master-develop-test.yml/badge.svg?branch=main&quot;&gt;  &lt;img src=&quot;https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/laurencejackson/ba102d5f3e592fcd50451c2eff8a803d/raw/19cbafdaad049423cf20c725944c52a3ed3764e7/mlops_pytest-coverage-comment.json&quot;&gt;&lt;/p&gt;## OverviewThis project aims to build an effective MLOps framework for the development of AI models in a healthcare setting. The application development framework has three major components:#### 1. MLOps serverThe MLOps server hosts the ML lifecycle management services. An MLFlow instance serves as the management platform, providing experiment tracking and model serving.#### 2. Project TemplateThe [project template](https://github.com/GSTT-csc/Project_template) is the starting point for any project using this development framework. This template is flexible enough for any projects and facilitates communication with other parts of the development framework.#### 3. csc-mlops packageThe csc-mlops python package is available on [PyPI](https://pypi.org/project/csc-mlops) and installed by default by the [project template](https://github.com/GSTT-csc/Project_template). This package handles communication between the project and the server, performs automated tasks, and includes helper functions and classes to streamline development. These components work together to simplify and automate many of the processes required for controlled app development. A high level schematic of the framework is illustrated below. In this case XNAT is used as a data archive platform, the framework can be adapted to use other data stores.![](assets/2022-06-05_mlops-dev-schematic.png)&gt; This repository contains the source code for the server and csc-mlops components of the development framework. For further details on the project template component see the [project template repository](https://github.com/GSTT-csc/Project_template).## The MLOps server### Server components* [MLFlow](https://mlflow.org/) Open source platform to manage the ML lifecycle* [MINIO](https://min.io/) High performance object storage suite* [NGINX](https://www.nginx.com/) Reverse proxy serverIt's not essential to have a complete understanding of all of these, but a high-level understanding of [MLFlow](https://mlflow.org/) in particular will be useful!&lt;!-- GETTING STARTED  --&gt;### Getting StartedThe production version of this project is intended to run on a dedicated remote machine on an isolated network. This documentation will often describe the MLOps server, development machine and runner as separate machines, but there is no reason these cannot be the same machine if the network locations point to the localhost.### PrerequisitesFirst follow the instructions to install [Docker](https://docs.docker.com/engine/install/) and [docker-compose](https://docs.docker.com/compose/install/).Check docker and docker-compose are working by calling passing the help argument on the command line. If the help information is not returned, or an error is given, revisit the docker installation docs.```shdocker --helpdocker-compose --help```### Setting up the MLOps server1. Clone and enter the repository   ```sh   git clone https://github.com/GSTT-CSC/MLOps.git   cd MLOps   ```   2. The server should be configured by creating an environment file at ```/mlflow_server/.env```. The environment variable shown are given as an example, and should not be used for a production deployment.Setting these variables is a requirement, the server will fail to start if they are undefined.**Please do not use shown values. Consider Writing you own usernames and passwords.**```shell# Example env file - fill all required values before usingAWS_ACCESS_KEY_ID=minioUsernameAWS_SECRET_ACCESS_KEY=minioPasswordMLFLOW_S3_IGNORE_TLS=truePOSTGRES_USER=usePOSTGRES_PASSWORD=passPOSTGRES_DB=db```3. Navigate to the mlflow_server directory and start the service. Any docker images that are not present on your local system will be pulled from dockerhub (which might take a while). ```shell cd mlflow_server docker-compose up -d --build ```4. To enable access to the minio artifact storage the host machine needs to be authenticated. Any of the methods supported by boto3 should be compatible, the recommended authentication method is to create an [aws credentials file](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html). e.g. for ubuntu/linux```[credentials]AWS_ACCESS_KEY_ID=minioUsernameAWS_SECRET_ACCESS_KEY=minioPassword```Upon a successful build the server should now be up and running locally. By default, the mlflow user interface can be accessed at ```http:/localhost:85``` and minio can be accessed at ```https:/localhost:8002```.To check if the server is up and running successfully running ```docker ps``` in the terminal lists the running containers, and we should see something like:```angular2htmlCONTAINER ID   IMAGE                                      COMMAND                  CREATED             STATUS                       PORTS                                        NAMES3d51a7580b6f   mlflow_nginx                               &quot;nginx -g 'daemon of…&quot;   About an hour ago   Up About an hour             0.0.0.0:80-&gt;80/tcp, 0.0.0.0:8002-&gt;8002/tcp   mlflow_nginx1baa8ff12814   mlflow_app                                 &quot;mlflow server --bac…&quot;   About an hour ago   Up About an hour             5000/tcp                                     mlflow_servera397b4149c5f   minio/minio:RELEASE.2021-03-17T02-33-02Z   &quot;/usr/bin/docker-ent…&quot;   About an hour ago   Up About an hour (healthy)   9000/tcp, 9002/tcp                           mlflow_server_s3_165374369fe4d   postgres:13.1                              &quot;/docker-entrypoint.…&quot;   About an hour ago   Up About an hour (healthy)   5432/tcp,                                    mlflow_db```### Server components overviewWhen we ran ```docker-compose up``` we started 4 networked containers, each of which serves a purpose within the MLOps framework.1. **NGINX**: The nginx container acts as a reverse proxy to control network traffic.2. **MLflow**: The MLflow container hosts our MLflow server instance. This server is responsible for tracking and logging the MLOps events sent to it.3. **MINIO**: The MINIO container hosts our MINIO server. Here we are using MINIO as a self hosted S3 storage location. The MLflow container interfaces well with S3 storage locations for logging artifacts (models, images, plots etc)4. **postgres**: The database server container is visible only to the MLflow container, which logs MLflow entities to the postgres database hosted on this container. MLFlow entities should not be confused with artifacts (stored on MINIO), and are simple values such as metrics, parameters and configuration options which can be efficiently stored in a database.There are two [bridge networks](https://docs.docker.com/network/bridge/) which connect these containers, named 'frontend' and 'backend'. The backend is used for communication between containers and is not accessible from the host (or remote), the frontend is accesible from the host (or remote) through the NGINX reverse proxy. NGINX will act as our gatekeeper and all requests will pass through it. This enables us to take advantage of NGINX load balancing and authentication in production versions.### Experiment tracking with MLflowMLflow is a framework for managing the full lifecycle of AI models. It contains tools to cover each stage of AI model lifecycle it contains 4 major component Tracking, Projects, Models, and a Model Registry. The endpoint for these tools is an MLflow server that cun run on local or remote hardware and handles all aspects of the lifecycle.Currently, we will focus primarily on the tracking and projects components.* Tracking refers to tools used to track experiments to record and compare parameters and results. This is done by adding logging snippets to the ML code to record things like hyper-parameters, metrics and artifacts. These entities are then associated with a particular run with a specific git commit. This git commit points to a specific version of the project files. This means that by using MLflow tracking we are able to identifiy the code used to train an AI model and make comparisons following changes to code structure and hyperparameter choices.* MLflow uses projects to encapsulate AI tools in a reusable and reproducible way, based primarily on conventions. It also enables us to chain together project workflows meaning we are able to automate a great deal of the model development process.## csc-mlops packageThe csc-mlops package can be installed using pip:```angular2htmlpip install csc-mlops```### Experiment The `Experiment` class is the primary interface between the developers project code and the MLOps  processes. By using `Experiment` a number of important processes are automated:- Project configuration and registration- Communication with the MLOps server- Ensures all project code is committed and current with repository- Docker image built if it can't be found locally- Project logger configuredTo use the Experiment class the project must be run using a syntax such as:```pythonfrom mlops.Experiment import Experimentconfig_path = 'config/config.cfg'exp = Experiment(config_path=config_path)exp.run(docker_args={}, entry_point='main')```&gt; When using the [project template](https://github.com/GSTT-csc/Project_template) this process is performed when executing the `run_project.py` script.&gt; For more information on how to define the project configuration using a config.cfg file see the [project template](https://github.com/GSTT-csc/Project_template) documentation### XNAT data handlerAccessing data stored in an XNAT archive is performed through two steps.#### 1. Create list of data samplesA list of subjects is extracted from the XNAT archive for the specified project. This is done automatically by the helper function `xnat_build_dataset`. ```pythonfrom mlops.data.tools.tools import xnat_build_datasetPROJECT_ID = 'my_project'xnat_configuration = {'server': XNAT_LOCATION,                      'user': XNAT_USER,                      'password': XNAT_USER_PASSWORD,                      'project': XNAT_PROJECT_ID}xnat_data_list = xnat_build_dataset(self.xnat_configuration)``` Each element in the list `xnat_data_list` is a dictionary with two keys, Where these fields indicated unique references to each subject. ```{    'subject_id': &lt;subject_id&gt;,    'subject_uri': &lt;subject_uri&gt;}```#### 2. Download relevant data using LoadImageXNATd and actionsA MONAI transform `LoadImageXNATd` is used to download the data from XNAT, this transform can be used in place of the conventional `LoadImaged` transform provided by MONAI to access local data.A worked example is given below to create a valid dataloader containing the sag_t2_tse scans from XNAT where each subject has two experimentsThis first thing that is required is an action function. This is a function that operates on an XNAT SubjectData object and returns the desired ImageScanData object from the archive and the key under which is will be stored in the dataset. For example the function below will extract the 'sag_t2_tse' scans from the archive.```pythondef fetch_sag_t2_tse(subject_data: SubjectData = None) -&gt; (ImageScanData, str):    &quot;&quot;&quot;    Function that identifies and returns the required xnat ImageData object from a xnat SubjectData object    along with the 'key' that it will be used to access it.    &quot;&quot;&quot;    for exp in subject_data.experiments:        if 'MR_2' in subject_data.experiments[exp].label:            for scan in subject_data.experiments[exp].scans:                if 'sag_t2_tse' in subject_data.experiments[exp].scans[scan].series_description:                    return subject_data.experiments[exp].scans[scan], 'sag_t2_tse'```In this example, the `fetch_sag_t2_tse` function will loop over all experiments available for the subject, then if one of these experiments has 'MR_2' in the label it will loop over all the scans in this experiment until it finds one with 'sag_t2_tse' in the series_description. The URI to this scan is then extracted and returned along with the key it will be stored under in the data dictionary, in this case 'sag_t2_tse'. We can now pass this action function to the `LoadImageXNATd` transform. When passing a list of action functions to the `LoadImageXNATd` transform each action function in the list will be performed sequentially. So if multiple datasets are required for each Subject then multiple functions can be used. ```pythonfrom mlops.data.transforms.LoadImageXNATd import LoadImageXNATdfrom monai.transforms import Compose, ToTensordfrom torch.utils.data import DataLoaderfrom monai.data import CacheDatasetfrom xnat.mixin import ImageScanData, SubjectDatafrom monai.data.utils import list_data_collate# list of actions to be applied sequentiallyactions = [fetch_sag_t2_tse]train_transforms = Compose(    [        LoadImageXNATd(keys=['subject_uri'], actions=actions, xnat_configuration=xnat_configuration),        ToTensord(keys=['sag_t2_tse'])    ])dataset = CacheDataset(data=xnat_data_list, transform=train_transforms)data_loader = DataLoader(dataset, batch_size=1, shuffle=True, num_workers=0, collate_fn=list_data_collate)```If further transforms are required they can be added to the `Compose` transform list as usual.&lt;!-- Additional tools --&gt;## Additional ToolsAdditional tools designed to be used with MLOps are located in the [tools](tools) folder.- [Data toolkit](tools/datatoolkit)  - Tools for collecting information about large data stores. &lt;!-- ROADMAP --&gt;## RoadmapSee the [open issues](https://github.com/GSTT-CSC/MLOps/issues) for a list of proposed features (and known issues).&lt;!-- CONTRIBUTING --&gt;## Contributing1. Fork or clone the Project2. Since all code changes are staged on the `develop` branch before releases you will need to checkout this branch first (`git checkout -b develop`)3. Create your Feature Branch off of `develop` (`git checkout -b feature/AmazingFeature`)4. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)5. Push to the remote (`git push origin feature/AmazingFeature`)6. Open a Pull Request and specify that you want to merge your feature branch into the `develop` branch### TestingWhen contributing, you are _strongly_ encouraged to write tests for any functions or classes you add. Please uses pytest and add your tests to an appropriate location in the  `tests` directory, which also contains some examples to get you started.&lt;!-- ACKNOWLEDGEMENTS --&gt;## Acknowledgements* [README template by othneildrew](https://github.com/othneildrew/Best-README-Template)&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt;&lt;!-- https://www.markdownguide.org/basic-syntax/#reference-style-links --&gt;[contributors-shield]: https://img.shields.io/github/contributors/github_username/repo.svg?style=for-the-badge[contributors-url]: https://github.com/github_username/repo/graphs/contributors[forks-shield]: https://img.shields.io/github/forks/github_username/repo.svg?style=for-the-badge[forks-url]: https://github.com/github_username/repo/network/members[stars-shield]: https://img.shields.io/github/stars/github_username/repo.svg?style=for-the-badge[stars-url]: https://github.com/github_username/repo/stargazers[issues-shield]: https://img.shields.io/github/issues/github_username/repo.svg?style=for-the-badge[issues-url]: https://github.com/github_username/repo/issues[license-shield]: https://img.shields.io/github/license/github_username/repo.svg?style=for-the-badge[license-url]: https://github.com/github_username/repo/blob/master/LICENSE.txt[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=for-the-badge&amp;logo=linkedin&amp;colorB=555[linkedin-url]: https://linkedin.com/in/github_username</longdescription>
</pkgmetadata>