<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pysqldf=======|Build Status| |PyPI Version| |PyPI Monthly Downloads| |PyPI License|``pysqldf`` allows you to query ``pandas`` DataFrames using SQL syntax.It works similarly to ``sqldf`` in R. ``pysqldf`` seeks to provide amore familiar way of manipulating and cleaning data for people new toPython or ``pandas``.Installation------------``$ pip install pysqldf``Basics------The main class in pysqldf is ``SQLDF``. ``SQLDF`` accepts 1 enviromentvariable sets or more parametrs in constructor. - an set ofsession/environment variables (dictionary of valiables, ``locals()`` or``globals()``) - temporary file type - user defined functions - userdefined aggregate functions``pysqldf`` uses `SQLite syntax &lt;http://www.sqlite.org/lang.html&gt;`__.Any convertable data to ``pandas`` DataFrames will be automaticallydetected by ``pysqldf``. You can query them as you would any regular SQLtable... code:: python    $ python    &gt;&gt;&gt; from pysqldf import SQLDF, load_meat, load_births    &gt;&gt;&gt; sqldf = SQLDF(globals())    &gt;&gt;&gt; meat = load_meat()    &gt;&gt;&gt; births = load_births()    &gt;&gt;&gt; print sqldf.execute(&quot;SELECT * FROM meat LIMIT 10;&quot;).head()                      date  beef  veal  pork  lamb_and_mutton broilers other_chicken turkey    0  1944-01-01 00:00:00   751    85  1280               89     None          None   None    1  1944-02-01 00:00:00   713    77  1169               72     None          None   None    2  1944-03-01 00:00:00   741    90  1128               75     None          None   None    3  1944-04-01 00:00:00   650    89   978               66     None          None   None    4  1944-05-01 00:00:00   681   106  1029               78     None          None   None    &gt;&gt;&gt; q = &quot;SELECT m.date, m.beef, b.births FROM meat m INNER JOIN births b ON m.date = b.date;&quot;    &gt;&gt;&gt; print sqldf.execute(q).head()                        date    beef  births    403  2012-07-01 00:00:00  2200.8  368450    404  2012-08-01 00:00:00  2367.5  359554    405  2012-09-01 00:00:00  2016.0  361922    406  2012-10-01 00:00:00  2343.7  347625    407  2012-11-01 00:00:00  2206.6  320195    &gt;&gt;&gt; q = &quot;SELECT strftime('%Y', date) AS year, SUM(beef) AS beef_total FROM meat GROUP BY year;&quot;    &gt;&gt;&gt; print sqldf.execute(q).head()       year  beef_total    0  1944        8801    1  1945        9936    2  1946        9010    3  1947       10096    4  1948        8766user defined functions and user defined aggregate functions alsosupported... code:: python    $ python    &gt;&gt;&gt; from pysqldf import SQLDF, load_iris    &gt;&gt;&gt; import math    &gt;&gt;&gt; import numpy    &gt;&gt;&gt; ceil = lambda x: math.ceil(x)    &gt;&gt;&gt; udfs = { &quot;ceil&quot;: lambda x: math.ceil(x) }    &gt;&gt;&gt; udafs = { &quot;variance&quot;: lambda values: numpy.var(values) }    &gt;&gt;&gt; # or you can also define aggregation function as class    &gt;&gt;&gt; # class variance(object):    ... #     def __init__(self):    ... #         self.a = []    ... #     def step(self, x):    ... #         self.a.append(x)    ... #     def finalize(self):    ... #         return numpy.var(self.a)    ...    &gt;&gt;&gt; # udafs={ &quot;variance&quot;: variance }    &gt;&gt;&gt; iris = load_iris()    &gt;&gt;&gt; sqldf = SQLDF(globals(), udfs=udfs, udafs=udafs)    &gt;&gt;&gt; sqldf.execute(&quot;&quot;&quot;        SELECT            ceil(sepal_length) AS sepal_length,            ceil(sepal_width) AS sepal_width,            ceil(petal_length) AS petal_length,            ceil(petal_width) AS petal_width,            species        FROM iris;        &quot;&quot;&quot;).head()       sepal_length  sepal_width  petal_length  petal_width      species    0             6            4             2            1  Iris-setosa    1             5            3             2            1  Iris-setosa    2             5            4             2            1  Iris-setosa    3             5            4             2            1  Iris-setosa    4             5            4             2            1  Iris-setosa    &gt;&gt;&gt; sqldf.execute(&quot;SELECT species, variance(sepal_width) AS var FROM iris GROUP BY species;&quot;)               species       var    0      Iris-setosa  0.142276    1  Iris-versicolor  0.096500    2   Iris-virginica  0.101924Documents---------``SQLDF(env, inmemory=True, udfs={}, udafs={})``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~``env``: variable mapping dictionary of sql executed enviroment. key issql variable name and value is your program variable. ``locals()`` or``globals()`` is used for simple assign.``inmemory``: sqlite db option.``udfs``: dictionary of user defined functions. dictionary key isfunction name, dictionary value is function. see `sqlite3document &lt;https://docs.python.org/2.7/library/sqlite3.html#sqlite3.Connection.create_function&gt;`__``udafs``: dictionary of user defined aggregate functions. dictionarykey is function name, dictionary value is aggregate function or class.If value is function, function gets one argument that is list of columnvalues and it should return aggregated a value. Another case(value isclass), see `sqlite3document &lt;https://docs.python.org/2.7/library/sqlite3.html#sqlite3.Connection.create_aggregate&gt;`__.``load_iris()``, ``load_meat()``, ``load_births()``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~load example DataFrame data.-  iris: `data   description &lt;https://archive.ics.uci.edu/ml/datasets/Iris&gt;`__-  meat: `data   description &lt;http://www.ers.usda.gov/data-products/livestock-meat-domestic-data.aspx&gt;`__-  births: `data   description &lt;http://data.un.org/Data.aspx?d=POP&amp;f=tableCode:55&gt;`__.. |Build Status| image:: https://travis-ci.org/airtoxin/pysqldf.svg   :target: https://travis-ci.org/airtoxin/pysqldf.. |PyPI Version| image:: https://img.shields.io/pypi/v/pysqldf.svg   :target: https://pypi.python.org/pypi/pysqldf.. |PyPI Monthly Downloads| image:: https://img.shields.io/pypi/dm/pysqldf.svg   :target: https://pypi.python.org/pypi/pysqldf.. |PyPI License| image:: https://img.shields.io/pypi/l/pysqldf.svg   :target: https://pypi.python.org/pypi/pysqldf</longdescription>
</pkgmetadata>