<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fittieParse Garmin .FIT files[![PyPI version](https://img.shields.io/pypi/v/fittie?color=green)](https://pypi.org/project/fittie/)## InstallationFittie is available on pypi and can be installed with the following command.```shell$ pip install fittie```## Example```pythonfrom fittie import decodeif __name__ == &quot;__main__&quot;:    fitfile = decode(&quot;path/to/fit/file.fit&quot;)            # Example: get average heart rate    print(fitfile.average_heart_rate)    # Loop through all data messages:    for data_message in fitfile:        print(data_message)```For more information and examples, check [the documentation](https://marcelblijleven.github.io/fittie/)&lt;!-- fitfile section --&gt;## Fitfile### UsageDecoding / parsing a FIT file is done through the `decode` function in the `fittie.fitfile` package. It accepts the following types of arguments:- A file path string- A file opened in &quot;rb&quot; mode- A buffered reader, BinaryIO or BytesIO```python# Examplesfrom io import BytesIOfrom fittie.fitfile import decodefitfile_1 = decode(&quot;/path/to/fit/file.fit&quot;)         # Path to filefitfile_2 = decode(BytesIO(...))                    # BytesIOwith open(&quot;/path/to/fit/file.fit&quot;, &quot;rb&quot;) as f:      # File opened in rb mode    fitfile_3 = decode(f)```To view the available message types in the fitfile, use the `available_message_types` property. It will return a list of message type keys. These keys can be used to retrieveall messages of a certain kind. After retrieving the available message types, the messages can be retrieved using `get_messages_by_type`.```pythonfitfile = decode(&quot;/path/to/fit/file.fit&quot;)types = fitfile.available_message_types# e.g. [ 'file_id', 'device_info', 'record', 'event', 'lap', 'session', 'activity']messages = fitfile.get_messages_by_type('record')  # Returns a list of `DataMessage````Alternatively, you can interact with the `messages` property of `fitfile` directly, thisis a simple dict.#### File typesAll FIT files should contain a file id message that describes the type of file. Common file types are `activity`, `workout` and `course`. More file types can be found in `fit_types.py`.To retrieve the type of the decoded `fitfile`, use the `.file_type` property.```pyconassert fitfile.file_type == &quot;activity&quot;```#### CRCA crc check is done by default, but can be disabled by providing `calculate_crc=False`to the `decode` function to improve speed.For example, on the same FIT file with 58297 data messages, decoding with crc takes 0.029 seconds and withoutcrc it only takes 0.014 seconds.#### DataMessagesTo access data in a `DataMessage`, use the `fields` property. This will return a dictwith all the values inside the message.```pythonfitfile = decode(&quot;/path/to/fit/file.fit&quot;)for record in fitfile.get_messages_by_type(&quot;record&quot;)[:5]:    print(record.fields)# {'timestamp': 1044776016}# {'timestamp': 1044776016, 'heart_rate': 117}# {'timestamp': 1044776017, 'heart_rate': 116}# {'timestamp': 1044776017, 'heart_rate': 115}# {'timestamp': 1044776018, 'heart_rate': 115}```&lt;!-- end fitfile section --&gt;## TODO: * Handle component fields * Handle accumulators * Handle chained FIT files * Handle compressed timestamps * move record_header into record, instead of reading it separately * encoding</longdescription>
</pkgmetadata>