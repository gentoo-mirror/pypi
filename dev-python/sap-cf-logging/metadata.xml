<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python logging library to emit JSON logs in a SAP CloudFoundry environment.===========================================================================.. image:: https://api.reuse.software/badge/github.com/SAP/cf-python-logging-support   :target: https://api.reuse.software/info/github.com/SAP/cf-python-logging-supportThis is a collection of support libraries for Python applications running on Cloud Foundry thatserve two main purposes: provide (a) means to emit structured application log messages and (b)instrument web applications of your application stack to collect request metrics.For details on the concepts and log formats, please look at the sibling project for `java loggingsupport &lt;https://github.com/SAP/cf-java-logging-support&gt;`__.Features-----------1. Lightweight, no dependencies. Support of Python 2.7 &amp; 3.5.2. Compatible with the Python **logging** module. Minimal configuration needed.3. Emits JSON logs (`format   details &lt;https://github.com/SAP/cf-java-logging-support/tree/master/cf-java-logging-support-core/beats&gt;`__).4. Supports **correlation-id**.5. Supports request instrumentation. Built in support for:  * `Flask 0.1x &lt;http://flask.pocoo.org/&gt;`__  * `Sanic 0.5.x &lt;https://github.com/channelcat/sanic&gt;`__  * `Falcon &lt;https://falconframework.org/&gt;`__  * `Django &lt;https://www.djangoproject.com/&gt;`__  * Extensible to support others6. Includes CF-specific information (space id, app id, etc.) to logs.7. Supports adding extra properties to JSON log object.Installation------------Install the package with pip:::    pip install sap_cf_loggingUsage-----Setting up your application~~~~~~~~~~~~~~~~~~~~~~~~~~~Logging library needs to be initialized. Depending on you application type, different initializationis used. You should usually do this in your application entrypoint.For CLI applications you just need to call ``cf_logging.init()`` *once* to configure the library.The library will try to configure future loggers to emit logs in JSON format.If you are using one of the supported frameworks, check the `Configuration &lt;#configuration&gt;`__section to see how to configure it.**Setting up the CloudFoundry environment**In order for your logs to appear in the Kibana dashboard, you have to create an **application-logs**service instance and bind it to your application.Configuration~~~~~~~~~~~~~After installation use the following guide to configure the Python cf logging library.Flask^^^^^First import the ``cf_logging`` library and setup Flask logging on the application... code:: python    from sap.cf_logging import flask_logging    app = flask.Flask(__name__)    flask_logging.init(app, logging.INFO)Next use Pythonâ€™s logging library.. code:: python    @app.route('/')    def root_route():        logger = logging.getLogger('my.logger')        logger.info('Hi')        return 'ok'Note the logs generated by the applicationSanic^^^^^.. code:: python    import sanic    import logging    from sanic.response import HTTPResponse    from sap.cf_logging import sanic_logging    from sap.cf_logging.core.constants import REQUEST_KEY    app = sanic.Sanic('test.cf_logging')    sanic_logging.init(app)    @app.route('/')    async def two(request):        extra = {REQUEST_KEY: request}        logging.getLogger('my.logger').debug('Hi', extra = extra)        return HTTPResponse(body='ok')**Note**: With Sanic you need to pass the request with an ``extra`` parameter in the logging API.This is needed in order to get the *correlation_id* generated at the beginning of the request orfetched from the HTTP headers.Falcon^^^^^^.. code:: python   import falcon   from sap.cf_logging import falcon_logging   from sap.cf_logging.core.constants import REQUEST_KEY   class Resource:       def on_get(self, req, resp):           extra = {REQUEST_KEY: req}           logging.getLogger('my.logger').log('Resource requested', extra=extra)           resp.media = {'name': 'Cloud Foundry'}   app = falcon.API(middleware=[       falcon_logging.LoggingMiddleware()   ])   app.add_route('/resource', Resource())   falcon_logging.init(app)Django^^^^^^.. code:: bash    django-admin startproject example.. code:: python    # example/settings.py        MIDDLEWARES = [            # ...,            'sap.cf_logging.django_logging.LoggingMiddleware'        ]    # example/wsgi.py        # ...        from sap.cf_logging import django_logging        os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;sap_logtesting.settings&quot;)        django_logging.init()        # ...Create a new app.. code:: bash    python manage.py startapp example_app.. code:: python    # example_app/views.py        import logging        from django.http import HttpResponse        from sap.cf_logging.core.constants import REQUEST_KEY        def index(request):            extra = {REQUEST_KEY: request}            logger = logging.getLogger('my.logger')            logger.info(&quot;Resource requested&quot;, extra=extra)            return HttpResponse(&quot;ok&quot;)    # example_app/urls.py        from django.conf.urls import url        from . import views        urlpatterns = [            url('^$', views.index)        ]    # example/urls.py        from django.contrib import admin        from django.conf.urls import url, include        urlpatterns = [            url('admin/', admin.site.urls),            url('example/', include('example_app.urls'))        ]General^^^^^^^.. code:: python    import logging    from sap import cf_logging    cf_logging.init()    logger = logging.getLogger(&quot;cli.logger&quot;)    logger.info('hi')**Notes**: All loggers set up and created before the initialization of the Cloud Foundry logging library willbe left untouched. When using Flask and Sanic with the logging library before andafter request middleware is attached, and it will capture response times for each request.Custom Fields&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;To use custom fields. Pass a dictionary property custom_fields to the initialize method:.. code:: python    import logging    from sap import cf_logging    cf_logging.init(custom_fields={&quot;foo&quot;: &quot;default&quot;, &quot;bar&quot;: None})Here we mark the two fields: foo and bar as custom_fields. Logging with:.. code:: python    logging.getLogger('my.logger').debug('Hi')The property foo will be output as a custom field with a value &quot;default&quot;. The property bar will not be logged, as it does not have a value.To log bar, provide a value when logging:.. code:: python    logging.getLogger('my.logger').debug('Hi', extra={&quot;bar&quot;: &quot;new_value&quot;})It is also possible to log foo with a different value:.. code:: python    logging.getLogger('my.logger').debug('Hi', extra={&quot;foo&quot;: &quot;hello&quot;})Setting and getting correlation ID&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;When using cf_logging in a web application you don't need to set the correlation ID, because the logging library will fetch it from the HTTP headers and set it.For non web applications you could set the correlation ID manually, so that the log entries can be filtered later on based on the ``correlation_id`` log property.In this case the correlation ID is kept in a thread local variable and each thread should set its own correlation ID.Setting and getting the correlation_id can be done via:.. code:: python    cf_logging.FRAMEWORK.context.get_correlation_id()    cf_logging.FRAMEWORK.context.set_correlation_id(value)If you need to get the correlation ID in a web application, take into account the framework you are using.In async frameworks like Sanic and Falcon the context is stored into the request object and you need to provide the request to the call:.. code:: python    cf_logging.FRAMEWORK.context.get_correlation_id(request)Logging sensitive data^^^^^^^^^^^^^^^^^^^^^^The logging library does not log sensitive fields by default. Those fields are replaced with 'redacted' instead of their original content.The following fields are considered sensitive data: ``remote_ip``, ``remote_host``, ``remote_port``, ``x_forwarded_for``, ``remote_user``, ``referer``.Logging of all or some of these fields can be activated by setting the following environment variables:+-----------------------------------+-----------+------------------------------------------------------------------------+| Environment variable              | Value     | Enables sensitive field                                                |+===================================+===========+========================================================================+| ``LOG_SENSITIVE_CONNECTION_DATA`` | true      |   ``remote_ip``, ``remote_host``, ``remote_port``, ``x_forwarded_for`` |+-----------------------------------+-----------+------------------------------------------------------------------------+| ``LOG_REMOTE_USER``               | true      |   ``remote_user``                                                      |+-----------------------------------+-----------+------------------------------------------------------------------------+| ``LOG_REFERER``                   | true      |   ``referer``                                                          |+-----------------------------------+-----------+------------------------------------------------------------------------+This behavior matches the corresponding mechanism in the `CF Java Logging Support library &lt;https://github.com/SAP/cf-java-logging-support/wiki/Overview#logging-sensitive-user-data&gt;`__.Examples~~~~~~~~For more examples please see the tests within the ``./tests/`` directory.Requirements------------No external requirements are needed to run the package.Limitations-----------NAKnown Issues------------NAHow to obtain support---------------------Please open an issue on the github page.Contributing------------Please create a pull request and briefly describe the nature of the change. Please submit a testcase along with your pull request.To-Do (upcoming changes)------------------------NAChangelog---------See `CHANGELOG file &lt;https://github.com/SAP/cf-python-logging-support/blob/master/CHANGELOG.md&gt;`__.License-------Copyright (c) 2017-2021 SAP SE or an SAP affiliate company and cf-python-logging-support contributors.  Please see our `LICENSE file &lt;https://github.com/SAP/cf-python-logging-support/blob/master/LICENSE&gt;`__ for copyright and license information. Detailed information including third-party components and their licensing/copyright information is available `via the REUSE tool &lt;https://api.reuse.software/info/github.com/SAP/cf-python-logging-support&gt;`__.</longdescription>
</pkgmetadata>