<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>cmdssh======Execute commands on local machine and on remote machine via ssh, and awrapper for paramikos scp.shell command-------------Wrapper around subprocess.call with shell=True.. code:: python    shell(cmd)Background Unix command running-------------------------------Runs a blocking unix command and returns the result.. code:: python    cmd_run(cmd, pr=False, streamoutput=True, returnoutput=True, cwd=None, prefix=None)    # example    cmd_run('date &quot;+%Y-%m-%d% %H:%M&quot;', pr=False, streamoutput=False, returnoutput=True)    # more params    call_command(command, cmdfolder=os.getcwd(), verbose=False, streamoutput=True,\                 returnoutput=False, prefix=None, ret_and_code=False)Parameters:~~~~~~~~~~~-  ``command``: unix command-  ``cmdfolder``\ =os.getcwd() -&gt; working folder command-  ``verbose``\ =False -&gt; prints the command-  ``streamoutput``\ =True -&gt; prints output to stdout (keeps buffering)-  ``returnoutput``\ =False -&gt; return the buffered output-  ``prefix``\ =None -&gt; string to place before streaming output-  ``ret_and_code``\ =False -&gt; return exit code also (code, val)Variant background unix command-------------------------------Common usecase scenario, run a command and get the result, possiblyprint to the console using an optional filter... code:: python    # example filter:     def onlyerrors(data):        if &quot;ERROR&quot; in data:            return data    cmd_exec(cmd, cmdtoprint=None, display=True, myfilter=onlyerrors)-  ``cmdtoprint``: unix command-  ``display``: print to console-  ``myfilter``: function used to printSSH: run command on remote machine----------------------------------Uses ssh and key authentication to logon to a remote ssh server andexecute a command there... code:: python    def remote_cmd(server, cmd, username=None, timeout=60, keypath=None):    #example    remote_cmd(&quot;localhost&quot;, &quot;rm -Rf ~/Desktop/foobar&quot;)Parameters:~~~~~~~~~~~-  ``server``: ip or domain name of server-  ``cmd``: unix command to execute-  ``username``: username used to login-  ``timeout``: try time to connect to server-  ``keypath``: path to the public key of usernametuplebased interface:~~~~~~~~~~~~~~~~~~~~~.. code:: python    remote_cmd_map(servercmd)-  ``servercmd``: tuple with ( server, cmd, username, keypath )SSH: Secure Copy Protocol-------------------------.. code:: python    scp_get(server, fp1, fp2, username=None, keypath=None)    scp_put(server, fp1, fp2, username=None, keypath=None)Parameters:~~~~~~~~~~~-  ``server``: ip or domain name of server-  ``fp1``: source filepath-  ``fp2``: target filepath-  ``username``: username used to login-  ``keypath``: path to the public key of usernameSSH: Shell----------Invoke a shell on a machine.. code:: python    invoke_shell(server, username, keypath)Parameters:~~~~~~~~~~~-  ``server``: ip or domain name of server-  ``username``: username used to login-  ``keypath``: path to the public key of usernameDownload file-------------Wrapper around the requests library. Downloads a file with a progressbar... code:: python    download(url, mypath):parameters:~~~~~~~~~~~-  ``url``: url to download-  ``mypath``: filepath where to create the downloaded fileexample output:~~~~~~~~~~~~~~~.. code:: bash    download: http://download.thinkbroadband.com/5MB.zip    00:00:02|███████████████████████         | 3.7Mi/5.0Mi</longdescription>
</pkgmetadata>