<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Vertex Protocol Python SDKThis is the Python SDK for the [Vertex Protocol API](https://vertex-protocol.gitbook.io/docs/developer-resources/api).See [SDK docs](https://vertex-protocol.github.io/vertex-python-sdk/index.html) to get started.## Requirements- Python 3.9 or above## InstallationYou can install the SDK via pip:```bashpip install vertex-protocol```## Basic usage### Import the necessary utilities:```pythonfrom vertex_protocol.client import create_vertex_client, ClientModefrom vertex_protocol.contracts.types import DepositCollateralParamsfrom vertex_protocol.engine_client.types.execute import (    OrderParams,    PlaceOrderParams)from vertex_protocol.utils.expiration import OrderType, get_expiration_timestampfrom vertex_protocol.utils.math import to_pow_10, to_x18from vertex_protocol.utils.nonce import gen_order_nonce```### Create the VertexClient providing your private key:```pythonprint(&quot;setting up vertex client...&quot;)private_key = &quot;xxx&quot;client = create_vertex_client(ClientMode.MAINNET, private_key)```### Perform basic operations:```python# Depositing collateralsprint(&quot;approving allowance...&quot;)approve_allowance_tx_hash = client.spot.approve_allowance(0, to_pow_10(100000, 6))print(&quot;approve allowance tx hash:&quot;, approve_allowance_tx_hash)print(&quot;querying my allowance...&quot;)token_allowance = client.spot.get_token_allowance(0, client.context.signer.address)print(&quot;token allowance:&quot;, token_allowance)print(&quot;depositing collateral...&quot;)deposit_tx_hash = client.spot.deposit(   DepositCollateralParams(      subaccount_name=&quot;default&quot;, product_id=0, amount=to_pow_10(100000, 6)   ))print(&quot;deposit collateral tx hash:&quot;, deposit_tx_hash)# Placing ordersprint(&quot;placing order...&quot;)owner = client.context.engine_client.signer.addressproduct_id = 1order = OrderParams(   sender=SubaccountParams(      subaccount_owner=owner,      subaccount_name=&quot;default&quot;,   ),   priceX18=to_x18(20000),   amount=to_pow_10(1, 17),   expiration=get_expiration_timestamp(OrderType.POST_ONLY, int(time.time()) + 40),   nonce=gen_order_nonce(),)res = client.market.place_order({&quot;product_id&quot;: product_id, &quot;order&quot;: order})print(&quot;order result:&quot;, res.json(indent=2))```See [Getting Started](https://vertex-protocol.github.io/vertex-python-sdk/getting-started.html) for more.## Running locally1. Clone [github repo](https://github.com/vertex-protocol/vertex-python-sdk)2. Install poetry```$ curl -sSL https://install.python-poetry.org | python3 -```3. Setup a virtual environment and activate it```$ python3 -m venv venv$ source ./venv/bin/activate```4. Install dependencies via `poetry install`5. Setup an `.env` file and set the following envvars```shellCLIENT_MODE='mainnet|testnet|devnet'SIGNER_PRIVATE_KEY=&quot;0x...&quot;LINKED_SIGNER_PRIVATE_KEY=&quot;0x...&quot; # not required```### Run tests```$ poetry run test```### Run sanity checks- `poetry run client-sanity`: runs sanity checks for the top-level client.- `poetry run engine-sanity`: runs sanity checks for the `engine-client`.- `poetry run indexer-sanity`: runs sanity checks for the `indexer-client`.- `poetry run contracts-sanity`: runs sanity checks for the contracts module.### Build DocsTo build the docs locally run:```$ poetry run sphinx-build docs/source docs/build```</longdescription>
</pkgmetadata>