<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AWS Lambda powertools layer## Why this project existsThis is a custom construct that will create AWS Lambda Layer with AWS Powertools for Python or NodeJS library. There are differentways how to create a layer and when working with CDK you need to install the library, create a zip file and wire itcorrectly. With this construct you don't have to care about packaging and dependency management. Create a constructand add it to your function. The construct is an extension of theexisting [`LayerVersion`](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_lambda.LayerVersion.html) constructfrom the CDK library, so you have access to all fields and methods.&gt; ⚠️ **This construct uses docker to build and bundle the dependencies!**See the [API](API.md) for details.```pythonimport {LambdaPowertoolsLayer} from 'cdk-aws-lambda-powertools-layer';import {RuntimeFamily } from &quot;aws-cdk-lib/aws-lambda&quot;;  const powertoolsLayerPython = new LambdaPowertoolsLayer(this, 'TestLayer', {runtimeFamily: RuntimeFamily.PYTHON});  const powertoolsLayerNodeJS = new LambdaPowertoolsLayer(this, 'TestLayer', {runtimeFamily: RuntimeFamily.NODEJS});```Python```pythonfrom cdk_aws_lambda_powertools_layer import LambdaPowertoolsLayerpowertoolsLayer = LambdaPowertoolsLayer(self, 'PowertoolsLayer')```The layer will be created during the CDK `synth` step and thus requires Docker.## InstallTypeSript/JavaScript:```shellnpm i cdk-aws-lambda-powertools-layer```Python:```shellpip install cdk-aws-lambda-powertools-layer```## Usage### PythonA single line will create a layer with powertools for python. For NodeJS you need to specifically set the `runtimeFamily: Runtime.NODEJS` property.```pythonfrom cdk_aws_lambda_powertools_layer import LambdaPowertoolsLayerpowertoolsLayer = LambdaPowertoolsLayer(self, 'PowertoolsLayer')```You can then add the layer to your funciton:```pythonfrom aws_cdk import aws_lambdaaws_lambda.Function(self, 'LambdaFunction',                            code=aws_lambda.Code.from_asset('function'),                            handler='app.handler',                            layers=[powertoolsLayer])```You can specify the powertools version by passing the optional `version` paramter, otherwise the construct will take thelatest version from pypi repository.```pythonLambdaPowertoolsLayer(self, 'PowertoolsLayer', version='1.24.0')```Additionally, powertools have extras depenedncies such asPydantic, [documented here](https://awslabs.github.io/aws-lambda-powertools-python/latest/#lambda-layer). This is notincluded by default, and you have to set this option in the construct definition if you need it:```pythonLambdaPowertoolsLayer(self, 'PowertoolsLayer', include_extras=True)```Full example:```pythonfrom aws_cdk import Stack, aws_lambdafrom cdk_aws_lambda_powertools_layer import LambdaPowertoolsLayerfrom constructs import Constructclass LayerTestStack(Stack):    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:        super().__init__(scope, construct_id, **kwargs)        powertoolsLayer = LambdaPowertoolsLayer(            self, 'PowertoolsLayer', include_extras=True, version='1.24.0')        aws_lambda.Function(self, 'LambdaFunction',                            code=aws_lambda.Code.from_asset('function'),                            handler='app.handler',                            layers=[powertoolsLayer])```### TypeScriptFull example for TypeScript:```pythonimport { Stack, StackProps } from 'aws-cdk-lib';import { Construct } from 'constructs';import { LambdaPowertoolsLayer } from 'cdk-aws-lambda-powertools-layer';import { Code, Function, Runtime } from 'aws-cdk-lib/aws-lambda';import * as path from 'path';export class CdkPowertoolsExampleStack extends Stack {  constructor(scope: Construct, id: string, props?: StackProps) {    super(scope, id, props);    const powertoolsLayer = new LambdaPowertoolsLayer(this, 'TestLayer', {      version: '1.22.0',      includeExtras: true    });    new Function(this, 'LambdaFunction', {      code: Code.fromAsset(path.join('./function')),      handler: 'app.handler',      layers: [powertoolsLayer],    });  }}```</longdescription>
</pkgmetadata>