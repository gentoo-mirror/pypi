<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>logaugment==========Python logging library for augmenting log records with additional information.This library supports Python 2.7.x and Python 3.1+.If you want custom keys in your logged string:.. code:: python    formatter = logging.Formatter(&quot;%(message)s: %(custom_key)s&quot;)then this library allows you to set them easily:.. code:: python    logaugment.set(logger, custom_key='custom_value')    logger.warn(&quot;My message&quot;)    # My message: custom_valueThis allows you to safely make logging calls without getting exceptionsthat those keys are missing. See below if you wish to override the valuefor a particular logging call.Installation============You can install the library with pip:.. code:: bash    $ pip install logaugmentOverview========This library provides three functions:.. code:: python    # Sets the custom keys and values for the logger.    logaugment.set(logger, custom_key='custom_value')    # Adds custom keys and values in addition to those already set.    logaugment.add(logger, custom_key='custom_value')    # Removes all custom keys and values for the logger.    logaugment.reset(logger)You can use `logaugment.set` to specify custom values for a given logger.You can use `logaugment.add` to keep the custom values that were alreadyset and add new ones. If you're redefining a custom key / value then thisvalue will be used instead of the earlier value. You should not repeatedlycall `logaugment.add` just to change the value; in that case it's betterto use `logaugment.set`.You can use `logaugment.reset` to remove all additional values thatwere added using the `logaugment` library.Why?====If you need to add custom keys to your Python logging strings you need to passthem in with each logging call. That is inconvenient so this library allows youto add values just once and they're then available for all logging callsafterwards.Here is a full example:.. code:: python    import logging    import logaugment    logger = logging.getLogger()    handler = logging.StreamHandler()    formatter = logging.Formatter(&quot;%(message)s: %(custom_key)s&quot;)    handler.setFormatter(formatter)    logger.addHandler(handler)    logaugment.add(logger, custom_key='custom_value')    logger.warn(&quot;My message&quot;)    # My message: custom_valueExamples========You can use keywords to specify additional values:.. code:: python    logaugment.add(logger, custom_key='custom_value')    logger.warn(&quot;My message&quot;)    # My message: custom_valueYou can also use a dictionary or subclasses of collections.Mappingto specify the keys / values:.. code:: python    logaugment.add(logger, {'custom_key': 'custom_value'})    logger.warn(&quot;My message&quot;)    # My message: custom_valueYou can also use a function which returns a dictionary:.. code:: python    def process_record(record):        return {'custom_key': record.levelname}    logaugment.add(logger, process_record)    logger.warn(&quot;My message&quot;)    # My message: WARNINGYou can pass an `extra` dictionary in the call which overrides theaugmented data:.. code:: python    logaugment.add(logger, {'custom_key': 'custom_value'})    logger.warn(&quot;My message&quot;, extra={'custom_key': 'extra_value'})    # My message: extra_valueChangelog=========0.1.3 (September 28, 2014)----------------* Added check to ensure at least one argument is provided.0.1.2 (September 18, 2014)--------------------------* Added logaugment.set which calls reset() and add() in order.* Make logaugment.add work for all collections.Mapping instances.0.1.1 (September 8, 2014)-------------------------* Fixed issue where most recent value was not used  in subsequent logaugment.add calls.* Added logaugment.reset to undo all additions using logaugment.0.1 (August 30, 2014)---------------------* Initial release.</longdescription>
</pkgmetadata>