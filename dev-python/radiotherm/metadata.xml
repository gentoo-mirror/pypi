<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Introduction============This is a library for communicating with a wifi-enabled home thermostat made by`Radio Thermostat Company of America &lt;http://radiothermostat.com&gt;`_. At thetime of writing, this includes the CT30, CT80, and the `Filtrete 3M50&lt;http://www.radiothermostat.com/filtrete/products/3M-50/&gt;`_, which is made byRadio Thermostat but rebranded and sold at Home Depot in the US.Radio Thermostat Company of America was not involved in the creation of thissoftware and has not sanctioned or endorsed it in any way.License=======This software is available under a BSD-style license. Please see LICENSE.txt.Author======Michael Hrivnak &lt;mhrivnak@hrivnak.org&gt; is a professional software engineer whois passionate about open source software and reducing energy consumption.Features========- *Auto-Discovery* Your thermostat can be automatically detected, so there is  no need to enter an IP address or domain name.- *Comprehensive* Nearly every documented feature that works is implemented in  this library.- *Python 3 Support* This works in all Python versions from 2.7 up.- *Tested* There is good test coverage using true unit tests.Usage=====Getting Started---------------Import the library, and away we go.    &gt;&gt;&gt; import radiotherm    &gt;&gt;&gt; tstat = radiotherm.get_thermostat('192.168.0.2')    &gt;&gt;&gt; tstat.temp    {'raw': 72.5}If you have only one thermostat on your network, you can do auto-discovery byomitting the address.    &gt;&gt;&gt; tstat = radiotherm.get_thermostat()Human-Readable Values---------------------The value from the thermostat is always returned under the key 'raw'. Forfields that support human-readable values, there will be a key 'human'.    &gt;&gt;&gt; tstat.tmode    {'raw': 2, 'human': 'Cool'}API===The library centers around the Thermostat class, whose attributes are closelyrelated to the attributes defined in Radio Thermostat's API doccumentation. Forexample, /tstat/temp in this case maps to the &quot;temp&quot; attribute on yourThermostat instance.Device Versions---------------Supported models:- CT30 v1.75- CT30 v1.92- CT30 v1.94- CT30 v1.99- CT50 V1.09- CT50 V1.88- CT50 V1.92- CT50 V1.94- CT80 Rev B1 V1.00- CT80 Rev B2 V1.00- CT80 Rev B2 V1.03- CT80 Rev B2 V1.09Since I only have access to the 3M50 (which reports its model as &quot;CT50 V1.94&quot;),that is the model that most development has occured with. Do you have anothermodel? Let me know, and let's collaborate to get it supported!New models that are derivatives of the CT30 or CT80 should be detectedautomatically and basic functionality should work. If you find this is not thecase, it can be supported easily by subclassing either the CT30 or CT80classes, depending on the thermostat model. Most of the API should work on alldevices, but there are apparently some differences that will need to beaccounted for. Long-term, I expect for those common features to be implementedon CommonThermostat, while device-specific deviations will be implemented onsubclasses, such as the CT50v194 class.Supported Features------------------Many of the features documented in the manufacturer's API reference do not seemto work. For example, /tstat/save_energy seems to be broken. This libraryshould not implement those broken features.Also, there are some features, like humidity control, that are only availableon specific devices.Isn't there already a python library?=====================================Yes! Many thanks to Paul Jenning for creating `Python-TStat&lt;https://github.com/pjennings/Python-TStat&gt;`_. The existance of his library wasa substantial motivation for me to buy this device.Why create a new library?-------------------------I quickly identified some areas of Python-TStat that I wanted to improve. Thatled me to realize that there were conceptual differences between that libraryand my idea of what I wanted to use in my own projects.- *Thin wrapper*. I want API libraries to be thin. Python-TStat does automatic  result caching by default, which I personally don't want.- *PEP-8*. I think it's important, and it would have taken a lot of work to  make Python-TStat compliant.- *Testing*. It's important to me that code be tested, and Python-TStat had no  tests. Proper unit-testing is much easier to do when the code was written  from the beginning with it in mind, so that made it more convenient to start  over.- *Simplicity*. My approach to defining the API in python is inspired by  Django's model API, and I think it's resulted in easy-to-use and easy-to-read  code.- *Less Code*. I've implemented a feature set very similar to that of  Python-TStat (minus caching). Not counting comments, doc blocks or blank  lines, this library (at the time of initial release) has 201 lines of code,  whereas Python-TStat has 349.- *Python 3 Support*. This is also important to me. This library supports all  python versions from 2.6 up.All of that said, Python-TStat is a good library that works well. I justdecided that the quickest way for me to achieve the above goals was to startfrom scratch, which was relatively painless since the device's API isn't verycomplicated or large.Release Notes=============2.1.0------ `Shorten http request timeout &lt;https://github.com/mhrivnak/radiotherm/pull/47&gt;`_  for cases where the thermostat does not respond. (@vinnyfuria)- Drop python 2.6 support- Use GitHub Actions instead of Travis-CI (@mhrivnak)2.0.0------ Add support for the LED API (David Rasch)- Allow unknown thermostats to work properly instead of failing (@JerryWorkman,  @craftyguy)- Handle transient thermostat errors (@tubaman)1.4.1-----Minor update to bump version in setup.py1.4---Several new models were added with thanks to the corresponding contributors!CT80 Rev B1 V1.00 - Eamon DoyleCT80 Rev B2 V1.00 - Clayton CraftAdditional changes:- Add 'model' parameter to `get_thermostat()` - skimj- Add program_mode for CT80 - skimj1.3---Several models were added with thanks to the corresponding contributors!CT30 v1.75 - Albert LeeCT30 V1.94 - billy1CT30 v1.99 - Adam FazzariCT50 V1.92 - mdingmanCT80 Rev B2 V1.09 - Steve BauerThanks also to Albert Lee for adding remote temperature support, energy LEDsupport, plus support for the &quot;lock_mode&quot; and &quot;simple_mode&quot;.1.2---Thanks to a contribution from Nick Pegg, the CT80 Rev B2 V1.03 is now supported.Support for `Travis CI &lt;http://travis-ci.org&gt;`_ was added, so all pushes tothe GitHub repository are automatically tested with multiple python versions.1.1---Thanks to community contributions, this library now supports the CT50 V1.09 andCT50 V1.88. No changes were made except to certify that all functionality workswith these models, and add a new subclass for each.1.0---Initial release! This supports only the CT50 V1.94</longdescription>
</pkgmetadata>