<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># openai-kiraOpenai GPT3 ChatBot 框架包，在未公开前快速实现类 ChatGPT接入（公开后就接入chatGPT），打包成依赖的玩具。提供 redis 和 文件数据库两个选择。## Use`pip install -U openai-kira`**init**```pythonimport openai_kira# openai_kira.setting.redisSetting = openai_kira.setting.RedisConfig()openai_kira.setting.dbFile = &quot;openai_msg.db&quot;openai_kira.setting.openaiApiKey = [&quot;key&quot;, &quot;key2&quot;]openai_kira.setting.proxyUrl = None  # &quot;127.0.0.1&quot;# 插件的设置openai_kira.setting.webServerUrlFilter = Falseopenai_kira.setting.webServerStopSentence = [&quot;广告&quot;, &quot;营销号&quot;]```## ExpSEE `./test` for More Exp!```pythonimport asyncioimport openai_kirafrom openai_kira import Chatprint(openai_kira.RedisConfig())openai_kira.setting.openaiApiKey = [&quot;key&quot;]receiver = Chat.Chatbot(    conversation_id=10086,    call_func=None,  # Api_keys.pop_api_key,    start_sequ=&quot;Ai:&quot;,    restart_sequ=&quot;Human:&quot;,)async def main():    response = await receiver.get_chat_response(model=&quot;text-davinci-003&quot;,                                                prompt=&quot;你好&quot;,                                                max_tokens=500,                                                role=&quot;你扮演...&quot;,                                                web_enhance_server={&quot;time&quot;: &quot;&quot;}                                                )    print(response)asyncio.run(main())``````pythonimport asyncioimport openai_kiraprint(openai_kira.RedisConfig())openai_kira.setting.openaiApiKey = [&quot;key&quot;]print(openai_kira.setting.openaiApiKey)async def main():    try:        response = await openai_kira.Completion().create(model=&quot;text-davinci-003&quot;,                                                         prompt=&quot;Say this is a test&quot;,                                                         temperature=0,                                                         max_tokens=20)        # TEST        print(response)        print(type(response))    except Exception as e:        print(e)        if &quot;Incorrect API key provided&quot; in e:            print(&quot;OK&quot;)        else:            print(&quot;NO&quot;)asyncio.run(main())```## Plugin**Table**| plugins   | desc              | value/server                                          | use                                   ||-----------|-------------------|-------------------------------------------------------|---------------------------------------|| `time`    | now time          | `&quot;&quot;`,no need                                          | `明昨今天`....                            || `week`    | week time         | `&quot;&quot;`,no need                                          | `周几` .....                            || `search`  | Web Search        | `[&quot;some.com?searchword={}&quot;]`,must need                | `查询` `你知道` len&lt;80 / end with`?`len&lt;15 || `duckgo`  | Web Search        | `&quot;&quot;`,no need,but need `pip install duckduckgo_search` | `查询` `你知道` len&lt;80 / end with`?`len&lt;15 || `details` | answer with steps | `&quot;&quot;`,no need                                          | Ask for help `how to`                 |## Plugin devThere is a middleware between the memory pool and the analytics that provides some networked retrieval support andoperational support. It can be spiked with services that interface to other Api's.**Prompt Injection**Use `&quot;&quot;` `[]` to emphasise content.### ExpFirst create a file in `openai_kira/Chat/module/plugin` without underscores (`_`) in the file name.**Template**```pythonfrom ..platform import ChatPlugin, PluginConfigfrom ._plugin_tool import PromptToolimport osfrom loguru import loggermodulename = os.path.basename(__file__).strip(&quot;.py&quot;)@ChatPlugin.plugin_register(modulename)class Week(object):    def __init__(self):        self._server = None        self._text = None        self._time = [&quot;time&quot;, &quot;多少天&quot;, &quot;几天&quot;, &quot;时间&quot;, &quot;几点&quot;, &quot;今天&quot;, &quot;昨天&quot;, &quot;明天&quot;, &quot;几月&quot;, &quot;几月&quot;, &quot;几号&quot;,                      &quot;几个月&quot;,                      &quot;天前&quot;]    def requirements(self):        return []    async def check(self, params: PluginConfig) -&gt; bool:        if PromptTool.isStrIn(prompt=params.text, keywords=self._time):            return True        return False    async def process(self, params: PluginConfig) -&gt; list:        _return = []        self._text = params.text        # 校验        if not all([self._text]):            return []        # GET        from datetime import datetime, timedelta, timezone        utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)        bj_dt = utc_dt.astimezone(timezone(timedelta(hours=8)))        now = bj_dt.strftime(&quot;%Y-%m-%d %H:%M&quot;)        _return.append(f&quot;Current Time UTC8 {now}&quot;)        # LOGGER        logger.trace(_return)        return _return````openai_kira/Chat/module/plugin/_plugin_tool.py` provides some tool classes, PR is welcome**Testing**You cannot test directly from within the module package, please run the `openai_kira/Chat/test_module.py` file to testthe module, with the prompt matching check.Alternatively, you can safely use `from loguru import logger` + `logger.trace(_return)` in the module to debug themodule variables and the trace level logs will not be output by the production environment.## 结构```markdown.└── openai_kira├── api│ ├── api_url.json│ ├── api_utils.py│ ├── network.py├── Chat│ ├── __init__.py│ ├── module│ ├── Summer.py│ ├── test_module.py│ ├── text_analysis_tools│ └── vocab.json├── __init__.py├── requirements.txt├── resouce│ ├── completion.py│ ├── __init__.py└── utils├── data.py├── Network.py└── Talk.py```## EULA(end-user-license-agreement)**cn**1. 自行因为不当操作导致的损失。2. 本项目并非官方项目。3. 因为安全事故导致的损失我不负责。4. 拒绝未经授权的专利/软著相关用途。**en**1. the damage caused by improper operation on its own.2. This is not an official project.3. I am not responsible for any damage caused by safety incidents.</longdescription>
</pkgmetadata>