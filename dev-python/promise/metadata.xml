<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Promise=======This is a implementation of Promises in Python. It is a super set ofPromises/A+ designed to have readable, performant code and to providejust the extensions that are absolutely necessary for using promises inPython.Its fully compatible with the `Promises/A+spec &lt;http://promises-aplus.github.io/promises-spec/&gt;`__|travis| |pypi| |coveralls|Installation------------::    $ pip install promiseUsage-----The example below shows how you can load the promise library. It thendemonstrates creating a promise from scratch. You simply call``Promise(fn)``. There is a complete specification for what is returnedby this method in`Promises/A+ &lt;http://promises-aplus.github.com/promises-spec/&gt;`__... code:: python    from promise import Promise    promise = Promise(        lambda resolve, reject: resolve('RESOLVED!')    )API---Before all examples, you will need:.. code:: python    from promise import PromisePromise(resolver)~~~~~~~~~~~~~~~~~This creates and returns a new promise. ``resolver`` must be a function.The ``resolver`` function is passed two arguments:1. ``resolve`` should be called with a single argument. If it is called   with a non-promise value then the promise is fulfilled with that   value. If it is called with a promise (A) then the returned promise   takes on the state of that new promise (A).2. ``reject`` should be called with a single argument. The returned   promise will be rejected with that argument.Class Methods~~~~~~~~~~~~~These methods are invoked by calling ``Promise.methodName``.Promise.resolve(value)^^^^^^^^^^^^^^^^^^^^^^Converts values and foreign promises into Promises/A+ promises. If youpass it a value then it returns a Promise for that value. If you pass itsomething that is close to a promise (such as a jQuery attempt at apromise) it returns a Promise that takes on the state of ``value``(rejected or fulfilled).Promise.reject(value)^^^^^^^^^^^^^^^^^^^^^Returns a rejected promise with the given value.Promise.all(list)^^^^^^^^^^^^^^^^^Returns a promise for a list. If it is called with a single argumentthen this returns a promise for a copy of that list with any promisesreplaced by their fulfilled values. e.g... code:: python    p = Promise.all([Promise.resolve('a'), 'b', Promise.resolve('c')]) \           .then(lambda res: res == ['a', 'b', 'c'])    assert p.get() is TruePromise.cast(obj)^^^^^^^^^^^^^^^^^This function wraps the ``obj`` act as a ``Promise`` if possible. Python``Future``\ s are supported, with a callback to ``promise.done`` whenresolved. Have the same effects as ``Promise.resolve(obj)``.Promise.for\_dict(d)^^^^^^^^^^^^^^^^^^^^A special function that takes a dictionary of promises and turns theminto a promise for a dictionary of values. In other words, this turns andictionary of promises for values into a promise for a dictionary ofvalues.Promise.is\_thenable(obj)^^^^^^^^^^^^^^^^^^^^^^^^^This function checks if the ``obj`` is a ``Promise``, or could be``cast``\ ed.Promise.promisify(func)^^^^^^^^^^^^^^^^^^^^^^^This function wraps the result of calling ``func`` in a ``Promise``instance.Instance Methods~~~~~~~~~~~~~~~~These methods are invoked on a promise instance by calling``myPromise.methodName``promise.then(did\_fulfill, did\_reject)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~This method follows the `Promises/A+spec &lt;http://promises-aplus.github.io/promises-spec/&gt;`__. It explainsthings very clearly so I recommend you read it.Either ``did_fulfill`` or ``did_reject`` will be called and they willnot be called more than once. They will be passed a single argument andwill always be called asynchronously (in the next turn of the eventloop).If the promise is fulfilled then ``did_fulfill`` is called. If thepromise is rejected then ``did_reject`` is called.The call to ``.then`` also returns a promise. If the handler that iscalled returns a promise, the promise returned by ``.then`` takes on thestate of that returned promise. If the handler that is called returns avalue that is not a promise, the promise returned by ``.then`` will befulfilled with that value. If the handler that is called throws anexception then the promise returned by ``.then`` is rejected with thatexception.promise.catch(did\_reject)^^^^^^^^^^^^^^^^^^^^^^^^^^Sugar for ``promise.then(None, did_reject)``, to mirror ``catch`` insynchronous code.promise.done(did\_fulfill, did\_reject)^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^The same semantics as ``.then`` except that it does not return a promiseand any exceptions are re-thrown so that they can be logged (crashingthe application in non-browser environments)Contributing============After cloning this repo, ensure dependencies are installed by running:.. code:: sh    pip install -e &quot;.[test]&quot;After developing, the full test suite can be evaluated by running:.. code:: sh    py.test tests --cov=promise --benchmark-skip # Use -v -s for verbose modeYou can also run the benchmarks with:.. code:: sh    py.test tests --benchmark-onlyStatic type checking--------------------Python type annotations are very useful for making sure we use thelibary the way is intended.You can run ``mypy`` static type checker:.. code:: sh    pip install mypy    mypy promise  --ignore-missing-importsOr ``pyre``:.. code:: sh    pip install pyre-check    pyre --source-directory promise checkNotes=====This package is heavily insipired in`aplus &lt;https://github.com/xogeny/aplus&gt;`__.License-------`MITLicense &lt;https://github.com/syrusakbary/promise/blob/master/LICENSE&gt;`__.. |travis| image:: https://img.shields.io/travis/syrusakbary/promise.svg?style=flat   :target: https://travis-ci.org/syrusakbary/promise.. |pypi| image:: https://img.shields.io/pypi/v/promise.svg?style=flat   :target: https://pypi.python.org/pypi/promise.. |coveralls| image:: https://coveralls.io/repos/syrusakbary/promise/badge.svg?branch=master&amp;service=github   :target: https://coveralls.io/github/syrusakbary/promise?branch=master</longdescription>
</pkgmetadata>