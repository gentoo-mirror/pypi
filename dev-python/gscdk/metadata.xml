<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Go Smart Contracts Development Kit[![PyPi](https://img.shields.io/pypi/v/gscdk.svg)](https://pypi.org/project/gscdk)[![PyPi](https://img.shields.io/pypi/dm/gscdk.svg)](https://pypi.org/project/gscdk)# What a Go Smart Contract looks like?Here is an example```gopackage mainimport (&quot;github.com/uuosio/chain&quot;)//table mytabletype MyData struct {primary uint64 //primaryname    string}//contract mycontracttype MyContract struct {Receiver      chain.NameFirstReceiver chain.NameAction        chain.Name}func NewContract(receiver, firstReceiver, action chain.Name) *MyContract {return &amp;MyContract{receiver, firstReceiver, action}}//action sayhellofunc (c *MyContract) SayHello(name string) {code := c.Receiverpayer := c.Receivermydb := NewMyDataDB(code)primary := uint64(111)if it, data := mydb.GetByKey(primary); it.IsOk() {if data.name != name {chain.Println(&quot;Welcome new friend:&quot;, name)} else {chain.Println(&quot;Welcome old friend&quot;, name)}data.name = namemydb.Update(it, data, payer)} else {chain.Println(&quot;Welcome new friend&quot;, name)data := &amp;MyData{primary, name}mydb.Store(data, payer)}}```# Quick Start[Quick Start](https://colab.research.google.com/github/uuosio/gscdk/blob/main/quickstart/quickstart.ipynb)# Installation```bashpython3 -m pip install gscdk```For the Windows platform:```bashpython -m pip install gscdk```### Upgrade From an Old Version```bashpython3 -m pip install --upgrade gscdk```For the Windows platform:```bashpython -m pip install --upgrade gscdk```# Building Go Smart Contracts CompilerFollow the steps in [Building](./BUILDING.md)That will build the `tinygo` command in the compiler/build directory that supports building Go Smart Contracts.```bashexport PATH=$(pwd)/compiler/build:$PATH```# go-contract## Initializing a project with the &quot;init&quot; subcommandThe &quot;init&quot; command initializes a project with the contract name```go-contract init mycontractcd mycontract```## Generating ABI and Extra Code for Smart Contracts```go-contract gencode```Code generation is also the default option for the &quot;build&quot; command## Building Go Smart Contracts Project#### Compiling the Source Code```bashgo-contract build```#### Disable Code Generation during Building```bashgo-contract build -gen-code=false .```#### Disable Code OptimizationSpecifying `-d` or `--debug` option to disable wasm optimization.```bashgo-contract build -d```# DebuggingInstall `ipyeos` first for debugging.```bashpython3 -m pip install ipyeos```In order to update to a new version, use the following command:```bashpython3 -m pip install -U ipyeos```Then run the debugging server:```basheosdebugger```On Windows, you need to use a docker image to run a debugging server.```bashdocker pull ghcr.io/uuosio/ipyeos:latest```Run the debugging server on the Windows platform:```bashdocker run -it --rm -p 9090:9090 -p 9092:9092 -t ghcr.io/uuosio/ipyeos```![Debugging](https://github.com/uuosio/gscdk/blob/main/images/debugging.gif)# Code Coverage AnalysisUse the following command to generate a code coverage report in html```bashgo-contract buildTEST_COVERAGE=1 go test -coverprofile=coverage.outgo tool cover -html=coverage.out```![Code Coverage](https://github.com/uuosio/gscdk/blob/main/images/code-coverage.png)</longdescription>
</pkgmetadata>