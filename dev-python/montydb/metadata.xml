<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;artwork/logo.png&quot; alt=&quot;drawing&quot; width=&quot;600&quot;/&gt;[![Python package](https://github.com/davidlatwe/montydb/actions/workflows/python-package.yml/badge.svg)](https://github.com/davidlatwe/montydb/actions/workflows/python-package.yml)[![Version](http://img.shields.io/pypi/v/montydb.svg?style=flat)](https://pypi.python.org/pypi/montydb)[![PyPi downloads](https://img.shields.io/pypi/dm/montydb)](https://pypistats.org/packages/montydb)&gt; Monty, Mongo tinified. MongoDB implemented in Python!_Inspired by [TinyDB](https://github.com/msiemens/tinydb) and it's extension [TinyMongo](https://github.com/schapman1974/tinymongo)_## What is it?A pure Python-implemented database that looks and works like [MongoDB](https://www.mongodb.com/).```python&gt;&gt;&gt; from montydb import MontyClient&gt;&gt;&gt; col = MontyClient(&quot;:memory:&quot;).db.test&gt;&gt;&gt; col.insert_many( [{&quot;stock&quot;: &quot;A&quot;, &quot;qty&quot;: 6}, {&quot;stock&quot;: &quot;A&quot;, &quot;qty&quot;: 2}] )&gt;&gt;&gt; cur = col.find( {&quot;stock&quot;: &quot;A&quot;, &quot;qty&quot;: {&quot;$gt&quot;: 4}} )&gt;&gt;&gt; next(cur){'_id': ObjectId('5ad34e537e8dd45d9c61a456'), 'stock': 'A', 'qty': 6}```Most of the CRUD operators have been implemented. You can visit [issue #14](https://github.com/davidlatwe/montydb/issues/14) to see the full list.This project is tested against:- MongoDB: 3.6, 4.0, 4.2 (4.4 on the wayüí¶)- Python: 3.7, 3.8, 3.9, 3.10, 3.11## Install```shpip install montydb```- optional, to use *real* `bson` in operation (`pymongo` will be installed)    _For minimum requirements, `montydb` ships with it's own fork of `ObjectId` in `montydb.types`, so you may ignore this option if `ObjectId` is all you need from `bson`_    ```sh    pip install montydb[bson]    ```- optional, to use lightning memory-mapped db as storage engine    ```sh    pip install montydb[lmdb]    ```## Storageü¶Ñ Available storage engines:* in-memory* flat-file* sqlite* lmdb (lightning memory-mapped db)Depending on which one you use, you may have to configure the storage engine before you start.&gt; ‚ö†Ô∏è&gt;&gt; The configuration process only required on repository creation or modification. And, one repository (the parent level of databases) can only assign one storage engine.To configure a storage, see flat-file storage for example:```pythonfrom montydb import set_storage, MontyClientset_storage(    # general settings        repository=&quot;/db/repo&quot;,  # dir path for database to live on disk, default is {cwd}    storage=&quot;flatfile&quot;,     # storage name, default &quot;flatfile&quot;    mongo_version=&quot;4.0&quot;,    # try matching behavior with this mongodb version    use_bson=False,         # default None, and will import pymongo's bson if None or True    # any other kwargs are storage engine settings.        cache_modified=10,       # the only setting that flat-file have)# ready to go```Once that done, there should be a file named `monty.storage.cfg` saved in your db repository path. It would be `/db/repo` for the above examples.## ConfigurationNow let's moving on to each storage engine's config settings.### üåü In-Memory  `memory` storage does not need nor have any configuration, nothing saved to disk.```pythonfrom montydb import MontyClientclient = MontyClient(&quot;:memory:&quot;)# ready to go```### üî∞ Flat-File  `flatfile` is the default on-disk storage engine.```pythonfrom montydb import set_storage, MontyClientset_storage(&quot;/db/repo&quot;, cache_modified=5)  # optional stepclient = MontyClient(&quot;/db/repo&quot;)  # use current working dir if no path given# ready to go```FlatFile config:```ini[flatfile]cache_modified: 0  # how many document CRUD cached before flush to disk.```### üíé SQLite  `sqlite` is NOT the default on-disk storage, need configuration first before getting client.&gt; Pre-existing sqlite storage file which saved by `montydb&lt;=1.3.0` is not read/writeable after `montydb==2.0.0`.```pythonfrom montydb import set_storage, MontyClientset_storage(&quot;/db/repo&quot;, storage=&quot;sqlite&quot;)  # required, to set sqlite as engineclient = MontyClient(&quot;/db/repo&quot;)# ready to go```SQLite config:```ini[sqlite]journal_mode: WAL```SQLite write concern:```pythonclient = MontyClient(&quot;/db/repo&quot;,                     synchronous=1,                     automatic_index=False,                     busy_timeout=5000)```### üöÄ LMDB (Lightning Memory-Mapped Database)`lightning` is NOT the default on-disk storage, need configuration first before get client.&gt; Newly implemented.```pythonfrom montydb import set_storage, MontyClientset_storage(&quot;/db/repo&quot;, storage=&quot;lightning&quot;)  # required, to set lightning as engineclient = MontyClient(&quot;/db/repo&quot;)# ready to go```LMDB config:```ini[lightning]map_size: 10485760  # Maximum size database may grow to.```## URIOptionally, You could prefix the repository path with montydb URI scheme.```pythonclient = MontyClient(&quot;montydb:///db/repo&quot;)```## Utilities&gt; Pymongo `bson` may required.* #### `montyimport`  Imports content from an Extended JSON file into a MontyCollection instance.  The JSON file could be generated from `montyexport` or `mongoexport`.  ```python  from montydb import open_repo, utils    with open_repo(&quot;foo/bar&quot;):      utils.montyimport(&quot;db&quot;, &quot;col&quot;, &quot;/path/dump.json&quot;)    ```* #### `montyexport`  Produces a JSON export of data stored in a MontyCollection instance.  The JSON file could be loaded by `montyimport` or `mongoimport`.  ```python  from montydb import open_repo, utils    with open_repo(&quot;foo/bar&quot;):      utils.montyexport(&quot;db&quot;, &quot;col&quot;, &quot;/data/dump.json&quot;)    ```* #### `montyrestore`  Loads a binary database dump into a MontyCollection instance.  The BSON file could be generated from `montydump` or `mongodump`.  ```python  from montydb import open_repo, utils    with open_repo(&quot;foo/bar&quot;):      utils.montyrestore(&quot;db&quot;, &quot;col&quot;, &quot;/path/dump.bson&quot;)    ```* ####  `montydump`  Creates a binary export from a MontyCollection instance.  The BSON file could be loaded by `montyrestore` or `mongorestore`.  ```python  from montydb import open_repo, utils    with open_repo(&quot;foo/bar&quot;):      utils.montydump(&quot;db&quot;, &quot;col&quot;, &quot;/data/dump.bson&quot;)    ```* #### `MongoQueryRecorder`  Record MongoDB query results in a period of time.  *Requires to access database profiler.*  This works via filtering the database profile data and reproduce the queries of `find` and `distinct` commands.  ```python  from pymongo import MongoClient  from montydb.utils import MongoQueryRecorder    client = MongoClient()  recorder = MongoQueryRecorder(client[&quot;mydb&quot;])  recorder.start()    # Make some queries or run the App...  recorder.stop()  recorder.extract()  {&lt;collection_1&gt;: [&lt;doc_1&gt;, &lt;doc_2&gt;, ...], ...}    ```* ####  `MontyList`  Experimental, a subclass of `list`, combined the common CRUD methods from Mongo's Collection and Cursor.  ```python  from montydb.utils import MontyList    mtl = MontyList([1, 2, {&quot;a&quot;: 1}, {&quot;a&quot;: 5}, {&quot;a&quot;: 8}])  mtl.find({&quot;a&quot;: {&quot;$gt&quot;: 3}})  MontyList([{'a': 5}, {'a': 8}])    ```## Developmentmontydb uses [Poetry](https://python-poetry.org/) to make it easy manage dependencies and set up the development environment. ### Initial setupAfter cloning the repository, you need to run the following commands to set up the development environment:```bashmake install```This will create a virtual environment and download the required dependencies.### updating dependenciesTo keep dependencies updated after git operations such as local updates or merging changes into local dev branch```bashmake update```### MakefileA makefile is used to simplify common operations such as updating, testing, and deploying etc.```bashmake or make helpinstall                        install all dependencies locallyupdate                         update project dependencies locally (run after git update)ci                             Run all checks (codespell, lint, bandit, test)test                           Run testslint                           Run linting with flake8codespell                      Find typos with codespellbandit                         Run static security analysis with banditbuild                          Build project using poetryclean                          Clean project```### Run mongo docker imageMost of our tests compare montydb CRUD results against real mongodb instance, therefore we must have a runningmongodb before testing.For example, if we want to test against mongo 4.4:```shelldocker run --name monty-4.4 -p 30044:27017 -d mongo:4.4```### Tests```shellpoetry run pytest --storage {storage engin name} --mongodb {mongo instance url} [--use-bson]```Example:```shellpoetry run pytest --storage memory --mongodb localhost:30044 --use-bson```## Why did I make this?Mainly for personal skill practicing and fun.I work in the VFX industry and some of my production needs (mostly edge-case) requires to run in a limited environment (e.g. outsourced render farms), which may have problem to run or connect a MongoDB instance. And I found this project really helps.---&lt;p align=center&gt;    &lt;a href=&quot;https://jb.gg/OpenSource&quot;&gt;&lt;i&gt;This project is supported by JetBrains&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;artwork/icon.png&quot; alt=&quot;drawing&quot; width=&quot;100&quot;/&gt;  &amp;nbsp;&amp;nbsp;    &lt;img src=&quot;artwork/jetbrains.png&quot; alt=&quot;drawing&quot; width=&quot;100&quot;/&gt;&lt;/p&gt;</longdescription>
</pkgmetadata>