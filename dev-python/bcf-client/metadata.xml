<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># bcfA simple Python implementation of BCF. The data model is described in `data.py`.Manipulation of BCF-XML is available via `bcfxml.py` and manipulation of BCF-APIis available via `bcfapi.py`.- BCF-XML version 2.1: Fully supported- BCF-API version 2.1: Not supported, will probably tackle this after BCF-API v3.0- BCF-XML version 3.0: Almost fully supported, except for the documents module- BCF-API version 3.0: Almost fully supported, except for two requests.## bcfxmlThe `bcfxml` module lets you interact with the BCF-XML standard.```pythonfrom bcf import bcfxml# Load a projectbcfxml = bcfxml.load(&quot;/path/to/file.bcf&quot;)# The project is also stored in the module# project == bcfxml.projectproject=bcfxml.get_project()print(project.name)# To edit a project, just modify the object directlybcfxml.project.name = &quot;New name&quot;bcfxml.edit_project()# The BCF file is extracted to this temporary directoryprint(bcfxml.filepath)# Get a dictionary of topicstopics = bcfxml.get_topics()# Note: topics == bcfxml.topicsfor guid, topic in bcfxml.topics.items():    print(&quot;Topic guid is&quot;, guid)    print(&quot;Topic guid is&quot;, topic.guid)    print(&quot;Topic title is&quot;, topic.title)    # Fetch extra data about a topic    header = bcfxml.get_header(guid)    comments = bcfxml.get_comments(guid)    viewpoints = bcfxml.get_viewpoints(guid)    # Note: comments == topic.comments, and so on    for comment_guid, comment in comments.items():        print(comment_guid)        print(comment.comment)        print(comment.author)# Get a particular topictopic = bcfxml.get_topic(guid)# Modify a topictopic.title = &quot;New title&quot;bcfxml.edit_topic(topic)```## bcfapiThe `bcfapi` module lets you interact with the BCF-API standard.```pythonfrom bcf.v3.bcfapi import FoundationClient, BcfClientfoundation_client = FoundationClient(&quot;YOUR_CLIENT_ID&quot;, &quot;YOUR_CLIENT_SECRET&quot;, &quot;OPENCDE_BASEURL&quot;)auth_methods = foundation_client.get_auth_methods()# Our library currently only implements the authorization_code flowif &quot;authorization_code&quot; in auth_methods:    foundation_client.login()bcf_client = BcfClient(foundation_client)versions = foundation_client.get_versions()for version in versions:if &quot;3.0&quot; in versions:    if version[&quot;api_id&quot;] == &quot;bcf&quot; and version[&quot;version_id&quot;] == &quot;3.0&quot;:        bcf_client.set_version(version)data = bcf_client.get_projects()print(data)project_id = data[0][&quot;project_id&quot;]print(project_id)data = bcf_client.get_project(project_id)print(data)data = bcf_client.get_extensions(project_id)print(data)```## Todo ListThe remaining work that needs to be completed in `bcfxml.py` and `bcfapi.py`.- For `bcfxml.py` two xsds support is remaining namely 'documents.xsd`and`extensions.xsd`.- For `bcfapi.py` two requests that are `get_topics` and `get_comments` are remaining.</longdescription>
</pkgmetadata>