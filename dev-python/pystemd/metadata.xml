<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pystemd=======[![Continuous Integration](https://github.com/systemd/pystemd/workflows/Continuous%20Integration/badge.svg?event=push)](https://github.com/systemd/pystemd/actions) [![Matrix](https://img.shields.io/matrix/pystemd:matrix.org)](https://matrix.to/#/#pystemd:matrix.org)This library allows you to talk to systemd over dbus from python, withoutactually thinking that you are talking to systemd over dbus. This allows you toprogrammatically start/stop/restart/kill and verify services status fromsystemd point of view, avoiding executing `subprocess.Popen(['systemctl', ...`and then parsing the output to know the result.Show don't tell---------------In software as in screenwriting, it's better to show how things work instead oftell. So this is how you would use the library from a interactive shell.    In [1]: from pystemd.systemd1 import Unit    In [2]: unit = Unit(b'postfix.service')    In [3]: unit.load()Note: you need to call `unit.load()` because by default `Unit` will not load theunit information as that would require do some IO (and we dont like doing io on a class constructor). You can autoload the unit by `Unit(b'postfix.service', _autoload=True)` or using the unit as a contextmanager like `with Unit(b'postfix.service'): ...`Once the unit is loaded, you can interact with it, you can do by accessing itssystemd's interfaces:    In [4]: unit.Unit.ActiveState    Out[4]: b'active'    In [5]: unit.Unit.StopWhenUnneeded    Out[5]: False    In [6]: unit.Unit.Stop(b'replace') # require privilege account    Out[6]: b'/org/freedesktop/systemd1/job/6601531'    In [7]: unit.Unit.ActiveState    Out[7]: b'inactive'    In [8]: unit.Unit.SubState    Out[8]: b'running'    In [9]: unit.Unit.Start(b'replace') # require privilege account    Out[9]: b'/org/freedesktop/systemd1/job/6601532'    In [10]: unit.Unit.ActiveState    Out[10]: b'active'    In [11]: unit.Service.GetProcesses() # require systemd v238 and above    Out[11]:    [(b'/system.slice/postfix.service',        1754222,        b'/usr/libexec/postfix/master -w'),     (b'/system.slice/postfix.service', 1754224, b'pickup -l -t fifo -u'),     (b'/system.slice/postfix.service', 1754225, b'qmgr -l -t fifo -u')]    In [12]: unit.Service.MainPID    Out[12]: 1754222The `systemd1.Unit` class provides shortcuts for the interfaces in the systemdnamespace, as you se above, we have  Service (org.freedesktop.systemd1.Service)and Unit (org.freedesktop.systemd1.Unit). Others can be found in`unit._interfaces` as:```In [12]: unit._interfacesOut[12]:{'org.freedesktop.DBus.Introspectable': &lt;org.freedesktop.DBus.Introspectable of /org/freedesktop/systemd1/unit/postfix_2eservice&gt;, 'org.freedesktop.DBus.Peer': &lt;org.freedesktop.DBus.Peer of /org/freedesktop/systemd1/unit/postfix_2eservice&gt;, 'org.freedesktop.DBus.Properties': &lt;org.freedesktop.DBus.Properties of /org/freedesktop/systemd1/unit/postfix_2eservice&gt;, 'org.freedesktop.systemd1.Service': &lt;org.freedesktop.systemd1.Service of /org/freedesktop/systemd1/unit/postfix_2eservice&gt;, 'org.freedesktop.systemd1.Unit': &lt;org.freedesktop.systemd1.Unit of /org/freedesktop/systemd1/unit/postfix_2eservice&gt;} In [13]: unit.Service Out[13]: &lt;org.freedesktop.systemd1.Service of /org/freedesktop/systemd1/unit/postfix_2eservice&gt;```Each interface has methods and properties, that can access directly as`unit.Service.MainPID`, the list of properties and methods is in `.properties`and `.methods` of each interface.The above code operates on root user units by default. To operate on userspace units, explicitly pass in a user mode DBus instance:```from pystemd.dbuslib import DBuswith DBus(user_mode=True) as bus:    unit = Unit(b&quot;postfix.service&quot;, bus=bus)    unit.load()```Alongside the `systemd1.Unit`, we also have a `systemd1.Manager`, that allowsyou to interact with systemd manager.```In [14]: from pystemd.systemd1 import ManagerIn [15]: manager = Manager()In [16]: manager.load()In [17]: manager.Manager.ListUnitFiles()Out[17]:...(b'/usr/lib/systemd/system/rhel-domainname.service', b'disabled'), (b'/usr/lib/systemd/system/fstrim.timer', b'disabled'), (b'/usr/lib/systemd/system/getty.target', b'static'), (b'/usr/lib/systemd/system/systemd-user-sessions.service', b'static'),...In [18]: manager.Manager.ArchitectureOut[18]: b'x86-64'In [19]: manager.Manager.VirtualizationOut[19]: b'kvm'```Extras:-------We also include `pystemd.run`, the spiritual port of systemd-runto python. [example of usage](_docs/pystemd.run.md):```python# run this as root&gt;&gt;&gt; import pystemd.run, sys&gt;&gt;&gt; pystemd.run(    [b'/usr/bin/psql', b'postgres'],    machine=b'db1',    user=b'postgres',    wait=True,    pty=True,    stdin=sys.stdin, stdout=sys.stdout,    env={b'PGTZ': b'UTC'})```will open a postgres interactive prompt in a local nspawn-machine.You also get an interface to `sd_notify` in the form of `pystemd.daemon.notify` [docs](_docs/daemon.md).```python# run this as root&gt;&gt;&gt; import pystemd.daemon&gt;&gt;&gt; pystemd.daemon.notify(False, ready=1, status='Gimme! Gimme! Gimme!')```And access to listen file descriptors for socket activation scripts.```python# run this as root&gt;&gt;&gt; import pystemd.daemon&gt;&gt;&gt; pystemd.daemon.LISTEN_FDS_START3&gt;&gt;&gt; pystemd.daemon.listen_fds()1 # you normally only open 1 socket```And access if watchdog is enabled and ping it.```pythonimport timeimport pystemd.daemonwatchdog_usec = pystemd.daemon.watchdog_enabled()watchdog_sec = watchdog_usec/10**6if not watchdog_usec:  print(f'watchdog was not enabled!')for i in range(20):    pystemd.daemon.notify(False, watchdog=1, status=f'count {i+1}')    time.sleep(watchdog_sec*0.5)print('sleeping for 30 seconds')time.sleep(watchdog_sec*2)print('you will never reach me in a watchdog env')```We also provide basic journal interaction with `pystemd.journal` [docs](_docs/journal.md)```pythonimport loggingimport pystemd.journalpystemd.journal.sendv(  f&quot;PRIORITY={logging.INFO}&quot;,  MESSAGE=&quot;everything is awesome&quot;,  SYSLOG_IDENTIFIER=&quot;tegan&quot;)```will result in the message (shorten for sake of example).```json{  &quot;SYSLOG_IDENTIFIER&quot; : &quot;tegan&quot;,  &quot;PRIORITY&quot; : &quot;20&quot;,  &quot;MESSAGE&quot; : &quot;everything is awesome&quot;,  ...}```Install-------So you like what you see, the simplest way to install pystemd is by:```bash$ pip install pystemd```pystemd is packaged in a few distros like Fedora and Debian. As of Fedora 32 and in EPEL as of EPEL 8.It can be installed with:```bash$ sudo dnf install python3-pystemd # fedora$ sudo apt install python3-pystemd # debian```which will also take care of installing any required dependencies. Keep in mind that most distros manage their own repos and version, and you may be getting old versions.Build  from source------------------you'll need to have:* Python headers: Just use your distro's package (e.g. python-dev).* systemd headers: Chances are you already have this. Normally, it is called`libsystemd-dev` or `systemd-devel`. You need to have at least v237.Please note that CentOS 7 ships with version 219. To work around this, please read  [this](_docs/centos7.md).* systemd library: check if `pkg-config --cflags --libs libsystemd` returns`-lsystemd` if not you can install `systemd-libs` or`libsystemd` depending on your distribution, version needs to be at leastv237.* gcc: or any compiler that `setup.py` will accept.* [`pkg-config`](https://www.freedesktop.org/wiki/Software/pkg-config/) command. Depending on your distro, the package is called &quot;pkg-config&quot;, &quot;pkgconfig&quot; or a compatible substitute like &quot;pkgconf&quot;if you want to install from source then after you clone this repo all you need to do its `pip install . `In addition to previous requirements you'll need:  * setuptools: Just use your distro's package (e.g. python-setuptools).  * Cython: at least version 0.21a1, just pip install it or use the official  installation guide from cython homepage to get latest   http://cython.readthedocs.io/en/latest/src/quickstart/install.html.Learning more-------------This project has been covered in a number of conference talks:* [Using systemd in high level languages](https://www.youtube.com/watch?v=lBQgMGPxqNo) at [All Systems Go! 2018](https://all-systems-go.io)* [systemd: why you should care as a Python developer](https://www.youtube.com/watch?v=ZUX9Fx8Rwzg) at [PyCon 2018](https://us.pycon.org/2018/)* [Better security for Python with systemd](https://www.youtube.com/watch?v=o-OqslA5dkw) at [Pyninsula #10](https://www.meetup.com/Pyninsula-Python-Peninsula-Meetup/events/244939632/)A [Vagrant-based demo](https://github.com/aleivag/pycon2018) was also developedfor PyCon 2018.License-------pystemd is licensed under LGPL 2.1 or later.</longdescription>
</pkgmetadata>