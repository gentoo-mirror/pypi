<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CluedIn[cluedin](https://pypi.org/project/cluedin/) is a Python client for [CluedIn](https://www.cluedin.com/) API.## InstallationFrom [PyPi](https://pypi.org/project/cluedin/):```shellpip install cluedin```## Quick start### CluedIn context configurationCreate a JSON file with context configuration to your CluedIn instance:In this file, parameters have the following meaning:- `protocol` - `http` if your CluedIn instance is not secured with a TLS certicate. Otherwise, `https` by default.- `domain` – CluedIn instance domain without the Organization prefix.- `org_name` – the name of Organization (a.k.a. Organization prefix).- `user_email` – the user's email.- `user_password` – the user's password.- `verify_tls` – `false`, if an unknown CA signs the TLS certificate. Otherwise, `true` by default.Here is an example of a file for a CluedIn instance running locally from a [Home](https://cluedin-io.github.io/Home/) repository:```json{  &quot;protocol&quot;: &quot;http&quot;,  &quot;domain&quot;: &quot;127.0.0.1.nip.io&quot;,  &quot;org_name&quot;: &quot;foobar&quot;,  &quot;user_email&quot;: &quot;admin@foobar.com&quot;,  &quot;user_password&quot;: &quot;Foobar23!&quot;}```We add the protocol, but we can skip this parameter if the URL starts with `https`. Likewise, we can skip `verify_tls` because it only makes sense for HTTPs URLs.Alternatively, to provide email and password, you can obtain an API access token from CluedIn UI and provide it in the file:```json{  &quot;protocol&quot;: &quot;http&quot;,  &quot;domain&quot;: &quot;127.0.0.1.nip.io&quot;,  &quot;org_name&quot;: &quot;foobar&quot;,  &quot;access_token&quot;: &quot;...&quot;}```When the configuration file exists, you can export its path to an environment variable:```shellexport CLUEDIN_CONTEXT=~/.cluedin/home.json```Now, you can load this file from your Python code and get an access token (if not already provided):```pythonimport cluedincontext = Context.from_json_file(os.environ['CLUEDIN_CONTEXT'])context.get_token()```You could also do it without the context file:```pythoncontext = {    &quot;protocol&quot;: &quot;http&quot;,    &quot;domain&quot;: &quot;127.0.0.1.nip.io&quot;,    &quot;org_name&quot;: &quot;foobar&quot;,    &quot;user_email&quot;: &quot;admin@foobar.com&quot;,    &quot;user_password&quot;: &quot;Foobar23!&quot;}context = Context.from_dict(context)context.get_token()```### GraphQLGet entities:```pythoncontext = Context.from_json_file(os.environ['CLUEDIN_CONTEXT'])context.get_token()query = &quot;&quot;&quot;    query searchEntities($cursor: PagingCursor, $query: String, $pageSize: Int) {      search(query: $query, sort: DATE, cursor: $cursor, pageSize: $pageSize) {        totalResults        cursor        entries {          id          name          entityType        }      }    }&quot;&quot;&quot;variables = {    &quot;query&quot;: &quot;*&quot;,    &quot;pageSize&quot;: 10_000}# it's important to request cursor in your GraphQL query,# so cluedin.gql.entries would be able to request and return all pagesentities = cluedin.gql.entries(context, query, variables):```## API### Environment- `CLUEDIN_REQUEST_TIMEOUT_IN_SECONDS` - CluedIn API request timeout (in seconds). If not set, then it defaults to `300` (5 minutes).### Context- `Context.from_dict(cls, context_dict: dict) -&gt; Context` – creates a new `Context` object from a `dict`.- `Context.from_json_file(file_path: str) -&gt; Context` – creates a new `Context` object from a JSON-file.### Account- `cluedin.account.get_users(context: Context, org_id: str = None) -&gt; list` – returns all users for Organization.- `cluedin.account.is_organization_available_response(context: Context, org_name: str) -&gt; dict` – checks if a given Organization name is available. This method returns a JSON-response serialized into a `dict`.- `cluedin.account.is_organization_available(context: Context, org_name: str) -&gt; bool` – checks if a given Organization name is available. Returns a Boolean.- `cluedin.account.is_user_available_response(context: Context, user_email: str, org_name: str) -&gt; dict` – checks, if a user with a given email can be created or this email is already reserved. This method returns a JSON-response serialized into a `dict`.- `cluedin.account.is_user_available(context: Context, user_email: str, org_name: str) -&gt; bool` – checks, if a user with a given email can be created or this email is already reserved. This method returns a JSON-response serialized into a `dict`. Returns a Boolean.- `cluedin.account.get_invitation_code(context: Context, email: str) -&gt; str` – returns an invitation code for a given email.- `cluedin.account.create_organization(context: Context, user_email: str, password: str, org_name: str, org_sub_domain: str = None, email_domain: str = None, allow_email_domain_signup: bool = True, new_account_access_key: str = None) -&gt; dict` - creates a new Organization. This method returns a JSON-response serialized into a `dict`.- `cluedin.account.create_user(context: Context, user_email: str, user_password: str) -&gt; requests.models.Response` – creates a new user. This method returns `requests.models.Response`.- `cluedin.account.create_admin_user(context: Context, user_email: str, user_password: str) -&gt; requests.models.Response` – creates a new admin user. This method returns `requests.models.Response`.- `cluedin.account.get_user(context: Context, user_id: str = None) -&gt; dict` – returns a user by ID. If `user_id` is nor provided, the current user is returned. This method returns a JSON-response serialized into a `dict`.### Entity- `cluedin.entity.get_entity_blob(context: Context, entity_id: str) -&gt; str` – returns an entity blob by ID.- `cluedin.entity.get_entity_as_clue(context: Context, entity_id: str) -&gt; str` – returns an entity as a clue by ID.### GraphQL- `cluedin.gql.gql(context: Context, query: str, variables: dict = None) -&gt; dict` – sends a GraphQL request and returns a response.- `cluedin.gql.org_gql(context: Context, query: str, variables: dict = None) -&gt; dict` – sends a GraphQL request to Organization endpoint and returns a response.- `cluedin.gql.entries(context: Context, query: str, variables: dict = None) -&gt; list` – returns entries from a GraphQL search query. If cursor is requested in the GraphQL query (see the example above and tests), then it proceeds to next pages to return all results.### JWT- `cluedin.jwt.get_jwt_payload(jwt: str) -&gt; dict` – parses a JWT (JSON Web Token, a.k.a. access token or API token), and returns its payload serialized into a `dict`.### Public API- `cluedin.public.post_clue(context: Context, clue: str, content_type: str = 'application/xml') -&gt; str` – posts a clue in XML or JSON format. This method returns an operation result as a string.- `cluedin.public.restore_user_entities(context: Context) -&gt; list` – if you accidentally deleted `/Infrastructure/User` entities, this method gets all users and restores entities for those who miss them.### Vocabulary- `cluedin.vocab.get_vocab_keys(context: Context) -&gt; list` – gets all vocabulary keys.</longdescription>
</pkgmetadata>