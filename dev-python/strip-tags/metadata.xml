<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># strip-tags[![PyPI](https://img.shields.io/pypi/v/strip-tags.svg)](https://pypi.org/project/strip-tags/)[![Changelog](https://img.shields.io/github/v/release/simonw/strip-tags?include_prereleases&amp;label=changelog)](https://github.com/simonw/strip-tags/releases)[![Tests](https://github.com/simonw/strip-tags/workflows/Test/badge.svg)](https://github.com/simonw/strip-tags/actions?query=workflow%3ATest)[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/simonw/strip-tags/blob/master/LICENSE)Strip tags from HTML, optionally from areas identified by CSS selectorsSee [llm, ttok and strip-tagsâ€”CLI tools for working with ChatGPT and other LLMs](https://simonwillison.net/2023/May/18/cli-tools-for-llms/) for more on this project.## InstallationInstall this tool using `pip`:```bashpip install strip-tags```## UsagePipe content into this tool to strip tags from it:```bashcat input.html | strip-tags &gt; output.txt````Or pass a filename:```bashstrip-tags -i input.html &gt; output.txt```To run against just specific areas identified by CSS selectors:```bashstrip-tags '.content' -i input.html &gt; output.txt```This can be called with multiple selectors:```bashcat input.html | strip-tags '.content' '.sidebar' &gt; output.txt```To return just the first element on the page that matches one of the selectors, use `--first`:```bashcat input.html | strip-tags .content --first &gt; output.txt```To remove content contained by specific selectors - e.g. the `&lt;nav&gt;` section of a page, use `-r` or `--remove`:```bashcat input.html | strip-tags -r nav &gt; output.txt```To minify whitespace - reducing multiple space and tab characters to a single space, and multiple newlines and spaces to a maximum of two newlines - add `-m` or `--minify`:```bashcat input.html | strip-tags -m &gt; output.txt```You can also run this command using `python -m` like this:```bashpython -m strip_tags --help```### Keeping the markup for specified tagsWhen passing content to a language model, it can sometimes be useful to leave in a subset of HTML tags - `&lt;h1&gt;This is the heading&lt;/h1&gt;` for example - to provide extra hints to the model.The `-t/--keep-tag` option can be passed multiple times to specify tags that should be kept.This example looks at the `&lt;header&gt;` section of https://datasette.io/ and keeps the tags around the list items and `&lt;h1&gt;` elements:```curl -s https://datasette.io/ | strip-tags header -t h1 -t li``````html&lt;li&gt;Uses&lt;/li&gt;&lt;li&gt;Documentation Docs&lt;/li&gt;&lt;li&gt;Tutorials&lt;/li&gt;&lt;li&gt;Examples&lt;/li&gt;&lt;li&gt;Plugins&lt;/li&gt;&lt;li&gt;Tools&lt;/li&gt;&lt;li&gt;News&lt;/li&gt;&lt;h1&gt;    Datasette&lt;/h1&gt;Find stories in data```All attributes will be removed from the tags, except for the `id=` and `class=` attribute since those may provide further useful hints to the language model.The `href` attribute on links, the `alt` attribute on images and the `name` and `value` attributes on `meta` tags are kept as well.You can also specify a bundle of tags. For example, `strip-tags -t hs` will keep the tag markup for all levels of headings.The following bundles can be used:&lt;!-- [[[cogimport cogfrom strip_tags.lib import BUNDLESlines = []for name, tags in BUNDLES.items():    lines.append(&quot;- `-t {}`: {}&quot;.format(name, &quot;, &quot;.join(&quot;`&lt;{}&gt;`&quot;.format(tag) for tag in tags)))cog.out(&quot;\n&quot;.join(lines))]]] --&gt;- `-t hs`: `&lt;h1&gt;`, `&lt;h2&gt;`, `&lt;h3&gt;`, `&lt;h4&gt;`, `&lt;h5&gt;`, `&lt;h6&gt;`- `-t metadata`: `&lt;title&gt;`, `&lt;meta&gt;`- `-t structure`: `&lt;header&gt;`, `&lt;nav&gt;`, `&lt;main&gt;`, `&lt;article&gt;`, `&lt;section&gt;`, `&lt;aside&gt;`, `&lt;footer&gt;`- `-t tables`: `&lt;table&gt;`, `&lt;tr&gt;`, `&lt;td&gt;`, `&lt;th&gt;`, `&lt;thead&gt;`, `&lt;tbody&gt;`, `&lt;tfoot&gt;`, `&lt;caption&gt;`, `&lt;colgroup&gt;`, `&lt;col&gt;`- `-t lists`: `&lt;ul&gt;`, `&lt;ol&gt;`, `&lt;li&gt;`, `&lt;dl&gt;`, `&lt;dd&gt;`, `&lt;dt&gt;`&lt;!-- [[[end]]] --&gt;## As a Python libraryYou can use `strip-tags` from Python code too. The function signature looks like this:&lt;!-- [[[cogimport astmodule = ast.parse(open(&quot;strip_tags/lib.py&quot;).read())strip_tags = [    fn for fn in module.body    if getattr(fn, 'name', None) == 'strip_tags'][0]code = ast.unparse(strip_tags)defline = code.split(&quot;\n&quot;)[0]code = (    ',\n    '.join(defline.split(', ')).replace(&quot;) -&gt;&quot;, &quot;\n) -&gt;&quot;).replace(&quot;strip_tags(&quot;, &quot;strip_tags(\n    &quot;))cog.out(&quot;```python\n{}\n```&quot;.format(code))]]] --&gt;```pythondef strip_tags(    input: str,    selectors: Optional[Iterable[str]]=None,    *,    removes: Optional[Iterable[str]]=None,    minify: bool=False,    first: bool=False,    keep_tags: Optional[Iterable[str]]=None,    all_attrs: bool=False) -&gt; str:```&lt;!-- [[[end]]] --&gt;Here's an example:```pythonfrom strip_tags import strip_tagshtml = &quot;&quot;&quot;&lt;div&gt;&lt;h1&gt;This has tags&lt;/h1&gt;&lt;p&gt;And whitespace too&lt;/p&gt;&lt;/div&gt;Ignore this bit.&quot;&quot;&quot;stripped = strip_tags(html, [&quot;div&quot;], minify=True, keep_tags=[&quot;h1&quot;])print(stripped)```Output:```&lt;h1&gt;This has tags&lt;/h1&gt;And whitespace too```## strip-tags --help&lt;!-- [[[cogimport cogfrom strip_tags import clifrom click.testing import CliRunnerrunner = CliRunner()result = runner.invoke(cli.cli, [&quot;--help&quot;])help = result.output.replace(&quot;Usage: cli&quot;, &quot;Usage: strip-tags&quot;)cog.out(    &quot;```\n{}\n```&quot;.format(help))]]] --&gt;```Usage: strip-tags [OPTIONS] [SELECTORS]...  Strip tags from HTML, optionally from areas identified by CSS selectors  Example usage:      cat input.html | strip-tags &gt; output.txt  To run against just specific areas identified by CSS selectors:      cat input.html | strip-tags .entry .footer &gt; output.txtOptions:  --version             Show the version and exit.  -r, --remove TEXT     Remove content in these selectors  -i, --input FILENAME  Input file  -m, --minify          Minify whitespace  -t, --keep-tag TEXT   Keep these &lt;tags&gt;  --all-attrs           Include all attributes on kept tags  --first               First element matching the selectors  --help                Show this message and exit.```&lt;!-- [[[end]]] --&gt;## DevelopmentTo contribute to this tool, first checkout the code. Then create a new virtual environment:```bashcd strip-tagspython -m venv venvsource venv/bin/activate```Now install the dependencies and test dependencies:```bashpip install -e '.[test]'```To run the tests:```bashpytest```</longdescription>
</pkgmetadata>