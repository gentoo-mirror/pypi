<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![](https://img.shields.io/pypi/pyversions/django-treenode.svg?color=3776AB&amp;logo=python&amp;logoColor=white)](https://www.python.org/)[![](https://img.shields.io/pypi/djversions/django-treenode?color=0C4B33&amp;logo=django&amp;logoColor=white&amp;label=django)](https://www.djangoproject.com/)[![](https://img.shields.io/pypi/v/django-treenode.svg?color=blue&amp;logo=pypi&amp;logoColor=white)](https://pypi.org/project/django-treenode/)[![](https://pepy.tech/badge/django-treenode/month)](https://pepy.tech/project/django-treenode)[![](https://img.shields.io/github/stars/fabiocaccamo/django-treenode?logo=github)](https://github.com/fabiocaccamo/django-treenode/stargazers)[![](https://img.shields.io/pypi/l/django-treenode.svg?color=blue)](https://github.com/fabiocaccamo/django-treenode/blob/main/LICENSE.txt)[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/django-treenode/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/django-treenode/main)[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/django-treenode/test-package.yml?branch=main&amp;label=build&amp;logo=github)](https://github.com/fabiocaccamo/django-treenode)[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/django-treenode?logo=codecov)](https://codecov.io/gh/fabiocaccamo/django-treenode)[![](https://img.shields.io/codacy/grade/0c79c196e5c9411babbaf5e8e5f7469c?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/django-treenode)[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)# django-treenodeProbably the best abstract model / admin for your **tree** based stuff.## Features-   **Fast** - get `ancestors`, `children`, `descendants`, `parent`, `root`, `siblings`, `tree` with **no queries**-   **Synced** - in-memory model instances are automatically updated-   **Compatibility** - you can easily add `treenode` to existing projects-   **No dependencies**-   **Easy configuration** - just extend the abstract model / model-admin-   **Admin integration** - great tree visualization: **accordion**, **breadcrumbs** or **indentation**| indentation (default) | breadcrumbs | accordion || --- | --- | --- || ![treenode-admin-display-mode-indentation][treenode-admin-display-mode-indentation] | ![treenode-admin-display-mode-breadcrumbs][treenode-admin-display-mode-breadcrumbs] | ![treenode-admin-display-mode-accordion][treenode-admin-display-mode-accordion] |## Installation-   Run `pip install django-treenode`-   Add `treenode` to `settings.INSTALLED_APPS`-   Make your model inherit from `treenode.models.TreeNodeModel` *(described below)*-   Make your model-admin inherit from `treenode.admin.TreeNodeModelAdmin` *(described below)*-   Run `python manage.py makemigrations` and `python manage.py migrate`## Configuration### `models.py`Make your model class inherit from `treenode.models.TreeNodeModel`:```pythonfrom django.db import modelsfrom treenode.models import TreeNodeModelclass Category(TreeNodeModel):    # the field used to display the model instance    # default value 'pk'    treenode_display_field = &quot;name&quot;    name = models.CharField(max_length=50)    class Meta(TreeNodeModel.Meta):        verbose_name = &quot;Category&quot;        verbose_name_plural = &quot;Categories&quot;```The `TreeNodeModel` abstract class adds many fields (prefixed with `tn_` to prevent direct access) and public methods to your models.:warning: **If you are extending a model that already has some fields, please ensure that your model existing fields names don't clash with `TreeNodeModel` public [methods/properties](#methodsproperties) names.**---### `admin.py`Make your model-admin class inherit from `treenode.admin.TreeNodeModelAdmin`.```pythonfrom django.contrib import adminfrom treenode.admin import TreeNodeModelAdminfrom treenode.forms import TreeNodeFormfrom .models import Categoryclass CategoryAdmin(TreeNodeModelAdmin):    # set the changelist display mode: 'accordion', 'breadcrumbs' or 'indentation' (default)    # when changelist results are filtered by a querystring,    # 'breadcrumbs' mode will be used (to preserve data display integrity)    treenode_display_mode = TreeNodeModelAdmin.TREENODE_DISPLAY_MODE_ACCORDION    # treenode_display_mode = TreeNodeModelAdmin.TREENODE_DISPLAY_MODE_BREADCRUMBS    # treenode_display_mode = TreeNodeModelAdmin.TREENODE_DISPLAY_MODE_INDENTATION    # use TreeNodeForm to automatically exclude invalid parent choices    form = TreeNodeFormadmin.site.register(Category, CategoryAdmin)```---### `settings.py`You can use a custom cache backend by adding a `treenode` entry to `settings.CACHES`, otherwise the default cache backend will be used.```pythonCACHES = {    &quot;default&quot;: {        &quot;BACKEND&quot;: &quot;django.core.cache.backends.filebased.FileBasedCache&quot;,        &quot;LOCATION&quot;: &quot;...&quot;,    },    &quot;treenode&quot;: {        &quot;BACKEND&quot;: &quot;django.core.cache.backends.locmem.LocMemCache&quot;,    },}```## Usage### Methods/Properties-   [`delete`](#delete)-   [`delete_tree`](#delete_tree)-   [`get_ancestors`](#get_ancestors)-   [`get_ancestors_count`](#get_ancestors_count)-   [`get_ancestors_pks`](#get_ancestors_pks)-   [`get_ancestors_queryset`](#get_ancestors_queryset)-   [`get_breadcrumbs`](#get_breadcrumbs)-   [`get_children`](#get_children)-   [`get_children_count`](#get_children_count)-   [`get_children_pks`](#get_children_pks)-   [`get_children_queryset`](#get_children_queryset)-   [`get_depth`](#get_depth)-   [`get_descendants`](#get_descendants)-   [`get_descendants_count`](#get_descendants_count)-   [`get_descendants_pks`](#get_descendants_pks)-   [`get_descendants_queryset`](#get_descendants_queryset)-   [`get_descendants_tree`](#get_descendants_tree)-   [`get_descendants_tree_display`](#get_descendants_tree_display)-   [`get_first_child`](#get_first_child)-   [`get_index`](#get_index)-   [`get_last_child`](#get_last_child)-   [`get_level`](#get_level)-   [`get_order`](#get_order)-   [`get_parent`](#get_parent)-   [`get_parent_pk`](#get_parent_pk)-   [`set_parent`](#set_parent)-   [`get_priority`](#get_priority)-   [`set_priority`](#set_priority)-   [`get_root`](#get_root)-   [`get_root_pk`](#get_root_pk)-   [`get_roots`](#get_roots)-   [`get_roots_queryset`](#get_roots_queryset)-   [`get_siblings`](#get_siblings)-   [`get_siblings_count`](#get_siblings_count)-   [`get_siblings_pks`](#get_siblings_pks)-   [`get_siblings_queryset`](#get_siblings_queryset)-   [`get_tree`](#get_tree)-   [`get_tree_display`](#get_tree_display)-   [`is_ancestor_of`](#is_ancestor_of)-   [`is_child_of`](#is_child_of)-   [`is_descendant_of`](#is_descendant_of)-   [`is_first_child`](#is_first_child)-   [`is_last_child`](#is_last_child)-   [`is_leaf`](#is_leaf)-   [`is_parent_of`](#is_parent_of)-   [`is_root`](#is_root)-   [`is_root_of`](#is_root_of)-   [`is_sibling_of`](#is_sibling_of)-   [`update_tree`](#update_tree)#### `delete`**Delete a node** if `cascade=True` (default behaviour), children and descendants will be deleted too,otherwise children's parent will be set to `None` (then children become roots):```pythonobj.delete(cascade=True)```#### `delete_tree`**Delete the whole tree** for the current node class:```pythoncls.delete_tree()```#### `get_ancestors`Get a **list with all ancestors** (ordered from root to parent):```pythonobj.get_ancestors()# orobj.ancestors```#### `get_ancestors_count`Get the **ancestors count**:```pythonobj.get_ancestors_count()# orobj.ancestors_count```#### `get_ancestors_pks`Get the **ancestors pks** list:```pythonobj.get_ancestors_pks()# orobj.ancestors_pks```#### `get_ancestors_queryset`Get the **ancestors queryset** (ordered from parent to root):```pythonobj.get_ancestors_queryset()```#### `get_breadcrumbs`Get the **breadcrumbs** to current node (included):```pythonobj.get_breadcrumbs(attr=None)# orobj.breadcrumbs```#### `get_children`Get a **list containing all children**:```pythonobj.get_children()# orobj.children```#### `get_children_count`Get the **children count**:```pythonobj.get_children_count()# orobj.children_count```#### `get_children_pks`Get the **children pks** list:```pythonobj.get_children_pks()# orobj.children_pks```#### `get_children_queryset`Get the **children queryset**:```pythonobj.get_children_queryset()```#### `get_depth`Get the **node depth** (how many levels of descendants):```pythonobj.get_depth()# orobj.depth```#### `get_descendants`Get a **list containing all descendants**:```pythonobj.get_descendants()# orobj.descendants```#### `get_descendants_count`Get the **descendants count**:```pythonobj.get_descendants_count()# orobj.descendants_count```#### `get_descendants_pks`Get the **descendants pks** list:```pythonobj.get_descendants_pks()# orobj.descendants_pks```#### `get_descendants_queryset`Get the **descendants queryset**:```pythonobj.get_descendants_queryset()```#### `get_descendants_tree`Get a **n-dimensional** `dict` representing the **model tree**:```pythonobj.get_descendants_tree()# orobj.descendants_tree```#### `get_descendants_tree_display`Get a **multiline** `string` representing the **model tree**:```pythonobj.get_descendants_tree_display()# orobj.descendants_tree_display```#### `get_first_child`Get the **first child node**:```pythonobj.get_first_child()# orobj.first_child```#### `get_index`Get the **node index** (index in node.parent.children list):```pythonobj.get_index()# orobj.index```#### `get_last_child`Get the **last child node**:```pythonobj.get_last_child()# orobj.last_child```#### `get_level`Get the **node level** (starting from 1):```pythonobj.get_level()# orobj.level```#### `get_order`Get the **order value** used for ordering:```pythonobj.get_order()# orobj.order```#### `get_parent`Get the **parent node**:```pythonobj.get_parent()# orobj.parent```#### `get_parent_pk`Get the **parent node pk**:```pythonobj.get_parent_pk()# orobj.parent_pk```#### `set_parent`Set the **parent node**:```pythonobj.set_parent(parent_obj)```#### `get_priority`Get the **node priority**:```pythonobj.get_priority()# orobj.priority```#### `set_priority`Set the **node priority**:```pythonobj.set_priority(100)```#### `get_root`Get the **root node** for the current node:```pythonobj.get_root()# orobj.root```#### `get_root_pk`Get the **root node pk** for the current node:```pythonobj.get_root_pk()# orobj.root_pk```#### `get_roots`Get a **list with all root nodes**:```pythoncls.get_roots()# orcls.roots```#### `get_roots_queryset`Get **root nodes queryset**:```pythoncls.get_roots_queryset()```#### `get_siblings`Get a **list with all the siblings**:```pythonobj.get_siblings()# orobj.siblings```#### `get_siblings_count`Get the **siblings count**:```pythonobj.get_siblings_count()# orobj.siblings_count```#### `get_siblings_pks`Get the **siblings pks** list:```pythonobj.get_siblings_pks()# orobj.siblings_pks```#### `get_siblings_queryset`Get the **siblings queryset**:```pythonobj.get_siblings_queryset()```#### `get_tree`Get a **n-dimensional** `dict` representing the **model tree**:```pythoncls.get_tree()# orcls.tree```#### `get_tree_display`Get a **multiline** `string` representing the **model tree**:```pythoncls.get_tree_display()# orcls.tree_display```#### `is_ancestor_of`Return `True` if the current node **is ancestor** of target_obj:```pythonobj.is_ancestor_of(target_obj)```#### `is_child_of`Return `True` if the current node **is child** of target_obj:```pythonobj.is_child_of(target_obj)```#### `is_descendant_of`Return `True` if the current node **is descendant** of target_obj:```pythonobj.is_descendant_of(target_obj)```#### `is_first_child`Return `True` if the current node is the **first child**:```pythonobj.is_first_child()```#### `is_last_child`Return `True` if the current node is the **last child**:```pythonobj.is_last_child()```#### `is_leaf`Return `True` if the current node is **leaf** (it has not children):```pythonobj.is_leaf()```#### `is_parent_of`Return `True` if the current node **is parent** of target_obj:```pythonobj.is_parent_of(target_obj)```#### `is_root`Return `True` if the current node **is root**:```pythonobj.is_root()```#### `is_root_of`Return `True` if the current node **is root** of target_obj:```pythonobj.is_root_of(target_obj)```#### `is_sibling_of`Return `True` if the current node **is sibling** of target_obj:```pythonobj.is_sibling_of(target_obj)```#### `update_tree`**Update tree** manually, useful after **bulk updates**:```pythoncls.update_tree()```### Bulk OperationsTo perform bulk operations it is recommended to turn off signals, then triggering the tree update at the end:```pythonfrom treenode.signals import no_signalswith no_signals():    # execute custom bulk operations    pass# trigger tree update only onceYourModel.update_tree()```## FAQ### Custom tree serialization&gt; How can I serialize a tree using a custom data structure?This has been discussed [here](https://github.com/fabiocaccamo/django-treenode/discussions/89#discussioncomment-5521654).## Testing```bash# clone repositorygit clone https://github.com/fabiocaccamo/django-treenode.git &amp;&amp; cd django-treenode# create virtualenv and activate itpython -m venv venv &amp;&amp; . venv/bin/activate# upgrade pippython -m pip install --upgrade pip# install requirementspip install -r requirements.txt -r requirements-test.txt# install pre-commit to run formatters and linterspre-commit install --install-hooks# run teststox# orpython runtests.py# orpython -m django test --settings &quot;tests.settings&quot;```## LicenseReleased under [MIT License](LICENSE.txt).---## Supporting- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/django-treenode)- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)## See also- [`django-admin-interface`](https://github.com/fabiocaccamo/django-admin-interface) - the default admin interface made customizable by the admin itself. popup windows replaced by modals. 🧙 ⚡- [`django-colorfield`](https://github.com/fabiocaccamo/django-colorfield) - simple color field for models with a nice color-picker in the admin. 🎨- [`django-extra-settings`](https://github.com/fabiocaccamo/django-extra-settings) - config and manage typed extra settings using just the django admin. ⚙️- [`django-maintenance-mode`](https://github.com/fabiocaccamo/django-maintenance-mode) - shows a 503 error page when maintenance-mode is on. 🚧 🛠️- [`django-redirects`](https://github.com/fabiocaccamo/django-redirects) - redirects with full control. ↪️- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. 📘- [`python-codicefiscale`](https://github.com/fabiocaccamo/python-codicefiscale) - encode/decode Italian fiscal codes - codifica/decodifica del Codice Fiscale. 🇮🇹 💳- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. 🧢- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. 🧟♂️[treenode-admin-display-mode-accordion]: https://user-images.githubusercontent.com/1035294/54942407-5040ec00-4f2f-11e9-873b-d0b3b521f534.png[treenode-admin-display-mode-breadcrumbs]: https://user-images.githubusercontent.com/1035294/54942410-50d98280-4f2f-11e9-8a8b-a1ac6208398a.png[treenode-admin-display-mode-indentation]: https://user-images.githubusercontent.com/1035294/54942411-50d98280-4f2f-11e9-9daf-d8339dd7a159.png</longdescription>
</pkgmetadata>