<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AlphabetizeAlphabetize finds grouped lines of variables  within your files and orders them alphabetically. This is useful for cleaning up codebases.The organisation priority is:1. independent variables2. dependent variablesThe variable 'a' is ordered last as it depends on the other variables.```b = 10c = 20d = 40a = b + c + d```UPPERCASE and lowercase variables are separated when ordered.```A = 10B = 20C = 30a = 10b = 20c = 30```## Installation    pip install alphabetize## Usage    alphabetize myfile.py    alphabetize path/to/myfile.pyThe provided argument can either be the relative path or absolute path to a Python file.## Examples### Example 1 - single useConsider the following Python script (`unordered_code.py`)```import datetimefrom time import time# First Variable Blockc_variable = 60A_variable = 10a_variable = 40B_variable = 20b_variable = 50C_variable = 30class TestClass:    def __init__(self):        self.c_variable = 30        self.a_variable = 10        self.b_variable = 20def test_function():    c_variable = time()    a_variable = 10    b_variable = datetime    a_list = [a_variable, b_variable, c_variable]    bb_variable = 20    aa_variable = 10    cc_variable = aa_variable + bb_variable    return a_list, cc_variable    ```Calling:    alphabetize unordered_code.pyResults in the following output:```import datetimefrom time import time# First Variable BlockA_variable = 10B_variable = 20C_variable = 30a_variable = 40b_variable = 50c_variable = 60class TestClass:    def __init__(self):        self.a_variable = 10        self.b_variable = 20        self.c_variable = 30def test_function():    a_variable = 10    b_variable = datetime    c_variable = time()    a_list = [a_variable, b_variable, c_variable]    aa_variable = 10    bb_variable = 20    cc_variable = aa_variable + bb_variable    return a_list, cc_variable    ```### Example 2 - multiple usesDepending on the variable names found within grouped lines, `alphabetize` can be called multiple times to further reorder the grouped lines of variables.This particularly comes into play when independent and dependent variables are mixed within the same grouped lines block.Consider the following Python script (`unordered_code_multi.py`)```def test_function():    c_variable = 30    a_variable = 10    b_variable = 20    list = [a_variable, b_variable, c_variable]    bb_variable = 20    aa_variable = 10    cc_variable = aa_variable + bb_variable    return list, cc_variable    ```Calling `alphabetize unordered_code_multi.py` for the first time produces:```def test_function():    a_variable = 10    b_variable = 20    c_variable = 30    aa_variable = 10    bb_variable = 20    list = [a_variable, b_variable, c_variable]    cc_variable = aa_variable + bb_variable    return list, cc_variable```Then calling `alphabetize unordered_code_multi.py` a second time produces a further ordered file:```def test_function():    a_variable = 10    aa_variable = 10    b_variable = 20    bb_variable = 20    c_variable = 30    cc_variable = aa_variable + bb_variable    list = [a_variable, b_variable, c_variable]    return list, cc_variable```## Recommended RunningWhen using `alphabetize` it is recommended that you lint and format your files in the following order:1. [flake8](https://pypi.org/project/flake8/) is a wrapper around the tools:   1. Pyflakes    2. pycodestyle   3. Ned Batchelder's McCabe script2. [vulture](https://pypi.org/project/vulture/) finds unused code in Python programs.3. [alphabetize](https://pypi.org/project/alphabetize/) finds and orders variables within filesIt is recommended to run `alphabetize` a second time to catch any caught dependent variables. Then a further `flake8` to ensure your file is formatted and adheres to PEP8 correctly.</longdescription>
</pkgmetadata>