<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>| |travisci| |version| |versions| |impls| |wheel| |coverage| |br-coverage|.. |travisci| image:: https://api.travis-ci.org/jonathaneunice/colors.svg    :target: http://travis-ci.org/jonathaneunice/colors.. |version| image:: http://img.shields.io/pypi/v/ansicolors.svg?style=flat    :alt: PyPI Package latest release    :target: https://pypi.python.org/pypi/ansicolors.. |versions| image:: https://img.shields.io/pypi/pyversions/ansicolors.svg    :alt: Supported versions    :target: https://pypi.python.org/pypi/ansicolors.. |impls| image:: https://img.shields.io/pypi/implementation/ansicolors.svg    :alt: Supported implementations    :target: https://pypi.python.org/pypi/ansicolors.. |wheel| image:: https://img.shields.io/pypi/wheel/ansicolors.svg    :alt: Wheel packaging support    :target: https://pypi.python.org/pypi/ansicolors.. |coverage| image:: https://img.shields.io/badge/test_coverage-100%25-6600CC.svg    :alt: Test line coverage    :target: https://pypi.python.org/pypi/ansicolors.. |br-coverage| image:: https://img.shields.io/badge/branch_coverage-100%25-6600CC.svg    :alt: Test branch coverage    :target: https://pypi.python.org/pypi/ansicolorsANSI colors for Python======================Add ANSI colors and decorations to your strings.Example Usage-------------::    from __future__ import print_function  # accomodate Python 2    from colors import *    print(color('my string', fg='blue'))    print(color('some text', fg='red', bg='yellow', style='underline'))The strings returned by ``color`` will have embedded`ANSI code sequences &lt;https://en.wikipedia.org/wiki/ANSI_escape_code&gt;`_stipulating text colors and styles. For example, the abovecode will print the strings::    '\x1b[34mmy string\x1b[0m'    '\x1b[31;43;4msome text\x1b[0m'You can choose the foreground (text) color with the ``fg`` parameter,the background color with ``bg``, and the style with ``style``.You can choose one of the 8 basic ANSI colors: ``black``, ``red``, ``green``,``yellow``, ``blue``, ``magenta``, ``cyan``, and ``white``, plus a special``default`` which is display-specific, but usually a rational &quot;no specialcolor&quot; setting.There are other ways to specify colors. Many devices supportan idiosyncratic 256-color scheme developed as an extension tothe original ANSI codes for the`xterm terminal emulator &lt;https://en.wikipedia.org/wiki/Xterm&gt;`_.Colors (or grays) from this larger palette can be specified via ``int``value (0-255).To see them all::    from __future__ import print_function    from colors import color    for i in range(256):        print(color('Color #%d' % i, fg=i))The included ``show_colors.py`` program is a much-expanded version of this ideathat can be used to explore available color and style combinations on yourterminal or output device.24-bit Color and CSS Compatibility----------------------------------Modern terminals go even further than the ``xterm`` 256, often supporting afull 24-bit RGB color scheme. You can provide a full RGB value several ways:* with a 3-element ``tuple`` or ``list`` of ``int``, each valued 0 to 255 (e.g. ``(255, 218, 185)``),* a string containing a CSS-compatible color name (e.g. ``'peachpuff'``),* a string containing a CSS-style hex value (e.g. ``'#aaa'`` or ``'#8a2be2'``)* a string containing a CSS-style RGB notation (e.g. ``'rgb(102,51,153)'``)These forms can be mixed and matched at will::    print(color('orange on gray', 'orange', 'gray'))    print(color('nice color', 'white', '#8a2be2'))Note that any color name defined in the basic ANSI color set takesprimacy over the CSS color names. Combined with the fact thatterminals do not always agree which precise tone of blue shouldqualify as ANSI ``blue``, there can be some ambiguity regardingthe named colors. If you need full precision, specify the RGBcolor exactly. The ``parse_rgb`` function can be used to identifythe correct definition according to the CSS standards.Caveats-------Unfortunately there is no guarantee that every terminal will support all thecolors and styles ANSI ostensibly defines. In fact, most implement a rathersmall subset. Colors are better supported than styles, for which you *might* getone or two of the most popular such as ``bold`` or ``underline``.*Might.*Whatever colors and styles are supported, there is no guarantee they will beaccurately rendered. Even at this late date, over **fifty years** after the codesbegan to be standardized, support from terminals and output devices is limited,fragemented, and piecemeal.ANSI codes evolved in an entirely different historical context from today's.Both the Web and the idea of broad standardization were decades in the future.Display technology was low-resolution, colors were limited on the rare occasionsthey were present, and color/style fidelity was not a major consideration.Vendors thought little or nothing of creating their own proprietary codes,implementing functions differently from other vendors, and/or co-opting codespreviously in use for something else. Practical ANSI reference materialsinclude *many* phrases such as 'hardly ever supported' and 'non-standard.'We still use ANSI codes today not because they're especially good, but becausethey're the best, most-standard approach that pre-Web displays even remotelyagreed upon. Even deep into the Web era, text output endures as an importantmeans of human-computer interaction. The good news, such is it is: ANSI's colorand style specifications (&quot;SGR&quot; or &quot;Select Graphic Rendition&quot; in ANSIterminology) are the most-used and best-adhered-to portion of the whole ANSIshow.More Examples-------------::    # use some partial functions    from __future__ import print_function # so works on Python 2 and 3 alike    from colors import red, green, blue    print(red('This is red'))    print(green('This is green'))    print(blue('This is blue'))Optionally you can add a background color and/or styles.::    print(red('red on blue', bg='blue'))    print(green('green on black', bg='black', style='underline'))You can use multiple styles at once. Separate them witha ``+``.::    print(red('very important', style='bold+underline'))You can additionally specify one of the supported styles: ``none``, ``bold``,``faint``, ``italic``, ``underline``, ``blink``, ``blink2``, ``negative``,``concealed``, ``crossed``. While most devices support only a few styles,unsupported styles are generally ignored, so the only harm done is your text isless pretty and/or formatted than you might like. A good general rule isto enjoy the formatting if you get it, but don't depend on it--especiallydon't depend on styles like ``blink`` (e.g. to highlight critical data) or``concealed`` (e.g. to hide data). Most likely, they won't.If you use a style often, you may want to create your ownnamed style::    from functools import partial    from colors import color    important = partial(color, fg='red', style='bold+underline'))    print(important('this is very important!'))Utility Functions-----------------In deailing with ANSI-styled text, it can be necessary to determine the&quot;equivalent&quot; text minus the styling. The function ``strip_color(s)`` does that,removing ANSI codes from ``s``, returning its &quot;plain text equivalent.&quot;You may also wish to determine the effective length of a string. If it containsANSI codes, the builtin ``len()`` function will return the length includingthose codes, even though they are logically 0-length. So plain ``len(s)`` isprobably not what you need. ``ansilen(s)`` in contrast returns the &quot;effective&quot;length of the string, including only the non-ANSI characters. ``ansilen(s)`` isequivalent to ``len(strip_color(s))``,License-------``colors`` is licensed under the `ISC license &lt;https://en.wikipedia.org/wiki/ISC_license&gt;`_.</longdescription>
</pkgmetadata>