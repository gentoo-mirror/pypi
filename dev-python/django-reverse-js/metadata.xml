<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django  Reverse JS[![Tests](https://github.com/sevdog/django-reverse-js/actions/workflows/tests.yaml/badge.svg)](https://github.com/sevdog/django-reverse-js/actions/workflows/tests.yaml)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/django-reverse-js)](https://img.shields.io/pypi/pyversions/django-reverse-js)[![Django version](https://img.shields.io/pypi/djversions/django-reverse-js)](https://img.shields.io/pypi/djversions/django-reverse-js)**JavaScript url handling for Django that doesn’t hurt.**_Original idea from [django-js-reverse](https://github.com/ierror/django-js-reverse).__Django Reverse JS_ is a small django app that makes url handling of[named urls](https://docs.djangoproject.com/en/dev/topics/http/urls/#naming-url-patterns) in JavaScript easy and confortable for django's users.For example you can retrieve a named url:```pythonpath('/betterliving/&lt;str:category_slug&gt;/&lt;int:entry_pk&gt;/', 'get_house', name='betterliving_get_house')```in JavaScript it can be resolved like:```javascriptUrls.betterlivingGetHouse('house', 12)// '/betterliving/house/12/'```# InstallationInstall using `pip````shellpip install django-reverse-js```… or clone the project from github.```shellgit clone https://github.com/sevdog/django-reverse-js.git```Add `'django_reverse_js'` to your `INSTALLED_APPS` setting.```pythonINSTALLED_APPS = (    ...    'django_js_reverse',)```# Usage## As a static fileFirst generate static file with `createstatic_reversejs` command```shelldjango-admin createstatic_reversejs```&gt; NOTE: If you change some urls or add an app and want to update the reverse.js file by running again the command.After this add the file to your template```html&lt;script src=&quot;{% static 'django_reverse_js/js/reverse.js' %}&quot;&gt;&lt;/script&gt;```## As viewInclude view in your _URLCONF_ (you may also cache this is needed):```pythonurlpatterns = [    ...,    path('reverse.js', 'django_reverse_js.views.urls_js', name='reverse_js'),]```Then include JavaScript in your template```html&lt;script src=&quot;{% url 'reverse_js' %}&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;```## As template tagYou can place the `reverse_js` JavaScript inline into your templates,however use of inline JavaScript is not recommended, because itmay cause problems with Content Security Policy.See [django-csp](https://django-csp.readthedocs.io/) for further readings.```django{% load reversejs %}&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;    {% reverse_js %}&lt;/script&gt;```----## Use the resolver in JavaScriptIf your url names are valid [JavaScript identifiers](https://developer.mozilla.org/en-US/docs/Glossary/Identifier)you can access them by the _dot notation_:```javascriptUrls.betterlivingGetHouse('house', 12)```If the named url contains invalid identifiers use the _square-bracketnotation_ instead:&gt; NOTE: ATM [_namespaced_ urls](https://docs.djangoproject.com/en/3.2/topics/http/urls/#url-namespaces) **must** be accessd in this way```javascriptUrls['betterliving-get-house']('house', 12)Urls['namespace:betterliving-get-house']('house', 12)```You can also pass javascript objects to match keyword aguments like theexamples bellow:```javascriptUrls['betterliving-get-house']({ category_slug: 'house', entry_pk: 12 })Urls['namespace:betterliving-get-house']({ category_slug: 'house', entry_pk: 12 })```# Settings- **`REVERSEJS_VAR_NAME`**: name given to JavaScript variable used to access django urls; default `Urls`.- **`REVERSEJS_GLOBAL_OBJECT_NAME`**: global JavaScript object to which bound resolver variable; default `window`.- **`REVERSEJS_EXCLUDE_NAMESPACES`**: list of _url namespaces_ to be excluded from JavaScript resolver; default `[]` (aka: all namespaces allowed).- **`REVERSEJS_INCLUDE_ONLY_NAMESPACES`**: list of _url namespaces_ to be included in JavaScript resolver; default `[]` (aka: all namespaces allowed).  - use `''` (empty string) to allow only url without a namespace  - use `'foo\0'` (namespace name terminated with _null-char_) to include only urls from `'foo'` namespace and prevent any inner namespace to be extracted (ie: `'foo:bar'`)- **`REVERSEJS_SCRIPT_PREFIX`**: path of application (when served behing a reverse-proxy), needed to return full-urls; default `None`.- **`REVERSEJS_OUTPUT_PATH`**: path where to place file created by `createstatic_reversejs` command, if not provided `STATIC_ROOT` is used; defatul `None`.- **`REVERSEJS_MINIFY`**: flag which indicates if the minified version of JS script should be used; default `False`.&gt; NOTE: at the moment only one between `REVERSEJS_INCLUDE_ONLY_NAMESPACES` and `REVERSEJS_EXCLUDE_NAMESPACES` may be used.</longdescription>
</pkgmetadata>