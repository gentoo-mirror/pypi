<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--SPDX-FileCopyrightText: 2021 Magenta ApS &lt;https://magenta.dk&gt;SPDX-License-Identifier: MPL-2.0--&gt;# FastRAMQPIFastRAMQPI is an opinionated library for FastAPI and RAMQP.It is implemented as a thin wrapper around `FastAPI` and `RAMQP`.It is very MO specific.## Usage```pythonfrom pydantic import BaseSettingsfrom fastramqpi import FastRAMQPIfrom fastramqpi import FastRAMQPISettingsclass Settings(BaseSettings):    class Config:        frozen = True        env_nested_delimiter = &quot;__&quot;    fastramqpi: FastRAMQPISettings = Field(        default_factory=FastRAMQPISettings,        description=&quot;FastRAMQPI settings&quot;    )    # All your program settings hereunder...fastapi_router = APIRouter()@fastapi_router.post(&quot;/trigger/all&quot;)async def update_all(request: Request) -&gt; dict[str, str]:    context: dict[str, Any] = request.app.state.context    graphql_session = context[&quot;grapqh_session&quot;]    program_settings = context[&quot;user_context&quot;][&quot;settings&quot;]    ...    return {&quot;status&quot;: &quot;OK&quot;}amqp_router = MORouter()@amqp_router.register(&quot;*.*.*&quot;)async def listen_to_all(context: dict, payload: PayloadType) -&gt; None:    graphql_session = context[&quot;grapqh_session&quot;]    program_settings = context[&quot;user_context&quot;][&quot;settings&quot;]    ...def create_fastramqpi(**kwargs: Any) -&gt; FastRAMQPI:    settings = Settings(**kwargs)    fastramqpi = FastRAMQPI(        application_name=&quot;orggatekeeper&quot;, settings=settings.fastramqpi    )    fastramqpi.add_context(settings=settings)    # Add our AMQP router(s)    amqpsystem = fastramqpi.get_amqpsystem()    amqpsystem.router.registry.update(amqp_router.registry)    # Add our FastAPI router(s)    app = fastramqpi.get_app()    app.include_router(fastapi_router)    return fastramqpidef create_app(**kwargs: Any) -&gt; FastAPI:    fastramqpi = create_fastramqpi(**kwargs)    return fastramqpi.get_app()```### MetricsFastRAMQPI Metrics are exported via `prometheus/client_python` on the FastAPI's `/metrics`.## Development### Prerequisites- [Poetry](https://github.com/python-poetry/poetry)### Getting Started1. Clone the repository:```git clone git@git.magenta.dk:rammearkitektur/FastRAMQPI.git```2. Install all dependencies:```poetry install```3. Set up pre-commit:```poetry run pre-commit install```### Running the testsYou use `poetry` and `pytest` to run the tests:`poetry run pytest`You can also run specific files`poetry run pytest tests/&lt;test_folder&gt;/&lt;test_file.py&gt;`and even use filtering with `-k``poetry run pytest -k &quot;Manager&quot;`You can use the flags `-vx` where `v` prints the test &amp; `x` makes the test stop if any tests fails (Verbose, X-fail)## AuthorsMagenta ApS &lt;https://magenta.dk&gt;## LicenseThis project uses: [MPL-2.0](LICENSES/MPL-2.0.txt)This project uses [REUSE](https://reuse.software) for licensing.All licenses can be found in the [LICENSES folder](LICENSES/) of the project.</longdescription>
</pkgmetadata>