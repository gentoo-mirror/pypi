<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==================JSON log formatter==================The library helps you to store logs in JSON format. Why is it important?Well, it facilitates integration with **Logstash**.Usage example:.. code-block:: python    import logging    import json_log_formatter    formatter = json_log_formatter.JSONFormatter()    json_handler = logging.FileHandler(filename='/var/log/my-log.json')    json_handler.setFormatter(formatter)    logger = logging.getLogger('my_json')    logger.addHandler(json_handler)    logger.setLevel(logging.INFO)    logger.info('Sign up', extra={'referral_code': '52d6ce'})The log file will contain the following log record (inline)... code-block:: json    {        &quot;message&quot;: &quot;Sign up&quot;,        &quot;time&quot;: &quot;2015-09-01T06:06:26.524448&quot;,        &quot;referral_code&quot;: &quot;52d6ce&quot;    }JSON libraries--------------You can use **ujson** or **simplejson** instead of built-in **json** library.They are faster and can serialize ``Decimal`` values... code-block:: python    import json_log_formatter    import ujson    formatter = json_log_formatter.JSONFormatter()    formatter.json_lib = ujsonDjango integration------------------Here is an example of how the JSON formatter can be used with Django... code-block:: python    LOGGING['formatters']['json'] = {        '()': 'json_log_formatter.JSONFormatter',    }    LOGGING['handlers']['json_file'] = {        'level': 'INFO',        'class': 'logging.FileHandler',        'filename': '/var/log/my-log.json',        'formatter': 'json',    }    LOGGING['loggers']['my_json'] = {        'handlers': ['json_file'],        'level': 'INFO',    }Let's try to log something... code-block:: python    import logging    logger = logging.getLogger('my_json')    logger.info('Sign up', extra={'referral_code': '52d6ce'})Custom formatter----------------You will likely need a custom log format. For instance, you want to loga user ID, an IP address and ``time`` as ``django.utils.timezone.now()``.To do so you should override ``JSONFormatter.json_record()``... code-block:: python    class CustomisedJSONFormatter(json_log_formatter.JSONFormatter):        def json_record(self, message, extra, record):            extra['message'] = message            extra['user_id'] = current_user_id()            extra['ip'] = current_ip()            if 'time' not in extra:                extra['time'] = django.utils.timezone.now()            return extraLet's say you want ``datetime`` to be serialized as timestamp.Then you should use **ujson** (which does it by default) and disableISO8601 date mutation... code-block:: python    class CustomisedJSONFormatter(json_log_formatter.JSONFormatter):        json_lib = ujson        def mutate_json_record(self, json_record):            return json_recordTests-----.. code-block:: console    $ pip install -r requirements.txt    $ tox</longdescription>
</pkgmetadata>