<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ttictocTime execution of blocks of code.##Tested against python 3.6, python 3.7, and 3.8## How to installFrom pip```pip install ttictoc```or download this repo and do```pip install .```## TicTocThe easiest way to time something is with `tic` and `toc````pythonimport timefrom ttictoc import tic,toctic()time.sleep(1)elapsed = toc()print('Elapsed time:',elapsed)```You can execute multiple tocs in a matlab-like fashon```import timefrom ttictoc import tic,toctic()for i in range(2):  tic()  time.sleep(1)  elapsed = toc()  print('[IN LOOP] Elapsed time:',elapsed)print('[OUT LOOP] Elapsed time:',toc())```## Timer ClassIt works just like `tic`,`toc`.```pythonimport timefrom ttictoc import Timer# Simplet = Timer()t.start()time.sleep(1)elapsed = t.stop()print('Elapsed time:',elapsed)# Nestedt.start()for i in range(2):  t.start()  time.sleep(1)  elapsed = t.stop()  print('[IN LOOP] Elapsed time:',elapsed)print('[OUT LOOP] Elapsed time:',t.stop())```## Context managerYou can also use it as context manager```pythonimport timefrom ttictoc import Timer# Defaultwith Timer():  time.sleep(1)# With out verbosewith Timer(verbose=False) as T:  time.sleep(1)print('Elapsed time:',T.elapsed)# With default verbose messagewith Timer(verbose_msg=f'[User msg][{time.time()}] Elapsed time: {{}}'):  time.sleep(1)```## Deactivating matlab-like nestingYou can deactivate the matlab-like nesting. In this case calling start will update the global starting time for toc. However, you can have nested tics by giving a `key` to start and stop.```pythonimport timefrom ttictoc import Timer,tic2,toc2tic2()for i in range(2):  tic2()  time.sleep(1)  elapsed = toc2()  print('[IN LOOP] Elapsed time:',elapsed)print('[OUT LOOP] Elapsed time:',toc2())t = Timer(matlab_like=False)t.start()time.sleep(1)t.start() # Restarts the starting pointtime.sleep(1)elapsed = t.stop()print('Elapsed time:',elapsed) # ~1 second# Nestedt.start(key='Init')for i in range(2):  t.start(key=i)  time.sleep(1)  elapsed = t.stop(key=i)  print('[IN LOOP] Elapsed time:',elapsed)print('[OUT LOOP] Elapsed time:',t.stop('Init'))print('\n[OUT LOOP][Init] Elapsed time:',t.stop('Init'))print('[OUT LOOP][0] Elapsed time:',t.stop(0))print('[OUT LOOP][1] Elapsed time:',t.stop(1))```## Specify timing methodBy default, `Timer` (and `tic`,`toc`) use `timeit.default_timer`. However, the timing function can be selected as follow.```pythonimport timefrom ttictoc import Timert = Timer(func_time=time.clock)t.start()time.sleep(5)elapsed = t.stop()print('Elapsed time:',elapsed)```</longdescription>
</pkgmetadata>