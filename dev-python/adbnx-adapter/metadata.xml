<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ArangoDB-Networkx Adapter[![build](https://github.com/arangoml/networkx-adapter/actions/workflows/build.yml/badge.svg?branch=master)](https://github.com/arangoml/networkx-adapter/actions/workflows/build.yml)[![CodeQL](https://github.com/arangoml/networkx-adapter/actions/workflows/analyze.yml/badge.svg?branch=master)](https://github.com/arangoml/networkx-adapter/actions/workflows/analyze.yml)[![Coverage Status](https://coveralls.io/repos/github/arangoml/networkx-adapter/badge.svg?branch=master)](https://coveralls.io/github/arangoml/networkx-adapter)[![Last commit](https://img.shields.io/github/last-commit/arangoml/networkx-adapter)](https://github.com/arangoml/networkx-adapter/commits/master)[![PyPI version badge](https://img.shields.io/pypi/v/adbnx-adapter?color=3775A9&amp;style=for-the-badge&amp;logo=pypi&amp;logoColor=FFD43B)](https://pypi.org/project/adbnx-adapter/)[![Python versions badge](https://img.shields.io/pypi/pyversions/adbnx-adapter?color=3776AB&amp;style=for-the-badge&amp;logo=python&amp;logoColor=FFD43B)](https://pypi.org/project/adbnx-adapter/)[![License](https://img.shields.io/github/license/arangoml/networkx-adapter?color=9E2165&amp;style=for-the-badge)](https://github.com/arangoml/networkx-adapter/blob/master/LICENSE)[![Code style: black](https://img.shields.io/static/v1?style=for-the-badge&amp;label=code%20style&amp;message=black&amp;color=black)](https://github.com/psf/black)[![Downloads](https://img.shields.io/badge/dynamic/json?style=for-the-badge&amp;color=282661&amp;label=Downloads&amp;query=total_downloads&amp;url=https://api.pepy.tech/api/projects/adbnx-adapter)](https://pepy.tech/project/adbnx-adapter)&lt;a href=&quot;https://www.arangodb.com/&quot; rel=&quot;arangodb.com&quot;&gt;![](https://raw.githubusercontent.com/arangoml/networkx-adapter/master/examples/assets/logos/ArangoDB_logo.png)&lt;/a&gt;&lt;a href=&quot;https://networkx.org/&quot; rel=&quot;networkx.org&quot;&gt;![](https://raw.githubusercontent.com/arangoml/networkx-adapter/master/examples/assets/logos/networkx_logo.svg)&lt;/a&gt;The ArangoDB-Networkx Adapter exports Graphs from ArangoDB, the multi-model database for graph &amp; beyond, into NetworkX, the swiss army knife for graph analysis with python, and vice-versa.## About NetworkXNetworkx is a commonly used tool for analysis of network-data. If your analytics use cases require the use of all your graph data, for example, to summarize graph structure, or answer global path traversal queries, then using the ArangoDB Pregel API is recommended. If your analysis pertains to a subgraph, then you may be interested in getting the Networkx representation of the subgraph for one of the following reasons:    1. An algorithm for your use case is available in Networkx.    2. A library that you want to use for your use case works with Networkx Graphs as input.## Installation#### Latest Release```pip install adbnx-adapter```#### Current State```pip install git+https://github.com/arangoml/networkx-adapter.git```##  Quickstart[![Open In Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/arangoml/networkx-adapter/blob/master/examples/ArangoDB_NetworkX_Adapter.ipynb)Also available as an ArangoDB Lunch &amp; Learn session: [Graph &amp; Beyond Course #2.9](https://www.arangodb.com/resources/lunch-sessions/graph-beyond-lunch-break-2-9-introducing-the-arangodb-networkx-adapter/)```pyfrom arango import ArangoClient # Python-Arango driverfrom networkx import grid_2d_graph # Sample graph from NetworkXfrom adbnx_adapter import ADBNX_Adapter# Let's assume that the ArangoDB &quot;fraud detection&quot; dataset is imported to this endpointdb = ArangoClient(hosts=&quot;http://localhost:8529&quot;).db(&quot;_system&quot;, username=&quot;root&quot;, password=&quot;&quot;)adbnx_adapter = ADBNX_Adapter(db)# Use Case 1.1: ArangoDB to NetworkX via Graph namenx_fraud_graph = adbnx_adapter.arangodb_graph_to_networkx(&quot;fraud-detection&quot;)# Use Case 1.2: ArangoDB to NetworkX via Collection namesnx_fraud_graph_2 = adbnx_adapter.arangodb_collections_to_networkx(    &quot;fraud-detection&quot;,     {&quot;account&quot;, &quot;bank&quot;, &quot;branch&quot;, &quot;Class&quot;, &quot;customer&quot;}, # Vertex collections    {&quot;accountHolder&quot;, &quot;Relationship&quot;, &quot;transaction&quot;} # Edge collections)# Use Case 1.3: ArangoDB to NetworkX via Metagraphmetagraph = {    &quot;vertexCollections&quot;: {        &quot;account&quot;: {&quot;Balance&quot;, &quot;account_type&quot;, &quot;customer_id&quot;, &quot;rank&quot;},        &quot;customer&quot;: {&quot;Name&quot;, &quot;rank&quot;},    },    &quot;edgeCollections&quot;: {        &quot;transaction&quot;: {&quot;transaction_amt&quot;, &quot;sender_bank_id&quot;, &quot;receiver_bank_id&quot;},        &quot;accountHolder&quot;: {},    },}nx_fraud_graph_3 = adbnx_adapter.arangodb_to_networkx(&quot;fraud-detection&quot;, metagraph)# Use Case 2: NetworkX to ArangoDBnx_grid_graph = grid_2d_graph(5, 5)adb_grid_edge_definitions = [    {        &quot;edge_collection&quot;: &quot;to&quot;,        &quot;from_vertex_collections&quot;: [&quot;Grid_Node&quot;],        &quot;to_vertex_collections&quot;: [&quot;Grid_Node&quot;],    }]adb_grid_graph = adbnx_adapter.networkx_to_arangodb(&quot;Grid&quot;, nx_grid_graph, adb_grid_edge_definitions)```##  Development &amp; TestingPrerequisite: `arangorestore`1. `git clone https://github.com/arangoml/networkx-adapter.git`2. `cd networkx-adapter`3. (create virtual environment of choice)4. `pip install -e .[dev]`5. (create an ArangoDB instance with method of choice)6. `pytest --url &lt;&gt; --dbName &lt;&gt; --username &lt;&gt; --password &lt;&gt;`**Note**: A `pytest` parameter can be omitted if the endpoint is using its default value:```pythondef pytest_addoption(parser):    parser.addoption(&quot;--url&quot;, action=&quot;store&quot;, default=&quot;http://localhost:8529&quot;)    parser.addoption(&quot;--dbName&quot;, action=&quot;store&quot;, default=&quot;_system&quot;)    parser.addoption(&quot;--username&quot;, action=&quot;store&quot;, default=&quot;root&quot;)    parser.addoption(&quot;--password&quot;, action=&quot;store&quot;, default=&quot;&quot;)```</longdescription>
</pkgmetadata>