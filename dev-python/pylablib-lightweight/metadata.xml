<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Overview-------------------------.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.7324875.svg   :target: https://doi.org/10.5281/zenodo.7324875PyLabLib aims to provide support for device control and experiment automation. It interfaces with lots of different of `devices &lt;https://pylablib.readthedocs.io/en/latest/devices/devices_root.html&gt;`__, including several different `camera interfaces &lt;https://pylablib.readthedocs.io/en/latest/devices/cameras_root.html&gt;`__, `translational stages &lt;https://pylablib.readthedocs.io/en/latest/devices/stages_root.html&gt;`__, `oscilloscopes &lt;https://pylablib.readthedocs.io/en/latest/devices/Tektronix.html&gt;`__, `AWGs &lt;https://pylablib.readthedocs.io/en/latest/devices/generic_awgs.html&gt;`__, `sensors &lt;https://pylablib.readthedocs.io/en/latest/devices/basic_sensors_root.html&gt;`__, and more. The interface is implemented in a natural way through Python objects, and is easy to understand. For example, here is a complete script which steps Thorlabs KDC101 stage by 10000 steps ten times, and each time grabs a frame with Andor iXon camera:.. code-block:: python    from pylablib.devices import Thorlabs, Andor  # import the device libraries    import numpy as np  # import numpy for saving    # connect to the devices    with Thorlabs.KinesisMotor(&quot;27000000&quot;) as stage, Andor.AndorSDK2Camera() as cam:        # change some camera parameters        cam.set_exposure(50E-3)        cam.set_roi(0, 128, 0, 128, hbin=2, vbin=2)        # start the stepping loop        images = []        for _ in range(10):            stage.move_by(10000)  # initiate a move            stage.wait_move()  # wait until it's done            img = cam.snap()  # grab a single frame            images.append(img)    np.array(images).astype(&quot;&lt;u2&quot;).tofile(&quot;frames.bin&quot;)  # save frames as raw binaryThe list of the devices is constantly expanding.Additional utilities are added to simplify data acquisition, storage, and processing:- Simplified data processing utilities: convenient `fitting &lt;https://pylablib.readthedocs.io/en/latest/dataproc.html#fitting&gt;`__, `filtering &lt;https://pylablib.readthedocs.io/en/latest/dataproc.html#filtering-and-decimation&gt;`__, `feature detection &lt;https://pylablib.readthedocs.io/en/latest/dataproc.html#feature-detection&gt;`__, `FFT &lt;https://pylablib.readthedocs.io/en/latest/dataproc.html#fourier-transform&gt;`__ (mostly wrappers around NumPy and SciPy).- Universal multi-level `dictionaries &lt;https://pylablib.readthedocs.io/en/latest/storage.html#multi-level-dictionary&gt;`__ which are convenient for `storing &lt;https://pylablib.readthedocs.io/en/latest/storage.html#dictionary-files&gt;`__ heterogeneous data and settings in human-readable format.- Assorted functions for dealing with `file system &lt;https://pylablib.readthedocs.io/en/latest/misc_utils.html#file-system&gt;`__ (creating, moving and removing folders, zipping/unzipping, path normalization), `network &lt;https://pylablib.readthedocs.io/en/latest/misc_utils.html#network&gt;`__ (simplified interface for client and server sockets), `strings &lt;https://pylablib.readthedocs.io/en/latest/misc_utils.html#strings&gt;`__ (conversion of various Python objects to and from string), and more.The most recent version of the library is available on GitHub (https://github.com/AlexShkarin/pyLabLib), and the documentation can be found at https://pylablib.readthedocs.io/ .Requirements-------------------------- Python 3 (tested with 3.6+)- Most extensively tested with Windows 10 and 64-bit Python. Linux is, in principle, supported, but devices which require manufacturer-provided DLLs (mostly cameras) might, potentially, have problems.- Basic version only needs numpy, SciPy and pandas. Advanced device communication packages (such as `PyVISA &lt;https://pyvisa.readthedocs.io/en/latest/&gt;`_ and `pySerial &lt;https://pythonhosted.org/pyserial/&gt;`_) are automatically installed, but can be avoided if necessary.- Some devices might require `additional software &lt;https://pylablib.readthedocs.io/en/latest/devices/devices_basics.html#dependencies-and-external-software&gt;`__. If this is the case, the requirements are mentioned on the corresponding page.Installation-------------------------You can install the library from PyPi::    pip install pylablibMore options are described in the `documentation &lt;https://pylablib.readthedocs.io/en/latest/install.html&gt;`__.Related projects-------------------------`Pylablib cam-control &lt;https://github.com/AlexShkarin/pylablib-cam-control&gt;`__ - software for universal camera control and frames acquisition.</longdescription>
</pkgmetadata>