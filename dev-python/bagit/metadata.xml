<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>bagit-python============|Build Status| |Coverage Status|bagit is a Python library and command line utility for working with`BagIt &lt;http://purl.org/net/bagit&gt;`__ style packages.Installation------------bagit.py is a single-file python module that you can drop into yourproject as needed or you can install globally with:::    pip install bagitPython v2.7+ is required.Command Line Usage------------------When you install bagit you should get a command-line program calledbagit.py which you can use to turn an existing directory into a bag:::    bagit.py --contact-name 'John Kunze' /directory/to/bagFinding Bagit on your system~~~~~~~~~~~~~~~~~~~~~~~~~~~~The ``bagit.py`` program should be available in your normal command-linewindow (Terminal on OS X, Command Prompt or Powershell on Windows,etc.). If you are unsure where it was installed you can also requestthat Python search for ``bagit`` as a Python module: simply replace``bagit.py`` with ``python -m bagit``:::    python -m bagit --helpOn some systems Python may have been installed as ``python3``, ``py``,etc. â€“ simply use the same name you use to start an interactive Pythonshell:::    py -m bagit --help    python3 -m bagit --helpConfiguring BagIt~~~~~~~~~~~~~~~~~You can pass in key/value metadata for the bag using options like``--contact-name`` above, which get persisted to the bag-info.txt. For acomplete list of bag-info.txt properties you can use as commmand linearguments see ``--help``.Since calculating checksums can take a while when creating a bag, youmay want to calculate them in parallel if you are on a multicoremachine. You can do that with the ``--processes`` option:::    bagit.py --processes 4 /directory/to/bagTo specify which checksum algorithm(s) to use when generating themanifest, use the --md5, --sha1, --sha256 and/or --sha512 flags (MD5 isgenerated by default).::    bagit.py --sha1 /path/to/bag    bagit.py --sha256 /path/to/bag    bagit.py --sha512 /path/to/bagIf you would like to validate a bag you can use the --validate flag.::    bagit.py --validate /path/to/bagIf you would like to take a quick look at the bag to see if it seemsvalid by just examining the structure of the bag, and comparing itspayload-oxum (byte count and number of files) then use the ``--fast``flag.::    bagit.py --validate --fast /path/to/bagAnd finally, if you'd like to parallelize validation to take advantageof multiple CPUs you can:::    bagit.py --validate --processes 4 /path/to/bagUsing BagIt in your programs----------------------------You can also use BagIt programatically in your own Python programs byimporting the ``bagit`` module.Create~~~~~~To create a bag you would do this:.. code:: python    bag = bagit.make_bag('mydir', {'Contact-Name': 'John Kunze'})``make_bag`` returns a Bag instance. If you have a bag already on diskand would like to create a Bag instance for it, simply call theconstructor directly:.. code:: python    bag = bagit.Bag('/path/to/bag')Update Bag Metadata~~~~~~~~~~~~~~~~~~~You can change the metadata persisted to the bag-info.txt by using the``info`` property on a ``Bag``... code:: python    # load the bag    bag = bagit.Bag('/path/to/bag')    # update bag info metadata    bag.info['Internal-Sender-Description'] = 'Updated on 2014-06-28.'    bag.info['Authors'] = ['John Kunze', 'Andy Boyko']    bag.save()Update Bag Manifests~~~~~~~~~~~~~~~~~~~~By default ``save`` will not update manifests. This guards against asituation where a call to ``save`` to persist bag metadata accidentallyregenerates manifests for an invalid bag. If you have modified thepayload of a bag by adding, modifying or deleting files in the datadirectory, and wish to regenerate the manifests set the ``manifests``parameter to True when calling ``save``... code:: python    import shutil, os    # add a file    shutil.copyfile('newfile', '/path/to/bag/data/newfile')    # remove a file    os.remove('/path/to/bag/data/file')    # persist changes    bag.save(manifests=True)The save method takes an optional processes parameter which willdetermine how many processes are used to regenerate the checksums. Thiscan be handy on multicore machines.Validation~~~~~~~~~~If you would like to see if a bag is valid, use its ``is_valid`` method:.. code:: python    bag = bagit.Bag('/path/to/bag')    if bag.is_valid():        print(&quot;yay :)&quot;)    else:        print(&quot;boo :(&quot;)If you'd like to get a detailed list of validation errors, execute the``validate`` method and catch the ``BagValidationError`` exception. Ifthe bag's manifest was invalid (and it wasn't caught by the payloadoxum) the exception's ``details`` property will contain a list of``ManifestError``\ s that you can introspect on. Each ManifestError,will be of type ``ChecksumMismatch``, ``FileMissing``,``UnexpectedFile``.So for example if you want to print out checksums that failed tovalidate you can do this:.. code:: python    bag = bagit.Bag(&quot;/path/to/bag&quot;)    try:      bag.validate()    except bagit.BagValidationError as e:        for d in e.details:            if isinstance(d, bagit.ChecksumMismatch):                print(&quot;expected %s to have %s checksum of %s but found %s&quot; %                      (d.path, d.algorithm, d.expected, d.found))To iterate through a bag's manifest and retrieve checksums for thepayload files use the bag's entries dictionary:.. code:: python    bag = bagit.Bag(&quot;/path/to/bag&quot;)    for path, fixity in bag.entries.items():      print(&quot;path:%s md5:%s&quot; % (path, fixity[&quot;md5&quot;]))Contributing to bagit-python development----------------------------------------::    % git clone git://github.com/LibraryOfCongress/bagit-python.git    % cd bagit-python    # MAKE CHANGES    % python test.pyRunning the tests~~~~~~~~~~~~~~~~~You can quickly run the tests by having setuptools install dependencies:::    python setup.py testOnce your code is working, you can use`Tox &lt;https://tox.readthedocs.io/&gt;`__ to run the tests with everysupported version of Python which you have installed on the localsystem:::    toxIf you have Docker installed, you can run the tests under Linux inside acontainer:::    % docker build -t bagit:latest . &amp;&amp; docker run -it bagit:latestBenchmarks----------If you'd like to see how increasing parallelization of bag creation onyour system effects the time to create a bag try using the includedbench utility:::    % ./bench.pyLicense-------|cc0|Note: By contributing to this project, you agree to license your workunder the same terms as those that govern this project's distribution... |Build Status| image:: https://travis-ci.org/LibraryOfCongress/bagit-python.svg?branch=master   :target: http://travis-ci.org/LibraryOfCongress/bagit-python.. |Coverage Status| image:: https://coveralls.io/repos/github/LibraryOfCongress/bagit-python/badge.svg?branch=master   :target: https://coveralls.io/github/LibraryOfCongress/bagit-python?branch=master.. |cc0| image:: http://i.creativecommons.org/p/zero/1.0/88x31.png   :target: http://creativecommons.org/publicdomain/zero/1.0/</longdescription>
</pkgmetadata>