<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># EasySQL![Downloads](https://pepy.tech/badge/pyeasysql)![Downloads](https://pepy.tech/badge/pyeasysql/week)![Downloads](https://pepy.tech/badge/pyeasysql/month)  This library allow you to run SQL Databases without knowing even SQL.  This library will create SQL queries and execute them as you request and is very simple to use.### This library is still under development, so we appreciate if you help us improve it on the GitHub!### Having an issue?You can always find someone on our discord server here:&gt; https://discord.gg/6exsySK### WikiThe official wiki of this library is now available at GitHub&gt; https://github.com/AGM-Studio/EasySQL/wiki## How to installTo install just use following command```shellpip install PyEasySQL```This library will have dev/beta builds on the GitHub, to install them you can use```shellpip install --upgrade git+https://github.com/AGM-Studio/EasySQL.git```***By installing this library following libraries and their dependencies will be installed too.```yamlmysql-connector: Which is the basic library for connecting to database```# Example```pythonimport EasySQL# Simply provide connection info to your database@EasySQL.auto_initclass MyDatabase(EasySQL.EasyDatabase):    _database = 'MyDatabase'    _password = '**********'    _host = '127.0.0.1'    _port = 3306    _user = 'root'# Simply create a MyTable with its columns!@EasySQL.auto_initclass MyTable(EasySQL.EasyTable, database=MyDatabase, name='MyTable'):    ID = EasySQL.EasyColumn('ID', EasySQL.Types.BIGINT, EasySQL.PRIMARY, EasySQL.AUTO_INCREMENT)    Name = EasySQL.EasyColumn('Name', EasySQL.Types.STRING(255), EasySQL.NOT_NULL, default='Missing')    Balance = EasySQL.EasyColumn('Balance', EasySQL.Types.INT, EasySQL.NOT_NULL)    Premium = EasySQL.EasyColumn('Premium', EasySQL.Types.BOOL, EasySQL.NOT_NULL, default=False)# Insert values with a simple commandMyTable.insert([MyTable.Name, MyTable.Premium, MyTable.Balance], ['Ashenguard', True, 10])MyTable.insert([MyTable.Name, MyTable.Premium], ['Sam', False])# Let's add some random data from random import randintfor i in range(5):    MyTable.insert(['Name', 'Balance'], [f'User-{i}', randint(0, 20)])# Selecting data with another simple command### Let's get all the dataall = MyTable.select()### Something that does not existempty = MyTable.select(MyTable.ID, where=EasySQL.WhereIsEqual(MyTable.Name, &quot;NO-ONE&quot;))### To select multiple data give a list of columns as 1st argumentpremiums = MyTable.select([MyTable.ID, MyTable.Name], EasySQL.WhereIsEqual(MyTable.Premium, True))### You can have more complicated condition with AND (&amp;), OR (|) and NOT (~)specific = MyTable.select(MyTable.Name, where=EasySQL.WhereIsLike(MyTable.Name, &quot;Ash%&quot;).AND(EasySQL.WhereIsLesserEqual(MyTable.ID, 5)))### Giving no column will select all the columns, Also you can use limit, offset and order to sort datasecond = MyTable.select(order=MyTable.Balance, descending=True, limit=1, offset=1)top5 = MyTable.select(order=MyTable.Balance, descending=True, limit=5)### If you want only one result not a sequence of them! It will return a SelectData if a data is found or return None if none is found.one = MyTable.select(where=EasySQL.WhereIsEqual(MyTable.Name, &quot;Ashenguard&quot;), force_one=True)# The result will be an EmptySelectData if nothing was found, A SelectData if only one was found, Or a tuple of SelectData# All 3 of them are iterable, so it is safe to use a `for` loop for any result# To get data from the result you can use `get`, but it only contains columns requested in select method.for data in top5:    print(f'{data.get(MyTable.ID)}: {data.get(MyTable.Name)}\tBalance: {data.get(MyTable.Balance)}')# To delete data just use the delete methodMyTable.delete(EasySQL.WhereIsGreater(MyTable.ID, 5))# Update data with following commandMyTable.update(MyTable.Premium, True, EasySQL.WhereIsEqual(MyTable.ID, 3).OR(EasySQL.WhereIsEqual(MyTable.Name, 'Sam')))# Not sure if you should update or insert and don't have primary or unique keys? Use set and it will be handledMyTable.set(MyTable.columns, [6, 'Nathaniel', 50, False], where=EasySQL.WhereIsEqual(MyTable.ID, 5))# And if you have unique and primary keys set let insert handle duplicates for youMyTable.insert(MyTable.columns, [3, 'Jack', 5000, False], update_on_dup=True)# Safety error on delete/update/set without a where statement# MyTable.delete() -&gt; raise EasySQL.DatabaseSafetyException# Turn the safety off with following command.MyDatabase.remove_safety(confirm=True)# Now there will be no error, it will clean the all data that's why we had safety lockMyTable.delete()```[![Advertisement Banner](https://2captcha.com/referral-banners/2captcha/08.gif)](https://2captcha.com/?from=19092307)## Extras &amp; Features1. Need unsigned types? EasySQL has them.&gt; `BIGINT.UNSIGNED`, `INT.UNSIGNED`, `MEDIUMINT.UNSIGNED`, `SMALLINT.UNSIGNED`2. Afraid of unsigned or signed values? EasySQL will check them for you!&gt; Raises `ValueError` if you are out of bound3. Multiple primary keys? EasySQL will take care of it.&gt; Tag them with `PRIMARY` or add them to `YourTableClass.PRIMARY`4. Want to mark multiple columns as unique together? EasySQL have it.&gt; Add `Unique(column_1, column_2)` to `YourTableClass.UNIQUES`5. </longdescription>
</pkgmetadata>