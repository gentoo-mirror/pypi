<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**Pain001** is a Python Library for Automating ISO 20022-Compliant PaymentFiles Using CSV Data.**Pain001** offers a streamlined solution for reducing complexity and costsassociated with payment processing. By providing a simple and efficient methodto create ISO 20022-compliant payment files, it eliminates the manual effort offile creation and validation. This not only saves valuable time and resourcesbut also minimizes the risk of errors, ensuring accurate and seamless paymentprocessing.If you are seeking to simplify and automate your payment processing, considerleveraging the capabilities of **Pain001**.## Features ‚ú®- **Easy to use:** The library is easy to use and requires minimal codingknowledge, making it suitable for both developers and non-developers.- **Open-source**: The library is open-source and free to use, making itaccessible to everyone.- **Secure**: The library is secure and does not store any sensitive data,ensuring that all information remains confidential.- **Customizable**: The library allows developers to customize the output,making it adaptable to specific business requirements and preferences.- **Scalable solution**: The **Pain001** library can handle varying volumes ofpayment files, making it suitable for businesses of different sizes andtransaction volumes.- **Time-saving**: The automated file creation process reduces the time spenton manual data entry and file generation, increasing overall productivity.- **Seamless integration**: As a Python package, the **Pain001** library iscompatible with various Python-based applications and easily integrates intoany existing projects or workflows.- **Cross-border compatibility**: The library supports both Single EuroPayments Area (SEPA) and non-SEPA credit transfers, making it versatile foruse in different countries and regions.- **Improve accuracy** by providing precise data, the library reduces errors inpayment file creation and processing.- **Enhance efficiency** by automating the creation of Payment Initiationmessage files- **Accelerate payment file creation** by automating the process and reducingthe time required to create payment files.- **Guarantee the highest quality and compliance** by validating all paymentfiles to meet the ISO 20022 standards.- **Provide flexibility and choice to migrate to any supported ISO 20022messaging standard definitions** by simplifying the message creation processand providing a standardized format for payment files.## InstallationIt takes just a few seconds to get up and running with **Pain001**. Open yourterminal and run the following command:```shpip install pain001```## UsageAfter installation, you can run **Pain001** directly from the command line.Simply call the main function with the path of your XML template file, XSDschema file and the path of your CSV file containing the payment data.Once you have installed **Pain001**, you can generate and validate XML filesusing the following command:```shpython3 -m pain001     &lt;xml_message_type&gt;     &lt;xml_file_path&gt;     &lt;xsd_file_path&gt;     &lt;csv_file_path&gt;```## ArgumentsWhen running **Pain001**, you will need to specify four arguments:- `xml_message_type`: This is the type of XML message you want to generate.Currently, the valid options are:    - pain.001.001.03    - pain.001.001.09- `xml_file_path`: This is the path to the XML template file you are using.- `xsd_file_path`: This is the path to the XSD template file you are using.- `csv_file_path`: This is the path to the CSV data file you want to convert toXML.## ExamplesHere are a few example on how to use **Pain001** to generate apain.001.001.03 XML file from a CSV data file:### Via the Command Line```shpython3 -m pain001     pain.001.001.03     /path/to/your/pain.001.001.03.xml     /path/to/your/pain.001.001.03.xsd     /path/to/your/pain.001.001.03.csv```**Note:** The XML file that **Pain001** generates will be automaticallyvalidated against the XSD template file before the new XML file is saved. Ifthe validation fails, **Pain001** will stop running and display an errormessage in your terminal.### Embedded in an ApplicationTo embed **Pain001** in a new or existing application, import the main functionand use it in your code.Here's an example:```pythonfrom pain001 import mainif __name__ == '__main__':    xml_message_type = 'pain.001.001.03'    xml_file_path = 'template.xml'    xsd_file_path = 'schema.xsd'    csv_file_path = 'data.csv'    main(xml_message_type, xml_file_path, xsd_file_path, csv_file_path)```### ValidationTo validate the generated XML file against a given xsd schema, use thefollowing method:```pythonfrom pain001.core import validate_xml_against_xsdxml_message_type = 'pain.001.001.03'xml_file = 'generated.xml'xsd_file = 'schema.xsd'is_valid = validate_xml_against_xsd(    xml_message_type,    xml_file,    xsd_file)print(f&quot;XML validation result: {is_valid}&quot;)```## Documentation üìñ&gt; ‚ÑπÔ∏è **Info:** Do check out our &lt;https://pain001.com&gt; for more information onthe Pain001 documentation.</longdescription>
</pkgmetadata>