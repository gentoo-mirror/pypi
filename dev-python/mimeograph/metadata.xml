<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Mimeo (Mimeograph)**Mimeo** is a command line tool generating custom data based on a template.It can be used by developers, testers or even business analysts in their daily work.## InstallationInstall Mimeo with pip```shpip install mimeograph```## Usage/Examples### Mimeo ConfigurationPrepare Mimeo Configuration first- for a command line tool: in a JSON file- for a `Mimeograph` python class: in a `dict````json{  &quot;_templates_&quot;: [    {      &quot;count&quot;: 30,      &quot;model&quot;: {        &quot;SomeEntity&quot;: {          &quot;_attrs&quot;: {            &quot;xmlns&quot;: &quot;http://mimeo.arch.com/default-namespace&quot;,            &quot;xmlns:pn&quot;: &quot;http://mimeo.arch.com/prefixed-namespace&quot;          },          &quot;ChildNode1&quot;: 1,          &quot;ChildNode2&quot;: &quot;value-2&quot;,          &quot;ChildNode3&quot;: true        }      }    }  ]}```_You can find more configuration examples in the `examples` folder._### Mimeo CLI```shmimeo SomeEntity-config.json```***The Mimeo Configuration above will produce 2 files:```xml&lt;!-- mimeo-output/mimeo-output-1.xml--&gt;&lt;SomeEntity xmlns=&quot;http://mimeo.arch.com/default-namespace&quot; xmlns:pn=&quot;http://mimeo.arch.com/prefixed-namespace&quot;&gt;    &lt;ChildNode1&gt;1&lt;/ChildNode1&gt;    &lt;ChildNode2&gt;value-2&lt;/ChildNode2&gt;    &lt;ChildNode3&gt;true&lt;/ChildNode3&gt;&lt;/SomeEntity&gt;``````xml&lt;!-- mimeo-output/mimeo-output-2.xml--&gt;&lt;SomeEntity xmlns=&quot;http://mimeo.arch.com/default-namespace&quot; xmlns:pn=&quot;http://mimeo.arch.com/prefixed-namespace&quot;&gt;    &lt;ChildNode1&gt;1&lt;/ChildNode1&gt;    &lt;ChildNode2&gt;value-2&lt;/ChildNode2&gt;    &lt;ChildNode3&gt;true&lt;/ChildNode3&gt;&lt;/SomeEntity&gt;```***### Mimeo UtilsMimeo exposes several functions for data generation that will make it more useful for testing purposes.**Template**```json{  &quot;count&quot;: 2,  &quot;model&quot;: {    &quot;SomeEntity&quot;: {      &quot;id&quot;: &quot;{auto_increment}&quot;,      &quot;randomstring&quot;: &quot;{random_str}&quot;,      &quot;randomint&quot;: &quot;{random_int}&quot;    }  }}```**XML Data**```xml&lt;SomeEntity&gt;    &lt;id&gt;00001&lt;/id&gt;    &lt;randomstring&gt;mCApsYZprayYkmKnYWxe&lt;/randomstring&gt;    &lt;randomint&gt;8&lt;/randomint&gt;&lt;/SomeEntity&gt;``````xml&lt;SomeEntity&gt;    &lt;id&gt;00002&lt;/id&gt;    &lt;randomstring&gt;ceaPUqARUkFukZIPeuqO&lt;/randomstring&gt;    &lt;randomint&gt;99&lt;/randomint&gt;&lt;/SomeEntity&gt;```## Documentation### Mimeo CLI#### Mimeo Configuration argumentsWhen using Mimeo command line tool you can overwrite Mimeo Configuration properties:| Short option | Long option         | Description                                                                          ||:------------:|:--------------------|:-------------------------------------------------------------------------------------||     `-x`     | `--xml-declaration` | overwrite the `xml_declaration` property                                             ||     `-i`     | `--indent`          | overwrite the `indent` property                                                      ||     `-o`     | `--output`          | overwrite the `output_details/direction` property                                    ||     `-d`     | `--directory`       | overwrite the `output_details/directory_path` property                               ||     `-f`     | `--file`            | overwrite the `output_details/file_name` property                                    ||     `-H`     | `--http-host`       | overwrite the `output_details/host` property                                         ||     `-p`     | `--http-port`       | overwrite the `output_details/port` property                                         ||     `-E`     | `--http-endpoint`   | overwrite the `output_details/endpoint` property                                     ||     `-U`     | `--http-user`       | overwrite the `output_details/username` property                                     ||     `-P`     | `--http-password`   | overwrite the `output_details/password` property                                     ||              | `--http-method`     | overwrite the `output_details/method` property                                       ||              | `--http-protocol`   | overwrite the `output_details/protocol` property                                     ||              | `--http-auth`       | overwrite the `output_details/auth` property                                         ||     `-e`     | `--http-env`        | overwrite the output_details http properties using a mimeo environment configuration ||              | `--http-envs-file`  | use a custom environments file (by default: mimeo.envs.json)                         |#### Logging arguments| Short option | Long option | Description       ||:------------:|:------------|:------------------||              | `--silent`  | disable INFO logs ||              | `--debug`   | enable DEBUG mode ||              | `--fine`    | enable FINE mode  |### Mimeo ConfigurationMimeo configuration is defined in a JSON file using internal settings and data templates.| Key                             |  Level   |      Required      |     Supported values     |    Default     | Description                                                                                                                                             ||:--------------------------------|:--------:|:------------------:|:------------------------:|:--------------:|---------------------------------------------------------------------------------------------------------------------------------------------------------|| `output_format`                 |  Config  |        :x:         |          `xml`           |     `xml`      | Defines output data format                                                                                                                              || `output_details`                |  Config  |        :x:         |          object          |      ---       | Defines output details on how it will be consumed                                                                                                       || `output_details/direction`      |  Config  |        :x:         | `file`, `stdout`, `http` |     `file`     | Defines how output will be consumed                                                                                                                     || `output_details/directory_path` |  Config  |        :x:         |          string          | `mimeo-output` | For `file` direction - defines an output directory                                                                                                      || `output_details/file_name`      |  Config  |        :x:         |          string          | `mimeo-output` | For `file` direction - defines an output file name                                                                                                      || `output_details/method`         |  Config  |        :x:         |      `POST`, `PUT`       |     `POST`     | For `http` direction - defines a request method                                                                                                         || `output_details/protocol`       |  Config  |        :x:         |     `http`, `https`      |     `http`     | For `http` direction - defines a url protocol                                                                                                           || `output_details/host`           |  Config  | :heavy_check_mark: |          string          |      ---       | For `http` direction - defines a url host                                                                                                               || `output_details/port`           |  Config  |        :x:         |         integer          |     `null`     | For `http` direction - defines a url port (can be empty)                                                                                                || `output_details/endpoint`       |  Config  | :heavy_check_mark: |          string          |      ---       | For `http` direction - defines a url endpoint                                                                                                           || `output_details/auth`           |  Config  |        :x:         |    `basic`, `digest`     |    `basic`     | For `http` direction - defines a auth method                                                                                                            || `output_details/username`       |  Config  | :heavy_check_mark: |          string          |      ---       | For `http` direction - defines a username                                                                                                               || `output_details/password`       |  Config  | :heavy_check_mark: |          string          |      ---       | For `http` direction - defines a password                                                                                                               || `indent`                        |  Config  |        :x:         |         integer          |     `null`     | Defines indent applied in output data                                                                                                                   || `vars`                          |  Config  |        :x:         |          object          |      ---       | Defines variables to be used in a Mimeo Template (read more in next section)                                                                            || `xml_declaration`               |  Config  |        :x:         |         boolean          |    `false`     | Indicates whether an xml declaration should be added to output data                                                                                     || `_templates_`                   |  Config  | :heavy_check_mark: |          array           |      ---       | Stores templates for data generation                                                                                                                    || `count`                         | Template | :heavy_check_mark: |         integer          |      ---       | Indicates number of copies                                                                                                                              || `model`                         | Template | :heavy_check_mark: |          object          |      ---       | Defines data template to be copied                                                                                                                      || `context`                       |  Model   |        :x:         |          object          |      ---       | Defines a context name that is internally used e.g. using `curr_iter()` and `get_key()` mimeo utils (by default model name is used as the context name) |#### Mimeo EnvironmentTo make `http` output directory easier to use, mimeo allows you to configure Mimeo Environments.They are configured in a JSON file (by default: mimeo.envs.json) and support the following output details:- `protocol`- `host`- `port`- `auth`- `username`- `password`Example```json{    &quot;local&quot;: {        &quot;host&quot;: &quot;localhost&quot;,        &quot;port&quot;: 8000,        &quot;username&quot;: &quot;admin&quot;,        &quot;password&quot;: &quot;admin&quot;    },    &quot;dev&quot;: {        &quot;protocol&quot;: &quot;https&quot;,        &quot;host&quot;: &quot;11.111.11.111&quot;,        &quot;port&quot;: 8000,        &quot;auth&quot;: &quot;digest&quot;,        &quot;username&quot;: &quot;some-user&quot;,        &quot;password&quot;: &quot;some-password&quot;    }}```To use a specific Mimeo Environment you can use the following commands:```shmimeo SomeEntity-config.json -e devmimeo SomeEntity-config.json -e dev --http-envs-file environments.json```#### Mimeo VarsMimeo allows you to define a list of variables.You can use them in your Mimeo Config by wrapping them in curly brackets [`{VARIABLE}`].There are only 2 rules for variable names:- Variable name can include upper-cased letters \[`A-Z`\], underscore \[`_`\] and digits \{`0-9`\} only- Variable name must start with a letterVariable can be defined with:- any atomic value- any other variable defined- any Mimeo UtilYou can use Mimeo Vars as partial values (unless they are defined as Mimeo Utils).Example:```json{  &quot;vars&quot;: {    &quot;CUSTOM_VAR_1&quot;: &quot;custom-value-1&quot;,    &quot;CUSTOM_VAR_2&quot;: 1,    &quot;CUSTOM_VAR_3&quot;: true,    &quot;CUSTOM_VAR_4&quot;: &quot;{CUSTOM_VAR_2}&quot;,    &quot;CUSTOM_VAR_5&quot;: &quot;{auto_increment}&quot;,    &quot;CUSTOM_VAR_6&quot;: {      &quot;_mimeo_util&quot;: {        &quot;_name&quot;: &quot;random_int&quot;,        &quot;limit&quot;: 99      }    }  },  &quot;_templates_&quot;: [    {      &quot;count&quot;: 5,      &quot;model&quot;: {        &quot;SomeEntity&quot;: {          &quot;ChildNode1&quot;: &quot;{CUSTOM_VAR_1}&quot;,          &quot;ChildNode2&quot;: &quot;{CUSTOM_VAR_2}&quot;,          &quot;ChildNode3&quot;: &quot;{CUSTOM_VAR_3}&quot;,          &quot;ChildNode4&quot;: &quot;{CUSTOM_VAR_4}&quot;,          &quot;ChildNode5&quot;: &quot;{CUSTOM_VAR_5}&quot;,          &quot;ChildNode6&quot;: &quot;{CUSTOM_VAR_6}&quot;,          &quot;ChildNode7&quot;: &quot;{CUSTOM_VAR_1}-with-suffix&quot;        }      }    }  ]}```#### Mimeo Special FieldsIn Mimeo Template you can use so-called _special fields_.Every field in a template can be stored in memory (_provided_) and used later as a value of other fields (_injected_).To provide and inject a special field use curly brackets and colons: [`{:SomeField:}`].You provide a field when you use this format in a field name (JSON property name),and inject by applying it in a field value.  They can be injected as partial values, similarly to Mimeo Vars.Example```json{  &quot;_templates_&quot;: [    {      &quot;count&quot;: 5,      &quot;model&quot;: {        &quot;SomeEntity&quot;: {          &quot;{:ChildNode1:}&quot;: &quot;custom-value&quot;,          &quot;ChildNode2&quot;: &quot;{:ChildNode1:}&quot;,          &quot;ChildNode3&quot;: &quot;{:ChildNode1:}-with-suffix&quot;        }      }    }  ]}```#### Mimeo UtilsYou can use several predefined functions to generate data. They can be used in a _raw_ format or _parametrized_.##### Random StringGenerates a random string value.###### RawUses the default length: 20 characters.```json{  &quot;randomstring&quot;: &quot;{random_str}&quot;}```###### ParametrizedUses the customized length.```json{  &quot;randomstring&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;random_str&quot;,      &quot;length&quot;: 5    }  }}```##### Random IntegerGenerates a random integer value between `start` and `limit` parameters (inclusive).###### RawUses the default start (1) and limit (100) values.```json{  &quot;randominteger&quot;: &quot;{random_int}&quot;}```###### ParametrizedUses the customized limit.```json{  &quot;randominteger1&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;random_int&quot;,      &quot;start&quot;: 0    }  },  &quot;randominteger2&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;random_int&quot;,      &quot;limit&quot;: 5    }  },  &quot;randominteger3&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;random_int&quot;,      &quot;start&quot;: 0,      &quot;limit&quot;: 5    }  }}```##### Random ItemGenerates a random value from items provided.  NOTICE: The raw form of this Mimeo Util will generate a blank string value (as same as no items parametrized).###### Parametrized```json{  &quot;random&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;random_item&quot;,      &quot;items&quot;: [&quot;value&quot;, 1, true]    }  }}```##### DateGenerates a date value in format `YYYY-MM-DD`.###### RawUses the today's date.```json{  &quot;Today&quot;: &quot;{date}&quot;}```###### ParametrizedUses the customized days delta.```json{  &quot;Yesterday&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;date&quot;,      &quot;days_delta&quot;: -1    }  },  &quot;Tomorrow&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;date&quot;,      &quot;days_delta&quot;: 1    }  }}```##### Date TimeGenerates a date time value in format `YYYY-MM-DD'T'HH:mm:SS`.###### RawUses the current timestamp.```json{  &quot;Now&quot;: &quot;{date_time}&quot;}```###### ParametrizedUses the customized deltas.```json{  &quot;TomorrowThreeHoursLaterTwentyMinutesAgoTwoSecondsLater&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;date_time&quot;,      &quot;days_delta&quot;: 1,      &quot;hours_delta&quot;: 3,      &quot;minutes_delta&quot;: -20,      &quot;seconds_delta&quot;: 2    }  }}```##### Auto IncrementGenerates a next integer in context of a model (in nested templates it will use a separated context).###### RawUses a default pattern: **{:05d}** (an integer with 5 leading zeros).```json{  &quot;ID&quot;: &quot;{auto_increment}&quot;}```###### ParametrizedUses the string pattern provided.```json{  &quot;ID&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;auto_increment&quot;,      &quot;pattern&quot;: &quot;MY_ID_{:010d}&quot;    }  }}```##### Current IterationGenerates a value of the current iteration in a Mimeo Template context.###### RawUses the current context.```json{  &quot;ID&quot;: &quot;{curr_iter}&quot;}```###### ParametrizedUses a specific Mimeo Model context (model name when `context` is not configured).```json{  &quot;Parent&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;curr_iter&quot;,      &quot;context&quot;: &quot;SomeEntity&quot;    }  }}```##### KeyGenerates a key unique across all Mimeo Models and being the same within a single Mimeo Model context.###### RawUses a key from the current context and iteration.```json{  &quot;ID&quot;: &quot;{key}&quot;}```###### ParametrizedUses a key from the specific context and iteration.  When context is indicated and iteration is not, then the current iteration **of the indicated context** is being used.```json{  &quot;SomeEntity&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;key&quot;,      &quot;context&quot;: &quot;SomeEntity&quot;,      &quot;iteration&quot;: &quot;{curr_iter}&quot;    }  }}```##### CityGenerates a city name.###### RawBy default city names will be unique across a Mimeo Context.```json{  &quot;City&quot;: &quot;{city}&quot;}```###### ParametrizedUses country (name, iso2, iso3) and `unique` flag to generate a city name.```json{  &quot;CityWithDuplicates&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;city&quot;,      &quot;unique&quot;: false    }  },  &quot;CityOfCountryName&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;city&quot;,      &quot;country&quot;: &quot;United Kingdom&quot;    }  },  &quot;CityOfCountryISO2&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;city&quot;,      &quot;country&quot;: &quot;GB&quot;    }  },  &quot;CityOfCountryISO3&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;city&quot;,      &quot;country&quot;: &quot;GBR&quot;    }  },  &quot;CityOfCountryWithDuplicates&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;city&quot;,      &quot;country&quot;: &quot;United Kingdom&quot;,      &quot;unique&quot;: false    }  }}```##### CountryGenerates a country name (by default), iso2 or iso3.###### RawBy default country names will be unique across a Mimeo Context.```json{  &quot;Country&quot;: &quot;{country}&quot;}```###### ParametrizedIt can generate:- country iso3 or iso 2 instead of name- country with duplicates- country name for a provided iso3 or iso2- country iso2 for a provided name or iso3- country iso3 for a provided name or iso2When the `country` param is provided then the `unique` flag is ignored.```json{  &quot;CountryNameWithDuplicates&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;country&quot;,      &quot;unique&quot;: false    }  },  &quot;CountryISO2&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;country&quot;,      &quot;value&quot;: &quot;iso2&quot;    }  },  &quot;CountryISO3&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;country&quot;,      &quot;value&quot;: &quot;iso3&quot;    }  },  &quot;CountryNameForISO3&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;country&quot;,      &quot;country&quot;: &quot;GBR&quot;    }  },  &quot;CountryISO2ForName&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;country&quot;,      &quot;value&quot;: &quot;iso2&quot;,      &quot;country&quot;: &quot;United Kingdom&quot;    }  }}```##### First NameGenerates a first name.###### RawBy default first names will be unique across a Mimeo Context.```json{  &quot;FirstName&quot;: &quot;{first_name}&quot;}```###### ParametrizedUses sex (`M` / `Male` / `F` / `Female`) and `unique` flag to generate a first name.```json{  &quot;FirstNameWithDuplicates&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;first_name&quot;,      &quot;unique&quot;: false    }  },  &quot;MaleFirstName&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;first_name&quot;,      &quot;sex&quot;: &quot;M&quot;    }  },  &quot;FemaleFirstName&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;first_name&quot;,      &quot;sex&quot;: &quot;F&quot;    }  },  &quot;MaleFirstNameWithDuplicates&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;first_name&quot;,      &quot;sex&quot;: &quot;M&quot;,      &quot;unique&quot;: false    }  }}```##### Last NameGenerates a last name.###### RawBy default last names will be unique across a Mimeo Context.```json{  &quot;LastName&quot;: &quot;{last_name}&quot;}```###### ParametrizedUses `unique` flag to generate a last name.```json{  &quot;LastNameWithDuplicates&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;last_name&quot;,      &quot;unique&quot;: false    }  }}```## LicenseMIT## Authors- [@TomaszAniolowski](https://www.github.com/TomaszAniolowski)## Acknowledgements - [SimpleMaps.com](https://simplemaps.com/data/world-cities) (Cities &amp; countries data) - [@hadley/data-baby-names](https://github.com/hadley/data-baby-names/) (Forenames data) - [@fivethirtyeigh/data/most-common-name](https://github.com/fivethirtyeight/data/tree/master/most-common-name) (Surnames data)</longdescription>
</pkgmetadata>