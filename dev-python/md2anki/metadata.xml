<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[//]: &lt;&gt; (BEGIN: HEADER)# md2ankiConvert Markdown formatted documents to anki decks[//]: &lt;&gt; (END: HEADER)[![PyPI version](https://badge.fury.io/py/md2anki.svg)](https://badge.fury.io/py/md2anki)The decks were tested on:- [Anki (Desktop client, 2.1.56)](https://apps.ankiweb.net/)- [Anki web (Browser client, 02.2022)](https://ankiweb.net/)- [AnkiDroid (Android client, 2.15.6)](https://play.google.com/store/apps/details?id=com.ichi2.anki)## Features- Create an anki deck `.apkg` file- The name of the deck and its notes will be updated on your next deck import (this works via automatic IDs, **deletions can not be tracked!**)- Very simple basic structure that supports additionally anki note tags and anki subdecks:- Supported question/answer content:  - LaTeX math (inline and blocks)  - Images (local files and URLs, vector and raster format)  - Code (inline and blocks)  - All basic Markdown features (i.e. tables, bold, italics, lines)- Merge notes from multiple markdown input files into a single deck output file- Export document and all used local assets to a custom directory that can easily be shared or used as backupTo evaluate code and export to pdf the following additional software needs to be installed:```sh# Linux# &gt; Ubuntu# &gt;&gt; Evaluate codesudo apt install clang inkscape latexmk nodejs texlive texlive-latex-extra #texlive-full# &gt;&gt; PDF exportsudo apt install librsvg2-bin pandoc texlive-xetex# &gt; Arch/Manjaro# Manjaro/Arch Linux# &gt;&gt; Evaluate codesudo pacman -S swi-prolog clang npm inkscape# &gt;&gt; PDF exportsudo pacman -S pandoc-cli texlive-latex texlive-binextra texlive-xetex texlive-latexextra texlive-fontsextra texlive-luatex texlive-fontsrecommended``````ps1# Windows (the choco package manager is just an example)# &gt; Evaluate codechoco install inkscape llvm miktex nodejs# &gt; PDF exportchoco install miktex pandoc rsvg-convert```(On Windows `rsvg-convert` can sometimes throw errors in combination with `pandoc` but the latest build from [miyako](https://github.com/miyako/console-rsvg-convert/releases) does not throw them so try this one if you get errors)```sh# Linux + Windowsnpm install -g ts-node# &gt; For matplotlib python graphs (used in some examples):python -m pip install numpy matplotlib```### Examples[//]: &lt;&gt; (BEGIN: EXAMPLES)```markdown# Example 'Basic' (3714486828)## One line question (66b3661f-e22e-4986-a50d-569fdac454ad)One line answer## Multi line (24501c1a-f615-4355-a862-a00f64cc4725)question thanks to a question answer separator (`---`)---Answer that has multiple lines.**Basic** *Markdown* and &lt;ins&gt;HTML&lt;/ins&gt; &lt;del&gt;formatting&lt;/del&gt; is supported.List:- a- b  - c  - d    - eNew list:1. abc2. def   - a     1. maximum depth## Question with multiple (parenthesis) (is) (possible) (b7b85393-b76d-43e6-965a-d86108bf5b09)Answer## Lines in answers with multiple `---` (f0e03cb6-2015-4f64-bcd3-51e24763705b)First question answer seperator in the question.---Answer---Second part of answer with a line before it.``````markdown# Example 'Subdeck' (750441971)Example document to show how subdecks work.`{=:global_tag:=}`## Question 1 (f51d6aa5-1e39-4ad7-94fb-042f7084eff5)Answer## Subdeck: Subdeck Heading 1 (406542328)All notes of the level 3 will be added to this subdeck.`{=:subdeck_tag_1:=}`### Question 1.1 (583813da-5766-4cb8-b39f-ae0337e1f13c)Answer## Question 1.2 (f51d6aa5-1e39-4ad8-94fb-047f7094eff5)Answer## Subdeck: Subdeck Heading 2 (406541128)`{=:subdeck_tag_2:=}`### Question 2.1 (583813da-5766-4cb8-b39f-ae0337e1f13c)Answer### Subdeck: Subdeck Heading 3 with escaped :: double colon (406641128)All notes of the level 4 will be added to this subdeck.`{=:subdeck_subdeck_tag:=}`#### Question 3.1 (583813da-5786-4cb8-b39f-ae0337e1f13c)Answer### Question 2.2 (583223da-5786-4cb8-b39f-ae0337e1f13c)Answer```[//]: &lt;&gt; (END: EXAMPLES)Checkout the [`examples`](https://github.com/AnonymerNiklasistanonym/Md2Anki/examples) directory for more examples.If you want to run them all use the following command in that directory:```shpython -m examples```## Usage[//]: &lt;&gt; (BEGIN: USAGE)```textusage: md2anki [-h] [-v] [--lexers] [-d [{DEBUG,INFO,WARNING,ERROR,CRITICAL}]] [-e]               [--evaluate-code-ignore-cache] [--evaluate-code-delete-cache] [-k]               [-anki-model MODEL_ID] [-o-anki APKG_FILE] [-o-md MD_FILE] [-o-md-dir MD_DIR]               [-o-backup-dir BACKUP_DIR] [-o-pdf PDF_FILE] [-evaluate-code-cache-dir CACHE_DIR]               [-log-file LOG_FILE] [-file-dir [FILE_DIR ...]] [-md-heading-depth HEADING_DEPTH]               [-custom-program language program] [-custom-program-args language program-args]               MD_INPUT_FILE [MD_INPUT_FILE ...]Create an anki deck file (.apkg) from one or more Markdown documents. If no custom output path isgiven the file name of the document (+ .apkg) is used.positional arguments:  MD_INPUT_FILE         Markdown (.md) input file that contains anki deck notesoptions:  --evaluate-code-delete-cache                        delete all cached files from previous code evaluations (default: False)  --evaluate-code-ignore-cache                        ignore the cached files from previous code evaluations (default: False)  --lexers              print a list of all supported lexer languages and their aliases  -anki-model MODEL_ID  custom anki card model (md2anki_type_default, md2anki_type_answer,                        md2anki_type_cloze, md2anki_type_cloze_extra) (default:                        md2anki_type_default)  -custom-program language program                        use custom program for code evaluation [i.e. &quot;py&quot; &quot;python3.11&quot;] (default:                        [('py', 'python'), ('js', 'node'), ('ts', 'ts-node'), ('pl', 'swipl'),                        ('latex', 'latexmk'), ('latex', 'inkscape'), ('cpp', 'clang++'), ('cpp',                        'main.exe'), ('c', 'clang'), ('c', 'main.exe'), ('pandoc_pdf', 'pandoc')])  -custom-program-args language program-args                        use custom program args for code evaluation [i.e. &quot;py&quot;                        &quot;[\&quot;-c\&quot;,\&quot;MD2ANKI_CODE\&quot;]&quot;] (default: [('py', '[&quot;-c&quot;, &quot;MD2ANKI_CODE&quot;]'),                        ('js', '[&quot;-e&quot;, &quot;MD2ANKI_CODE&quot;]'), ('ts', '[&quot;MD2ANKI_CODE_FILE=code.ts&quot;]'),                        ('pl', '[&quot;-O&quot;, &quot;-s&quot;, &quot;MD2ANKI_CODE_FILE=code.pl&quot;, &quot;-g&quot;, &quot;true&quot;, &quot;-t&quot;,                        &quot;halt.&quot;]'), ('latex', '[&quot;-shell-escape&quot;, &quot;-pdf&quot;,                        &quot;MD2ANKI_CODE_FILE=code.tex&quot;]'), ('latex', '[&quot;--export-filename=code.svg&quot;,                        &quot;code.pdf&quot;]'), ('cpp', '[&quot;-Wall&quot;, &quot;-std=c++20&quot;,                        &quot;MD2ANKI_CODE_FILE=main.cpp&quot;, &quot;-o&quot;, &quot;main.exe&quot;]'), ('cpp', '[]'), ('c',                        '[&quot;-std=c17&quot;, &quot;MD2ANKI_CODE_FILE=main.c&quot;, &quot;-o&quot;, &quot;main.exe&quot;]'), ('c',                        '[]'), ('pandoc_pdf', '[&quot;--from&quot;, &quot;markdown&quot;, &quot;--to&quot;, &quot;pdf&quot;, &quot;--table-of-                        contents&quot;, &quot;-V&quot;, &quot;geometry:a4paper&quot;, &quot;-V&quot;, &quot;geometry:margin=2cm&quot;, &quot;--pdf-                        engine=xelatex&quot;, &quot;--pdf-engine-opt=-shell-escape&quot;]')])  -d [{DEBUG,INFO,WARNING,ERROR,CRITICAL}], --debug [{DEBUG,INFO,WARNING,ERROR,CRITICAL}]                        custom log level to the console (default: INFO)  -e, --evaluate-code   evaluate markdown inline code/code blocks with the language prefix '='                        i.e. '`print(1+1)`{=python}' or '```{=python} [newline] print(1+1)                        [newline] ```' (default: False)  -evaluate-code-cache-dir CACHE_DIR                        use a custom cache dir for code evaluations (default: None)  -file-dir [FILE_DIR ...]                        add directories that should be checked for referenced files (like relative                        path images) (default: [])  -h, --help            show this help message and exit  -k, --keep-temp-files                        keep temporary files (default: False)  -log-file LOG_FILE    log all messages to a text file (.log) (default: None)  -md-heading-depth HEADING_DEPTH                        use a custom Markdown heading depth (&gt;=1) (default: 1)  -o-anki APKG_FILE     custom anki deck (.apkg) output file path [if not given: md input file                        name + .apkg] (default: None)  -o-backup-dir BACKUP_DIR                        create a backup of the anki deck (i.e. merges input files and copies                        external files) in a directory (default: None)  -o-md MD_FILE         custom updated (and merged if multiple input files) Markdown (.md) output                        file path for all input files (default: None)  -o-md-dir MD_DIR      custom output directory for all updated Markdown (.md) input files                        (default: None)  -o-pdf PDF_FILE       create a PDF (.pdf) file of the anki deck (i.e. merges input files and                        removes IDs) (default: None)  -v, --version         show program's version number and exit```[//]: &lt;&gt; (END: USAGE)### Linux (bash)```sh# Single source filemd2anki anki_deck.md -o-anki anki_deck.apkg# Multiple source filesmd2anki *.md -o-anki anki_deck.apkg```### Windows (powershell)```pwsh# Single source filemd2anki anki_deck.md -o-anki anki_deck.apkg# Multiple source filesmd2anki (Get-ChildItem -Filter *.md) -o-anki anki_deck.apkg```## Install### PyPIIt can be installed using [`pip`](https://pypi.org/project/md2anki/):```sh# Installpip install md2anki# Uninstallpip uninstall md2anki```### GitHub Releases1. Download a wheel (`.whl`) file from [GitHub Releases](https://github.com/AnonymerNiklasistanonym/Md2Anki/releases)2. Run:   ```sh   # Install   pip install md2anki-$CURRENT_VERSION-py3-none-any.whl   # Uninstall   pip uninstall md2anki   ```### Pacman```shcd pkgbuild# Build package and then install it via pacmanmakepkg -p PKGBUILD --syncdeps --rmdeps --cleanpacman -S python-md2anki-3.0.19b-1-any.pkg.tar.zst# Or build and install packagemakepkg -p PKGBUILD --syncdeps --rmdeps --clean --install# Remove packagepacman -R python-md2anki```### BuildVia the file [`setup.py`](https://github.com/AnonymerNiklasistanonym/Md2Anki/setup.py) the package can be built:#### Create package filesThe following commands create the package files in a new directory called `dist`:- `md2anki-$CURRENT_VERSION-py3-none-any.whl`- `md2anki-$CURRENT_VERSION.tar.gz````shpython -m pip install --upgrade buildpython -m build```#### Install package filesThe wheel (`.whl`) file can be installed and uninstalled via `pip`:```sh# Installpython -m pip install dist/md2anki-$CURRENT_VERSION-py3-none-any.whl# Uninstallpython -m pip uninstall md2anki```## Markdown EditorsA list of editors which support WYSIWYG editing of such Markdown documents (source code and math blocks):- [Typora](https://typora.io/) (paid, free to use until version 0.9)- [Visual Studio Code](https://code.visualstudio.com/) (open source)## Development### Dependencies- [`beautifulsoup4`](https://pypi.org/project/beautifulsoup4/): Edit HTML- [`genanki`](https://pypi.org/project/genanki/): Write Anki decks- [`Markdown`](https://pypi.org/project/Markdown/): Convert Markdown to HTML- [`Pygments`](https://pypi.org/project/Pygments/): Convert source code to HTML with syntax highlighting/colors```shpython -m pip install --upgrade pip# Runtime dependenciespython -m pip install --upgrade beautifulsoup4 genanki Markdown Pygments# Save requirementspython -m pip freeze &gt; &quot;requirements.txt&quot;```### Upload package to PyPI1. [Create an PyPI account](https://pypi.org/account/login/)2. Go to account settings, Scroll to API tokens, Create PyPI API token (with only the project scope if project already exists)```sh# Buildpython -m pip install --upgrade pip buildpython -m build# Upload (only if a non existing version is found)python -m pip install twinepython -m twine upload --skip-existing dist/*# Use as username: &quot;__token__&quot;# Use as password the created PyPI API token: &quot;pypi-......&quot;```### Type checksPython files can be checked for type errors (to some extent) using the commands:```shpython -m pip install --upgrade mypy types-beautifulsoup4 types-Markdown types-Pygmentspython -m mypy src setup.py examples tests clean.py main.py update_readme.py update_pkgbuild.py format.py```### TestsThe tests can be run using the command (in the `tests` directory):```shpython -m unittest```### Format codePython files can be formatted using the commands:```shpython -m pip install --upgrade black# Add the option --check to only check if its already in the correct formatpython -m black src setup.py examples tests clean.py main.py update_readme.py```### Code editorsThis project was written using the following code editors (IDEs):- [PyCharm (Community)](https://www.jetbrains.com/pycharm/download/)- [Visual Studio Code](https://code.visualstudio.com/)</longdescription>
</pkgmetadata>