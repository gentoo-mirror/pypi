<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-rpm-spec[![pytest status](https://github.com/bkircher/python-rpm-spec/actions/workflows/test.yml/badge.svg)](https://github.com/bkircher/python-rpm-spec/actions/workflows/test.yml)[![PyPI version](https://badge.fury.io/py/python-rpm-spec.svg)](https://badge.fury.io/py/python-rpm-spec)python-rpm-spec is a Python library for parsing RPM spec files.*tl;dr* If you want to quickly parse a spec file on the command line you might want to give `rpmspec --parse` a try.```shrpmspec --parse file.spec | awk '/Source/ {print $2}'```If you write Python, have no `/usr/bin/rpm` around, or want to do something slightly more complicated, try using this Python library.RPMs are build from a package's sources along with a spec file. The spec file controls how the RPM is built. This library allows you to parse spec files and gives you simple access to various bits of information that is contained in the spec file.## Features- No extra dependencies other than Python 3.- Available on all platforms, parse spec files on Windows.- Read-only (for manipulating spec files see [Alternatives](#alternatives) below).## Supported Python versionsAll [current Python branches](https://devguide.python.org/versions/#versions) are supported.| Python Version | Supported Until || :------------- | --------------: || 3.11           | 2027-10         || 3.10           | 2026-10         || 3.9            | 2025-10         || 3.8            | 2024-10         || 3.7            | 2023-06-27      |## Installpython-rpm-spec is [hosted](https://pypi.org/project/python-rpm-spec/) on PyPI - the Python Package Index. All you need to do is```shpip install python-rpm-spec```in your virtual environment.## ExamplesThis is how you access a spec file's various definitions:```pythonfrom pyrpm.spec import Spec, replace_macrosspec = Spec.from_file('llvm.spec')print(spec.version)  # 3.8.0print(spec.sources[0])  # http://llvm.org/releases/%{version}/%{name}-%{version}.src.tar.xzprint(replace_macros(spec.sources[0], spec))  # http://llvm.org/releases/3.8.0/llvm-3.8.0.src.tar.xzfor package in spec.packages:    print(f'{package.name}: {package.summary if hasattr(package, &quot;summary&quot;) else spec.summary}')    # llvm: The Low Level Virtual Machine    # llvm-devel: Libraries and header files for LLVM    # llvm-doc: Documentation for LLVM    # llvm-libs: LLVM shared libraries    # llvm-static: LLVM static libraries```Example showing how to retrieve named source or patch files from a spec:```pythonfrom pyrpm.spec import Specspec = Spec.from_file('llvm.spec')# Access sources and patches via namefor k, v in spec.sources_dict.items():    print(f'{k} → {v}')# Source0 → http://llvm.org/releases/%{version}/%{name}-%{version}.src.tar.xz# Source100 → llvm-config.h# Or as a list with indices and so onfor source in spec.sources:    print(source)# http://llvm.org/releases/%{version}/%{name}-%{version}.src.tar.xz# llvm-config.h```Example showing how to get versioned `BuildRequires:` and `Requires:` out of a spec file:```pythonfrom pyrpm.spec import Specspec = Spec.from_file('attica-qt5.spec')# Access sources and patches via namefor br in spec.build_requires:    print(f'{br.name} {br.operator} {br.version}' if br.version else f'{br.name}')# cmake &gt;= 3.0# extra-cmake-modules &gt;= %{_tar_path}# fdupes# kf5-filesystem# pkg-config# cmake(Qt5Core) &gt;= 5.6.0# cmake(Qt5Network) &gt;= 5.6.0```If you want that the library [create warnings](https://docs.python.org/3/library/warnings.html) during parsing, for example on unknown macros, set `warnings_enabled` to `True`:```pythonimport pyrpm.specpyrpm.spec.warnings_enabled = True# …```## DependenciesNo extra dependencies are required except for Python 3.7 or newer.## Current statusThis library is an ambitious Python script that became a library. It is not complete and it does not fit every use case.- It is probably very slow and it relies on regular expressions for parsing.- It does not parse everything in a spec file, only the pieces myself and others needed so far.So there is probably still plenty of stuff missing (i.e. support for [`%include`](https://github.com/bkircher/python-rpm-spec/issues/51)). However, it should not be too complicated to add support for the missing pieces.## AlternativesHere is a list of alternatives to this library:- [packit/specfile](https://github.com/packit/specfile) - Allows parsing and, different to python-rpm-spec, the manipulation of spec files. Part of packit. Actively developed as of Mar 2023.- If you are on a Linux system that has the RPM package manager installed, consider using system tools like  - `rpmspec(8)` from rpm-build package. Example: `rpmspec --parse foo.spec` will parse a spec file to stdout, expanding all the macros installed on the system. Still relies on `$HOME/rpmbuild` to work.  - `rpmdev-spectool(1)` from rpmdevtools package. Example: `spectool --get-files foo.spec` will download all sources and patches from a spec file.  The parsers are probably more up to date and less buggy than this library.## DevelopmentIf you want to hack on this library you could start with following recipe:```shgit clone https://github.com/bkircher/python-rpm-spec.git  # Clone the repocd python-rpm-spec  # Change into the source directorypython3 -m venv .venv  # Create a virtual environmentsource .venv/bin/activate  # Activate itpip install -r requirements.txt  # Install dependencies for developmentpytest  # Execute all testspytest --mypy  # Run the type checker```That's it.## Further references- [RPM project documentation](https://rpm.org/documentation.html) with a couple of links to books or Fedora project documentation.- Take a look at the excellent [RPM Packaging Guide](https://rpm-guide.readthedocs.io/en/latest/index.html), especially the section [What is a SPEC File?](https://rpm-guide.readthedocs.io/en/latest/rpm-guide.html#what-is-a-spec-file)Happy hacking!</longdescription>
</pkgmetadata>