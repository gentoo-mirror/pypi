<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ixbrl-parse![Test status](https://github.com/drkane/ixbrl-parse/workflows/tests/badge.svg)[![PyPI version](https://img.shields.io/pypi/v/ixbrlparse)](https://pypi.org/project/ixbrlparse/)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/ixbrlparse)![PyPI - License](https://img.shields.io/pypi/l/ixbrlparse)A python module for getting useful data out of ixbrl files. The library is at an early stage - feedback and improvements are very welcome.**New in version 0.5.3**: Support for `exclude` and `continuation` elements within XBRL documents. Thanks to @wcollinscw for adding support for exclude elements.**New in version 0.5**: Support for Python 3.11 has been added. I've had some problems with Python 3.11 and Windows as lxml binaries aren't yet available. Also new in version 0.5 is type checking - the whole library now has types added. **New in version 0.4**: I've added initial support for pure XBRL files as well as tagged HTML iXBRL files. Feedback on this feature is welcome - particularly around getting values out of numeric items.## RequirementsThe module requires [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/) and [lxml](https://lxml.de/) to parse the documents.[word2number](https://github.com/akshaynagpal/w2n) is used to process thenumeric items with the `numsenwords` format.## How to installYou can install from pypi using pip:```pip install ixbrlparse```## How to use### Run the python moduleYou can run the module directly to extract data from an IXBRL file.```bashpython -m ixbrlparse example_file.html```The various options for using this can be found through:```bashpython -m ixbrlparse -h# optional arguments:#   -h, --help            show this help message and exit#   --outfile OUTFILE     Where to output the file#   --format {csv,json,jsonlines,jsonl}#                         format of the output#   --fields {numeric,nonnumeric,all}#                         Which fields to output```### Use as a python moduleAn example of usage is shown in [`test.py`](test.py).#### Import the `IXBRL` class which parses the file.```pythonfrom ixbrlparse import IXBRL```#### Initialise an object and parse the fileYou need to pass a file handle or other object with a `.read()` method.```pythonwith open('sample_ixbrl.html', encoding=&quot;utf8&quot;) as a:  x = IXBRL(a)```If your IXBRL data comes as a string then use a `io.StringIO` wrapper topass it to the class:```pythonimport iofrom ixbrlparse import IXBRLcontent = '''&lt;some ixbrl content&gt;'''x = IXBRL(io.StringIO(content))```#### Get the contexts and units used in the dataThese are held in the object. The contexts are stored as a dictionary with the contextid as the key, and a `ixbrlContext` object as the value.```pythonprint(x.contexts)# {#    &quot;cfwd_2018_03_31&quot;: ixbrlContext(#       id=&quot;cfwd_2018_03_31&quot;,#       entity=&quot;0123456&quot;, # company number#       segments=[], # used for hypercubes#       instant=&quot;2018-03-31&quot;,#       startdate=None, # used for periods#       enddate=None, # used for periods#    ),#    ....# }```The units are stored as key:value dictionary entries```pythonprint(x.units)# {#    &quot;GBP&quot;: &quot;ISO4107:GBP&quot;#    &quot;shares&quot;: &quot;shares&quot;# }```#### Get financial factsNumeric facts are stored in `x.numeric` as a list of `ixbrlNumeric` objects.The `ixbrlNumeric.value` object contains the value as a parsed python number(after the sign and scale formatting values have been applied).`ixbrlNumeric.context` holds the context object relating to this value.The `.name` and `.schema` values give the key of this value, according tothe applied schema.Non-numeric facts are stored in `x.nonnumeric` as a list of `ixbrlNonnumeric`objects, with similar `.value`, `.context`, `.name` and `.schema` values. The value of `.value` will be a string for non-numeric facts.#### Check for any parsing errorsBy default, the parser will throw an exception if it encounters an errorwhen processing the document.You can parse `raise_on_error=False` to the initial object to suppressthese exceptions. You can then access a list of the errors (and the element)that created them through the `.errors` attribute. For example:```pythonwith open('sample_ixbrl.html', encoding=&quot;utf8&quot;) as a:  x = IXBRL(a, raise_on_error=False)  print(x.errors) # populated with any exceptions found  # [ eg...  #   {  #     &quot;error&quot;: &lt;NotImplementedError&gt;,  #     &quot;element&quot;: &lt;BeautifulSoupElement&gt;  #   }  # ]```Note that the error catching is only available for parsing of `.nonnumeric`and `numeric` items in the document. Any other errors with parsing will bethrown as normal no matter what `raise_on_error` is set to.## Code checks### Run testsTests can be run with `pytest`:```bashpip install -e . # install the packagepytest tests```### Test coverage```bashcoverage run -m pytest testscoverage htmlpython -m http.server -d htmlcov```### Run typing checks```bashmypy ixbrlparse tests```### LintingBlack and isort should be run before committing any changes.```bashisort ixbrlparse testsblack ixbrlparse tests```### Run all checks at once```shblack . &amp;&amp; isort . &amp;&amp; mypy ixbrlparse tests &amp;&amp; coverage run -m pytest tests &amp;&amp; coverage html --fail-under=100```## Publish to pypi```bashpython -m buildtwine upload dist/*git tag v&lt;VERSION_NUMBER&gt;git push origin v&lt;VERSION_NUMBER&gt;```## Install development versionThe development requirements are installed using `pip install -r dev-requirements.txt`.Any additional requirements for the module itself must be added to`install_requires` in `setup.py`. You should then generate a new `requirements.txt` using using [`pip-tools`](https://github.com/jazzband/pip-tools) (`pip-compile`). You can then run `pip-sync` to install the requirement.Any additional development requirements must be added to `dev-requirements.in`and then the `dev-requirements.txt` should be generated using `pip-compile dev-requirements.in`. You can then install the development requirements using`pip-sync dev-requirements.txt`.## AcknowledgementsOriginally developed for a project with [Power to Change](https://www.powertochange.org.uk/) looking at how to extract data from financial documents of community businesses.</longdescription>
</pkgmetadata>