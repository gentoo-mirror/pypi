<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Slixmpp#########Slixmpp is an MIT licensed XMPP library for Python 3.7+. It is a fork ofSleekXMPP.Slixmpp's goals is to only rewrite the core of the library (the low levelsocket handling, the timers, the events dispatching) in order to remove allthreads.Building--------Slixmpp can make use of cython to improve performance on critical modules.To do that, **cython3** is necessary along with **libidn** headers.Otherwise, no compilation is needed. Building is done by running setup.py::    python3 setup.py build_ext --inplaceDocumentation and Testing-------------------------Documentation can be found both inline in the code, and as a Sphinx project in ``/docs``.To generate the Sphinx documentation, follow the commands below. The HTML output willbe in ``docs/_build/html``::    cd docs    make html    open _build/html/index.htmlTo run the test suite for Slixmpp::    python run_tests.pyIntegration tests require the following environment variables to be set:::    $CI_ACCOUNT1    $CI_ACCOUNT1_PASSWORD    $CI_ACCOUNT2    $CI_ACCOUNT2_PASSWORD    $CI_MUC_SERVERwhere the account variables are JIDs of valid, existing accounts, andthe passwords are the account passwords. The MUC server must allow roomcreation from those JIDs.To run the integration test suite for Slixmpp::    python run_integration_tests.pyThe Slixmpp Boilerplate-------------------------Projects using Slixmpp tend to follow a basic pattern for setting up client/componentconnections and configuration. Here is the gist of the boilerplate needed for a Slixmppbased project. See the documentation or examples directory for more detailed archetypes forSlixmpp projects::    import logging    from slixmpp import ClientXMPP    from slixmpp.exceptions import IqError, IqTimeout    class EchoBot(ClientXMPP):        def __init__(self, jid, password):            ClientXMPP.__init__(self, jid, password)            self.add_event_handler(&quot;session_start&quot;, self.session_start)            self.add_event_handler(&quot;message&quot;, self.message)            # If you wanted more functionality, here's how to register plugins:            # self.register_plugin('xep_0030') # Service Discovery            # self.register_plugin('xep_0199') # XMPP Ping            # Here's how to access plugins once you've registered them:            # self['xep_0030'].add_feature('echo_demo')            # If you are working with an OpenFire server, you will            # need to use a different SSL version:            # import ssl            # self.ssl_version = ssl.PROTOCOL_SSLv3        def session_start(self, event):            self.send_presence()            self.get_roster()            # Most get_*/set_* methods from plugins use Iq stanzas, which            # can generate IqError and IqTimeout exceptions            #            # try:            #     self.get_roster()            # except IqError as err:            #     logging.error('There was an error getting the roster')            #     logging.error(err.iq['error']['condition'])            #     self.disconnect()            # except IqTimeout:            #     logging.error('Server is taking too long to respond')            #     self.disconnect()        def message(self, msg):            if msg['type'] in ('chat', 'normal'):                msg.reply(&quot;Thanks for sending\n%(body)s&quot; % msg).send()    if __name__ == '__main__':        # Ideally use optparse or argparse to get JID,        # password, and log level.        logging.basicConfig(level=logging.DEBUG,                            format='%(levelname)-8s %(message)s')        xmpp = EchoBot('somejid@example.com', 'use_getpass')        xmpp.connect()        xmpp.process(forever=True)Slixmpp Credits---------------**Maintainers:**    - Florent Le Coz (`louiz@louiz.org &lt;xmpp:louiz@louiz.org?message&gt;`_),    - Mathieu Pasquet (`mathieui@mathieui.net &lt;xmpp:mathieui@mathieui.net?message&gt;`_),**Contributors:**    - Emmanuel Gil Peyrot (`Link mauve &lt;xmpp:linkmauve@linkmauve.fr?message&gt;`_)    - Sam Whited (`Sam Whited &lt;mailto:sam@samwhited.com&gt;`_)    - Dan Sully (`Dan Sully &lt;mailto:daniel@electricalrain.com&gt;`_)    - Gasper Zejn (`Gasper Zejn &lt;mailto:zejn@kiberpipa.org&gt;`_)    - Krzysztof Kotlenga (`Krzysztof Kotlenga &lt;mailto:pocek@users.sf.net&gt;`_)    - Tsukasa Hiiragi (`Tsukasa Hiiragi &lt;mailto:bakalolka@gmail.com&gt;`_)    - Maxime Buquet (`pep &lt;xmpp:pep@bouah.net?message&gt;`_)Credits (SleekXMPP)-------------------**Main Author:** Nathan Fritz    `fritzy@netflint.net &lt;xmpp:fritzy@netflint.net?message&gt;`_,    `@fritzy &lt;http://twitter.com/fritzy&gt;`_    Nathan is also the author of XMPPHP and `Seesmic-AS3-XMPP    &lt;http://code.google.com/p/seesmic-as3-xmpp/&gt;`_, and a former member of    the XMPP Council.**Co-Author:** Lance Stout    `lancestout@gmail.com &lt;xmpp:lancestout@gmail.com?message&gt;`_,    `@lancestout &lt;http://twitter.com/lancestout&gt;`_**Contributors:**    - Brian Beggs (`macdiesel &lt;http://github.com/macdiesel&gt;`_)    - Dann Martens (`dannmartens &lt;http://github.com/dannmartens&gt;`_)    - Florent Le Coz (`louiz &lt;http://github.com/louiz&gt;`_)    - Kevin Smith (`Kev &lt;http://github.com/Kev&gt;`_, http://kismith.co.uk)    - Remko Tronçon (`remko &lt;http://github.com/remko&gt;`_, http://el-tramo.be)    - Te-jé Rogers (`te-je &lt;http://github.com/te-je&gt;`_)    - Thom Nichols (`tomstrummer &lt;http://github.com/tomstrummer&gt;`_)</longdescription>
</pkgmetadata>