<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ImiaImia (belarussian for &quot;a name&quot;) is an authentication library for Starlette and FastAPI (python 3.8+).![PyPI](https://img.shields.io/pypi/v/imia)![GitHub Workflow Status](https://img.shields.io/github/workflow/status/alex-oleshkevich/imia/Lint)![GitHub](https://img.shields.io/github/license/alex-oleshkevich/imia)![Libraries.io dependency status for latest release](https://img.shields.io/librariesio/release/pypi/imia)![PyPI - Downloads](https://img.shields.io/pypi/dm/imia)![GitHub Release Date](https://img.shields.io/github/release-date/alex-oleshkevich/imia)![Lines of code](https://img.shields.io/tokei/lines/github/alex-oleshkevich/imia)## Production statusThe library is considered in &quot;beta&quot; state thus may contain bugs or security issues, but I actively use it in production.## InstallationInstall `imia` using PIP or poetry:```bashpip install imia# orpoetry add imia```## Features- Login/logout flows- Pluggable authenticators:    - WWW-Basic    - session    - token    - bearer token    - any token (customizable)    - API key- Database agnostic user storage- Authentication middleware    - with fallback strategies:        - redirect to an URL        - raise an exception        - do nothing    - with optional URL protection    - with option URL exclusion from protection- User Impersonation (stateless and stateful)- SQLAlchemy 1.4 (async mode) integration## TODO* remember me## A very quick startIf you are too lazy to read this doc, take a look into `examples/` directory. There you will find several files demoingvarious parts of this library.## How it works?Here are all moving parts:1. **UserLike** object, aka &quot;user model&quot; - is an arbitrary class that implements `imia.UserLike` protocol.2. **a user provider** - an adapter that loads user model (UserLike object) from the storage (a database).3. **an authenticator** - a class that loads user using the user provider from the request (eg. session)4. **an authentication middleware** that accepts an HTTP request and calls authenticators for a user model. The   middleware always populates `request.auth` with `UserToken`.6. **user token** is a class that holds authentication stateWhen a HTTP request reaches your application, an `imia.AuthenticationMiddleware` will start handling it. The middlewareiterates over configured authenticators and stops on the first one that returns non-None value. At this point therequest is considered authenticated. If no authenticators return user model then the middleware will create  _anonymoususer token_. The user token available in `request.auth` property. Use `user_token.is_authenticated` token property tomake sure that user is authenticated.## User authentication quick start1. Create a user model and implement methods defined by `imia.UserLike` protocol.2. Create an instance of `imia.UserProvider` that corresponds to your user storage. Feel free to create your own.3. Setup one or more authenticators and pass them to the middleware4. Add `imia.AuthenticationMiddleware` to your Starlette applicationAt this point you are done.Here is a brief example that uses in-memory provider for demo purpose. For production environment you should usedatabase backed providers like `SQLAlchemyORMUserProvider` or  `SQLAlchemyCoreUserProvider`. Also, for simplicity reasonwe will not implement [login/logout flow](docs/login_logout.md) and will authenticate requests using API keys.```pythonfrom dataclasses import dataclass, fieldfrom starlette.applications import Starlettefrom starlette.middleware import Middlewarefrom starlette.requests import Requestfrom starlette.responses import JSONResponsefrom starlette.routing import Routefrom imia import APIKeyAuthenticator, AuthenticationMiddleware, InMemoryProvider@dataclassclass User:    &quot;&quot;&quot;This is our user model. It may be an ORM model, or any python class, the library does not care of it,    it only expects that the class has methods defined by the UserLike protocol.&quot;&quot;&quot;    id: str    password: str = 'password'    scopes: list[str] = field(default_factory=list)    def get_display_name(self) -&gt; str:        return self.id.split('@')[0].title()    def get_id(self) -&gt; str:        return self.id    def get_hashed_password(self) -&gt; str:        return self.password    def get_scopes(self) -&gt; list:        return self.scopesasync def whoami_view(request: Request) -&gt; JSONResponse:    return JSONResponse({        'id': request.auth.user_id,        'name': request.auth.display_name,    })user_provider = InMemoryProvider({    'user1@example.com': User(id='user1@example.com'),    'user2@example.com': User(id='user2@example.com'),})authenticators = [    APIKeyAuthenticator(user_provider=user_provider),]routes = [    Route('/', whoami_view),]middleware = [    Middleware(AuthenticationMiddleware, authenticators=authenticators)]app = Starlette(routes=routes, middleware=middleware)```Now save the file to `myapp.py` and run it with [uvicorn](https://uvicorn.org) application server:```bashuvicorn myapp:app```Open `http://127.0.0.1:8000/` and see that your request is not authenticated and user is anonymous. Let's pass API keyvia query parameters to make the configured APIKeyAuthenticator to load user. This timeopen `http://127.0.0.1:8000/?apikey=user1@example.com` in your browser. Now the request is fully authenticated as User1user.For more details refer to the doc sections below.## Docs1. [UserLike protocol (a user model)](docs/userlike_protocol.md)2. [Load user from databases using User Providers](docs/user_providers.md)6. [Request authentication](docs/authentication.md)7. [Built-in authenticators](docs/authenticators.md)5. [User token](docs/user_token.md)5. [Passwords](docs/password_verification.md)4. [Login/Logout flow](docs/login_logout.md)8. [User impersontation](docs/impersonation.md)## UsageSee [examples/](examples) directory.</longdescription>
</pkgmetadata>