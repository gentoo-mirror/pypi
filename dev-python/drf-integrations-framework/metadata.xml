<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DRF Integrations Framework[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/pre-commit/pre-commit)[![Build Status](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fyoyowallet%2Fdrf-integrations-framework%2Fbadge%3Fref%3Dmaster&amp;style=flat)](https://actions-badge.atrox.dev/yoyowallet/drf-integrations-framework/goto?ref=master)DRF Integrations Framework is a toolkit that plugs in to [Django REST Framework](https://www.django-rest-framework.org/)and simplifies the management of third party integrations. If you find yourself connecting to multiple services withdifferent sets of credentials, or handling multiple inbound requests from third party services, DRF IntegrationsFramework will probably simplify that for you. DRF Integrations Framework will help you split the responsibilitiesbetween the source/destiny of events, how these requests are authenticated and the business logic associated to them.## Requirements- Python 3.7+- Django 2.2+- Django REST Framework 3.9.2+- Django OAuth Toolkit 1.7.1+## InstallationThe following library is required in order to build on `Linux systems`. It fixes theproblem where `Error: pg_config executable not found.` is given when installing psycopg2via `poetry install````sudo apt install libpq-dev```Install from PyPi:```bashpip install drf-integrations-framework```Or install from source:```bashpip install https://github.com/yoyowallet/drf-integrations-framework/archive/v0.7.1.tar.gz```Add the apps to your `INSTALLED_APPS`:```pythonINSTALLED_APPS = [    ...,    &quot;rest_framework&quot;,    &quot;oauth2_provider&quot;,    &quot;drf_integrations&quot;,]```If you are going to configure any inbound integration, you will want to add the integration URLs to your `urls.py`:```pythonfrom drf_integrations import integrationsurlpatterns = [    ...] + integrations.get_urls()```## Configuration### SettingsDRF Integrations Framework relies on Django OAuth Toolkit to manage third party applications. In order to be able to useit, first you'll need to configure DOT by setting (at least) the model references in your settings.```pythonOAUTH2_PROVIDER_APPLICATION_MODEL = &quot;drf_integrations.Application&quot;OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = &quot;drf_integrations.AccessToken&quot;OAUTH2_PROVIDER_GRANT_MODEL = &quot;drf_integrations.Grant&quot;OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = &quot;drf_integrations.RefreshToken&quot;```Then, similarly, you will have to configure the model for the integrations.```pythonINTEGRATIONS_APPLICATION_INSTALLATION_MODEL = &quot;drf_integrations.ApplicationInstallation&quot;```You will also have to configure how the integrations are stored in the database. On the one hand, you will have to setthe type of JSON field your DB uses. On the other hand, you will have to set the name of the attribute where you want torelate the integrations.```pythonDB_BACKEND_JSON_FIELD = &quot;django.db.models.JSONField&quot;INTEGRATIONS_APPLICATION_INSTALLATION_INSTALL_ATTRIBUTE = &quot;organisation&quot;```Finally, you have to set the list of integrations that are available in your system (see the following section to learnabout creating integrations).```pythonINSTALLED_INTEGRATIONS = [    &quot;example.drf_integrations_example.api.integrations.APIClientIntegration&quot;,]```### Creating integrationsAn integration is represented by an extension of `BaseIntegration`. Then, the integration will be available to beinstalled to different clients (as related with the previously configured`INTEGRATIONS_APPLICATION_INSTALLATION_INSTALL_ATTRIBUTE`) once it is stored into an `Application`. This can be done intwo different ways:1. Internal integrations (or non-local integrations) are those that can be configured once and installed to different clients with differentparameters. For example, your system may connect to Mixpanel, the connections and interactions with the service are allthe same, only the secret in the connection changes.   These will only have 1 `Application` object in the database, and it can be related to multiple installations. They   can also be automatically created by using the `syncregistry` management command.   ```bash   python manage.py syncregistry   ```1. Local integrations are those that are specific to just one client. For example, OAuth clients are local, there is1 application per client, which will have the specific credentials for them, so they can only be installed once. Theseare usually created on demand as required by clients.An integration broadly has 3 functions:1. Generates a list of URLs that a third party represented by this integration can connect to.Mainly used for inward integrations.1. Returns a client that can connect to the third party it represents. Mainly used for outward integrations.1. Produce queryset filter lookups to search for installations of the integration.Once you have a class inheriting from `BaseIntegration` that represents a third party, simply add it to`INSTALLED_INTEGRATIONS` in your settings and the sky is the limit! You can create custom authentication backends,permissions, event hooks... Take a look at [the example](example) to see some basic examples of how you can make useof DRF Integrations Framework.### PreconfiguredThere are some features that DRF Integrations Framework provides out of the box.- Admin model for `ApplicationInstallation` that already handles integration-specific configuration via dynamic forms.- Automatic form validation for integrations that have one.- An authentication backend for local OAuth2 integrations(`drf_integrations.auth_backends.IntegrationOAuth2Authentication`).## Running the testsTo run the tests you need to have a postgresql server running on localhost and have apostgres user/role defined. To create the postgres user and role you can use thefollowing:```psql -c 'CREATE ROLE postgres WITH LOGIN SUPERUSER' ```To run the tests execute the following```make tests```If running tests under pycharm ensure that `python tests` -&gt; `pytest` is used and setthe `Additional Arguments` to `--no-migrations`Failing to specify `--no-migrations` will result in the following error:```ValueError: Related model 'oauth2_provider.idtoken' cannot be resolved```## ChangelogSee [Releases](https://github.com/yoyowallet/drf-integrations-framework/releases)## AuthorsDRF Integrations Framework is an original idea by [@jianyuan](https://github.com/jianyuan), developed and maintained bythe platform team at [@yoyowallet](https://github.com/yoyowallet).</longdescription>
</pkgmetadata>