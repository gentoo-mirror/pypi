<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Python package](https://github.com/joegasewicz/bobtail/actions/workflows/python-package.yml/badge.svg)](https://github.com/joegasewicz/bobtail/actions/workflows/python-package.yml)[![Upload Python Package](https://github.com/joegasewicz/bobtail/actions/workflows/python-publish.yml/badge.svg)](https://github.com/joegasewicz/bobtail/actions/workflows/python-publish.yml)[![GitHub license](https://img.shields.io/github/license/joegasewicz/bobtail)](https://github.com/joegasewicz/bobtail/blob/master/LICENSE.md)[//]: # (![PyPI - Python Version]&amp;#40;https://img.shields.io/pypi/pyversions/bobtail&amp;#41;)![Bobtail](bobtail.png?raw=true &quot;Bobtail&quot;)A little Python http framework⚠️ *Ready to use in `v0.1.0`, production ready in `v1.0.0`*Read the [docs](https://bobtail.readthedocs.io/en/latest/)## Install```pipenv install bobtailpipenv install gunicorn```### Getting StartedAn example of the smallest Bobtail app```pythonfrom typing import Tuple, Optional, Dictfrom bobtail import BobTail, AbstractRoute, Request, Responseclass Images:    def get(self, req, res):        res.set_body({id: 1})routes = [    (Images(), &quot;/images&quot;)]app = BobTail(routes=routes)```### Run```pipenv run  gunicorn api:app```### MiddlewareBobtail middleware#### Using third party middleware```pythonfrom bobttail_logger import BobtailLoggerapp = Bobtail(routes=routes)# Here we are using `bobtail-logger` logging middlewareapp.use(BobtailLogger())```Middleware currently available- [bobtail-cors](https://github.com/joegasewicz/bobtail-cors)- [bobtail-logger](https://github.com/joegasewicz/bobtail-logger)- [bobtail-upload](https://github.com/joegasewicz/bobtail-upload)- [bobtail-jinja2](https://github.com/joegasewicz/bobtail-jinja2)Creating custom middleware example. A Middleware object must implement `AbstractMiddleware`. ```pythonfrom bobtail import Request, Responsefrom bobtail.middleware import AbstractMiddleware, Tailclass BobtailCors(AbstractMiddleware):    def run(self, req: Request, res: Response, tail: Tail) -&gt; None:        res.set_headers({            &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;,        })        tail(req, res)```### HTML TemplatesBobtail does not ship with a templating engine directly, but you can install and usea templating engine with ease via middleware.Currently, there is middleware support for Jinja2, for example```pythonfrom bobtail_jinja2 import BobtailJinja2blog = BobTail(routes=routes)blog.use(BobtailJinja2(template_dir=&quot;templates&quot;))```Then to use in a request handler```pythondef get(self, req: Request, res: Response) -&gt; None:    res.jinja2.render(res, &quot;layout.jinja2&quot;, data={&quot;name&quot;: &quot;joe&quot;})```### Set the HeadersYou can set the headers with the `Response` object's `set_headers` method. The default headersare `Content-Type: application/json`.```pythonclass Images:    def get(self, req, res):        res.set_headers({&quot;Content-type&quot;: &quot;text/plain&quot;})```### Set the response statusYou can set the status with the `Response` object's `set_status` method. The default statusis always set to `200` if there are no errors.```pythonclass Images:    def get(self, req, res):        res.set_status(202)```## Request### Request ArgsYou can specify the type of `Request` arguments using curly braces &amp; within the name &amp; type seperated by a colon, for example:```/images/{id:int}/{name:str}/{is_raining:bool}```To access request arguments inside a route handler, use the `Request` object's `get_arg` method, for example:```pythondef get(self, req, res):    id = req.get_args(&quot;id&quot;) # int    name = req.get_args(&quot;name&quot;) # str    is_raining = req.get_args(&quot;is_raining&quot;) # bool```### Request Body- JSON ```python# marshals json to a python dictreq.get_json()```- Plain Text ```python# returns a stringreq.get_body()```- Urlencoded form data ```python# returns a pyton dictreq.get_form_data()```- Multipart form data ```python# returns a pyton dictreq.get_multipart_data()```The `Request` object provides methods to easily get form values. By default, if a form valuedoesn't exist, then either `FormDataError` or `MultipartFormDataError` exceptions will be raised.- Get Form Field Value```pythonfrom bobtail.exceptions import FormDataErrortry:    email = req.form.get_field(&quot;email&quot;)except FormDataError:    pass # handle no form value```- Get Multipart Form Field Value```pythonfrom bobtail.exceptions import MultipartFormDataErrortry:    email = req.multipart.get_field(&quot;email&quot;)except MultipartFormDataError:    pass # handle no multipart form value```- Get Multipart Form File Value```pythonfrom bobtail.exceptions import MultipartFormDataErrortry:    email = req.multipart.get_file(&quot;image&quot;)except MultipartFormDataError:    pass # handle no multipart form value```- Get Multipart Form File Name```pythonfrom bobtail.exceptions import MultipartFormDataErrortry:    email = req.multipart.get_name(&quot;image&quot;)except MultipartFormDataError:    pass # handle no multipart form value```- Get Multipart Form File Data```pythonfrom bobtail.exceptions import MultipartFormDataErrortry:    email = req.multipart.get_data(&quot;image&quot;)except MultipartFormDataError:    pass # handle no multipart form value```- Get Multipart Form File Mimetype```pythonfrom bobtail.exceptions import MultipartFormDataErrortry:    email = req.multipart.get_mimetype(&quot;image&quot;)except MultipartFormDataError:    pass # handle no multipart form value```### Query ParamsThis method returns a dict og query params where the keyis on the left side of the `=` sign &amp; the value is pn the right.For example:```python# for route &quot;/images?name=joe&amp;age=48&quot;def get(self, req: Request, res: Response):    result = req.get_params() # {&quot;name&quot;: &quot;joe&quot;, &quot;age&quot;: &quot;48&quot;}```### Static FilesTo declare a static route postfix a `*` to the route's path::```pythonfrom bobtail import BobTail AbstractRoute, BaseOptionsfrom bobtail_jinja2 import BobtailJinja2routes = [    (Static(), &quot;/static/*&quot;),]class Options(BaseOptions):    STATIC_DIR = &quot;app/static&quot;    TEMPLATE_DIR = &quot;app/templates&quot;blog = BobTail(routes=routes, options=Options())blog.use(BobtailJinja2(template_dir=&quot;app/templates&quot;))```Calling `set_static` from within a route method will render a staticfile such as a .css, .js or a media type file. The :class:`~BaseOptions`class sets the `STATIC_DIR` directory.```python    class Static(AbstractRoute):        def get(self, req: Request, res: Response) -&gt; None:            res.set_static(&quot;/static/imgs/cat1.jpg&quot;)```You can set the static file path using the :class:`~BaseOptions`.```pythonclass Options(BaseOptions):    STATIC_DIR = &quot;/static&quot;# Now in a route handler we can access static directory the via optionsclass Static(AbstractRoute):    def get(self, req: Request, res: Response) -&gt; None:        res.set_static(f&quot;{res.options.STATIC_DIR}/imgs/cat1.jpg&quot;)```By default, `STATIC_DIR` is set to `/static`, if your static file is nestedwithin a Python package, for example `app/static` the set as `STATIC_DIR = &quot;app/static&quot;`To render an image from within a Jinja2 template include the full path including thestatic directory name or path. For example::```html&lt;!-- if STATIC_DIR = &quot;/static&quot; --&gt;&lt;body&gt;    &lt;img src=&quot;/static/imgs/cat1.jpg&quot; /&gt;&lt;/body&gt;```OR without the first forward slash::```html&lt;body&gt;    &lt;img src=&quot;static/imgs/cat1.jpg&quot; /&gt;&lt;/body&gt;```### OOP ApproachIf you prefer to organise your routes in a more OOP approach, you can implement the`AbstractRoute` abstract class. It's especially useful when using an IDE like Pycharmwhere the IDE will generate automatically all the require methods.```pythonfrom bobtail import AbstractRoute, Request, Response# (Pycharm) - right click over the `Image` class name &amp; select `Show context actions`# then click `implement abstract methods`, then select all and click ok.class Images(AbstractRoute):     pass```Which will generate the following:```pythonfrom bobtail import AbstractRoute, Request, Responseclass Images(AbstractRoute):    def get(self, req: Request, res: Response):        pass        def post(self, req: Request, res: Response):        pass    def put(self, req: Request, res: Response):        pass    def delete(self, req: Request, res: Response):        pass```</longdescription>
</pkgmetadata>