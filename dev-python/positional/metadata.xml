<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========positional==========A decorator which enforces only some args may be passed positionally. This library is minimally maintained and should only be used in cases of Python 2 to Python 3 conversions. Please write only Python 3 code going forward.|PyPi||Build Status||Documentation Status|The Basics==========`positional` provides a decorator which enforces only some args may be passedpositionally. The idea and some of the code was taken from the oauth2 clientof the google-api client.The decorator makes it easy to support Python 3 style key-word onlyparameters. For example, in Python 3 it is possible to write:.. code:: python    &gt;&gt;&gt; def fn(pos1, *, kwonly1, kwonly2=None):    ...     ...All named parameters after `*` must be a keyword:.. code:: python    &gt;&gt;&gt; fn(10, 'kw1', 'kw2')  # Raises exception.    &gt;&gt;&gt; fn(10, kwonly1='kw1', kwonly2='kw2')  # Ok.To replicate this behaviour with the positional decorator you simply specifyhow many arguments may be passed positionally.First to import the decorator we typically use:.. code:: python    &gt;&gt; from positional import positionalReplicating the Example above:.. code:: python    &gt;&gt;&gt; @positional(1)    ... fn(pos1, kwonly1=None, kwonly2=None):    ...     ...If no default value is provided to a keyword argument, it becomes a requiredkeyword argument:.. code:: python    &gt;&gt;&gt; @positional(0)    ... def fn(required_kw):    ...     ...This must be called with the keyword parameter:.. code:: python    &gt;&gt;&gt; fn() # Raises exception    &gt;&gt;&gt; fn(10) # Raises Exception    &gt;&gt;&gt; fn(required_kw=10) # OKWhen defining instance or class methods always remember that in python thefirst positional argument passed is the instance; you will need to account for`self` and `cls`:.. code:: python    &gt;&gt;&gt; class MyClass(object):    ...    ...     @positional(2)    ...     def my_method(self, pos1, kwonly1=None):    ...         ...    ...    ...     @classmethod    ...     @positional(2)    ...     def my_method(cls, pos1, kwonly1=None):    ...         ...If you would prefer not to account for `self` and `cls` you can use the`method` and `classmethod` helpers which do not consider the initialpositional argument. So the following class is exactly the same as the oneabove:.. code:: python    &gt;&gt;&gt; class MyClass(object):    ...    ...     @positional.method(1)    ...     def my_method(self, pos1, kwonly1=None):    ...         ...    ...    ...     @positional.classmethod(1)    ...     def my_method(cls, pos1, kwonly1=None):    ...         ...If a value isn't provided to the decorator then it will enforce thatevery variable without a default value will be required to be a kwarg:.. code:: python    &gt;&gt;&gt; @positional()    ... def fn(pos1, kwonly1=None):    ...     ...    ...    &gt;&gt;&gt; fn(10)  # Ok.    &gt;&gt;&gt; fn(10, 20)  # Raises exception.    &gt;&gt;&gt; fn(10, kwonly1=20)  # Ok.This behaviour will work with the `positional.method` and`positional.classmethod` helper functions as well:.. code:: python    &gt;&gt;&gt; class MyClass(object):    ...    ...    @positional.classmethod()    ...    def my_method(cls, pos1, kwonly1=None):    ...        ...    ...    &gt;&gt;&gt; MyClass.my_method(10)  # Ok.    &gt;&gt;&gt; MyClass.my_method(10, 20)  # Raises exception.    &gt;&gt;&gt; MyClass.my_method(10, kwonly1=20)  # Ok.For compatibility reasons you may wish to not always raise an exception soa WARN mode is available. Rather than raise an exception a warning will beemitted... code:: python    &gt;&gt;&gt; @positional(1, enforcement=positional.WARN):    ... def fn(pos1, kwonly=1):    ...     ...Available modes are:- positional.EXCEPT - the default, raise an exception.- positional.WARN - emit a warning... |Build Status| image:: https://travis-ci.org/morganfainberg/positional.svg?branch=master   :target: https://travis-ci.org/morganfainberg/positional.. |Documentation Status| image:: https://readthedocs.org/projects/positional/badge/?version=latest   :target: http://positional.readthedocs.org/en/latest/?badge=latest.. |PyPi| image:: https://badge.fury.io/py/positional.png   :target: http://badge.fury.io/py/positional</longdescription>
</pkgmetadata>