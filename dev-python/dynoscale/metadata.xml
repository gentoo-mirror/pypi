<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dynoscale Agent### Simple yet efficient scaling agent for Python apps on HerokuDynoscale Agent supports both **WSGI** and **ASGI** based apps and **RQ** workers _(DjangoQ and Celery support is comingsoon)_.The easies way to use it in your project is import the included Gunicorn hook in your _gunicorn.conf.py_ but we'llexplainthe setup process in more detail below.### Note that for auto-scaling to work, your web/workers have to run on _Standard_ or _Performace_ dynos!## Getting startedThere are generally 3 steps to set up autoscaling with Dynoscale:1) Add **Dynoscale** addon to your Heroku app2) Install **dynoscale** package3) Initialize **dynoscale** when you app starts### 1) Enabling Dynoscale add-onThere are two ways to add the Dynoscale add-on to your app.  First one is to add the add-on through the Heroku dashboard by navigating to _your app_, then selecting the _resources_tab and finally searching for _dynoscale_ then select your plan and at this point your app will be restarted with theaddon enabled.The second option is to install it with _heroku cli tools_, using this command for example:    heroku addons:create dscale:performance### 2) Installing dynoscale agent packageThis is same as installing any other Python package, for example: `python -m pip install dynoscale`.If you'd like to confirm it's installed by heroku, then run:    heroku run python -c &quot;import dynoscale; print(dynoscale.__version__)&quot;  which will print out the installed version (for example: `1.2.0`)If you'd like to confirm that dynoscale found the right env vars run:    heroku run python -c &quot;from dynoscale.config import Config; print(Config())&quot;and you'll likely see something like this:    Running python -c &quot;from dynoscale.config import Config; print(Config())&quot; on ‚¨¢ your-app-name-here... up, run.9816 (Eco)    {&quot;DYNO&quot;: &quot;run.9816&quot;, &quot;DYNOSCALE_DEV_MODE&quot;: false, &quot;DYNOSCALE_URL&quot;: &quot;https://dynoscale.net/api/v1/report/yoursecretdynoscalehash&quot;, &quot;redis_urls&quot;: {&quot;REDISCLOUD_URL&quot;: &quot;redis://default:anothersecrethere@redis-12345.c258.us-east-1-4.ec2.cloud.redislabs.com:12345&quot;}}### 3) Initialize dynoscale during the app startupThis can take multiple forms and depends on your app. Is your app WSGI or ASGI? How do you serve it? Do you haveworkers? There are [examples](https://github.com/Mjolnir-Software/dynoscale-python/tree/main/examples) in the repo, takea look! I hope you'll find something close to your setup.If you have a WSGI app _(ex.: Bottle, Flask, CherryPy, Pylons, Django, ...)_ and you serve the app with **Gunicorn**then in your `gunicorn.conf.py` just import the pre_request hook from dynoscale and that's it:```python# `gunicorn.conf.py` - Using Dynoscale Gunicorn Hookfrom dynoscale.hooks.gunicorn import pre_request  # noqa # pylint: disable=unused-import```Or if you prefer you can **instead** pass your WSGI app into DynoscaleWsgiApp():```python# `web.py` - Flask Examplefrom dynoscale.wsgi import DynoscaleWsgiAppapp = Flask(__name__)app.wsgi_app = DynoscaleWsgiApp(app.wsgi_app)```Do you use Gunicorn with Uvicorn workers? Replace `uvicorn.workers.UvicornWorker`with `dynoscale.DynoscaleUvicornWorker` like so:```python# Contents of gunicorn.conf.py...# worker_class = 'uvicorn.workers.UvicornWorker'worker_class = 'dynoscale.uvicorn.DynoscaleUvicornWorker'...```... and you're done!Do you serve you ASGI app some other way? (ex.: Starlette, Responder, FastAPI, Sanic, Django, Guillotina, ...)_ wrapyour ASGI appwith DynoscaleASGIApp:```python# `web.py` - Starlette Exampleimport osfrom starlette.applications import Starlettefrom starlette.responses import Responsefrom starlette.routing import Routefrom dynoscale.asgi import DynoscaleAsgiAppasync def home(_):    return Response(&quot;Hello from Starlette, scaled by Dynoscale!&quot;, media_type='text/plain')app = DynoscaleAsgiApp(Starlette(debug=True, routes=[Route('/', endpoint=home, methods=['GET'])]))if __name__ == &quot;__main__&quot;:    import uvicorn    uvicorn.run('web:app', host='0.0.0.0', port=int(os.getenv('PORT', '8000')), log_level=&quot;info&quot;)```---## üìñ Complete WSGI example1. Add __dynoscale__ to your app on Heroku: `heroku addons:create dscale`2. Install __dynoscale__:  `python -m pip install dynoscale`    1. Add __dynoscale__ to your app, you can either wrap your app or if you use Gunicorn, you can also just use one of       its hooks (`pre_request`):        1. If you want to wrap you app (let's look at Flask example):       ```python       import os              from flask import Flask           app = Flask(__name__)              @app.route(&quot;/&quot;)       def index():           return &quot;Hello from Flask!&quot;           if __name__ == &quot;__main__&quot;:           app.run(host='0.0.0.0', port=int(os.getenv('PORT', '8000')), debug=True)       ```       then just wrap your WSGI app like this       ```python       from flask import Flask       # FIRST, IMPORT DYNOSCALE       from dynoscale.wsgi import DynoscaleWsgiApp           app = Flask(__name__)              @app.route(&quot;/&quot;)       def index():           return &quot;Hello from Flask!&quot;              if __name__ == &quot;__main__&quot;:           # THE CHANGE BELOW IS ALL YOU NEED TO DO           app.wsgi_app = DynoscaleWsgiApp(app.wsgi_app)           # YUP, WE KNOW, CAN'T GET SIMPLER THAN THAT :)           app.run(host='127.0.0.1', port=3000, debug=True)       ```    2. Or, if you'd prefer to use the hook, then change your `gunicorn.conf.py` accordingly instead:       ```python       # This one line will do it for you:       from dynoscale.hooks.gunicorn import pre_request  # noqa # pylint: disable=unused-import       ```        If you already use the `pre_request` hook, alias ours and call it manually:       ```python       # Alias the import...       from dynoscale.hooks.gunicorn import pre_request as hook              # ...and remember to call ours first!       def pre_request(worker, req):          hook(worker, req)          # ...do your own thing...       ```3. __Profit!__ _Literally, this will save you money! üí∞üí∞üí∞ üòè_## üìñ Complete ASGI example1. Add __dynoscale__ to your app on Heroku: `heroku addons:create dscale`2. Prepare your amazing webapp, we'll use **Starlette** served by **Gunicorn** with **Uvicorn** workers:    ```python    # web.py    import datetime    from starlette.applications import Starlette    from starlette.responses import Response    from starlette.routing import Route            async def home(_):        return Response(            &quot;Hello from üåü Starlette üåü served by Gunicorn using Uvicorn workers and scaled by Dynoscale!\n&quot;            f&quot;It's {datetime.datetime.now()} right now.&quot;,            media_type='text/plain'        )            app = Starlette(debug=True, routes=[Route('/', endpoint=home, methods=['GET'])])    ```   ... add Gunicorn config:    ```python    # gunicorn.conf.py    import os    # ENV vars    PORT = int(os.getenv('PORT', '3000'))    WEB_CONCURRENCY = int(os.getenv('WEB_CONCURRENCY', '10'))        # Gunicorn config    wsgi_app = &quot;web:app&quot;        # ‚îå---------- THIS HERE IS ALL OF DYNOSCALE SETUP ----------‚îê    # | # worker_class = 'uvicorn.workers.UvicornWorker'        |    worker_class = 'dynoscale.uvicorn.DynoscaleUvicornWorker' # |    # ‚îî---------------------------------------------------------‚îò        bind = f&quot;0.0.0.0:{PORT}&quot;    preload_app = True        workers = WEB_CONCURRENCY    max_requests = 1000    max_requests_jitter = 50        accesslog = '-'    loglevel = 'debug'    ```3. Install all the dependencies:   - `python -m pip install &quot;uvicorn[standard]&quot; gunicorn dynoscale`4. Start it up with:   ```bash     DYNO=web.1 DYNOSCALE_DEV_MODE=true DYNOSCALE_URL=https://some_request_bin_or_some_such.com gunicorn   ```   - On Heroku, DYNO and DYNOSCALE_URL will be set for you, you should only have `web: gunicorn` in your procfile.   - In this example we start Dynoscale in dev mode to simulate random queue times, don't do this on Heroku!5. That's it you're done, now __Profit!__ _Literally, this will save you money! üí∞üí∞üí∞ üòè_## ‚ÑπÔ∏è InfoYou should considerthe `dynoscale.wsgi.DynoscaleWsgiApp(wsgi_app)`, `dynoscale.hooks.gunicorn.pre_request(worker, req)`, `dynoscale.asgi.DynoscaleASGIApp(asgi_app)`and `dynoscale.uvicorn.DynoscaleUvicornWorker` the only parts of the public interface.## ü§Ø ExamplesPlease check out `./examples`, yes, we do have examples in the repository :)## üë©üíª ContributingInstall development requirements:- `pip install -e &quot;.[test]&quot;`You can run _pytest_ from terminal: `pytest`You can run _flake8_ from terminal: `flake8 ./src`  # Changelog of `dynoscale` for Python### 1.2.2 [TBD] - updated test/dev dependencies - adding support for TLS redis urls with self-signed certificates### 1.2.1 [2023-03-01] - Fix: Limit resource consumption while reporting on extreme numbers of pending tasks.### 1.2.0 [2023-01-08] - dropping support for Python 3.7, 3.8, 3.9 - adding support for Gunicorn with Uvicorn workers, use dynoscale.uvicorn.DynoscaleUnicornWorker### 1.1.3 [2023-01-13]- Added support for ASGI through DynoscaleAsgiApp class- Added options to control DS repository storage location with environment variables### 1.1.2 [2022-05-27]- Added logging to DynoscaleRQLogger### 1.1.1 [2022-05-12]- fixed issue when using GUNICORN hook (Incorrect key name in headers)### 1.1.0 [2022-03-25]- Support for [RQ](https://python-rq.org)### 1.0.0 [2022-02-27]First public release</longdescription>
</pkgmetadata>