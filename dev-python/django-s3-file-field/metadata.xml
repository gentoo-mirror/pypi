<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-s3-file-field[![PyPI](https://img.shields.io/pypi/v/django-s3-file-field)](https://pypi.org/project/django-s3-file-field/)django-s3-file-field is a Django library for uploading files directly to[AWS S3](https://aws.amazon.com/s3/) or [MinIO](https://min.io/) Storage from HTTP clients(browsers, CLIs, etc.).### Benefitsdjango-s3-file-field makes long-running file transfers (with large files or slow connections)more efficient, as the file content is no longer proxied through the Django server. This also freesDjango from needing to maintain active HTTP requests during file upload, decreasing server load andfacilitating deployment to environments like[Heroku, which have short, strict request timeouts](https://devcenter.heroku.com/articles/request-timeout).### ScopeThe principal API of django-s3-file-field is the `S3FileField`, which is a subclass of[Django's `FileField`](https://docs.djangoproject.com/en/4.1/ref/models/fields/#filefield).django-s3-file-field does not affect any operations other than uploading from external HTTPclients; for all other file operations (downloading, uploading from the Python API, etc.), refer to[Django's file management documentation](https://docs.djangoproject.com/en/4.1/topics/files/).django-s3-file-field supports both the creation and modification (by overwrite) of`S3FileField`-containing `Model` instances.It supports server-rendered views, via the Forms API, with Form `Field` and `Widget` subclasseswhich will automatically be used for `ModelForm` instances.It also supports RESTful APIs, via Django Rest Framework's Serializer API, with aSerializer `Field` subclass which will automatically be used for `ModelSerializer` instances.## Installationdjango-s3-file-field must be used with a compatible Django Storage, which are:* `S3Boto3Storage` in [django-storages](https://django-storages.readthedocs.io/),  for [AWS S3](https://aws.amazon.com/s3/)* `MinioStorage` or `MinioMediaStorage` in [django-minio-storage](https://django-minio-storage.readthedocs.io/),  for [MinIO](https://min.io/)After the appropriate Storage is installed and configured, install django-s3-file-field, using thecorresponding extra:```bashpip install django-s3-file-field[boto3]```or```bashpip install django-s3-file-field[minio]```Enable django-s3-file-field as an installed Django app:```python# settings.pyINSTALLED_APPS = [    ...,    's3_file_field',]```Add django-s3-file-field's URLconf to the root URLconf; the path prefix (`'api/s3-upload/'`)can be changed arbitrarily as desired:```python# urls.pyfrom django.urls import include, pathurlpatterns = [    ...,    path('api/s3-upload/', include('s3_file_field.urls')),]```## UsageFor all usage, define an `S3FileField` on a Django `Model`, instead of a `FileField`:```pythonfrom django.db import modelsfrom s3_file_field import S3FileFieldclass Resource(models.Model):    blob = S3FileField()```### Django FormsWhen defining a[Django `ModelForm`](https://docs.djangoproject.com/en/4.1/topics/forms/modelforms/),the appropriate Form `Field` will be automatically used:```pythonfrom django.forms import ModelFormfrom .models import Resourceclass ResourceForm(ModelForm):    class Meta:        model = Resource        fields = ['blob']```Forms using django-s3-file-field include additional[assets](https://docs.djangoproject.com/en/4.1/topics/forms/media/), which it's essential to renderalong with the Form. Typically, this can be done in any Form-containing Template as:```&lt;head&gt;  {# Assuming the Form is availible in context as &quot;form&quot; #}  {{ form.media }}&lt;/head&gt;```### Django Rest FrameworkWhen defining a[Django Rest Frameowrk `ModelSerializer`](https://www.django-rest-framework.org/api-guide/serializers/#modelserializer),the appropriate Serializer `Field` will be automatically used:```pythonfrom rest_framework import serializersfrom .models import Resourceclass ResourceSerializer(serializers.ModelSerializer):    class Meta:        model = Resource        fields = ['blob']```Clients interacting with these RESTful APIs will need to use a corresponding django-s3-file-fieldclient library. Client libraries (and associated documentation) are available for:* [Python](python-client/README.md)* [Javascript / TypeScript](javascript-client/README.md)### PytestWhen installed, django-s3-file-field makes several[Pytest fixtures](https://docs.pytest.org/en/latest/explanation/fixtures.html) automaticallyavailable for use.The `s3ff_field_value` fixture will return a valid input value for Django `ModelForm` orDjango Rest Framework `ModelSerializer` subclasses:```pythonfrom .forms import ResourceFormdef test_resource_form(s3ff_field_value):    form = ResourceForm(data={'blob': s3ff_field_value})    assert form.is_valid()```Alternatively, the `s3ff_field_value_factory` fixture transforms a `File` object into a valid inputvalue (for Django `ModelForm` or Django Rest Framework `ModelSerializer` subclasses), providingmore control over the uploaded file:```pythonfrom django.core.files.storage import default_storagefrom rest_framework.test import APIClientdef test_resource_create(s3ff_field_value_factory):    client = APIClient()    stored_file = default_storage.open('some_existing_file.txt')    s3ff_field_value = s3ff_field_value_factory(stored_file)    resp = client.post('/resource', data={'blob': s3ff_field_value})    assert resp.status_code == 201```</longdescription>
</pkgmetadata>