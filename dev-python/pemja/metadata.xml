<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PemJa## What is it?PemJa is an open source cross language call framework based on FFI. It aims to provide a high-performanceframework of calling between different languages.## Where to get itPython binary installers for the latest released version are available at the [Python package index](https://pypi.org/project/pemja)```bashpip install pemja```Java Maven Dependency```&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;pemja&lt;/artifactId&gt;    &lt;version&gt;{version}&lt;/version&gt;&lt;/dependency&gt;```## Dependencies- [NumPy - Adds support for large, multi-dimensional arrays, matrices and high-level mathematical functions to operate on these arrays](https://www.numpy.org)## Installation from sourcesPrerequisites for building PemJa:* Unix-like environment (we use Linux, Mac OS X)* Git* Maven (we recommend version 3.2.5 and require at least 3.1.1)* Java 8 or 11 (Java 9 or 10 may work)* Python &gt;= 3.7 (we recommend version 3.7, 3.8, 3.9)```git clone https://github.com/alibaba/pemja.gitcd pemjamvn clean install -DskipTestspip install -r dev/dev-requirements.txtpython setup.py sdistpip install dist/*.tar.gz```## Usage```javaString path = ...;PythonInterpreterConfig config = PythonInterpreterConfig    .newBuilder()    .setPythonExec(&quot;python3&quot;) // specify python exec    .addPythonPaths(path) // add path to search path    .build();PythonInterpreter interpreter = new PythonInterpreter(config);// set &amp; getinterpreter.set(&quot;a&quot;, 12345);interpreter.get(&quot;a&quot;); // Objectinterpreter.get(&quot;a&quot;, Integer.class); // Integer// exec &amp; evalinterpreter.exec(&quot;print(a)&quot;);// invoke functionsinterpreter.exec(&quot;import str_upper&quot;);String result = interpreter.invoke(&quot;str_upper.upper&quot;, &quot;abcd&quot;);// Object invoke(String name, Object... args);// Object invoke(String name, Object[] args, Map&lt;String, Object&gt; kwargs);// invoke object methods/*// invoke.pyclass A:       def __init__(self):           self._a = 0          def get_value(self):           return self._a          def add(self, n):           self._a += n          def add_all(self, *args):           for item in args:               self._a += item               return self._a          def minus(self, n):           self._a -= n           return self._a*/interpreter.exec(&quot;import invoke&quot;);interpreter.exec(&quot;a = invoke.A()&quot;);interpreter.invokeMethod(&quot;a&quot;, &quot;add&quot;, 3);interpreter.invokeMethod(&quot;a&quot;, &quot;minus&quot;, 2);interpreter.invokeMethod(&quot;a&quot;, &quot;add_all&quot;, 1, 2, 3);// python callback java methods/*// invoke_callback.pyfrom pemja import findClassStringBuilder = findClass('java.lang.StringBuilder')Integer = findClass('java.lang.Integer')def callback_java():    sb = StringBuilder()    sb.append('pemja')    sb.append('java')    sb.append('python')    sb.append(Integer.toHexString(Integer.MAX_VALUE))    return sb.toString()*/interpreter.exec(&quot;import call_back&quot;)print(interpreter.invoke(&quot;call_back.callback_java&quot;))```## Documentation</longdescription>
</pkgmetadata>