<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pyfmmlib: A Python Interface to FMMLIB======================================.. image:: https://gitlab.tiker.net/inducer/pyfmmlib/badges/main/pipeline.svg    :alt: Gitlab Build Status    :target: https://gitlab.tiker.net/inducer/pyfmmlib/commits/main.. image:: https://github.com/inducer/pyfmmlib/workflows/CI/badge.svg?branch=main    :alt: Github Build Status    :target: https://github.com/inducer/pyfmmlib/actions?query=branch%3Amain+workflow%3ACI+event%3Apush.. image:: https://badge.fury.io/py/pyfmmlib.png    :alt: Python Package Index Release Page    :target: https://pypi.org/project/pyfmmlib/.. image:: https://zenodo.org/badge/8921021.svg    :alt: Zenodo DOI for latest release    :target: https://zenodo.org/badge/latestdoi/8921021pyfmmlib is a Python wrapper for `fmmlib2d&lt;https://cims.nyu.edu/cmcl/fmm2dlib/fmm2dlib.html&gt;`_ and `fmmlib3d&lt;https://cims.nyu.edu/cmcl/fmm3dlib/fmm3dlib.html&gt;`_ implementations of the`fast multipole method &lt;https://en.wikipedia.org/wiki/Fast_multipole_method&gt;`_ for`Laplace &lt;https://en.wikipedia.org/wiki/Laplace%27s_equation&gt;`_ and`Helmholtz &lt;https://en.wikipedia.org/wiki/Helmholtz_equation&gt;`_ potentials byZydrunas Gimbutas and Leslie Greengard (and including code by many more people).This wrapper is far from comprehensive. It just catches the things I ended upneeding. Nonetheless, the FMMs and a fair bit of other useful stuff is accessible.Installation------------Binary wheels and source code are available from the `Python package index &lt;https://pypi.org/project/pyfmmlib/&gt;`_.Thank you to `Isuru Fernando &lt;https://github.com/isuruf&gt;`_ for working on `infrastructure to build those wheels&lt;https://github.com/isuruf/pyfmmlib-wheels&gt;`_.To build this from source, you need* `numpy &lt;http://numpy.org&gt;`_* `mako &lt;http://makotemplates.org&gt;`_ (`pip &lt;https://pypi.python.org/pypi/pip&gt;`_ install mako or `ez_install mako`)Run::    python setup.py installas usual and cross your fingers.Documentation-------------Not much, unfortunately. Here's what I do to figure out how to use stuff::    &gt;&gt;&gt; import pyfmmlib    &gt;&gt;&gt; dir(pyfmmlib)    ['__builtins__', '__doc__', '__file__', '__name__', '__package__', '_add_plot', ...]    Fish the desired function from this list (let's use 'legefder' as an    example) and run:    &gt;&gt;&gt; print pyfmmlib.legefder.__doc__    legefder - Function signature:      val,der = legefder(x,pexp,[n])    Required arguments:      x : input float      pexp : input rank-1 array('d') with bounds (n + 1)    Optional arguments:      n := (len(pexp)-1) input int    Return objects:      val : float      der : floatThis tells you how to call the function from Python.You can then use grep to fish out the right Fortran source::    $ grep -icl 'legefder' fmmlib*/*/*.f    fmmlib3d/src/legeexps.fThen look at the docs there, and you're in business. No idea whatfunction name to look for? Just use the same grep procedure to lookfor keywords.Crude, but effective. :)Two more things:* Some functions are wrapped with a ``_vec`` suffix. This means they  apply to whole vectors of arguments at once. They're also parallel  via OpenMP.* ``pyfmmlib.fmm_part`` and ``pyfmmlib.fmm_tria`` are (dimension-independent)  wrappers that make the calling sequence for the FMMs just a wee bit less  obnoxious.  See ``examples/fmm.py`` for more.  Here's a rough idea how these are called::      from pyfmmlib import fmm_part, HelmholtzKernel      pot, grad = fmm_part(&quot;PG&quot;, iprec=2, kernel=HelmholtzKernel(5),              sources=sources, mop_charge=1, target=targets)  Unlike the rest of the library (which calls directly into Fortran),  these routines expect ``(n,3)``-shaped (that is, C-Order) arrays.License-------`fmmlib{2,3}d` are licensed under the 3-clause BSD license. (as of November 2017)This wrapper is licensed under the MIT license, as below.Copyright (C) 2013 Andreas KloecknerPermission is hereby granted, free of charge, to any person obtaining a copy ofthis software and associated documentation files (the &quot;Software&quot;), to deal inthe Software without restriction, including without limitation the rights touse, copy, modify, merge, publish, distribute, sublicense, and/or sell copiesof the Software, and to permit persons to whom the Software is furnished to doso, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>