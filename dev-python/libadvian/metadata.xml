<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=========libadvian=========Small helpers that do not warrant their own library.Notable helpers---------------  - init_logging (libadvian.logging): Initializes default logger to our standard log format  - b64_to_uuid and uuid_to_b64 (libadvian.binpackers): URL-safe base64 UUID decode/encode  - ensure_[utf8|str] (libadvian.binpackers): For making sure you are dealing with bytes or strings.There is more, everything is type hinted and documented, just look around.HTTP Logging notes------------------Note: requires you install the extra feature &quot;http&quot; to useIf LOG_HTTP_TARGET_URI is set in ENV, init_logging will add BufferedHTTPMultiRecordHandler handlerfor shipping logs to Vector/Logtash (or similar that can take POSTs with text body), for username and password useLOG_HTTP_USERNAME and LOG_HTTP_PASSWORD variables.Any extra properties set by logger.level(&quot;message&quot;, extra={&quot;key&quot;: &quot;value&quot;}) will be resolved and added tolabels_json -header in the POST. If LOG_GLOBAL_LABELS_JSON is set in ENV that will be decoded and filteradded to init_logging -pipeline that will add those labels as extras to all logrecords.You can of course initialize those handlers manually and use them as you wish. For quick and very dirtyway of adding headers to the HTTP requests muck with libadvian.logging.httpmulti.HTTP_LOGGING_CONFIGbefore initializing logging::    libadvian.logging.httpmulti.HTTP_LOGGING_CONFIG[&quot;handlers&quot;][&quot;http&quot;].update({&quot;session_options&quot;: { &quot;headers&quot;: {        &quot;Myheader&quot;: &quot;myval&quot;    }}})Making a deep copy and using logging.dictConfig() on the copy would be much cleaner though.Docker------For more controlled deployments and to get rid of &quot;works on my computer&quot; -syndrome, we alwaysmake sure our software works under docker.It's also a quick way to get started with a standard development environment.SSH agent forwarding^^^^^^^^^^^^^^^^^^^^We need buildkit_::    export DOCKER_BUILDKIT=1.. _buildkit: https://docs.docker.com/develop/develop-images/build_enhancements/And also the exact way for forwarding agent to running instance is different on OSX::    export DOCKER_SSHAGENT=&quot;-v /run/host-services/ssh-auth.sock:/run/host-services/ssh-auth.sock -e SSH_AUTH_SOCK=/run/host-services/ssh-auth.sock&quot;and Linux::    export DOCKER_SSHAGENT=&quot;-v $SSH_AUTH_SOCK:$SSH_AUTH_SOCK -e SSH_AUTH_SOCK&quot;Creating a development container^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Build image, create container and start it::    docker build --ssh default --target devel_shell -t libadvian:devel_shell .    docker create --name libadvian_devel -v `pwd`&quot;:/app&quot; -it `echo $DOCKER_SSHAGENT` libadvian:devel_shell    docker start -i libadvian_develpre-commit considerations^^^^^^^^^^^^^^^^^^^^^^^^^If working in Docker instead of native env you need to run the pre-commit checks in docker too::    docker exec -i libadvian_devel /bin/bash -c &quot;pre-commit install&quot;    docker exec -i libadvian_devel /bin/bash -c &quot;pre-commit run --all-files&quot;You need to have the container running, see above. Or alternatively use the docker run syntax but usingthe running container is faster::    docker run --rm -it -v `pwd`&quot;:/app&quot; libadvian:devel_shell -c &quot;pre-commit run --all-files&quot;Test suite^^^^^^^^^^You can use the devel shell to run py.test when doing development, for CI usethe &quot;tox&quot; target in the Dockerfile::    docker build --ssh default --target tox -t libadvian:tox .    docker run --rm -it -v `pwd`&quot;:/app&quot; libadvian:toxDevelopment-----------TLDR:- Create and activate a Python 3.7 virtualenv (assuming virtualenvwrapper)::    mkvirtualenv -p `which python3.7` my_virtualenv- change to a branch::    git checkout -b my_branch- install Poetry: https://python-poetry.org/docs/#installation- Install project deps and pre-commit hooks::    poetry install    pre-commit install    pre-commit run --all-files- Ready to go.Remember to activate your virtualenv whenever working on the repo, this is neededbecause pylint and mypy pre-commit hooks use the &quot;system&quot; python for now (because reasons).</longdescription>
</pkgmetadata>