<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Microscope control plugin for Napari via Python Microscope.Current development stage is whatever comes before alpha and &quot;proof ofconcept&quot;.To test-------I haven't had access to real hardware yet, so this has all beendeveloped with simulated devices.1. Start the device server with simulated devices.    a. Create a device server configuration file like so::        import microscope        from microscope.device_server import device        from microscope.simulators import (            SimulatedCamera,            SimulatedFilterWheel,            SimulatedLightSource,            SimulatedStage,        )        DEVICES = [            device(SimulatedCamera, &quot;localhost&quot;, 8000,),            device(SimulatedLightSource, &quot;localhost&quot;, 8001),            device(SimulatedFilterWheel, &quot;localhost&quot;, 8002,                   {&quot;positions&quot;: 6}),            device(SimulatedStage, &quot;localhost&quot;, 8003,                   {&quot;limits&quot;: {&quot;X&quot;: microscope.AxisLimits(0, 25000),                               &quot;Y&quot;: microscope.AxisLimits(0, 12000)}}),        ]    b. Start the device server (ensure port 8000-8003 are unused)::        $ device-server path-to-microscope-config.py2. Start napari3. Plugins &gt; Add Dock Widget &gt; microscope: MicroscopeWidget4. Connect to the camera:    a. On the new widget, click on the &quot;Add device&quot; button.    b. Enter the camera URI `PYRO:SimulatedCamera@localhost:8000`5. Tick the `Enabled` box to enable the camera and then press the&quot;Snap&quot; button.6. A random values image will appear displayed on the napari viewer.Keep pressing the &quot;Snap&quot; button to get new images.  The top leftcorner of the image is the simulated image number.7. Connect to the other simulated devices.  Their URIs are:    a. PYRO:SimulatedLightSource@localhost:8001    b. PYRO:SimulatedFilterWheel@localhost:8002    c. PYRO:SimulatedStage@localhost:80038. Changing the other simulated devices, doesn't really do much (butdoes change state of the devices, as can be seen in the logs)Test with stage aware camera----------------------------This is pretty much the same as before but one can use a large RGBTIFF (histology samples are perfect) to simulate a camera that returnssubsections of the image file based on the simulated stage position.For quick example, try::    wget https://zenodo.org/record/1445489/files/B0002.tifAnd use the following device server configuration file::    from microscope.device_server import device    from microscope.simulators.stage_aware_camera import simulated_setup_from_image    DEVICES = [        device(simulated_setup_from_image, &quot;localhost&quot;, 8000,               conf={&quot;filepath&quot;: &quot;B0002.tif&quot;}),    ]The URI for the devices will be::    PYRO:camera@localhost:8000    PYRO:filterwheel@localhost:8000    PYRO:stage@localhost:8000Changing the filterwheel changes which channel from the image isreturned.  Changing the stage coordinates changes the image that isreturned (but beware of the corners, pixels outside the image size arenot handled yet and will give an error).</longdescription>
</pkgmetadata>