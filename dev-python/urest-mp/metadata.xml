<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>uREST=====[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![PyPI version](https://badge.fury.io/py/urest-mp.svg)](https://badge.fury.io/py/urest-mp)[![Documentation Status](https://readthedocs.org/projects/urest/badge/?version=latest)](https://urest.readthedocs.io/en/latest/?badge=latest)Background----------This library is designed to enable simple API's to be built onmicro-controllers, based on a sub-set of the REST API design principles, andinspired by the design of the [ApolloDSKY](https://history-computer.com/apollo-guidance-computer/) guidance computer.Rather than build a full HTTP server stack, including JSON parser, andsupporting the full complexity of modern REST API's, this library aims tosupport simple operations in a resource constrained environment.Like the DSKY unit, it is assumed that all the 'objects' representing the stateswe are interested in are held in'[nouns](https://dlove24.github.io/urest/urest/api/base.html)'. The HTTP actionsthen represent 'verbs' which dictate the actions on the noun. So each API callis then in the form of 'verb-noun'; e.g. 'GET /led', or 'PUT /led'. Valid verbactions are| Verb   | HTTP Method | Action                                                                                                                                                            ||--------|-------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|| Get    | `GET`       | Return the current state of the requested noun.                                                                                                                   || Set    | `PUT`       | Set the requested noun to *exactly* the specified state. This is assumed to be idempotent, with the resultant state matching exactly the request from the client. || Update | `POST`      | Update the state requested noun. This is *not* assumed to be idempotent: for instance asking a noun to move between two states on each update.                    || Delete | `DELETE`    | Remove the current state of the noun, and return to a the default state. This does *not* remove the noun from the API: only the state currently held by the API.  |In all cases the body of the HTTP request is a simple collection of 'key: value'pairs, formatted as a [JSON](https://www.json.org/json-en.html) object. Only asub-set of the JSON specification is used: in particular multiple objects arenot allowed, and nor are arrays (i.e. '`[]`') of any sort. This both simplifiesthe parsing, and especially the memory required for the parser, and reinforcesthe intent to support only minimal API's.Installation------------A package of this library is provided on PyPi as[`urest-mp`](https://pypi.org/project/urest-mp/). This can be installed with thenormal Python tools, and should also install to boards runnning MicroPythonunder [Thonny](https://thonny.org/).For manual installation, everything under the `urest` directory should be copiedto the appropriate directory on the MicroPython board, usually `/lib`. Thelibrary can then be imported as normal, e.g.```python from urest.http import RESTServer from urest.api import APIBase ```See the documentation for the[examples](https://dlove24.github.io/urest/urest/examples/index.html) for moredetailed guidance on the use of the library. This code is also available in the`urest/examples` folder, or as the library `urest.examples` when the package isinstalled.Debugging---------Console output from the `urest.http.server.RESTServer` is controlled by thestandard `__debug__` flag. By default no output will be sent to the 'console'_unless_ the `__debug__` flag is `True`.**Note:** that in the standard Python environments the status of the `__debug__`flag is often controlled by the optimisation level of the interpreter: see thestandard [Python documentation](https://docs.python.org/3/using/cmdline.html#cmdoption-O)for more details. For MicroPython the status of the `__debug__` flag is set by[internal constants](https://docs.micropython.org/en/latest/library/micropython.html#micropython.opt_level).However if the `__debug__` constant is set whilst a programming is running the[results may be unexpected](https://forum.micropython.org/viewtopic.php?t=6839),due to optimisations undertaken by the MicroPython lexer. Instead for MicroPython setthe status of the `__debug__` flag in the platform standard `boot.py` orsimilar: see the documentation for the specific port for more details.Design------The core of the library is a simple HTTP server, specialised to the delivery ofa REST-like API instead of a general HTTP server. The design, and the use of the`asyncio` library, is inspired by the [MicroPython HTTPServer](https://github.com/erikdelange/MicroPython-HTTP-Server) by Erik deLange. This library uses a roughly similar structure for the core of the`asyncio` event loop, and especially in the design of the[`RESTServer`](https://dlove24.github.io/urest/urest/http/server.html) class.Key differences include*   Support for `PUT`, `POST` and `DELETE` operations, in addition to `GET`.These are required for an API server, and also form the 'verbs' of the actionsallowed on the 'nouns' by the API built on-top of this library.*   A more object-oriented design of the call/response handler, made easier thislibrary is *not* a general HTTP server. For instance Python `getters` and`setters` are used where possible for input validation, and the central APIresponse is based on the[`APIBase`](https://dlove24.github.io/urest/urest/api/base.html) abstract baseclass*   A more explicit validation of input from the network layer, especially inthe assumption that all input is by default hostile. This library should serveas an example of best-practice in protocol handling; at least in the slightlyresource constrained environment of MicroPython*   This implementation is principally a teaching library, so the[Documentation](https://dlove24.github.io/urest/urest) should be at least asimportant as the 'code'. Where possible all algorithms and implementationtechniques should also be explained as fully as possible, or at least linked toreference standards/implementations*   For consistency, all code should also be in the format standardised by the[Black](https://github.com/psf/black) library. This makes it easier toco-ordinate external code and documentation with the implementation documentedhere.Known Implementations---------------------*   Raspberry Pi Pico W (MicroPython 3.4)</longdescription>
</pkgmetadata>