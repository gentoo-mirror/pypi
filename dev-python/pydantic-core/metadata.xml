<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pydantic-core[![CI](https://github.com/pydantic/pydantic-core/workflows/ci/badge.svg?event=push)](https://github.com/pydantic/pydantic-core/actions?query=event%3Apush+branch%3Amain+workflow%3Aci)[![Coverage](https://codecov.io/gh/pydantic/pydantic-core/branch/main/graph/badge.svg)](https://codecov.io/gh/pydantic/pydantic-core)[![pypi](https://img.shields.io/pypi/v/pydantic-core.svg)](https://pypi.python.org/pypi/pydantic-core)[![versions](https://img.shields.io/pypi/pyversions/pydantic-core.svg)](https://github.com/pydantic/pydantic-core)[![license](https://img.shields.io/github/license/pydantic/pydantic-core.svg)](https://github.com/pydantic/pydantic-core/blob/main/LICENSE)This package provides the core functionality for [pydantic](https://docs.pydantic.dev) validation and serialization.Pydantic-core is currently around 17x faster than pydantic V1.See [`tests/benchmarks/`](./tests/benchmarks/) for details.## Example of direct usage_NOTE: You should not need to use pydantic-core directly; instead, use pydantic, which in turn uses pydantic-core._```pyfrom pydantic_core import SchemaValidator, ValidationErrorv = SchemaValidator(    {        'type': 'typed-dict',        'fields': {            'name': {                'type': 'typed-dict-field',                'schema': {                    'type': 'str',                },            },            'age': {                'type': 'typed-dict-field',                'schema': {                    'type': 'int',                    'ge': 18,                },            },            'is_developer': {                'type': 'typed-dict-field',                'schema': {                    'type': 'default',                    'schema': {'type': 'bool'},                    'default': True,                },            },        },    })r1 = v.validate_python({'name': 'Samuel', 'age': 35})assert r1 == {'name': 'Samuel', 'age': 35, 'is_developer': True}# pydantic-core can also validate JSON directlyr2 = v.validate_json('{&quot;name&quot;: &quot;Samuel&quot;, &quot;age&quot;: 35}')assert r1 == r2try:    v.validate_python({'name': 'Samuel', 'age': 11})except ValidationError as e:    print(e)    &quot;&quot;&quot;    1 validation error for model    age      Input should be greater than or equal to 18      [type=greater_than_equal, context={ge: 18}, input_value=11, input_type=int]    &quot;&quot;&quot;```## Getting StartedYou'll need rust stable [installed](https://rustup.rs/), or rust nightly if you want to generate accurate coverage.With rust and python 3.7+ installed, compiling pydantic-core should be possible with roughly the following:```bash# clone this repo or your forkgit clone git@github.com:pydantic/pydantic-core.gitcd pydantic-core# create a new virtual envpython3 -m venv envsource env/bin/activate# install dependencies and install pydantic-coremake install```That should be it, the example shown above should now run.You might find it useful to look at [`python/pydantic_core/_pydantic_core.pyi`](./python/pydantic_core/_pydantic_core.pyi) and[`python/pydantic_core/core_schema.py`](./python/pydantic_core/core_schema.py) for more information on the python API,beyond that, [`tests/`](./tests) provide a large number of examples of usage.If you want to contribute to pydantic-core, you'll want to use some other make commands:* `make build-dev` to build the package during development* `make build-prod` to perform an optimised build for benchmarking* `make test` to run the tests* `make testcov` to run the tests and generate a coverage report* `make lint` to run the linter* `make format` to format python and rust code* `make` to run `format build-dev lint test`## ProfilingIt's possible to profile the code using the [`flamegraph` utility from `flamegraph-rs`](https://github.com/flamegraph-rs/flamegraph). (Tested on Linux.) You can install this with `cargo install flamegraph`.Run `make build-profiling` to install a release build with debugging symbols included (needed for profiling).Once that is built, you can profile pytest benchmarks with (e.g.):```bashflamegraph -- pytest tests/benchmarks/test_micro_benchmarks.py -k test_list_of_ints_core_py --benchmark-enable```The `flamegraph` command will produce an interactive SVG at `flamegraph.svg`.## Releasing1. Bump package version locally. Do not just edit `Cargo.toml` on Github, you need both `Cargo.toml` and `Cargo.lock` to be updated.2. Make a PR for the version bump and merge it.3. Go to https://github.com/pydantic/pydantic-core/releases and click &quot;Draft a new release&quot;4. In the &quot;Choose a tag&quot; dropdown enter the new tag `v&lt;the.new.version&gt;` and select &quot;Create new tag on publish&quot; when the option appears.5. Enter the release title in the form &quot;v&lt;the.new.version&gt; &lt;YYYY-MM-DD&gt;&quot;6. Click Generate release notes button7. Click Publish release8. Go to https://github.com/pydantic/pydantic-core/actions and ensure that all build for release are done successfully.9. Go to https://pypi.org/project/pydantic-core/ and ensure that the latest release is published.10. Done ðŸŽ‰</longdescription>
</pkgmetadata>