<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>prestring========================================.. image:: https://travis-ci.org/podhmo/prestring.svg?branch=master    :target: https://travis-ci.org/podhmo/prestringthis package is heavily inspired by `srcgen &lt;https://github.com/tomerfiliba/srcgen&gt;`_ .(todo: gentle introduction)features----------------------------------------- generating code with with-syntax- string injection after writing stringgenerating code with with-syntax^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code-block:: python  from prestring.python import PythonModule  m = PythonModule()  with m.class_(&quot;Point&quot;, metaclass=&quot;InterfaceMeta&quot;):      with m.def_(&quot;__init__&quot;, &quot;self&quot;, &quot;value&quot;):          m.stmt(&quot;self.value = value&quot;)      with m.def_(&quot;__str__&quot;, &quot;self&quot;):          m.return_(&quot;self.value&quot;)output is... code-block:: python  class Point(object, metaclass=InterfaceMeta)      def __init__(self, value):          self.value = value      def __str__(self):          return self.valuestring injection after writing string^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code-block:: python  from prestring.python import PythonModule  m = PythonModule()  with m.def_(&quot;setup&quot;, &quot;config&quot;):      import_area = m.submodule()      m.sep()      for k in [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]:          import_area.stmt(&quot;from .plugins import {k}_plugin&quot;, k=k)          m.stmt(&quot;config.activate({}_plugin)&quot;, k)  print(m).. code-block:: python  def setup(config):      from .plugins import(          a_plugin,          b_plugin,          c_plugin,          d_plugin,          e_plugin      )      config.activate(a_plugin)      config.activate(b_plugin)      config.activate(c_plugin)      config.activate(d_plugin)      config.activate(e_plugin)sub modules----------------------------------------- prestring.output- prestring.python.transform, prestring.text.transformprestring.output^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^prestring.output can write multiple files... code-block:: python   import sys   from prestring.python import Module   from prestring.output import output, cleanup_all # noqa   dst = sys.argv[1]   with output(root=dst) as fs:       with fs.open(&quot;projects/x.txt&quot;, &quot;w&quot;) as wf:           print(&quot;hello x&quot;, file=wf)           print(&quot;bye x&quot;, file=wf)       with fs.open(&quot;projects/y.txt&quot;, &quot;w&quot;) as wf:           print(&quot;hello y&quot;, file=wf)           print(&quot;bye y&quot;, file=wf)       with fs.open(&quot;projects/z.py&quot;, &quot;w&quot;, opener=Module) as m:           with m.def_(&quot;hello&quot;):               m.stmt(&quot;print('hello')&quot;)Above code will generate three files. if creating directory is needed, it will be created automatically... code-block:: console   $ python src/main.py dst   [D]createdst/projects   [F]createdst/projects/x.txt   [F]createdst/projects/y.txt   [F]createdst/projects/z.pyOn rerun, no message is displayed. And rerun with `VERBOSE=1` var env to see more detailed output... code-block:: console   $ python src/main.py dst   $ VERBOSE=1 python src/main.py dst   [F]no changedst/projects/x.txt   [F]no changedst/projects/y.txt   [F]no changedst/projects/z.pydry-run^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Running with `CONSOLE=1` varenv or calling with `use_console=True` option, doesn't save files... code-block:: console   $ CONSOLE=1 python src/main.py dst   [F]updatedst/projects/x.txt   [F]updatedst/projects/y.txt   [F]updatedst/projects/z.py   # more verbose output   VERBOSE=1 CONSOLE=1 python src/00/main.py dst/00/create   # dst/00/create/projects/x.txt   ----------------------------------------     hello x     bye x   # dst/00/create/projects/y.txt   ----------------------------------------     hello y     bye y   # dst/00/create/projects/z.py   ----------------------------------------     def hello():         print('hello')prestring.python.transform, prestring.text.transform^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^the Transform function means converting raw source code (or text) to prestring's code.And you can use `python -m prestring.python` (or running `python -m prestring.text`) as a CLI command, as follows... code-block:: console   $ cat hello.py   def hello(name: str, *, message: str = &quot;hello world&quot;):       &quot;&quot;&quot;       greeting message       &quot;&quot;&quot;       print(f&quot;{name}: {message}&quot;)   if __name__ == &quot;__main__&quot;:       hello(&quot;foo&quot;)   $ python -m prestring.python hello.py   from prestring.python import PythonModule   def gen(*, m=None, indent='    '):       m = m or PythonModule(indent=indent)       import textwrap       with m.def_('hello', 'name: str', '*', 'message: str =  &quot;hello world&quot;'):           m.docstring(textwrap.dedent(&quot;&quot;&quot;           greeting message           &quot;&quot;&quot;).strip())           m.stmt('print(f&quot;{name}: {message}&quot;)')       with m.if_('__name__ == &quot;__main__&quot;'):           m.stmt('hello(&quot;foo&quot;)')       return m   if __name__ == &quot;__main__&quot;:       m = gen(indent='    ')       print(m)Of course, reversible... code-block:: console   $ python &lt;(python -m prestring.python hello.py)   def hello(name: str, *, message: str =  &quot;hello world&quot;):       &quot;&quot;&quot;       greeting message       &quot;&quot;&quot;       print(f&quot;{name}: {message}&quot;)   if __name__ == &quot;__main__&quot;:       hello(&quot;foo&quot;)   $ python hello.py   foo: hello world   $ python &lt;(python &lt;(python -m prestring.python hello.py))   foo: hello worldprestring.text^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^If you want to prestring's expression as first step, in other language, prestring.text is probably useful... code-block:: console   $ python -m prestring.text --tab hello.go   from prestring.text import Module   def gen(*, m=None, indent='\t'):       m = m or Module(indent=indent)       m.stmt('package main')       m.sep()       m.stmt('import (')       with m.scope():           m.stmt('&quot;fmt&quot;')           m.stmt('&quot;os&quot;')       m.stmt(')')       m.sep()       m.stmt('// Hello is print Hello')       m.stmt('func Hello(name string)  {')       with m.scope():           m.stmt('fmt.Printf(&quot;%s: Hello&quot;, name)')       m.stmt('}')       m.sep()       m.stmt('func main()  {')       with m.scope():           m.stmt('var name string')           m.stmt('if len(os.Args) &gt; 1  {')           with m.scope():               m.stmt('name = os.Args[1]')           m.stmt('} else  {')           with m.scope():               m.stmt('name = &quot;foo&quot;')           m.stmt('}')           m.stmt('// with block')           m.stmt('{')           with m.scope():               m.stmt('Hello(name)')           m.stmt('}')       m.stmt('}')       return m   if __name__ == &quot;__main__&quot;:       m = gen(indent='\t')       print(m)0.9.0- codeobject module- some refactoring0.8.3, 0.8.4, 0.8.5- adjustment for typing0.8.2- add codeobject module, PythonModule.import_() returns symbol object- remove unused methods0.8.1- prestring.python, async/await support0.8.0- typing (but this is not completely strict)0.7.3- In prestring.text, use tab default indent 1 (#47)0.7.2- bug fix of 0.7.10.7.1- &quot;python -m prestring.python&quot; support typed function definition0.7.0- changes &quot;python -m prestring.python.transform&quot; to &quot;python -m prestring.python&quot;- some logging adjustments and fix bugs (prestring.output)- add prestring.text0.6.0- support only python3.6+- refactoring prestring.output0.5.3- rollback, python's import part output0.5.1, 0.5.2- some bug fixes0.5.0- add prestring.python.transform0.4.7- add prestring.output.SeparatedOutput- LazyKeywords is sorted0.4.3- clear if empty (e.g. go-module's  import_group)0.4.2- bug fix LazyArgumentsAndKeywords0.4- more lazy (python module)- lazy object is cached0.3.3- goname function0.3.1- more lazy (go module)0.3.0- go code output support</longdescription>
</pkgmetadata>