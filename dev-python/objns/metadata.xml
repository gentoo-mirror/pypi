<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>====================================================objns - Transform a Python dictionary into an object====================================================Simple Python utility module that allows to recursively transform anydictionary or dictionary like object into a Python object with dot notationaccess to its attributes.This is specially helpful when dealing with large configuration files(from parsing YAML, JSON or TOML) or dealing with a large response from aserver.Install=======.. code-block:: sh    pip3 install objnsOptionally, install the following package to enable better pretty printing ofan object:.. code-block:: sh    pip3 install pprintppUsage=====Create an object from one or more dictionaries, and set values directly in theconstructor:.. code-block:: python3    &gt;&gt;&gt; from objns import Namespace    &gt;&gt;&gt; ns = Namespace(    ...     {'one': 100},    ...     {'two': 300},    ...     {'two': 400, 'three': {'four': 400}},    ...     one=200,    ... )    &gt;&gt;&gt; ns.two    400    &gt;&gt;&gt; ns.one    200    &gt;&gt;&gt; ns['two']    400Get and set values recursively:.. code-block:: python3    &gt;&gt;&gt; ns['two'] = 300    &gt;&gt;&gt; ns['two']    300    &gt;&gt;&gt; ns.two = 700    &gt;&gt;&gt; ns['two']    700    &gt;&gt;&gt; ns.two    700    &gt;&gt;&gt; ns.three.four    400    &gt;&gt;&gt; ns['three'].four    400    &gt;&gt;&gt; ns['three']['four']    400Recursively copy an object:.. code-block:: python3    &gt;&gt;&gt; nscopy = ns.copy()    &gt;&gt;&gt; id(ns) == id(nscopy)    FalseTransform back to a dictionary:.. code-block:: python3    &gt;&gt;&gt; asdict = dict(ns)    &gt;&gt;&gt; asdict    {'one': 200, 'two': 400, 'three': {'four': 400}}    &gt;&gt;&gt; type(asdict)    &lt;class 'dict'&gt;Iterate the object:.. code-block:: python3    &gt;&gt;&gt; for key, value in ns:    ...     print(key, value)    ...    one 200    two 400    three {'four': 400}Recursively merge update with other dictionaries:.. code-block:: python3    &gt;&gt;&gt; ns.update({    ...     'one': 'override1',    ...     'three': {'four': 'override2'},    ... })    &gt;&gt;&gt; ns.one    'override1'    &gt;&gt;&gt; ns.three.four    'override2'Pretty print the data structure:.. code-block:: python3    &gt;&gt;&gt; ns    {'one': 'override1', 'three': {'four': 'override2'}, 'two': 400}    &gt;&gt;&gt; print(str(ns))    {'one': 'override1', 'three': {'four': 'override2'}, 'two': 400}Preservation of source datatype, such as `OrderedDict` and other Mappingsubclasses:.. code-block:: python3    &gt;&gt;&gt; nso = Namespace(OrderedDict([('one', 100), ('two', 200)]))    &gt;&gt;&gt; nso    OrderedDict([('one', 100), ('two', 200)])    &gt;&gt;&gt; for key, value in nso:        ...     print(key, value)        ...        one 100        two 200Repository==========    https://github.com/kuralabs/objnsChangelog=========1.0.0 (2021-05-31)------------------New~~~- Initial release.License=======.. code-block:: text   Copyright (C) 2017-2021 KuraLabs S.R.L   Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);   you may not use this file except in compliance with the License.   You may obtain a copy of the License at       http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an   &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY   KIND, either express or implied.  See the License for the   specific language governing permissions and limitations   under the License.</longdescription>
</pkgmetadata>