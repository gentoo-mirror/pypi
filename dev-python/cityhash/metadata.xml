<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CityHash/FarmHashPython wrapper for [FarmHash](https://github.com/google/farmhash) and[CityHash](https://github.com/google/cityhash), a family of fastnon-cryptographic hash functions.[![BuildStatus](https://img.shields.io/github/actions/workflow/status/escherba/python-cityhash/build.yml?branch=master)](https://github.com/escherba/python-cityhash/actions/workflows/build.yml)[![LatestVersion](https://img.shields.io/pypi/v/cityhash.svg)](https://pypi.python.org/pypi/cityhash)[![Downloads](https://img.shields.io/pypi/dm/cityhash.svg)](https://pypistats.org/packages/cityhash)[![License](https://img.shields.io/pypi/l/cityhash.svg)](https://opensource.org/licenses/mit-license)[![Supported Pythonversions](https://img.shields.io/pypi/pyversions/cityhash.svg)](https://pypi.python.org/pypi/cityhash)## Getting StartedThis simplest way to use this package is to install it from PyPI:``` bashpip install cityhash```This package exposes Python APIs for CityHash and FarmHash under `cityhash` and`farmhash` namespaces, respectively. Each provides 32-, 64- and 128-bitimplementations.## Usage Examples### Stateless hashingUsage example for FarmHash:``` python&gt;&gt;&gt; from farmhash import FarmHash32, FarmHash64, FarmHash128&gt;&gt;&gt; FarmHash32(&quot;abc&quot;)1961358185&gt;&gt;&gt; FarmHash64(&quot;abc&quot;)2640714258260161385&gt;&gt;&gt; FarmHash128(&quot;abc&quot;)76434233956484675513733017140465933893```### Hardware-independent fingerprintsFingerprints are seedless hashes which are guaranteed to be hardware- andplatform-independent. This can be useful for networking applications whichrequire persisting hashed values.``` python&gt;&gt;&gt; from farmhash import Fingerprint128&gt;&gt;&gt; Fingerprint128(&quot;abc&quot;)76434233956484675513733017140465933893```### Incremental hashingCityHash and FarmHash do not support incremental hashing and thus are not idealfor hashing of streams. If you require incremental hashing feature, use[MetroHash](https://github.com/escherba/python-metrohash) or[xxHash](https://github.com/ifduyue/python-xxhash) instead, which do supportit.### Fast hashing of NumPy arraysThe Python [Buffer Protocol](https://docs.python.org/3/c-api/buffer.html)allows Python objects to expose their data as raw byte arrays to other objects,for fast access without copying to a separate location in memory. Among others,NumPy is a major framework that supports this protocol.All hashing functions in this packege will read byte arrays from objects thatexpose them via the buffer protocol. Here is an example showing hashing of a 4DNumPy array:``` python&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; from farmhash import FarmHash64&gt;&gt;&gt; arr = np.zeros((256, 256, 4))&gt;&gt;&gt; FarmHash64(arr)1550282412043536862```The arrays need to be contiguous for this to work. To convert a non-contiguousarray, use NumPy's `ascontiguousarray()` function.## SSE4.2 supportFor x86-64 platforms, the PyPi repository for this package includes wheelscompiled with SSE4.2 support.  The 32- and 64-bit FarmHash variantssignificantly benefit from SSE4.2 instructions. The 128-bit version,unfortunately, does not exhibit speed up after compiling with SSE4.2 support.The vanilla CityHash fucntions (under `cityhash` module) do not take advantageof SSE4.2. Instead, the `cityhashcrc` module provided with this package exposes128- and 256-bit CRC functions which do harness SSE4.2. These functions arevery fast, and beat `FarmHash128` on speed (FarmHash does not include a 256-bitfunction). Since FarmHash is the intended successor of CityHash, I would becareful before using the CityHash-CRC functions, however, and would verifywhether they provide sufficient randomness for your intended application.## Development### Local workflowFor those who want to contribute, here is a quick start using some makefilecommands:``` bashgit clone https://github.com/escherba/python-cityhash.gitcd python-cityhashmake env           # create a virtual environmentmake test          # run Python testsmake cpp-test      # run C++ testsmake shell         # enter IPython shell```To find out which Make targets are available, type:``` bashmake help```### DistributionThe wheels are built using [cibuildwheel](https://cibuildwheel.readthedocs.io/)and are distributed to PyPI using GitHub actions. The wheels contain compiledbinaries and are available for the following platforms: windows-amd64,ubuntu-x86, linux-x86\_64, linux-aarch64, and macosx-x86\_64.## See AlsoFor other fast non-cryptographic hash functions available as Python extensions,see [MetroHash](https://github.com/escherba/python-metrohash),[MurmurHash](https://github.com/hajimes/mmh3), and[xxHash](https://github.com/ifduyue/python-xxhash).## AuthorsThe original CityHash Python bindings are due to Alexander \[Amper\] Marshalov.These were rewritten in Cython by Eugene Scherba, who also added the FarmHashbindings. The CityHash and FarmHash algorithms and their C++ implementation areby Google.## LicenseThis software is licensed under the [MITLicense](http://www.opensource.org/licenses/mit-license). See the includedLICENSE file for details.</longdescription>
</pkgmetadata>