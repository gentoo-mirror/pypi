<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>README======.. image:: https://img.shields.io/pypi/v/modlamp.svg   :target: https://pypi.org/project/modlamp/.. image:: https://travis-ci.org/alexarnimueller/modlAMP.svg    :target: https://travis-ci.org/alexarnimueller/modlAMP.. image:: https://codecov.io/gh/alexarnimueller/modlAMP/branch/master/graph/badge.svg    :target: https://codecov.io/gh/alexarnimueller/modlAMP.. image:: https://img.shields.io/badge/License-BSD--3-lightgrey.svg    :target: https://github.com/alexarnimueller/modlAMP/blob/master/LICENSE.rst.. image:: https://img.shields.io/badge/DOI-10.1093%2Fbioinformatics%2Fbtx285-ff69b4.svg    :target: https://doi.org/10.1093/bioinformatics/btx285**modlAMP**This is a Python package that is designed for working with **peptides**, **proteins** or any **amino acid sequence** of naturalamino acids. It incorporates several modules, like descriptor calculation (module ``descriptors``) or sequencegeneration (module ``sequences``). For basic instructions how to use the package, see Usage_ section of this READMEor the `documentation &lt;http://modlamp.org&gt;`_.Installation*************Quick note*: modlAMP supports Python 3 since version 4. Use with Python 2.7 is deprecated.For the installation to work properly, ``pip`` needs to be installed. If you're not sure whether you already have pip,type ``pip --version`` in your terminal. If you don't have pip installed, install it via ``sudo easy_install pip``.There is no need to download the package manually to install modlAMP. In your terminal, just type the following command::    pip install modlampTo update modlamp to the latest version, run the following::    pip install --upgrade modlampUsage*****This section gives a quick overview of different capabilities of modlAMP. For a detailed description of all modules seethe `module documentation &lt;http://modlamp.org&gt;`_.Importing modules-----------------After installation, you should be able to import and use the different modules like shown below. Type python oripython in your terminal to begin, then the following import statements:&gt;&gt;&gt; from modlamp.sequences import Helices&gt;&gt;&gt; from modlamp.descriptors import PeptideDescriptor&gt;&gt;&gt; from modlamp.database import query_databaseGenerating Sequences--------------------The following example shows how to generate a library of 1000 sequences out of all available sequence generation methods:&gt;&gt;&gt; from modlamp.sequences import MixedLibrary&gt;&gt;&gt; lib = MixedLibrary(1000)&gt;&gt;&gt; lib.generate_sequences()&gt;&gt;&gt; lib.sequences[:10]['VIVRVLKIAA','VGAKALRGIGPVVK','QTGKAKIKLVKLRAGPYANGKLF','RLIKGALKLVRIVGPGLRVIVRGAR','DGQTNRFCGI','ILRVGKLAAKV',...]These commands generated a mixed peptide library comprising of 1000 sequences... note::    If duplicates are present in the attribute ``sequences``, these are removed during generation. Therefore it    is possible that less than the specified sequences are obtained.The module ``sequences`` incorporates different sequence generation classes (random, helices etc.). Fordocumentation thereof, consider the docs for the module ``modlamp.sequences``.Calculating Descriptor Values-----------------------------Now, different descriptor values can be calculated for the generated sequences: (see `Generating Sequences`_)How to calculate the Eisenberg hydrophobic moment for given sequences:&gt;&gt;&gt; from modlamp.descriptors import PeptideDescriptor, GlobalDescriptor&gt;&gt;&gt; desc = PeptideDescriptor(lib.sequences,'eisenberg')&gt;&gt;&gt; desc.calculate_moment()&gt;&gt;&gt; desc.descriptor[:10]array([[ 0.60138255],[ 0.61232763],[ 0.01474009],[ 0.72333858],[ 0.20390763],[ 0.68818279],...]Global descriptor features like charge, hydrophobicity or isoelectric point can be calculated as well:&gt;&gt;&gt; glob = GlobalDescriptor(lib.sequences)&gt;&gt;&gt; glob.isoelectric_point()&gt;&gt;&gt; glob.descriptor[:10]array([ 10.09735107,   8.75006104,  12.30743408,  11.26385498, ...]Auto- and cross-correlation type functions with different window sizes can be applied on all available amino acidscales. Here an example for the pepCATS scale:&gt;&gt;&gt; pepCATS = PeptideDescriptor('sequence/file/to/be/loaded.fasta', 'pepcats')&gt;&gt;&gt; pepCATS.calculate_crosscorr(7)&gt;&gt;&gt; pepCATS.descriptorarray([[ 0.6875    ,  0.46666667,  0.42857143,  0.61538462,  0.58333333,Many more **amino acid scales** are available for descriptor calculation. The complete list can be found in thedocumentation for the ``modlamp.descriptors`` module.Plotting Features-----------------We can also plot the calculated values as a boxplot, for example the hydrophobic moment:&gt;&gt;&gt; from modlamp.plot import plot_feature&gt;&gt;&gt; D = PeptideDescriptor('sequence/file/to/be/loaded.fasta', 'eisenberg')  # Eisenberg hyrophobicity scale&gt;&gt;&gt; D.calculate_moment()&gt;&gt;&gt; plot_feature(D.descriptor,y_label='uH Eisenberg').. image:: http://modlamp.org/_static/uH_Eisenberg.png    :height: 300pxWe can additionally compare these descriptor values to known AMP sequences. For that, we import sequences from theAPD3, which are stored in the FASTA formatted file ``APD3.fasta``:&gt;&gt;&gt; APD = PeptideDescriptor('/Path/to/file/APD3.fasta', 'eisenberg')&gt;&gt;&gt; APD.calculate_moment()Now lets compare the values by plotting:&gt;&gt;&gt; plot_feature([D.descriptor, APD.descriptor], y_label='uH Eisenberg', x_tick_labels=['Library', 'APD3']).. image:: http://modlamp.org/_static/uH_APD3.png    :height: 300pxIt is also possible to plot 2 or 3 different features in a scatter plot::Example: **2D Scatter Plot**&gt;&gt;&gt; from modlamp.plot import plot_2_features&gt;&gt;&gt; A = PeptideDescriptor('/Path/to/file/class1&amp;2.fasta', 'eisenberg')&gt;&gt;&gt; A.calculate_moment()&gt;&gt;&gt; B = GlobalDescriptor('/Path/to/file/class1&amp;2.fasta')&gt;&gt;&gt; B.isoelectric_point()&gt;&gt;&gt; target = [1] * (len(A.sequences) / 2) + [0] * (len(A.sequences) / 2)&gt;&gt;&gt; plot_2_features(A.descriptor, B.descriptor, x_label='uH', y_label='pI', targets=target).. image:: http://modlamp.org/_static/2D_scatter.png    :height: 300px:Example: **3D Scatter Plot**&gt;&gt;&gt; from modlamp.plot import plot_3_features&gt;&gt;&gt; B = GlobalDescriptor(APD.sequences)&gt;&gt;&gt; B.isoelectric_point()&gt;&gt;&gt; B.length(append=True)  # append descriptor values to afore calculated&gt;&gt;&gt; plot_3_features(APD.descriptor, B.descriptor[:, 0], B.descriptor[:, 1], x_label='uH', y_label='pI', z_label='len').. image:: http://modlamp.org/_static/3D_scatter.png    :height: 300px:Example: **Helical Wheel Plot**&gt;&gt;&gt; from modlamp.plot import helical_wheel&gt;&gt;&gt; helical_wheel('GLFDIVKKVVGALGSL', moment=True).. image:: http://modlamp.org/_static/helical_wheel.png    :height: 300pxFurther plotting methods are available. See the documentation for the ``modlamp.plot``module.Database Connection-------------------Peptides from the two most prominent AMP databases `APD &lt;http://aps.unmc.edu/AP/&gt;`_ and `CAMP &lt;http://camp.bicnirrh.res.in/&gt;`_ can be directly scraped with the ``modlamp.database`` module.For downloading a set of sequences from the **APD** database, first get the IDs of the sequences you want to queryfrom the APD website. Then proceed as follows:&gt;&gt;&gt; query_apd([15, 16, 17, 18, 19, 20])  # download sequences with APD IDs 15 to 20['GLFDIVKKVVGALGSL','GLFDIVKKVVGAIGSL','GLFDIVKKVVGTLAGL','GLFDIVKKVVGAFGSL','GLFDIAKKVIGVIGSL','GLFDIVKKIAGHIAGSI']The same holds true for the **CAMP** database:&gt;&gt;&gt; query_camp([2705, 2706])  # download sequences with CAMP IDs 2705 &amp; 2706['GLFDIVKKVVGALGSL','GLFDIVKKVVGTLAGL']**modlAMP** also hosts a module for connecting to your own database on a private server.Peptide sequences included in any table in the database can be downloaded... note::    The ``modlamp.database.query_database`` function allows connection and queries to a personal database. For    successful connection, the database configuration needs to be specified in the ``db_config.json`` file, which is    located in ``modlamp/data/`` by default.Sequences (stored in a column named ``sequence``) from the personal database can then be queried as follows:&gt;&gt;&gt; from modlamp.database import query_database&gt;&gt;&gt; query_database('my_experiments', ['sequence'], configfile='./modlamp/data/db_config.json')Password: &gt;? ***********Connecting to MySQL database...connection established!['ILDSSWQRTFLLS','IKLLHIF','ACFDDGLFRIIKFLLASDRFFT', ...]Loading Prepared Datasets-------------------------For AMP QSAR models, different options exist of choosing negative / inactive peptide examples. We assembled severaldatasets for classification tasks, that can be read by the ``modlamp.datasets`` module. The available datasets canbe found in the documentation of the ``modlamp.datasets`` module.:Example: **AMPs vs. transmembrane regions of proteins**&gt;&gt;&gt; from modlamp.datasets import load_AMPvsTM&gt;&gt;&gt; data = load_AMPvsTM()&gt;&gt;&gt; data.keys()['target_names', 'target', 'feature_names', 'sequences']The variable ``data`` holds **four different keys, which can also be called as its attributes**. The availableattributes for ``load_helicalAMPset()`` are ``target_names`` (target names), ``target`` (thetarget class vector), ``feature_names`` (the name of the data features, here: 'Sequence') and``sequences`` (the loaded sequences).:Example:&gt;&gt;&gt; data.target_names  # class namesarray(['TM', 'AMP'], dtype='|S3')&gt;&gt;&gt; data.sequences[:5]  # sequences[array(['AAGAATVLLVIVLLAGSYLAVLA', 'LWIVIACLACVGSAAALTLRA', 'FYRFYMLREGTAVPAVWFSIELIFGLFA', 'GTLELGVDYGRAN',       'KLFWRAVVAEFLATTLFVFISIGSALGFK'],  dtype='|S100')&gt;&gt;&gt; data.target  # corresponding target classesarray([0, 0, 0, 0, 0 .... 1, 1, 1, 1])Analysing Wetlab Circular Dichroism Data----------------------------------------The modlule ``modlamp.wetlab`` includes the class ``modlamp.wetlab.CD`` to analyse raw circular dichroismdata from wetlab experiments. The following example shows how to load a raw datafile and calculate secondarystructure contents:&gt;&gt;&gt; cd = CD('/path/to/your/folder', 185, 260)  # load all files in a specified folder&gt;&gt;&gt; cd.names  # peptide names read from the file headers['Pep 10', 'Pep 10', 'Pep 11', 'Pep 11', ... ]&gt;&gt;&gt; cd.calc_meanres_ellipticity()  # calculate the mean residue ellipticity values&gt;&gt;&gt; cd.meanres_ellipticityarray([[   260.        ,   -266.95804196],       [   259.        ,   -338.13286713],       [   258.        ,   -387.25174825], ...])&gt;&gt;&gt; cd.helicity(temperature=24., k=3.492185008, induction=True)  # calculate helical content&gt;&gt;&gt; cd.helicity_values            Name     Solvent  Helicity  Induction            Peptide1     T    100.0     3.823            Peptide1     W    26.16     0.000            Peptide2     T    76.38     3.048            Peptide2     W    25.06     0.000 ...The read and calculated values can finally be plotted as follows:&gt;&gt;&gt; cd.plot(data='mean residue ellipticity', combine=True).. image:: http://modlamp.org/_static/cd1.png    :height: 300px.. image:: http://modlamp.org/_static/cd2.png    :height: 300px.. image:: http://modlamp.org/_static/cd3.png    :height: 300pxAnalysis of Different Sequence Libraries----------------------------------------The modlule ``modlamp.analysis`` includes the class ``modlamp.analysis.GlobalAnalysis`` to comparedifferent sequence libraries. Learn how to use it with the following example:&gt;&gt;&gt; lib  # sequence library with 3 sub-librariesarray([['ARVFVRAVRIYIRVLKAFAKL', 'IRVYVRIVRGFGRVVRAYARV', 'IRIFIRIARGFGRAIRVFVRI', ..., 'RGPCFLQVVD'],       ['EYKIGGKA', 'RAVKGGGRLLAG', 'KLLRIILRGARIIIRGLR', ..., 'AKCLVDKK', 'VGGAFALVSV'],       ['GVHLKFKPAVSRKGVKGIT', 'RILRIGARVGKVLIK', 'MKGIIGHTWKLKPTIPSGKSAKC', ..., 'GRIIRLAIKAGL']], dtype='|S28')&gt;&gt;&gt; lib.shape(3, 2000)&gt;&gt;&gt; from modlamp.analysis import GlobalAnalysis&gt;&gt;&gt; analysis = GlobalAnalysis(lib, names=['Lib 1', 'Lib 2', 'Lib 3'])&gt;&gt;&gt; analysis.plot_summary().. image:: http://modlamp.org/_static/summary.png    :height: 600pxDocumentation-------------A detailed documentation of all modules is available from the `modlAMP documentation website &lt;http://modlamp.org&gt;`_.Citing modlAMP--------------If you are using **modlAMP** for a scientific publication, please cite the following paper:Müller A. T. *et al.* (2017) modlAMP: Python for anitmicrobial peptides, *Bioinformatics* **33**, (17), 2753-2755,DOI:`10.1093/bioinformatics/btx285 &lt;https://doi.org/10.1093/bioinformatics/btx285&gt;`_.</longdescription>
</pkgmetadata>