<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># enrichEnriched extends [rich](https://pypi.org/project/rich/) library functionalitywith a set of changes that were not accepted to rich itself.## Console with redirect supportOur Console class adds one additional option to rich.Console in order toredirect `sys.stdout` and `sys.stderr` streams using a FileProxy.```pythonfrom enrich.console import Consoleimport sysconsole = Console(    redirect=True,  # &lt;-- not supported by rich.cosole.Console    record=True)sys.write(&quot;foo&quot;)# this assert would have passed without redirect=Trueassert console.export_text() == &quot;foo&quot;```## Console with implicit soft wrappingIf you want to produce fluid terminal output, one where the client terminaldecides where to wrap the text instead of the application, you can nowtell the Console constructor the soft_wrap preference.```pythonfrom enrich.console import Consoleimport sysconsole = Console(soft_wrap=True)console.print(...)  # no longer need to pass soft_wrap to each print```## Console.print can also deal with ANSI escapesExtends Rich Console to detect if original text already had ANSI escapes anddecodes it before processing it. This solves the case where printingoutput captured from other processes that contained ANSI escapes would brake.[upstream-404](https://github.com/willmcgugan/rich/discussions/404)## Soft-wrapping loggerRich logger assumes that you always have a fixed width console and it doeswrap logged output according to it. Our alternative logger does exactly theopposite: it ignores the columns of the current console and prints outputusing a Console with soft wrapping enabled.The result are logged lines that can be displayed on any terminal or webpage as they will allow the client to decide when to perform the wrapping.```pythonimport loggingfrom enrich.logging import RichHandlerFORMAT = &quot;%(message)s&quot;logging.basicConfig(    level=&quot;NOTSET&quot;, format=FORMAT, datefmt=&quot;[%X]&quot;, handlers=[RichHandler()])log = logging.getLogger(&quot;rich&quot;)log.info(&quot;Text that we do not want pre-wrapped by logger: %s&quot;, 100 * &quot;x&quot;)```</longdescription>
</pkgmetadata>