<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Vital Python Library[![pypi](https://img.shields.io/pypi/v/vital.svg)](https://pypi.python.org/pypi/vital)[![fern shield](https://img.shields.io/badge/%F0%9F%8C%BF-SDK%20generated%20by%20Fern-brightgreen)](https://github.com/fern-api/fern)The Vital Python library provides access to the Vital API from applications written in Python.## DocumentationAPI reference documentation is available [here](https://docs.tryvital.io/home/welcome).## InstallationAdd this dependency to your project's build file:```bashpip install vital# orpoetry add vital```## Usage```pythonfrom vital.client import Vitalvital_client = Vital(  api_key=&quot;YOUR_API_KEY&quot;,)lab_test = vital_client.lab_tests.get('order-id')print(lab_test)```## Async ClientThe SDK also exports an async client.```pythonfrom vital.client import AsyncVitalimport asynciovital_client = AsyncVital(  api_key=&quot;YOUR_API_KEY&quot;,)async def get_lab_test() -&gt; None:    lab_test = vital_client.lab_tests.get('order-id')    print(lab_test)asyncio.run(get_lab_test())```## Handling ErrorsAll exceptions thrown by the SDK will sublcass [ApiError](./src/vital/core/api_error.py).```pythonfrom vital.core import ApiErrorfrom vital import BadRequestErrortry:  vital_client.lab_tests.get('order-id')except BadRequestError as e:  # handle bad request errorexcept APIError as e:  # handle any api related error```## EnvironmentsWhen you sign up to Vital you get access to two environments, Sandbox and Production.| Environment URLs |                            || ---------------- | -------------------------- || `production`     | api.tryvital.io            || `production-eu`  | api.eu.tryvital.io         || `sandbox`        | api.sandbox.tryvital.io    || `sandbox-eu`     | api.sandbox.eu.tryvital.io |By default, the SDK uses the `production` environment. See the snippet belowfor an example on how ot change the environment.```pythonfrom vital.client import Vitalfrom vital.environment import VitalEnvironmentvital_client = Vital(  api_key=&quot;YOUR_API_KEY&quot;,  environment=VitalEnvironment.Sandbox)```## TimeoutsBy default, the client is configured to have a timeout of 60 seconds.You can customize this value at client instantiation.```pythonfrom vital.client import Vitalfrom vital.environment import VitalEnvironmentvital_client = Vital(  api_key=&quot;YOUR_API_KEY&quot;,  environment=VitalEnvironment.Sandbox,  timeout=15)```## Beta statusThis SDK is in beta, and there may be breaking changes between versions without a major version update. Therefore, we recommend pinning the package version to a specific version in your pyproject.toml file. This way, you can install the same version each time without breaking changes unless you are intentionally looking for the latest version.## ContributingWhile we value open-source contributions to this SDK, this library is generated programmatically. Additions made directly to this library would have to be moved over to our generation code, otherwise they would be overwritten upon the next generated release. Feel free to open a PR as a proof of concept, but know that we will not be able to merge it as-is. We suggest opening an issue first to discuss with us!On the other hand, contributions to the README are always very welcome!</longdescription>
</pkgmetadata>