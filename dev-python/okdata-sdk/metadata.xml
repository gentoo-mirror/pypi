<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI](https://img.shields.io/pypi/v/okdata-sdk)](https://pypi.org/project/okdata-sdk/)# `okdata-sdk`: Python SDK for Origo Dataplatform[`okdata-sdk`](https://pypi.org/project/okdata-sdk/) is on PyPI: `pip install okdata-sdk`# ConfigurationWhen calling any classes interacting with the Origo Dataplatform API and there are no Config params passed to the constructor, a config object will beautomaticly created for you based on environment variables### Environment variablesDefault, will pick up configuration from current environment.The credentials is resolved automatically if you do not set a specific Auth config, in the following order:1. _Client Credentials_: If you have added client_id / client_secret to the config. Or if you use theenvironment variable equivalent: `OKDATA_CLIENT_ID` / `OKDATA_CLIENT_SECRET`.2. _Username And Password_:  If you have added username / password to the config. Or if you use theenvironment variable equivalent: `OKDATA_USERNAME` / `OKDATA_PASSWORD`.```# keycloak userexport OKDATA_USERNAME=my-user# keycloak password for OKDATA_USERNAMEexport OKDATA_PASSWORD=my-password# keycloak clientexport OKDATA_CLIENT_ID=my-machine-client# keycloak secret for OKDATA_CLIENT_IDexport OKDATA_CLIENT_SECRET=some-generated-secure-string# overrides default environment (dev), but will be trumped by --env=&lt;environment&gt; on the commandlineexport OKDATA_ENVIRONMENT=dev|prod# If you are sending events and have been assigned a API keyexport OKDATA_API_KEY=your-api-key```### Getting Credentials:`username/password ` are synced with Oslo municipalities Active Directory so any user with an association canuse their personal account to access the SDK.For `client credentials` please contact the data platform team. `dataplattform[at]oslo.kommune.no`### TODO: Named profilesIf environment variables are not available, the system will try to load from a default profile: Located in ~/.okdata/configuration# UsageTable of contents:- [Upload data](#upload-data)- [Download data](#download-data)- [Creating datasets with versions and editions](#creating-datasets-with-versions-and-editions)- [Updating dataset metadata](#updating-dataset-metadata)## Upload dataWhen uploading data you need to refer to an existing dataset that you own, a version and an edition.If these are non existent then you can create them yourself. This can be achieved [using the sdk](#creating-datasets-with-versions-and-editions),or you can use our [command line interface](https://github.com/oslokommune/okdata-cli).```pythonfrom okdata.sdk.data.upload import Uploadfrom okdata.sdk.config import Configokdata_config = Config()# If necessary you can override default valuesokdata_config.config[&quot;cacheCredentials&quot;] = Falsedata_uploader = Upload(config=okdata_config)# Upload file 'data.json' to dataset-id/version/editiondataset_id = &quot;my-dataset-id&quot;version = &quot;my-version&quot;  # example value: 1edition = &quot;my-edition&quot;  # example value: 20200618T114038filename = &quot;/path-to-file/data.json&quot;# Note! filename must be pointing to an existing file on your diskupload_response = data_uploader.upload(filename, dataset_id, version, edition)print(upload_response)# {#     &quot;result&quot;: True,#     &quot;trace_id&quot;: &quot;my-dataset-id-54a3c78e-86a3-4631-8f28-0252fe1c7c13&quot;# }```The `trace_id` returned by the upload method can be used to &quot;trace&quot; the steps involved in the upload process:```pythonfrom okdata.sdk.status import Status...status = Status(config=okdata_config)trace_events = status.get_status(trace_id)print(trace_events)# [#     {#         &quot;trace_id&quot;: &quot;my-dataset-1a2bc345-6789-1234-567d-8912ef34a567&quot;,#         &quot;trace_status&quot;: &quot;STARTED&quot;,#         &quot;trace_event_id&quot;: &quot;1a2b3cd4-eef5-6aa7-bccd-e889912334f5&quot;,#         &quot;trace_event_status&quot;: &quot;OK&quot;,#         &quot;component&quot;: &quot;data-uploader&quot;,#         ...#     },#     {#         &quot;trace_id&quot;: &quot;my-dataset-1a2bc345-6789-1234-567d-8912ef34a567&quot;,#         &quot;trace_status&quot;: &quot;CONTINUE&quot;,#         ...#     },#     {#         &quot;trace_id&quot;: &quot;my-dataset-1a2bc345-6789-1234-567d-8912ef34a567&quot;,#         &quot;trace_event_id&quot;: &quot;1aa2b345-678c-9de1-f2a3-4566bcd78912&quot;,#         &quot;trace_status&quot;: &quot;FINISHED&quot;,#         &quot;trace_event_status&quot;: &quot;OK&quot;,#         ...#     }# ]```## Download dataTo download data you need to refer to a dataset that you have access to. Thiscould be a public dataset, a restricted dataset you've been given access to, ora dataset that you own yourself. If the dataset is public, [authenticatingyourself](#environment-variables) is not necessary.You will also need to refer to the specific version and edition of the datasetthat you want to download. If this is your own dataset, make sure to create a[version and edition](#creating-datasets-with-versions-and-editions) beforeattempting to download it.```pythonfrom okdata.sdk.data.download import Downloadfrom okdata.sdk.config import Configokdata_config = Config(env=&quot;dev&quot;)# If necessary you can override default config valuesokdata_config.config[&quot;cacheCredentials&quot;] = Falsedata_downloader = Download(config=okdata_config)dataset_id = &quot;your-dataset-id&quot;version = &quot;1&quot;edition = &quot;latest&quot;# Downloading a fileres1 = data_downloader.download(dataset_id, version, edition, &quot;my/preferred/output/path&quot;)print(res1)# {#     &quot;downloaded_files&quot;: [&quot;my/preferred/output/path/file_name.csv&quot;]# }```## Creating datasets with versions and editions```pythonfrom okdata.sdk.data.dataset import Datasetfrom okdata.sdk.config import Configokdata_config = Config()# If necessary you can override default valuesokdata_config.config[&quot;cacheCredentials&quot;] = False# Create a new datasetdataset = Dataset(config=okdata_config)dataset_metadata = {    &quot;title&quot;: &quot;Precise Descriptive Title&quot;,    &quot;description&quot;: &quot;Describe your dataset here&quot;,    &quot;keywords&quot;: [&quot;some-keyword&quot;],    &quot;accessRights&quot;: &quot;public&quot;,    &quot;objective&quot;: &quot;Exemplify how to create a new dataset&quot;,    &quot;contactPoint&quot;: {        &quot;name&quot;: &quot;Your name&quot;,        &quot;email&quot;: &quot;your_email@domain.com&quot;,        &quot;phone&quot;: &quot;999555111&quot;    },    &quot;publisher&quot;: &quot;name of organization or person responsible for publishing the data&quot;}new_dataset = dataset.create_dataset(data=dataset_metadata)# new_dataset:# { 'Id': 'precise-descriptive-title',#   'Type': 'Dataset',#   '_links': {'self': {'href': '/datasets/precise-descriptive-title'}},#   'accessRights': 'public',#   'contactPoint': { 'email': 'your_email@domain.com',#                     'name': 'Your name',#                     'phone': '999555111'},#   'description': 'Describe your dataset here',#   'keywords': ['some-keyword'],#   'objective': 'Exemplify how to create a new dataset',#   'publisher': 'name of organization or person responsible for publishing the '#                'data',#   'title': 'Precise Descriptive Title'}# create version for new dataset:version_data = {&quot;version&quot;: &quot;1&quot;}new_version = dataset.create_version(new_dataset[&quot;Id&quot;], data=version_data)# new_version:# { 'Id': 'precise-descriptive-title/1',#   'Type': 'Version',#   '_links': { 'self': { 'href': '/datasets/precise-descriptive-title/versions/1'}},#   'version': '1'}# create edition for new_dataset/new_version:import datetime# Note! edition-field must be ISO 8601 with utc offsetedition_data = {    &quot;edition&quot;: str(datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc).isoformat()),    &quot;description&quot;: &quot;My edition description&quot;,    &quot;startTime&quot;: &quot;2019-01-01&quot;,    &quot;endTime&quot;: &quot;2019-12-31&quot;}new_edition = dataset.create_edition(new_dataset[&quot;Id&quot;], new_version[&quot;version&quot;], data=edition_data)# new_edition# { 'Id': 'precise-descriptive-title/1/20200115T130439',#   'Type': 'Edition',#   '_links': { 'self': { 'href': '/datasets/precise-descriptive-title/versions/1/editions/20200115T130439'}},#   'description': 'My edition description',#   'edition': '2020-01-15T13:04:39.041778+00:00',#   'endTime': '2019-12-31',#   'startTime': '2019-01-01'}```## Updating dataset metadataSimilarly to creating datasets, metadata for any given dataset, version etc., can also be**updated** by using the methods listed below. These methods accept an updated version ofthe JSON document posted when creating the same resource:```pydataset.update_dataset(datasetid, data={ ... })dataset.update_version(datasetid, versionid, data={ ... })dataset.update_edition(datasetid, versionid, editionid, data={ ... })dataset.update_distribution(datasetid, versionid, editionid, distributionid, data={ ... })# Example: Update dataset metadatadataset.update_dataset(    datasetid=&quot;precise-descriptive-title&quot;,    data={        &quot;title&quot;: &quot;Precise Descriptive Title&quot;,        &quot;description&quot;: &quot;Describe your dataset here&quot;,        &quot;keywords&quot;: [&quot;some-keyword&quot;, &quot;another-keyword&quot;], # Add another keyword        &quot;accessRights&quot;: &quot;public&quot;,        &quot;license&quot;: &quot;http://data.norge.no/nlod/&quot;, # Add licensing information        &quot;objective&quot;: &quot;Exemplify how to update an existing dataset&quot;, # Update objective text        &quot;contactPoint&quot;: {            &quot;name&quot;: &quot;Your name&quot;,            &quot;email&quot;: &quot;your_email@domain.com&quot;,            &quot;phone&quot;: &quot;999555111&quot;        },        &quot;publisher&quot;: &quot;name of organization or person responsible for publishing the data&quot;    })```The `update_dataset` method also supports an optional `partial` keyword,enabling partial updates when true:```pydataset.update_dataset(    &quot;my-dataset-id&quot;, {&quot;description&quot;: &quot;Only update description&quot;}, partial=True)```</longdescription>
</pkgmetadata>