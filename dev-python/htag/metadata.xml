<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HTag : &quot;H(tml)Tag&quot;&lt;img src=&quot;https://manatlan.github.io/htag/htag.png&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;[![Test](https://github.com/manatlan/htag/actions/workflows/on_commit_do_all_unittests.yml/badge.svg)](https://github.com/manatlan/htag/actions/workflows/on_commit_do_all_unittests.yml)&lt;a href=&quot;https://pypi.org/project/htag/&quot;&gt;    &lt;img src=&quot;https://badge.fury.io/py/htag.svg?x&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;A new python library to create UI (or UI toolkit), which render nativly in anything which can render **html/js/css**.Thoses can be a browser, a pywebview, an android/apk, or anything based on cef, depending on an [htag runner](https://manatlan.github.io/htag/runners/) !As it's based on html/js rendering: you can easily mix powerful JS libs with powerful PY3 libs : and make powerful python apps ! * For a **desktop app** : You can use the [PyWebView runner](https://manatlan.github.io/htag/runners/#pywebwiew), which will run the UI in a pywebview container (or &quot;ChromeApp runner&quot;, in a local chrome app mode).  * For a **web app** : You can use the [WebHTTP runner](https://manatlan.github.io/htag/runners/#webhttp), which will run the UI in a web server, and serve the UI on client side, in a browser. (see new [htagweb](https://github.com/manatlan/htagweb) for more robust/complete runner) * For a **android app** : You can use the [AndroidApp runner](https://manatlan.github.io/htag/runners/#androidapp), which will run the UI in a kiwi webview thru tornado webserver, and can be embedded in an apk ([recipes](https://github.com/manatlan/htagapk)) * For a **pyscript app** : you can use the [PyScript runner](https://manatlan.github.io/htag/runners/#pyscript), which will run completly in client sideBut yes … the promise is here : **it's a GUI toolkit for building &quot;beautiful&quot; applications for mobile, web, and desktop from a single codebase**.[DOCUMENTATION](https://manatlan.github.io/htag/)[DEMO/TUTORIAL](https://htag.glitch.me/)[Changelog](https://github.com/manatlan/htag/releases)[Available on pypi.org](https://pypi.org/project/htag/)[Announcement on reddit (22/07/14)](https://www.reddit.com/r/Python/comments/vysnci/htag_a_new_gui_tookit_for_webdesktopandroid_from/)Well tested: - Pytests on core at 99% - Real [Selenium TESTS in github CI/CD](https://github.com/manatlan/htag/actions/workflows/selenium.yaml)## To have a lookTry the [https://htag.glitch.me/](DEMO), which is a real Htag App (on glitch.com), which demoing reals Htag Components (example) in live.Since **htag** works in **pyscript** ... You don't need python, just HTML ;-) [see here](https://github.com/manatlan/htag/blob/main/examples/README.md).And here is a [Htag/Pyscript DEMO](https://raw.githack.com/manatlan/htag/main/examples/pyscript_demo.html), where you can try/code a htag's app, and try/run it in a pyscript context ! (It's a simple html file, nor server or python is involved here ! Just HTML)## ROADMAP to 1.0.0 * rock solid (need more tests) * setup minimal docs ;-) * ~~top level api could change (Tag() -&gt; create a Tag, Tag.mytag() -&gt; create a TagBase ... can be a little bit ambiguous)~~ * ~~manage &quot;query params&quot; from url to initialize Tags/routes~~ * ~~I don't really like the current way to generate js in interaction : need to found something more solid.~~ * ~~the current way to initiate the statics is odd (only on real (embedded) Tag's) : should find a better way (static like gtag ?!)~~and more technicals :- ~~better js try/catch to sort js/py error + try/catch on http com error (for thoses which kill session webhttp/pye) ~~- ~~getStateImage is non sense coz it's str'ing (why not returning the str ?!)~~- ~~mix the Tag.__init__ with the old system (like this: it's unmaintable)~~- ~~introduce a virtual tag/placeholder~~- DISPLAY a warning (or exception in STRICT_MODE), when a render method use a &quot;tag creation&quot; (ex: Tag.div(&quot;hello&quot;)), because it will always be rendered !!!!! -&gt; bad habits- ~~rename &quot;tag&quot; to &quot;self&quot; for js statements (keep the twos, for compatibility reasons)~~- ~~Make it possibles -&gt; NOT POSSIBLE currently ... abandonned ;-)~~    ~~self.js = self.bind( self.starting , b'window.innerWidth') # doesn't work currently~~    ~~self.js = self.bind.starting( b'window.innerWidth' ) # work (only reason to keep the &quot;old form&quot;)~~- ~~perhaps `self( js_statement)` -&gt; `self.call( js_statement )` ... less confusing !~~- ~~thus, to avoid `self( self.bind.method(*a,**k) )`, you can write `self.call.&lt;method&gt;( *a,**k )`~~- TESTS TESTS and more TESTS## HistoryAt the beginning, there was [guy](https://github.com/manatlan/guy), which was/is the same concept as [python-eel](https://github.com/ChrisKnott/Eel), but more advanced.One day, I've discovered [remi](https://github.com/rawpython/remi), and asked my self, if it could be done in a *guy way*. The POC was very good, so I releaseda version of it, named [gtag](https://github.com/manatlan/gtag). It worked well despite some drawbacks, but was too difficult to maintain. So I decided to rewrite allfrom scratch, while staying away from *guy* (to separate, *rendering* and *runners*)... and [htag](https://github.com/manatlan/htag) was born. The codebase is very short, concepts are better implemented, and it's very easy to maintain.</longdescription>
</pkgmetadata>