<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># 📊 RLM-Prometheus 📊[Prometheus][1] exporter providing metrics from a Reprise License Manager (RLM)instance.Currently tested on [Debian Linux][4] only, but as it is based on pure[CPython][5] it should potentially also work on Windows - YMMV.## ⚙🔧 Installation ⚙🔧Example installation on Debian / Ubuntu:```bash# required for creating Python virtualenvs:apt updateapt install -y python3-venv# create a virtualenv in /opt:python3 -m venv /opt/rlm-prometheus# update 'pip' and install the 'rlm-prometheus' package:/opt/rlm-prometheus/bin/pip install --upgrade pip/opt/rlm-prometheus/bin/pip install rlm-prometheus```## 🏃 Running in foreground mode 🏃This is mostly relevant for testing configuration settings and checking if theexporter works as expected - to do this either activate the previously createdPython environment or call the `rlm_exporter` script using the full path to thatenvironment.For convenience it is reasonable to use a configuration file in such a situationinstead of setting all the environment variables manually. Simply copy the[config-example.yaml][3] file to e.g. `config.yaml` and adjust the settingsthere. Then run the exporter like this:```bashrlm_exporter -vvv --config config.yaml```The exporter running in foreground can be terminated as usual via `Ctrl+C`.## 👟 Running as a service 👟```bashadduser --system rlmexportercp -v /opt/rlm-prometheus/lib/python*/site-packages/resources/systemd/rlm-prometheus.service  /etc/systemd/system/systemctl daemon-reloadsystemctl edit rlm-prometheus.service```The last command will open an editor with the override configuration of theservice's unit file. Add a section like this **at the top** of the overridefile, with the bare minimum of setting `RLM_ISV` and most likely also `RLM_URI`.For other options available check for the commented-out lines further down inthe unit file setting environment variables starting with `RLM_`. Please notethat on *Ubuntu 20.04* the `systemct edit` command will present you with anempty file, so you will have to copy the respective lines from below or theprovided *central* unit file.```text[Service]### specific configuration for the RLM exporter service:Environment=RLM_ISV=example_isvEnvironment=RLM_URI=http://license-server.example.xy:5054```Finally enable the service and start it right away. The second line will showthe log messages on the console until `Ctrl+C` is pressed. This way you shouldbe able to tell if the service has started up properly and is providing metricson the configured port:```bashsystemctl enable --now rlm-prometheus.servicejournalctl --follow --unit rlm-prometheus```## 🔥🧱 Firewall settings for RLM on Windows 🔥🧱For the metrics collection it is obviously necessary the exporter can gatherdata from your RLM instance. The standard approach is to send requests to RLM'sbuilt-in web server. By default access to it is blocked and those restrictionsshould not be lifted more than necessary.There is an example snippet in [Open-RlmFirewallPort.ps1][2] that demonstrateshow to adjust the Windows firewall so the collector's host IP address is allowedto connect to RLM.## 👾 CAUTION: memory leak in RLM 👾Repeatedly requesting data (e.g. every 5 minutes) from RLM's built-in web serverhas shown to increase its memory consumption in a linear fashion over time onour side. This indicates a memory leak in RLM, which eventually made the licenseservice fail silently.To avoid (or rather work around) this, we did set up a scheduled task on theserver hosting the RLM service that is restarting the service once a night whilealso rotating its corresponding log files at the same time.Example code on how to achieve this via PowerShell is provided in[Restart-RlmService.ps1][6].## 🆙 Upgrading 🆙Assuming the exporter has been installed as described above, an upgrade to anewer version could be done like this:```bash/opt/rlm-prometheus/bin/pip install --upgrade rlm-prometheus# check the changelog for potentially new configuration settings, integrate them# by calling `systemctl edit rlm-prometheus.service` if necessary and finally# restart the service:systemctl restart rlm-prometheus.service```[1]: https://prometheus.io/[2]: resources/powershell/Open-RlmFirewallPort.ps1[3]: resources/config-example.yaml[4]: https://debian.org/[5]: https://github.com/python/cpython[6]: resources/powershell/Restart-RlmService.ps1</longdescription>
</pkgmetadata>