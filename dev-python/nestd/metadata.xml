<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># nestedExtract your nested functions!## Installation```python3    pip install nestd```## Usage```python3from nestd import nested, get_all_nesteddef dummy_function():    test_variable = &quot;hello, world&quot;    def inner_function():        nonlocal test_variable        return test_variabledef dummy_function_with_two_inner_functions():    test_variable = &quot;hello, world&quot;    test_array = [1, 2, 3]    def inner_function():        nonlocal test_variable        return test_variable    def inner_function_2():        nonlocal test_array        return test_array[1:]def test_nested_function():    inner_function = nested(dummy_function, &quot;inner_function&quot;, test_variable=&quot;hello&quot; )    assert &quot;hello&quot; == inner_function()def test_2_nested_functions():    all_inner_functions = get_all_nested(dummy_function_with_two_inner_functions, &quot;hello_world&quot;, [1,2])    inner_function, inner_function_2 = all_inner_functions    assert inner_function[0] == &quot;inner_function&quot;    assert inner_function[1]() == &quot;hello_world&quot;    assert inner_function_2[0] == &quot;inner_function_2&quot;    assert inner_function_2[1]() == [2]```To perform a very deep nested search```python3def dummy_function_with_nested_inner_functions():    test_array = [1, 2, 3]    def math():        nonlocal test_array        def sum():            nonlocal test_array            def sum_of_array():                nonlocal test_array                inside_arr = [random.randint(1, 10)] * len(test_array)                return test_array + inside_arr            def multi_of_array():                nonlocal test_array                inside_arr = [random.randint(1, 10)] * len(test_array)                for i in range(len(test_array)):                    inside_arr[i] = inside_arr[i] * test_array[i]                return inside_arr            ans = 0            for i in test_array:                ans += i            return ans        def multiply():            nonlocal test_array            ans = 1            for i in test_array:                ans = ans * i            return ans        return test_array    def stats():        nonlocal test_array        def mean():            nonlocal test_array            return sum(test_array) / len(test_array)        return test_arraydef test_3_nested_functions():    inner_functions = get_all_deep_nested(        dummy_function_with_nested_inner_functions,        test_array=[1, 2, 3],    )    assert inner_functions[&quot;math&quot;]() == [1, 2, 3]    assert inner_functions[&quot;sum&quot;]() == 6    assert inner_functions[&quot;mean&quot;]() == 2.0```## Contributor GuidelinesFeel free to open an issue for any clarification or for any suggestions.## To Develop Locally1. `poetry install` to install the dependencies2. `pytest tests` to run the tests</longdescription>
</pkgmetadata>