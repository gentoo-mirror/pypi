<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># The **jsonpath_tp** Package.The **jsonpath_tp** is a [jsonpath](https://goessner.net/articles/JsonPath/) implementation built on top of [treepath](https://pypi.org/project/treepath/) technology.  Jsonpath is [query language](https://en.wikipedia.org/wiki/Query_language) for extracting data from [json](https://docs.python.org/3/library/json.html) document.   The jsonpath_tp attempts to follow the standard defined in [jsonpath](https://www.ietf.org/archive/id/draft-goessner-dispatch-jsonpath-00.html#name-detailed-definition) with the exceptions:* script expression are not supported* filter (script) expression support any single argument python function.* filter expression support regular expressionThe jsonpath_tp can be used programmatically or via th OS command line interface (CLI) with the addition of [jsonpath_cli](https://pypi.org/project/jsonpath-cli/) with package.# Quick Start ProgrammaticallyAll the jsonpath_tp components should be imported as follows:```pythonfrom jsonpath_tp import get, find```A jsonpath example that gets c's value from json data.```pythondata = {    &quot;a&quot;: {        &quot;b&quot;: [            {                &quot;c&quot;: 1            },            {                &quot;c&quot;: 2            }]    }}value = get(&quot;$.a.b[0].c&quot;, data)assert value == 1```A jsonpath example that gets c's value from json data.```pythonvalue = [value for value in find(&quot;$.a.b[*].c&quot;, data)]assert value == [1, 2]```# Solar System Json DocumentThe examples shown in this README use the following json document.  It describes our solar system. Click to expand.  &lt;details&gt;&lt;summary&gt;solar_system = {...}&lt;/summary&gt;&lt;p&gt;```json{  &quot;star&quot;: {    &quot;name&quot;: &quot;Sun&quot;,    &quot;diameter&quot;: 1391016,    &quot;age&quot;: null,    &quot;planets&quot;: {      &quot;inner&quot;: [        {          &quot;name&quot;: &quot;Mercury&quot;,          &quot;Number of Moons&quot;: &quot;0&quot;,          &quot;diameter&quot;: 4879,          &quot;has-moons&quot;: false        },        {          &quot;name&quot;: &quot;Venus&quot;,          &quot;Number of Moons&quot;: &quot;0&quot;,          &quot;diameter&quot;: 12104,          &quot;has-moons&quot;: false        },        {          &quot;name&quot;: &quot;Earth&quot;,          &quot;Number of Moons&quot;: &quot;1&quot;,          &quot;diameter&quot;: 12756,          &quot;has-moons&quot;: true        },        {          &quot;name&quot;: &quot;Mars&quot;,          &quot;Number of Moons&quot;: &quot;2&quot;,          &quot;diameter&quot;: 6792,          &quot;has-moons&quot;: true        }      ],      &quot;outer&quot;: [        {          &quot;name&quot;: &quot;Jupiter&quot;,          &quot;Number of Moons&quot;: &quot;79&quot;,          &quot;diameter&quot;: 142984,          &quot;has-moons&quot;: true        },        {          &quot;name&quot;: &quot;Saturn&quot;,          &quot;Number of Moons&quot;: &quot;82&quot;,          &quot;diameter&quot;: 120536,          &quot;has-moons&quot;: true        },        {          &quot;name&quot;: &quot;Uranus&quot;,          &quot;Number of Moons&quot;: &quot;27&quot;,          &quot;diameter&quot;: 51118,          &quot;has-moons&quot;: true        },        {          &quot;name&quot;: &quot;Neptune&quot;,          &quot;Number of Moons&quot;: &quot;14&quot;,          &quot;diameter&quot;: 49528,          &quot;has-moons&quot;: true        }      ]    }  }}```&lt;/p&gt;&lt;/details&gt;# query examples.| Description                                 | Xpath                               | jsonpath                                  | treepath                            ||----------------------------------------------|-------------------------------------|-------------------------------------------|------------------------------------|| Find planet earth.                           | /star/planets/inner[name='Earth']   | $.star.planets.inner[?(@.name=='Earth')]  | path.star.planets.inner[*][?(@.name == 'Earth')]   || List the names of all inner planets.         | /star/planets/inner[*].name         | $.star.planets.inner[*].name              | path.star.planets.inner[*].name   || List the names of all planets.               | /star/planets/*/name                | $.star.planets.*[*].name                   | path.star.planets.wc[*].name      || List the names of all celestial bodies       | //name                              | $..name                                   | path.rec.name                      |  | List all nodes in the tree Preorder          | //*                                 | $..                                       | path.rec                           || Get the third rock from the sun              | /star/planets/inner[3]              | $.star.planets.inner[2]                   | path.star.planets.inner[2]         || List first two inner planets                 | /star/planets.inner[position()&lt;3]   | $.star.planets.inner[:2]                  | path.star.planets.inner[0:2]       ||                                              |                                     | $.star.planets.inner[0, 1]                | path.star.planets.inner[0, 2]      || List planets smaller than earth              | /star/planets/inner[diameter &lt; 1]   | $.star.planets.inner[?(@.diameter &lt; 12756)]              | path.star.planets.inner[wc][has(path.diameter &lt; 12756)]      || List celestial bodies that have planets.     | //*[planets]/name                   | $..[?(@.planets)].name                   | path.rec[?(@.planets)].name       || List the planets with more than 50 moons     |                                     | $..[?(int(@['Number of Moons']) &gt; 50)].name | path.rec[wc][has(path['Number of Moons'] &gt; 50, int)].name |# Traversal Functions## getThe **get** function returns the first value the path leads to.Get the star name from the solar_system```pythonsun = get(&quot;$.star.name&quot;, solar_system)assert sun == 'Sun'```When there is no match, MatchNotFoundError is thrown.```pythontry:    get(&quot;$.star.human_population&quot;, solar_system)    assert False, &quot;Not expecting humans on the sun&quot;except MatchNotFoundError:    pass```Or if preferred, a default value can be given.```pythonhuman_population = get(&quot;$.star.human_population&quot;, solar_system, default=0)assert human_population == 0```In addition to a constant, the default value may also be a callable```pythondef population():    return 0human_population = get(&quot;$.star.human_population&quot;, solar_system, default=population)assert human_population == 0```The default value can be automatically injected in to json document```pythonhuman_population = get(&quot;$.star.human_population&quot;, solar_system, default=1, store_default=True)assert human_population == solar_system['star'][&quot;human_population&quot;]```## findThe **find** function returns an Iterator that iterates to each value the path leads to.  Each value isdetermine on its iteration.Find All the planet names.```pythoninner_planets = [planet for planet in find(&quot;$.star.planets.inner[*].name&quot;, solar_system)]assert inner_planets == ['Mercury', 'Venus', 'Earth', 'Mars']```## Tracing DebuggingAll the functions: get, find, support tracing.   An option, when enabled,records the route the algorithm takes to determine a match.This example logs the route the algorithm takes to find the inner planets.  The **print**function is give to capture the logs, but any single argument function can be used.```pythoninner_planets = [planet for planet in find(&quot;$.star.planets.inner[*].name&quot;, solar_system, trace=log_to(print))]assert inner_planets == ['Mercury', 'Venus', 'Earth', 'Mars']```The results```python&quot;&quot;&quot;at $.star got {'name': 'Sun', 'dia...at $.star.planets got {'inner': [{'name': ...at $.star.planets.inner got [{'name': 'Mercury',...at $.star.planets.inner[*] got {'name': 'Mercury', ...at $.star.planets.inner[0].name got 'Mercury'at $.star.planets.inner[*] got {'name': 'Venus', 'N...at $.star.planets.inner[1].name got 'Venus'at $.star.planets.inner[*] got {'name': 'Earth', 'N...at $.star.planets.inner[2].name got 'Earth'at $.star.planets.inner[*] got {'name': 'Mars', 'Nu...at $.star.planets.inner[3].name got 'Mars'&quot;&quot;&quot;```# Path## The rootThe **$** point to root of the tree.```pythonvalue = get(&quot;$&quot;, solar_system)assert value == solar_system```In a filter, the **@**  point to the current element.```pythonvalue = get(&quot;$.star[?(@ == 'Sun')]&quot;, solar_system)assert value == 'Sun'```## Dictionaries### KeysThe dictionary keys are referenced as dynamic attributes on a path.```pythoninner_from_attribute = get(&quot;$.star.planets.inner&quot;, solar_system)inner_from_string_keys = get(&quot;$.['star']['planets']['inner']&quot;, solar_system)assert inner_from_attribute == inner_from_string_keys == solar_system['star']['planets']['inner']```### Keys With Special CharactersDictionary keys that are not valid python syntax can be referenced as quoted strings.```pythonsun_equatorial_diameter = get(&quot;$.star.planets.inner[0]['Number of Moons']&quot;, solar_system)assert sun_equatorial_diameter == solar_system['star']['planets']['inner'][0]['Number of Moons']```### Wildcard as a Key.The * attribute specifies all sibling keys.   It is useful for iterating over attributes.```pythonstar_children = [child for child in find(&quot;$.star.*&quot;, solar_system)]assert star_children == [solar_system['star']['name'],                         solar_system['star']['diameter'],                         solar_system['star'][&quot;age&quot;],                         solar_system['star']['planets'], ]```### Comma Delimited KeysMultiple dictionary keys can be specified using a comma delimited list.```pythonlast_and_first = [planet for planet in find(&quot;$.star['diameter', 'name']&quot;, solar_system)]assert last_and_first == [1391016, &quot;Sun&quot;]```## List### IndexesList can be access using index.```pythonearth = get(&quot;$.star.planets.inner[2]&quot;, solar_system)assert earth == solar_system['star']['planets']['inner'][2]```List the third inner and outer planet.```pythonlast_two = [planet for planet in find(&quot;$.star.*.*[2].name&quot;, solar_system)]assert last_two == ['Earth', 'Uranus']```### Comma Delimited Indexes.List indexes can be specified as a comma delimited list.```pythonlast_and_first = [planet for planet in find(&quot;$.star.planets.outer[3, 0].name&quot;, solar_system)]assert last_and_first == [&quot;Neptune&quot;, &quot;Jupiter&quot;]```### SlicesList can be access using slices.List the first two planets.```pythonfirst_two = [planet for planet in find(&quot;$.star.planets.outer[:2].name&quot;, solar_system)]assert first_two == [&quot;Jupiter&quot;, &quot;Saturn&quot;]```List the last two planets.```pythonlast_two = [planet for planet in find(&quot;$.star.planets.outer[-2:].name&quot;, solar_system)]assert last_two == [&quot;Uranus&quot;, &quot;Neptune&quot;]```List all outer planets in reverse.```pythonlast_two = [planet for planet in find(&quot;$.star.planets.outer[::-1].name&quot;, solar_system)]assert last_two == [&quot;Neptune&quot;, &quot;Uranus&quot;, &quot;Saturn&quot;, &quot;Jupiter&quot;]```List the last inner and outer planets.```pythonlast_two = [planet for planet in find(&quot;$.star.*.*[-1:].name&quot;, solar_system)]assert last_two == [&quot;Mars&quot;, &quot;Neptune&quot;]```### Wildcard as an Index.The * token can be used as a list index.   It is useful for iterating over attributes.```pythonall_outer = [planet for planet in find(&quot;$.star.planets.outer[*].name&quot;, solar_system)]assert all_outer == [&quot;Jupiter&quot;, &quot;Saturn&quot;, &quot;Uranus&quot;, &quot;Neptune&quot;]```## RecursionThe .. double dot implies recursive search.  It executes a preorder tree traversal.  The search algorithmdescends the tree hierarchy evaluating the path on each vertex until a match occurs.  On each iteration itcontinues where it left off. This is an example that finds all the planets names.```pythonall_planets = [p for p in find(&quot;$.star.planets..name&quot;, solar_system)]assert all_planets == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']```Here is another example that finds all the celestial bodies names.```pythonall_celestial_bodies = [p for p in find(&quot;$..name&quot;, solar_system)]assert all_celestial_bodies == ['Sun', 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',                                'Neptune']```## FiltersFilters are use to add additional search criteria.### filter The ?() is a filter that evaluates a branched off path relative to its parent path.  This examplefinds all celestial bodies that have planets.```pythonsun = get(&quot;$..[?(@.planets)].name&quot;, solar_system)assert sun == &quot;Sun&quot;```This search finds all celestial bodies that have a has-moons attribute.```pythonall_celestial_bodies_moon_attribute = [planet for planet in find(&quot;$..[?(@['has-moons'])].name&quot;, solar_system)]assert all_celestial_bodies_moon_attribute == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',                                               'Neptune']```This search finds all celestial bodies that have moons. Note the **operator.truth** is used to exclude planetsthat don't have moons.```pythonoperator_truth = operator.truthall_celestial_bodies_moon_attribute = [planet for planet in                                       find(&quot;$..[?(operator_truth(@['has-moons']))].name&quot;,                                            solar_system,                                            locals=locals()                                            )]assert all_celestial_bodies_moon_attribute == ['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']```### has filter comparison operatorsFilters can be specified with a comparison operator.```pythonearth = [planet for planet in find(&quot;$..[?(@.diameter == 12756)].name&quot;, solar_system)]assert earth == ['Earth']earth = [planet for planet in find(&quot;$..[?(@.diameter != 12756)].name&quot;, solar_system)]assert earth == ['Sun', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']earth = [planet for planet in find(&quot;$..[?(@.diameter &gt; 12756)].name&quot;, solar_system)]assert earth == ['Sun', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']earth = [planet for planet in find(&quot;$..[?(@.diameter &gt;= 12756)].name&quot;, solar_system)]assert earth == ['Sun', 'Earth', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']earth = [planet for planet in find(&quot;$..[?(@.diameter &lt; 12756)].name&quot;, solar_system)]assert earth == ['Mercury', 'Venus', 'Mars']earth = [planet for planet in find(&quot;$..[?(@.diameter &lt;= 12756)].name&quot;, solar_system)]assert earth == ['Mercury', 'Venus', 'Earth', 'Mars']```There is also a regular expression operator.   This example findsall the planets that end with the letter s.```pythonearth = [planet for planet in find(r&quot;$..[?(@.name =~ '\w+s')].name&quot;, solar_system)]assert earth == ['Venus', 'Mars', 'Uranus']```### has filter type conversionSometimes the value is the wrong type for the comparison operator. In this example the attribute'Number of Moons' is str type.```pythonplanets = [planet for planet in find(&quot;$..[?(@['Number of Moons'] &gt; '5')].name&quot;, solar_system)]assert planets == ['Jupiter', 'Saturn']```This is how to convert the type to an int before applying the comparison operator.```pythonplanets = [planet for planet in find(&quot;$..[?(int(@['Number of Moons']) &gt; 5)].name&quot;, solar_system)]assert planets == ['Jupiter', 'Saturn', 'Uranus', 'Neptune']```### has filter comparison operators as single argument functionsA filter operator can be specified as a single argument function.  Here an example that searches for planets thathave the same diameter as earth.```pythonearths_diameter = partial(operator.eq, 12756)earth = [planet for planet in find(&quot;$..[?(earths_diameter(@.diameter))].name&quot;, solar_system, locals=locals())]assert earth == ['Earth']```Any single argument function can be used as an operator.  This example uses a Regular Expression to findsplanets that end with the letter s.```pythonname_ends_with_s = re.compile(r&quot;\w+s&quot;).matchearth = [planet for planet in find(&quot;$..[?(name_ends_with_s(@.name))].name&quot;, solar_system, locals=locals())]assert earth == ['Venus', 'Mars', 'Uranus']```This example uses a closure to find planets that have the same diameter as earth.```pythondef smaller_than_earth(value):    return value &lt; 12756earth = [planet for planet in find(&quot;$..[?(smaller_than_earth(@.diameter))].name&quot;, solar_system, locals=locals())]assert earth == ['Mercury', 'Venus', 'Mars']```### logical and, or and not filters#### andA regular express to test if the second letter in the value is 'a'.```pythonsecond_letter_is_a = re.compile(r&quot;.a.*&quot;).fullmatch```The **and** function evaluates as the logical **and** operator.   It is equivalent to: (arg1 and arg2 and ...)```pythonfound = [planet for planet in find(&quot;$..[?(@.diameter &lt; 10000 and (second_letter_is_a(@.name)))].name&quot;,                                   solar_system,                                   locals=locals())         ]assert found == ['Mars']```#### orThe **or** function evaluates as the logical **or** operator.   It is equivalent to: (arg1 and arg2 and ...)```pythonfound = [planet for planet in find(&quot;$..[?(@.diameter &lt; 10000 or (second_letter_is_a(@.name)))].name&quot;,                                   solar_system,                                   locals=locals()                                   )         ]assert found == ['Mercury', 'Earth', 'Mars', 'Saturn']```#### notThe **not** function evaluates as the logical **not** operator.   It is equivalent to: (not arg)This example find all the planets names not not equal to Earth.  Note the double nots.```pythonfound = [planet for planet in find(&quot;$..[?(not (@.name != 'Earth'))].name&quot;, solar_system)]assert found == ['Earth']```#### Combining has, and, or, and not filters.Each of the **has** function can be passed as arguments to any of the other **has** function to construct complexboolean equation.  This example is equivalent to:(10000 &gt; diameter  or diameter &gt; 20000) and second_letter_is_a(name))```pythonfound = [planet for planet in         find(&quot;$..[?((@.diameter &lt; 10000 or @.diameter &gt; 20000) and (second_letter_is_a(@.name)))].name&quot;,              solar_system,              locals=locals()              )         ]assert found == ['Mars', 'Saturn']```</longdescription>
</pkgmetadata>