<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============================PyMaybe===============================.. image:: https://travis-ci.org/ekampf/pymaybe.svg?branch=master        :target: https://travis-ci.org/ekampf/pymaybe.. image:: https://coveralls.io/repos/ekampf/pymaybe/badge.svg?branch=master&amp;service=github        :target: https://coveralls.io/github/ekampf/pymaybe?branch=master.. image:: https://img.shields.io/pypi/v/pymaybe.svg        :target: https://pypi.python.org/pypi/pymaybeA Python implementation of the Maybe pattern.Installation------------::    pip install pymaybeGetting Started---------------::    from pymaybe import maybe    first_name = maybe(deep_hash)['account']['user_profile']['first_name'].or_else(&quot;&lt;unknown&gt;&quot;)Documentation-------------Maybe monad is a programming pattern that allows to treat None values that same way as non-none values.This is done by wrapping the value, which may or may not be None to, a wrapper class.The implementation includes two classes: *Maybe* and *Something*.*Something* represents a value while *Nothing* represents a None value.There's also a method *maybe* which wraps a regular value and and returns *Something* or *Nothing* instance.::    &gt;&gt;&gt; maybe(&quot;I'm a value&quot;)    &quot;I'm a value&quot;    &gt;&gt;&gt; maybe(None);    NoneBoth *Something* and *Nothing* implement 4 methods allowing you to test their real value: *is_some*, *is_none*, *get* and *or_else*::    &gt;&gt;&gt; maybe(&quot;I'm a value&quot;).is_some()    True    &gt;&gt;&gt; maybe(&quot;I'm a value&quot;).is_none()    False    &gt;&gt;&gt; maybe(None).is_some()    False    &gt;&gt;&gt; maybe(None).is_none()    True    &gt;&gt;&gt; maybe(&quot;I'm a value&quot;).get()    &quot;I'm a value&quot;    &gt;&gt;&gt; maybe(&quot;I'm a value&quot;).or_else(lambda: &quot;No value&quot;)    &quot;I'm a value&quot;    &gt;&gt;&gt; maybe(None).get()    Traceback (most recent call last):    ...    Exception: No such element    &gt;&gt;&gt; maybe(None).or_else(lambda: &quot;value&quot;)    'value'    &gt;&gt;&gt; maybe(None).or_else(&quot;value&quot;)    'value'In addition, *Something* and *Nothing* implement the Python magic methods allowing you to treat them as dictionaries:::    &gt;&gt;&gt; nested_dict = maybe(nested_dict)    &gt;&gt;&gt; nested_dict['store']['name']    'MyStore'    &gt;&gt;&gt; nested_dict['store']['address']    None    &gt;&gt;&gt; nested_dict['store']['address']['street'].or_else('No Address Specified')    'No Address Specified'All other method calls on *Something* are forwarded to its real *value*:::    &gt;&gt;&gt; maybe('VALUE').lower()    'value'    &gt;&gt;&gt; maybe(None).invalid().method().or_else('unknwon')    'unknwon'Examples &amp; Use Cases--------------------The Maybe pattern helps you avoid nasty try..except blocks.Consider the following code:::    try:        url = rss.load_feeds()[0].url.domain    except (TypeError, IndexError, KeyError, AttributeError):        url = &quot;planetpython.org&quot;With Maybe you could simply do:::    url = maybe(rss).load_feeds()[0]['url'].domain.or_else(&quot;planetpython.org&quot;)Getting the current logged in user's name.Without maybe:::    def get_user_zipcode():        address = getattr(request.user, 'address', None)        if address:            return getattr(address, 'zipcode', '')        return ''With maybe:::    def get_user_zipcode():        return maybe(request.user).address.zipcode.or_else('')Further Reading---------------* `Option (Scala) &lt;http://www.scala-lang.org/api/current/scala/Option.html&gt;`_* `Maybe (Java) &lt;https://github.com/npryce/maybe-java&gt;`_* `Maybe pattern (Python recipe) &lt;http://code.activestate.com/recipes/577248-maybe-pattern/&gt;`_* `Data.Maybe (Haskell) &lt;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Maybe.html&gt;`_* `Maybe (Ruby) &lt;https://github.com/bhb/maybe&gt;`_Copyright and License---------------------Copyright 2015 - `Eran Kampf &lt;http://www.developerzen.com&gt;`_* Free software: BSD license* Documentation: https://pymaybe.readthedocs.org.* Code is hosted on `GitHub &lt;http://www.github.com/ekampf/pymaybe&gt;`_History-------0.1.0 (2015-01-11)---------------------* First release on PyPI.</longdescription>
</pkgmetadata>