<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pipen-cli-requireChecking the requirements for processes of a [pipen][1] pipeline## Install```shellpip install -U pipen-cli-require```## Usage### Defining requirements of a process```python# example_pipeline.pyfrom pipen import Pipen, Procclass P1(Proc):    &quot;&quot;&quot;Process 1    Requires:        pipen: Run `pip install -U pipen` to install          - check: |            {{proc.lang}} -c &quot;import pipen&quot;        liquidpy: Run `pip install -U liquidpy` to install          - check: |            {{proc.lang}} -c &quot;import liquid&quot;        nonexist: Run `pip install -U nonexist` to install          - check: |            {{proc.lang}} -c &quot;import nonexist&quot;        conditional:          - if: {{envs.require_conditional}}          - check:            {{proc.lang}} -c &quot;import optional&quot;    &quot;&quot;&quot;    input = &quot;a&quot;    output = &quot;outfile:file:out.txt&quot;    envs = {&quot;require_conditional&quot;: False}    lang = &quot;python&quot;# Setup the pipeline# Must be outside __main__# Or define a function to return the pipelinepipeline = Pipen(...).set_start(P1)if __name__ == '__main__':    # Pipeline must be executed with __main__    pipeline.run()```## Checking the requirements via the CLI```shell&gt; pipen require --r-verbose --r-ncores 2 example_pipeline.py:pipelineChecking requirements for pipeline: PIPEN-0│└── P1: Process 1    ├── ✅ pipen    ├── ✅ liquidpy    ├── ❎ nonexist: Run `pip install -U nonexist` to install    │   └── Traceback (most recent call last):    │         File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;    │       ModuleNotFoundError: No module named 'nonexist'    │    └── ⏩ conditional (skipped by if-statement)```## Checking requirements with runtime argumentsFor example, when I use a different python to run the pipeline:Add this to the head of `example_pipeline.py`:```pythonimport pipen_args```See also `tests/pipen_args_pipeline.py`Then specify the path of the python to use:```shellpipen require example_pipeline.py:pipeline --P1.lang /path/to/another/python```[1]: https://github.com/pwwang/pipen</longdescription>
</pkgmetadata>