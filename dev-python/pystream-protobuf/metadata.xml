<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://img.shields.io/travis/cartoonist/pystream-protobuf.svg?style=flat-square)](https://travis-ci.org/cartoonist/pystream-protobuf)[![PyPI Release](https://img.shields.io/pypi/v/pystream-protobuf.svg?style=flat-square)](https://pypi.python.org/pypi/pystream-protobuf)[![PyPI Status](https://img.shields.io/pypi/status/pystream-protobuf.svg?style=flat-square)](https://pypi.python.org/pypi/pystream-protobuf)[![Python](https://img.shields.io/pypi/pyversions/pystream-protobuf.svg?style=flat-square)](https://www.python.org/download/releases/3.0/)[![License](https://img.shields.io/pypi/l/pystream-protobuf.svg?style=flat-square)](https://github.com/cartoonist/pystream-protobuf/blob/master/LICENSE)# pyStreamPython implementation of [stream library](https://github.com/vgteam/stream).## IntroductionThis library enables _stream processing_ of protobuf messages (or any serializableobjects since v1.6.3); i.e. multiple protobuf messages can be written/read into/from asingle stream or file.It was originally developed to parse/write [vg](https://github.com/vgteam/vg)file formats (`.vg`, `.gam`, etc). However, it can be used for any arbitraryprotocol buffer messages.Refer to the C++ [stream library](https://github.com/vgteam/stream) for moredetails.---**NOTE****@vg users:** The new version of stream library, now as a part of[libvgio](https://github.com/vgteam/libvgio), writes a header tag at the start ofthe stream depending on the output format. For example, headers like `b'GAM'`or `b'VG'` can be found before the actual protobuf messages in GAM and VG filesrepectively. In this case, you should provide the expected value using `header`keyword argument; e.g.`stream.parse('file.gam', vg_pb2.Alignment, header=b'GAM', persistent_header=True)`for GAM files (since version v1.6.2).---## EncodingThe encoding is simple. Messages are written in groups of different sizes. Eachgroup starts with its size; i.e. the number of messages in that group. Then, thesize of each message is followed by the encoded message itself. Quoted from[Google Protobuf Developer Guide](https://developers.google.com/protocol-buffers/docs/techniques#streaming):&gt; The Protocol Buffer wire format is not self-delimiting, so protocol buffer&gt; parsers cannot determine where a message ends on their own. The easiest way to&gt; solve this problem is to write the size of each message before you write the&gt; message itself. When you read the messages back in, you read the size, then&gt; read the bytes into a separate buffer, then parse from that buffer.By default, the stream is considered compressed by GZip. However, uncompressedstream processing is possible by passing `gzip=False` to any API calls.## InstallationYou can install pyStream using `pip`:    pip install pystream-protobuf## UsageSee [Wiki](https://github.com/cartoonist/pystream-protobuf/wiki) for usage documentation.## DevelopmentIn case, you work with the source code and need to build the package:    python setup.py buildThe proto files in the test module required to be compiled before running testcases. To do so, it is required to have Google protobuf compiler (&gt;=3.0.2)installed. After installing protobuf compiler, run:    make initto compile proto files required for test module and then:    make testto run tests.</longdescription>
</pkgmetadata>