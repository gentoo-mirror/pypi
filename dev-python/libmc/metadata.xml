<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>libmc=====|build_go| |build_py||status| |pypiv| |pyversions| |wheel| |license|libmc is a memcached client library for Python without any otherdependencies in runtime. It's mainly written in C++ and Cython. libmccan be considered as a drop in replacement for libmemcached and`python-libmemcached &lt;https://github.com/douban/python-libmemcached&gt;`__.libmc is developing and maintaining by Douban Inc. Currently, It isworking in production environment, powering all web traffics indouban.com. Realtime `benchmarkresult &lt;https://travis-ci.org/douban/libmc/builds/57124335#L1611&gt;`__ isavailable on travis.Build and Installation----------------------For users:::    pip install libmcUsage:.. code:: python    import libmc    mc = libmc.Client(['localhost:11211', 'localhost:11212'])    mc.set('foo', 'bar')    assert mc.get('foo') == 'bar'Under the hood--------------Under the hood, libmc consists of 2 parts: an internal fully-functionalmemcached client implementation in C++ and a Cython wrapper around thatimplementation. Dynamic memory allocation and memory-copy are slow, sowe tried our best to avoid them. The ``set_multi`` command is notnatively supported by the `memcachedprotocol &lt;https://github.com/memcached/memcached/blob/master/doc/protocol.txt&gt;`__.Some techniques are applied to make ``set_multi`` command extremely fastin libmc (compared to some other similiar libraries).Configuration-------------.. code:: python    import libmc    from libmc import (        MC_HASH_MD5, MC_POLL_TIMEOUT, MC_CONNECT_TIMEOUT, MC_RETRY_TIMEOUT    )    mc = libmc.Client(        [        'localhost:11211',        'localhost:11212',        'remote_host',        'remote_host mc.mike',        'remote_host:11213 mc.oscar'        ],        do_split=True,        comp_threshold=0,        noreply=False,        prefix=None,        hash_fn=MC_HASH_MD5,        failover=False    )    mc.config(MC_POLL_TIMEOUT, 100)  # 100 ms    mc.config(MC_CONNECT_TIMEOUT, 300)  # 300 ms    mc.config(MC_RETRY_TIMEOUT, 5)  # 5 s-  ``servers``: is a list of memcached server addresses. Each address   can be in format of ``hostname[:port] [alias]``. ``port`` and ``alias``   are optional. If ``port`` is not given, default port ``11211`` will   be used. ``alias`` will be used to compute server hash if given,   otherwise server hash will be computed based on ``host`` and ``port``   (i.e.: If ``port`` is not given or it is equal to ``11211``, ``host``   will be used to compute server hash. If ``port`` is not equal to ``11211``,   ``host:port`` will be used).-  ``do_split``: Memcached server will refuse to store value if size &gt;=   1MB, if ``do_split`` is enabled, large value (&lt; 10 MB) will be   splitted into several blocks. If the value is too large (&gt;= 10 MB),   it will not be stored. default: ``True``-  ``comp_threshold``: All kinds of values will be encoded into string   buffer. If ``buffer length &gt; comp_threshold &gt; 0``, it will be   compressed using zlib. If ``comp_threshold = 0``, string buffer will   never be compressed using zlib. default: ``0``-  ``noreply``: Whether to enable memcached's ``noreply`` behaviour.   default: ``False``-  ``prefix``: The key prefix. default: ``''``-  ``hash_fn``: hashing function for keys. possible values:   -  ``MC_HASH_MD5``   -  ``MC_HASH_FNV1_32``   -  ``MC_HASH_FNV1A_32``   -  ``MC_HASH_CRC_32``   default: ``MC_HASH_MD5``   **NOTE:** fnv1\_32, fnv1a\_32, crc\_32 implementations in libmc are   per each spec, but they're not compatible with corresponding   implementions in libmemcached.-  ``failover``: Whether to failover to next server when current server   is not available. default: ``False``-  ``MC_POLL_TIMEOUT`` Timeout parameter used during set/get procedure.   (default: ``300`` ms)-  ``MC_CONNECT_TIMEOUT`` Timeout parameter used when connecting to   memcached server on initial phase. (default: ``100`` ms)-  ``MC_RETRY_TIMEOUT`` When a server is not available dur to server-end   error. libmc will try to establish the broken connection in every   ``MC_RETRY_TIMEOUT`` s until the connection is back to live.(default:   ``5`` s)**NOTE:** The hashing algorithm for host mapping on continuum is alwaysmd5.Contributing to libmc---------------------Feel free to send a **Pull Request**. For feature requests or anyquestions, please open an **Issue**.For **SECURITY DISCLOSURE**, please disclose the information responsiblyby sending an email to security@douban.com directly instead of creatinga GitHub issue.FAQ---Does libmc support PHP?^^^^^^^^^^^^^^^^^^^^^^^No. But if you like, you can write a wrapper for PHP based on the C++implementation.Is Memcached binary protocol supported ?^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^No. Only Memcached ASCII protocol is supported currently.Why reinventing the wheel?^^^^^^^^^^^^^^^^^^^^^^^^^^Before libmc, we're using`python-libmemcached &lt;https://github.com/douban/python-libmemcached&gt;`__,which is a python extention for`libmemcached &lt;http://libmemcached.org/libMemcached.html&gt;`__.libmemcached is quite weird and buggy. After nearly one decade, there'restill some unsolved bugs.Is libmc thread-safe ?^^^^^^^^^^^^^^^^^^^^^^libmc is a single-threaded memcached client. If you initialize a libmcclient in one thread but reuse that in another thread, a PythonException ``ThreadUnsafe`` will raise in Python.Is libmc compatible with gevent?^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Yes, with the help of `greenify &lt;https://github.com/douban/greenify&gt;`__,libmc is friendly to gevent. Read ``tests/shabby/gevent_issue.py`` fordetails.**Notice:**`gevent.monkey.patch_all()` will override`threading.current_thread().ident` to Greenlet's ID,this will cause libmc to throw a ThreadUnSafe erroror run into dead lock, you should only patch the thingsthat you need, e.g... code:: python    from gevent import monkey    monkey.patch_socket()Acknowledgments----------------  Thanks to `@fahrenheit2539 &lt;https://github.com/fahrenheit2539&gt;`__ and   the llvm project for the standalone.   `SmallVector &lt;http://fahrenheit2539.blogspot.com/2012/06/introduction-in-depths-look-at.html&gt;`__   implementation.-  Thanks to `@miloyip &lt;https://github.com/miloyip&gt;`__ for the high   performance `i64toa &lt;https://github.com/miloyip/itoa-benchmark&gt;`__   implementation.-  Thanks to `Ivan Novikov &lt;https://twitter.com/d0znpp&gt;`__ for the   research in `THE NEW PAGE OF INJECTIONS BOOK: MEMCACHED   INJECTIONS &lt;https://www.blackhat.com/us-14/briefings.html#the-new-page-of-injections-book-memcached-injections&gt;`__.-  Thanks to the PolarSSL project for the md5 implementation.-  Thanks to `@lericson &lt;https://github.com/lericson&gt;`__ for the `benchmark   script in   pylibmc &lt;https://github.com/lericson/pylibmc/blob/master/bin/runbench.py&gt;`__.-  Thanks to the libmemcached project and some other projects possibly   not mentioned here.Contributors-------------  `@mckelvin &lt;https://github.com/mckelvin&gt;`__-  `@zzl0 &lt;https://github.com/zzl0&gt;`__-  `@windreamer &lt;https://github.com/windreamer&gt;`__-  `@lembacon &lt;https://github.com/lembacon&gt;`__-  `@seansay &lt;https://github.com/seansay&gt;`__-  `@mosasiru &lt;https://github.com/mosasiru&gt;`__-  `@jumpeiMano &lt;https://github.com/jumpeiMano&gt;`__Who is using------------- `豆瓣 &lt;https://douban.com&gt;`__- `下厨房 &lt;https://www.xiachufang.com&gt;`__- `Some other projects on GitHub &lt;https://github.com/douban/libmc/network/dependents&gt;`__- Want to add your company/organization name here?  Please feel free to send a PR!Documentation-------------https://github.com/douban/libmc/wikiLICENSE-------Copyright (c) 2014-2020, Douban Inc. All rights reserved.Licensed under a BSD license:https://github.com/douban/libmc/blob/master/LICENSE.txt.. |build_go| image:: https://github.com/douban/libmc/actions/workflows/golang.yml/badge.svg   :target: https://github.com/douban/libmc/actions/workflows/golang.yml.. |build_py| image:: https://github.com/douban/libmc/actions/workflows/python.yml/badge.svg   :target: https://github.com/douban/libmc/actions/workflows/python.yml.. |pypiv| image:: https://img.shields.io/pypi/v/libmc   :target: https://pypi.org/project/libmc/.. |status| image:: https://img.shields.io/pypi/status/libmc.. |pyversions| image:: https://img.shields.io/pypi/pyversions/libmc.. |wheel| image:: https://img.shields.io/pypi/wheel/libmc.. |license| image:: https://img.shields.io/pypi/l/libmc?color=blue</longdescription>
</pkgmetadata>