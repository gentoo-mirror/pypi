<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/semeio.svg)](https://badge.fury.io/py/semeio)[![Actions Status](https://github.com/equinor/semeio/workflows/CI/badge.svg)](https://github.com/equinor/semeio/actions?query=workflow=CI)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)# semeio #Semeio is a collection of jobs and workflow jobs used in [ERT](https://github.com/equinor/ert). These areexposing end points which is considered the API of semeio. If there are submodules that can be appliedmore generally, or have use outside these jobs and workflows, please create an issue and it can be exposed inthe API.# Installation and usageSemeio is available on [pypi](https://pypi.org/project/semeio/) and can be installed using `pip install semeio`.```sh# Installpip install semeio```## UsageOnce installed semeio will automatically register its workflows and forward model jobs with[ERT](https://github.com/equinor/ert). Through the plugin hooks it will also add its own documentation to the [ERT](https://github.com/equinor/ert)documentation. See the [ERT](https://github.com/equinor/ert) documentation for examples onhow to run workflows and forward model jobs, and build the [ERT](https://github.com/equinor/ert) documentation to getdocumentation for the workflows and forward model jobs.## Run tests[tox](https://tox.readthedocs.io/en/latest/) is used as the test facilitator,to run the full test suite:```shpip install toxtox```or to run it for a particular Python version (in this case Python 3.10):```shpip install toxtox -e py310```or to run it for a the current Python version:```shpip install toxtox -e py```[pytest](https://docs.pytest.org/en/latest/) is used as the test runner, so for quickeriteration it is possible to run:```shpytest```this requires that the test dependencies from `test_requirements.txt` are installed:```sh# Install test requirementspip install -r test_requirements.txt```[pre-commit](https://pre-commit.com/) is used to comply with the formatting standards.The complete formatting tests can be run with:```shpip install toxtox -e style```Formatting tests include `black`, `flake8` and `pylint`, See `.pre-commit-config.yaml` for thecomplete steps.[pre-commit](https://pre-commit.com/) can also provide git hooks to run on every committo avoid commiting with formatting errors. This will only run on the diff so is quite fast.To configure this, run:```shpip install -r test_requirements.txtpip install pre-commitpre-commit install```After this the hook will run on every commit.If you would like to remove the hooks, run:```shpre-commit uninstall```</longdescription>
</pkgmetadata>