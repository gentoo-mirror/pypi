<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CodeGenPT![Version](https://img.shields.io/pypi/v/codegenpt)![Python Version Support](https://img.shields.io/pypi/pyversions/codegenpt)Autogenerate files or entire projects using ChatGPT API.## Installation```pip install codegenpt```## UsageCodeGenPT looks for `.codegenpt` files and generate files using its instructions.### Generating individual filesExample: `hello_world.py.codegenpt````Create a hello world program```Then:```bash$ codegenpt helloworld.py.codegenpt‚è≥ Generating file: helloworld.pyüç∫ File generated: helloworld.pyüçª Success```Will generate a file named `helloworld.py`:```pythonprint(&quot;hello world&quot;);```The actual content of the file will be generated by ChatGPT, so it will vary at each run. You can use `codegenpt -R .` to recursively look for all `.codegenpt` files and generate them.### Generate entire directories or projectsYou can create entire directories or projects using a `.dir.codegenpt` file.Example: `tictactoe.dir.codegenpt````Create a tic-tac-toe game using html, js and css.```Then:```bash$ codegenpt tic-tac-toe.dir.codegenpt‚è≥ Generating directory: tic-tac-toeüç∫ File generated: tic-tac-toe/style.cssüç∫ File generated: tic-tac-toe/index.htmlüç∫ File generated: tic-tac-toe/game.jsüçª Success```Will create a folder called tic-tac-toe and generate all needed files.## SetupCodeGenPT expects an environment variable called `OPEN_API_KEY`.1. Get an [Open AI API Key](https://github.com/Significant-Gravitas/Auto-GPT#:~:text=Get%20an%20OpenAI-,API%20Key,-Download%20the%20latest)2. Add the key to your `OPEN_API_KEY` environment variable:  - If you use `bash`:    ```bash    echo 'export OPENAI_API_KEY={your api key}' &gt;&gt; ~/.bash_profile &amp;&amp; source ~/.bash_profile    ```  - If yu use `zsh`:    ```bash    echo 'export OPENAI_API_KEY={your api key}' &gt;&gt; ~/.zshenv &amp;&amp; source ~/.zshenv## CommandsCommands are special instructions you can use to instruct the generation process.All codegenpt commands are placed in a single line in the format:```@command_name args...```### @includeIncludes one or more files on the context.Included files can be referenced using `@filename.ext` in the generation instructionsExample: `names.txt`:```DiegoAlbertoDaniel````random_name.js.codegenpt`:```@include assets/names.txtRead @names.txt and write a function that returns one of the names````random_name.js`:```jsfunction getRandomName() {  const names = [    'Diego',    'Alberto',    'Daniel'  ];  const randomIndex = Math.floor(Math.random() * names.length);  return names[randomIndex];}```</longdescription>
</pkgmetadata>