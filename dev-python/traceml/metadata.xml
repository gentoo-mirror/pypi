<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![License: Apache 2](https://img.shields.io/badge/License-apache2-green.svg)](LICENSE)[![TraceML](https://github.com/polyaxon/traceml/actions/workflows/traceml.yml/badge.svg)](https://github.com/polyaxon/traceml/actions/workflows/traceml.yml)[![Slack](https://img.shields.io/badge/chat-on%20slack-aadada.svg?logo=slack&amp;longCache=true)](https://polyaxon.com/slack/)[![Docs](https://img.shields.io/badge/docs-stable-brightgreen.svg?style=flat)](https://polyaxon.com/docs/)[![GitHub](https://img.shields.io/badge/issue_tracker-github-blue?logo=github)](https://github.com/polyaxon/polyaxon/issues)[![GitHub](https://img.shields.io/badge/roadmap-github-blue?logo=github)](https://github.com/polyaxon/polyaxon/milestones)&lt;a href=&quot;https://polyaxon.com&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/polyaxon/polyaxon/master/artifacts/packages/traceml.svg&quot; width=&quot;125&quot; height=&quot;125&quot; align=&quot;right&quot; /&gt;&lt;/a&gt;# TraceMLEngine for ML/Data tracking, visualization, and dashboards for Polyaxon.## Install```bashpip install traceml```If you would like to use the tracking features, you need to install `polyaxon` as well:```bashpip install polyaxon traceml```## Local sandbox&gt; WIP: this command is in previewStart a local sandbox to track and visualize the run```bashpolyaxon sandbox -f path/to/artifacts/repo```## Offline usageYou can enable the offline mode to track runs without an  API:```bashexport POLYAXON_OFFLINE=&quot;true&quot;```Or passing the offline flag```pythonfrom traceml import trackingtracking.init(..., is_offline=True, ...)```## Simple usage in a Python script```pythonimport randomimport traceml as trackingtracking.init(    is_offline=True,    project='quick-start',    name=&quot;my-new-run&quot;,    description=&quot;trying TraceML&quot;,    tags=[&quot;examples&quot;],    artifacts_path=&quot;path/to/artifacts/repo&quot;)# Tracking some data refstracking.log_data_ref(content=X_train, name='x_train')tracking.log_data_ref(content=y_train, name='y_train')# Tracking inputstracking.log_inputs(    batch_size=64,    dropout=0.2,    learning_rate=0.001,    optimizer=&quot;Adam&quot;)def get_loss(step):    result = 10 / (step + 1)    noise = (random.random() - 0.5) * 0.5 * result    return result + noise# Track metricsfor step in range(100):    loss = get_loss(step)    tracking.log_metrics(    loss=loss,    accuracy=(100 - loss) / 100.0,)# Track some one time resultstracking.log_outputs(validation_score=0.66)# Optionally manually stop the tracking processtracking.stop()```## Integration with deep learning and machine learning libraries and frameworks### KerasYou can use TraceML's callback to automatically save all metrics and collect outputs and models, you can also track additional information using the logging methods:```pythonfrom traceml import trackingfrom traceml.integrations.keras import Callbacktracking.init(    is_offline=True,    project='tracking-project',    name=&quot;keras-run&quot;,    description=&quot;trying TraceML &amp; Keras&quot;,    tags=[&quot;examples&quot;],    artifacts_path=&quot;path/to/artifacts/repo&quot;)tracking.log_inputs(    batch_size=64,    dropout=0.2,    learning_rate=0.001,    optimizer=&quot;Adam&quot;)tracking.log_data_ref(content=x_train, name='x_train')tracking.log_data_ref(content=y_train, name='y_train')tracking.log_data_ref(content=x_test, name='x_test')tracking.log_data_ref(content=y_test, name='y_test')# ...model.fit(    x_train,    y_train,    validation_data=(X_test, y_test),    epochs=epochs,    batch_size=100,    callbacks=[Callback()],)```### PyTorchYou can log metrics, inputs, and outputs of Pytorch experiments using the tracking module:```pythonfrom traceml import trackingtracking.init(    is_offline=True,    project='tracking-project',    name=&quot;pytorch-run&quot;,    description=&quot;trying TraceML &amp; PyTorch&quot;,    tags=[&quot;examples&quot;],    artifacts_path=&quot;path/to/artifacts/repo&quot;)tracking.log_inputs(    batch_size=64,    dropout=0.2,    learning_rate=0.001,    optimizer=&quot;Adam&quot;)# Metricsfor batch_idx, (data, target) in enumerate(train_loader):    output = model(data)    loss = F.nll_loss(output, target)    loss.backward()    optimizer.step()    tracking.log_mtrics(loss=loss)asset_path = tracking.get_outputs_path('model.ckpt')torch.save(model.state_dict(), asset_path)# log modeltracking.log_artifact_ref(asset_path, framework=&quot;pytorch&quot;, ...)```### TensorflowYou can log metrics, outputs, and models of Tensorflow experiments and distributed Tensorflow experiments using the tracking module:```pythonfrom traceml import trackingfrom traceml.integrations.tensorflow import Callbacktracking.init(    is_offline=True,    project='tracking-project',    name=&quot;tf-run&quot;,    description=&quot;trying TraceML &amp; Tensorflow&quot;,    tags=[&quot;examples&quot;],    artifacts_path=&quot;path/to/artifacts/repo&quot;)tracking.log_inputs(    batch_size=64,    dropout=0.2,    learning_rate=0.001,    optimizer=&quot;Adam&quot;)# log modelestimator.train(hooks=[Callback(log_image=True, log_histo=True, log_tensor=True)])```### FastaiYou can log metrics, outputs, and models of Fastai experiments using the tracking module:```pythonfrom traceml import trackingfrom traceml.integrations.fastai import Callbacktracking.init(    is_offline=True,    project='tracking-project',    name=&quot;fastai-run&quot;,    description=&quot;trying TraceML &amp; Fastai&quot;,    tags=[&quot;examples&quot;],    artifacts_path=&quot;path/to/artifacts/repo&quot;)# Log model metricslearn.fit(..., cbs=[Callback()])```### Pytorch LightningYou can log metrics, outputs, and models of Pytorch Lightning experiments using the tracking module:```pythonfrom traceml import trackingfrom traceml.integrations.pytorch_lightning import Callbacktracking.init(    is_offline=True,    project='tracking-project',    name=&quot;pytorch-lightning-run&quot;,    description=&quot;trying TraceML &amp; Lightning&quot;,    tags=[&quot;examples&quot;],    artifacts_path=&quot;path/to/artifacts/repo&quot;)...trainer = pl.Trainer(    gpus=0,    progress_bar_refresh_rate=20,    max_epochs=2,    logger=Callback(),)```### HuggingFaceYou can log metrics, outputs, and models of HuggingFace experiments using the tracking module:```pythonfrom traceml import trackingfrom traceml.integrations.hugging_face import Callbacktracking.init(    is_offline=True,    project='tracking-project',    name=&quot;hg-run&quot;,    description=&quot;trying TraceML &amp; HuggingFace&quot;,    tags=[&quot;examples&quot;],    artifacts_path=&quot;path/to/artifacts/repo&quot;)...trainer = Trainer(    model=model,    args=training_args,    train_dataset=train_dataset if training_args.do_train else None,    eval_dataset=eval_dataset if training_args.do_eval else None,    callbacks=[Callback],    # ...)```## Tracking artifacts```pythonimport altair as altimport matplotlib.pyplot as pltimport numpy as npimport plotly.express as pxfrom bokeh.plotting import figurefrom vega_datasets import datafrom traceml import trackingdef plot_mpl_figure(step):    np.random.seed(19680801)    data = np.random.randn(2, 100)    figure, axs = plt.subplots(2, 2, figsize=(5, 5))    axs[0, 0].hist(data[0])    axs[1, 0].scatter(data[0], data[1])    axs[0, 1].plot(data[0], data[1])    axs[1, 1].hist2d(data[0], data[1])    tracking.log_mpl_image(figure, 'mpl_image', step=step)def log_bokeh(step):    factors = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;]    x = [50, 40, 65, 10, 25, 37, 80, 60]    dot = figure(title=&quot;Categorical Dot Plot&quot;, tools=&quot;&quot;, toolbar_location=None,                 y_range=factors, x_range=[0, 100])    dot.segment(0, factors, x, factors, line_width=2, line_color=&quot;green&quot;, )    dot.circle(x, factors, size=15, fill_color=&quot;orange&quot;, line_color=&quot;green&quot;, line_width=3, )    factors = [&quot;foo 123&quot;, &quot;bar:0.2&quot;, &quot;baz-10&quot;]    x = [&quot;foo 123&quot;, &quot;foo 123&quot;, &quot;foo 123&quot;, &quot;bar:0.2&quot;, &quot;bar:0.2&quot;, &quot;bar:0.2&quot;, &quot;baz-10&quot;, &quot;baz-10&quot;,         &quot;baz-10&quot;]    y = [&quot;foo 123&quot;, &quot;bar:0.2&quot;, &quot;baz-10&quot;, &quot;foo 123&quot;, &quot;bar:0.2&quot;, &quot;baz-10&quot;, &quot;foo 123&quot;, &quot;bar:0.2&quot;,         &quot;baz-10&quot;]    colors = [        &quot;#0B486B&quot;, &quot;#79BD9A&quot;, &quot;#CFF09E&quot;,        &quot;#79BD9A&quot;, &quot;#0B486B&quot;, &quot;#79BD9A&quot;,        &quot;#CFF09E&quot;, &quot;#79BD9A&quot;, &quot;#0B486B&quot;    ]    hm = figure(title=&quot;Categorical Heatmap&quot;, tools=&quot;hover&quot;, toolbar_location=None,                x_range=factors, y_range=factors)    hm.rect(x, y, color=colors, width=1, height=1)    tracking.log_bokeh_chart(name='confusion-bokeh', figure=hm, step=step)def log_altair(step):    source = data.cars()    brush = alt.selection(type='interval')    points = alt.Chart(source).mark_point().encode(        x='Horsepower:Q',        y='Miles_per_Gallon:Q',        color=alt.condition(brush, 'Origin:N', alt.value('lightgray'))    ).add_selection(        brush    )    bars = alt.Chart(source).mark_bar().encode(        y='Origin:N',        color='Origin:N',        x='count(Origin):Q'    ).transform_filter(        brush    )    chart = points &amp; bars    tracking.log_altair_chart(name='altair_chart', figure=chart, step=step)def log_plotly(step):    df = px.data.tips()    fig = px.density_heatmap(df, x=&quot;total_bill&quot;, y=&quot;tip&quot;, facet_row=&quot;sex&quot;, facet_col=&quot;smoker&quot;)    tracking.log_plotly_chart(name=&quot;2d-hist&quot;, figure=fig, step=step)plot_mpl_figure(100)log_bokeh(100)log_altair(100)log_plotly(100)```</longdescription>
</pkgmetadata>