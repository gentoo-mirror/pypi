<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># JSON Schema Application Environment Configuration and ValidationThis package allows you to validate application environment variables that areused for configuration with JSON schemas.It is extremely useful to use with Docker/kubernetes where you might havequite a bit of configuration originating from environment variables; however,it also provides a nice generic way to define and validate any applicationconfiguration with JSON Schema.## UsageFirst, define a JSON Schema file(`env-schema.json`):```json{    &quot;$schema&quot;: &quot;http://json-schema.org/draft-07/schema#&quot;,     &quot;type&quot;: &quot;object&quot;,      &quot;properties&quot;: {        &quot;db_uri&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;title&quot;: &quot;AMQP host&quot;        }    },    &quot;required&quot;: [&quot;db_uri&quot;]}```Then, validate your environment config(`export DB_URI=postgresql://localhost:5432`):```pythonimport enviralsettings = enviral.validate_env('env-schema.json')settings['db_uri']```Validate with multiple files:```pythonimport enviralsettings = enviral.validate_env('env-schema.json', 'package:validation-file.json')```You can also validate existing objects against JSON schema files:```pythonimport enviralenviral.validate_object({&quot;db_uri&quot;: &quot;postgresql://localhost:5432&quot;}, 'env-schema.json')```Or command line validate:```bashjson-schema-env-validator env-schema.json package:validation-file.json```## Development```bashpip install -r requirements.txtpip install -e ../bin/pre-commit install```</longdescription>
</pkgmetadata>