<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>doxypypy========*A more Pythonic version of doxypy, a Doxygen filter for Python.*Intent------For now Doxygen_ has limited support for Python.  It recognizes Python comments,but otherwise treats the language as being more or less like Java.  It doesn'tunderstand basic Python syntax constructs like docstrings, keyword arguments,generators, nested functions, decorators, or lambda expressions.  It likewisedoesn't understand conventional constructs like doctests or ZOPE-styleinterfaces.  It does however support inline filters that can be used to makeinput source code a little more like what it's expecting.The excellent doxypy_ makes it possible to embed Doxygen commands in Pythondocstrings, and have those docstrings converted to Doxygen-recognized commentson the fly per Doxygen's regular input filtering process.  It however does notaddress any of the other previously mentioned areas of difficulty.This project started off as a fork of doxypy but quickly became quite distinct.It shares little (if any) of the same code at this point (but maintains theoriginal license just in case).  It is meant to support all the same commandline options as doxypy, but handle additional Python syntax beyond docstrings.Additional Syntax Supported---------------------------Python can have functions and classes within both functions and classes.Doxygen best understands this concept via its notion of namespaces.  This filterthus can supply Doxygen tags marking namespaces on every function and class.This addresses the issue of Doxygen merging inner functions' documentation withthe documentation of the parent.Python class members whose names begin with a double-underscore are mangledand kept private by the language.  Doxygen does not understand this nativelyyet, so this filter additionally provides Doxygen tags to label such variablesas private.Python frequently embeds doctests within docstrings.  This filter makes ittrivial to mark off such sections of the docstring so they get displayed ascode.ZOPE-style interfaces overload class definitions to be interface definitions,use embedded variable assignments to identify attributes, and use specificfunction calls to indicate interface adherence.  Furthermore, they frequentlydon't have any code beyond their docstrings, so naively removing docstringswould result in broken Python.  This filter has basic understanding of theseinterfaces and treats them accordingly, supplying Doxygen tags as appropriate.Fundamentally Python docstrings are meant for humans and not machines, and oughtnot to have special mark-up beyond conventional structured text.  This filterheuristically examines Python docstrings, and ones like the sample for complexin `PEP 257`_ or that generally follow the stricter `Google Python Style Guide`_will get appropriate Doxygen tags automatically added.How It Works------------This project takes a radically different approach than doxypy.  Rather than useregular expressions tied to a state machine to figure out syntax, Python's ownAbstract Syntax Tree module is used to extract items of interest.  If the`autobrief` option is enabled, docstrings are parsed via a set of regularexpressions and a producer / consumer pair of coroutines.Example-------This filter will correctly process code like the following working (albeitcontrived) example:.. code-block:: python    def myfunction(arg1, arg2, kwarg='whatever.'):        &quot;&quot;&quot;        Does nothing more than demonstrate syntax.        This is an example of how a Pythonic human-readable docstring can        get parsed by doxypypy and marked up with Doxygen commands as a        regular input filter to Doxygen.        Args:            arg1:   A positional argument.            arg2:   Another positional argument.        Kwargs:            kwarg:  A keyword argument.        Returns:            A string holding the result.        Raises:            ZeroDivisionError, AssertionError, &amp; ValueError.        Examples:            &gt;&gt;&gt; myfunction(2, 3)            '5 - 0, whatever.'            &gt;&gt;&gt; myfunction(5, 0, 'oops.')            Traceback (most recent call last):                ...            ZeroDivisionError: integer division or modulo by zero            &gt;&gt;&gt; myfunction(4, 1, 'got it.')            '5 - 4, got it.'            &gt;&gt;&gt; myfunction(23.5, 23, 'oh well.')            Traceback (most recent call last):                ...            AssertionError            &gt;&gt;&gt; myfunction(5, 50, 'too big.')            Traceback (most recent call last):                ...            ValueError        &quot;&quot;&quot;        assert isinstance(arg1, int)        if arg2 &gt; 23:            raise ValueError        return '{0} - {1}, {2}'.format(arg1 + arg2, arg1 / arg2, kwarg)There are a few points to note:1.  No special tags are used.  Best practice human-readable section headersare enough.2.  Some flexibility is allowed.  Most common names for sections are accepted,and items and descriptions may be separated by either colons or dashes.3.  The brief must be the first item and be no longer than oneline.4.  Everything thrown into an examples section will be treated as code, so it'sthe perfect place for doctests.Additional more comprehensive examples can be found in the test area.Installing doxypypy-------------------One can use either :code:`pip` or :code:`easy_install` for installation.Running either:.. code-block:: shell    pip install doxypypyor:.. code-block:: shell    easy_install doxypypywith administrator privileges should do the trick.Many Linux distributions have packages for doxypypy, so if you areusing Linux you may find it more convenient to use :code:`aptitude`,:code:`apt`, :code:`apt-get`, :code:`yum`, :code:`dnf`, etc. asappropriate for your system to install the version tested by thedistribution maintainer. It will often be available as separatepackages for both Python 3 and Python 2.Previewing doxypypy Output--------------------------After successful installation, doxypypy can be run from the command line topreview the filtered results with:.. code-block:: shell    doxypypy -a -c file.pyTypically you'll want to redirect output to a file for viewing in a text editor:.. code-block:: shell    doxypypy -a -c file.py &gt; file.py.outInvoking doxypypy from Doxygen------------------------------To make Doxygen run your Python code through doxypypy, set the FILTER\_PATTERNStag in your Doxyfile as follows:.. code-block:: shell    FILTER_PATTERNS        = *.py=py_filter`py_filter` must be available in your path as a shell script (or Windows batchfile).  If you wish to run `py_filter` in a particular directory you can includethe full or relative path.For Unix-like operating systems, `py_filter` should like something like this:.. code-block:: shell    #!/bin/bash    doxypypy -a -c $1In Windows, the batch file should be named `py_filter.bat`, and need onlycontain the one line:.. code-block:: shell    doxypypy -a -c %1Running Doxygen as usual should now run all Python code through doxypypy.  Besure to carefully browse the Doxygen output the first time to make sure thatDoxygen properly found and executed doxypypy... _Doxygen: http://www.stack.nl/~dimitri/doxygen/.. _doxypy: https://github.com/Feneric/doxypy.. _PEP 257: http://www.python.org/dev/peps/pep-0257/.. _Google Python Style Guide: https://google.github.io/styleguide/pyguide.html?showone=Comments#Comments</longdescription>
</pkgmetadata>