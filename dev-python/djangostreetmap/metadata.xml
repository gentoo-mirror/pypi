<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![codecov](https://codecov.io/gh/joshbrooks/djangostreetmap/branch/main/graph/badge.svg?token=MXcJUkbOMf)](https://codecov.io/gh/joshbrooks/djangostreetmap)# DjangoStreetMapDjangSstreetMap is a Django application to load OSM data into a postgis database and deliver OSM data asMVT tiles.## Openstreetmap Vector Tiles&gt; &quot;A vector tile is a lightweight data format for storing geospatial vector data&quot;For an introduction to MVT (Mapbox Vector Tiles) see the [mapbox docs](https://docs.mapbox.com/help/glossary/vector-tiles/)For an introduction to OSM see [openstreetmap.org](https://www.openstreetmap.org/)## Purpose of this projectThis is a Django application to1. Import OSM data as Django models2. Expose Django models as MVT (Mapbox Vector Tile) geographic format dataTile generation is much faster when geometry is in srid=3857 (or maybe with an index in that SRID?)## PrerequisitesYou need the `gdal` libraries installedOn Ubuntu:```sudo apt install binutils libproj-dev gdal-bin```Otherwise refer to the Django docs &quot;Installing geospatial libraries&quot;## Adding to a ProjectIf necessary install psycopg2 in your envExtend installed_apps with the following apps:`pip install osmflex````python[    &quot;django.contrib.gis&quot;,    &quot;djangostreetmap&quot;,    &quot;osmflex&quot;,]```## (Recommended) Set your cacheYou likely want to set a fast cache for your tiles like Memcached. If this is not foundthe default cache will be used; this can be a bit slower and is very much non persistentThis assumes you're running memcached (Linux: `apt install memcached`) and installed memcached(`pip install python-memcached`)```pythonCACHES = {    'default': {        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',        'LOCATION': '127.0.0.1:11211',    }}```## Running faster in testingRun `poetry install`To run pytest, you need to have an appropriate postgis databaseIf you use docker one option is to run the following:```bashdocker run \    --rm \    -p 49155:5432 \    --name=djangostreetmap \    -e POSTGRES_PASSWORD=post1234 \    postgis/postgis:14-3.2 \    -c fsync=off \    -c shared_buffers=4096MB```Run `poetry run pytest`Runserver is &quot;ok&quot; but this recipe will give faster performance for demonstration purposes```bashpip install gunicorngunicorn -w 8 djangostreetmap.wsgi:application```## Buildingpoetry version patchpoetry buildpoetry publish## Writing ViewsTo set up a new View, create a subclass of TileLayerView with some `MvtQuery` instances as layers:```pythonclass RoadLayerView(TileLayerView):    layers = [        MvtQuery(table=OsmHighway._meta.db_table, attributes=[&quot;name&quot;], filters=[f&quot;\&quot;highway\&quot;='{road_class}'&quot;], layer=road_class)        for road_class in (&quot;primary&quot;, &quot;secondary&quot;, &quot;tertiary&quot;)    ]```Append the URL to your urls.py as follows. Note the zoom, x and y are mandatory.```python    path(&quot;highways/&lt;int:zoom&gt;/&lt;int:x&gt;/&lt;int:y&gt;.pbf&quot;, RoadLayerView.as_view()),```## Running in Development### Set up postgis```bashdocker run --name=osm \    -e POSTGRES_DB=postgres \    -e POSTGRES_USER=postgres \    -e POSTGRES_PASSWORD=post1234 \    -p 49155:5432 \    postgis/postgis:12-3.1```Find your port: if you do not use `49155` as above:```sh(env) josh@m4800:~/github/joshbrooks/djangostreetmap$ docker psCONTAINER ID   IMAGE                            COMMAND                  CREATED          STATUS             PORTS                                         NAMESc619232fe38a   postgis/postgis:12-3.1           &quot;docker-entrypoint.sâ€¦&quot;   33 seconds ago   Up 32 seconds      0.0.0.0:49155-&gt;5432/tcp, :::49155-&gt;5432/tcp   osm...```OSM is on port 49155To apply this to your project:```python  DATABASES = {    &quot;default&quot;: {        &quot;ENGINE&quot;: &quot;django.contrib.gis.db.backends.postgis&quot;,        &quot;USER&quot;: &quot;postgres&quot;,        &quot;PASSWORD&quot;: &quot;post1233&quot;,        &quot;HOST&quot;: &quot;localhost&quot;,        &quot;PORT&quot;: &quot;49154&quot;,        &quot;NAME&quot;: &quot;postgres&quot;,    }}```### Fetch your datawget https://download.geofabrik.de/australia-oceania/papua-new-guinea-latest.osm.pbforwget https://download.geofabrik.de/asia/east-timor-latest.osm.pbf### Installing osm2psqlTo run the management command below you'll need an `osm2pgsql` version of around 1.3 or greater. This is not available in the ubuntu package manager (yet)...### Import DataThe &quot;osmflex&quot; app has two management commands to run which will populate osmflex models```sh./manage.py run_osm2pgsql /media/josh/blackgate/osm/asia/east-timor-latest.osm.pbf``````sh./manage.py import_from_pgosmflex```### Exploring dataSee the Django admin for osmflex:http://localhost:8000/admin/osmflexpsql --host localhost --username postgres --port 49159### Qgis- Add a new Postgres Connection with the following settings:Name: DjangoStreetMapHost: localhostPort: 49155Database: postgresAuthentication: Basicpostgres / post1233## DevelopmentCode is blacked, flaked, isorted and mypy'd.`pip install pre-commit`</longdescription>
</pkgmetadata>