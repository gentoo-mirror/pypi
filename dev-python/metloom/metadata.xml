<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========metloom========.. image:: https://img.shields.io/pypi/v/metloom.svg        :target: https://pypi.python.org/pypi/metloom.. image:: https://github.com/M3Works/metloom/actions/workflows/testing.yml/badge.svg        :target: https://github.com/M3Works/metloom/actions/workflows/testing.yml        :alt: Testing Status.. image:: https://readthedocs.org/projects/metloom/badge/?version=latest        :target: https://metloom.readthedocs.io/en/latest/?version=latest        :alt: Documentation Status.. image:: https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/micah-prime/04da387b53bdb4a3aa31253789550a9f/raw/metloom__heads_main.json        :target: https://github.com/M3Works/metloom        :alt: Code CoverageLocation Oriented Observed Meteorologymetloom is a python library created with the goal of consistent, simple sampling ofmeteorology and snow related point measurments from a variety of datasources across theWestern US. metloom is developed by `M3 Works &lt;https://m3works.io&gt;`_ as a tool for validatingcomputational hydrology model results. Contributions welcome!Warning - This software is provided as is (see the license), so use at your own risk.This is an opensource package with the goal of making data wrangling easier. We makeno guarantees about the quality or accuracy of the data and any interpretation of the meaningof the data is up to you.* Free software: BSD licenseFeatures--------* Sampling of daily, hourly, and snow course data* Searching for stations from a datasource within a shapefile* Current data sources:    * `CDEC &lt;https://cdec.water.ca.gov/&gt;`_    * `SNOTEL &lt;https://www.nrcs.usda.gov/wps/portal/wcc/home/dataAccessHelp/webService/webServiceReference/&gt;`_    * `MESOWEST &lt;https://developers.synopticdata.com/mesonet/&gt;`_    * `USGS &lt;https://waterservices.usgs.gov/rest/&gt;`_Requirements------------python &gt;= 3.7Install-------.. code-block:: bash    python3 -m pip install metloom* Common install issues:    * Macbook M1 and M2 chips: some python packages run into issues with the new M chips        * ``error : from lxml import etree in utils.py ((mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64)``            The solution is the following            .. code-block:: bash                pip uninstall lxml                pip install --no-binary lxml lxmlLocal install for dev---------------------The recommendation is to use virtualenv, but other local pythonenvironment isolation tools will work (pipenv, conda).. code-block:: bash    python3 -m pip install --upgrade pip    python3 -m pip install -r requirements_dev    python3 -m pip install .Testing-------.. code-block:: bash    pytestIf contributing to the codebase, code coverage should not decreasefrom the contributions. Make sure to check code coverage beforeopening a pull request... code-block:: bash    pytest --cov=metloomDocumentation-------------readthedocs coming soonhttps://metloom.readthedocs.io.Usage-----See usage documentation https://metloom.readthedocs.io/en/latest/usage.html**NOTES:**PointData methods that get point data return a GeoDataFrame indexedon *both* datetime and station code. To reset the index simply run``df.reset_index(inplace=True)``Simple usage examples are provided in this readme and in the docs. Seeour `examples &lt;https://github.com/M3Works/metloom/tree/main/examples&gt;`_ and`tutorial &lt;https://github.com/M3Works/metloom/tree/main/examples/tutorial&gt;`_for code walkthroughs and more complicated use cases.Usage Examples==============Use metloom to find data for a station.. code-block:: python    from datetime import datetime    from metloom.pointdata import SnotelPointData    snotel_point = SnotelPointData(&quot;713:CO:SNTL&quot;, &quot;MyStation&quot;)    df = snotel_point.get_daily_data(        datetime(2020, 1, 2), datetime(2020, 1, 20),        [snotel_point.ALLOWED_VARIABLES.SWE]    )    print(df)Use metloom to find snow courses within a geometry.. code-block:: python    from metloom.pointdata import CDECPointData    from metloom.variables import CdecStationVariables    import geopandas as gpd    fp = &lt;path to shape file&gt;    obj = gpd.read_file(fp)    vrs = [        CdecStationVariables.SWE,        CdecStationVariables.SNOWDEPTH    ]    points = CDECPointData.points_from_geometry(obj, vrs, snow_courses=True)    df = points.to_dataframe()    print(df)Tutorials---------In the ``Examples`` folder, there are multiple Jupyter notbook basedtutorials. You can edit and run these notebooks by running Jupyter Labfrom the command line.. code-block:: bash    pip install jupyterlab    jupyter labThis will open a Jupyter Lab session in your default browser.Credits-------This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template... _Cookiecutter: https://github.com/audreyr/cookiecutter.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage=======History=======0.1.0 (2021-10-05)------------------* This is the first release!* Create the package* Add CDEC functionality* Add SNOTEL functionality* Add CLI to find stations from shapefile* Write a custom Snotel client using zeep0.2.0 (2021-12-29)------------------* Added mesowest network* Added in a token json arg to the get_*_data functions* Pinned docutils for an update that happened* Added in a resample_df function for the highway stations where the returned data is 5min for air temp.0.3.0 (2022-10-28)------------------* Added USGS network</longdescription>
</pkgmetadata>