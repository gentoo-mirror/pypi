<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># corgyCorgy is a Python library that allows you to create feature rich dataclasses using intuitive type annotations.```pycon&gt;&gt;&gt; from typing import List&gt;&gt;&gt; from typing_extensions import Literal&gt;&gt;&gt; from corgy import Corgy&gt;&gt;&gt; from corgy.types import KeyValuePairs&gt;&gt;&gt; class G(Corgy):...     x: int...     y: Literal[&quot;y1&quot;, &quot;y2&quot;, &quot;y3&quot;]&gt;&gt;&gt; class C(Corgy):...     x: List[float] = [1.0, 2.0]...     y: KeyValuePairs[str, int]...     g: G```## Features* **Type checking**: `Corgy` instances are type-checked, and support a  number of type modifiers.  ```pycon  &gt;&gt;&gt; from typing import Tuple  &gt;&gt;&gt; class C(Corgy):  ...     x: int  ...     y: Tuple[int, int]  &gt;&gt;&gt; C(x=&quot;1&quot;)  Traceback (most recent call last):      ...  ValueError: invalid value for type '&lt;class 'int'&gt;': '1'  &gt;&gt;&gt; C(y=(1, 2, 3))  Traceback (most recent call last):      ...  ValueError: invalid value for type 'typing.Tuple[int, int]': (1, 2, 3): expected exactly '2' elements  ```* **Dictionary interface**: `Corgy` instances can be converted to/from  dictionaries.  ```pycon  &gt;&gt;&gt; class G(Corgy):  ...     x: int  &gt;&gt;&gt; class C(Corgy):  ...     x: int  ...     g: G  &gt;&gt;&gt; g = G.from_dict({&quot;x&quot;: 1})  &gt;&gt;&gt; g  G(x=1)  &gt;&gt;&gt; c = C(x=2, g=g)  &gt;&gt;&gt; c.as_dict()  {'x': 2, 'g': {'x': 1}}  ```* **Command-line parsing**: `Corgy` class attributes can be added to an  `ArgumentParser` instance, and parsed from the command-line. Help  messages can be added to attributes with `Annotated`, and will be  passed to the command line parser.  ```pycon  &gt;&gt;&gt; from argparse import ArgumentParser  &gt;&gt;&gt; from typing import Optional  &gt;&gt;&gt; from typing_extensions import Annotated  &gt;&gt;&gt; class ArgGroup(Corgy):  ...     arg1: Annotated[Optional[int], &quot;optional number&quot;]  ...     arg2: Annotated[bool, &quot;a boolean&quot;]  &gt;&gt;&gt; class MyArgs(Corgy):  ...     arg1: Annotated[int, &quot;a number&quot;] = 1  ...     arg2: Annotated[Tuple[float, ...], &quot;at least one float&quot;]  ...     grp1: Annotated[ArgGroup, &quot;group 1&quot;]  &gt;&gt;&gt; parser = ArgumentParser(usage=&quot;&quot;)  &gt;&gt;&gt; MyArgs.add_args_to_parser(parser)  &gt;&gt;&gt; parser.print_help()  # doctest: +SKIP  usage:  optional arguments:    -h, --help            show this help message and exit    --arg1 ARG1           a number    --arg2 ARG2 [ARG2 ...]                          at least one float  grp1:    group 1    --grp1:arg1 [GRP1:ARG1]                          optional number    --grp1:arg2, --no-grp1:arg2                          a boolean  ```* **Enhanced argparse formatting**: The `corgy` package provides  `CorgyHelpFormatter`, a formatter class for `argparse`, with support  for colorized output. It can also be used independent of `Corgy`  classes.  ```pycon  &gt;&gt;&gt; from corgy import CorgyHelpFormatter  &gt;&gt;&gt; # `ArgGroup` and `MyArgs` as defined above  &gt;&gt;&gt; parser = ArgumentParser(usage=&quot;&quot;, formatter_class=CorgyHelpFormatter)  &gt;&gt;&gt; MyArgs.add_args_to_parser(parser)  &gt;&gt;&gt; parser.print_help()  # doctest: +SKIP  ```    ![Sample argparse output with `CorgyHelpFormatter`](https://raw.githubusercontent.com/jayanthkoushik/corgy/44d0d2bdc225456e1d1d0ac78cfde26065f9b86f/example.svg)* **Convenience types**: `corgy.types` provides a number of types for  converting strings into objects like paths, dictionaries, classes,  etc. These can be used standalone, but are especially useful for  parsing from command line arguments. Refer to the docs for details on  all available types. A small example is shown below.  ```pycon  &gt;&gt;&gt; T = KeyValuePairs[str, int]  &gt;&gt;&gt; m = T(&quot;x=1,y=2&quot;)  &gt;&gt;&gt; print(m)  {'x': 1, 'y': 2}  ```# Install`corgy` is available on PyPI, and can be installed with pip:```bashpip install corgy```Support for colorized output requires the `crayons` package, alsoavailable on PyPI. You can pull it as a dependency for `corgy` byinstalling with the `colors` extra:```bashpip install corgy[colors]```Parsing `Corgy` objects from `toml` files requires the `tomli` packageon Python versions below 3.11. This can be installed automatically withthe `toml` extra:```bashpip install corgy[toml]```# UsageFor documentation on usage, refer to docs/index.md.</longdescription>
</pkgmetadata>