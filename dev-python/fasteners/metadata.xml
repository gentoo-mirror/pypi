<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Fasteners=========[![Documentation status](https://readthedocs.org/projects/fasteners/badge/?version=latest)](https://readthedocs.org/projects/fasteners/?badge=latest)[![Downloads](https://img.shields.io/pypi/dm/fasteners.svg)](https://pypi.python.org/pypi/fasteners/)[![Latest version](https://img.shields.io/pypi/v/fasteners.svg)](https://pypi.python.org/pypi/fasteners/)Cross-platform locks for threads and processes.ðŸ”© Install----------```pip install fasteners```ðŸ”© Usage--------Lock for processes has the same API as the [threading.Lock](https://docs.python.org/3/library/threading.html#threading.Lock)for threads:```pythonimport fastenersimport threadinglock = threading.Lock()                                 # for threadslock = fasteners.InterProcessLock('path/to/lock.file')  # for processeswith lock:    ... # exclusive access# or alternatively    lock.acquire()... # exclusive accesslock.release()```Reader Writer lock has a similar API, which is the same for threads or processes:```pythonimport fastenersrw_lock = fasteners.ReaderWriterLock()                                 # for threadsrw_lock = fasteners.InterProcessReaderWriterLock('path/to/lock.file')  # for processeswith rw_lock.write_lock():    ... # write accesswith rw_lock.read_lock():    ... # read access# or alternativelyrw_lock.acquire_read_lock()... # read accessrw_lock.release_read_lock()rw_lock.acquire_write_lock()... # write accessrw_lock.release_write_lock()```ðŸ”© Overview-----------Python standard library provides a lock for threads (both a reentrant one, and anon-reentrant one, see below). Fasteners extends this, and provides a lock forprocesses, as well as Reader Writer locks for both threads and processes.Definitions of terms used in this overview can be found in the[glossary](https://fasteners.readthedocs.io/en/latest/guide/glossary/).The specifics of the locks are as follows:### Process locksThe `fasteners.InterProcessLock` uses [fcntl](https://man7.org/linux/man-pages/man2/fcntl.2.html) on Unix-like systems and msvc [_locking](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/locking?view=msvc-160) on Windows. As a result, if used cross-platform it guarantees an intersection of their features:| lock | reentrant | mandatory ||------|-----------|-----------|| fcntl                        | âœ˜ | âœ˜ || _locking                     | âœ” | âœ” || fasteners.InterProcessLock   | âœ˜ | âœ˜ |The `fasteners.InterProcessReaderWriterLock` also uses fcntl on Unix-like systems and [LockFileEx](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-lockfileex) on Windows. Their features are as follows:| lock | reentrant | mandatory | upgradable | preference | |------|-----------|-----------|------------|------------|| fcntl                                    | âœ˜ | âœ˜ | âœ” | reader || LockFileEx                               | âœ” | âœ” | âœ˜ | reader || fasteners.InterProcessReaderWriterLock   | âœ˜ | âœ˜ | âœ˜ | reader |### Thread locksFasteners does not provide a simple thread lock, but for the sake of comparison note that the `threading` moduleprovides both a reentrant and non-reentrant locks:| lock | reentrant | mandatory ||------|-----------|-----------|| threading.Lock  | âœ˜ | âœ˜ || threading.RLock | âœ” | âœ˜ |The `fasteners.ReaderWriterLock` at the moment is as follows:| lock | reentrant | mandatory | upgradable | preference | |------|-----------|-----------|-------------|------------|| fasteners.ReaderWriterLock | âœ” | âœ˜ | âœ˜ | writer |If your threads are created by some other means than the standard library `threading`module (for example `eventlet`), you may need to provide the corresponding threadidentification and synchronisation functions to the `ReaderWriterLock`.</longdescription>
</pkgmetadata>