<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Documentation Status](https://readthedocs.org/projects/data-dag/badge/?version=latest)](https://data-dag.readthedocs.io/en/latest/?badge=latest) ![PyPI](https://img.shields.io/pypi/v/data-dag)# Overview`data-dag` is a library for writing data-defined Airflow DAGs and operators.# Installation```pip install data-dag```# ExampleRe-usable operator and DAG template can be stored in a central location, such as a custom Airflow plugin (or a package within `dags/` works fine too):```python# plugins/my_factories/download.pyfrom data_dag.operator_factory import OperatorFactoryfrom data_dag.dag_factory import DagFactoryfrom urllib.request import urlretrievefrom typing import Listtry:    from airflow.operators.empty import EmptyOperatorexcept ImportError:    from airflow.operators.dummy import DummyOperator as EmptyOperatorfrom airflow.providers.http.sensors.http import HttpSensorfrom airflow.operators.python import PythonOperatorfrom airflow.utils.task_group import TaskGroupclass DownloadOperator(OperatorFactory):    &quot;&quot;&quot;An operator factory for safely downloading files to a known location&quot;&quot;&quot;    name: str    url: str    path: str    def make_operator(self):        with TaskGroup(group_id=f'download_{self.name}') as group:            check = HttpSensor(                task_id='check_exists',                endpoint=self.url            )            download = PythonOperator(                task_id=f'download',                python_callable=lambda: urlretrieve(self.url, self.path)            )            check &gt;&gt; download        return groupclass DownloaderDag(DagFactory):    &quot;&quot;&quot;A DAG factory for producing simple DAGs that just download a bunch of files&quot;&quot;&quot;    downloads: List[DownloadOperator]    def _make_dag(self):        start = EmptyOperator(task_id='start')        end = EmptyOperator(task_id='end')        for download in self.downloads:            start &gt;&gt; download.make_operator() &gt;&gt; end```Then a definition for a particular DAG can live in a data file:```yaml# dags/yaml/sample_dag.yamldag_id: sample_dagdescription: An example of how to write a data-driven DAGschedule: '@daily'start_date: '2020-01-01T00:00:00'downloads:- name: data  url: https://www.example.com/data.zip  path: data.zip- name: manifest  url: https://www.example.com/manifest.json  path: manifest.json```That data file can then be loaded into a DAG. Per Airflow's requirements, this must be done in a file located in `dags/` and the result must be saved into a uniquely named global variable. The simplest possible example is this:```python# dags/sample_dag.pyfrom yaml import safe_loadfrom my_factories.download import DownloaderDagwith open('yaml/sample_dag.yaml', 'r') as f:    dag_data = safe_load(f)dag = DownloaderDag.model_validate(dag_data).make_dag()```![img.png](docs/_images/img.png)## Multiple DAGsObviously, using a template isn't much use if you only fill it in once. Here's a simple example of a loader that will load any number of YML files from a folder and publish each one as a DAG in Airflow:```python# dags/load_yml_files.pyfrom pathlib import Pathfrom airflow import DAGimport yamlfrom my_factories import BaseDagdag_dir = Path(__file__).parent# For each YAML file in a particular directory...for yaml_file_path in dag_dir.glob('typical_dags/**.yml'):    with open(yaml_file_path) as f:        dag_metadata = yaml.safe_load(f)    # ... generate a DAG from that metadata    dag_metadata_obj = BaseDag.model_validate(dag_metadata)    dag = dag_metadata_obj.make_dag()    # See https://www.astronomer.io/guides/dynamically-generating-dags/    dag_name = yaml_file_path.with_suffix('').name    globals()[dag_name] = dag```# Documentation[Complete docs can be found here](https://data-dag.rtfd.org/)[//]: # (TODO)[//]: # (- Add DAG loader factory to enable a 2-liner DAG python file[//]: # (- Add dependency group mixin or something )</longdescription>
</pkgmetadata>