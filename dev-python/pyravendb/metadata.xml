<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Overview===============PyRavenDB is a python client api for [RavenDB](https://ravendb.net/), a NoSQL document database.The API can handle most CRUD scenarios, including full support for replication, failover, dynamic queries, etc... code-block:: python    with document_store.DocumentStore(urls=[&quot;http://localhost:8080&quot;], database=&quot;PyRavenDB&quot;) as store:        store.initialize()        with store.open_session() as session:        foo = session.load(&quot;foos/1&quot;)Installation=============There are three ways to install pyravendb.1. Install from `PyPi &lt;https://pypi.python.org/pypi&gt;`_, as `pyravendb &lt;https://pypi.python.org/pypi/pyravendb&gt;`_... code-block:: bash    pip install pyravendb2. Install from source, via PyPi. From pyravendb, download, open the source (pyravendb-x.x.x.zip) and run setup.py... code-block:: bash          python setup.py install3. Install from source via `GitHub &lt;https://github.com/ravendb/RavenDB-Python-Client&gt;`_... code-block:: bash          git clone https://github.com/IdanHaim/RavenDB-Python-Client.git          cd RavenDB-Python-Client          git fetch &lt;remote_name&gt; v4.0          git checkout v4.0          git pull &lt;remote_name&gt; v4.0          python setup.py installUsage=====Load a single or several document\s from the store:---------------------------------------------------- .. code-block:: python    from pyravendb.store import document_store    store =  document_store.DocumentStore(urls=[&quot;http://localhost:8080&quot;], database=&quot;PyRavenDB&quot;)    store.initialize()    with store.open_session() as session:        foo = session.load(&quot;foos/1&quot;)load method have the option to track entity for you the only thing you need to do is add ``object_type``  when you call to load(load method will return a dynamic_structure object by default) for class with nested object you can call load with ``nested_object_types`` dictionary for the other types. just put in the key the name of the object and in the value his class (without this option you will get the document as it is) ... code-block:: python    foo = session.load(&quot;foos/1&quot;, object_type=Foo).. code-block:: python    class FooBar(object):        def __init__(self,name,foo):            self.name = name            self.foo = foofoo_bar = session.load(&quot;FooBars/1&quot;, object_type=FooBar, nested_object_types={&quot;foo&quot;:Foo})To load several documents at once, supply a list of ids to session.load... code-block:: python    foo = session.load([&quot;foos/1&quot;, &quot;foos/2&quot;, &quot;foos/3&quot;], object_type=Foo)Delete a document--------------------To delete a document from the store,  use ```session.delete()``` with the id or entity you would like to delete... code-block:: python    with store.open_session() as session:        foo = session.delete(&quot;foos/1&quot;)Store a new document-------------------------to store a new document, use ```session.store(entity)``` with the entity you would like to store (entity must be an object)For storing with dict we will use database_commands the put command (see the source code for that)... code-block:: python    class Foo(object):       def __init__(self, name, key = None):           self.name = name           self.key = key    class FooBar(object):        def __init__(self, name, foo):            self.name = name            self.foo = foo    with store.open_session() as session:        foo = Foo(&quot;PyRavenDB&quot;)        session.store(foo)        session.save_changes()**To save all the changes we made we need to call ``session.save_changes()``.**Query------------* ``object_type`` - Give the object type you want to get from query.* ``index_name`` -  The name of index you want the query to work on (If empty the index will be dynamic).* ``collection_name`` -  Name of the collection (mutually exclusive with indexName).* ``is_map_reduce`` - Whether we are querying a map/reduce index(modify how we treat identifier properties).* ``wait_for_non_stale_results`` - False by default if True the query will wait until the index will be non stale.* ``default_operator`` - The default query operator (OR or AND).* ``with_statistics`` - when True the qury will return stats about the query.* ``nested_object_types`` - A dict of classes for nested object the key will be the name of the class and the value will be the object we want to get for that attribute.. code-block:: python    with store.open_session() as session:        query_result = list(session.query().where_equals(&quot;name&quot;, &quot;test101&quot;)        query_result = list(session.query(object_type=Foo).where_starts_with(&quot;name&quot;, &quot;n&quot;))        query_result = list(session.query(object_type=Foo).where_ends_with(&quot;name&quot;, &quot;7&quot;))        query_result = list(session.query(object_type=FooBar,nested_object_types={&quot;foo&quot;:Foo}).where(name=&quot;foo_bar&quot;))You can also build the query with several options using the builder pattern... code-block:: python    with store.open_session() as session:        list(session.query(wait_for_non_stale_results=True).where_not_none(&quot;name&quot;).order_by_descending(&quot;name&quot;))For the query you can also use the ``where`` feature which can get a variable number of arguments (``**kwargs``).. code-block:: python    with store.open_session() as session:        query_results = list(session.query().where(name=&quot;test101&quot;, key=[4, 6, 90]))``name`` and ``key`` are the field names for which we queryIncludes--------------A list of the properties we like to include in the query or in load.The include property wont show in our result but when we load or query for it we wont requests it from the server.The includes will save on the session cache... code-block:: python    class FooBar(object):        def __init__(name, foo_key)            self.name = name            self.foo = foo_key    store =  document_store.DocumentStore(urls=[&quot;http://localhost:8080&quot;], database=&quot;PyRavenDB&quot;)    store.initialize()    with store.open_session() as session:        query_result = list(session.query().where_equals(&quot;name&quot;, &quot;testing_includes&quot;).include(&quot;foo&quot;)        foo_bar = session.load(&quot;FooBars/1&quot;, object_type=FooBar, includes=foo)Changes Api---------------The RavenDB client offers a push notification feature that allows you to receive messages from a server about events that occurred there.You are able to subscribe to events for all documents, indexes and operations as well as to indicate a particularone that you are interested in. This mechanism lets you notify users if something has changed withoutthe need to do any expensive polling.**Example:**.. code-block:: python    with document_store.DocumentStore(urls=[&quot;http://localhost:8080&quot;], database=&quot;PyRavenDB&quot;) as store:        store.initialize()        documents = []        indexes = []        observer = store.changes().for_all_documents()        observer.subscribe(documents.append)        observer.ensure_subscribe_now()        observer = store.changes().for_index('Users')        observer.subscribe(ActionObserver(on_next=indexes.append))        observer.ensure_subscribe_now()        index_definition_users = IndexDefinition(&quot;Users&quot;, &quot;from doc in docs.Users select new {doc.Name}&quot;)        index_definition_dogs = IndexDefinition(&quot;Dogs&quot;, &quot;from doc in docs.Dogs select new {doc.brand}&quot;)        store.maintenance.send(PutIndexesOperation(index_definition_dogs, index_definition_users))        with store.open_session() as session:            session.store(User(&quot;Idan&quot;), key=&quot;users/1&quot;)            session.save_changes()In this example we want to observe to changes from all documents and for index with the name of Users.After we register the observable we can subscribe for the notification and decide what to do with them (like append).If you did not create an Observer for the subscription we will create one for you with the method you put.(To create Observer you can make any class that you want that will inherit from the class Observercan be found in pyravendb.changes.observers or to use the ActionObserver)... code-block:: python    class Observer(metaclass=ABCMeta):        @abstractmethod        def on_completed(self):            pass        @abstractmethod        def on_error(self, exception):           pass        @abstractmethod        def on_next(self, value):           passWhat`s new=============Mappers--------mappers have been added to ``DocumentConvention`` to be able to parse custom objects.For using the mappers, only update ``conventions.mappers`` from the ``DocumentStore``with your own dict.The key of the mappers will be the type of the object you want to initialize and the value will be a key, value method:the key will be the property name inside the object and the value will be the value of the property inside the document.like before you must specify the ``object_type`` property to be able to fetch the mapper method that you suppliedif ``nested_object_types`` is initialized the mappers won't work.**Example:**.. code-block:: python    class Address:        def __init__(self, street, city, state):            self.street = street            self.city = city            self.state = state    class Owner:        def __init__(self, name, address):            self.name = name            self.address = address    class Dog:        def __init__(self, name, owner):            self.name = name            self.owner = owner    # This method will be called for each of the object properties    def get_dog(key, value):        if not value:            return None        if key == &quot;address&quot;:            return Address(**value)        elif key == &quot;owner&quot;:            return Owner(**value)    address = Address(&quot;Rub&quot;, &quot;Unknown&quot;, &quot;Israel&quot;)    owner = Owner(&quot;Idan&quot;, address)    dog = Dog(name=&quot;Donald&quot;, owner=owner)    with DocumentStore(urls=[&quot;http://localhost:8080&quot;], database=&quot;PyRavenDB&quot;) as store:        store.conventions.mappers.update({Dog: get_dog})        store.initialize()        with store.open_session() as session:            result = session.load(&quot;dogs/1-A&quot;, object_type=Dog)Bug Tracker************http://issues.hibernatingrhinos.com/issues/RDBC</longdescription>
</pkgmetadata>