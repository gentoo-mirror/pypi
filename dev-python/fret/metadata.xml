<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fret[![Travis (.org)](https://img.shields.io/travis/com/yxonic/fret)](https://travis-ci.org/github/yxonic/fret/)[![Codecov](https://img.shields.io/codecov/c/github/yxonic/fret)](https://codecov.io/gh/yxonic/fret/)[![Documentation Status](https://readthedocs.org/projects/fret/badge/?version=latest)](https://fret.readthedocs.io/en/latest/?badge=latest)[![PyPI](https://img.shields.io/pypi/v/fret.svg)](https://pypi.python.org/pypi/fret)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/fret.svg)](https://pypi.python.org/pypi/fret)Framework for Reproducible ExperimenTs. Read on for a quick guide. Full documentation [here](https://fret.readthedocs.io/en/latest/).## InstallationFrom pip:```shpip install fret```From source: clone the repository and then run: `python setup.py install`.## Tutorial### Basic UsageCreate a file named `app.py` with content:```pythonimport fret@fret.commanddef run(ws):    model = ws.build()    print(model)@fret.configurableclass Model:    def __init__(self, x=3, y=4):        ...```Then under the same directory, you can run: ```sh$ fret config Model[ws/_default] configured &quot;main&quot; as &quot;Model&quot; with: x=3, y=4$ fret runModel(x=3, y=4)$ fret config Model -x 5 -y 10[ws/_default] configured &quot;main&quot; as &quot;Model&quot; with: x=5, y=10$ fret runModel(x=5, y=10)```### Using WorkspaceYou can specify different configuration in different workspace:```sh$ fret -w ws/model1 config Model[ws/model1] configured &quot;main&quot; as &quot;Model&quot; with: x=3, y=4$ fret -w ws/model2 config Model -x 5 -y 10[ws/model2] configured &quot;main&quot; as &quot;Model&quot; with: x=5, y=10$ fret -w ws/model1 runModel(x=3, y=4)$ fret -w ws/model2 runModel(x=5, y=10)```### Save/Load```pythonimport fret@fret.commanddef train(ws):    model = ws.build()    model.train()    ws.save(model, 'trained')@fret.commanddef test(ws):    model = ws.load('ws/best/snapshot/main.trained.pt')    print(model.weight)@fret.configurable(states=['weight'])class Model:    def __init__(self):        self.weight = 0    def train(self):        self.weight = 23``````sh$ fret -w ws/best config Model[ws/_default] configured &quot;main&quot; as &quot;Model&quot;$ fret -w ws/best train$ fret test23```### An Advanced WorkflowIn `app.py`:```pythonimport timeimport fret@fret.configurable(states=['value'])class Model:    def __init__(self):        self.value = 0@fret.commanddef resumable(ws):    model = ws.build()    with ws.run('exp-1') as run:        run.register(model)        cnt = run.acc()        for e in fret.nonbreak(run.range(5)):            # with `nonbreak`, the program always finish this loop before exit            model.value += e            time.sleep(0.5)            cnt += 1            print('current epoch: %d, sum: %d, cnt: %d' %                  (e, model.value, cnt))```Then you can stop and restart this program anytime, with consistent results:```sh$ fret resumablecurrent epoch: 0, sum: 0, cnt: 1current epoch: 1, sum: 1, cnt: 2^CW SIGINT received. Delaying KeyboardInterrupt.current epoch: 2, sum: 3, cnt: 3Traceback (most recent call last):    ...KeyboardInterruptW cancelled by user$ fret resumablecurrent epoch: 3, sum: 6, cnt: 4current epoch: 4, sum: 10, cnt: 5```### Dynamic commandsYou can specify commands inside configurables, and run them depending on current workspace setup:```pythonimport fret@fret.configurableclass App1:    @fret.command    def check(self):        print('running check from App1')@fret.configurableclass App2:    @fret.command    def check(self, msg):        print('running check from App2 with message: ' + msg)```Then run:```sh$ fret config App1[ws/_default] configured &quot;main&quot; as &quot;App1&quot;$ fret checkrunning check from App1$ fret config App2[ws/_default] configured &quot;main&quot; as &quot;App2&quot;$ fret check -m hellorunning check from App2 with message: hello```### Submodule```python@fret.configurableclass A:    def __init__(self, foo):        ...@fret.configurable(submodules=['sub'], build_subs=False)class B:    def __init__(self, sub, bar=3):        self.sub = sub(foo='bar')   # call sub to build submodule``````sh$ fret config sub A[ws/_default] configured &quot;sub&quot; as &quot;A&quot;$ fret config B[ws/_default] configured &quot;main&quot; as &quot;B&quot; with: sub='sub', bar=3$ fret runB(sub=A(), bar=3)```### Inheritance```python@fret.configurableclass A:    def __init__(self, foo='bar', sth=3):        ...@fret.configurableclass B(A):    def __init__(self, bar=3, **others):        super().__init__(**others)        ...``````sh$ fret config B -foo baz -bar 0[ws/_default] configured &quot;main&quot; as &quot;B&quot; with: bar=0, foo='baz', sth=3$ fret runB(bar=0, foo='baz', sth=3)```### Internals```python&gt;&gt;&gt; config = fret.Configuration({'foo': 'bar'})&gt;&gt;&gt; configfoo='bar'```</longdescription>
</pkgmetadata>