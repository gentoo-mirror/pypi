<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Django cursor pagination [![Build Status](https://travis-ci.org/photocrowd/django-cursor-pagination.svg?branch=master)](https://travis-ci.org/photocrowd/django-cursor-pagination)========================A cursor based pagination system for Django. Instead of refering to specificpages by number, we give every item in the queryset a cursor based on itsordering values. We then ask for subsequent records by asking for records*after* the cursor of the last item we currently have. Similarly we can ask forrecords *before* the cursor of the first item to navigate back through thelist.This approach has two major advantages over traditional pagination. Firstly, itensures that when new data is written into the table, records cannot be movedonto the next page. Secondly, it is much faster to query against the databaseas we are not using very large offset values.There are some significant drawbacks over &quot;traditional&quot; pagination. The datamust be ordered by some database field(s) which are unique across all records.A typical use case would be ordering by a creation timestamp and an id. It isalso more difficult to get the range of possible pages for the data.The inspiration for this project is largely taken from [thispost](http://cra.mr/2011/03/08/building-cursors-for-the-disqus-api) by DavidCramer, and the connection spec for [RelayGraphQL](https://facebook.github.io/relay/graphql/connections.htm). Much of theimplementation is inspired by [Django rest framework's Cursorpagination.](https://github.com/tomchristie/django-rest-framework/blob/9b56dda91850a07cfaecbe972e0f586434b965c3/rest_framework/pagination.py#L407-L707).The main difference between the Disqus approach and the one used here is thatwe require the ordering to be totally determinate instead of using offsets.Installation------------```pip install django-cursor-pagination```Usage-----```pythonfrom cursor_pagination import CursorPaginatorfrom myapp.models import Postdef posts_api(request, after=None):    qs = Post.objects.all()    page_size = 10    paginator = CursorPaginator(qs, ordering=('-created', '-id'))    page = paginator.page(first=page_size, after=after)    data = {        'objects': [serialize_page(p) for p in page],        'has_next_page': page.has_next,        'last_cursor': paginator.cursor(page[-1])    }    return data```Reverse pagination can be achieved by using the `last` and `before` argumentsto `paginator.page`.Caveats-------- The ordering specified **must** uniquely identify the object.- If a cursor is given and it does not refer to a valid object, the values of  `has_previous` (for `after`) or `has_next` (for `before`) will always return  `True`.- `NULL` comes at the end in query results with `ORDER BY` both for `ASC` and `DESC`.</longdescription>
</pkgmetadata>