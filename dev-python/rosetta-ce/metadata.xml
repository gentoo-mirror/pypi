<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![snyk](https://snyk.io/test/github/ayman-m/rosetta/badge.svg)](https://snyk.io/test/github/my-soc/Rosetta)![codeql](https://github.com/ayman-m/rosetta/actions/workflows/github-code-scanning/codeql/badge.svg)[![slack-community](https://img.shields.io/badge/Slack-4A154C?logo=slack&amp;logoColor=white)](https://go-rosetta.slack.com)# RosettaRosetta is a Python package that can be used to fake security logs and alerts for testing different detection and response use cases. It provides the following functions:- Generate bad and random observables/indicators that include IP Addresses, Urls, File hashes , CVE's and more- Fake log messages in different formats like CEF, LEEF and JSON.- Convert one log format into another, for example from CEF to LEEF.- Send the fake log message to different log management and analytics tools.## Installation- You can install rosetta via pip:```shpip install rosetta-ce```- Or you can install it from the source code:```shgit clone https://github.com/ayman-m/rosetta.gitcd rosettapython setup.py install```- Once installed, you can import the library in your Python code like this:```pythonfrom rosetta import Observables, Events```## UsageHere are some examples of how to use Rosetta:```pythonfrom rosetta import Converter, ConverterToEnum, ConverterFromEnum, Events, ObservableType, ObservableKnown, \    Observables, Sender# Example usage of the Converter class to convert a CEF log into a LEEF log.converted_log = Converter.convert(from_type=ConverterFromEnum.CEF, to_type=ConverterToEnum.LEEF,                                  data=&quot;cef_log=CEF:0|Security|Intrusion Detection System|1.0|Alert|10|src=192.168.0.1 dst=192.168.0.2 act=blocked&quot;)print(    converted_log)  # {'message': 'converted', 'data': 'LEEF=1.0!Vendor=Security!Product=Intrusion Detection System!Version=1.0!EventID=Alert!Name=10!src=192.168.0.1!dst=192.168.0.2!act=blocked'}# Example usage of the Observables class to generate bad IP indicators.bad_ip = Observables.generator(count=2, observable_type=ObservableType.IP, known=ObservableKnown.BAD)print(bad_ip)  # ['ip1', 'ip2']# Example usage of the Observables class to generate good IP indicators.good_ip = Observables.generator(count=2, observable_type=ObservableType.IP, known=ObservableKnown.GOOD)print(good_ip)  # ['ip1', 'ip2']# Example usage of the Observables class to generate bad URL indicators.bad_url = Observables.generator(count=2, observable_type=ObservableType.URL, known=ObservableKnown.BAD)print(bad_url)  # ['url1', 'url2']# Example usage of the Observables class to generate good URL indicators.good_url = Observables.generator(count=2, observable_type=ObservableType.URL, known=ObservableKnown.GOOD)print(good_url)  # ['url1', 'url2']# Example usage of the Observables class to generate bad Hash indicators.bad_hash = Observables.generator(count=2, observable_type=ObservableType.SHA256, known=ObservableKnown.BAD)print(bad_hash)  # ['hash1', 'hash2']# Example usage of the Observables class to generate good Hash indicators.good_hash = Observables.generator(count=2, observable_type=ObservableType.SHA256, known=ObservableKnown.GOOD)print(good_hash)  # ['hash1', 'hash2']# Example usage of the Observables class to generate CVE indicators.cve = Observables.generator(count=2, observable_type=ObservableType.CVE)print(cve)  # Example: ['CVE-2023-2136', 'CVE-2023-29582']# Example usage of the Observables class to generate random Terms.terms = Observables.generator(count=2, observable_type=ObservableType.TERMS)print(terms)  # Example: ['Create or Modify System Process', 'Stage Capabilities: Drive-by Target']# You can create an instance of the Observables class to contain your own observables that are to be used in the fake security eventssrc_ip, dst_ip, src_host, dst_host = [&quot;192.168.10.10&quot;, &quot;192.168.10.20&quot;], [&quot;1.1.1.1&quot;, &quot;1.1.1.2&quot;], [&quot;abc&quot;], [&quot;xyz&quot;, &quot;wlv&quot;]url, port = [&quot;https://example.org&quot;, &quot;https://wikipedia.com&quot;], [&quot;555&quot;, &quot;666&quot;]protocol, app = [&quot;ftp&quot;, &quot;dns&quot;, &quot;ssl&quot;], [&quot;explorer.exe&quot;, &quot;chrome.exe&quot;]user = [&quot;ayman&quot;, &quot;mahmoud&quot;]file_name, file_hash = [&quot;test.zip&quot;, &quot;image.ps&quot;], [&quot;719283fd5600eb631c23b290530e4dac9029bae72f15299711edbc800e8e02b2&quot;]cmd, process = [&quot;sudo restart&quot;, &quot;systemctl stop firewalld&quot;], [&quot;bind&quot;, &quot;crond&quot;]severity = [&quot;high&quot;, &quot;critical&quot;]sensor = [&quot;fw&quot;, &quot;edr&quot;]action = [&quot;block&quot;, &quot;allow&quot;]observables_list = Observables(src_ip=src_ip, dst_ip=dst_ip, src_host=src_host, dst_host=dst_host, url=url, port=port,                               protocol=protocol, app=app, user=user, file_name=file_name, file_hash=file_hash, cmd=cmd,                               process=process, severity=severity, sensor=sensor, action=action)# Example usage of the Events class to generate generic SYSLOG events.generic_syslog_with_random_observables = Events.syslog(count=1)print(generic_syslog_with_random_observables)  # ['Jan 20 16:04:53 db-88.zuniga.net sudo[34675]: ryansandy : COMMAND ; iptables -F']generic_syslog_with_my_observables = Events.syslog(count=1, observables=observables_list)print(generic_syslog_with_my_observables)  # ['Apr 07 10:21:43 abc crond[17458]: ayman : COMMAND ; sudo restart']# Example usage of the Events class to generate CEF events.generic_cef_with_my_observables = Events.cef(count=1, observables=observables_list)print(generic_cef_with_my_observables)  # ['CEF:0|Novak LLC|Firewall|1.0.6|3019ab69-2d0e-4b3f-a240-4e8c93042dc3|Firewall allow dns traffic from abc:33504 to 1.1.1.1:666|5|src=abc spt=33504 dst=1.1.1.1 url=https://example.org dpt=666 proto=dns act=allow']leef_with_my_observables = Events.leef(count=1, observables=observables_list)print(leef_with_my_observables)  # [&quot;LEEF:1.0|Leef|Payment Portal|1.0|210.12.108.86|abc|9a:1e:9d:00:4c:ba|3b:a0:4b:24:f7:59|src=192.168.10.10 dst=abc spt=61549 dpt=443 request=https://example.com/search.php?q=&lt;script&gt;alert('xss')&lt;/script&gt; method=Web-GET proto=HTTP/1.1 status=500 hash=719283fd5600eb631c23b290530e4dac9029bae72f15299711edbc800e8e02b2request_size=6173 response_size=8611 user_agent=Mozilla/5.0 (iPhone; CPU iPhone OS 9_3_5 like Mac OS X) AppleWebKit/536.1 (KHTML, like Gecko) FxiOS/12.1s4879.0 Mobile/00Y135 Safari/536.1&quot;]winevent_with_my_observables = Events.winevent(count=1, observables=observables_list)print(winevent_with_my_observables)  # ['&lt;Event xmlns=&quot;http://schemas.microsoft.com/win/2004/08/events/event&quot;&gt;&lt;System&gt;&lt;Provider Name=&quot;Microsoft-Windows-Security-Auditing&quot; Guid=&quot;5fc4a88c-97b0-4061-adc3-052159c10ef4&quot;/&gt;&lt;EventID&gt;4648&lt;/EventID&gt;&lt;Version&gt;0&lt;/Version&gt;&lt;Level&gt;0&lt;/Level&gt;&lt;Task&gt;13824&lt;/Task&gt;&lt;Opcode&gt;0&lt;/Opcode&gt;&lt;Keywords&gt;0x8020000000000000&lt;/Keywords&gt;&lt;TimeCreated SystemTime=&quot;2023-04-07T18:45:17&quot;/&gt;&lt;EventRecordID&gt;575&lt;/EventRecordID&gt;&lt;Correlation/&gt;&lt;Execution ProcessID=&quot;1071&quot; ThreadID=&quot;5317&quot; Channel=&quot;Security&quot;/&gt;&lt;Computer&gt;abc&lt;/Computer&gt;&lt;Security UserID=&quot;S-1-2915&quot;/&gt;&lt;EventData&gt;&lt;Data Name=&quot;SubjectUserSid&quot;&gt;S-1-2915&lt;/Data&gt;&lt;Data Name=&quot;SubjectUserName&quot;&gt;mahmoud&lt;/Data&gt;&lt;Data Name=&quot;SubjectDomainName&quot;&gt;johnson.org&lt;/Data&gt;&lt;Data Name=&quot;SubjectLogonId&quot;&gt;S-1-2915&lt;/Data&gt;&lt;Data Name=&quot;NewProcessId&quot;&gt;3371&lt;/Data&gt;&lt;Data Name=&quot;ProcessId&quot;&gt;1071&lt;/Data&gt;&lt;Data Name=&quot;CommandLine&quot;&gt;sudo restart&lt;/Data&gt;&lt;Data Name=&quot;TargetUserSid&quot;&gt;S-1-2915&lt;/Data&gt;&lt;Data Name=&quot;TargetUserName&quot;&gt;mahmoud&lt;/Data&gt;&lt;Data Name=&quot;TargetDomainName&quot;&gt;johnson.org&lt;/Data&gt;&lt;Data Name=&quot;TargetLogonId&quot;&gt;S-1-2915&lt;/Data&gt;&lt;Data Name=&quot;LogonType&quot;&gt;3&lt;/Data&gt;&lt;/EventData&gt;&lt;/Event&gt;']json_with_my_observables = Events.json(count=1, observables=observables_list)print(json_with_my_observables) # [{'event_type': 'vulnerability_discovered', 'timestamp': '2023-02-12T16:28:46', 'severity': 'high', 'host': 'abc', 'file_hash': '719283fd5600eb631c23b290530e4dac9029bae72f15299711edbc800e8e02b2', 'cve': ['CVE-3941-1955']}]incident_with_my_observables = Events.incidents(count=1, fields=&quot;id,type,duration,analyst,description,events&quot;, observables=observables_list)print(incident_with_my_observables) # [{'id': 1, 'duration': 2, 'type': 'Lateral Movement', 'analyst': 'Elizabeth', 'description': 'Software Discovery Forge Web Credentials: SAML Tokens Escape to Host System Binary Proxy Execution: Control Panel Hide Artifacts: Process Argument Spoofing Office Application Startup: Add-ins Compromise Infrastructure: Botnet.', 'events': [{'event': 'Apr 09 19:39:57 abc bind[56294]: ayman : COMMAND ; systemctl stop firewalld'}, {'event': 'CEF:0|Todd, Guzman and Morales|Firewall|1.0.4|afe3d30f-cff4-4084-a7a3-7de9ea21d0e9|Firewall block dns traffic from abc:26806 to 1.1.1.1:555|10|src=abc spt=26806 dst=1.1.1.1 url=https://example.org dpt=555 proto=dns act=block'}, {'event': 'LEEF:1.0|Leef|Payment Portal|1.0|19.90.247.108|abc|d4:27:4c:a7:40:50|2a:3f:f3:37:81:eb|src=192.168.10.20 dst=abc spt=47335 dpt=443 request=https://example.com/index.php method=Web-GET proto=HTTP/1.1 status=500 hash=719283fd5600eb631c23b290530e4dac9029bae72f15299711edbc800e8e02b2request_size=3640 response_size=4766 user_agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_1) AppleWebKit/533.0 (KHTML, like Gecko) Chrome/47.0.819.0 Safari/533.0'}, {'event': '&lt;Event xmlns=&quot;http://schemas.microsoft.com/win/2004/08/events/event&quot;&gt;&lt;System&gt;&lt;Provider Name=&quot;Microsoft-Windows-Security-Auditing&quot; Guid=&quot;67eb0bb0-ab24-43ce-b7f1-6d6a6bb0ac27&quot;/&gt;&lt;EventID&gt;4672&lt;/EventID&gt;&lt;Version&gt;0&lt;/Version&gt;&lt;Level&gt;0&lt;/Level&gt;&lt;Task&gt;12544&lt;/Task&gt;&lt;Opcode&gt;0&lt;/Opcode&gt;&lt;Keywords&gt;0x8020000000000000&lt;/Keywords&gt;&lt;TimeCreated SystemTime=&quot;2023-01-15T04:07:58&quot;/&gt;&lt;EventRecordID&gt;38&lt;/EventRecordID&gt;&lt;Correlation/&gt;&lt;Execution ProcessID=&quot;7182&quot; ThreadID=&quot;7703&quot; Channel=&quot;Security&quot;/&gt;&lt;Computer&gt;abc&lt;/Computer&gt;&lt;Security UserID=&quot;S-1-7181&quot;/&gt;&lt;EventData&gt;&lt;Data Name=&quot;SubjectUserSid&quot;&gt;S-1-7181&lt;/Data&gt;&lt;Data Name=&quot;SubjectUserName&quot;&gt;mahmoud&lt;/Data&gt;&lt;Data Name=&quot;SubjectDomainName&quot;&gt;johnson.net&lt;/Data&gt;&lt;Data Name=&quot;SubjectLogonId&quot;&gt;9638&lt;/Data&gt;&lt;Data Name=&quot;PrivilegeList&quot;&gt;Through moment tonight.&lt;/Data&gt;&lt;/EventData&gt;&lt;/Event&gt;'}, {'event': {'event_type': 'vulnerability_discovered', 'timestamp': '2023-01-18T23:49:45', 'severity': 'critical', 'host': 'abc', 'file_hash': '719283fd5600eb631c23b290530e4dac9029bae72f15299711edbc800e8e02b2', 'cve': ['CVE-2023-29067']}}]}]# Example usage of the Sender class to send faked events to log analysis tool.worker = Sender(data_type=&quot;SYSLOG&quot;, destination=&quot;udp:127.0.0.1:514&quot;, observables=observables_list, count=5, interval=2)worker.start()# Starting worker: worker_2023-04-26 17:50:15.671101# Worker: worker_2023-04-26 17:50:15.671101 sending log message to 127.0.0.1 # Worker: worker_2023-04-26 17:50:15.671101 sending log message to 127.0.0.1 # Worker: worker_2023-04-26 17:50:15.671101 sending log message to 127.0.0.1 # Worker: worker_2023-04-26 17:50:15.671101 sending log message to 127.0.0.1 # Worker: worker_2023-04-26 17:50:15.671101 sending log message to 127.0.0.1 ```</longdescription>
</pkgmetadata>