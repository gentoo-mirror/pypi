<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>mixpanel-jql============|PyPI Version| |Python Versions| |Coverage| |Build Status|A small Python library for running `JQL &lt;https://mixpanel.com/jql/&gt;`__queries against Mixpanel's JQL API. The data returned from the API isautomatically decompressed as it arrives, making it available forprocessing as soon as the first row arrives. This is to avoid bufferinglarge result sets in memory.Installation------------To install the ``mixpanel-jql`` library, simply run the following inyour terminal:``pip install mixpanel-jql``Simple example--------------Let's do a simple count of our number of 'X' events over each day of May 2016. Our key for grouping will be the date the event was sent to Mixpanel in the format ``YYYY-MM-DD``. We can get that from our event's ``time`` property by specifying our key as ``new Date(e.time).toISOString().split('T')[0]``.This is simple and fast to do with this library... code:: python    from datetime import datetime    from mixpanel_jql import JQL, Reducer, Events    api_secret = '...'    query = JQL(                api_secret,                events=Events({                    'event_selectors': [{'event': &quot;X&quot;}],                    'from_date': datetime(2016, 5, 1),                    'to_date': datetime(2016, 5, 31)                })            ).group_by(                keys=[                    &quot;new Date(e.time).toISOString().split('T')[0]&quot;,                ],                accumulator=Reducer.count()            )    for row in query.send():        date = row['key'][0]        value = row['value']        print(&quot;[%s] =&gt; %d&quot; % (date, value))    # [2016-05-01] =&gt; 302    # [2016-05-02] =&gt; 1102    # ...    # [2016-05-31] =&gt; 120But what if we only want to count unique events? That is to say, what if we care about how many users spawned each event per day and not just the overall number of times the event occurred?With some minor modification to our previous code, we can achieve this:.. code:: python    query = JQL(                api_secret,                events=Events({                    'event_selectors': [{'event': &quot;X&quot;}],                    'from_date': datetime(2016, 5, 1),                    'to_date': datetime(2016, 5, 31)                })            ).group_by_user(                keys=[                    &quot;new Date(e.time).toISOString().split('T')[0]&quot;,                ],                accumulator=&quot;function(){ return 1;}&quot;            ).group_by(                keys=[&quot;e.key.slice(1)&quot;],                accumulator=Reducer.count()            )We replace our ``accumulator`` keyward argument with a JavaScript function returning ``1``, since each user will only be counted for once. ``group_by_user`` also adds the user ID into the key of our results. We can regroup our results by slicing that detail off with ``e.key.slice(1)`` and recounting.More advanced examples----------------------Let's assume we want to count all events 'A' with a property 'B' that isequal to 2 and a property F that is equal to &quot;hello&quot;. Events 'A' alsohave a property 'C', which is some random string value. We want theresults grouped and tallied by values of 'C' to see how many property'C' events occurred over each day in the month of April 2016... code:: python    from mixpanel_jql import JQL, Reducer, Events    api_secret = '...'    query = JQL(                api_secret,                events=Events({                    'event_selectors': [{'event': &quot;A&quot;}],                    'from_date': '2016-04-01',                    'to_date': '2016-04-30'                })            ).filter(                'e.properties.B == 2'            ).filter(                'e.properties.F == &quot;hello&quot;'            ).group_by(                keys=[                    &quot;new Date(e.time).toISOString().split('T')[0]&quot;,                    &quot;e.property.C&quot;                ],                accumulator=Reducer.count()            )    for row in query.send():        date, c = row['key']        value = row['value']        print(&quot;[%s] %s =&gt; %d&quot; % (date, c, value))    # [2016-04-01] abc =&gt; 3    # [2016-04-01] xyz =&gt; 1    # ...If we wanted to count only *unique* events (i.e. count each user causingthe event only once), we can change our query to *group by user*, toreduce the number of times they caused a particular ``e.properties.C``to just 1... code:: python    query = JQL(                api_secret,                events=Events({                    'event_selectors': [{'event': &quot;A&quot;}],                    'from_date': '2016-04-01',                    'to_date': '2016-04-30'                })            ).filter(                'e.properties.B == 2'            ).filter(                'e.properties.F == &quot;hello&quot;'            ).group_by_user(                keys=[                    &quot;new Date(e.time).toISOString().split('T')[0]&quot;,                    &quot;e.property.C&quot;                ],                accumulator=&quot;function(){ return 1;}&quot;            ).group_by(                keys=[&quot;e.key.slice(1)&quot;],                accumulator=Reducer.count()            )Why are your filters not joined with ``&amp;&amp;``?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~We could have also combined our ``.filter(...)`` methods into 1 methodby doing, ``.filter('e.properties.B == 2 &amp;&amp; e.properties.F == &quot;hello&quot;')``.Successive ``.filter(...)`` expressions are automatically ``&amp;&amp;``'ed. Themethod of expression you choose is stylistic.What is that ``Reducer`` thing?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The ``Reducer`` class is for convenience and contains shortcuts to allthe reducer functions (e.g. ``Reducer.count()`` returns``mixpanel.reducer.count()``, and ``Reducer.top(limit)`` returns``mixpanel.reducer.top(limit)``). Refer to the code for a list of allreducer shortcuts.To write your own reducer, make sure to include a full JavaScriptfunction body (i.e. ``function(){ ... }``).What about conversions?~~~~~~~~~~~~~~~~~~~~~~~The ``Converter`` class is another convenience for that... code:: python     from mixpanel_jql import Converter     ...     Converter.to_number('&quot;xyz&quot;')  # Resolves to mixpanel.to_number(&quot;xyz&quot;)What about queries over &quot;people&quot; and &quot;joins&quot;?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~All of the previous examples are concerned primarily with JQL queriesover events. This library also supports queries over people and the joinof people and events. The following gives a skeleton for how that works.You are free to use only one of ``events`` and ``people``. ``join_params``is only used if both ``events`` and ``people`` are set... code:: python    query = JQL(                api_secret,                events=Events({                    'event_selectors': [                        {                            'event': '...',                            'selector': '...',                            'label': '...'                        },                        ...                    ],                    'from_date': '&lt;YYYY-MM-DD&gt;',                    'to_date': '&lt;YYYY-MM-DD&gt;'                }),                people=People({                    'user_selectors': [                        {                            'selector': '...'                        },                        ...                    ]                }),                join_params={                    'type': 'full',                    'selectors': [                        {                            'event': '...',                            'selector': '...',                        },                        ...                    ]                }            ). ...What other functions are supported?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Mixpanel seems to be in a constant state of adding new functions beyond just ``filter`` and ``map``.The following are presently supported by this library. Refer to the code for their usage.- ``filter``- ``map``- ``flatten``- ``sort_asc``- ``sort_desc``- ``reduce``- ``group_by``- ``group_by_user``How do I see what the final JavaScript sent to Mixpanel will be?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Use ``str`` method on your JQL query to view what theequivalent JavaScript will be... code:: python    &gt;&gt;&gt; str(query)    'function main() { return Events({&quot;event_selectors&quot;: [{&quot;event&quot;: &quot;A&quot;}], &quot;from_date&quot;: &quot;2016-04-01&quot;, &quot;to_date&quot;: &quot;2016-04-30&quot;}).filter(function(e){return e.properties.B == 2}).filter(function(e){return e.properties.F == &quot;hello&quot;}).groupByUser([function(e){return new Date(e.time).toISOString().split(\'T\')[0]},function(e){return e.property.C}], function(){ return 1;}).groupBy([function(e){return e.key.slice(1)}], mixpanel.reducer.count()); }'This can be quite helpful during debugging.But what if you want something actually readable? That's now possible too with the ``.pretty`` method!.. code:: python    &gt;&gt;&gt; print(query.pretty)    function main() {        return Events({            &quot;event_selectors&quot;: [{                &quot;event&quot;: &quot;A&quot;            }],            &quot;from_date&quot;: &quot;2016-04-01&quot;,            &quot;to_date&quot;: &quot;2016-04-30&quot;        }).filter(function(e) {            return e.properties.B == 2        }).filter(function(e) {            return e.properties.F == &quot;hello&quot;        }).groupByUser([function(e) {            return new Date(e.time).toISOString().split('T')[0]        }, function(e) {            return e.property.C        }], function() {            return 1;        }).groupBy([function(e) {            return e.key.slice(1)        }], mixpanel.reducer.count());    }Caveats-------``.filter(...)`` automatically transforms whatever is within theparenthesis' into ``function(e){ return ... }``.To override that behavior, and use things like the ``properties.x``shortcut syntax, use the ``raw(...)`` wrapper to insert whateverJavaScript you want into the ``filter``, ``map`` .etc parameters... code:: python    from mixpanel_jql import JQL, raw    ...    query = JQL(                api_secret,                events=params            ).filter(                raw(                    &quot; function(e) {&quot;                    &quot;   if (e.x &gt; 3) {&quot;                    &quot;     return true;&quot;                    &quot;   } else {&quot;                    &quot;     return false;&quot;                    &quot;   }&quot;                    &quot; )&quot;                )            ).filter(                'e.properties.F == &quot;hello&quot;'            )    ...This library cannot easily express everything possible in Mixpanel's JQLlanguage, but does try to simplify the general cases. If you have someideas for making this library more user friendly to a wider range ofpotential queries, please submit a pull request or create an issue.Contributions are very welcome!Where can I learn more about Mixpanel's JQL?--------------------------------------------For more information on what you can do with JQL, refer to Mixpanel'sdocumentation `here &lt;https://mixpanel.com/help/reference/jql&gt;`__... |PyPI Version| image:: https://badge.fury.io/py/mixpanel-jql.svg    :target: https://badge.fury.io/py/mixpanel-jql.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/mixpanel-jql.svg    :target: https://github.com/ownaginatious/mixpanel-jql/blob/master/setup.py.. |Build Status| image:: https://travis-ci.org/ownaginatious/mixpanel-jql.svg?branch=master    :target: https://travis-ci.org/ownaginatious/mixpanel-jql/.. |Coverage| image:: https://codecov.io/gh/ownaginatious/mixpanel-jql/branch/master/graph/badge.svg  :target: https://codecov.io/gh/ownaginatious/mixpanel-jql</longdescription>
</pkgmetadata>