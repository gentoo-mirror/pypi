<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fix-busted-jsonFix broken json using Python.For Python 3.6+.This project fixes broken JSON with the following issues:-   Missing quotes around key names-   Wrong quotes around key names and strings    -   Single quotes    -   Backticks    -   Escaped double quote    -   Double escaped double quote    -   &quot;Smart&quot; i.e. curly quotes-   Missing commas between key-value pairs and array elements-   Trailing comma after last key-value pair-   Concatenation of string fields-   Replace Python True/False/None with JSON true/false/nullUtility functions are also provided for finding JSON objects in text.https://github.com/Qarj/fix-busted-jsonhttps://pypi.org/project/fix-busted-json## Quickstart```shpip install fix-busted-json```Make a file called `example_repair_json.py`:```py#!/usr/bin/env python3from fix_busted_json import repair_jsoninvalid_json = &quot;{ name: 'John' 'age': 30, 'city': 'New' + ' York', }&quot;fixed_json = repair_json(invalid_json)print(fixed_json)```Note the issues in the invalid JSON:-   name is unquoted-   use of single quotes, JSON spec requires double quotes-   Missing comma-   Concatenation of string fields - not allowed in JSON-   Trailing commaRun it:```shpython example_repair_json.py```Output:```json{ &quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;city&quot;: &quot;New York&quot; }```## WhyThe project was developed originally to find JSON like objects in log files and pretty print them.More recently this project has been used to find and then fix broken JSON created by large language models such as `gpt-3.5-turbo` and `gpt-4`.For example a large language model might output a completion like the following:```txtThought: &quot;I need to search for developer jobs in London&quot;Action: SearchToolActionInput: { location: &quot;London&quot;, 'title': &quot;developer&quot; }```To get back this JSON object with this project is really easy:```py#!/usr/bin/env python3from fix_busted_json import first_jsoncompletion = &quot;&quot;&quot;Thought: &quot;I need to search for developer jobs in London&quot;Action: SearchToolActionInput: { location: &quot;London&quot;, 'title': &quot;developer&quot; }&quot;&quot;&quot;print(first_json(completion))```Output:```json{ &quot;location&quot;: &quot;London&quot;, &quot;title&quot;: &quot;developer&quot; }```## API### `repair_json````py#!/usr/bin/env python3from fix_busted_json import repair_jsoninvalid_json = &quot;{ name: 'John' }&quot;fixed_json = repair_json(invalid_json)```### log_jsonsLooks for JSON objects in text and logs them, also recursively logging any JSON objects found in the values of the top-level JSON object.```py#!/usr/bin/env python3from fix_busted_json import log_jsonslog_jsons(&quot;&quot;&quot;some text { key1: true, 'key2': &quot;  { inner: 'value', } &quot; } text { a: 1 } text&quot;&quot;&quot;)```Running it gives output:```txtsome text{  &quot;key1&quot;: true,  &quot;key2&quot;: &quot;  { inner: 'value', } &quot;}FOUND JSON found in key key2 ---&gt;{  &quot;inner&quot;: &quot;value&quot;} text{  &quot;a&quot;: 1} text```### to_array_of_plain_strings_or_jsonBreaks text into an array of plain strings and JSON objects.```py#!/usr/bin/env python3from fix_busted_json import to_array_of_plain_strings_or_jsonresult = to_array_of_plain_strings_or_json(&quot;&quot;&quot;some text { key1: true, 'key2': &quot;  { inner: 'value', } &quot; } text { a: 1 } text&quot;&quot;&quot;)print(result)```Gives output:```txt['some text ', '{ &quot;key1&quot;: true, &quot;key2&quot;: &quot;  { inner: \'value\', } &quot; }', ' text ', '{ &quot;a&quot;: 1 }', ' text']```### first_json, last_json, largest_json, json_matchingUtility functions for finding JSON objects in text.```py#!/usr/bin/env python3import refrom fix_busted_json import first_json, last_json, largest_json, json_matchingjsons = &quot;text { first: 123 } etc { second_example: 456 } etc { third: 789 } { fourth: 12 }&quot;print(first_json(jsons))print(last_json(jsons))print(largest_json(jsons))print(json_matching(jsons, re.compile(&quot;thi&quot;)))```Output:```txt{ &quot;first&quot;: 123 }{ &quot;fourth&quot;: 12 }{ &quot;second_example&quot;: 456 }{ &quot;third&quot;: 789 }```## See alsoNode version of this project: https://www.npmjs.com/package/log-parsed-json</longdescription>
</pkgmetadata>