<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Beautysh [![CI](https://github.com/lovesegfault/beautysh/actions/workflows/ci.yaml/badge.svg)](https://github.com/lovesegfault/beautysh/actions/workflows/ci.yaml)This program takes upon itself the hard task of beautifying Bash scripts(yeesh). Processing Bash scripts is not trivial, they aren't like C or Javaprograms — they have a lot of ambiguous syntax, and (shudder) you can usekeywords as variables. Years ago, while testing the first version of thisprogram, I encountered this example:```shelldone=0;while (( $done &lt;= 10 ));do echo done=$done;done=$((done+1));done```Same name, but three distinct meanings (sigh). The Bash interpreter can sort outthis perversity, but I decided not to try to recreate the Bash interpreter tobeautify a script. This means there will be some border cases this Pythonprogram won't be able to process. But in tests with large Linux systemBash scripts, its error-free score was ~99%.## InstallationIf you have `pip` set up you can do```shellpip install beautysh```or clone the repo and install:```shellgit clone https://github.com/lovesegfault/beautyshcd beautyshpoetry install```## UsageYou can call Beautysh from the command line such as```shellbeautysh file1.sh file2.sh file3.sh```in which case it will beautify each one of the files.Available flags are:```  --indent-size INDENT_SIZE, -i INDENT_SIZE                        Sets the number of spaces to be used in indentation.  --backup, -b          Beautysh will create a backup file in the same path as                        the original.  --check, -c           Beautysh will just check the files without doing any                        in-place beautify.  --tab, -t             Sets indentation to tabs instead of spaces.  --force-function-style FORCE_FUNCTION_STYLE, -s FORCE_FUNCTION_STYLE                        Force a specific Bash function formatting. See below                        for more info.  --version, -v         Prints the version and exits.  --help, -h            Print this help message.Bash function styles that can be specified via --force-function-style are:  fnpar: function keyword, open/closed parentheses, e.g.      function foo()  fnonly: function keyword, no open/closed parentheses, e.g.  function foo  paronly: no function keyword, open/closed parentheses, e.g. foo()```You can also call beautysh as a module:```python3from beautysh import Beautifysource = &quot;my_string&quot;result, error = Beautify().beautify_string(source)```As written, beautysh can beautify large numbers of Bash scripts when calledfrom a variety of means,including a Bash script:```shell#!/bin/shfor path in `find /path -name '*.sh'`do   beautysh $pathdone```As well as the more obvious example:```shell$ beautysh *.sh```&gt; **CAUTION**: Because Beautysh overwrites all the files submitted to it, this&gt; could have disastrous consequences if the files include some of the&gt; increasingly common Bash scripts that have appended binary content (a regime&gt; where Beautysh has undefined behaviour ). So please — back up your files,&gt; and don't treat Beautysh as a harmless utility. Even if that is true&gt; most of the time.Beautysh handles Bash here-docs with care(and there are probably someborder cases it doesn't handle). The basic idea is that the originator knew what format he wanted in the here-doc, and a beautifier shouldn't try to outguesshim. So Beautysh does all it can to pass along the here-doc contentunchanged:```shellif truethen   echo &quot;Before here-doc&quot;   # Insert 2 lines in file, then save.   #--------Begin here document-----------#vi $TARGETFILE &lt;&lt;x23LimitStringx23iThis is line 1 of the example file.This is line 2 of the example file.^[ZZx23LimitStringx23   #----------End here document-----------#   echo &quot;After here-doc&quot;fi```Special comments `@formatter:off` and `@formatter:on` are available to disable formatting around a block of statements.```shell# @formatter:offcommand \    --option1 \        --option2 \            --option3 \# @formatter:on```This takes inspiration from the Eclipse feature.## ContributingContributions are welcome and appreciated, however test cases must be added toprevent regression. Adding a test case is easy, and involves the following:1. Create a file `tests/fixtures/my_test_name_raw.sh` containing the unformatted version   of your test case.1. Create a file `tests/fixtures/my_test_name_formatted.sh` containing the formatted version   of your test case.1. Register your test case in `tests/test_integration.py`, It should look   something like this:  ```python3  def test_my_test_name(self):      self.assert_formatting(&quot;my_test_name&quot;)  ```________________________________________________________________________________Originally written by [Paul Lutus](http://arachnoid.com/python/beautify_bash_program.html)</longdescription>
</pkgmetadata>