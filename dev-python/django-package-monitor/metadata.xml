<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://travis-ci.org/yunojuno/django-package-monitor.svg?branch=master    :target: https://travis-ci.org/yunojuno/django-package-monitor.. image:: https://badge.fury.io/py/django-package-monitor.svg    :target: https://badge.fury.io/py/django-package-monitorDjango Package Monitor======================**This package is now Python3 and Django 1.11 and above. For previous versions please refer to the Python2 branch.**A Django app for keeping track of dependency updates.Background----------At YunoJuno we have a Django project that includes almost 100 external packages.In order to manage updates to these we have a rolling development task thatcomes around in the first week of each month, and includes the following:1. Using ``pip list --outdated`` list out all available updates2. Group updates (using `semver &lt;http://semver.org/&gt;`_) into Major, Minor, Patch, Other3. Apply patch updates in a single update / commit4. Apply minor updates as a group, see what breaks, remove, rinse, repeat5. Take a view on major updatesThis task is a PITA, and so we decided to make it simpler.Implementation--------------This project contains a Django app that can be used to monitor your packages.It consists of a single model, ``PackageVersion``, an admin list view that youcan use to view current package versions, and load latest versions from PyPI,and a single management command that can be used to load local requirements andupdate remote versions from the shell - which you could run overnight if youfelt the need.It is important to note that this app **does not** update your requirements foryou - it simply displays the requirements that you have, and the latest thatis available on PyPI.In order to illustrate how it works, the app itself contains a Django projectthat can be used to demonstrate the feature.Installation------------Download / install the app using pip:.. code:: shell    pip install django-package-monitorAdd the app ``package_monitor`` to your ``INSTALLED_APPS`` Django setting:.. code:: python    # settings.py    INSTALLED_APPS = (        'django.contrib.admin',        'django.contrib.auth',        'django.contrib.contenttypes',        'django.contrib.sessions',        'django.contrib.messages',        'django.contrib.staticfiles',        'package_monitor',        ...    )Set the ``PACKAGE_MONITOR_REQUIREMENTS_FILE`` setting to point to your projectrequirements file:.. code:: python   # settings.py   PACKAGE_MONITOR_REQUIREMENTS_FILE = path.join(PROJECT_ROOT, 'requirements.txt')Add the app URLs to your project - NB it must have the namespace set:.. code:: python    # urls.py    urlpatterns = patterns(        '',        url(r'^admin/', include(admin.site.urls)),        url(r'^package_monitor/', include('package_monitor.urls', namespace='package_monitor')),    )At this point you should have a working implementation. You can test this by runningthe management command to load your local requirements:.. code:: shell    # load up the local requirements file    $ python manage.py refresh_packages --localThis will load all of the requirements it finds in the requirements file specified into thedatabase. If you then want to check PyPI for updated version, run the command with the ``--remote``option. You can run both of these command together:.. code:: python    # load up the local requirements file, and check PyPI    $ python manage.py refresh_packages --local --remoteIf you want to clean out the existing ``PackageVersion`` table before loading the local file, use the ``--clean``option:.. code:: shell    # clear out database, load up the local requirements file, and check PyPI    $ python manage.py refresh_packages --clean --local --remoteTests-----There is a test suite that can be run using tox:.. code:: shell    $ pip install -r requirements    $ toxIn addition to the unit tests, the source distribution also includes a fully-functioning Djangoproject, that can be run from the repo root, and used to demonstrate how it works:.. code:: shell    $ git clone git@github.com:yunojuno/django-package-monitor.git    $ cd django-package-monitor    $ pip install -r requirements.txt    # you will need to create a superuser in order to access the admin site    $ python manage.py createsuperuser    $ python manage.py runserverIf you then log in to the app (http://localhost:8000/admin by default), you can then see the adminlist page:.. image:: https://github.com/yunojuno/django-package-monitor/blob/master/screenshots/no_packages.png   :alt: Screenshot of admin list view (empty)If you click on the &quot;Reload local requirements&quot; button in the top-right, it will load up the contentsof the requirements file that you used earlier:.. image:: https://github.com/yunojuno/django-package-monitor/blob/master/screenshots/local_only.png   :alt: Screenshot of admin list view populated with local requirementsNB If any requirements cannot be parsed by the ``semantic_version.Version.coerce`` method, then the``is_parseable`` property is set to `False`, and the package is in effect unmanaged.At this point it has parsed the requirements file, and stored the current working version ofeach package (as ``current_version``). In order to see what the latest versions are, select all the packages,and choose &quot;Update selected packages from PyPI&quot; form the actions list:.. image:: https://github.com/yunojuno/django-package-monitor/blob/master/screenshots/select_all.png   :alt: Screenshot of admin list view with all requirements selectedThis may take some time, as it will call the PyPI API for each package (excluding those that aremarked as editable), and download the latest version info for each. At the end of this, you shouldsee the page updated with the new version information (as ``latest_version``) - as well as the licenceinformation that is stored in the PyPI metadata:.. image:: https://github.com/yunojuno/django-package-monitor/blob/master/screenshots/remote.png   :alt: Screenshot of admin list view with requirement info updated from PyPIIf you drill down to the detail on an individual package, you can see all of the available versions:.. image:: https://github.com/yunojuno/django-package-monitor/blob/master/screenshots/package_details.png   :alt: Screenshot of Django package detailsContributing------------This is by no means complete - it can't cope with requirements that are anything other than '==',and it doesn't (yet) help with updating the requirements file itself. However, it's good enough tobe of value, hence releasing it. If you would like to contribute to the project, usual Github rulesapply:1. Fork the repo to your own account2. Submit a pull request3. Add tests for any new code4. Follow coding style of existing projectLicence-------This project is MIT licensed - see the LICENCE file for details.</longdescription>
</pkgmetadata>