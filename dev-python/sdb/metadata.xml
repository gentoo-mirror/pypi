<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Sdb===A socket-based remote debugger for Python.  Based on `celery.contrib.rdb`.![example](./screen.gif)Usage-----Use the `sdb` library to set remote breakpoints in any non-interactive orbackground Python code and debug interactively over a telnet session:```python   # some/python/code.py   class SomeCode(object):       def run(self, **kwargs):           # This will set a breakpoint and open an interactive Python           # debugger exposed on a random port between 6899-6999.  The chosen           # port will be reported as a warning           #           # Remote Debugger:6900: Please telnet into 0.0.0.0 6900.           #           # You can access it from your host machine using telnet:           #           # $ telnet &lt;hostname&gt; &lt;port&gt;           import sdb           sdb.set_trace()```Keep in mind that when you interactively debug in this way, any processthat encounters a breakpoint will wait until an active client is establishedand concludes the debugging session with a `continue` command.Automatically Connecting to Breakpoints---------------------------------------To simplify remote debugging session management, you can use `sdb-listen`to automatically discover open remote debugging sessions and connect to them:```shell   $ sdb-listen```This will open a Python process that listens for new debugger sessions andautomatically connects to them for you.  If your breakpoint is run onan _entirely different host_ (e.g. `10.0.0.1`) you can optionally specify thehostname where `sdb-listen` is running:```python   import sdb   sdb.Sdb(notify_host='10.0.0.1').set_trace()```For OSX users, the Docker for Mac application relies on a separate virtualmachine running the containers. A unique hostname is advertised to containerspointing back to the virtual machine called: `docker.for.mac.host.internal`.The breakpoint can then be configured to use that host so that it worksseamlessly in a Mac:```python   import sdb   sdb.Sdb(notify_host='docker.for.mac.host.internal').set_trace()```The `sdb-listen` tool also includes support for tab-completion and historytracking.Configuration with Environment Variables----------------------------------------It is possible to set environment variables to configure `sdb`, which allowsto avoid remembering hosts and ports at the time of setting the breakpoints.- `SDB_HOST` : Defaults to `127.0.0.1` and it is the address that `sdb` shouldbind to.- `SDB_PORT` : Defaults to `6899`, and it is the port used to bind (used with`SDB_HOST`). Note that `sdb` has a range of ports from `6899` to `6999`.- `SDB_NOTIFY_HOST` : To advertise a different host, useful for a separate remotehost like in the case of Docker for Mac.- `SDB_CONTEXT_LINES` : How much context should get printed when a breakpoint isreached. Defaults to 60.- `SDB_COLORIZE` : Toggle to enable or disable colorized output. Defaults toenabled.Triggering sdb with a Signal----------------------------If you want to debug a running process without setting a specific breakpoint,a `set_trace()` call can be triggered via `SIGTRAP`:```pythonimport sdbsdb.sigtrap()long_running_process()``````shell$ kill -5 &lt;pid-of-process&gt;```This is particularly useful for investigating Python processes that appear tobe hung.Docker Compose Examples-----------------------If using Docker Compose, it is useful to open the range of ports that `sdb`supports, as well as injecting the environment variables to configure theconnection.For example:```yaml    environment:    - SDB_NOTIFY_HOST=docker.for.mac.host.internal    - SDB_HOST=0.0.0.0    - SDB_PORT=6899```It is useful to define a range of ports that `sdb` can use:```yaml    ports:    - &quot;6899-6999:6899-6999&quot;```Other Tips----------`sdb` supports the same commands and aliases as Python's [default pdb implementation](https://docs.python.org/2/library/pdb.html#debugger-commands).`sdb` colorizes output by default.  To disable this:```python   import sdb   sdb.Sdb(colorize=False).set_trace()````sdb` includes a few additional debugger aliases that make interactive debugging more pleasant:- Prefix commands with an integer to repeat them.  For example, `10n` is the same as running `next` 10 times in a row.- `?` is the same as calling `dir()`- `??` can be added to the end of a function call to view its source lines e.g., `requests.post??` might print:```pythondef post(url, data=None, json=None, **kwargs):    r&quot;&quot;&quot;Sends a POST request.    :param url: URL for the new :class:`Request` object.    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.    :param json: (optional) json data to send in the body of the :class:`Request`.    :param \*\*kwargs: Optional arguments that ``request`` takes.    :return: :class:`Response &lt;Response&gt;` object    :rtype: requests.Response    &quot;&quot;&quot;    return request('post', url, data=data, json=json, **kwargs)```- By default, `sdb` attempts to fill your entire console with debugger output (representing the current line position for the current frame).  You can adjust the height of `sdb`'s draw window with the `lines` command, e.g., `lines 15`.</longdescription>
</pkgmetadata>