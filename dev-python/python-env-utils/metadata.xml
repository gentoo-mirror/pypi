<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://travis-ci.org/yunojuno/python-env-utils.svg?branch=master    :target: https://travis-ci.org/yunojuno/python-env-utils.. image:: https://badge.fury.io/py/python-env-utils.svg    :target: https://badge.fury.io/py/python-env-utils.. image:: https://codecov.io/gh/yunojuno/python-env-utils/branch/master/graph/badge.svg    :target: https://codecov.io/gh/yunojuno/python-env-utilsenv utils=========This library extends the standard library's ``getenv`` function, allowingyou to coerce the return value into a type.And that's it.It's been released as a library because every project we have includes thesame requirements - read in environment variables, coerce them into thecorrect type.The problem is that environment variables are always stored as strings, butPython will evaluate any string (even &quot;&quot;) as True if cast to a boolean. Thisis almost never the desired behaviour. If you set an environment variable to&quot;&quot;, &quot;0&quot; or &quot;False&quot;, you want it to be False... code:: python    &gt;&gt;&gt; os.environ['foo'] = &quot;0&quot;    &gt;&gt;&gt; val = os.getenv('foo')    &gt;&gt;&gt; val    &quot;0&quot;    &gt;&gt;&gt; bool(val)    True``env_utils.get_env`` will coerce the value into the type you require. The package contains basic helper functions that coerce booleans, integers, decimals, floats, dates, lists and dictionaries... code:: python    # FOO=0    &gt;&gt;&gt; env_utils.get_env('FOO')    &quot;0&quot;    &gt;&gt;&gt; env_utils.get_bool('FOO')    False    &gt;&gt;&gt; env_utils.get_int('FOO')    0    # FOO=foo,bar    &gt;&gt;&gt; env_utils.get_list('FOO', separator=',')    ['foo', 'bar']    # FOO='{&quot;foo&quot;: true}'    &gt;&gt;&gt; env_utils.get_dict('FOO')    {'foo': True}    # FOO=2016-11-23    &gt;&gt;&gt; env_utils.get_date('FOO')    datetime.date(2016, 11, 23)You can supply any function you like to coerce the value, e.g.:.. code:: python    &gt;&gt;&gt; import os    &gt;&gt;&gt; os.getenv('FOO_NAME')    'bob'    &gt;&gt;&gt; class Foo(object):    ...     def __init__(self, name):    ...         self.name = name    &gt;&gt;&gt; coerce = lambda x: Foo(x)    &gt;&gt;&gt; import env_utils    &gt;&gt;&gt; foo = env_utils.get_env('FOO_NAME', coerce=coerce)    &gt;&gt;&gt; foo.name    &gt;&gt;&gt; 'bob'Installation------------The library is available at pypi as 'python-env-utils', and can installed using pip::    $ pip install python-env-utilsTests-----The tests can be run using ``tox``:.. code:: shell    $ tox</longdescription>
</pkgmetadata>