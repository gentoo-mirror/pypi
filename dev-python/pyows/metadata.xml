<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyows[![Build Status](https://github.com/EOxServer/pyows/actions/workflows/test.yaml/badge.svg)](https://github.com/EOxServer/pyows/actions/workflows/test.yaml)[![PyPI version](https://badge.fury.io/py/pyows.svg)](https://badge.fury.io/py/pyows)[![Documentation Status](https://readthedocs.org/projects/pyows/badge/?version=latest)](https://pyows.readthedocs.io/en/latest/?badge=latest)`pyows` is a library to help building an OWS compatible service or client. It helps building requests and parsing them and also provides object types to be serialized and sent as responses.## InstallationUse the package manager [pip](https://pip.pypa.io/en/stable/) to install pyows.```bashpip install pyows```## Usage`pyows` can be used to both parse/encode OWS requests and to parse/encode objects for the various services.Example: Parsing a WCS 2.0 GetCoverage request:```python&gt;&gt;&gt; from ows.wcs.v20.decoders import xml_decode_get_coverage&gt;&gt;&gt;&gt;&gt;&gt; request = b&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;... &lt;wcs:GetCoverage...     xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'...     xsi:schemaLocation=&quot;http://www.opengis.net/wcs/2.0 http://schemas.opengis.net/wcs/2.0/wcsAll.xsd&quot;...     xmlns=&quot;http://www.opengis.net/wcs/2.0&quot;...     xmlns:wcs=&quot;http://www.opengis.net/wcs/2.0&quot;...     service=&quot;WCS&quot;...     version=&quot;2.0.1&quot;&gt;...     &lt;wcs:CoverageId&gt;a&lt;/wcs:CoverageId&gt;... &lt;/wcs:GetCoverage&gt;... &quot;&quot;&quot;&gt;&gt;&gt; print(xml_decode_get_coverage(request))GetCoverageRequest(coverage_id='a', format=None, mediatype=None, subsetting_crs=None, output_crs=None, subsets=[], scalefactor=None, scales=[], interpolation=None, axis_interpolations=[], range_subset=None)```The other way around:```python&gt;&gt;&gt; from ows.wcs.v20 import GetCoverageRequest, Trim, Slice&gt;&gt;&gt; request = GetCoverageRequest(...     coverage_id='a',...     subsets=[...         Trim(dimension='x', low=1.2, high=2.2),...         Trim(dimension='y', low=3),...         Slice(dimension='time', point='2018-05-07')...     ]... )&gt;&gt;&gt; print(xml_encode_get_coverage(request, pretty_print=True).value.decode('utf-8'))&lt;wcs:GetCoverage xmlns:crs=&quot;http://www.opengis.net/wcs/crs/1.0&quot; xmlns:eop=&quot;http://www.opengis.net/eop/2.0&quot; xmlns:gml=&quot;http://www.opengis.net/gml/3.2&quot; xmlns:gmlcov=&quot;http://www.opengis.net/gmlcov/1.0&quot; xmlns:int=&quot;http://www.opengis.net/wcs/interpolation/1.0&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:om=&quot;http://www.opengis.net/om/2.0&quot; xmlns:ows=&quot;http://www.opengis.net/ows/2.0&quot; xmlns:rsub=&quot;http://www.opengis.net/wcs/range-subsetting/1.0&quot; xmlns:scal=&quot;http://www.opengis.net/wcs/scaling/1.0&quot; xmlns:swe=&quot;http://www.opengis.net/swe/2.0&quot; xmlns:wcs=&quot;http://www.opengis.net/wcs/2.0&quot; xmlns:wcseo=&quot;http://www.opengis.net/wcs/wcseo/1.0&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; service=&quot;WCS&quot; version=&quot;2.0.1&quot;&gt;  &lt;wcs:CoverageId&gt;a&lt;/wcs:CoverageId&gt;  &lt;wcs:DimensionTrim&gt;    &lt;wcs:Dimension&gt;x&lt;/wcs:Dimension&gt;    &lt;wcs:TrimLow&gt;1.2&lt;/wcs:TrimLow&gt;    &lt;wcs:TrimHigh&gt;2.2&lt;/wcs:TrimHigh&gt;  &lt;/wcs:DimensionTrim&gt;  &lt;wcs:DimensionTrim&gt;    &lt;wcs:Dimension&gt;y&lt;/wcs:Dimension&gt;    &lt;wcs:TrimLow&gt;3&lt;/wcs:TrimLow&gt;  &lt;/wcs:DimensionTrim&gt;  &lt;wcs:DimensionSlice&gt;    &lt;wcs:Dimension&gt;time&lt;/wcs:Dimension&gt;    &lt;wcs:SlicePoint&gt;2018-05-07&lt;/wcs:SlicePoint&gt;  &lt;/wcs:DimensionSlice&gt;&lt;/wcs:GetCoverage&gt;```### Currently supported OWS- OWS common    - 2.0:        - Capabilities related encoding- WCS    - 2.0:        - Request encoding/decoding for (both XML/KVP)            - GetCapabilities            - DescribeCoverage            - GetCoverage        - Response encoding            - Capabilities            - CoverageDescriptions    - 2.1        - Response encoding for            - CoverageDescriptions- WMS    - 1.3:        - Request encoding/decoding KVP            - GetCapabilities            - GetMap            - GetFeatureInfo        - Response encoding            - Capabilities## Roadmap- Full support of WCS 2.x including EO-WCS application profile and all extensions- Support for WPS 2.0 requests and responses- Support for WMS request and responses for all versions## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.Please make sure to update tests as appropriate.## License[MIT](https://choosealicense.com/licenses/mit/)</longdescription>
</pkgmetadata>