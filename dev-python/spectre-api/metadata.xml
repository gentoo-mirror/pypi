<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># spectre-api-python## GeneralThis module is intended to make it a bit easier to work withThe Lumeta Corporation's Spectre API.Lumeta and Spectre are both registered trademarks of the Lumeta CorporationInstall this module by running `pip3 install spectre-api`### IntroductionThis Python module is intended to be a relatively light weight wrapper around the Spectre API.The idea is to abstract out some of the authentication and paging pieces to make it easier tofocus on fine-tuning the actual underlying calls.  Basically, you configure a server(currently using username/password or API Key authentication) and then have it perform API calls.For example:```python&gt;&gt;&gt; import spectreapi&gt;&gt;&gt; s = spectreapi.UsernameServer(&quot;cc&quot;, &quot;username&quot;, &quot;password&quot;)&gt;&gt;&gt; r = s.get(&quot;zonedata/devices&quot;, params = { &quot;filter.zone.id&quot;: 1} )&gt;&gt;&gt; for d in r:...     if d['ip'] is not None:...             print(d['ip'])...10.2.1.110.201.0.110.201.0.710.202.0.110.202.0.2172.18.1.180&gt;&gt;&gt;```Another, slightly cleaner way to do this would be to use the query methods```python&gt;&gt;&gt; import spectreapi&gt;&gt;&gt; z = spectreapi.UsernameServer('cc','username','password').get_zone_by_name('Zone1')&gt;&gt;&gt; q=z.query().detail('Attributes')&gt;&gt;&gt; for d in q.run():...     if d['ip'] is not None:...             print(d['ip'])...10.2.1.110.201.0.110.201.0.710.202.0.110.202.0.2172.18.1.180&gt;&gt;&gt;```## ServersA **Server** is the base class that has most of the functionalityneeded to use the Spectre API.  You'll instantiate a more specific**Server** based on which authentication method you're using.### UsernameServer`spectreapi.UsernameServer(&lt;server&gt;, &lt;username&gt;, &lt;password&gt;, [&lt;page_size&gt;,] [&lt;verify&gt;])`Where:`&lt;server&gt;` = The IP address or DNS name of the Spectre Command Center `&lt;username&gt;` = Username`&lt;password&gt;` = Password `&lt;page_size&gt;` = How many results should a GET request return at a time.`&lt;verify&gt;` = Should we verify the SSL certificate of the server (True or False, defaults to False).  You'll want to leave this a False unless you've given your command center an actual SSL certificate.Behind the scenes, this makes an API call to `system/information` with basic authentication(over https) and then uses the resulting JSESSIONID cookie for the rest of the time.### APIKeyServer`spectreapi.APIKeyServer(&lt;server&gt;, &lt;api_key&gt;, [, &lt;page_size&gt;] [, &lt;verify&gt;])`Where:`&lt;server&gt;` = The IP address or DNS name of the Spectre Command Center `&lt;api_key&gt;` = API Key for API access.  You get this via the GUI or by issuing the`user key new &lt;username&gt;` command at the command center CLI.`&lt;page_size&gt;` = How many results should a GET request return at a time.`&lt;verify&gt;` = Should we verify the SSL certificate of the server (True or False, defaults to False).  You'll want to leave this a False unless you've given your command center an actual SSL certificate.## GET, POST, PUT, DELETE## Notes on using the underlying Spectre API</longdescription>
</pkgmetadata>