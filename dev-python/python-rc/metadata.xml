<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-rc[![PyPI version](https://badge.fury.io/py/python-rc.svg)](https://pypi.org/project/python-rc/)Python remote control library for programmatically control remote machines of mutliple cloud providers. Currently support gcloud, azure and digitalocean.## Usagepython-rc consists of python-rc lib and python-rc cli.### python-rc cli```rc &lt;group name&gt; command ...: execute command non interactively in group of machinesrc &lt;group name&gt;/name_pattern1,... command ...: execute command non interactively in group of machines, but only subset that match pattern rc &lt;group name&gt; @file: execute content of local file in group of machinesrc tmux &lt;group name&gt;: launch a tmux that ssh to every instance in group of machines, input to one machine will be replicate to the grouprc edit &lt;group name&gt;: create or edit machines in grouprc cat &lt;group name&gt;: show machines in grouprc ls: show defined groupsrc rm &lt;group name&gt;: delete group definition (does not delete machines)rc rsync: parallel rsyncrc ssh-config: generate ~/.ssh/config that can be used with ssh machine_name, scp, rsync, mosh, etc.```In python-rc tmux, you can use `C-b a` to toggle input to all machines and input into single machine.### python-rc libImport one of provider module: gcloud, digitalocean and azure to get or create a machine. Use machine methods to execute shell commands, execute background task, edit file, etc on the machine. Example:```from rc import gcloudm = gcloud.get('instance1')# run a single line commandp = m.run('ls')print(p.stdout)# run a multiline commandm.bash('''cd workspace/projmake -j 4''')# run a muliline commands as rootm.sudo('''apt updateapt install -y jq''')# edit a file, as user `ubuntu`:m.edit('~/a.txt', '''file line1file line2''', user='ubuntu')# run a server process in backgroundm.run_bg('''cd workspace/someservernpm inpm run''')# run a python snippet on a serverp = m.python('''import jsonj = json.load(open('foo.json'))print(j['key'])''')# Useful utility example:# parallel run tasks on each machinefrom rc import pmapdef task(machine, script_path):    machine.bootup()    machine.upload(f'~/local/path/{script_path}', f'~/remote/path/script_path}')    machine.run(f'bash remote/path/{script_path}')pmap(lambda i: task(machines[i], tasks[i]), range(n))```## DocumentationTODO. See `rc/test/` for example usages for now## TestTo run gcloud part test, `gcloud` cli needs to be installed and logged in.```pipenv sync -dpipenv run pytest -s```</longdescription>
</pkgmetadata>