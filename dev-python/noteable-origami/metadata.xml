<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Origami&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;docs/papersnake.svg&quot; width=&quot;250px&quot; /&gt;&lt;br /&gt;Launch, edit, and share Jupyter notebooks &lt;i&gt;in automation&lt;/i&gt;.&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/noteable-io/origami/actions/workflows/ci.yaml&quot;&gt;    &lt;img src=&quot;https://github.com/noteable-io/origami/actions/workflows/ci.yaml/badge.svg&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/noteable-io/origami&quot; &gt;  &lt;img src=&quot;https://codecov.io/gh/noteable-io/origami/branch/main/graph/badge.svg&quot; alt=&quot;codecov code coverage&quot;/&gt;  &lt;/a&gt;&lt;img alt=&quot;PyPI - License&quot; src=&quot;https://img.shields.io/pypi/l/noteable-origami&quot; /&gt;&lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/noteable-origami&quot; /&gt;&lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/noteable-origami&quot;&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;&lt;/p&gt;---[Install](#installation) | [Getting Started](#getting-started) | [Documentation](https://noteable-origami.readthedocs.io) | [License](./LICENSE) | [Code of Conduct](./CODE_OF_CONDUCT.md) | [Contributing](./CONTRIBUTING.md)&lt;!-- --8&lt;-- [start:intro] --&gt;## Intro to OrigamiOrigami is a üêç Python library for talking to [Noteable notebooks](https://noteable.io/). This is the official way to access the full breadth of API calls and access patterns in async Python for rich programmatic access to notebooks. You can use [Noteable for free](https://app.noteable.io) with a quick signup.&lt;!-- --8&lt;-- [end:intro] --&gt;&lt;!-- --8&lt;-- [start:requirements] --&gt;## RequirementsPython 3.8+&lt;!-- --8&lt;-- [end:requirements] --&gt;&lt;!-- --8&lt;-- [start:install] --&gt;## InstallationFor stable release:```bashpip install noteable-origami``````bashpoetry add noteable-origami```For alpha pre-release:```bashpip install noteable-origami --pre```&lt;!-- --8&lt;-- [end:install] --&gt;&lt;!-- --8&lt;-- [start:start] --&gt;## Getting Started&gt; **Warning**&gt; Developer note: this documentation is written for the 1.0 alpha release. For stable release, see [pre-1.0 README](https://github.com/noteable-io/origami/blob/release/0.0.35/README.md)### API TokensThe Noteable API requires an authentication token. You can manage tokens at the Noteable user settings page.1. Log in to Noteable (sign up is free)2. In the User Settings tab, navigate to `API Tokens` and generate a new token### UsageThe example below shows how to create a Notebook, launch a Kernel, add new cells, and execute code.```python# Get your API token from the User Settings page by clicking your account name in the upper rightapi_token = os.environ['NOTEABLE_TOKEN']# Client for interacting with Noteables REST APIfrom origami.clients.api import APIClientapi_client = APIClient(api_token)# Sanity check your user informationuser = await api_client.user_info()# Choose a project to create the notebook in, here using the ChatGPT plugin default projectproject_id = user.origamist_default_project_id# Create a new Notebookfile = await api_client.create_notebook(project_id=project_id, path=&quot;Demo.ipynb&quot;)# Start a Kernelawait api_client.launch_kernel(file.id)# Client for Real-time Updates (RTU), used with Notebooksrealtime_notebook = await api_client.connect_realtime(file)# Add a new cellfrom origami.models.notebook import CodeCellcell = CodeCell(source=&quot;print('Hello World')&quot;)await realtime_notebook.add_cell(cell)# Execute the cell. The returned value is a dictionary of Futures. Awaiting those futures will# block until the cells have completed executionqueued_execution = await realtime_notebook.queue_execution(cell.id)# The return value of the Futures is the up-to-date cell. If there's output, an output collection id# will be set on the cell metadatacells = await asyncio.gather(*queued_execution)# Grab the outputcell = cells[0]output_collection = await api_client.get_output_collection(cell.output_collection_id)print(output_collection.outputs[0].content.raw) # 'Hello World\n'```&lt;!-- --8&lt;-- [end:start] --&gt;## 1.0 RoadmapOrigami 1.0 implies that we have a stable architecture such as a split of `APIClient` and `RTUClient` and the layout of the RTU modeling. Some syntax may change as Origami is integrated into production components. Any breaking changes will be a minor version bump.## ContributingSee [CONTRIBUTING.md](./CONTRIBUTING.md).---&lt;p align=&quot;center&quot;&gt;Open sourced with ‚ù§Ô∏è by &lt;a href=&quot;https://noteable.io&quot;&gt;Noteable&lt;/a&gt; for the community.&lt;/p&gt;&lt;img href=&quot;https://pages.noteable.io/private-beta-access&quot; src=&quot;https://assets.noteable.io/github/2022-07-29/noteable.png&quot; alt=&quot;Boost Data Collaboration with Notebooks&quot;&gt;</longdescription>
</pkgmetadata>