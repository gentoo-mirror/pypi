<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A fully typed generic manager class to easily create CRUD operations for SQLAlchemy models. Designed to use in FastAPIprojects.# Table of content1. [Quick start](#quick-start)    - [Manager](#manager)    - [Searching](#searching)2. [Pagination](#pagination)    - [Paginator](#paginator)    - [Pagination model](#pagination-model)3. [Using with FastAPI](#using-with-fastapi)## Quick startAssume you have an SQLAlchemy model `User` and you want to perform CRUD on this model. You can simply create a managerfor the model like this:```pythonfrom fastapi_manager import Managerfrom .models import Userclass UserManager(Manager[User]):    pass````Manager` is a generic class, you need to pass an SQLAlchemy model as it's type (`Manager[User]`) to configure themanager to operate the model.By passing an SQLAlchemy model as manager's type you will also get type hints and autocompletion in your IDE.That's it. You can now use the manager to do CRUD operations. You need to pass an SQlAlchemy session to a method asfirst argument. It can be `Session` or `AsyncSession`.```pythonUserManager.create(session, User(firstname=&quot;Bob&quot;))UserManager.get(session, id=1)UserManager.delete(session, id=1)```### Manager`Manager` class contains general CRUD methods alongside some extra methods such as `get_or_create` and `search`.List of all methods:    - get    - create    - delete    - get_or_create    - search    - updateIt is also has async methods, simple add `async_` to a method name, e.g. `async_create`, `async_delete` etc.`Manager` can accept either an SQLAlchemy model instance or a pydantic model instance.```pythonfrom fastapi_manager import Managerfrom pydantic import BaseModelfrom app.db import sessionfrom app.managers import UserManagerclass User(BaseModel):    firstname: struser = User(firstname=&quot;Bob&quot;)UserManager.create(session, user)  # ok```### SearchingManager has `search` and `async_search` methods. It accepts search params as a pydantic model called `Params`. Eachmanager has its own search params model defined inside the class.```pythonfrom fastapi_manager import Managerfrom pydantic import BaseModelfrom .models import Userclass UserManager(Manager[User]):    class Params(BaseModel):        age: int        gender: str```Now `search` and `async_search` of `UserManager` will accept only `age` and `gender` params by validating them usingthe `Params`model.You can pass either a `dict` or manager's `Params` object.```pythonUserManager.search(session, **{'age': 10, 'gender': 'male'})  # okayUserManager.search(session, UserManager.Params(age=10, gender='male'))  # okayUserManager.search(session, **{'age': 10, 'name': 'Bob'})  # validation error```## PaginationYou usually need a pagination when do search. `Manager` comes with simple builtin pagination for `search`and `async_search` methods.These methods accept `page` argument to return a limited set of items belonging to the page.In `fastapi_manager.pagination` you can find `Paginator` and `Pagination` classes.### Paginator`Paginator` is responsible for doing the pagination and is used by manager's `search` and `async_search` methods.It does an offset limit pagination under the hood, and operates with `page` and `per_page` properties.Its main method `paginate` returns `Pagination` object which tells the structure of the pagination.It has two properties: `per_page = 25` and `order_by = 'id'` that can be customized.You can customize it by inherit the `Paginator` and override these params in your own class:```pythonfrom fastapi_manager import Manager, Paginatorclass CustomPaginator(Paginator):    per_page = 100    order_by = 'user_id'class UserManager(Manager[User]):    paginator_class = CustomPaginator```### Pagination model`Pagination` is a pydantic model that describes the structure of the pagination object to be returned.```pythonclass Pagination(BaseModel):    page: int    results: Union[Sequence, List]    total: int    has_prev: bool    has_next: bool```## Using with FastAPIAs `Manager` also uses pydantic models you can easily integrate it with FastAPI.For example, you can define search params in a manager `Params` model and reuse it as params for your search endpoint.```pythonfrom fastapi import FastAPIfrom fastapi_manager import Paginationfrom sqlalchemy.ext.asyncio import AsyncSessionfrom app.deps import get_dbapp = FastAPI()@app.get(&quot;/users&quot;)async def get_users(        params: UserManager.Params = Depends(UserManager.Params),        session: AsyncSession = Depends(get_db), page: int = 1) -&gt; Pagination:    return await UserManager.async_search(session, params, page)```</longdescription>
</pkgmetadata>