<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># objprint[![build](https://github.com/gaogaotiantian/objprint/workflows/build/badge.svg)](https://github.com/gaogaotiantian/objprint/actions?query=workflow%3Abuild)  [![coverage](https://img.shields.io/codecov/c/github/gaogaotiantian/objprint)](https://codecov.io/gh/gaogaotiantian/objprint)  [![pypi](https://img.shields.io/pypi/v/objprint.svg)](https://pypi.org/project/objprint/)  [![support-version](https://img.shields.io/pypi/pyversions/objprint)](https://img.shields.io/pypi/pyversions/objprint)  [![license](https://img.shields.io/github/license/gaogaotiantian/objprint)](https://github.com/gaogaotiantian/objprint/blob/master/LICENSE)  [![commit](https://img.shields.io/github/last-commit/gaogaotiantian/objprint)](https://github.com/gaogaotiantian/objprint/commits/master)A library that can print Python objects in human readable format## Install```pip install objprint```## Usage### opUse ```op()``` (or ```objprint()```) to print objects.```pythonfrom objprint import opclass Position:    def __init__(self, x, y):        self.x = x        self.y = yclass Player:    def __init__(self):        self.name = &quot;Alice&quot;        self.age = 18        self.items = [&quot;axe&quot;, &quot;armor&quot;]        self.coins = {&quot;gold&quot;: 1, &quot;silver&quot;: 33, &quot;bronze&quot;: 57}        self.position = Position(3, 5)op(Player())``````&lt;Player 0x7fe44e1e3070  .age = 18,  .coins = {'bronze': 57, 'gold': 1, 'silver': 33},  .items = ['axe', 'armor'],  .name = 'Alice',  .position = &lt;Position    .x = 3,    .y = 5  &gt;&gt;```You can print multiple objects just like print, except ``op`` will print them in separate lines```pythonop([1, 2], {'a': 1})``````[1, 2]{'a': 1}`````op`` will return the same object it prints, so you can do something like this```pythona = MyObject()# print the args inline with minumum changefunction_using_object(op(a))# the difference is more significant with complex expressions# original: function_using_object(a.f() + a.g())function_using_object(op(a.f() + a.g()))```It works on multiple objects as well, as it returns a tuple, you need to unpack it for functions```pythona = MyObject()function_using_object(*op(a.f(), a.g()))```### add_objprintIf you want to use ```print()``` to print your object, you can also use the class decorator```add_objprint``` to add ```__str__``` method for your class.```pythonfrom objprint import add_objprintclass Position:    def __init__(self, x, y):        self.x = x        self.y = y@add_objprintclass Player:    def __init__(self):        self.name = &quot;Alice&quot;        self.age = 18        self.items = [&quot;axe&quot;, &quot;armor&quot;]        self.coins = {&quot;gold&quot;: 1, &quot;silver&quot;: 33, &quot;bronze&quot;: 57}        self.position = Position(3, 5)# This will print the same thing as aboveprint(Player())```### objstrIf you want the ``str`` representation of the object, instead of printing it on the screen,you can use ``objstr`` function```pythonfrom objprint import objstrs = objstr(my_object)```### print moreThere are some optional information you can print with [config](###config).#### &quot;Public&quot; MethodsThere are no REAL public methods in python, here I simply meant you can print methods that do not start with ``__`` as there will bea lot of default magic methods and you don't want that.```pythonclass Player:    def attack(self, opponent):        passop(Player(), print_methods=True)``````&lt;Player 0x7fe44e1e3070  def attack(opponent)&gt;```As you can see, it will also print the method signature(without ``self`` argument).#### Line numbersYou can print execution info, including the function it's in, the file and the line number of the printing line.This is helpful for you to locate where this object is printed.```pythondef f():    op(Player(), line_number=True)f()``````f (my_script.py:29)&lt;Player 0x7f30e8cb1ac0  ...&gt;```### Argument namesYou can print the expression of the argument with `arg_name````pythonop(Player(), arg_name=True)``````Player():&lt;Player 0x7f495850a8d0  ...&gt;```### objjson``objprint`` supports print objects to json to make it easier to serialize an object.``objjson`` returns a jsonifiable object that can be dumped with ``json.dumps`````pythonfrom objprint import objjsonjson_obj = objjson(Player())print(json.dumps(json_obj, indent=2))``````{  &quot;.type&quot;: &quot;Player&quot;,  &quot;name&quot;: &quot;Alice&quot;,  &quot;age&quot;: 18,  &quot;items&quot;: [    &quot;axe&quot;,    &quot;armor&quot;  ],  &quot;coins&quot;: {    &quot;gold&quot;: 1,    &quot;silver&quot;: 33,    &quot;bronze&quot;: 57  },  &quot;position&quot;: {    &quot;.type&quot;: &quot;Position&quot;,    &quot;x&quot;: 3,    &quot;y&quot;: 5  }}```You can use ``op`` to print in json format directly with ``format=&quot;json&quot;``. You can pass in argument for ```json.dumps``````pythonop(Player(), format=&quot;json&quot;, indent=2)`````add_objprint`` also works with ``format=&quot;json``&quot;```python@add_objprint(format=&quot;json&quot;, indent=2)class Player:    pass```### Enable/Disable the printYou can disable prints from all the ``op()`` calls globally with ``enable`` config.```pythonfrom objprint import opop.disable()op([1, 2, 3])  # This won't print anythingop.enable()  # This could fix it!```Or you can use it for ``op()`` functions individually with some conditions```pythonop(obj, enable=check_do_print())```### attribute selectionYou can customize which attribute to print with name filters.``objprint`` will try to match the attribute name with ``attr_pattern`` regex. The default``attr_pattern`` is ``r&quot;(!_).*&quot;``, which means anything that does NOT start with an `_`.You can customize ``attr_pattern`` to select the attributes you want to print:```python# This will print all the attributes that do not start with __op(Player(), attr_pattern=r&quot;(!__).*&quot;)```You can also use ``include`` and ``exclude`` to specify attributes to print with regular expressionso ```objprint``` will only print out the attributes you are interested in.```pythonop(Player(), include=[&quot;name&quot;])``````&lt;Player  .name = 'Alice'&gt;``````pythonop(Player(), exclude=[&quot;.*s&quot;])``````&lt;Player 0x7fe44e1e3070  .name = 'Alice',  .age = 18,  .position = &lt;Position    .x = 3,    .y = 5  &gt;&gt;```If you specify both ``include`` and ``exclude``, it will do a inclusive check first, then filter out the attributesthat match exclusive check.```attr_pattern```, ```include``` and ```exclude``` arguments work on ```objprint```, ```objstr``` and ```@add_objprint```.### Register Custom Type FormatterYou can also customize how certain types of objects are displayed by registering a custom formatter function to transform an object of a specific type into a string. For example, you can print all integers in hexadecimal format by registering the ```hex()``` function for the ```int``` data type, or registering a custom ```lambda``` function. ```pythonfrom objprint import opop.register_formatter(int, hex)op.register_formatter(float, lambda x: f&quot;{round(x, 3)}&quot;)op(10)  # prints 0xaop(3.14159)  # prints 3.142```Alternatively, you can also register a custom formatter function using a decorator:```python@op.register_formatter(str)def custom_formatter(obj: str):    return f&quot;custom_print: {obj}&quot;op(&quot;hi&quot;)  # prints custom_print: hi```During registration, ```objprint``` will examine the specified object type, and raise a ```TypeError``` if an invalid object type is provided.When you finish using the custom formatters, you can unregister them with ```unregister_formatter()```.```pythonop.unregister_formatter(int, float, str)op(10)  # prints 10op(3.14159)  # prints 3.14159op(&quot;hi&quot;)  # prints hi```Or you can unregister everything by passing no argument to it.```pythonop.unregister_formatter()```The ```register_formatter()``` function also accepts an ```inherit``` argument (default ```True```) to dictate if the registered formatter should also apply to any derived classes of the object type.```pythonclass BaseClass:    name = 'A'class DerivedClass(BaseClass):    name = 'B'```With ```inherit=True```, derived class will share the same formatter registered under base class. ```pythondef base_formatter(obj: BaseClass) -&gt; str:    return f'Print {obj.name} with Base Class Formatter'op.register_formatter(BaseClass, base_formatter, inherit=True)op(DerivedClass())``````Print B with Base Class Formatter```With ```inherit=False```, derived class will use the default formatter provided by ```objprint```. ```python@op.register_formatter(BaseClass, inherit=False)def base_formatter(obj: BaseClass) -&gt; str:    return f'Print {obj.name} with Base Class Formatter'op(DerivedClass())``````&lt;DerivedClass 0x7fb42e8216a0  .name = 'B'&gt;```If a derived class inherits from multiple base classes, each with a registered formatter, the chosen formatter adheres to the Method Resolution Order (MRO) of the derived class.To check all the registered functions and their inheritance status, you can use the ```get_formatter()``` method. It returns a dictionary-like object that you can print for easy inspection.```pythonfmts = op.get_formatter()print(fmts)``````{&lt;class '__main__.BaseClass'&gt;: FormatterInfo(formatter=&lt;function base_formatter at 0x7feaf33d1f70&gt;, inherit=False)}```Please note that registering a formatter function with ```op``` will affect the output of ```objprint``` and ```objstr``` methods in the same way.### config```objprint``` formats the output based on some configs* ``config_name(default_value)`` - this config's explanation* ``enable(True)`` - whether to print, it's like a switch* ``depth(100)`` - how deep ```objprint``` goes into nested data structures* ``indent(2)`` - the indentation* ``width(80)`` - the maximum width a data structure will be presented as a single line* ``elements(-1)`` - the maximum number of elements that will be displayed, ``-1`` means no restriction* ``color(True)`` - whether to use colored scheme* ``line_number(False)`` - whether to print the ``function (filename:line_number)`` before printing the object* ``arg_name(False)`` - whether to print the argument expression before the argument value* ``skip_recursion(True)`` - whether skip printing recursive data, which would cause infinite recursion without ``depth`` constraint* ``honor_existing(True)`` - whether to use the existing user defined ``__repr__`` or ``__str__`` method* ``attr_pattern(r&quot;(!_).*&quot;)`` - the regex pattern for attribute selection* ``include([])`` - the list of attribute regex to do an inclusive filter* ``exclude([])`` - the list of attribute regex to do an exclusive filterYou can set the configs globally using ``config`` function```pythonfrom objprint import configconfig(indent=4)```Or if you don't want to mess up your name space```pythonfrom objprint import opop.config(indent=4)```Or you can do a one time config by passing the arguments into ``objprint`` function```pythonfrom objprint import opop(var, indent=4)```### installMaybe you don't want to import ``op`` in every single file that you want to use. You canuse ``install`` to make it globally accessible```pythonfrom objprint import op, install# Now you can use op() in any fileinstall()# This is the sameop.install()# You can specify a name for objprint()install(&quot;my_print&quot;)my_print(my_object)```## Bugs/RequestsPlease send bug reports and feature requests through [github issue tracker](https://github.com/gaogaotiantian/objprint/issues).## LicenseCopyright 2020-2023 Tian Gao.Distributed under the terms of the  [Apache 2.0 license](https://github.com/gaogaotiantian/objprint/blob/master/LICENSE).</longdescription>
</pkgmetadata>