<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/acondbs.svg)](https://badge.fury.io/py/acondbs) [![Test Status](https://github.com/simonsobs/acondbs/workflows/Test/badge.svg)](https://github.com/simonsobs/acondbs/actions?query=workflow%3ATest) [![codecov](https://codecov.io/gh/simonsobs/acondbs/branch/master/graph/badge.svg)](https://codecov.io/gh/simonsobs/acondbs)# AcondbsA GraphQL server for product DB## How to check out and run (for developers)### Prepare environmentCreate a virtual environment```bashpython -m venv venv```Enter the virtual environment```bashsource venv/bin/activate```Upgrade pip (optional)```bashpip install --upgrade pip```### Check outClone the repository from GitHub```bashgit clone git@github.com:simonsobs/acondbs.git```Install from the clone in the [editable mode](https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs).```bashpip install -e acondbs/[tests]```### ConfigureCreate an instance folder of Flask, where the config file and the SQLite DB file are stored. Check out an example instance folder from GitHub```bashgit clone git@github.com:TaiSakuma/acondbs-instance-example.git instance```Set environmental variables```bashexport FLASK_APP=&quot;acondbs:create_app('$PWD/instance/config.py')&quot;export FLASK_DEBUG=1```### Initialize database```bashflask init-db```An SQLite DB file has been created in the instance folder (`instance/product.sqlite3`). Tables were defined (The tables were empty. Only fields were defined. No data were inserted in the tables).### Load sample data to DB (optional)(Optional) Load sample data to the dababase.```bashflask import-csv acondbs/tests/sample/csv/```### RunRun with the Flask built-in server for the development. (Deployment options for proudction are descriped in the [Flask documentation](https://flask.palletsprojects.com/en/1.1.x/deploying/).)```bashflask run```The above command starts the built-in server that only allows accress from localhost. It starts the server at the default TCP port, usually `5000`.To allow the access from outside, use `--host=0.0.0.0` option. The TCP port can be specified by `--port` option. For example:```bashflask run --host=0.0.0.0 --port=5000```#### Access to the server with cURLNow, you can send GraphQL requests to the server, for example, as follows.```bashcurl -d &quot;query={allMaps { edges { node { name mapper } } }}&quot; localhost:5000/graphql```#### Access to the server with a web browserIf you access to the server with a web browser, it will show a graphical user interface *GraphiQL*: &lt;http://localhost:5000/graphql&gt;### Unit testMove to the repository```bashcd acondbs```Run the unit tests```bashpytest```Run the unit tests with coverage```bashpytest --cov```Generate the coverage report```bashcoverage html```The report can be found at `coverage_html_report/index.html`.</longdescription>
</pkgmetadata>