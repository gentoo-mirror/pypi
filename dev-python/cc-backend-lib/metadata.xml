<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CC Backend Library ![Build](https://github.com/prio-data/cc_backend_lib/actions/workflows/pypi.yml/badge.svg)This library contains several classes and data models that are useful whenwriting services that interact with other services in Conflict Cartographer. Inparticular, the modules `api_client` and `schema` respectively provide classesfor retrieving and modelling data from APIs.## Data retrievalData retrieval is offered via the `cc_backend_lib.dal.Dal` class. This class isinstantiated by passing several API clients: ```from cc_backend_lib.clients import predictions_client, scheduler_client, users_client, countries_clientfrom cc_backend_lib import dalcc_dal = dal.Dal(      predictions = predictions_client.PredictionsClient(...),      scheduler = scheduler_client.SchedulerClient(...),      users = users_client.UsersClient(...),      countries = countries_client.CountriesClient(...),   )```The class has several methods that offer access to data and summaries. See`help(Dal)`.  The `.participation_summary` method caches results for past(shift &lt; 0) time-periods for efficiency.## CachingA powerful caching decorator is provided that lets you decorate both sync andasync functions for caching. For using different kinds of backends or for otherkinds of customization (LRU, etc.), the caching decorator lets you pass acustom cache class. There are some provided cache classes, including one thatuses Redis: ```from cc_backend_lib.cache import redis_cache, cache@cache.cache(redis_cache.RedisBackend, host = &quot;...&quot;, expiry_time = 100)def my_slow_function(a,b,c):   ...# First time slowa = my_slow_function(1,2,3)# Second time fastb = my_slow_function(1,2,3)assert a == b```</longdescription>
</pkgmetadata>