<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Cauldron========Interactive computing for complex data processing, modeling and analysisin Python 3... image:: https://img.shields.io/pypi/v/cauldron-notebook.svg   :target: https://pypi.python.org/pypi/cauldron-notebook.. image:: https://anaconda.org/sernst/cauldron/badges/version.svg   :target: https://anaconda.org/sernst/cauldron.. image:: https://img.shields.io/pypi/pyversions/cauldron-notebook.svg   :target: https://pypi.python.org/pypi/cauldron-notebook.. image:: https://img.shields.io/badge/license-MIT-blue.svg   :target: https://raw.githubusercontent.com/sernst/cauldron/master/LICENSE.. image:: https://gitlab.com/swernst/cauldron/badges/master/pipeline.svg   :target: https://gitlab.com/swernst/cauldron/pipelines.. image:: https://coveralls.io/repos/github/sernst/cauldron/badge.svg   :target: https://coveralls.io/github/sernst/cauldron.. image:: https://codecov.io/gh/sernst/cauldron/branch/master/graph/badge.svg   :target: https://codecov.io/gh/sernst/cauldron.. image:: https://gitlab.com/swernst/cauldron/badges/master/coverage.svg   :target: https://gitlab.com/swernst/cauldron/pipelines.. image:: https://badges.gitter.im/gitterHQ/gitter.svg   :target: https://gitter.im/cauldron-notebook/LobbyMajor New Release-----------------  Heads up as Cauldron v1.0.0 has just been released with a new web-based  user interface. More detailed documentation on how the new UI works can  be found at http://www.unnotebook.comThe rest of this documentation pertains to the Cauldron command lineinterface. For more general information about Cauldron, including howto use the UI, please visit: http://www.unnotebook.com- `Installation`_- `Getting Started`_- `Example Projects`_- `Tutorial: First Project`_- `Docker`_Installation------------The latest release of Cauldron is available from both PyPi::    $ pip install cauldron-notebookand Anaconda::   $ conda install -c sernst cauldronIf you want to use the latest developments, you can install directly from the Githubpage instead of from PyPi::    $ pip install git+https://github.com/sernst/cauldron.gitYou can also install in development mode if you want to manage updates using gitinstead of pip. To install in that way, clone a local copy of this repositoryto your local machine and, inside a terminal, ``cd`` into your local copydirectory and run the command::    $ python3 setup.py developOr in an Anaconda installation using its develop command::   $ conda develop .which must be executed in the root project directory of your local copy ofCauldron.Getting Started---------------Cauldron can be used as either through its Command Line Interface (CLI) or withthe Cauldron web-based UI. For more information about the UI visithttp://www.unnotebook.com for examples and documentation. The rest of thisREADME describes using Cauldron directly from the command line.Cauldron is a shell-based program you start from a terminal. For installationsthat support python script installation you can start Cauldrononce the installation is complete with the ``cauldron`` command::    $ cauldronor on Windows using the ``cauldron.exe`` command::    % cauldron.exeFor installations where the installation of scripts was not permitted, you canstart Cauldron from within a Python shell. To do this import cauldron andrun the ``cauldron.run_shell()`` function as follows::    &gt;&gt;&gt; import cauldron    &gt;&gt;&gt; cauldron.run_shell()Once started, the Cauldron shell provides all of the functionality you need tomanage your analysis projects through a collection of commands. To see a listof available commands and their basic descriptions use the ``?`` or ``help``command on the Cauldron prompt::    &lt;&gt;: ?or::    &lt;&gt;: helpFor more detailed information on a specific command use the ``help`` commandalong with the name of the command you wish to learn more about. For example,to get help on the ``open`` command, you would enter::    &lt;&gt;: help openon the Cauldron prompt.Example Projects----------------Cauldron comes bundled with a few example projects for demonstration purposes.To open one of these projects, use the command::    &lt;&gt;: open @examples:[EXAMPLE_PROJECT_NAME]where ``[EXAMPLE_PROJECT_NAME]`` is the name of an existing example project.The ``@examples:`` prefix is an alias in Cauldron that resolves to the pathwhere the example files are stored. You can also create your own aliases,which will be explained in detail later.Like all commands in Cauldron, the open command supports tab auto-completion.If you enter the beginning of the command above::    &lt;&gt;: open @examples:and hit the tab key with the cursor at the end of the line, Cauldron will giveyou a list of the example project subdirectories.A good example to start would be Cauldron's *hello_cauldron*::    &lt;&gt;: open @examples:hello_cauldron/Once this command is run, the hello_cauldron project will be opened and readiedfor you to run. The Cauldron shell prompt updates to reflect the open project.Instead of ``&lt;&gt;:``, which signifies no open project, the prompt should now be``&lt;hello_cauldron&gt;:``.If you now enter the ``run`` command without any arguments, all steps (cells)in the project will run::    &lt;hello_cauldron&gt;: runOnce complete, you can view the current state of the notebook display with theshow command::    &lt;hello_cauldron&gt;: showwhich opens the current project display file in your default browser. When youare finished working on a project, you use the close to command::   &lt;hello_cauldron&gt;: closeThis empties all of the information Cauldron has been storing for your projectin memory, and takes you back to the initial command prompt where you started::   &lt;&gt;:Tutorial: First Project-----------------------This tutorial walks through creating your first project. It mirrors the**@example:hello_cauldron** project that comes installed with Cauldron.Create New Project~~~~~~~~~~~~~~~~~~To create your first project run the Cauldron shell command::    &lt;&gt;: create hello_cauldron @home:For more details about the create command, use the Cauldron shell command::    &lt;&gt;: help createThe create command takes two arguments:#. The name of your new project (``hello_cauldron`` in the example above)#. The absolute path to the directory where the project will be saved. In the   example above, the ``@home:`` argument is a shortcut to Cauldron's default   home directory, which is ~/cauldron/.When the example create command above is executed, a *hello_cauldron* projectwill be created in the directory *~/cauldron/hello_cauldron/*, with thescaffolding for the project already written. The create command alsoimmediately opens the new project in the shell.Add First Code Step~~~~~~~~~~~~~~~~~~~Now that the project has been created, you need to add some code to it. Todo that, use the ``steps add`` command::    &lt;hello_cauldron&gt;: steps add create_data.pyThis will create a new step called *S01-create_data.py* in your projectdirectory and add it to the Cauldron project. Notice that the name you gavethe step and the one actual step name are different. There's an *S01-* prefixadded to the file. This prefix is added automatically by Cauldron to help youorganize your files. You can disable this feature when you create a project ifyou really want to manage the names all yourself, but we'll get into that inan advanced tutorial.The step file you created is ready to be modified. Open the*S01-create_data.py* step file in your choice of Python code editor. You'llfind the file in the project directory, which is *~/cauldron/hello_cauldron/*.Add the following code to the *S01-create_data.py* file:.. code-block:: python3    import numpy as np    import pandas as pd    import cauldron as cd    df = pd.DataFrame(        np.random.randn(10, 5),        columns=['a', 'b', 'c', 'd', 'e']    )    cd.display.header('Random Data Frame:')    cd.display.table(df)    cd.shared.df = dfOnce you've saved that code to the *S01-create_data.py* file, you can run yourproject using the ``run`` command::    &lt;hello_cauldron&gt;: runThen use the ``show`` command to see the results::    &lt;hello_cauldron&gt;: showThe project display file will open in your default browser.Add Another Step~~~~~~~~~~~~~~~~Now we'll add another code step to plot each column in our DataFrame. Onceagain use the steps command::    &lt;hello_cauldron&gt;: steps add plot_data.pyOpen the *S02-plot_data.py* step file and add the following code:.. code-block:: python3    import matplotlib.pyplot as plt    import cauldron as cd    df = cd.shared.df    for column_name in df.columns:        plt.plot(df[column_name])    plt.title('Random Plot')    plt.xlabel('Indexes')    plt.ylabel('Values')    cd.display.pyplot()We used matplotlib for this tutorial, but Cauldron also supports Seaborn,Bokeh, Plotly or any other Python plotting library that can produce an HTMLoutput. There are Cauldron example projects showing how to plot using each ofthese libraries.Now run the project again::    &lt;hello_cauldron&gt;: runYou'll notice that the shell output looks like::    === RUNNING ===    [S01-create_data.py]: Nothing to update    [S02-plot_data.py]: UpdatedThe *S01-create_data.py* step was not run because it hasn't been modified sincethe last time you executed the ``run`` command. Just like other notebooks, theresults of running a step (cell) persist until you close the project and do notneed to be updated each time. Cauldron watches for changes to your files andonly updates steps if the files have been modified, or an early step wasmodified that may affect their output.Now you can view the updated project display simply by refreshing your browser.However, if you already closed the project display browser window, you can showit again at any time with the ``show`` command.And that's that. You've successfully created your first Cauldron project. Youcan close your project with the ``close`` command::   &lt;hello_cauldron&gt;: closeOr, if you want to exit the Cauldron shell at any time, use the ``exit``command::   &lt;&gt;: exitSee Cauldron's documentation at http://www.unnotebook.com/docs/ for moreinformation.Docker------Cauldron supports running in docker containers for both local and remoteworkflows. There are 3 officially supported docker containers available at:https://hub.docker.com/r/swernst/cauldron/tags/They are:- ``standard``: Includes the Python 3.6+ distributions in an Ubuntu environment.- ``conda``: Includes the full Anaconda distribution of Python 3.6+ built upon Anaconda's official docker image.- ``miniconda``: Includes the slimmed-down mini Anaconda distribution of Python 3.6+ built upon Anaconda's official docker image.In all three cases, Cauldron is pre-installed with dependencies and the defaultcommand for each container is to start the Cauldron kernel on the exposed port5010. One of these containers can be pulled using the docker pull command::   $ docker pull swernst/cauldron:current-standardIf you do not specify a specific tag, the latest standard image will be used.Once the image has been pulled, you can start a Cauldron kernel::   $ docker run -d --rm -p 5010:5010 swernst/cauldron:current-standardAfter the container starts, you can access the kernel through the exposed 5010port. If you are using the Cauldron UI, you can connect to thiscontainer locally by specifying the local kernel URL, ``http://127.0.0.1:5010``,as connection argument when starting the ui, .The Cauldron command shell also allows you drive the kernel by connecting to itfrom a locally running Cauldron shell. To do this, you use the ``connect``command::   &lt;&gt;: connect http://127.0.0.1:5010Once connected, all shell commands you issue, e.g. opening a project, will berelayed to the kernel. All project files will be synchronized between thelocal environment and the kernel's environment. This means you can interactwith a local project exactly like you normally would, but all of the executionwill happen in the kernel's environment, not your local one.Windows Development-------------------If you are developing and testing on Windows, you will need to install ``pyreadline3``for the test suite to run as the ``readline`` standard library package is not availableon Windows.</longdescription>
</pkgmetadata>