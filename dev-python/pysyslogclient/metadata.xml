<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pysyslogclientSyslog client for Python 3 (RFC 3164/5424) for UNIX and Windows## DescriptionSyslog client following* RFC3164 (https://www.ietf.org/rfc/rfc3164.txt)* RFC5424 (https://www.ietf.org/rfc/rfc5424.txt)with UNIX and Windows support. TCP and UDP transport is possible.If TCP is used, on every log message, that is send to the specified server,and a connection error occured, the message will be dismissed anda reconnect will be tried for the next message.## UsageA small CLI client is implemented in *client.py*. To call it, run```python -m pysyslogclient.cli```### Startup client To setup the client for RFC 5424 over TCP to send to SERVER:PORT:```import pysyslogclientclient = pysyslogclient.SyslogClientRFC5424(SERVER, PORT, proto=&quot;TCP&quot;)```or for RFC3164:```import SyslogClientclient = pysyslogclient.SyslogClientRFC3164(SERVER, PORT, proto=&quot;TCP&quot;)```### Log a messsageLog the message &quot;Hello syslog server&quot; with standard severity *INFO* as facility*USER*. As program name *SyslogClient* the PID of the called python interpreteris used.```client.log(&quot;Hello syslog server&quot;)```To specify more options, call log with more arguments. For example to log athe message as program *Logger* with PID *1* as facility *SYSTEM* with severity*EMERGENCY*, call log the following way:```client.log(&quot;Hello syslog server&quot;,facility=pysyslogclient.FAC_SYSTEM,severity=pysyslogclient.SEV_EMERGENCY,program=&quot;Logger&quot;,pid=1)```### ShutdownTo disconnect, call```client.close()```</longdescription>
</pkgmetadata>