<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># niet[![Build Status](https://travis-ci.org/openuado/niet.svg?branch=master)](https://travis-ci.org/openuado/niet)![PyPI](https://img.shields.io/pypi/v/niet.svg)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/niet.svg)![PyPI - Status](https://img.shields.io/pypi/status/niet.svg)[![Downloads](https://pepy.tech/badge/niet)](https://pepy.tech/project/niet)[![Downloads](https://pepy.tech/badge/niet/month)](https://pepy.tech/project/niet/month)Get data from YAML file directly in your shell.---&gt; How to easily parse and retrieve data from YAML file in our shell?The previous question, few years ago, led us to the development of niet.Indeed, at that time, we needed a way to store and retrieve data for our ownneeds. We created niet to read those data. The goal was to develop a toolsthat will allow us to standardize how we parse YAML locally or in our CIpipelines. We wanted something reusable and easily distribuable. Niet was born.Niet is like [xmllint](http://xmlsoft.org/xmllint.html) or[jq](https://stedolan.github.io/jq/) but for YAML and JSON data -you can use it to slice and filter and map and transform structured data.You can easily retrieve data by using simple expressions or usingxpath advanced features to access non-trivial data.You can easily convert YAML format into JSON format and vice versa.Niet is writen in Python so you can install it from a package manager (fromPyPi) or directly by cloning this repository - no specific system rights areneeded to install it.## Features- Extract elements by using xpath syntax- Extract values from json format- Extract values from yaml format- Automaticaly detect format (json/yaml)- Read data from a web resource- Read data from file or pass data from stdin- Format output values- Format output to be reused by shell `eval`- Convert YAML to JSON- Convert JSON to YAML## Install or Update niet```sh$ pip install -U niet```## Requirements- Python 3.6 or higher## Supported versionsSince niet 2.0 the support of python 2.7 have been dropped so ifif you only have python 2.7 at hands then you can use previous version (lowerto 2.0) but you should consider first that the no support will be given onthese versions (no bugfix, no new feature, etc). If you report an issue oror propose a new feature then they will be addressed only for current orhigher version.## Usage### Help and options```shell$ niet --helpusage: niet [-h] [-f {json,yaml,eval,newline,ifs,squote,dquote,comma}] [-s] [-v]            object [file]Read data from YAML or JSON filepositional arguments:  object                Path to object separated by dot (.). Use '.' to get                        whole file. eg: a.b.c  file                  Optional JSON or YAML filename. If not provided niet                        read from stdinoptional arguments:  -h, --help            show this help message and exit  -f {json,yaml,eval,newline,ifs,squote,dquote,comma}, --format {json,yaml,eval,newline,ifs,squote,dquote,comma}                        output format  -i, --in-place        Perform modification in place. Will so alter read file  -o OUTPUT_FILE, --output OUTPUT_FILE                        Print output in a file instead of stdout (surcharged                        by infile parameter if set)  -s, --silent          silent mode, doesn't display message when element was                        not found  -v, --version         print the Niet version number and exit (also                        --version)  --debug               Activate the debug mode (based on pdb)output formats:  json          Return object in JSON  yaml          Return object in YAML  eval          Return result in a string evaluable by a shell eval command as an input  newline       Return all elements of a list in a new line  ifs           Return all elements of a list separated by IFS env var  squote        Add single quotes to result  dquote        Add double quotes to result  comma         Return all elements separated by commas```### With Json from stdin```shell$ echo '{&quot;foo&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;Fizz&quot;, &quot;4&quot;, &quot;Buzz&quot;]}}' | niet fizz.buzz12Fizz4Buzz$ echo '{&quot;foo&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;Fizz&quot;, &quot;4&quot;, &quot;Buzz&quot;]}}' | niet fizz.buzz -f squote'1' '2''Fizz' '4' 'Buzz'$ echo '{&quot;foo&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;fizz&quot;, &quot;4&quot;, &quot;buzz&quot;]}}' | niet . -f yamlfizz:  buzz:  - '1'  - '2'  - fizz  - '4'  - buzzfoo: bar$ echo '{&quot;foo&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;]}}' | niet &quot;fizz.buzz[2]&quot;two$ echo '{&quot;foo&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;]}}' | niet -f dquote &quot;fizz.buzz[0:2]&quot;&quot;zero&quot; &quot;one&quot;$ echo '{&quot;foo&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;]}}' | niet -f dquote &quot;fizz.buzz[:3]&quot;&quot;zero&quot; &quot;one&quot; &quot;two&quot;```### With YAML fileConsider the yaml file with the following content:```yaml# /path/to/your/file.yamlproject:    meta:        name: my-project    foo: bar    list:        - item1        - item2        - item3    test-dash: value```You can [download the previous example](https://gist.githubusercontent.com/4383/53e1599663b369f499aa28e27009f2cd/raw/389b82c19499b8cb84a464784e9c79aa25d3a9d3/file.yaml) locally for testing purpose or use the command line for this:```shellwget https://gist.githubusercontent.com/4383/53e1599663b369f499aa28e27009f2cd/raw/389b82c19499b8cb84a464784e9c79aa25d3a9d3/file.yaml```You can retrieve data from this file by using niet like this:```sh$ niet &quot;.project.meta.name&quot; /path/to/your/file.yamlmy-project$ niet &quot;.project.foo&quot; /path/to/your/file.yamlbar$ niet &quot;.project.list&quot; /path/to/your/file.yamlitem1 item2 item3$ # assign return value to shell variable$ NAME=$(niet &quot;.project.meta.name&quot; /path/to/your/file.yaml)$ echo $NAMEmy-project$ niet project.'&quot;test-dash&quot;' /path/to/your/file.jsonvalue```### With JSON fileConsider the json file with the following content:```json{    &quot;project&quot;: {        &quot;meta&quot;: {            &quot;name&quot;: &quot;my-project&quot;        },        &quot;foo&quot;: &quot;bar&quot;,        &quot;list&quot;: [            &quot;item1&quot;,            &quot;item2&quot;,            &quot;item3&quot;        ],        &quot;test-dash&quot;: &quot;value&quot;    }}```You can [download the previous example](https://gist.githubusercontent.com/4383/1bab8973474625de738f5f6471894322/raw/0048cd2310df2d98bf4f230ffe20da8fa615cef3/file.json) locally for testing purpose or use the command line for this:```shellwget https://gist.githubusercontent.com/4383/1bab8973474625de738f5f6471894322/raw/0048cd2310df2d98bf4f230ffe20da8fa615cef3/file.json```You can retrieve data from this file by using niet like this:```sh$ niet &quot;project.meta.name&quot; /path/to/your/file.jsonmy-project$ niet &quot;project.foo&quot; /path/to/your/file.jsonbar$ niet &quot;project.list&quot; /path/to/your/file.jsonitem1 item2 item3$ # assign return value to shell variable$ NAME=$(niet &quot;project.meta.name&quot; /path/to/your/file.json)$ echo $NAMEmy-project$ niet project.'&quot;test-dash&quot;' /path/to/your/file.jsonvalue```### Object IdentifiersAn identifier is the most basic expression and can be used to extract a singleelement from a JSON/YAML document. The return value for an identifier isthe value associated with the identifier. If the identifier does notexist in the JSON/YAML document, than niet display a specific message andreturn the error code `1`, example:```sh$ echo '{&quot;foo&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]}}' | niet fizz.gogoElement not found: fizz.gogo$ echo $?1```See the [related section](#deal-with-errors) for more info on how to manageerrors with `niet`.Niet is based on `jmespath` to find results so for complex research you canrefer to the [jmespath specifications](http://jmespath.org/specification.html#identifiers)to use identifiers properly.If you try to search for an identifier who use some dash you need to surroundyour research expression with simple and double quotes, examples:```sh$ echo '{&quot;foo-biz&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;]}}' | niet -f dquote '&quot;foo-biz&quot;'bar$ echo '{&quot;key-test&quot;: &quot;value&quot;}' | niet '&quot;key-test&quot;'value```However, `niet` will detect related issues and surround automatically youridentifier if `jmespath` fail to handle it.Hence, the following examples will return similar results than the previousexamples:```sh$ echo '{&quot;foo-biz&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;]}}' | niet -f dquote foo-bizbar$ echo '{&quot;key-test&quot;: &quot;value&quot;}' | niet key-testvalue```If your object is not at the root of your path, an example is available in`tests/sample/sample.json`, then you need to only surround the researchedidentifier like this `project.'&quot;test-dash&quot;'````json{    &quot;project&quot;: {        &quot;meta&quot;: {            &quot;name&quot;: &quot;my-project&quot;        },        &quot;foo&quot;: &quot;bar&quot;,        &quot;list&quot;: [            &quot;item1&quot;,            &quot;item2&quot;,            &quot;item3&quot;        ],        &quot;test-dash&quot;: &quot;value&quot;    }}```Example:```shniet project.'&quot;test-dash&quot;' tests/sample/sample.json```Further examples with [`jmespath` identifiers](http://jmespath.org/specification.html#examples).### Output#### StdoutBy default, niet print the output on stdout. #### Save output to a fileIt if possible to pass a filename using -o or --output argument to writesdirectly in a file. This file will be created if not exists or will bereplaced if already exists.#### In-file modificationIt is possible to modify directly a file using -i or --in-place argument. This will replacethe input file by the output of niet command. This can be used to extract some data of a file orreindent a file.### Output formats You can change the output format using the -f or --format optional argument. By default, niet detect the input format and display complex objectsin the same format. If the object is a list or a value, newline outputformat will be used.Output formats are:   - ifs  - squote  - dquote  - newline  - yaml  - json#### ifsIfs output format print all values of a list or a single value in one line.All values are separated by the content of IFS environment variable if defined,space otherwise.Examples (consider the previous [YAML file example](#with-yaml-file)):```shell$ IFS=&quot;|&quot; niet .project.list /path/to/your/file.yaml -f ifsitem1|item2|item3$ IFS=&quot; &quot; niet .project.list /path/to/your/file.yaml -f ifsitem1 item2 item3$ IFS=&quot;@&quot; niet .project.list /path/to/your/file.yaml -f ifsitem1@item2@item3```This is usefull in a shell for loop,but your content must, of course, don't contain IFS value:```shellOIFS=&quot;$IFS&quot;IFS=&quot;|&quot;for i in $(niet .project.list /path/to/your/file.yaml -f ifs); do    echo ${i}doneIFS=&quot;${OIFS}&quot;```Previous example provide the following output:```shitem1item2item3```For single quoted see [squote](#squote) ouput or [dquote](#dquote) double quoted output with IFS#### squoteSquotes output format print all values of a list or a single value in one line.All values are quoted with single quotes and are separated by IFS value.Examples (consider the previous [YAML file example](#with-yaml-file)):```shell$ # With the default IFS$ niet .project.list /path/to/your/file.yaml -f squote'item1' 'item2' 'item3'$ # With a specified IFS$ IFS=&quot;|&quot; niet .project.list /path/to/your/file.yaml -f squote'item1'|'item2'|'item3'```#### dquoteDquotes output format print all values of a list or a single value in one line.All values are quoted with a double quotes and are separated by IFS value.Examples (consider the previous [YAML file example](#with-yaml-file)):```shell$ # With the default IFS$ niet .project.list /path/to/your/file.yaml -f dquote'item1' 'item2' 'item3'$ # With a specified IFS$ IFS=&quot;|&quot; niet .project.list /path/to/your/file.yaml -f dquote&quot;item1&quot;|&quot;item2&quot;|&quot;item3&quot;```#### newline`newline` output format print one value of a list or a single value per line.The `newline` format is mostly usefull with shell while read loops andwith script interactions.Example:```shwhile read value: do    echo $valuedone &lt; $(niet --format newline project.list your-file.json)```#### comma`comma` output format print results on the same line and separated by commas.The `comma` format allow you to format your outputs to consume your resultswith other commands lines interfaces. By example some argument parserallow you to pass multi values for the same parameter (the[beagle command](https://beagle-hound.readthedocs.io/en/latest/) perexample allow you to[repeat the `--repo` option](https://beagle-hound.readthedocs.io/en/latest/cli/index.html#cmdoption-beagle-search-repo)).Example of integration with beagle and shell:```sh$ OSLO_PROJECTS_URL=https://raw.githubusercontent.com/openstack/governance/master/reference/projects.yaml$ beagle search \    -f link \    --repo $(niet &quot;oslo.deliverables.*.repos[0]&quot; ${OSLO_PROJECTS_URL} -f comma) 'venv'```The previous command will return all the links of fileswho contains `venv` on the openstack oslo's scope of projects (pbr,taskflow, oslo.messaging, etc).Else another with a more reduced scope on openstack oslo's projects:```sh$ niet &quot;oslo.deliverables.*.repos[0][?contains(@, \`oslo\`) == \`true\`]&quot; \    https://raw.githubusercontent.com/openstack/governance/master/reference/projects.yaml \    -f commaopenstack/oslo-cookiecutter,openstack/oslo-specs,openstack/oslo.cache,openstack/oslo.concurrency,openstack/oslo.config,openstack/oslo.context,openstack/oslo.db,openstack/oslo.i18n,openstack/oslo.limit,openstack/oslo.log,openstack/oslo.messaging,openstack/oslo.middleware,openstack/oslo.policy,openstack/oslo.privsep,openstack/oslo.reports,openstack/oslo.rootwrap,openstack/oslo.serialization,openstack/oslo.service,openstack/oslo.tools,openstack/oslo.upgradecheck,openstack/oslo.utils,openstack/oslo.versionedobjects,openstack/oslo.vmware,openstack/oslotest```In the previous example we retrieve only the projects repos who contains`oslo` in their names, so other projects like `taskflow`, `pbr`, etc willbe ignored.#### evalEval output format allow you to eval output string to initialize shellvariable generated from your JSON/YAML content.You can intialize shell variables from your entire content, example:```sh$ echo '{&quot;foo-biz&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;]}}' | niet -f eval . foo_biz=&quot;bar&quot;;fizz__buzz=( zero one two three )$ eval $(echo '{&quot;foo-biz&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;]}}' | niet -f eval .)$ echo ${foo_biz}bar$ echo ${fizz__buzz}zero one two three$ eval $(echo '{&quot;foo-biz&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;]}}' | niet -f eval '&quot;foo-biz&quot;'); echo ${foo_biz}bar$ echo '{&quot;foo-biz&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;]}}' | niet -f eval fizz.buzzfizz_buzz=( zero one two three );```Parent elements are separated by `__` by example the `fizz.buzz` elementwill be represented by a variable named `fizz__buzz`. You need to considerthat when you call your expected variables.Also you can initialize some shell array from your content and loop over ina shell maner:```sh$ eval $(echo '{&quot;foo-biz&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;]}}' | niet -f eval fizz.buzz)$ for el in ${fizz_buzz}; do echo $el; donezeroonetwothree``` #### yamlYaml output format force output to be in YAML regardless the input file format.#### jsonJson output format force output to be in JSON regardless the input file format.### Read data from a web resourceNiet allow you to read data (json/yaml) from a web resource accessible by usingthe HTTP protocole (introduced in niet 2.1).This can be done by passing an url to niet which refer to a raw content (jsonor yaml).Here is some examples with the [openstack governance's projects data](https://github.com/openstack/governance/blob/master/reference/projects.yaml):```sh$ # List all the oslo projects repos (https://wiki.openstack.org/wiki/Oslo)$ niet &quot;oslo.deliverables.*.repos[0]&quot; \    https://raw.githubusercontent.com/openstack/governance/master/reference/projects.yamlopenstack/automatonopenstack/castellan...openstack/debtcollector...openstack/futuristopenstack/oslo.cacheopenstack/oslo.concurrencyopenstack/oslo.configopenstack/oslo.contextopenstack/oslo.dbopenstack/oslo.i18nopenstack/oslo.limitopenstack/oslo.logopenstack/oslo.messagingopenstack/oslo.middlewareopenstack/oslo.policy...openstack/oslo.serviceopenstack/osprofileropenstack/pbr...openstack/stevedoreopenstack/taskflowopenstack/toozopenstack/whereto$ niet oslo.service \    https://raw.githubusercontent.com/openstack/governance/master/reference/projects.yamlCommon libraries$ # Get the openstack oslo's mission$ niet oslo.mission \    https://raw.githubusercontent.com/openstack/governance/master/reference/projects.yamlTo produce a set of python libraries containing code shared by OpenStack projects.The APIs provided by these libraries should be high quality, stable, consistent,documented and generally applicable.$ eval $(niet oslo.service \    https://raw.githubusercontent.com/openstack/governance/master/reference/projects.yaml -f eval) &amp;&amp; \    test &quot;${oslo_service}&quot; = &quot;Common libraries&quot;$ # Get the name of the oslo PTL$ eval $(niet oslo.ptl.name \    https://raw.githubusercontent.com/openstack/governance/master/reference/projects.yaml -f eval)$ echo &quot;${oslo_ptl_name}&quot; # now display your evaluated result$ # Convert original distant yaml file into json$ niet . https://raw.githubusercontent.com/openstack/governance/master/reference/projects.yaml -f json```For further examples of filters and selections please take a look to[the jmespath's doc](https://jmespath.org/examples.html).### Result not foundBy default when no results was found niet display a specific message and returnthe error code `1`, example:```sh$ echo '{&quot;foo&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]}}' | niet fizz.gogoElement not found: fizz.gogo$ echo $?1```You can avoid this behavior by passing niet into a silent mode.Silent mode allow you to hide the specific message error but continue to returna status code equal to `1` when the key was not found.You can use the silent mode by using the flag `-s/--silent`, example:```sh$ echo '{&quot;foo&quot;: &quot;bar&quot;, &quot;fizz&quot;: {&quot;buzz&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]}}' | niet fizz.gogo -s$ echo $?1```### Deal with errorsWhen your JSON file content are not valid niet display an error and exitwith return code `1`You can easily protect your script like this:```shPROJECT_NAME=$(niet project.meta.name your-file.yaml)if [ &quot;$?&quot; = &quot;1&quot; ]; then    echo &quot;Error occur ${PROJECT_NAME}&quot;else    echo &quot;Project name: ${PROJECT_NAME}&quot;fi```## ExamplesYou can try niet by using the samples provided with the project sources code.&gt; All the following examples use the sample file available in niet sources codeat the following location `tests/samples/sample.yaml`.Sample example:```yaml# tests/samples/sample.yamlproject:    meta:        name: my-project    foo: bar    list:        - item1        - item2        - item3```### Extract a single value Retrieve the project name:```sh$ niet project.meta.name tests/samples/sample.yamlmy-project```### Complexe searchConsider the following content:```$ cat /var/lib/libvirt/dnsmasq/virbr0.status[  {    &quot;ip-address&quot;: &quot;192.168.122.113&quot;,    &quot;mac-address&quot;: &quot;52:54:00:91:14:02&quot;,    &quot;hostname&quot;: &quot;rhel79&quot;,    &quot;expiry-time&quot;: 1644251254  },  {    &quot;ip-address&quot;: &quot;192.168.122.162&quot;,    &quot;mac-address&quot;: &quot;52:54:00:23:37:ed&quot;,    &quot;hostname&quot;: &quot;satellite&quot;,    &quot;expiry-time&quot;: 1644251837  }]```Here we want to retrieve the value of the ip-address field when the hostnameis equal to `satellite`. The following command will allow you to get thisvalue:```sh$ sed 's/ip/_/g' /var/lib/libvirt/dnsmasq/virbr0.status | niet &quot;[?hostname=='satellite'].ip&quot;192.168.122.162```You should notice that first we replace `-` by `_` by using the sedcommand. We do that because `jmespath`, the underlying library used by `niet`, poorly handle key that contain `-`. We chosen to replace all - by _ to avoidany issues elsewhere on the fileHere is an exemple of an automated ssh connection in a kvm virtualised labenvironment by looking for vmname in dhcp file with `niet` and performing thessh connection to the server even if its ip changed.The ssh connection here can be performed with this command:```shssh -o ProxyCommand='nc $(sed 's/-/_/g' /var/lib/libvirt/dnsmasq/virbr0.status | niet &quot;[?hostname=='''%h'''].ip_address&quot;) %p' root@rhel79```Tips - to ease that use you can for example set this `.ssh/config` entry:```host lab-*user rootProxyCommand /usr/bin/nc $(sed 's/-/_/g' /var/lib/libvirt/dnsmasq/virbr0.status | niet &quot;[?hostname=='$(echo %h | cut -d'-' -f2 )'].ip_address&quot;) %p```And then perform a `ssh lab-rhel79` or a `ssh lab-satellite` to join all VMsfrom your lab, by the hostname prefixed by `lab-`.### Extract a list and parse it in shellDeal with list of items```sh$ for el in $(niet project.list tests/samples/sample.yaml); do echo ${el}; doneitem1item2item3```Also you can `eval` your `niet` output to setput some shell variablesthat you can reuse in your shell scripts, the following example is similar tothe previous example but make use of the eval ouput format (`-f eval`):```sh$ eval $(niet -f eval project.list tests/samples/sample.yaml)$ for el in ${project__list}; do echo $el; donezeroonetwothree```### Extract a complex object and parse it in shellExtract the object as JSON to store it in shell variable :```shell$ project=&quot;$(niet -f json .project tests/samples/sample.yaml)&quot;```Then parse it after in bash in this example:```shell$ niet .meta.name &lt;&lt;&lt; $projectmy-project```### Transform JSON to YAMLWith niet you can easily convert your JSON to YAML```shell$ niet . tests/samples/sample.json -f yamlproject:  foo: bar  list:  - item1  - item2  - item3  meta:    name: my-project```### Transform YAML to JSONWith niet you can easily convert your YAML to JSON```shell$ niet . tests/samples/sample.yaml -f json{    &quot;project&quot;: {        &quot;meta&quot;: {            &quot;name&quot;: &quot;my-project&quot;        },        &quot;foo&quot;: &quot;bar&quot;,        &quot;list&quot;: [            &quot;item1&quot;,            &quot;item2&quot;,            &quot;item3&quot;        ]    }}```### Indent JSON fileThis is an example of how to indent a JSON file :```shell$ niet . tests/samples/sample_not_indented.json {    &quot;project&quot;: {        &quot;meta&quot;: {            &quot;name&quot;: &quot;my-project&quot;        },        &quot;foo&quot;: &quot;bar&quot;,        &quot;list&quot;: [            &quot;item1&quot;,            &quot;item2&quot;,            &quot;item3&quot;        ],        &quot;test-dash&quot;: &quot;value&quot;    }}```## TipsYou can pass your search with or without quotes like this:```sh$ niet project.meta.name your-file.yaml$ niet &quot;project.meta.name&quot; your-file.yaml```You can execute `niet` step by step by using the debug mode. It will allowyou to inspect your execution during your debug sessions.## ContributeIf you want to contribute to niet [please first read the contribution guidelines](CONTRIBUTING.md)## LicenceThis project is under the MIT License.[See the license file for more details](LICENSE)Henry Tang &lt;henryykt@gmail.com&gt;Hervé Beraud &lt;hberaud@redhat.com&gt;Hervé Beraud &lt;herveberaud.pro@gmail.com&gt;Sebastien Boyron &lt;sebastien@boyron.eu&gt;Sébastien Boyron &lt;sboyron@localhost.localdomain&gt;dj4ngo &lt;sebastien@boyron.eu&gt;rechthemoon &lt;rechthemoon@gmail.com&gt;</longdescription>
</pkgmetadata>