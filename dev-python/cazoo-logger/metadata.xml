<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Intro, in which opinions are had--------------------------------Cazoo-Logger is a deeply opinionated structured logger for Python on AWS Lambda.Cazoo-Logger owes a debt to `aws_lambda_logger`_ which is both less opinionated, and probaby better suited to your particular use-case than this library. Go check it out.Basic Usage-----------The Cazoo Logger module exposes a single function `config` that sets up the logger for use.&gt;&gt;&gt; import cazoo_logger&gt;&gt;&gt; cazoo_logger.config()By default this configures the root logger at INFO level, writing to a special JSON formatter.To obtain a logger instance, call the appropriate fromContext function with your incoming event and context:&gt;&gt;&gt; def handler(event, context):...     logger = cazoo_logger.fromContext(event, context)...     logger.info('sup?')...This will result in well-formatted json messages with a documented schema.::  {      &quot;msg&quot;: &quot;sup?&quot;,      &quot;context&quot;: {          &quot;request_id&quot;: &quot;abc123&quot;,          &quot;function&quot;: {&quot;name&quot;: &quot;do-things&quot;, &quot;version&quot;: &quot;0.1.2.3&quot;},          &quot;sns&quot;: {              &quot;id&quot;: &quot;66591d01-0241-5751-bb17-586e5a6dcf91&quot;,              &quot;topic&quot;: &quot;arn:aws:sns:us-east-1:12345678912:bucket-o-stuff&quot;,              &quot;type&quot;: &quot;Notification&quot;,              &quot;subject&quot;: &quot;Amazon S3 Notification&quot;,          },      }  }If you don't have an AWS context and event, you can construct a logger with no context&gt;&gt;&gt; logger = cazoo_logger.empty()Logging Errors--------------Logging caught errors is as simple as setting the exc_info kwarg to True on the log call.&gt;&gt;&gt; try:...     raise ValueError(&quot;What in the heck do you call that?&quot;)... except:...     logger.warn(&quot;I dunno man, looks pretty sketchy to me&quot;, exc_info=True)...    {&quot;msg&quot;: &quot;I dunno man, looks pretty sketchy to me&quot;, &quot;data&quot;: {&quot;error&quot;: {&quot;name&quot;: &quot;ValueError&quot;, &quot;message&quot;: &quot;What in the heck do you call that?&quot;, &quot;stack&quot;: &quot;Traceback (most recent call last):\n  File \&quot;&lt;stdin&gt;\&quot;, line 2, in &lt;module&gt;\nValueError: What in the heck do you call that?&quot;}}}Logging additional data-----------------------You might want to include additional structured data in your logs. Any values you pass to the `extra` kwarg will be json serialised into the `data` section of your log line.&gt;&gt;&gt; logger.info(&quot;I did a query&quot;, extra={'sql': {'query': 'select * from table where field = ?', 'parameters': [123] }}){&quot;msg&quot;: &quot;I did a query&quot;, &quot;data&quot;: {&quot;sql&quot;: {&quot;query&quot;: &quot;select * from table where field = ?&quot;, &quot;parameters&quot;: [123]}}}You can also use the `with_data` method. This method returns a new logger instance with the data section pre-populated.&gt;&gt;&gt; new_logger = logger.with_data(sql={'query': 'select * from foo where bar = ?', 'parameters':[234]})&gt;&gt;&gt; new_logger.debug('doin a query'){&quot;msg&quot;: &quot;doin a query&quot;, &quot;data&quot;: {&quot;sql&quot;: {&quot;query&quot;: &quot;select * from foo where bar = ?&quot;, &quot;parameters&quot;: [234]}}}&gt;&gt;&gt; new_logger.error('oh noes! the query did not work!'){&quot;msg&quot;: &quot;oh noes! the query did not work!&quot;, &quot;data&quot;: {&quot;sql&quot;: {&quot;query&quot;: &quot;select * from foo where bar = ?&quot;, &quot;parameters&quot;: [234]}}}Logging additional context--------------------------Similarly you might want to add more data to the context section of your log event.&gt;&gt;&gt; new_logger = logger.with_context(request_id='abc-123')&gt;&gt;&gt; new_logger.info('handling request'){&quot;msg&quot;: &quot;handling request&quot;, &quot;context&quot;: {&quot;request_id&quot;: &quot;abc-123&quot;}}.. _cazoo logger: https://www.npmjs.com/package/cazoo-logger.. _aws_lambda_logger: https://pypi.org/project/aws-lambda-loggingAdditional Log Levels---------------------The add_logging_level function allows you to add custom log levels to the logger.So for example a level of &quot;TRACE&quot; could be added at 15 to provide a level of logging isbetween DEBUG and INFO.</longdescription>
</pkgmetadata>