<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># phmdoctest 1.4.0## IntroductionPython syntax highlighted Markdown doctestCommand line program and Python library to test Python syntaxhighlighted code examples in Markdown.- Creates a [pytest][15] Python module that tests Python examples in  README and other Markdown files.- Reads these from Markdown fenced code blocks:  - Python interactive sessions described by [doctest][4].  - Python source code and expected terminal output.- The test cases get run later by running pytest.- Simple use case is possible with no Markdown edits at all.- More features selected by adding HTML comment **directives**  to the Markdown.  - Set test case name.  - Add a pytest custom marker.  - Add a pytest.mark.skip decorator.  - Promote names defined in a test case to module level globals.  - Label any fenced code block for later retrieval (API).- Configurable. Discover and process many Markdown files in a single command.- Add inline annotations to comment out sections of code.- Get code coverage by running pytest with [coverage][6].- Select Python source code blocks as setup and teardown code.- Setup applies to code blocks and optionally to session blocks.- An included Python library: [Latest Development tools API][10].  - Python function returns test file in a string. *(testfile() in main.py)*  - Two pytest fixtures. *(tester.py)*    1. **testfile_creator** runs *testfile()*. Use with testfile_tester.    2. **testfile_tester** runs a pytest file with pytest's pytester       in its isolated environment.  - Runs phmdoctest and can run pytest too. *(simulator.py)*  - Functions to read fenced code blocks from Markdown. *(tool.py)*  - Test Markdown for Python examples. *(tool.py)*  - Prepare directory for generated test files. *(tool.py)*  - Extract testsuite tree and list of failing trees from JUnit XML. *(tool.py)*- Available as the pytest plugin [pytest-phmdoctest][16].### default branch status[![](https://img.shields.io/pypi/l/phmdoctest.svg)](https://github.com/tmarktaylor/phmdoctest/blob/master/LICENSE.txt)[![](https://img.shields.io/pypi/v/phmdoctest.svg)](https://pypi.python.org/pypi/phmdoctest)[![](https://img.shields.io/pypi/pyversions/phmdoctest.svg)](https://pypi.python.org/pypi/phmdoctest)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![CI Test](https://github.com/tmarktaylor/phmdoctest/actions/workflows/ci.yml/badge.svg)](https://github.com/tmarktaylor/phmdoctest/actions/workflows/ci.yml)[![Build status](https://ci.appveyor.com/api/projects/status/5pp3swc1q1fgbcd6/branch/master?svg=true)](https://ci.appveyor.com/project/tmarktaylor/phmdoctest/branch/master)[![readthedocs](https://readthedocs.org/projects/phmdoctest/badge/?version=latest)](https://phmdoctest.readthedocs.io/en/latest/?badge=latest)[![codecov](https://codecov.io/gh/tmarktaylor/phmdoctest/coverage.svg?branch=master)](https://codecov.io/gh/tmarktaylor/phmdoctest?branch=master)[Website](https://tmarktaylor.github.io/phmdoctest) |[Docs](https://phmdoctest.readthedocs.io/en/latest/) |[Repos](https://github.com/tmarktaylor/phmdoctest) |[pytest][13] |[Codecov](https://codecov.io/gh/tmarktaylor/phmdoctest?branch=master) |[License](https://github.com/tmarktaylor/phmdoctest/blob/master/LICENSE.txt)[Introduction](#introduction) |[Installation](#installation) |[Sample usage](#sample-usage) |[Sample Usage with HTML comment directives](#sample-usage-with-html-comment-directives) |[CI usage](#ci-usage) |[--report](#report-option) |[Identifying blocks](#identifying-blocks) |[Directives](#directives) |[skip](#skip) |[label on code and sessions](#label-on-code-and-sessions) |[label on any fenced code block](#label-on-any-fenced-code-block) |[pytest skip](#pytest-skip) |[pytest skipif](#pytest-skipif) |[setup](#setup) |[teardown](#teardown) |[share-names](#share-names) |[clear-names](#clear-names) |[pytest mark decorator](#pytest-mark-decorator) |[label skip and mark example](#label-skip-and-mark-example) |[setup and teardown example](#setup-and-teardown-example) |[share-names clear-names example](#share-names-clear-names-example) |[Configuration](#configuration) |[Inline annotations](#inline-annotations) |[skipping blocks with --skip](#skipping-blocks-with-skip-option) |[--skip](#skip-option) |[short form of --skip](#short-form-of-skip-option) |[--fail-nocode](#fail-nocode-option) |[--setup](#setup-option) |[--teardown](#teardown-option) |[Setup example](#setup-example) |[Setup for sessions](#setup-for-sessions) |[Execution context](#execution-context) |[Send outfile to stdout](#send-outfile-to-stdout) |[Usage](#usage) |[Run as a Python module](#run-as-a-python-module) |[Python API](#python-api) |[pytest fixtures](#pytest-fixtures) |[Simulate command line](#simulate-command-line) |[Hints](#hints) |[Directive hints](#directive-hints) |[Related projects](#related-projects)[Changes](doc/recent_changes.md) |[Contributions](CONTRIBUTING.md) |[About](doc/about.md)## InstallationIt is advisable to install in a virtual environment.    python -m pip install phmdoctest## Sample usageGiven the Markdown file [example1.md](doc/example1.md)shown in raw form here...&lt;!--phmdoctest-label example1-raw--&gt;~~~# This is Markdown file example1.md## Interactive Python session (doctest)```py&gt;&gt;&gt; print(&quot;Hello World!&quot;)Hello World!```## Source Code and terminal outputCode:```pythonfrom enum import Enumclass Floats(Enum):    APPLES = 1    CIDER = 2    CHERRIES = 3    ADUCK = 4for floater in Floats:    print(floater)```sample output:```Floats.APPLESFloats.CIDERFloats.CHERRIESFloats.ADUCK```~~~the command...&lt;!--phmdoctest-label example1-command--&gt;```phmdoctest doc/example1.md --outfile test_example1.py```creates the python source code file `test_example1.py` shown here...&lt;!--phmdoctest-label example1-outfile--&gt;```python&quot;&quot;&quot;pytest file built from doc/example1.md&quot;&quot;&quot;from phmdoctest.functions import _phm_compare_exactdef session_00001_line_6():    r&quot;&quot;&quot;    &gt;&gt;&gt; print(&quot;Hello World!&quot;)    Hello World!    &quot;&quot;&quot;def test_code_14_output_28(capsys):    from enum import Enum    class Floats(Enum):        APPLES = 1        CIDER = 2        CHERRIES = 3        ADUCK = 4    for floater in Floats:        print(floater)    _phm_expected_str = &quot;&quot;&quot;\Floats.APPLESFloats.CIDERFloats.CHERRIESFloats.ADUCK&quot;&quot;&quot;    _phm_compare_exact(a=_phm_expected_str, b=capsys.readouterr().out)```Then run a pytest command something like this in your terminalto test the Markdown session, code, and expected output blocks.    pytest --doctest-modulesOr these two commands:    pytest    python -m doctest test_example1.pyThe `line_6` in the function name `session_00001_line_6` is theline number in [example1.md](doc/example1.md) of the first lineof the interactive session. `00001` is a sequence number toorder the doctests.The `14` in the function name `test_code_14_output_28` is theline number of the first lineof python code. `28` shows the line number of the expectedterminal output.One test case function gets generated for each:- Markdown fenced code block interactive session- Python-code/expected-output Markdown fenced code block pairThe `--report` option below shows the blocks discovered andhow they are tested.## Sample Usage with HTML comment directivesGiven the Markdown file shown in raw form here...&lt;!--phmdoctest-label directive-example-raw--&gt;~~~&lt;!--phmdoctest-mark.skip--&gt;&lt;!--phmdoctest-label test_example--&gt;```pythonprint(&quot;Hello World!&quot;)``````incorrect expected output```~~~the command...&lt;!--phmdoctest-label directive-example-command--&gt;```phmdoctest tests/one_mark_skip.md --outfile test_one_mark_skip.py```creates the python source code file shown here...&lt;!--phmdoctest-label directive-example-outfile--&gt;```python&quot;&quot;&quot;pytest file built from tests/one_mark_skip.md&quot;&quot;&quot;import pytestfrom phmdoctest.functions import _phm_compare_exact@pytest.mark.skip()def test_example(capsys):    print(&quot;Hello World!&quot;)    _phm_expected_str = &quot;&quot;&quot;\incorrect expected output&quot;&quot;&quot;    _phm_compare_exact(a=_phm_expected_str, b=capsys.readouterr().out)```Run the --outfile with pytest...```$ pytest -vv test_one_mark_skip.pytest_one_mark_skip.py::test_example SKIPPED```- The HTML comments in the Markdown are phmdoctest **directives**.- The **mark.skip** directive adds the @pytest.mark.skip() line.- The label directive names the test case function.- List of  [Directives](#directives)- Directives are optional.- Markdown edits are optional.## CI usageTest Python examples in README.md in Continuous Integration scripts.In this snippet for Linux the pytest test suite is in the**tests** folder.&lt;!--phmdoctest-label ci-example--&gt;```bashmkdir tests/tmpphmdoctest README.md --report --outfile tests/tmp/test_readme.pypytest --doctest-modules -vv tests```This console shows testing Python examples in project.md.Look for the tmp tests at the bottom. [Windows Usage on Appveyor][13].See this excerpt from ci.yml [Actions usage example](doc/actions_usage.md).It runs on Windows, Linux, and macOS. Please find the phmdoctest commandat the bottom.No changes to README.md are needed [here, look in the last job log][14].## report optionTo see the [GFM fenced code blocks][3] in the MARKDOWN_FILE use the`--report` option like this:&lt;!--phmdoctest-label report-command--&gt;```phmdoctest doc/example2.md --report```which lists the fenced code blocks it found inthe file [example2.md](doc/example2.md).The `test role` column shows how each fenced code block gets tested.&lt;!--phmdoctest-label example2-report--&gt;```         doc/example2.md fenced blocks------------------------------------------------block     line  test     TEXT or directivetype    number  role     quoted and one per line------------------------------------------------python       9  code            14  outputpython      20  code            26  output            31  --python      37  codepython      44  code            51  outputyaml        59  --text        67  --py          75  sessionpython      87  code            94  outputpy         102  session------------------------------------------------7 test cases.1 code blocks with no output block.```## Identifying blocksThe PYPI [commonmark][7] project provides code to extract fenced codeblocks from Markdown. Specification [CommonMark Spec][8] and website [CommonMark][9].Python code, expected output, and Python interactive sessions get extracted.Only [GFM fenced code blocks][3] are considered.A block is a session block if the info_string starts with ``py``and the first line of the block starts with thesession prompt: `'&gt;&gt;&gt; '`.To be treated as Python code the opening fence should startwith one of these:    ```python    ```python3    ```py3plus the block contents can't start with `'&gt;&gt;&gt; '`.The examples use the info_strings `python` for code and `py` for sessionssince they render with coloring on GitHub, readthedocs, GitHub Pages,and Python package index.[project.md](project.md) has more examples of code and session blocks.It is ok if the [info string][11]is laden with additional text, it will be ignored.  Theentire info string will be shown in the block type column of thereport.An output block is a fenced code block that immediately follows aPython block and starts with an opening fence like this whichhas an empty info string.    ```A Python code block has no outputif it is followed by any of:- Python code block- Python session block- a fenced code block with a non-empty info stringTest code gets generated for it, but there will be noassertion statement.## DirectivesDirectives are HTML comments containing test generation commands.They are edited into the Markdown file immediately before a fencedcode block. It is OK if other HTML comments are present.See the `&lt;!--phmdoctest-skip--&gt;` directive in theraw Markdown below.With the skip directive no test code will begenerated from the fenced code block.&lt;!--phmdoctest-label intro-to-directives--&gt;~~~&lt;!--phmdoctest-skip--&gt;&lt;!--Another HTML comment--&gt;```pythonprint(&quot;Hello World!&quot;)```Expected Output```Hello World!```~~~List of Directives```       Directive HTML comment      |    Use on blocks---------------------------------- | ---------------------&lt;!--phmdoctest-skip--&gt;             | code, session, output&lt;!--phmdoctest-label IDENTIFIER--&gt; | code, session&lt;!--phmdoctest-label TEXT--&gt;       | any&lt;!--phmdoctest-mark.skip--&gt;        | code&lt;!--phmdoctest-mark.skipif&lt;3.N--&gt;  | code&lt;!--phmdoctest-setup--&gt;            | code&lt;!--phmdoctest-teardown--&gt;         | code&lt;!--phmdoctest-share-names--&gt;      | code&lt;!--phmdoctest-clear-names--&gt;      | code&lt;!--phmdoctest-mark.ATTRIBUTE--&gt;   | code```[Directive hints](#directive-hints)## skipThe skip directive or `--skip TEXT` command line optionprevents code generation for the code or session block.The skip directive can be placed on an expected output block.There it prevents checking expected against actual output.[Example.](#label-skip-and-mark-example)## label on code and sessionsWhen used on a Python code block or session the label directivechanges the name of the generated test function.[Example.](#label-skip-and-mark-example)Two generated tests, the first without a label,shown in pytest -v terminal output:```test_readme.py::test_code_93 FAILEDtest_readme.py::test_beta_feature FAILED```## label on any fenced code blockOn any fenced code block, the label directive identifies the blockfor later retrieval by the class `phmdoctest.tool.FCBChooser()`.The `FCBChooser` is used separately from phmdoctest ina different pytest file. This allows the test developer to writeadditional test cases for fenced code blocks that are not handled byphmdoctest. The directive value can be any string.&lt;!--phmdoctest-label my-markdown-file--&gt;~~~# This is file doc/my_markdown_file.md&lt;!--phmdoctest-label my-fenced-code-block--&gt;```The label directive can be placed on any fenced code block.```~~~Here is Python code to fetch it:&lt;!--phmdoctest-label fetch-it--&gt;```pythonimport phmdoctest.toolchooser = phmdoctest.tool.FCBChooser(&quot;doc/my_markdown_file.md&quot;)contents = chooser.contents(label=&quot;my-fenced-code-block&quot;)print(contents)```Output:&lt;!--phmdoctest-label fetched-contents--&gt;```The label directive can be placed on any fenced code block.```## pytest skipThe `&lt;!--phmdoctest-mark.skip--&gt;`  directive generates a testcase with a `@pytest.mark.skip()` decorator.[Example.](#label-skip-and-mark-example)## pytest skipifThe `&lt;!--phmdoctest-mark.skipif&lt;3.N--&gt;`  directive generatesa test case with the pytest decorator`@pytest.mark.skipif(sys.version_info &lt; (3, N), reason=&quot;requires &gt;=py3.N&quot;)`.N is a Python minor version number.[Example.](#label-skip-and-mark-example)## setupA single Python code block can assign names visible toother code blocks by adding a setup directive orusing the [--setup](#setup-option) command line option.Names assigned by the setup blockget copied to the test module's global namespace afterthe setup block runs.Here is an example setup block from[setup.md](doc/setup.md):&lt;!--phmdoctest-label setup-md-first-block--&gt;```pythonimport mathmylist = [1, 2, 3]a, b = 10, 11def doubler(x):    return x * 2```Using setup modifies the execution context of thePython code blocks in the Markdown file.The names `math`, `mylist`, `a`, `b`, and `doubler` are visibleto the other Python code blocks. The objects can be modified.[Example.](#setup-and-teardown-example)## teardownSelects a single Python code block that runsat test module teardown time.A teardown block can also be designatedusing the [--teardown](#teardown-option) command line option.[Example.](#setup-and-teardown-example)## share-namesNames assigned by the Python code block get copied tothe test module as globals after the test code runs. This happens at runtime. These names are now visible to subsequenttest cases generated for Python code blocks in the Markdown file.share-names modifies the execution context as described forthe setup directive above.The share-names directive can be used on more than onecode block.[Example.](#share-names-clear-names-example)This directive effectively joins its Python code block to thefollowing Python code blocks in the Markdown file.## clear-namesAfter the test case generated for the Python code blockwith the clear-names directive runs, all names that werecreated by one or more preceding share-names directivesget deleted. The names that were shared are no longer visible.This directive also deletes the names assigned by setup.[Example.](#share-names-clear-names-example)## pytest mark decoratorThe `&lt;!--phmdoctest-mark.ATTRIBUTE--&gt;` directive addsa @pytest.mark.ATTRIBUTE decorator to thegenerated test function. ATTRIBUTE is a valid Python attributeidentifier. This defines a marker to pytest that is used toselect and deselect tests. See the pytest documentation section&quot;Working with custom markers&quot;.The file [mark_example.md](doc/mark_example_raw.md) containsexample usage of the user defined marker &quot;slow&quot;. It generates[test_mark_example.py](doc/test_mark_example_py.md)## label skip and mark exampleThe file [directive1.md](doc/directive1_raw.md) containsexample usage of label, skip, and mark directives.The command below generates[test_directive1.py](doc/test_directive1_py.md).`phmdoctest doc/directive1.md --report`produces this[report](doc/directive1_report_txt.md).&lt;!--phmdoctest-label directive-1-outfile--&gt;```phmdoctest doc/directive1.md --outfile test_directive1.py```## setup and teardown exampleThe file [directive2.md](doc/directive2_raw.md) containsexample usage of label, skip, and mark directives.The command below generates[test_directive2.py](doc/test_directive2_py.md).`phmdoctest doc/directive2.md --report`produces this[report](doc/directive2_report_txt.md).&lt;!--phmdoctest-label directive-2-outfile--&gt;```phmdoctest doc/directive2.md --outfile test_directive2.py```## share-names clear-names exampleThe file [directive3.md](doc/directive3_raw.md) containsexample usage of share-names and clear-names directives.The command below generates[test_directive3.py](doc/test_directive3_py.md).`phmdoctest doc/directive3.md --report`produces this[report](doc/directive3_report_txt.md).&lt;!--phmdoctest-label directive-3-outfile--&gt;```phmdoctest doc/directive3.md --outfile test_directive3.py```## ConfigurationSupply a .ini, .cfg, or .toml configuration file in place of the Markdown file.Configuration features:- Choose Markdown files for test file generation. (glob wildcards).- Exclude Markdown files from test file generation. (glob wildcards).- Name the output directory.- Removes stale test files from output directory.- Enable printing.Place a `[tool.phmdoctest]` section in the configuration file.[How to configure.](doc/configuring.md)## Inline annotationsInline annotations comment out sections of code.They can be added to the end of lines in Python code blocks.They should be in a comment.- `phmdoctest:omit` comments out a section of code.  The line it is on,  plus following lines at greater indent get commented out.- `phmdoctest:pass` comments out one line of code and prepends the pass statement.Here is a snippet showing how to place `phmdoctest:pass` in the code.The second block shows the code that is generated. Note there is no `#`immediately before `phmdoctest:pass`. It is not required.&lt;!--phmdoctest-label pass-code--&gt;```pythonimport timedef takes_too_long():    time.sleep(100)    # delay for awhile. phmdoctest:passtakes_too_long()```&lt;!--phmdoctest-label pass-result--&gt;```pythonimport timedef takes_too_long():    pass  # time.sleep(100)    # delay for awhile. phmdoctest:passtakes_too_long()```Use `phmdoctest:omit` on single or multi-line statements. Note the twocommented out time.sleep(99). They follow and are indented morethat the `if condition:`line with `phmdoctest:omit`.&lt;!--phmdoctest-label omit-code--&gt;```pythonimport time                      # phmdoctest:omitcondition = Trueif condition:       # phmdoctest:omit    time.sleep(99)    time.sleep(99)```&lt;!--phmdoctest-label omit-result--&gt;```python# import time                      # phmdoctest:omitcondition = True# if condition:       # phmdoctest:omit#     time.sleep(99)#     time.sleep(99)```Inline annotation processing counts the number of commentedout sections and adds the count as the suffix`_N` to the name of the pytest function in thegenerated test file.Inline annotations are similar, but less powerfulthan the Python standard library **doctest** directive `#doctest+SKIP`.Improper use of `phmdoctest:omit` can cause Python syntax errors.The examples above are snippets that illustrate how touse inline annotations.Here is an example that produces a pytest file from Markdown.The command below takes [inline_example.md](doc/inline_example.md) and generates[test_inline_example.py](doc/test_inline_example_py.md).&lt;!--phmdoctest-label inline-outfile--&gt;```phmdoctest doc/inline_example.md --outfile test_inline_example.py```## skipping blocks with skip optionIf you don't want to generate test cases for Pythonblocks precede the block with a **skip** directive oruse the `--skip TEXT` option. More than one **skip** directiveor`--skip TEXT`is allowed.The following describes using `--skip TEXT`.The code in each Python block gets searchedfor the substring `TEXT`.  Zero, one or more blocks will containthe substring. These blocks will not generate test cases in theoutput file.- The Python code in the fenced code block gets searched.- The info string is **not** searched.- Output blocks are **not** searched.- Both Python code and session blocks get searched.- Case is significant.The report shows which Python blocks get skippedin the test role column, and the Python blocks thatmatched each --skip TEXT in the skips section.This option makes it **very easy** to **inadvertently exclude**Python blocks from the test cases.  In the event no test cases getgenerated, the option `--fail-nocode` described below is useful.Three special `--skip TEXT` strings work a little differently.They select one of the first, second, or last of the Python blocks.Only Python blocks get counted.- `--skip FIRST` skips the first Python block.- `--skip SECOND` skips the second Python block.- `--skip LAST` skips the final Python block.## skip optionThis command using `--skip`:&lt;!--phmdoctest-label skip-command--&gt;```phmdoctest doc/example2.md --skip &quot;Python 3.7&quot; --skip LAST --report --outfile test_example2.py```Produces the report&lt;!--phmdoctest-label skip-report--&gt;```            doc/example2.md fenced blocks-----------------------------------------------------block     line  test          TEXT or directivetype    number  role          quoted and one per line-----------------------------------------------------python       9  code            14  outputpython      20  skip-code     &quot;Python 3.7&quot;            26  skip-output            31  --python      37  codepython      44  code            51  outputyaml        59  --text        67  --py          75  sessionpython      87  code            94  outputpy         102  skip-session  &quot;LAST&quot;-----------------------------------------------------5 test cases.1 skipped code blocks.1 skipped interactive session blocks.1 code blocks with no output block.  skip pattern matches (blank means no match)------------------------------------------------skip pattern  matching code block line number(s)------------------------------------------------Python 3.7    20LAST          102------------------------------------------------```creates the output file [test_example2.py](doc/test_example2_py.md)## short form of skip optionThis is the same command as above using the short `-s` form of the `--skip` optionin two places.It produces the same report and outfile.&lt;!--phmdoctest-label short-skip-command--&gt;```phmdoctest doc/example2.md -s &quot;Python 3.7&quot; -sLAST --report --outfile test_example2.py```## fail-nocode optionThe `--fail-nocode` option produces a pytest file that will alwaysfail when no Python code or session blocks get found.Evem if no Python code or session blocks exist in theMarkdown file a pytest file gets generated.This also happens when `--skip` eliminates all thePython code blocks.The generated pytest file will have the function`def test_nothing_passes()`.If the option `--fail-nocode` is passed thefunction is `def test_nothing_fails()` which raises anassertion.## setup optionA single Python code block can assign names visible toother code blocks by giving the `--setup TEXT` option.Please see the [setup](#setup) directive above.The rules for `TEXT` are the same as for `--skip TEXT` plus...- Only one block can match `TEXT`.- The block cannot match a block that is skipped.- The block cannot be a session block even though session  blocks get searched for `TEXT`.- It is ok if the block has an output block. It will be ignored.## teardown optionA single Python code block can supply code run by the pytest`teardown_module()` fixture. Use the `--teardown TEXT` option.Please see the [teardown](#teardown) directive above.The rules for `TEXT` are the same as for `--setup` above except`TEXT` won't match a setup block.## Setup exampleFor the Markdown file [setup.md](doc/setup.md)run this command to see how the blocks get tested.&lt;!--phmdoctest-label setup-command-report--&gt;```phmdoctest doc/setup.md --setup FIRST --teardown LAST --report```&lt;!--phmdoctest-label setup-report--&gt;```            doc/setup.md fenced blocks-------------------------------------------------block     line  test      TEXT or directivetype    number  role      quoted and one per line-------------------------------------------------python       9  setup     &quot;FIRST&quot;python      20  code            27  outputpython      37  code            42  outputpython      47  code            51  outputpython      58  teardown  &quot;LAST&quot;-------------------------------------------------3 test cases.```This command&lt;!--phmdoctest-label setup-command-outfile--&gt;```phmdoctest doc/setup.md --setup FIRST --teardown LAST --outfile test_setup.py```creates the test file[test_setup.py](doc/test_setup_py.md)## Setup for sessionsThe pytest option `--doctest-modules` is required torun doctest on sessions.  pytest runs doctests ina separate context.For more on this see [Execution context](#execution-context) below.To allow sessions to see the variables assigned by the `--setup`code block, add the option `--setup-doctest`Here is an example with setup code and sessions[setup_doctest.md](doc/setup_doctest.md). The first partof this file is a copy of setup.md.This command  uses the short form of setup and teardown.-u for set**up** and -d for tear**down**.&lt;!--phmdoctest-label setup-doctest-outfile--&gt;```phmdoctest doc/setup_doctest.md -u FIRST -d LAST --setup-doctest --outfile test_setup_doctest.py```It creates the test file[test_setup_doctest.py](doc/test_setup_doctest_py.md)## Execution contextWhen run without `--setup`- pytest and doctest determine the order of test case execution.- phmdoctest assumes test code and session execution is in file order.- Test case order is not significant.- Code and expected output run within a function body of a pytest test case.- If pytest is invoked with `--doctest-modules`:  - Sessions are run in a separate doctest execution context.  - Otherwise, sessions do not run.### With `--setup`- Names assigned by setup code are visible to code blocks.- Code blocks can modify the objects created by the setup code.- Code block test case order is significant.- Session order is not significant.- If pytest is run with `--doctest-modules`:  - pytest runs two separate contexts: one for sessions, one for code blocks.  - setup and teardown code gets run twice, once by each context.  - the names assigned by the setup code block    are `are not` visible to the sessions.### With `share-names`- Only following code blocks can modify the shared objects.- Shared objects will **not** be visible to sessions  if pytest is run with `--doctest-modules`.- After running a code block with `clear-names`  - Shared objects will no longer be visible.  - Names assigned by setup code will no longer be visible.### With `--setup` and `--setup-doctest`Same as the setup section plus:- names assigned by the setup code block  are visible to the sessions.- Sessions can modify the objects created by the setup code.- Session order is significant.- Sessions and code blocks are still running in separate contexts  isolated from each other.- A session can't affect a code block, and a code block can't affect  a session.- Names assigned by the setup code block are globally visible  to the entire test suite via the pytest doctest_namespace  fixture.  See hint near the end [Hints](#hints).### pytest live logging demoThe live logging demos reveals pytest execution contexts.pytest Live Logs show theexecution order of setup_module(), test cases, sessions, andteardown_module().There are 2 demo invocations in the workflow actioncalled pytest Live Log Demo.  GitHub login required.## Send outfile to stdoutTo redirect the above outfile to the standard output stream use oneof these two commands.Be sure to leave out `--report` when sending --outfile to standard output.&lt;!--phmdoctest-label outfile-dash1--&gt;```phmdoctest doc/example2.md -s &quot;Python 3.7&quot; -sLAST --outfile -```or&lt;!--phmdoctest-label outfile-dash2--&gt;```phmdoctest doc/example2.md -s &quot;Python 3.7&quot; -sLAST --outfile=-```## Usage`phmdoctest --help`&lt;!--phmdoctest-label usage--&gt;```Usage: phmdoctest [OPTIONS] MARKDOWN_FILE  MARKDOWN_FILE may also be .toml, .cfg, or .ini configuration file.Options:  --outfile TEXT       Write generated test case file to path TEXT. &quot;-&quot; writes                       to stdout.  -s, --skip TEXT      Any Python code or interactive session block that                       contains the substring TEXT is not tested. More than                       one --skip TEXT is ok. Double quote if TEXT contains                       spaces. For example --skip=&quot;python 3.7&quot; will skip every                       Python block that contains the substring &quot;python 3.7&quot;.                       If TEXT is one of the 3 capitalized strings FIRST                       SECOND LAST the first, second, or last Python code or                       session block in the Markdown file is skipped.  --report             Show how the Markdown fenced code blocks are used.  --fail-nocode        This option sets behavior when the Markdown file has no                       Python fenced code blocks or interactive session blocks                       or if all such blocks are skipped. When this option is                       present the generated pytest file has a test function                       called test_nothing_fails() that will raise an                       assertion. If this option is not present the generated                       pytest file has test_nothing_passes() which will never                       fail.  -u, --setup TEXT     The Python code block that contains the substring TEXT                       is run at test module setup time. Variables assigned at                       the outer level are visible as globals to the other                       Python code blocks. TEXT should match exactly one code                       block. If TEXT is one of the 3 capitalized strings                       FIRST SECOND LAST the first, second, or last Python                       code or session block in the Markdown file is matched.                       A block will not match --setup if it matches --skip, or                       if it is a session block. Use --setup-doctest below to                       grant Python sessions access to the globals.  -d, --teardown TEXT  The Python code block that contains the substring TEXT                       is run at test module teardown time. TEXT should match                       exactly one code block. If TEXT is one of the 3                       capitalized strings FIRST SECOND LAST the first,                       second, or last Python code or session block in the                       Markdown file is matched. A block will not match                       --teardown if it matches either --skip or --setup, or                       if it is a session block.--setup-doctest        Make globals created by the --setup Python code block                       or setup directive visible to session blocks and only                       when they are tested with the pytest --doctest-modules                       option.  Please note that pytest runs doctests in a                       separate context that only runs doctests. This option                       is ignored if there is no --setup option.  --version            Show the version and exit.  --help               Show this message and exit.```## Run as a Python moduleTo run phmdoctest from the command line:`python -m phmdoctest doc/example2.md --report`## Python APICall **main.testfile()** to generate a pytest file in memory.Please see the Python API [here][10].The example generates a pytest file from doc/setup.md andcompares the result to doc/test_setup.py.&lt;!--phmdoctest-label main-testfile--&gt;```pythonfrom pathlib import Pathimport phmdoctest.maingenerated_testfile = phmdoctest.main.testfile(    &quot;doc/setup.md&quot;,    setup=&quot;FIRST&quot;,    teardown=&quot;LAST&quot;,)expected = Path(&quot;doc/test_setup.py&quot;).read_text(encoding=&quot;utf-8&quot;)assert expected == generated_testfile```## pytest fixturesUse fixture **testfile_creator** to generate a test file in memory.Pass the test file to fixture **testfile_tester** to runthe test file in the pytester environment.[Fixture API][10] | [Example](doc/project_test_py.md).See more uses in tests/test_examples.py, tests/test_details.py, andtests/test_many_markdown.py.The fixtures run pytest much faster than `run_and_pytest()`below since there is no subprocess call.In the readthedocs documentation see the section Development tools API 1.4.0.pytest's pytester is suitable for pytest plugin development.## Simulate command lineTo simulate a command line call to phmdoctest fromwithin a Python script `phmdoctest.simulator` offers thefunction `run_and_pytest()`.- it creates the --outfile in a temporary directory- optionally runs pytest on the outfile- pytest can return a JUnit XML report- useful during development to validate the command line  and prevent use of a stale --outfilePlease see the [Latest Development tools API section][10] orthe docstring of the function `run_and_pytest()` in the file `simulator.py.`Pass pytest_options as a list of strings as shown below.&lt;!--phmdoctest-label simulator--&gt;```pythonimport phmdoctest.simulatorcommand = &quot;phmdoctest doc/example1.md --report --outfile temporary.py&quot;simulator_status = phmdoctest.simulator.run_and_pytest(    well_formed_command=command, pytest_options=[&quot;--doctest-modules&quot;, &quot;-v&quot;])assert simulator_status.runner_status.exit_code == 0assert simulator_status.pytest_exit_code == 0```## Hints- To read the Markdown file from the standard input stream.  Use `-` for MARKDOWN_FILE.- Write the test file to a temporary directory so that  it is always up to date.- In CI scripts the following shell command will create the temporary  directory **tmp** in the **tests** folder on Windows, Linux, and macOS.  ```bash  python -c &quot;from pathlib import Path; d = Path('tests') / 'tmp'; d.mkdir(mode=0o700)&quot;  ```- It is easy to use --output by mistake instead of `--outfile`.- If Python code block has no output, put assert statements in the code.- Use pytest option `--doctest-modules` to test the sessions.- Markdown indented code blocks ([Spec][8] section 4.4) are ignored.- simulator_status.runner_status.exit_code == 2 is the click  command line usage error.- Since phmdoctest generates code, the input file should be from a trusted  source.- An empty code block gets given the role `del-code`. It is not tested.- Use special TEXT values FIRST, SECOND, LAST for the command  line options `--setup` and `--teardown` since they only match one block.- The variable names `managenamespace`, `doctest_namespace`,  `capsys`, and `_phm_expected_str` should not be used in  Markdown Python code blocks since they may be used in generated code.- Setup and teardown code blocks cannot have expected output.- To have pytest collect a code block with the label directive  start the value with `test_`.- With the `--setup-doctest` option, names assigned by the setup code  block are globally visible to the entire test suite.  This is due to the scope of the pytest doctest_namespace  fixture.  Try using a separate pytest command to test  just the phmdoctest test.- The module **phmdoctest.fixture** is imported at pytest time  to support setup, teardown, share-names, and clear-names features.- The phmdoctest Markdown parser finds fenced code blocks enclosed by  html `&lt;details&gt;` and `&lt;/details&gt;` tags.  The tags may require a preceding and trailing blank line  to render correctly. See example in tests/test_details.py.- Try redirecting phmdoctest standard output into PYPI Pygments to  colorize the generated test file.  ```shell  python -m phmdoctest project.md --outfile - | pygmentize  ```- If the --outfile is written into a folder that pre-exists in the  repository, consider adding the outfile name to .gitignore. If  the outfile name later changes, the change will be needed in  .gitignore too.  ```  # Reserved for generated test file.  tests/test_readme.py  ```## Directive hints- Only put one of setup, teardown, share-names, or  clear-names on a code block.- Only one block can be setup. Only one block can be teardown.- The setup or teardown block can't have an expected output block.- Label directive does not generate a test  case name on setup and teardown blocks.- Directives displayed in the `--report` start with a dash like  this: `-label test_i_ratio`.- Code generated by Python blocks with setup and teardown  directives runs at the pytest fixture `scope=&quot;module&quot;` level.- Code generated by Python blocks with share-names and  clear-names directives are **collected** and run by pytest  like any other test case.- A malformed HTML comment ending is bad. Make sure  it ends with both dashes like `--&gt;`.  Running with `--report`  will expose that problem.- The setup, teardown, share-names, and clear-names directives  have logging. To see the log messages,  run pytest with the option:  `--log-cli-level=DEBUG --color=yes`- There is no limit to number of blank lines after  the directive HTML comment but before the fenced code block.- The directive `&lt;!--phmdoctest-mark.xfail--&gt;` might be useful as  an alternative to `&lt;!--phmdoctest-mark.skip--&gt;` for failing examples.- The directive `&lt;!--phmdoctest-mark.ATTRIBUTE--&gt;` will not be  effective when used with `&lt;!--phmdoctest-setup--&gt;` or   `&lt;!--phmdoctest-teardown--&gt;` because pytest marks can only  be applied to tests. They have no effect on fixtures.  Setup and teardown use fixtures.## Related projects- rundoc- byexample- sphinx.ext.doctest- sybil- doxec- egtest- pytest-phmdoctest- pytest-codeblocks[3]: https://github.github.com/gfm/#fenced-code-blocks[11]: https://github.github.com/gfm/#info-string[10]: https://phmdoctest.readthedocs.io/en/latest/doc/api.html[7]: https://pypi.org/project/commonmark[8]: https://spec.commonmark.org[9]: https://commonmark.org[4]: https://docs.python.org/3/library/doctest.html[6]: https://pypi.org/project/coverage[13]: https://ci.appveyor.com/project/tmarktaylor/phmdoctest[14]: https://travis-ci.org/tmarktaylor/monotable[15]: https://docs.pytest.org/en/stable[16]: https://pypi.org/project/pytest-phmdoctestCopyright (c) 2021 Mark TaylorPermission is hereby granted, free of charge, to any person obtaining a copy ofthis software and associated documentation files (the &quot;Software&quot;), to deal inthe Software without restriction, including without limitation the rights touse, copy, modify, merge, publish, distribute, sublicense, and/or sell copiesof the Software, and to permit persons to whom the Software is furnished to doso, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>