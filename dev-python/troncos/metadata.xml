<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot; style=&quot;border-bottom: 0&quot;&gt;  ðŸªµ&lt;br&gt;  Troncos &lt;br/&gt;&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;        Collection of Python logging, tracing and profiling tools    &lt;/em&gt;    &lt;br&gt;    &lt;a href=&quot;https://github.com/kolonialno/troncos/actions?workflow=CI&quot;&gt;        &lt;img src=&quot;https://github.com/kolonialno/troncos/actions/workflows/ci.yml/badge.svg&quot; alt=&quot;CI status&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.python.org/pypi/troncos&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/troncos.svg&quot;&gt;    &lt;/a&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/troncos&quot;&gt;    &lt;a href=&quot;https://github.com/kolonialno/troncos/blob/master/LICENSE&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/license/kolonialno/troncos.svg&quot;&gt;    &lt;/a&gt;&lt;/p&gt;&lt;!-- TOC --&gt;- [Etymology](#etymology)- [Installation](#installation)- [Tracing](#tracing)- [Profiling](#profiling)- [Logging](#logging)&lt;!-- TOC --&gt;## Etymology&quot;Troncos&quot; is the plural of the spanish word &quot;Tronco&quot;, which translates to &quot;trunk&quot; or &quot;log&quot;.## Installation```console# With pip$ pip install troncos```## TracingTroncos is designed to take advantage of `ddtrace` made by DataDog.The ddtrace docs can be found [here](https://ddtrace.readthedocs.io/en/stable/).### Enabling the tracerConfigure ddtrace as usual and run `configure_tracer` to send spans to Tempo.This is typically done in `settings.py` of you want to profile a Django application,or in `__init__.py` in the root project package.`TRACE_HOST` is usually the host IP of the K8s pod, `TRACE_PORT` is usually 4318when the Grafana agent is used to collect spans using HTTP.```pythonimport ddtracefrom troncos.tracing import configure_tracer# Configure tracer as described in the ddtrace docs.ddtrace.config.django[&quot;service_name&quot;] = 'SERVICE_NAME'ddtrace.tracer.set_tags(    tags={        &quot;fulfillment_center&quot;: 'osl2',    })# Patch third-party modulesddtrace.patch_all()# Configure the ddtrace tracer to send traces to Tempo.TRACE_HOST = &quot;127.0.0.1&quot; # Usually obtained from env variables.TRACE_PORT = &quot;4318&quot;configure_tracer(    enabled=False, # Set to True when TRACE_HOST is configured.    service_name='SERVICE_NAME',    endpoint=f&quot;http://{TRACE_HOST}:{TRACE_PORT}/v1/traces&quot;,)```ddtrace also uses env variables to configure the service name, environment and version etc.Add the following environment variables to your application.```DD_ENV=&quot;{{ environment }}&quot;DD_SERVICE=&quot;{{ app }}&quot;DD_VERSION=&quot;{{ version }}&quot;# tracecontext/w3c is usually used to propagate distributed traces across services.DD_TRACE_PROPAGATION_STYLE_EXTRACT=&quot;tracecontext&quot;DD_TRACE_PROPAGATION_STYLE_INJECT=&quot;tracecontext&quot;```### Using the GRPC span exporterUsing the GRPC span exporter gives you significant performance gains.If you are running a critical service with high load in production,we recommend using GRPC.`TRACE_PORT` is usually 4317 when the Grafana agent is used to collectspans using GRPC.```consolepoetry add troncos -E grpc```or```toml[tool.poetry.dependencies]troncos = {version=&quot;?&quot;, extras = [&quot;grpc&quot;]}``````pythonfrom troncos.tracing import configure_tracer, ExporterTRACE_HOST = &quot;127.0.0.1&quot; # Usually obtained from env variables.TRACE_PORT = &quot;4317&quot;configure_tracer(    enabled=False, # Set to True when TRACE_HOST is configured.    service_name='SERVICE_NAME',    endpoint=f&quot;http://{TRACE_HOST}:{TRACE_PORT}&quot;,    exporter=Exporter.GRPC)```### Instrument your codeManual instrumentation of your code is described in the [ddtrace docs](https://ddtrace.readthedocs.io/en/stable/basic_usage.html#manual-instrumentation).### Add tracing context to your logAdding the tracing context to your log makes it easier to find relevant traces in Grafana.Troncos include a Structlog processor designed to do this.```pythonimport structlogfrom troncos.contrib.structlog.processors import trace_injection_processorstructlog.configure(    processors=[        trace_injection_processor,    ],)```### Logging of major actions in your applicationFinding relevant traces in Grafana can be difficult. One way to make finding the relevant traceseasier it to log every major action in your application. This typically means logging everyincoming HTTP request to your server or every task executed by your Celery worker.The structlog processor above needs to be enabled before logging your major actions is relevant.#### ASGI middlewareLog ASGI requests.```pythonfrom starlette.applications import Starlettefrom troncos.contrib.asgi.logging.middleware import AsgiLoggingMiddlewareapplication = AsgiLoggingMiddleware(Starlette())```#### Django middlewareLog Django requests. This is not needed if you run Django with ASGI and use theASGI middleware.```pythonMIDDLEWARE = [    &quot;troncos.contrib.django.logging.middleware.DjangoLoggingMiddleware&quot;,    ...]```#### Celery signals`Log Celery tasks. Run the code bellow when you configure Celery.```pythonfrom troncos.contrib.celery.logging.signals import (    connect_troncos_logging_celery_signals,)connect_troncos_logging_celery_signals()```## Profiling### Enabling the continuous py-spy profilerStart the profiler by running the `start_py_spy_profiler` method early in your application. This istypically done in `settings.py` of you want to profile a Django application, or in `__init__.py`in the root project package.```pythonfrom troncos.profiling import start_py_spy_profilerstart_py_spy_profiler(server_address=&quot;http://127.0.0.1:4100&quot;)```### Enabling the ddtrace profilerStart the profiler by importing the profiler module early in your application. This istypically done in `settings.py` of you want to profile a Django application, or in `__init__.py`in the root project package.&lt;!--pytest.mark.skip--&gt;```pythonimport troncos.profiling.auto```#### Setup profile endpointUse one of the methods bellow based on your selected framework.##### DjangoAdd the profile view to the url config.```pythonfrom django.urls import pathfrom troncos.contrib.django.profiling.views import profiling_viewurlpatterns = [    path(&quot;/debug/pprof&quot;, profiling_view, name=&quot;profiling&quot;),]```##### StarletteAdd the profile view to your router.```pythonfrom starlette.routing import Routefrom troncos.contrib.starlette.profiling.views import profiling_viewroutes = [    Route(&quot;/debug/pprof&quot;, profiling_view),]```##### ASGIMount the generic ASGI profiling application. There is no generic way to do this,please check the relevant ASGI framework documentation.```pythonfrom troncos.contrib.asgi.profiling.app import profiling_asgi_app# FastAPI examplefrom fastapi import FastAPIapp = FastAPI()app.mount(&quot;/debug/pprof&quot;, profiling_asgi_app)```#### Verify setupYou can verify that your setup works with the [pprof](https://github.com/google/pprof) cli:```console$ pprof -http :6060 &quot;http://localhost:8080/debug/pprof&quot;```#### Enable scrapingWhen you deploy your application, be sure to use the custom oda annotation for scraping:```yamlannotations:  phlare.oda.com/port: &quot;8080&quot;  phlare.oda.com/scrape: &quot;true&quot;```## LoggingTroncos is not designed to take control over your logger. But, we do include loggingrelated tools to make instrumenting your code easer.### Configure StructlogTroncos contains a helper method that lets you configure Structlog.First, run `poetry add structlog` to install structlog in your project.You can now replace your existing logger config with```pythonfrom troncos.contrib.structlog import configure_structlogconfigure_structlog(format=&quot;json&quot;, level=&quot;INFO&quot;)```### Adding tracing context to your logTroncos has a Structlog processor that can be used to add the `span_id` and `trace_id`properties to your log. More infomation can be found in the [Tracing](#tracing)section in this document. This is used by the `configure_structlog` helper methodby default.### Request logging middlewareFinding the relevant traces in Tempo and Grafana can be difficult. The request loggingmiddleware exist to make it easier to connect HTTP requests to traces. More infomationcan be found in the [Tracing](#tracing) section in this document.</longdescription>
</pkgmetadata>