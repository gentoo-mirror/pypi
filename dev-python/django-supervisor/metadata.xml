<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>djsupervisor:  easy integration between django and supervisord==============================================================Django-supervisor combines the process-management awesomeness of supervisordwith the convenience of Django's management scripts.Rationale---------Running a Django project these days often entails much more than just startingup a webserver.  You might need to have Django running under FCGI or CherryPy,with background tasks being managed by celeryd, periodic tasks scheduled bycelerybeat, and any number of other processes all cooperating to keep theproject up and running.When you're just developing or debugging, it's a pain having to start andstop all these different processes by hand.When you're deploying, it's a pain to make sure that each process is hookedinto the system startup scripts with the correct configuration.Django-supervisor provides a convenient bridge between your Django projectand the supervisord process control system.  It makes starting all theprocesses required by your project as simple as::    $ python myproject/manage.py supervisorAdvantages----------Django-supervisor is admittedly quite a thin layer on top of the wonderfulfunctionality provided by supervisord.  But by integrating tightly withDjango's management scripts you gain several advantages:    * manage.py remains the single point of control for running your project.    * Running all those processes is just as easy in development as it      is in production.    * You get auto-reloading for *all* processes when running in debug mode.    * Process configuration can depend on Django settings and environment      variables, and have paths relative to your project and/or apps.Configuration-------------Django-supervisor is a wrapper around supervisord, so it uses the sameconfiguration file format.  Basically, you write an ini-style config filewhere each section defines a process to be launched.  Some examples can befound below, but you'll want to refer to the supervisord docs for all thefiner details:    http://www.supervisord.orgTo get started, just include &quot;djsupervisor&quot; in your INSTALLED_APPS and dropa &quot;supervisord.conf&quot; file in your project directory, right next to the mainmanage.py script.A simple example config might run both the Django development server and theCelery task daemon::    [program:webserver]    command={{ PYTHON }} {{ PROJECT_DIR }}/manage.py runserver --noreload     [program:celeryd]    command={{ PYTHON }} {{ PROJECT_DIR }}/manage.py celeryd -l infoNow when you run the &quot;supervisor&quot; management command, it will detect thisfile and start the two processes for you.Notice that the config file is interpreted using Django's templating engine.This lets you do fun things like locate files relative to the project rootdirectory.Better yet, you can make parts of the config conditional based on projectsettings or on the environment.  For example, you might start the developmentserver when debugging but run under FCGI in production::    [program:webserver]    {% if settings.DEBUG %}    command={{ PYTHON }} {{ PROJECT_DIR }}/manage.py runserver    {% else %}    command={{ PYTHON }} {{ PROJECT_DIR }}/manage.py runfcgi host=127.0.0.1 port=8025    {% endif %} Usage-----Django-supervisor provides a new Django manangement command named &quot;supervisor&quot;which allows you to control all of the processes belonging to your project.When run without arguments, it will spawn supervisord to launch and monitorall the configured processs.  Here's some example output using the configfile shown in the previous section::    $ python myproject/manage.py supervisor    2011-06-07 23:46:45,253 INFO RPC interface 'supervisor' initialized    2011-06-07 23:46:45,253 INFO supervisord started with pid 4787    2011-06-07 23:46:46,258 INFO spawned: 'celeryd' with pid 4799    2011-06-07 23:46:46,275 INFO spawned: 'webserver' with pid 4801    2011-06-07 23:46:47,456 INFO success: webserver entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)    2011-06-07 23:46:56,512 INFO success: celeryd entered RUNNING state, process has stayed up for &gt; than 10 seconds (startsecs)By default the &quot;supervisor&quot; command will stay in the foreground and printstatus updates to the console.  Pass the --daemonize option to have it run in the background.  You can also tweak its behaviour using all ofsupervisord's standard options in the config file.Once the supervisor is up and running, you can interact with it to control therunning processes.  Running &quot;manage.py supervisor shell&quot; will launch theinteractive supervisorctl command shell.  From here you can view processstatus and start/stop/restart individual processes::    $ python myproject/manage.py supervisor shell    celeryd                          RUNNING    pid 4799, uptime 0:03:17    webserver                        RUNNING    pid 4801, uptime 0:03:17    supervisor&gt;     supervisor&gt; help    default commands (type help &lt;topic&gt;):    =====================================    add   clear fg       open quit   remove restart  start  stop update     avail exit  maintail pid  reload reread shutdown status tail version    supervisor&gt;     supervisor&gt; stop celeryd    celeryd: stopped    supervisor&gt;     supervisor&gt; status    celeryd                          STOPPED    Jun 07 11:51 PM    webserver                        RUNNING    pid 4801, uptime 0:04:45    supervisor&gt; You can also issue individual process-manangement commands directly on the command-line::    $ python myproject/manage.py supervisor start celeryd    celeryd: started    $    $ python myproject/manage.py supervisor status    celeryd                          RUNNING    pid 4937, uptime 0:00:55    webserver                        RUNNING    pid 4801, uptime 0:09:05    $    $ python myproject/manage.py supervisor shutdown    Shut down    $For details of all the available management commands, consult the supervisorddocumentation.Command-Line Options~~~~~~~~~~~~~~~~~~~~The &quot;supervisor&quot; command accepts the following options:  --daemonize             run the supervisord process in the background  --pidfile               store PID of supervisord process in this file  --loggile               write supervisord logs to this file  --project-dir           use this as the django project directory  --launch=program        launch program automatically at supervisor startup  --nolaunch=program      don't launch program automatically at startup  --exclude=program       remove program from the supervisord config  --include=program       include program in the supervisord config  --autoreload=program    restart program when code files change  --noreload              don't restart programs when code files changeExtra Goodies-------------Django-supervisor provides some extra niceties on top of the configurationlanguage of supervisord.Templating~~~~~~~~~~All supervisord.conf files are rendered through Django's templating system.This allows you to interpolate values from the settings or environment, andconditionally switch processes on or off.  The template context for eachconfiguration file contains the following variables::    PROJECT_DIR          the top-level directory of your project (i.e. the                         directory containing your manage.py script).    APP_DIR              for app-provided config files, the top-level                         directory containing the application code.    PYTHON               full path to the current python interpreter.    SUPERVISOR_OPTIONS   the command-line options passed to manage.py.      settings             the Django settings module, as seen by your code.    environ              the os.environ dict, as seen by your code.If your project has other configuration files that need to interpolate thesevalues, you can refer to them via the &quot;templated&quot; filter, like this::    [program:nginx]    command=nginx -c {{ &quot;nginx.conf&quot;|templated }}The file path is relative to your project directory.  Django-supervisor willread the specified file, pass it through its templating logic, write out amatching &quot;nginx.conf.templated&quot; file, and insert the path to this file as theresult of the filter.Defaults, Overrides and Excludes~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Django-supervisor recognises some special config-file options that are usefulwhen merging multiple app-specific and project-specific configuration files.The [program:__defaults__] section can be used to provide default optionsfor all other [program] sections.  These options will only be used if noneof the config files found by django-supervisor provide that option fora specific program.The [program:__overrides__] section can be used to override options for allconfigured programs.  These options will be applied to all processes regardlessof what any other config file has to say.Finally, you can completely disable a [program] section by setting the option&quot;exclude&quot; to true.  This is mostly useful for disabling process definitionsprovided by a third-party application.Here's an example config file that shows them all in action::    ; We want all programs to redirect stderr by default,    ; unless specifically configured otherwise.    [program:__defaults__]    redirect_stderr=true    ; We force all programs to run as user &quot;nobody&quot;    [program:__overrides__]    user=nobody    ; Don't reload programs when python code changes.    [program:autoreload]    exclude=trueAutomatic Control Socket Config~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The supervisord and supervisorctl programs interact with each other via anXML-RPC control socket.  This provides a great deal of flexibility and controlover security, but you have to configure it just so or things won't work.For convenience during development, django-supervisor provides automaticcontrol socket configuration.  By default it binds the server to localhoston a fixed-but-randomish port, and sets up a username and password based onsettings.SECRET_KEY.For production deployment, you might like to reconfigure this by setting upthe [inet_http_server] or [unix_http_server] sections.  Django-supervisorwill honour any such settings you provide.Autoreload~~~~~~~~~~When running in debug mode, django-supervisor automatically defines a processnamed &quot;autoreload&quot;.  This is very similar to the auto-reloading feature ofthe Django development server, but works across all configured processes.For example, this will let you automatically restart both the dev server andceleryd whenever your code changes.To prevent an individual program from being auto-reloaded, set its &quot;autoreload&quot;option to false::    [program:non-python-related]    autoreload=falseTo switch off the autoreload process entirely, you can pass the --noreload option to supervisor or just exclude it in your project config file like so::    [program:autoreload]    exclude=true</longdescription>
</pkgmetadata>