<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Ascend.io / Great Expectations docker image for Google Cloud storageThis image is a wrapper around official Ascend.io image to use Great Expectations validation tool.## Build the docker imageThe image is built with Github action located in this file :  .github/workflows/docker-build.yaml.For now the image is pushed on docker hub at this address: fosk06/ascend-great-expectations-gcs:latestThe image is build on push on main branch and with git tag with the following form &quot;v{X}.{Y}.{Z}&quot;With:- X = Major version- Y = Minor version- Z = Correction version## Use it on ascend.io platform  This docker image is built for PySpark transforms on Ascend.io platform.First you need a Google cloud storage bucket named for example &quot;great_expectations_store&quot; and a service account with the role &quot;storage.admin&quot; on this bucket.Then upload this service account as a credentials on your Ascend.io instance and name it for example &quot;great_expectations_sa&quot;.Now you can create your PySpark transform on Ascend.io.In the advanced settings&gt; Runtime settings &gt; container image URL set the correct docker hub image url : fosk06/ascend-great-expectations-gcs:latestThen in the &quot;Custom Spark Params&quot; click on &quot;require credentials&quot; and chose you credential previously uploaded &quot;great_expectations_sa&quot;.## Write the PySpark transform```python# import the custom packagefrom ascend_great_expectations_gcs.validator import Validator# lets admit we are working on a &quot;customer&quot; table, write the expectations in specific functiondef expectations(validator):  validator.expect_column_to_exist(&quot;customer_id&quot;)  validator.expect_column_values_to_not_be_null(&quot;customer_id&quot;)  validator.expect_column_to_exist('created_at')# Ascend.io transform callbackdef transform(spark_session: SparkSession, inputs: List[DataFrame], credentials=None):    df = inputs[0]    # instanciate the validator    validator = Validator(        name= NAME, # name of the validator        gcp_project=PROJECT, # your GCP project        bucket=BUCKET, # the name of your GCP bucket, for example &quot;great_expectations_store&quot;        credentials=credentials, # credentials from the transform callback    )    validator.add_expectations(expectations)    validator.run(df)    return df```## test the classcreate a virtual envthen in ./venv/lib/python3.9/site-package write those two filesascend_great_expectations_gcs_test.pth =&gt; set you package folder pathascend_great_expectations_gcs.pth =&gt; set you package folder path herehttps://webdevdesigner.com/q/how-do-you-set-your-pythonpath-in-an-already-created-virtualenv-55773/git tag -d v1.4.1git push --delete origin v1.4.1</longdescription>
</pkgmetadata>