<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ipython-autoimport==================| |GitHub| |PyPI| |Build|.. |GitHub|   image:: https://img.shields.io/badge/github-anntzer%2Fdefopt-brightgreen   :target: https://github.com/anntzer/ipython-autoimport.. |PyPI|   image:: https://img.shields.io/pypi/v/ipython-autoimport.svg?color=brightgreen   :target: https://pypi.python.org/pypi/ipython-autoimport.. |Build|   image:: https://img.shields.io/github/workflow/status/anntzer/ipython-autoimport/build   :target: https://github.com/anntzer/ipython-autoimport/actionsAutomagically import missing modules in IPython: instead of ::   In [1]: plt.plot([1, 2], [3, 4])   ---------------------------------------------------------------------------   NameError                                 Traceback (most recent call last)   &lt;ipython-input-1-994ba2bf13c0&gt; in &lt;module&gt;()   ----&gt; 1 plt.plot([1, 2], [3, 4])   NameError: name 'plt' is not defined   In [2]: from matplotlib import pyplot as plt   In [3]: plt.plot([1, 2], [3, 4])   Out[3]: [&lt;matplotlib.lines.Line2D at 0x7f73f0179198&gt;]do what I mean::   In [1]: plt.plot([1, 2], [3, 4])   Autoimport: from matplotlib import pyplot as plt   Out[1]: [&lt;matplotlib.lines.Line2D at 0x7f7e253552b0&gt;]Inspired from @OrangeFlash81's `version&lt;https://github.com/OrangeFlash81/ipython-auto-import&gt;`_, with manyimprovements:- Does not rely on re-execution, but instead hooks the user namespace; thus,  safe even in the presence of side effects, and works for tab completion and  magics too.- Learns your preferred aliases from the history -- ``plt`` is not hardcoded to  alias ``matplotlib.pyplot``, just found because you previously imported  ``pyplot`` under this alias.- Suppresses irrelevant chained tracebacks.- Auto-imports submodules.- ``pip``-installable.To see auto imports from the current session: ``%autoimport -l``To clear the cache for a symbol with multiple possible imports: ``%autoimport -c SYMBOL``Installation------------As usual, install using pip:.. code-block:: sh   $ pip install ipython-autoimport  # from PyPI   $ pip install git+https://github.com/anntzer/ipython-autoimport  # from GithubThen, append the output of ``python -m ipython_autoimport`` to the``ipython_config.py`` file in the directory printed by ``ipython profilelocate`` (typically ``~/.ipython/profile_default/``).If you don't have such a file at all, you can use ``ipython profile create``.Run tests with ``pytest``.Limitations-----------Constructs such as ::   class C:      auto_imported_valuewill not work, because they are run using the class locals (rather than thepatched locals); patching globals would not work because ``LOAD_NAME`` queriesglobals using ``PyDict_GetItem`` exactly (note that it queries locals using``PyObject_GetItem``; also, ``LOAD_GLOBALS`` queries *both* globals andbuiltins using ``PyObject_GetItem`` so we could possibly get away with patchingthe builtins dict instead, but that seems a bit too invasive...).When using Jedi autocompletion (the default if Jedi is installed as of IPython7.2), trying to tab-complete not-yet-imported global names to trigger an importfails, because Jedi purposefully converts the global dict to a namespaceobject and looks up attributes using ``getattr_static``.  Jedi can be disabledby adding ``c.Completer.use_jedi = False`` to the ``ipython_config.py`` file.</longdescription>
</pkgmetadata>