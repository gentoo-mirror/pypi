<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Dynamic Settings[![Build status](https://img.shields.io/bitbucket/pipelines/akinonteam/dj-dynamic-settings)](https://bitbucket.org/akinonteam/dj-dynamic-settings/addon/pipelines/home)![PyPI](https://img.shields.io/pypi/v/dj-dynamic-settings)![PyPI - Django version](https://img.shields.io/pypi/djversions/dj-dynamic-settings)![PyPI - Python version](https://img.shields.io/pypi/pyversions/dj-dynamic-settings)![PyPI - License](https://img.shields.io/pypi/l/dj-dynamic-settings)Django Dynamic Settings allows you to create &amp; use dynamic settings backed by a database.## InstallationInstallation using pip:```pip install dj-dynamic-settings````dj_dynamic_settings` app has to be added to `INSTALLED_APPS` and `migrate` command has to be run.```pythonINSTALLED_APPS = (    # other apps here...    &quot;dj_dynamic_settings&quot;,)````dj_dynamic_settings.urls` must be included to a desired url path.```pythonurlpatterns = [    ...,    url(r&quot;^api/v1/&quot;, include(&quot;dj_dynamic_settings.urls&quot;)),]```Setting class must be defined &amp; registered. Please make sure that this class' module runs whenever the application runs.```pythonfrom dj_dynamic_settings.registry import BaseSetting, registryfrom dj_dynamic_settings.validators import TypeValidator@registry.registerclass FeatureActive(BaseSetting):    key = &quot;FEATURE_ACTIVE&quot;    validators = [TypeValidator(bool)]    default = False    description = &quot;Flag for Feature X&quot;```Create `Setting` instance using view.```pythonimport requestsrequests.post(    url=&quot;https://your-app.com/api/v1/dynamic_settings/&quot;,    headers={        &quot;Authorization&quot;: &quot;Token &lt;secret-login-token&gt;&quot;,    },    json={        &quot;key&quot;: &quot;FEATURE_ACTIVE&quot;,        &quot;value&quot;: True,        &quot;is_active&quot;: True,    })```Access this setting as in `django.conf.settings````pythonfrom dj_dynamic_settings.conf import settingssettings.FEATURE_ACTIVE  # True```### Create / Update TriggersTo fire a callback method when a specific setting value updated or created, you can implement `post_save_actions` in `BaseSetting` inherited classFollowing example shows how to implement `post_save_actions` method.The callback method will be called with following kwargs: ```key=instance.keyvalue=instance.valuecreated=created # is create operation```Note: `post_save_actions` returns an array, so you can add multiple callback methods. These callback methods will be called synchronously. ```pythonclass PostUpdateTestConfiguration(BaseSetting):    key = &quot;X_FEATURE_POST_UPDATE&quot;    validators = [...]    @classmethod    def post_save_actions(cls):        return [            on_data_updated,        ]def on_data_updated(*args, **kwargs):    pass```### Testing Tools#### override_settings()You can override a setting for a test method or test class.```pythonfrom dj_dynamic_settings.utils import override_settingsfrom django.test import TestCase@override_settings(SOME_SETTING=&quot;some_setting&quot;)class FeatureTestCase(TestCase):    @override_settings(SOME_OTHER_SETTING=&quot;SOME_OTHER_SETTING&quot;)    def test_feature(self):        # Some stuff        pass        def test_feature_x(self):        with override_settings(SOME_OTHER_SETTING=&quot;SOME_OTHER_SETTING&quot;):            # Some stuff            pass```</longdescription>
</pkgmetadata>