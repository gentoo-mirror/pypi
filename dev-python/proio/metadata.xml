<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># proio for Python[![Build Status](https://travis-ci.org/proio-org/py-proio.svg?branch=master)](https://travis-ci.org/proio-org/py-proio)[![codecov](https://codecov.io/gh/proio-org/py-proio/branch/master/graph/badge.svg)](https://codecov.io/gh/proio-org/py-proio)[![Codacy Badge](https://api.codacy.com/project/badge/Grade/c7084aee40fd459594e3646b152d1e43)](https://www.codacy.com/app/proio-org/py-proio?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=proio-org/py-proio&amp;amp;utm_campaign=Badge_Grade)Proio is an event-oriented streaming data format based on Google's [protocolbuffers](https://developers.google.com/protocol-buffers/) (protobuf).  Proioaims to add event structure and additional compression to protobuf in a waythat supports event data model serialization in medium- and high-energyphysics.  Additionally, proio* supports self-descriptive data,* is stream compatible,* is language agnostic,* and brings along many advantages of protobuf, including forward/backward  compatibility.For detailed information on the proio format and introductory information onthe software implementations, please see [DOI10.1016/j.cpc.2019.03.018](https://doi.org/10.1016/j.cpc.2019.03.018).  Thiswork was inspired and influenced by [LCIO](https://github.com/iLCSoft/LCIO),ProMC (Sergei Chekanov), and EicMC (Alexander Kiselev)Also see the [main proio repository](https://github.com/proio-org/proio) foradditional information information.## APIThe API documentation is generated using Sphinx, and can be found[here](https://proio-org.github.io/py-proio-docs/).## InstallationPy-proio is maintained on [pypi](https://pypi.python.org/pypi/proio).  Theproio package can be installed via`pip`:```shellpip install --user --upgrade proio```If you run into trouble importing proio, force upgrade the two dependencieswhich are `protobuf` and `lz4`.For information on what versions of Python are supported, please see the[Travis CI page](https://travis-ci.org/proio-org/py-proio).### Building the packageIf you need to build the package (instead of just installing from pypi asdescribed above), you can do so with the fairly standard [setup.py](setup.py).In this case, you need to have the Protobuf compiler (`protoc`) installed.With `pip`:```shellpython setup.py clean build_pypip install --user --upgrade .```, or if you want to just build a source package:```shellpython setup.py clean build_py sdist```, or if you want to build a wheel package:```shellpython setup.py clean bdist_wheel```.  Note that the `build_py` command is responsible for generating the Protobufcode with `protoc`, and needs to be called explicitly in the pip and sourcepackage case.## Examples### Manipulating data model objects (EIC Particle)```pythonimport proioimport proio.model.eic as modeltest_filename = 'test_file.proio'with proio.Writer(test_filename) as writer:    event = proio.Event()        parent = model.Particle()    parent.pdg = 443    parent.p.x = 1    parent.mass = 3.097    parent_id = event.add_entry('Particle', parent)    child1 = model.Particle()    child1.pdg = 11    child1.vertex.x = 0.5    child1.mass = 0.000511    child1.charge = -1    child2 = model.Particle()    child2.pdg = -11    child2.vertex.x = 0.5    child2.mass = 0.000511    child2.charge = 1    child_ids = event.add_entries('Particle', child1, child2)    for ID in child_ids:        event.tag_entry(ID, 'GenStable')    parent.child.extend(child_ids)    child1.parent.append(parent_id)    child2.parent.append(parent_id)    print(event)    writer.push(event)```### Iterating events in a file```pythonimport proio # the model does not need to be imported when reading since proio             # is self-descriptive!test_filename = 'test_file.proio'n_events = 0with proio.Reader(test_filename) as reader:    for event in reader:        print('========== EVENT ' + str(n_events) + ' ==========')        print(event)        n_events += 1print(n_events)```### Event inspection by tag```pythonimport proioimport proio.model.eic as modeltest_filename = 'test_file.proio'with proio.Writer(test_filename) as writer:    event = proio.Event()    parent = model.Particle()    parent.pdg = 443    parent_id = event.add_entry('Particle', parent)    child1 = model.Particle()    child1.pdg = 11    child2 = model.Particle()    child2.pdg = -11    child_ids = event.add_entries('Particle', child1, child2)    for ID in child_ids:        event.tag_entry(ID, 'GenStable')    parent.child.extend(child_ids)    child1.parent.append(parent_id)    child2.parent.append(parent_id)    writer.push(event)with proio.Reader(test_filename) as reader:    for event in reader:        parts = event.tagged_entries('Particle')        print('%i particle(s)...' % len(parts))        for i in range(0, len(parts)):            part = event.get_entry(parts[i])            print('%i. PDG Code: %i' % (i, part.pdg))            print('  %i children...' % len(part.child))            for j in range(0, len(part.child)):                print('  %i. PDG Code: %i' % (j, event.get_entry(part.child[j]).pdg))```</longdescription>
</pkgmetadata>