<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>stravaweblib============Provides all the functionality of the [stravalib](https://github.com/hozn/stravalib) package andextends it using web scraping.Authentication--------------In order to log into the website, the `WebClient` class either needs an email and password, or the[JWT](https://en.wikipedia.org/wiki/JSON_Web_Token) of an existing session. Strava stores this JWTin the `strava_remember_token` cookie.After the client has logged in, a JWT for the current session can be accessed via the `WebClient`'s`jwt` property. Storing this JWT (and the `access_token` from `stravalib`) allows for resuming thesession without having to log in again. This can avoid rate limits and lockouts.Example:```pythonfrom stravaweblib import WebClient# Log in (requires API token and email/password for the site)client = WebClient(access_token=OAUTH_TOKEN, email=EMAIL, password=PASSWORD)# Store the current session's informationjwt = client.jwtaccess_token = client.access_token# Create a new client that continues to use the previous web sessionclient = WebClient(access_token=access_token, jwt=jwt)```Extra functionality-------------------### Export activitiesDownload activity files as GPX, TCX, or the original format they were uploaded in.```pythonfrom stravaweblib import WebClient, DataFormat# Log in (requires API token and email/password for the site)client = WebClient(access_token=OAUTH_TOKEN, email=EMAIL, password=PASSWORD)# Get the first activity id (uses the normal stravalib API)activities = client.get_activities()activity_id = activities.next().id# Get the filename and data stream for the activity datadata = client.get_activity_data(activity_id, fmt=DataFormat.ORIGINAL)# Save the activity data to disk using the server-provided filenamewith open(data.filename, 'wb') as f:    f.writelines(data.content)```### Delete activitiesDelete activities from the site. Note that this was previously possible via the API, but theendpoint has been [removed as of 2017-01-17](https://developers.strava.com/docs/changelog/#january-17-2017).```pythonfrom stravaweblib import WebClient# Log in (requires API token and email/password for the site)client = WebClient(access_token=OAUTH_TOKEN, email=EMAIL, password=PASSWORD)# Get the first activity id (uses the normal stravalib API)activities = client.get_activities()activity_id = activities.next().id# Delete the activityclient.delete_activity(activity_id)```### Get bike componentsRetrieve all components added to bikes. Can optionally only show components active at a certain date.```pythonfrom stravaweblib import WebClientfrom datetime import datetime# Log in (requires API token and email/password for the site)client = WebClient(access_token=OAUTH_TOKEN, email=EMAIL, password=PASSWORD)# Get a list of bikes the current user ownsathlete = client.get_athlete()bikes = athlete.bikes# Get the id of the first bikebike_id = bikes.next().id# Get all components of the first bike (past and present)client.get_bike_components(bike_id)# Get the current components on the first bikeclient.get_bike_components(bike_id, on_date=datetime.now())```### Export routesDownload route files as GPX or TCX.```pythonfrom stravaweblib import WebClient, DataFormat# Log in (requires API token and email/password for the site)client = WebClient(access_token=OAUTH_TOKEN, email=EMAIL, password=PASSWORD)# Get the first route id (uses the normal stravalib API)routes = client.get_routes()route_id = routes.next().id# Get the filename and data stream for the activity datadata = client.get_route_data(route_id, fmt=DataFormat.GPX)# Save the activity data to disk using the server-provided filenamewith open(data.filename, 'wb') as f:    f.writelines(data.content)```License=======Licensed under the [Mozilla Public License, version 2.0](https://www.mozilla.org/en-US/MPL/2.0)</longdescription>
</pkgmetadata>