<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># taxa-pyMIBiG taxonomy handling python bindingsThis package is designed to help MIBiG-related python code to handle NCBI taxid lookups using [NCBI taxdump data](https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/new_taxdump/).This package contains the python bindings for the [MIBiG taxa-rs](https://github.com/mibig-secmet/taxa-rs) package to manage a local JSON-based cache of interesting taxa, allowing bulk database imports to speed up compared to parsing directly from the taxdump files.## InstallationTo install taxa-py, run the following (assuming you are in a python virtualenv):```pip install mibig-taxa```## UsageTo create a cache file, first grab the [latest taxdump collection](https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/new_taxdump/) and extract it. You'll also need a directory containing the MIBiG BGC entry JSON files.Then run the following:```pythonfrom mibig_taxa import TaxonCachecache = TaxonCache()cache.initialise(    taxdump=&quot;path/to/taxa/rankedlineage.dmp&quot;,    merged_id_dump=&quot;path/to/taxa/merged.dmp&quot;,    datadir=&quot;path/to/mibig-json/data&quot;)# Save the cache to a file for later usecache.save(&quot;my_cache.json&quot;)```If you want to use the cache in a different process, simply load the cache like this:```pythonfrom mibig_taxa import TaxonCachecache = TaxonCache(&quot;my_cache.json&quot;)# Or, if you prefer the longer formcache = TaxonCache()cache.load(&quot;my_cache.json&quot;)```To get an ID mapping, use```pythonfrom mibig_taxa import TaxonCachecache = TaxonCache(&quot;my_cache.json&quot;)id_to_map = 123456name = get_name_by_id(id_to_map)print(f&quot;Taxon with ID {id_to_map} is called {name}&quot;)```If you want to transparently support deprecated IDs, also set the `allow_deprecated` argument to `True`:```pythonfrom mibig_taxa import TaxonCachecache = TaxonCache(&quot;my_cache.json&quot;)deprecated_id_to_map = 123456name = get_name_by_id(deprecated_id_to_map, allow_deprecated=True)print(f&quot;Taxon with deprecated ID {deprecated_id_to_map} is called {name}&quot;)```To get the mapping to an antiSMASH `--taxon` value, use:```pythonfrom mibig_taxa import TaxonCachecache = TaxonCache(&quot;my_cache.json&quot;)tax_id = 123456as_taxon = cache.get_antismash_taxon(tax_id)print(f&quot;For antiSMASH, use --taxon {as_taxon} with tax_id {tax_id}&quot;)```You can also grab individual entries directly:```pythonfrom mibig_taxa import TaxonCachecache = TaxonCache(&quot;my_cache.json&quot;)tax_id = 123456entry = cache.get(tax_id)# &quot;class&quot; is a reserved keyword in python, can't use it directlyentry_class = getattr(entry, &quot;class&quot;)print(f&quot;{entry.superkingdom} &gt; {entry.kingdom} &gt; {entry.phylum} &gt; {entry_class} &gt; {entry.order} &gt; {entry.family} &gt; {entry.name}&quot;)```## LicenseLicensed under the Apache License, Version 2.0([LICENSE](LICENSE) or http://www.apache.org/licenses/LICENSE-2.0)## ContributionUnless you explicitly state otherwise, any contribution intentionally submittedfor inclusion in the work by you, as defined in the Apache-2.0 license, shall belicensed as Apache-2.0, without any additional terms or conditions.</longdescription>
</pkgmetadata>