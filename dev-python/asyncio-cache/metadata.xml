<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Python application](https://github.com/matan1008/asyncio-cache/workflows/Python%20application/badge.svg)](https://github.com/matan1008/asyncio-cache/actions/workflows/python-app.yml &quot;Python application action&quot;)[![Pypi version](https://img.shields.io/pypi/v/asyncio-cache.svg)](https://pypi.org/project/asyncio-cache/ &quot;PyPi package&quot;)[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/matan1008/asyncio-cache.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/matan1008/asyncio-cache/context:python)# asyncio-cacheA python library for asyncio caches (like functools cache and lru_cache)# InstallationInstall the last released version using `pip`:```shellpython3 -m pip install --user -U asyncio-cache```Or install the latest version from sources:```shellgit clone git@github.com:matan1008/asyncio-cache.gitcd asyncio-cachepython3 -m pip install --user -U -e .```# UsageThe usage is similar to `functools.cache` and `functools.lru_cache` usage:```pythonfrom asyncio_cache import cache@cacheasync def cached_read(reader):    return await reader.read(100)```</longdescription>
</pkgmetadata>