<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI](https://img.shields.io/pypi/v/resnest.svg)](https://pypi.python.org/pypi/resnest)[![PyPI Pre-release](https://img.shields.io/badge/pypi--prerelease-v0.0.5-ff69b4.svg)](https://pypi.org/project/resnest/#history)[![PyPI Nightly](https://github.com/zhanghang1989/ResNeSt/workflows/Pypi%20Nightly/badge.svg)](https://github.com/zhanghang1989/ResNeSt/actions)[![Downloads](http://pepy.tech/badge/resnest)](http://pepy.tech/project/resnest)[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)[![Unit Test](https://github.com/zhanghang1989/ResNeSt/workflows/Unit%20Test/badge.svg)](https://github.com/zhanghang1989/ResNeSt/actions)[![arXiv](http://img.shields.io/badge/cs.CV-arXiv%3A2004.08955-B31B1B.svg)](https://arxiv.org/abs/2004.08955)[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/resnest-split-attention-networks/instance-segmentation-on-coco)](https://paperswithcode.com/sota/instance-segmentation-on-coco?p=resnest-split-attention-networks)[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/resnest-split-attention-networks/object-detection-on-coco)](https://paperswithcode.com/sota/object-detection-on-coco?p=resnest-split-attention-networks)[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/resnest-split-attention-networks/panoptic-segmentation-on-coco-panoptic)](https://paperswithcode.com/sota/panoptic-segmentation-on-coco-panoptic?p=resnest-split-attention-networks)[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/resnest-split-attention-networks/semantic-segmentation-on-ade20k)](https://paperswithcode.com/sota/semantic-segmentation-on-ade20k?p=resnest-split-attention-networks)[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/resnest-split-attention-networks/semantic-segmentation-on-cityscapes-val)](https://paperswithcode.com/sota/semantic-segmentation-on-cityscapes-val?p=resnest-split-attention-networks)[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/resnest-split-attention-networks/semantic-segmentation-on-pascal-context)](https://paperswithcode.com/sota/semantic-segmentation-on-pascal-context?p=resnest-split-attention-networks)# ResNeStSplit-Attention Network, A New ResNet Variant. It significantly boosts the performance of downstream models such as Mask R-CNN, Cascade R-CNN and DeepLabV3.![](./miscs/abstract.jpg)### Table of Contents0. [Pretrained Models](#pretrained-models)0. [Transfer Learning Models](#transfer-learning-models)0. [Verify Backbone Models](#verify-backbone-models)0. [How to Train](#how-to-train)0. [Reference](#reference)### Pypi / GitHub Install0. Install this package repo, note that you only need to choose one of the options```bash# using github urlpip install git+https://github.com/zhanghang1989/ResNeSt# using pypipip install resnest --pre```## Pretrained Models|             | crop size | PyTorch | Gluon ||-------------|-----------|---------|-------|| ResNeSt-50  | 224       | 81.03   | 81.04 || ResNeSt-101 | 256       | 82.83   | 82.81 || ResNeSt-200 | 320       | 83.84   | 83.88 || ResNeSt-269 | 416       | 84.54   | 84.53 |- **3rd party implementations** are available: [Tensorflow](https://github.com/QiaoranC/tf_ResNeSt_RegNet_model), [Caffe](https://github.com/NetEase-GameAI/ResNeSt-caffe).- Extra ablation study models are available in [link](./ablation.md)### PyTorch Models- Load using Torch Hub```pythonimport torch# get list of modelstorch.hub.list('zhanghang1989/ResNeSt', force_reload=True)# load pretrained models, using ResNeSt-50 as an examplenet = torch.hub.load('zhanghang1989/ResNeSt', 'resnest50', pretrained=True)```- Load using python package```python# using ResNeSt-50 as an examplefrom resnest.torch import resnest50net = resnest50(pretrained=True)```### Gluon Models- Load pretrained model:```python# using ResNeSt-50 as an examplefrom resnest.gluon import resnest50net = resnest50(pretrained=True)```## Transfer Learning Models### Detectron ModelsTraining code and pretrained models are released at our [Detectron2 Fork](https://github.com/zhanghang1989/detectron2-ResNeSt).#### Object Detection on MS-COCO validation set&lt;table class=&quot;tg&quot;&gt;  &lt;tr&gt;    &lt;th class=&quot;tg-0pky&quot;&gt;Method&lt;/th&gt;    &lt;th class=&quot;tg-0pky&quot;&gt;Backbone&lt;/th&gt;    &lt;th class=&quot;tg-0pky&quot;&gt;mAP%&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td rowspan=&quot;4&quot; class=&quot;tg-0pky&quot;&gt;Faster R-CNN&lt;/td&gt;    &lt;td class=&quot;tg-0pky&quot;&gt;ResNet-50&lt;/td&gt;    &lt;td class=&quot;tg-0pky&quot;&gt;39.25&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNet-101&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;41.37&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-50 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;42.33&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-101 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;44.72&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td rowspan=&quot;5&quot; class=&quot;tg-0lax&quot;&gt;Cascade R-CNN&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNet-50&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;42.52&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNet-101&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;44.03&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-50 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;45.41&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-101 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;47.50&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-200 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;49.03&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;#### Instance Segmentation&lt;table class=&quot;tg&quot;&gt;  &lt;tr&gt;    &lt;th class=&quot;tg-0pky&quot;&gt;Method&lt;/th&gt;    &lt;th class=&quot;tg-0pky&quot;&gt;Backbone&lt;/th&gt;    &lt;th class=&quot;tg-0pky&quot;&gt;bbox&lt;/th&gt;    &lt;th class=&quot;tg-0lax&quot;&gt;mask&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td rowspan=&quot;4&quot; class=&quot;tg-0pky&quot;&gt;Mask R-CNN&lt;/td&gt;    &lt;td class=&quot;tg-0pky&quot;&gt;ResNet-50&lt;/td&gt;    &lt;td class=&quot;tg-0pky&quot;&gt;39.97&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;36.05&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNet-101&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;41.78&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;37.51&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-50 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;42.81&lt;/b&gt;&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;38.14&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-101 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;45.75&lt;/b&gt;&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;40.65&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td rowspan=&quot;7&quot; class=&quot;tg-0lax&quot;&gt;Cascade R-CNN&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNet-50&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;43.06&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;37.19&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNet-101&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;44.79&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;38.52&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-50 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;46.19&lt;/b&gt;&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;39.55&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-101 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;48.30&lt;/b&gt;&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;41.56&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-200 (w/ tricks &lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;50.54&lt;/b&gt;&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;44.21&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;   &lt;tr&gt;    &lt;td rowspan=&quot;2&quot; class=&quot;tg-0lax&quot;&gt;ResNeSt-200-dcn (w/ tricks &lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;50.91&lt;/b&gt;&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;44.50&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;   &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;53.30*&lt;/b&gt;&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;47.10*&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;All of results are reported on COCO-2017 validation dataset. The values with * demonstrate the mutli-scale testing performance on the test-dev2019.## Panoptic Segmentation&lt;table class=&quot;tg&quot;&gt;  &lt;tr&gt;    &lt;th class=&quot;tg-0pky&quot;&gt;Backbone&lt;/th&gt;    &lt;th class=&quot;tg-0pky&quot;&gt;bbox&lt;/th&gt;    &lt;th class=&quot;tg-0lax&quot;&gt;mask&lt;/th&gt;    &lt;th class=&quot;tg-0lax&quot;&gt;PQ&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0pky&quot;&gt;ResNeSt-200&lt;/td&gt;    &lt;td class=&quot;tg-0pky&quot;&gt;51.00&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;43.68&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;47.90&lt;/td&gt;   &lt;/tr&gt; &lt;/table&gt;### Semantic Segmentation- PyTorch models and training: Please visit [PyTorch Encoding Toolkit](https://hangzhang.org/PyTorch-Encoding/model_zoo/segmentation.html).- Training with Gluon: Please visit [GluonCV Toolkit](https://gluon-cv.mxnet.io/model_zoo/segmentation.html#ade20k-dataset).#### Results on ADE20K&lt;table class=&quot;tg&quot;&gt;  &lt;tr&gt;    &lt;th class=&quot;tg-cly1&quot;&gt;Method&lt;/th&gt;    &lt;th class=&quot;tg-cly1&quot;&gt;Backbone&lt;/th&gt;    &lt;th class=&quot;tg-cly1&quot;&gt;pixAcc%&lt;/th&gt;    &lt;th class=&quot;tg-cly1&quot;&gt;mIoU%&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td rowspan=&quot;6&quot; class=&quot;tg-cly1&quot;&gt;Deeplab-V3&lt;br&gt;&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;ResNet-50&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;80.39&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;42.1&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;ResNet-101&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;81.11&lt;/b&gt;&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;44.14&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;ResNeSt-50 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;&lt;b&gt;81.17&lt;/b&gt;&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;&lt;b&gt;45.12&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-101 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;82.07&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;46.91&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-200 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;82.45&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;48.36&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-269 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;82.62&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;47.60&lt;/b&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;#### Results on Cityscapes&lt;table class=&quot;tg&quot;&gt;  &lt;tr&gt;    &lt;th class=&quot;tg-cly1&quot;&gt;Method&lt;/th&gt;    &lt;th class=&quot;tg-cly1&quot;&gt;Backbone&lt;/th&gt;    &lt;th class=&quot;tg-cly1&quot;&gt;Split&lt;/th&gt;    &lt;th class=&quot;tg-cly1&quot;&gt;w Mapillary&lt;/th&gt;    &lt;th class=&quot;tg-cly1&quot;&gt;mIoU%&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td rowspan=&quot;3&quot; class=&quot;tg-cly1&quot;&gt;Deeplab-V3+&lt;br&gt;&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;ResNeSt-200 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;Validation&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;no&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;82.7&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;ResNeSt-200 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;Validation&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;yes&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;&lt;b&gt;83.8&lt;b&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;ResNeSt-200 (&lt;span style=&quot;color:red&quot;&gt;ours&lt;/span&gt;)&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;Test&lt;/td&gt;    &lt;td class=&quot;tg-cly1&quot;&gt;yes&lt;/td&gt;    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;b&gt;83.3&lt;b&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;## Verify Backbone Models:**Note:** the inference speed reported in the paper are tested using Gluon implementation with RecordIO data.### Prepare ImageNet dataset:Here we use raw image data format for simplicity, please follow [GluonCV tutorial](https://gluon-cv.mxnet.io/build/examples_datasets/recordio.html) if you would like to use RecordIO format.```bashcd scripts/dataset/# assuming you have downloaded the dataset in the current folderpython prepare_imagenet.py --download-dir ./```### Torch Model```bash# use resnest50 as an examplecd scripts/torch/python verify.py --model resnest50 --crop-size 224```### Gluon Model```bash# use resnest50 as an examplecd scripts/gluon/python verify.py --model resnest50 --crop-size 224```## How to Train### ImageNet Models- Training with MXNet Gluon: Please visit [Gluon folder](./scripts/gluon/).- Training with PyTorch: Please visit [PyTorch Encoding Toolkit](https://hangzhang.org/PyTorch-Encoding/model_zoo/imagenet.html) (slightly worse than Gluon implementation).### Detectron ModelsFor object detection and instance segmentation models, please visit our [detectron2-ResNeSt fork](https://github.com/zhanghang1989/detectron2-ResNeSt).### Semantic Segmentation- Training with PyTorch: [Encoding Toolkit](https://hangzhang.org/PyTorch-Encoding/model_zoo/segmentation.html).- Training with MXNet: [GluonCV Toolkit](https://gluon-cv.mxnet.io/model_zoo/segmentation.html#ade20k-dataset).## Reference**ResNeSt: Split-Attention Networks** [[arXiv](https://arxiv.org/pdf/2004.08955.pdf)]Hang Zhang, Chongruo Wu, Zhongyue Zhang, Yi Zhu, Zhi Zhang, Haibin Lin, Yue Sun, Tong He, Jonas Muller, R. Manmatha, Mu Li and Alex Smola```@article{zhang2020resnest,title={ResNeSt: Split-Attention Networks},author={Zhang, Hang and Wu, Chongruo and Zhang, Zhongyue and Zhu, Yi and Zhang, Zhi and Lin, Haibin and Sun, Yue and He, Tong and Muller, Jonas and Manmatha, R. and Li, Mu and Smola, Alexander},journal={arXiv preprint arXiv:2004.08955},year={2020}}```### Major Contributors- ResNeSt Backbone ([Hang Zhang](https://hangzhang.org/))- Detectron Models ([Chongruo Wu](https://github.com/chongruo), [Zhongyue Zhang](http://zhongyuezhang.com/))- Semantic Segmentation ([Yi Zhu](https://sites.google.com/view/yizhu/home))- Distributed Training ([Haibin Lin](https://sites.google.com/view/haibinlin/))</longdescription>
</pkgmetadata>