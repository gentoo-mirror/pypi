<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PASQAL CloudSDK to be used to access Pasqal Cloud Services.## InstallationTo install the latest release of the `pasqal-cloud` (formerly pasqal-sdk), have Python 3.8.0 or higher installed, then use pip:```bashpip install pasqal-cloud```If you wish to **install the development version of the pasqal-cloud from source** instead, do the following from within this repository after cloning it:```bashgit checkout devpip install -e .```Bear in mind that this installation will track the contents of your localpasqal-cloud repository folder, so if you check out a different branch (e.g. `master`),your installation will change accordingly.### Development Requirements (Optional)To run the tutorials or the test suite locally, run the following to install the development requirements:```bashpip install -e .[dev]```We use pre-commit hooks to enforce some code linting, you can install pre-commit with Python pip:```bashpython3 -m pip install pre-commitpre-commit install```## Basic usage### AuthenticationThere are several ways to authenticate using the SDK:```pythonfrom pasqal_cloud import SDKproject_id = &quot;your_project_id&quot;  # Replace this value with your project_id on the PASQAL platform. It can be found on the user-portal, in the 'project' section.username = &quot;your_username&quot;  # Replace this value with your username or email on the PASQAL platform.password = &quot;your_password&quot;  # Replace this value with your password on the PASQAL platform.```#### Method 1: Username + PasswordIf you know your credentials, you can pass them to the SDK instance on creation:```pythonsdk = SDK(username=username, password=password, project_id=project_id)```#### Method 2: Username onlyIf you only want to insert your username, but want a solution to have your password being secret,you can run the SDK without a password. A prompt will then ask for your password:```pythonsdk = SDK(username=username, project_id=project_id)```#### Method 3: Use a custom token providerYou can define a custom class to provide the token.For example, if you have a token, you can use it to authenticate with our APIs:```pythonclass CustomTokenProvider(TokenProvider):    def get_token(self):        return &quot;your-token&quot; # Replace this value with your tokensdk = SDK(token_provider=CustomTokenProvider(), project_id=project_id)```Alternatively, create a custom `TokenProvider` that inherits from `ExpiringTokenProvider`.You should define a custom '_query_token' method which fetches your token.See `Auth0TokenProvider` implementation for an example.### Create a batch of jobsThe package main component is a python object called `SDK` which can be used to create a `Batch`.A `Batch` is a group of jobs with the same sequence that will run on the same QPU. For each job of a given batch, you must set a value for each variable, if any, defined in your sequence.The batch sequence can be generated using [Pulser](https://github.com/pasqal-io/Pulser). See their [documentation](https://pulser.readthedocs.io/en/stable/),for more information on how to install the library and create your own sequence.The sequence should be a pulser sequence object. Once it's created, you can serialize like so:```pythonserialized_sequence = sequence.to_abstract_repr()```When creating a job, select a number of runs and set the desired values for the variables defined in the sequence:```pythonjob1 = {&quot;runs&quot;: 20, &quot;variables&quot;: {&quot;omega_max&quot;: 6}}job2 = {&quot;runs&quot;: 50, &quot;variables&quot;: {&quot;omega_max&quot;: 10.5}}```Then, send the batch of jobs to the QPU and wait for the results:```pythonbatch = sdk.create_batch(serialized_sequence, [job1,job2], wait=True)```You can also choose to run your batch on an emulator using the optional argument `emulator`.For using a basic single-threaded QPU emulator that can go up to 10 qubits, you can specify the &quot;EMU_FREE&quot; emulator:```pythonfrom pasqal_cloud.device import EmulatorTypebatch = sdk.create_batch(    serialized_sequence, [job1, job2], emulator=EmulatorType.EMU_FREE)```Once the API has returned the results, you can access them with the following:```pythonfor job in batch.ordered_jobs:    print(f&quot;job-id: {job.id}, status: {job.status}, result: {job.result}&quot;)```### Create a workloadA workload is a unit of work to be executed on Pasqal Cloud Services infrastructure.To submit a new workload, select a type, target one of the availablebackends and provide a configuration object to execute it.You can create a workload through the SDK with the following command:```pythonworkload=sdk.create_workload(workload_type=&quot;&lt;WORKLOAD_TYPE&gt;&quot;,backend=&quot;&lt;BACKEND&gt;&quot;,config={&quot;config_param_1&quot;:&quot;value&quot;})```You can cancel the workload by doing:```pythonsdk.cancel_workload(workload.id)```Or refresh the workload status/results by with the following:```pythonworkload=sdk.get_workload(workload.id)```Once the workload has been processed, you can fetch the result like this:```pythonprint(f&quot;workload-id: {workload.id}, status: {workload.status}, result: {workload.result}&quot;)```## Advanced usage### Extra emulator configurationSome emulators, such as EMU_TN and EMU_FREE, accept further configuration to control the emulation.This is because these emulators are more advanced numerical simulation of the quantum system.For EMU_TN you may add the integrator timestep in nanoseconds, the numerical accuracy desired in the tensor network compression, and the maximal bond dimension of tensor network state.```pythonfrom pasqal_cloud.device import EmulatorType, EmuTNConfigconfiguration = EmuTNConfig(dt = 10.0, precision = &quot;normal&quot;, max_bond_dim = 100)batch = sdk.create_batch(serialized_sequence, [job1,job2], emulator=EmulatorType.EMU_TN, configuration=configuration)```For EMU_FREE, you may add some default SPAM noise. Beware this makes your job take much longer.```pythonfrom pasqal_cloud.device import EmulatorType, EmuFreeConfigconfiguration = EmuFreeConfig(with_noise=True)batch = sdk.create_batch(serialized_sequence, [job1,job2], emulator=EmulatorType.EMU_FREE, configuration=configuration)```Replace the corresponding section in the code examples above with this to add further configuration.### List of supported device specificationsThe SDK provides a method to retrieve the device specs currently defined on PASQAL's cloud platform.They define the physical constraints of our QPUs, and these constraints enforce some rules onthe pulser sequence that can be run on QPUs (e.g., max number of atoms, available pulse channels, ...)```pythonsdk.get_device_specs_dict()```The method returns a dict object mapping a device type to a serialized device specs. These specs can be usedto instantiate a `Device` instance in the `Pulser` library.### Target different API endpointsThis is intended for the package developers or users which were given access to non-prodenvironments of the PASQAL cloud platform.To target a specific environment (`prod`, `preprod` or `dev`), instantiate the SDK class using`PASQAL_ENDPOINTS['env']` for the parameter `endpoints` and `AUTH0_CONFIG['env']` for`auth0` with env being the environment you want to target.Example:```pythonfrom pasqal_cloud import AUTH0_CONFIG, SDK, PASQAL_ENDPOINTSsdk = SDK(..., endpoints=PASQAL_ENDPOINTS['preprod'], auth0=AUTH0_CONFIG['preprod'])```By default, the targeted environment for `endpoints` and `auth0` is `prod`.</longdescription>
</pkgmetadata>