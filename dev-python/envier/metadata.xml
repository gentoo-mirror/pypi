<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;Envier&lt;/h1&gt;&lt;h2 align=&quot;center&quot;&gt;Python application configuration from the environment&lt;/h2&gt;## SynopsisEnvier is a Python library for extracting configuration from environmentvariables in a declarative and (eventually) 12-factor-app-compliant way.## UsageThe following example shows how to declare the configuration for an applicationthat uses the `MYAPP_DEBUG`, `MYAPP_SERVICE_HOST` and `MYAPP_SERVICE_PORT`variables from the environment.~~~ python&gt;&gt;&gt; from envier import Env&gt;&gt;&gt; &gt;&gt;&gt; class GlobalConfig(Env):&gt;&gt;&gt;     __prefix__ = &quot;myapp&quot;&gt;&gt;&gt;     &gt;&gt;&gt;     debug_mode = Env.var(bool, &quot;debug&quot;, default=False)&gt;&gt;&gt; &gt;&gt;&gt;     service_host = Env.var(str, &quot;service.host&quot;, default=&quot;localhost&quot;)&gt;&gt;&gt;     service_port = Env.var(int, &quot;service.port&quot;, default=3000)&gt;&gt;&gt; &gt;&gt;&gt;     _is_default_port = Env.der(bool, lambda c: c.service_port == c.spec.service_port.default)&gt;&gt;&gt; &gt;&gt;&gt; config = GlobalConfig()&gt;&gt;&gt; config.service_port3000&gt;&gt;&gt; config._is_default_portTrue~~~Configurations can also be nested to create namespaces:~~~ python&gt;&gt;&gt; from envier import Env&gt;&gt;&gt; &gt;&gt;&gt; class ServiceConfig(Env):&gt;&gt;&gt;     __prefix__ = &quot;service&quot;&gt;&gt;&gt; &gt;&gt;&gt;     host = Env.var(str, &quot;host&quot;, default=&quot;localhost&quot;)&gt;&gt;&gt;     port = Env.var(int, &quot;port&quot;, default=3000)&gt;&gt;&gt; &gt;&gt;&gt; class GlobalConfig(Env):&gt;&gt;&gt;     __prefix__ = &quot;myapp&quot;&gt;&gt;&gt;     &gt;&gt;&gt;     debug_mode = Env.var(bool, &quot;debug&quot;, default=False)&gt;&gt;&gt; &gt;&gt;&gt;     service = ServiceConfig&gt;&gt;&gt; &gt;&gt;&gt; config = GlobalConfig()&gt;&gt;&gt; config.service.port3000~~~The same configuration can be obtained with implicit nesting by declaring the`ServiceConfig` subclass inside `GlobalConfig`, and setting the class attribute`__item__` to the name of the item the sub-configuration should be assigned to,viz.~~~ python&gt;&gt;&gt; from envier import Env&gt;&gt;&gt; &gt;&gt;&gt; class GlobalConfig(Env):&gt;&gt;&gt;     __prefix__ = &quot;myapp&quot;&gt;&gt;&gt;     &gt;&gt;&gt;     debug_mode = Env.var(bool, &quot;debug&quot;, default=False)&gt;&gt;&gt; &gt;&gt;&gt;     class ServiceConfig(Env):&gt;&gt;&gt;         __item__ = __prefix__ = &quot;service&quot;&gt;&gt;&gt;         &gt;&gt;&gt;         host = Env.var(str, &quot;host&quot;, default=&quot;localhost&quot;)&gt;&gt;&gt;         port = Env.var(int, &quot;port&quot;, default=3000)&gt;&gt;&gt; &gt;&gt;&gt; config = GlobalConfig()&gt;&gt;&gt; config.service.port3000~~~## Type CheckingThe library ships with a `mypy` plugin to allow for type checking. If you wantto use it, either install the library with the `mypy` extra or ensure that`mypy` is installed, and then add `envier.mypy` to the list of extra plugins inthe `mypy` configuration.## Sphinx PluginThe library comes with a Sphinx plugin at `envier.sphinx` to allow generatingdocumentation from the configuration spec class directly. It exposes the``envier`` directive that takes a mandatory argument, the configuration specclass in the form `module:class`; additionally, the options `heading` and`recursive` can be used to control whether to add heading and whether torecursively get help information from nested configuration spec classesrespectively. By default, the plugin will display the table heading and will notrecurse over nested configuration spec classes.Here is an example for a configuration class `GlobalConfig` located in the`myapp.config` module. We omit the table header and recurse over nestedconfiguration.~~~ rst.. envier:: myapp.config:GlobalConfig   :heading: false   :recursive: true~~~## Roadmap- Add support for environment files.- Rely on type hints as support for older versions of Python is dropped.- Derivations might require an evaluation order.</longdescription>
</pkgmetadata>