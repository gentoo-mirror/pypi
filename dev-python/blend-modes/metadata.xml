<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Blend Modes===========This Python package implements blend modes for images.Description-----------The Blend Modes package enables blending different images, or imagelayers, by means of blend modes. These modes are commonly found ingraphics programs like `AdobePhotoshop &lt;http://www.adobe.com/Photoshop&gt;`__ or`GIMP &lt;https://www.gimp.org/&gt;`__.Blending through blend modes allows to mix images in a variety of ways.This package currently supports the following blend modes (name of therespective functions in the package in ``italics``):-  Soft Light (``blend_modes.soft_light``)-  Lighten Only (``blend_modes.lighten_only``)-  Dodge (``blend_modes.dodge``)-  Addition (``blend_modes.addition``)-  Darken Only (``blend_modes.darken_only``)-  Multiply (``blend_modes.multiply``)-  Hard Light (``blend_modes.hard_light``)-  Difference (``blend_modes.difference``)-  Subtract (``blend_modes.subtract``)-  Grain Extract (known from GIMP, ``blend_modes.grain_extract``)-  Grain Merge (known from GIMP, ``blend_modes.grain_merge``)-  Divide (``blend_modes.divide``)-  Overlay (``blend_modes.overlay``)-  Normal (``blend_modes.normal``)The intensity of blending can be controlled by means of an *opacity*parameter that is passed into the functions. See `Usage &lt;#usage&gt;`__ formore information.The Blend Modes package is optimized for speed. It takes advantage ofvectorization through Numpy. Further speedup can be achieved whenimplementing the package in Cython. However, Cython implementation isnot part of this package.Usage-----The blend mode functions take image data expressed as arrays as aninput. These image data are usually obtained through functions fromimage processing packages. Two popular image processing packages inPython are `PIL &lt;https://pypi.python.org/pypi/PIL&gt;`__ or its fork`Pillow &lt;https://pypi.python.org/pypi/Pillow/&gt;`__ and`OpenCV &lt;http://opencv.org/&gt;`__. The examples in this chapter show howto blend images using these packages.Input and Output Formats~~~~~~~~~~~~~~~~~~~~~~~~A typical blend mode operation is called like this:.. code:: python    blended_img = soft_light(bg_img, fg_img, opacity)The blend mode functions expect`Numpy &lt;https://pypi.python.org/pypi/numpy&gt;`__ float arrays in theformat [*pixels in dimension 1*,\ *pixels in dimension 2*,4] as aninput. Both images needs to have the same size, so the *pixels indimension 1* must be the same for ``bg_img`` and ``fg_img``. Sameapplies to the *pixels in dimension 2*. Thus, a valid shape of thearrays would be ``bg_img.shape == (640,320,4)`` and``fg_img.shape == (640,320,4)``.The order of the channels in the third dimension should be *R, G, B, A*,where *A* is the alpha channel. All values should be *floats* in therange *0.0 &lt;= value &lt;= 255.0*.The blend mode functions return arrays in the same format as the inputformat.Examples~~~~~~~~The following examples show how to use the Blend Modes package intypical applications.The examples are structured in three parts:1. Load background and foreground image. The foreground image is to be   blended onto the background image.2. Use the Blend Modes package to blend the two images via the &quot;soft   light&quot; blend mode. The package supports multiple blend modes. See the   `Description &lt;#description&gt;`__ for a full list.3. Display the blended image.PIL/Pillow Example^^^^^^^^^^^^^^^^^^The following example shows how to use the Blend Modes package with the`PIL &lt;https://pypi.python.org/pypi/PIL&gt;`__ or`Pillow &lt;https://pypi.python.org/pypi/Pillow/&gt;`__ packages... code:: python    from PIL import Image    import numpy    from blend_modes import soft_light    # Import background image    background_img_raw = Image.open('background.png')  # RGBA image    background_img = numpy.array(background_img_raw)  # Inputs to blend_modes need to be numpy arrays.    background_img_float = background_img.astype(float)  # Inputs to blend_modes need to be floats.    # Import foreground image    foreground_img_raw = Image.open('foreground.png')  # RGBA image    foreground_img = numpy.array(foreground_img_raw)  # Inputs to blend_modes need to be numpy arrays.    foreground_img_float = foreground_img.astype(float)  # Inputs to blend_modes need to be floats.    # Blend images    opacity = 0.7  # The opacity of the foreground that is blended onto the background is 70 %.    blended_img_float = soft_light(background_img_float, foreground_img_float, opacity)    # Convert blended image back into PIL image    blended_img = numpy.uint8(blended_img_float)  # Image needs to be converted back to uint8 type for PIL handling.    blended_img_raw = Image.fromarray(blended_img)  # Note that alpha channels are displayed in black by PIL by default.                                                    # This behavior is difficult to change (although possible).                                                    # If you have alpha channels in your images, then you should give                                                    # OpenCV a try.    # Display blended image    blended_img_raw.show()OpenCV Example^^^^^^^^^^^^^^The following example shows how to use the Blend Modes package with`OpenCV &lt;http://opencv.org/&gt;`__... code:: python    import cv2  # import OpenCV    import numpy    from blend_modes import soft_light    # Import background image    background_img_float = cv2.imread('background.png',-1).astype(float)    # Import foreground image    foreground_img_float = cv2.imread('foreground.png',-1).astype(float)    # Blend images    opacity = 0.7  # The opacity of the foreground that is blended onto the background is 70 %.    blended_img_float = soft_light(background_img_float, foreground_img_float, opacity)    # Display blended image    blended_img_uint8 = blended_img_float.astype(numpy.uint8)  # Convert image to OpenCV native display format    cv2.imshow('window', blended_img_uint8)    cv2.waitKey()  # Press a key to close window with the image.Installation------------The Blend Modes package can be installed through pip:``$ pip install blend_modes``Dependencies------------The Blend Modes package needs`Numpy &lt;https://pypi.python.org/pypi/numpy&gt;`__ to function correctly.For loading images the following packages have been successfully used:-  `PIL &lt;https://pypi.python.org/pypi/PIL&gt;`__-  `Pillow &lt;https://pypi.python.org/pypi/Pillow/&gt;`__-  `OpenCV &lt;http://opencv.org/&gt;`__See Also--------Blend modes are further described on`Wikipedia &lt;https://en.wikipedia.org/wiki/Blend_modes&gt;`__. An actualimplementation can be found in the `GIMP sourcecode &lt;https://git.gnome.org/browse/gimp/tree/app/operations/&gt;`__, e.g.in the file that describes the *division* operation,`gimpoperationdividecode.c &lt;https://git.gnome.org/browse/gimp/tree/app/operations/gimpoperationdividemode.c&gt;`__.Contribution------------I am happy about any contribution or feedback. Please let me know aboutyour comments via the Issues tab on`GitHub &lt;https://github.com/flrs/blend_modes/issues&gt;`__.License-------The Blend Modes package is distributed under the `MIT License(MIT) &lt;https://github.com/flrs/blend_modes/blob/master/LICENSE.txt&gt;`__.Please also take note of the licenses of the dependencies.</longdescription>
</pkgmetadata>