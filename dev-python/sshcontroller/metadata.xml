<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-sshcontrollerThis small package implements a simple interface to communicate and exchangedata with remote hosts via SSH. It is essentially a wrapper around theextensive SSH library [paramiko](https://github.com/paramiko/paramiko/).## InstallationRun:```pip3 install --user sshcontroller```Note that the package has been exclusively tested on Python 3.6+.## UsageAll code snippets can also be found at[demo.py](https://github.com/ojroques/python-sshcontroller/blob/main/examples/demo.py).#### 1. Create a new SSH controller from a SSH key```pythonimport sshcontrollerHOST_IP = &quot;93.184.216.34&quot;  # an IPv4 or IPv6 addressKEY_PWD = &quot;password&quot;ssh_controller = sshcontroller.SSHController(    host=HOST_IP,    user=&quot;olivier&quot;,    key_path=&quot;~/.ssh/id_rsa&quot;,  # if omitted, look for keys in SSH agent and in ~/.ssh/    key_password=KEY_PWD,      # optional    key_type=&quot;rsa&quot;,            # rsa (default), dsa, ecdsa or ed25519    port=22,                   # 22 is the default)```#### 2. Connect to remote host```pythonssh_controller.connect()```#### 3. Run a command```pythonexit_code, output = ssh_controller.run(    command=&quot;echo 'Hello world!' &gt; /tmp/hello.txt&quot;,    display=True,          # display output, disabled by default    capture=True,          # save output, disabled by default    shell=True,            # request a shell to run the command, enabled by default    combine_stderr=False,  # combine stderr into stdout when shell=False, disabled by default    timeout=10,            # command timeout in seconds, None (wait indefinitely) by default)print(f&quot;exit code: {exit_code}, output: {output}&quot;)```#### 4. Transfer data with SFTPAll functions from paramiko's `SFTPClient` are available through the`SSHController` object. Check[paramiko's documentation](http://docs.paramiko.org/en/stable/api/sftp.html#paramiko.sftp_client.SFTPClient)for a complete list.In addition, the package implements additional methods:* `exists(path)`: check that a file or a directory exists on the remote host* `list_dirs(path)`: return the list of directories present in `path`* `list_files(path)`: return the list of files present in `path````pythonprint(f&quot;hello.txt exists: {ssh_controller.exists('/tmp/hello.txt')}&quot;)print(f&quot;bonjour.txt exists: {ssh_controller.exists('/tmp/bonjour.txt')}&quot;)ssh_controller.get(&quot;/tmp/hello.txt&quot;, &quot;/tmp/bonjour.txt&quot;)with open(&quot;/tmp/bonjour.txt&quot;, 'r') as bonjour:    for line in bonjour:        print(line, end='')```#### 5. Disconnect```pythonssh_controller.disconnect()```#### 6. Use a SSH password instead of a key```pythonimport sshcontrollerHOST_IP = &quot;93.184.216.34&quot;  # an IPv4 or IPv6 addressSSH_PWD = &quot;password&quot;ssh_controller = sshcontroller.SSHController(    host=HOST_IP,    user=&quot;olivier&quot;,    ssh_password=SSH_PWD)ssh_controller.connect()```#### 7. Run a command until an event is setIf the argument `stop_event` (a `threading.Event` object) is set whencalling `run()`, the controller ignores `timeout` and stops when the givenevent is triggered instead. This is especially useful when using threads.The example below starts two threads with an event attached to each one:one is pinging `localhost`, the other sleeps for 10s. When the sleeping threadhas finished, events are triggered to also stop the pinging thread.```pythonimport loggingimport queueimport sshcontrollerimport threadingimport time# ... set up ssh_controller here ...output = queue.Queue()  # a queue to store the ping command outputstop_event_sleep = threading.Event()stop_event_ping = threading.Event()kwargs_sleep = {    &quot;command&quot;: &quot;echo 'thread sleep: sleeping for 10s' &amp;&amp; sleep 10s&quot;,    &quot;display&quot;: True,    &quot;stop_event&quot;: stop_event_sleep,}kwargs_ping = {    &quot;command&quot;: &quot;echo 'thread ping: starting ping' &amp;&amp; ping localhost&quot;,    &quot;display&quot;: True,    &quot;capture&quot;: True,    &quot;stop_event&quot;: stop_event_ping,}# call run() and store the command output in the queuedef wrapper(kwargs):    return output.put(ssh_controller.run(**kwargs))thread_sleep = threading.Thread(    target=ssh_controller.run, name=&quot;thread_sleep&quot;, kwargs=kwargs_sleep)thread_ping = threading.Thread(    target=wrapper, name=&quot;thread_ping&quot;, args=(kwargs_ping, ))thread_ping.start()thread_sleep.start()try:    thread_sleep.join()except KeyboardInterrupt:    logging.info(&quot;KeyboardInterrupt&quot;)finally:    logging.info(&quot;Stopping threads&quot;)    stop_event_sleep.set()    stop_event_ping.set()    time.sleep(2)exit_code, ping_output = output.get()logging.info(f&quot;thread ping exit code: {exit_code}&quot;)logging.info(f&quot;thread ping output length: {len(ping_output)}&quot;)ssh_controller.disconnect()```## License[GNU Lesser General Public License v2.1](https://github.com/ojroques/python-sshcontroller/blob/main/LICENSE)</longdescription>
</pkgmetadata>