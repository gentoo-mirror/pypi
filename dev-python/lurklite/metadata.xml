<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;    &lt;h1&gt;        &lt;img src=&quot;./lurklite.png&quot;            width=&quot;128&quot; alt=&quot; &quot; /&gt;        &lt;br/&gt;        lurklite    &lt;/h1&gt;&lt;/div&gt;![Python 3.6+] [![Available on PyPI.]](https://pypi.org/project/lurklite/) [![License: AGPLv3]](https://github.com/luk3yx/miniirc/blob/master/LICENSE.md)[Python 3.6+]: https://img.shields.io/badge/python-3.6+-blue.svg[Available on PyPI.]: https://img.shields.io/pypi/v/lurklite.svg[License: AGPLv3]: https://img.shields.io/pypi/l/lurklite.svgluk3yx's &quot;lightweightâ„¢&quot; IRC and Discord bot (excluding commands).## Official botIf you can't or don't want to run your own bot, you can request that theofficial bot be added to your channel. The official bot is on a few IRCnetworks, most notably Libera Chat and xeroxIRC. PM `luk3yx` there if you wantthe bot on an IRC channel you own. *Note that this IRC bot is running[Sopel](https://github.com/sopel-irc/sopel) and not lurklite, hopefully I'llrelease the API shim it uses sometime.*Alternatively, if you use Discord, you can use [https://bit.ly/lurkdiscord] toadd lurklite (without any permissions) to your Discord guild/server.[https://bit.ly/lurkdiscord]: https://discordapp.com/oauth2/authorize?&amp;client_id=525031486047387648&amp;scope=bot&amp;permissions=0## InstallationTo install lurklite, you can simply install it with `pipx install lurklite`.After installation, you should be able to run `lurklite`.## Config fileThe lurklite config file has a format similar to `ini` files. It must have a`[core]` section with the following values:```ini[core]# The tempcmd db, commands added with .tempcmd are stored here.# If you have msgpack installed, this database will be slightly smaller and#   faster to read/write to/from.command_db = /path/to/tempcmd/database# The bot's command prefix.prefix     = .# (Optional) A list of hostmasks to ignore.# ignored  = *!*@*/bot/*, baduser!*@*# (Optional) Disable &quot;Yay!&quot; and &quot;Ouch.&quot; replies.# disable_yay  = false# disable_ouch = false```### Connecting to IRC serversYou can then create sections starting with `irc.` (for example `irc.mynetwork`)to connect to IRC servers:```ini[irc.mynetwork]ip   = irc.example.comport = 6697nick = testbotchannels = #botwar,#other-channel# List of hostmasks to ignore (optional)# ignored = *!*@*/bot/*, *!*sopel*@*# List of hostnames for admins# admins = unaffiliated/user```The following optional values may be added to the above config, and are sentdirectly to [miniirc]:```iniconnect_modes = +gident         = identns_identity   = username passwordquit_message  = Quit messagerealname      = realnamessl           = true```### Connecting to Matrix serversYou can connect to Matrix (using [miniirc_matrix]) with this config section:```ini[matrix]homeserver = example.comtoken = your-matrix-tokenadmins = @yourusername:example.com```Obtaining a token is currently not very straightforward. You can use thefollowing Python code. Note that if you execute this in an interactive Pythonshell it will likely save both the username and password in its history file.```pyimport miniirc_matrixprint(miniirc_matrix.login('example.com', 'botusername', 'password'))```The bot will automatically accept invites from admins.### Connecting to Discord serversYou can also connect to Discord servers (via [miniirc_discord]) with thefollowing config section:```ini[discord]# You need miniirc_discord installed for this to work.token    = your-discord-token# Using user IDs instead of username#discriminator improves security.# admins = username#1234, userid```You can only have one Discord connection per bot process, and lurklite will useslightly more RAM if `[discord]` exists, as [miniirc_discord] will be imported(and if you don't specify a Discord bot token, [miniirc_discord] won't beimported).### Storing the command database in an ASCII-safe format.If you have the habit of opening and modifying `commands.db` in a text editor,it might be a good idea to store it with JSON by adding the following to yourconfiguration file:```ini[tempcmds]db_format = json```*Note that this will very slightly degrade performance and increase the size,however this should be a negligible amount for most purposes.*## Creating commandsOnce your bot has connected to IRC (or Discord), you can use `tempcmd` tocreate (permanent) commands. You can either do`.tempcmd &lt;command&gt; &lt;type&gt; &lt;code&gt;` to add a tempcmd with a set type, or`.tempcmd &lt;command&gt; &lt;code&gt;` to auto-detect the type (as long as the first wordin `&lt;code&gt;` is not a valid type).*For now, tempcmds.py has a list of code types/formats and what they do.*To delete commands, you can use `tempcmd del/delete/remove &lt;command&gt;`. To createa command called `del`, `delete` or `remove`, you can prepend your bot's prefixto the command name.### Creating non-&quot;tempcmd&quot; commandsIf you want more fine-grained control over a command, you can add a`custom_cmds` line to the `[core]` section of config.ini. The file specifiedwill be loaded and can define more powerful commands, for example:```py# A simple version command# The &quot;requires_admin&quot; parameter is optional and defaults to False.@register_command('version', requires_admin=False)def version_command(irc, hostmask, is_admin, args):    # irc: The miniirc.IRC (or miniirc_discord.Discord) object.    # hostmask: The hostmask tuple, mostly from miniirc. Note that relayed    #   messages (for example &quot;&lt;relayed_user&gt; test&quot;) will have a hostmask    #   similar to ('relayed_user@relay_bot', 'relay_bot_ident',    #       'relay.bot.host/relayed/relayed_user').    # is_admin: Either `False` or a string with the admin match (for example    #   a hostmask or Discord tag.    # args: [&quot;#channel&quot;, &quot;command parameters&quot;]    #   For PMs, &quot;#channel&quot; will be the sender (hostmask[0]).    irc.msg(args[0], miniirc.version)```*You do not have to import anything to get `register_command`.*If `custom_cmds` is a directory, all `.py` files in that directory will beloaded. If you want your custom commands file/directory in lurklite's sourcedirectory, you can name it `custom_cmds.py` (or, for directories, `custom_cmds`or `commands`) to make `git` ignore it.## Built-in commandslurklite has the following built-in commands: - `reboot`: Reboot the bot. - `tempcmd`: Create and delete commands. - `version`: Display the miniirc version and quit.## Migrating from very old versions of lurkliteOlder versions of lurklite (pre-v0.1.0) had a `tempcmds.db` created using`repr()`. This is slow(-ish) and inefficient, so is no longer supported. If youstill have a pre-v0.1.0 `tempcmds.db`, you can run`tempcmds_migrate.py` to update it to the new msgpack/JSON format.[miniirc]: https://github.com/luk3yx/miniirc[miniirc_matrix]: https://github.com/luk3yx/miniirc_matrix[miniirc_discord]: https://github.com/luk3yx/miniirc_discord</longdescription>
</pkgmetadata>