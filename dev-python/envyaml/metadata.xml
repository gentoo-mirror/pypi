<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># EnvYAML | Easy configuration file parser for structured data[![Latest Version](https://pypip.in/version/envyaml/badge.svg)](https://pypi.python.org/pypi/envyaml/)[![EnvYaml CI/CD Pipeline](https://github.com/thesimj/envyaml/actions/workflows/main.yml/badge.svg?branch=main)](https://github.com/thesimj/envyaml/actions/workflows/main.yml)[![Coverage Status](https://coveralls.io/repos/github/thesimj/envyaml/badge.svg?branch=master)](https://coveralls.io/github/thesimj/envyaml?branch=master)![Versions](https://img.shields.io/pypi/pyversions/envyaml.svg)[![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Alerts](https://img.shields.io/lgtm/alerts/g/thesimj/envyaml.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/thesimj/envyaml/alerts/)[![Code Quality](https://img.shields.io/lgtm/grade/python/g/thesimj/envyaml.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/thesimj/envyaml/context:python)[![License](https://img.shields.io/pypi/l/envyaml.svg)](LICENSE)### MotivationModern configuration files become to be more and more complex, flexible, and readable.YAML file format is perfect to store configuration but had no option to pass environment variables. They give flexibility, readability and provide an option to store complex data structure.This project goal is to simplify usage of the YAML file and environment variables as program configuration files with easy config key access.### Install```bashpip install envyaml```### Basic usageLet's assume we had a project with this config file `env.yaml````yaml# env.yamlproject:  name: &quot;${PROJECT_NAME}-${PROJECT_ID}&quot;database:    host: $DATABASE_HOST    port: 3301    username: username    password: $DATABASE_PASSWORD    database: test    table:      user: table_user      blog: table_blog    query: |-      SELECT * FROM &quot;users&quot; WHERE &quot;user&quot; = $1 AND &quot;login&quot; = $2 AND &quot;pwd&quot; = $3    insert: |-      INSERT INTO &quot;{table}&quot; (user, login) VALUES ($1, $2)redis:    host: $REDIS_HOST|127.0.0.1    port: 5040    db: $REDIS_DB|3 # with default value    config:      expire: 300      prefix: $REDIS_PREFIXescaped: $$.extraempty_env: $NOT_EXIST_ENV_VARIABLE```Environment variables set to```PROJECT_NAME=simple-helloPROJECT_ID=42DATABASE_HOST=xxx.xxx.xxx.xxxDATABASE_PASSWORD=super-secret-passwordREDIS_PREFIX=state```Parse file with `EnvYAML````pythonfrom envyaml import EnvYAML# read file env.yaml and parse configenv = EnvYAML('env.yaml')# access project nameprint(env['project.name'])# &gt;&gt; simple-hello-42# access whole database sectionprint(env['database'])# {# 'database': 'test',# 'host': 'xxx.xxx.xxx.xxx',# 'password': 'super-secret-password',# 'port': 3301,# 'table':#   {#       'blog': 'table_blog',#       'user': 'table_user'#   },# 'username': 'username'# }# access database host value as key itemprint(env['database.host'])# &gt;&gt; xxx.xxx.xxx.xxx# access database user table value as key itemprint(env['database.table.user'])# &gt;&gt; table_user# get sql query with $1,$2,$3 variablesprint(env['database.query'])# &gt;&gt; SELECT * FROM &quot;users&quot; WHERE &quot;user&quot; = $1 AND &quot;login&quot; = $2 AND &quot;pwd&quot; = $3# using default values if variable not defined# one example is redis host and redis port, when $REDIS_HOST not set then default value will be usedprint(env['redis.host'])# &gt;&gt; 127.0.0.1# one example is redis host and redis port, when $REDIS_DB not set then default value will be usedprint(env['redis.db'])# &gt;&gt; 3# access list items by numberprint(env['list_test'][0])# &gt;&gt; one# access list items by number as keyprint(env['list_test.1'])# &gt;&gt; two# test if you have keyprint('redis.port' in env)# &gt;&gt; True```Access config with `get` function and default value```pythonprint(env.get('not.exist.value', 'default'))# &gt;&gt; defaultprint(env.get('empty_env', 'default'))# &gt;&gt; defaultprint(env['empty_env'])# &gt;&gt; None```Use `format` function to update placeholder```pythonprint(env.format('database.insert', table=&quot;users&quot;))# &gt;&gt; INSERT INTO &quot;users&quot; (user, login) VALUES ($1, $2)```### Strict modeThis mode is **enable by default** and prevents from declaring variables that do not exist in `environment variables` or `.env` file. This leads to having runtime `ValueError` exception when variables do not define with message `Strict mode enabled, variable $VAR not defined!`. To disable **strict** mode specify `strict=False` at EnvYAML object initialization. Another option to disable `strict` mode is to define `ENVYAML_STRICT_DISABLE` environment variable before initializing EnvYAML object.### Escaped variablesIn case of usage `$` in env.yaml file as value double `$$` should be used. Example:Use `escaped` variable```pythonprint(env['escaped'])# &gt;&gt; $.extra```### LicenseMIT licensed. See the [LICENSE](LICENSE) file for more details.</longdescription>
</pkgmetadata>