<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyboltFast text processing acceleration.一个快速的文本处理及NLP工具.当前0.0.1测试版:- 纯python实现- 实现了关键词查找和替换功能- 实现了任意维的词汇共现判别- 实现了从海量语料无监督生成分词词库- 注意事项:为了兼容中英混合语料,提取关键词不适用于英文词中包含更小的英文词的情况;## 安装pybolt```shell scriptpip install py-bolt```## 使用试例### Extract keywords```pythonfrom pybolt import bolt_textbolt_text.add_keywords([&quot;清华&quot;, &quot;清华大学&quot;])found_words = bolt_text.extract_keywords(&quot;我收到了清华大学的录取通知书.&quot;)print(found_words)# ['清华', '清华大学']found_words = bolt_text.extract_keywords(&quot;我收到了清华大学的录取通知书.&quot;, longest_only=True)print(found_words)# ['清华大学']```### Batch extract keywords```pythonfrom pybolt import bolt_textdef get_lines():    yield &quot;我考上了清华大学&quot;    yield &quot;我梦见我考上了清华大学&quot;bolt_text.add_keywords([&quot;清华&quot;, &quot;清华大学&quot;])for df in bolt_text.batch_extract_keywords(get_lines(), concurrency=10000000):    for _, row in df.iterrows():        print(row.example, row.keywords)```### Replace keywords```pythonfrom pybolt import bolt_textbolt_text.add_replace_map({&quot;清华大学&quot;: &quot;北京大学&quot;})sentence = bolt_text.replace_keywords(&quot;我收到了清华大学的录取通知书.&quot;)print(sentence)# &quot;我收到了北京大学的录取通知书.&quot;```### Batch replace keywords```pythonfrom pybolt import bolt_textdef get_lines():    yield &quot;我考上了清华大学&quot;    yield &quot;我梦见我考上了清华大学&quot;bolt_text.add_replace_map({&quot;清华大学&quot;: &quot;北京大学&quot;})for df in bolt_text.batch_extract_keywords(get_lines(), concurrency=10000000):    for _, row in df.iterrows():        print(row.example)```### Co-occurrence word recognition```pythonfrom pybolt import bolt_textbolt_text.add_co_occurrence_words([&quot;小明&quot;, &quot;清华&quot;], &quot;高考&quot;)res, tag = bolt_text.is_co_occurrence(&quot;小明考上了清华大学&quot;)print(res, tag)# True 高考```### Batch text processor```pythonfrom pybolt import bolt_textdef get_lines():    yield &quot;小明考上了清华大学&quot;    yield &quot;小明做梦的时候考上了清华大学&quot;    yield &quot;大明做梦的时候考上了清华大学&quot;def my_processor(line):    if line.startswith(&quot;小明&quot;):        return True    return Nonefor df in bolt_text.batch_text_processor(get_lines(), my_processor):    df = df[df[&quot;processor_result&quot;].notna()]    print(df.head())```### Text normalize```pythonfrom pybolt import bolt_textprint(bolt_text.normalize(&quot;⓪⻆🈚&quot;))```### Text clean```pythonimport refrom pybolt import bolt_text_pattern = re.compile(&quot;([^\u4E00-\u9FD5\u9FA6-\u9FEF\u3400-\u4DB5a-zA-Z0-9 +]+)&quot;, re.U)print(bolt_text.clean(&quot;aaaaa+++++.....abcadf    ga   a&quot;, pattern=_pattern, pattern_replace=&quot;&quot;, normalize=True, crc_cut=3))```### Word discover```pythonfrom pybolt.bolt_nlp import WordDiscoverwd = WordDiscover()wd.word_discover([&quot;examples.txt&quot;])# will save the new_words.vocab in execution directory```## 性能测试了关键词查找功能,单句速度相对[flashtext](https://github.com/vi3k6i5/flashtext)提升了30%,批操作速度相对[flashtext](https://github.com/vi3k6i5/flashtext)提升了260%.</longdescription>
</pkgmetadata>