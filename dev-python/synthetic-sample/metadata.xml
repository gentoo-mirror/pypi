<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># synthetic_samplesynthetic_sample is a data generation application for producing synthetic sales transactions over a time series, including associated shipment and product data## UsageSample data is generated by running `synthetic_sample_generator.py`  and using``` python3 synthetic_sample_generator.py --json_filepath JSON_FILEPATH --output_directory OUTPUT_DIRECTORY --create_records```where- `json_filepath` is the filepath to the input JSON (see Request Requirements below)- `output_directory` is the directory to save output data to, in CSV format- `create_records` is a flag that  indicates that raw record data should also be saved to the output directory. Running without this flag results in only aggregate output data## Request RequirementsThe required input format is a JSON with the following fields:- Required:   - `start_date`: date in the first period to include, e.g. if 2020/02/15 is provided, the full week of that date will be included  - `end_date`: date in the last period to include, e.g. if 2020/02/15 is provided, the full week of that date will be included  - `annual_growth_factor`: year over year growth factor, 10% growth corresponds to a value of 1.1  - `period_type`: indicates what type of curve to generate, supports &quot;month&quot; or &quot;week&quot;  - at least one of     - `total_sales`: total number of sales for the period    - `total_packages`: total number of packages shipped for the period    - `total_quantity`: total number of items sold for the period    - `annual_sales`: annualized number of sales for the period    - `annual_packages`: annualized number of packages shipped for the period    - `annual_quantity`: annualized number of items sold for the period  - `curve_definition`: Definition of the curve to create, either as a list of dictionaries with each feature or as a     string indicating the name of the default curve to use.    - If a list of dictionaries is provided, they must adhere to the following structure      - Required Keys:        - `anchor_type`: Type of annual anchor used to define the feature          - Possible Values: &quot;holiday&quot;, &quot;week_of_year&quot;, &quot;month_of_year&quot;, &quot;day_of_year&quot;        - `anchor_point`: Annual point to define the feature          - Possible values: (string) - holiday name, (int) - week or day of year        - `anchor_value`: Cumulative percent of total sales (0.0-1.0) completed by the end of the period of the anchor_point      - Optional Keys:        - `relative_start`: Number of periods before the anchor_point to define a relative cumulative percent value         - `start_value`: Cumulative percent of total sales (0.0-1.0) completed by the end of the period indicated by relative_start        - `relative_end`: Number of periods before the anchor_point to define a relative cumulative percent value        - `end_value`: Cumulative percent of total sales (0.0-1.0) completed by the end of the period indicated by relative_end    - If a string is provided, it must correspond to a default in `synthetic_sample/defaults/curves/{period_type}/{curve_definition}.json`      - Initial set of available curves are        - `modern_brand`        - `modern_distributor`        - `traditional_brand`        - `traditional_distributor`- Optional:   - `default_type`: string indicating the type of defaults to use, these can be found as JSON in `synthetic_sample/defaults/lib/`  - `product_distribution`: dictionary of product labels (i.e. SKUs) and their relative weights  - `week_distribution`: dictionary of weeks of the month (where 1 is the first week and -1 is the last) and their relative weights  - `weekday_distribution`: dictionary of weekdays (where 0 is Monday and 6 is Sunday) and their relative weights  - `seasonal_distribution`: dictionary of seasons (&quot;Q1&quot;...&quot;Q4&quot;) and their relative weights  - `modifiers`: list of any modifiers to apply.     - &quot;covid&quot;: Applies a 33% boost to all periods between 2020/3/26 and 2021/9/1### Example:The below request will generate data for each month starting 2018-06 and ending 2020-12.```JSON{  &quot;start_date&quot;: &quot;2018-06-01&quot;,  &quot;end_date&quot;: &quot;2020-12-31&quot;,  &quot;total_sales&quot;: 1000000,  &quot;total_packages&quot;: 1500000,  &quot;total_quantity&quot;: 6000000,  &quot;annual_growth_factor&quot;: 1.15,  &quot;product_distribution&quot;: {    &quot;AAA-01&quot; : 1,    &quot;AAA-02&quot; : 2.5,    &quot;AAA-11&quot; : 5.6,    &quot;BBB-10&quot; : 0.5,    &quot;BBB-20&quot; : 1  },  &quot;week_distribution&quot;: {    &quot;1&quot;: 0.1,    &quot;-1&quot;: 0.5  },  &quot;weekday_distribution&quot;: {    &quot;0&quot;: 0.0,    &quot;1&quot;: 0.0,    &quot;2&quot;: 0.0,    &quot;3&quot;: 0.0,    &quot;4&quot;: 0.0,    &quot;5&quot;: 2.0,    &quot;6&quot;: 1.0  },  &quot;seasonal_distribution&quot;: {    &quot;Q1&quot;: 1,    &quot;Q2&quot;: 1,    &quot;Q3&quot;: 1,    &quot;Q4&quot;: 1  },  &quot;period_type&quot;: &quot;month&quot;,  &quot;curve_definition&quot;: [    {      &quot;anchor_type&quot;: &quot;month_of_year&quot;,      &quot;anchor_point&quot;: 1,      &quot;anchor_value&quot;: 0.0424    },    {      &quot;anchor_type&quot;: &quot;month_of_year&quot;,      &quot;anchor_point&quot;: 2,      &quot;anchor_value&quot;: 0.103    },    {      &quot;anchor_type&quot;: &quot;month_of_year&quot;,      &quot;anchor_point&quot;: 3,      &quot;anchor_value&quot;: 0.203    },    {      &quot;anchor_type&quot;: &quot;month_of_year&quot;,      &quot;anchor_point&quot;: 4,      &quot;anchor_value&quot;: 0.3152    },    {      &quot;anchor_type&quot;: &quot;month_of_year&quot;,      &quot;anchor_point&quot;: 5,      &quot;anchor_value&quot;: 0.4139    },    {      &quot;anchor_type&quot;: &quot;month_of_year&quot;,      &quot;anchor_point&quot;: 6,      &quot;anchor_value&quot;: 0.4776    },    {      &quot;anchor_type&quot;: &quot;month_of_year&quot;,      &quot;anchor_point&quot;: 7,      &quot;anchor_value&quot;: 0.5321    },    {      &quot;anchor_type&quot;: &quot;month_of_year&quot;,      &quot;anchor_point&quot;: 8,      &quot;anchor_value&quot;: 0.5897    },    {      &quot;anchor_type&quot;: &quot;month_of_year&quot;,      &quot;anchor_point&quot;: 9,      &quot;anchor_value&quot;: 0.6715    },    {      &quot;anchor_type&quot;: &quot;month_of_year&quot;,      &quot;anchor_point&quot;: 10,      &quot;anchor_value&quot;: 0.7836    },    {      &quot;anchor_type&quot;: &quot;month_of_year&quot;,      &quot;anchor_point&quot;: 11,      &quot;anchor_value&quot;: 0.9018    },    {      &quot;anchor_type&quot;: &quot;month_of_year&quot;,      &quot;anchor_point&quot;: 12,      &quot;anchor_value&quot;: 1.0    }  ]}```</longdescription>
</pkgmetadata>