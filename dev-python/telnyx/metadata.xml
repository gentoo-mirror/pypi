<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Telnyx Python Library[![image](https://img.shields.io/pypi/v/telnyx.svg)][pypi][![image](https://img.shields.io/pypi/l/telnyx.svg)][pypi][![image](https://img.shields.io/pypi/pyversions/telnyx.svg)][pypi][![Build Status](https://github.com/team-telnyx/telnyx-python/workflows/Python/badge.svg)][Actions][![Coverage Status](https://coveralls.io/repos/github/team-telnyx/telnyx-python/badge.svg?branch=master)][coveralls][![Join Slack](https://img.shields.io/badge/join-slack-infomational)](https://joinslack.telnyx.com/)[pypi]: https://pypi.org/project/telnyx/[Actions]: https://github.com/team-telnyx/telnyx-python/actions[coveralls]: https://coveralls.io/github/team-telnyx/telnyx-python?branch=masterThe Telnyx Python library provides convenient access to the Telnyx API fromapplications written in the Python language. It includes a pre-defined set ofclasses for API resources that initialize themselves dynamically from APIresponses which makes it compatible with a wide range of versions of the TelnyxAPI.## DocumentationSee the [API Reference](https://developers.telnyx.com/docs/api/v2/overview) and the [Setup Guides](https://developers.telnyx.com/docs/v2/development/dev-env-setup).## InstallationYou don't need this source code unless you want to modify the package. If you justwant to use the package, just run:    pip install --upgrade telnyxInstall from source with:    python setup.py install### Non x86/x86_64 ProcessorsThe `telnyx` package is distributed as a wheel (pre-compiled package) for easyinstallation. The wheel is built only for x86/x86_64 processors. Wheninstalling the package on a different architecture, like ARM, the `pip`installer will fall back to installing from source. As a result, you willneed to ensure you have the additional dependencies installed. This willaffect you if you're using a Raspberry Pi, for example.For ARM specifically, as an alternative to a source install, you could lookinto using https://www.piwheels.org/ for ARM compiled wheels.### Requirements- Python 2.7 or 3.5+ (PyPy supported)#### Additional Requirements for Source Install- build-essentials (gcc, make)- python-dev- libffi-dev_These packages are listed as they are named on Ubuntu._## UsageThe library needs to be configured with your account's API Key which isavailable in your [Telnyx Dashboard][api-keys]. Set `telnyx.api_key` to itsvalue:```pythonimport telnyxtelnyx.api_key = &quot;KEY01234_yoursecretkey&quot;# Retrieve single Messaging Profiletelnyx.MessagingProfile.retrieve(&quot;123&quot;)# List Messaging Profilesprofiles = telnyx.MessagingProfile.list()# Retrieve next page of list resultsprofiles.next_page()# Loop over all page resultsfor page in profiles.auto_paging_iter():    print(page)```You can read more about our API Keys [here](https://developers.telnyx.com/docs/v2/development/authentication).### Per-Request ConfigurationFor apps that need to use multiple keys during the lifetime of a process,it's also possible to set a per-request key and/or account:```pythonimport telnyx# list messaging profilestelnyx.MessagingProfile.list(    api_key=&quot;super-secret...&quot;,)# retrieve single messaging profiletelnyx.MessagingProfile.retrieve(    &quot;123&quot;,    api_key=&quot;other-secret...&quot;,)```### Configuring an HTTP ClientThe library can be configured to use `urlfetch`, `requests`, `pycurl`, or`urllib2` with `telnyx.default_http_client`:```pythonclient = telnyx.http_client.UrlFetchClient()client = telnyx.http_client.RequestsClient()client = telnyx.http_client.PycurlClient()client = telnyx.http_client.Urllib2Client()telnyx.default_http_client = client```Without a configured client, by default the library will attempt to loadlibraries in the order above (i.e. `urlfetch` is preferred with `urllib2` usedas a last resort). We usually recommend that people use `requests`.### Configuring a ProxyA proxy can be configured with `telnyx.proxy`:```pythontelnyx.proxy = &quot;https://user:pass@example.com:1234&quot;```### Configuring Automatic RetriesNumber of automatic retries on requests that fail due to an intermittentnetwork problem can be configured:```pythontelnyx.max_network_retries = 2```### Reserved word keyword argumentsThe Telnyx API includes `from` as an attribute that can be set on messages.`from` is also a reserved word in Python. If you would like to use keywordarguments where an argument is a reserved word you can add the suffix `_` e.g.```telnyx.Message.create(    to=&quot;+18665550001&quot;,    from_=&quot;+18445550001&quot;,    text=&quot;Foo&quot;)```The argument will be automatically rewritten to `from` in the keyword arguments dict.&gt; Pro Tip: You can alternatively unpack a dictionary like so:&gt; ```python&gt; message = {&gt;     &quot;from&quot;: &quot;+18445550001&quot;,&gt;     &quot;to&quot;: &quot;+18665550001&quot;,&gt;     &quot;text&quot;: &quot;Foo&quot;,&gt; }&gt; telnyx.Message.create(**message)&gt; ```### LoggingThe library can be configured to emit logging that will give you better insightinto what it's doing. The `info` logging level is usually most appropriate forproduction use, but `debug` is also available for more verbosity.There are a few options for enabling it:1. Set the environment variable `TELNYX_LOG` to the value `debug` or `info`   ```   $ export TELNYX_LOG=debug   ```2. Set `telnyx.log`:   ```py   import telnyx   telnyx.log = 'debug'   ```3. Enable it through Python's logging module:   ```py   import logging   logging.basicConfig()   logging.getLogger('telnyx').setLevel(logging.DEBUG)   ```### Writing a PluginIf you're writing a plugin that uses the library, we'd appreciate it if youidentified using `telnyx.set_app_info()`:```pytelnyx.set_app_info(&quot;MyAwesomePlugin&quot;, version=&quot;1.2.34&quot;, url=&quot;https://myawesomeplugin.info&quot;)```This information is passed along when the library makes calls to the TelnyxAPI.## DevelopmentThe test suite depends on [telnyx-mock], so make sure to fetch and run it from abackground terminal ([telnyx-mock's README][telnyx-mock] also containsinstructions for installing via Homebrew and other methods):    go get -u github.com/team-telnyx/telnyx-mock    telnyx-mockInstall [pipenv][pipenv], then install all dependencies for the project:    pipenv install --devRun all tests on all supported Python versions:    make testRun all tests for a specific Python version (modify `-e` according to your Python target):    pipenv run tox -e py27Run all tests in a single file:    pipenv run tox -e py27 -- tests/api_resources/abstract/test_updateable_api_resource.pyRun a single test suite:    pipenv run tox -e py27 -- tests/api_resources/abstract/test_updateable_api_resource.py::TestUpdateableAPIResourceRun a single test:    pipenv run tox -e py27 -- tests/api_resources/abstract/test_updateable_api_resource.py::TestUpdateableAPIResource::test_saveRun the linter with:    make lintThe library uses [Black][black] for code formatting. Code must be formattedwith Black before PRs are submitted, otherwise CI will fail. Run the formatterwith:    make fmt### Adding a new endpoint1. Define a class for the object that the endpoint interacts with under`telnyx/api_resources/`. The path name singularized should typically matchthe record type of the object returned e.g. `/v2/available_phone_numbers`returns a list of objects with the record_type `available_phone_number`.Inherit from the classes that define the behavior available on the endpoint,one or more of `CreateableAPIResource`, `DeletableAPIResource`,`ListableAPIResource`, `UpdateableAPIResource`.2. Import your class in `telnyx/api_resources/__init__.py`.3. Add your new class to the `OBJECT_CLASSES` block in `telnyx/util.py`.4. Add tests for your new class under `tests/api_resources/`.[api-keys]: https://portal.telnyx.com/#/app/auth/v2[black]: https://github.com/ambv/black[pipenv]: https://github.com/pypa/pipenv[telnyx-mock]: https://github.com/team-telnyx/telnyx-mock## Releasing1. Update version in    * `setup.py`  (in the `setup()` call, the `version` kwarg)    * `telnyx/__init__.py`  (the `__version__` string)2. Create new branch, add changes, commit, and push3. Ensure commit passes tests in [Travis][travis-telnyx-python]4. Tag that commit with `git tag -a v{VERSION} -m &quot;Release v{VERSION}&quot;`, and push the tag `git push --follow-tags`5. Ensure checked out copy is entirely clean (best to create a new environment...)6. `make dists`7. *If you haven't done it before*, download the upload API keys from LastPass (search for &quot;pypi&quot;) and put the contents between &quot;PYPIRC FILE&quot; tags into `~/.pypirc-telnyx`.8. `make testupload`, check that it looks OK on PyPI and that it's installable via `pip`.9. `make liveupload`, repeat checks for live version.10. Ta-da.[travis-telnyx-python]: https://travis-ci.org/team-telnyx/telnyx-python## AcknowledgmentsThe contributors and maintainers of Telnyx Python would like to extend theirdeep gratitude to the authors of [Stripe Python][stripe-python], upon whichthis project is based. Thank you for developing such elegant, usable, andextensible code and for sharing it with the community.[stripe-python]: https://github.com/stripe/stripe-python&lt;!--# vim: set tw=79:--&gt;</longdescription>
</pkgmetadata>