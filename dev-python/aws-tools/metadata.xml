<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>aws-tools=========.. image:: https://img.shields.io/pypi/v/aws-tools.svg?maxAge=0    :target: https://pypi.org/project/aws-tools/    :alt: PyPIThis package provides tools for AWS platform, such as:-  switching between multiple accounts-  renewing API access keysand others.The main reason why aws-tools came to be, was using `awscli`_ with different access keys in the secure and easy way.How it works------------Switching between AWS accounts:::    $ awsenv test    &lt;test&gt; $ aws s3 ls    ...list of S3 objects on TEST environment...    ### Explanation:    ### &lt;test&gt; $ env | grep AWS    ### AWS_SECRET_ACCESS_KEY=w0bM0rucARITPOUpcyAaX3iI9lGjJo7g8UUCUxIv    ### AWS_ACCESS_KEY_ID=AKIAJPVK7VGH6CBZT5EQ    ### AWS_ENV=test    &lt;test&gt; $ awsenv prod    &lt;prod&gt; $ aws s3 ls    ...list of S3 objects on PROD environment...    ### Explanation:    ### &lt;prod&gt; $ env | grep AWS    ### AWS_SECRET_ACCESS_KEY=P8crbSIvQ/Au0jfnW8XER9eJKxpQdYqpRVz5QxKo    ### AWS_ACCESS_KEY_ID=AKIAJ4F26CMBPI1HF7MQ    ### AWS_ENV=prodRenewing AWS API access keys:::    $ awsenv prod    ### Explanation:    ### &lt;prod&gt; $ env | grep AWS    ### AWS_SECRET_ACCESS_KEY=P8crbSIvQ/Au0jfnW8XER9eJKxpQdYqpRVz5QxKo    ### AWS_ACCESS_KEY_ID=AKIAJ4F26CMBPI1HF7MQ    ### AWS_ENV=prod    &lt;prod&gt; $ awsroll prod    Rolled key for env prod: AccessKeyId=****************ZKQFQ; CreateDate=2018-11-14 13:10:04+00:00    &lt;prod&gt; $ awsenv prod    ### Explanation:    ### &lt;prod&gt; $ env | grep AWS    ### AWS_SECRET_ACCESS_KEY=napb9J2RKzsSiTIjLRavN09qIfFzrMo7846zr2ou    ### AWS_ACCESS_KEY_ID=AKIAJTGB6EFV7F4ZKQFQ    ### AWS_ENV=prodGetting started---------------..    Prerequisites:    aws-tools requires gpg (version &gt;= 2.X) to decrypt/encrypt your AWS credentials.Install necessary packages, and generate a new key pair:::    $ sudo apt-get install gpg gpg-agent    $ gpg --gen-key..    This document covers only gpg commands required to run aws-tools! If    you need to use other gpg parameters, go to gpg documentation.Configure your region using `awscli`_ if you haven't done that yet:::    $ aws configure    AWS Access Key ID [None]:    AWS Secret Access Key [None]:    Default region name [None]: eu-west-1    Default output format [None]:..    Do not provide any keys here!Installation~~~~~~~~~~~~Simply run:::    $ pip install --user aws-toolsConfiguration~~~~~~~~~~~~~AWS Credentials^^^^^^^^^^^^^^^In ``~/.aws`` directory create temporary ``env.&lt;environment&gt;.conf`` filefor each AWS environment.For example, if you have 3 AWS environments: TEST, STAGE and PROD, thereshould be 3 config files in ``~/.aws`` directory:::    env.test.conf    env.stage.conf    env.prod.confEdit each file:.. code:: cfg    [default]    aws_access_key_id = &lt;your_environment_specific_access_key_id&gt;    aws_secret_access_key = &lt;your_environment_specific_secret_access_key&gt;Encrypt each file with gpg:::    $ gpg --encrypt --armor --output env.&lt;environment&gt;.conf.asc -r &lt;your-gpg-user-id-name&gt; env.&lt;environment&gt;.confand remove temporary ``env.*.conf`` files!..    Run ``gpg -K`` to find out what is your ``&lt;your-gpg-user-id-name&gt;``Shell^^^^^aws-tools comes with handy command completion and bash prompt features.Simply add to your ``~/.bashrc``:.. code:: cfg    source $HOME/.local/bin/aws_tools_completion.bash 2&gt;/dev/null    export PS1=&quot;\$(__awsenv_ps1 2&gt;/dev/null)${PS1}&quot;SMTP credentials (optional)^^^^^^^^^^^^^^^^^^^^^^^^^^^This step is helpful if you want to send renewed AWS access keys to anemail.In ``~/.aws`` directory create temporary ``smtp.cfg`` file.Edit smtp settings:.. code:: cfg    smtplogin = &lt;your_full_smtp_login&gt;    smtppass = &lt;your_password&gt;    smtphost = &lt;smtp_host&gt;    smtpport = &lt;smtp_port&gt;Encrypt config file with gpg:::    $ gpg --encrypt --armor --output smtp.cfg.asc -r &lt;your-gpg-user-id-name&gt; smtp.cfgand remove temporary ``smtp.cfg`` file!Usage-----Examples~~~~~~~~Autocompletion:::    $ awsenv&lt;TAB&gt;&lt;TAB&gt;    prod stage testUse TEST access keys:::    $ awsenv testUnset AWS access keys for current shell:::    $ awsenv unsetRotate PROD access keys:::    $ awsroll prodRotate access keys for all environments:::    $ awsrollRotate access keys for all environments using gpg agent, and send them to the email:::    $ aws-roll-keys.py -a -e all -s &lt;email@domain.org&gt;Rotate access keys for TEST environment and send info to the email:::    $ aws-roll-keys.py -e test -i &lt;email@domain.org&gt;.. _awscli: https://pypi.org/project/awscli/</longdescription>
</pkgmetadata>